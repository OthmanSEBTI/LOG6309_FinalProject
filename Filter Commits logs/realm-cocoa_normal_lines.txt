Add empty changelog section
Release 10.32.3
Add the arm64 slice to the watchos objc package
Update installation tests to not rely on the "latest" redirect
Work around Carthage sometimes using the static framework for iOS
Use Xcode 13 for watchOS/tvOS Carthage installation tests
Use XCFrameworks in the Carthage installation examples
Update the deployment target on examples targetting unsupported versions
Set the macOS deployment target for catalyst installation examples
Add empty changelog section
Build the Carthage release with Xcode 14.1 (#8013)
Release 10.32.1
Add some error logging when baas requests time out
Upgrade core to 12.11.0
Change Realm.Error to a typealias for RLMError
Extract some duplicated code
Add empty changelog section
Release 10.32.0
Recovery client reset (#7938)
Add empty changelog section
Release 10.31.0
Bump the deployment target of the tvOS example to tvOS 12
Upgrade to core 12.9.0
Do not show an error message in cases where `RLMProgressNotificationToken` session is already deallocated. Now `RLMProgressNotificationToken` and `ProgressNotificationToken` hold a strong reference to the sync session, keeping it alive until the token is deallocated or invalidated. (#7864)
Update README.md
Check conformance to NSFastEnumeration before iterating (#7966)
Add Xcode 14.1 to CI testing and drop 13.3.1
Add empty changelog section
Release v10.30.0
Rename authenticationDidCompleteWithError: (#7951)
Upgrade to core 12.7.0
Add empty changelog section
Release 10.29.0
Update to core 12.6.0
Add Sectioned Results (#7888)
Remove export compliance clause (#7948)
Update config.yml (#7944)
Asymmetric Sync (#7880)
Add empty changelog section
Release 10.28.7
Test evolution mode on macOS rather than iOS
Don't try to download a release zip when testing evoluation mode
Try killing existing xctest processes before running installation tests
Link libcompression in the static installation example
Disable bitcode when building with Xcode 14
Add Xcode 14 to the release package
Change JWT expiration
Add empty changelog section
Bump Core version to 12.5.1 (#7916)
Add empty changelog section
Update to core 12.5.0 (#7907)
Add empty changelog section
Release 10.28.4
Update to core 12.4.0
Add empty changelog section
Release v10.28.3
Ensure sync sessions stay alive while there is a pending error (#7895)
Test both flexible and partition-based sync Realm init
Reduce the server polling period further and disable some unused things
Add some missing test cleanup
Lengthen some overly short timeouts in tests
Make RLMSyncManager.errorHandler atomic
Update SwiftUI sync tests for changes to the flexible sync API
Rework sync config initialization
Switch to using node 16 for tests
Add InitialSubscriptions and rerunOnOpen to the copy method (#7873)
Add empty changelog section
Release v10.28.2
Upgrade to core 12.3.0 (#7869)
Allow  to be used from RealmSwift's Cocoapods (#7867)
Only call the `initialSubscriptions` callback when it should be called (#7851)
Add empty changelog section
Update a leftover reference to Xcode 13.4
Release 10.28.1
Revert documentation change to object(ofType:forPrimaryKey:) (#7827)
Bump the deployment target for the examples
Update the UI tests to work with iOS 16
Bump the deployment target to iOS 11 when building with Xcode 14
Temporarily disable tvos and watchos on Xcode 14
Add a missing @MainActor on a test
Add Xcode 14 to CI
Work around a Swift 5.7 type checker bug
Replace Xcode 13.4 with 13.4.1
Update documentation for Object.primaryKey() to specify datatypes (#7735)
Add empty changelog entry
Release 10.28.0
Upgrade to core 12.1.0 (#7821)
Flexible Sync: Additive Changes 2/2 (#7811)
Updated services naming and links for documentation
Update README with new Sync naming (#7820)
Flexible Sync: Additive Changes 1/2 (#7805)
Add empty changelog section
Release v10.27.0
Wait longer for the translator as 5 minutes apparently isn't always long enough
Mostly eliminate uses of try! in sync tests
Upgrade to core 12.0.0
Add support for `@AsyncOpen`/`@AutoOpen` property wrappers with flexible sync. (#7727)
Add empty changelog section
Add RLMEvent.h to the podspec
Release 10.26.0
Move the closure argument to commitAsyncWrite to trailing posiiton
Rename isGroupingAllowed to allowGrouping
Rename to Events and mostly drop the "audit" naming
Port the audit SDK
Upgrade to core v11.17.0
Lower minimum version for more concurrency extensions (#7792)
Disable a new swiftlint rule that we can't follow yet
Add Xcode 13.4 to CI
Drop Xcode 12 support (#7793)
Speed up many of the sync tests
Deep-copy SyncConfig when opening Realms to fix some data races
Speed up the polling interval for the test server
Upgrade to core v11.15.0 (#7773)
Asynchronous transactions, Swift API (#7576)
Replace Xcode 13.3 with 13.3.1
Upgrade to core 10.14.0
Async write transactions ObjC API (#7551)
Add empty changelog section
Update to core 11.13.0 (#7726)
Add .discardLocal client reset mode. (#7662)
Move equality operator to Results and AnyRealmCollection (#7716)
Change configuration logic in ObservedResults (#7487)
Allow async await to be used in all supported OS's (#7720)
Migrate to HTTPS endpoint
Allow passing of frozen object using `append` in SwiftUI (#7674)
Add empty changelog section
Update to core v11.12.0 (#7707)
Add empty changelog section
Switch to building the Carthage release with Xcode 13.3 (#7699)
Add empty changelog section
Release 10.24.0
Add a TMPDIR fallback for download-core.sh (#7690)
Set a more sensible timeout for requests in tests
Retry creating the admin user if it fails, as sometimes the server isn't ready yet
Do a better job of waiting for baas to start
Upgrade to latest mongo and Go versions for baas tests
Upgrade to core 11.11.0
Add ability to use type safe queries in SwiftUI (#7518)
Add empty changelog section
Release v10.23.0
Don't set a TEST_HOST for the UI tests (#7677)
Add timeouts to all semaphore waits in sync tests
Update to a newer baas version
Skip async/await tests when running with tsan enabled
Make some overly-short timeouts longer
Wait for pending network requests to complete in sync test teardown
Exit early if the flexible sync tests fail to set up
Update the last upgrade check version
Build docs with Xcode 13.2 for now as jazzy doesn't support 13.3 yet
Add Xcode 13.3 to CI
Work around compiler crashes with Xcode 13.3 (#7672)
Simplify cocoapods setup (#7661)
Update email in CONTRIBUTING.md and podspec's (#7630)
Remove Mixpanel URL (#7638)
Add ability to delete a user (#7611)
Add ability to export local Realm to synced Realm (#7613)
Adding missing support for `IN` queries to primitives types on Type Safe Queries. (#7636)
Add support of arm64 in Carthage build (#7158)
Add empty changelog section
Release v10.22.0
Add Flexible Sync (#7590)
Disable arm64 in test builds for Carthage
Add empty changelog section
Release v10.21.1
Upgrade to core 10.8.0 (#7602)
Add empty changelog section
Release 10.21.0
Add support for custom type mappings (#7575)
Allow collections of all types in migrations. (#7510)
Don't declare all Objects as conforming to Identifiable
Allow initializing dictionaries entries with null object values (#7560)
Use @_marker where applicable
Rework the protocols used for collection elements
Move _rlmGetPropertyOptional to _PersistableInsideOptional
Detangle _HasPersistedType from _Persistable
Rename _OptionalPersistable to _PersistableInsideOptional
Decouple _RealmSchemaDiscoverable from RealmCollectionValue
Replace Xcode 13.2.0 with 13.2.1 (#7581)
Second stage of repo name change (#7571)
Prepare for name change of repo (#7570)
Add metadata property to RLMUserProfile (#7523)
Rework querying on dictionaries
Temporarily disable sum and average aggregate tests on floating point types
Adjust where bridging is done for query values
Rework RealmCollection tests a bit
Refactor RealmCollection and eliminate lots of duplicated code
Rework objective-c bridging
Release 10.20.1
Require Xcode 13.2 for async/await (#7568)
Require Xcode 13.2 for async/await (#7568)
Add Projections (#7375)
Remove the concurrency framework workaround needed with Xcode 13.2 betas (#7561)
Added issue-needs-attention GHA
Add Xcode 13.2 and drop 12.2 (#7501)
Add missing `Indexable` support for UUID (#7546)
Update README.md
Update README.md
Update README.md
Update README.md (#7541)
Add empty changelog section
Release 10.20.0
Upgrade to core 11.6.1 (#7533)
(DOCSP-19477): Add details to ObservedResults property wrapper docs
Remove _defaultTestSuite()
Add support for using enums in collections
Refactor the Swift collection tests
Add post clone script for SwiftLint (#7524)
Allow `@AutoOpen` to return a realm for any server error on synchronisation (#7512)
Conform `@ThreadSafe` and `ThreadSafeReference` to `Sendable` (#7505)
Add empty changelog section
Release v10.19.0
Extract some duplicated code
Upgrade to core 11.6.0
Making a timing-sensitive test more reliable
Revert a breaking change to Realm.writeCopy() on synchronized Realms
Searchable Extension (SwiftUI) (#7492)
Make Realm async init @MainActor
Add UserProfile (#7469)
Add support for type safe queries (#7419)
Change default request timeout from 6 seconds to 60 seconds (#7497)
Add empty changelog section
Release v10.18.0
Add Xcode 13.1
Multi-User Support for @AutoOpen and @AsyncOpen (#7420)
Add empty changelog (#7476)
Release version 10.17.0 (#7471)
Threadsafe Wrapper (#7402)
Add empty changelog section
Release v10.16.0
Update README.md (#7452)
Add  `async` APIs for `EmailPasswordAuth.callResetPasswordFunction`, `User.linkUser`, `MongoCollection` and user functions
Add empty changelog section
Release 10.15.1
Switch to building the Carthage release with Xcode 13
Add #canImport(_Concurrency) flag to code that uses the Concurrency module (#7442)
Only use the TestHost app for testing on devices
Update the SwiftUI test app to work on iOS 14.5+
Add empty changelog section
Release v10.15.0
Ensure that the source version is pinned while dispatching changesets to another queue
Upgrade to core 11.4.1
Speed up many of the sync tests (#7429)
Add async Realm.asyncOpen and App.login methods (#7367)
Add empty changelog section
Release v10.14.0
Allow indexing PersistableEnum properties (#7425)
Refactor some slow-to-compile Swift functions
Skip generating debug symbols when testing SPM for PRs
Revert "Temporarily remove Xcode 13 from the release pipeline as beta 3 is broken"
PartialKeyPath filtering on change notifications (#7411)
Update to core 11.3.1
Update README.md (#7421)
Add Codable support to Map (#7418)
Update compability template (#7415)
Add empty changelog section
Update Changelog
Release v10.13.0
Add issue forms (#7383)
Work around canImport(Combine) being broken in Xcode 13
Loosen protocol requirements from ObjectKeyIdentifiable to Identifiable
Update `RLMSyncManager` documentation referring to it as a singleton. (#7388)
fix the typo in the changelog (#7385)
Defer the setting of value in ObservedResults.Storage (#7352)
Add empty changelog section
Release v10.12.0
Update to core 11.2.0
Key Path Filtering for Change Notifications (#7249)
Add AsyncOpen & AutoOpen property wrappers for SwiftUI (#7329)
Update README (#7339)
Add empty changelog section
Temporarily remove Xcode 13 from the release pipeline as beta 3 is broken
Release v10.11.0
Add type safe methods for aggregatable and sortable operations on collections (#7342)
Update core to v11.1.1 (#7354)
Add objects(at indexes:) for collections (#7307)
Add _name(for:PartialKeyPath) method
add :nodoc:
Try fix doc
remove need for duplicated _nilValue
Release v10.10.0
Update the examples
Improve performance of instantiating RLMRealm instances with large schemas
Do more work in the performance tests
Rename to_optional to toOptional
Switch backingCollection back to just an ivar
Add an explanatory comment for accessInstanceVariablesDirectly
Reduce the visibility of some types
Add more tests and fix some bugs
Add Map.merge()
Don't run swift perf tests on catalyst
Add more tests
Add better compile-time checking of optionality
Optimize modern property accessors a bit
Rename everything to @Persisted
Add support for enums
Start adding tests for property wrappers
Add Codable support
Add a check for mixed properties declared as optional
Add property wrapper-based model definitions
Support passing AnyRealmValue in collections for object creation
Add empty changelog section
Release 10.9.0
Update to core 11.0.4
Add some missing tests for dictionary things
Actually delete the objects when a dictionary is passed to -[RLMRealm deleteObjects:]
Retry Custom Confirmation (#7103)
Add empty changelog section
Release 10.8.1
Update to Xcode 12.5.1
Update the root URL for the API docs
Don't create unmanaged accessor classes for types which don't need it
Move stitch files to a directory ignored by spm
Remove conditionally existing files from Package.swift
fix testSyncErrorHandlerErrorDomain
fix testSyncErrorHandlerErrorDomain
Add empty changelog section
Release 10.8.0
Update stitch version
Update to core v11.0.3
Improve build time of PrimitiveArrayPropertyTests
Consume dictionary change deletions from Core
Update CHANGELOG
Release 10.7.7
Move Map notification tests into their own class
Remove commented out code
Try solve issue with failing map notification tests
Upgrade the Travis CI build to Xcode 12.4
Update tests to work with the new constant literal functionality
Add Xcode 13 to CI jobs
Drop support for Xcode 11
try solve issue with Map notification test
try solve issue with Map notification test
Bump core version to 11.0.1
Add CHANGELOG entry, still need to confirm Studio version
Consume change deletions from Core
Release v10.8.0-beta.2
Add RLMDictionary / Map Datatype (#7084)
Added Changelog for fix
Upgrade to core 11.0.0-beta.5
Add stitch rules for all types used in tests
Update stitch version
Silence deprecation warnings for RealmOptional in tests
Add some more focused tests for the new functionality
Don't convert non-true/false int8 values to bool
Partially combine RealmCollectionValue and _RealmSchemaDiscoverable
Add the Impl directory to the Swift podspec
Rework how obj-c accesses Swift things
Eliminate a bunch of repeated StateObject reads
Make RealmCollectionEnumerator internal
Mixed datatype (#7170)
Address PR comments
Add New Test classes to `project.pbxproj`
Address PR comment
Update formatting
Remove unnecessary return
Rename `appForAppId` function
Refactor app creation for a partition value
Move partition tests to new class
Address PR comments
Add Swift/objective C Sync test for distinct primary keys objects and partition values types
Added support for multiple partition types/primary keys on server test cases
Add test for UUID RLMBson/Bson convertion
Add Server modifications for distinct primary key object test and dynamic partition values app creation
Add UUID Sync tests
Add UUID as Primary Key test
Add support query by UUID primary key
Add Sync tests for RLMSet / MutableSet, RLMArray / List (#7190)
Add MutableSet<> / RLMSet datatype (#7051)
Add UUID data type (#6958)
Add empty changelog section
Stop testing 11.3 SPM on CI
Release 10.7.6
Upgrade to core 10.7.2
Add empty changelog section
Release 10.7.5
Remove extra semicolons (#7222)
Update ISSUE_TEMPLATE.md (#7215)
Add empty changelog section
Release 10.7.4
Switch the obj-c release package to being a Xcode 12 build
Update release packaging for Xcode 12.5
Remove class keyword from RealmEnum example (#7167)
Add empty changelog section
Release 10.7.3
Bump LastUpgradeVersion to 12.5
Upgrade to core 10.6.0
Add test for performing multiple writes inside a notification
Create a xcframework package for Carthage (#7195)
(#7181) Update object schema when adding object to the realm
Add guard to KVO subscription to prevent multiple observer removals to occur unnecessarily (#7132)
Enhance migration tests. (#7162)
Add changelog entry for podspec change
Remove ** from header paths (#7168)
Update Objective C PerformanceTest to latest API changes
Upgrade to core 10.5.5
Add empty changelog section
Release 10.7.1
Upgrade to core 10.5.4
Enhance Objective-C migration example. (#7126)
Tests for new migration from RLMObject to RLMEmbeddedObject (#7094)
Add empty changelog section
Release 10.7.0
Upgrade to core 10.5.3
Upgrade to core 10.5.1
Implement queries on lists of primitives
Add empty changelog section
Revert an incorrect change to the dynamic framework installation example
Add SwiftUI enhancements (#7045)
Release 10.6.0
Maybe fix testCompactOnLaunch
Give swift multi-process tests explicit obj-c names
Stop trying to copy data in TimeoutProxyServer after the sender closes the connection
Upgrade to core 10.5.0
Add empty CHANGELOG entry
temporarily disable versioned docs in podspec (#7110)
Extend Migration examples (Swift). (#7102)
Release 10.5.2
Remove the check for lingering realm files between CI runs
Disable the main thread checker when running tests in Xcode 11
Download core as a pre-build event in the scheme rather than as a build target
Also set CODE_SIGNING_ALLOWED=NO on jekins
Add Xcode 12.5 to PR matrix
Add @available attribute to ObjectKeyIdentifiable (#7098)
Remove unused variable
Change RealmSwift Analytics (#7073)
Allow enumerating objects of types which are no longer present in the schema (#7064)
Upgrade to Xcode 12.4 (#7071)
"Thaw" frozen objects (#6975)
Propagate error code to object store (#7061)
Temporarily disable Cocoapods Catalyst CI tests (#7059)
Use realm::Timestamp instead of MongoTimestamp for RLMBSONTypeDatetime (#7062)
Upgrade to core 10.4.0 (#7063)
Add unit tests for non-bridged numeric property values (#7057)
Add empty changelog section
Add filter tests for non-bridged types. (#7058)
Remove the `weak` attribute from the `user` property in `Functions`.
Release 10.5.1
Upgrade to core 10.3.3 (#7042)
Refactor parts of RLMQueryUtil to reduce template instantiations (#7005)
Upgrade to Xcode 12.3 (#7004)
Release 10.5.0
Extract a bunch of duplicated code from Combine sync tests and re-enable some tests that now work
Update some tests added after the initial SPM port
Add initializers for FindOneOptions with argument labels
Log what failed in testAsyncOpenCombine
Switch to using HugeSyncObject in testAsyncOpenCombine
Remove some old header symlinks
Upgrade to core 10.3.2
Add the new core filename to gitignore
Drop the 'synchronously' prefix in a few more places in tests
Wait for the server to start up before running any sync tests
Add support for running the object server tests from the swift package
Define REALM_DEBUG for debug builds of core
Update the PR matrix for monorepo
Remove the git submodule for ObjectStore
Upgrade to core 10.3.1
Add stubs for the new data types
Update LICENSE
Switch to using the monorepo xcframework
Remove objectstore files from the xcode project and podspec
Switch the swift package to use the monorepo
Release 10.4.0
Make sure we don't use a baas process from a previous CI job
Upgrade to core 10.1.4
Add Combine support for App and User (#6977)
Remove arm64 exclusion (#6982)
Release 10.3.0
Update the baas version used for tests
Upgrade to sync 10.1.4
Actually enable encryption in the encryption-enabled tests (#6971)
Add Google OpenId Credential (#6972)
Add empty changelog section
Release 10.2.0
Update installation examples to use the xcframework
Actually run the dynamic framework installation tests on the thing being packaged
Update the Swift playground example
Update release packaging for the examples
Delete the RubyMotion example
Package releases as xcframeworks
Add RLMSupport.swift to RealmSwift (#6886)
Release 10.1.4
Upgrade to core 10.1.3
Remove excluded archs from macOS platforms
Add empty changelog section
Release 10.1.3
Add Xcode 12.2 to the release package
Actually run the SPM installation tests on Jenkins
Update a broken installation example
Test archiving the app in installation tests rather than building for device
Disable a test that no longer applies on iOS 14.2
Bump the last update check version
Add Xcode 12.2 to the PR job matrix
Add _id to the swiftlint whitelist
Extract MongoClient tests to a separate test suite
Upgrade mongodb version used for tests
Reuse a single app for most sync tests
Create apps on demand rather than at the start of each test
Shift around where BaaS files are installed and run it from a temp directory
Implement missing sync tests
Update to latest object store
Not allow set 'deleteRealmIfMigrationNeeded' when sync is enabled. (#6931)
Add testing for Mac Catalyst using Cocoapods (#6926)
Release 10.1.2
Upgrade to core 10.1.1
Improved metrics (#6894)
Release 10.1.1
Set the minimum cocoapods version in the podspec (#6892)
Support marking embedded objects as ObjectKeyIdentifiable (#6890)
Add empty changelog section
Release 10.1.0
Add Combine support for `Realm.asyncOpen()` (#6880)
Consume Sync XCFramework via Cocoapods (#6710)
Add Xcode 12.1
Release v10.0.0
Release 10.0.0
Update some obsolete changelog messages
Remove the file format version from the changelog
Add final v10 changelog
Add result type callbacks (#6870)
* Throw an exception for Objects that have none of its properties marked with @objc. (#6844)
Release 10.0.0-rc.2
Add return Result<Value, Error> for paired returns (#6864)
Add BSON null type (#6868)
Update the obj-c framework renaming for RealmSwiftObject
Test building in evolution mode on CI
Add support for swift library evolution mode
Assorted formatting fixes
Switch back to marking primary keys as indexed
Rework embedded object tests to not rely on schema cycles
Update core and object store
Add thrown exception when Appid is empty string (#6851)
Release 5.5.0
Add testEmbeddedObjectQuery (#6729)
Update CONTRIBUTING.md
Add onOpen(:) to watch Combine call (#6833)
Save NotificationToken from Combine call (#6816)
Upgrade to core 6.1.4
Release 10.0.0-rc.1
Define Swift `Credentials` as an enum (#6826)
Change some methods on RLMApp, RLMUser to properties (#6825)
Add empty changelog section
Release 5.4.7
Upgrade to core 6.1.3
Release v10.0.0-beta.6
Change Credential Google auth parameter (#6820)
Rename Realm.Publishers to RealmPublishers (#6794)
Actually upgrade to core 6.1.2 (#6819)
Add empty changelog section
Release 5.4.5
Upgrade to core 6.1.2
Add empty changelog section
Release 5.4.4
Upgrade to core 6.1.1
Actually regeneration .jenkins.yml
Add the installation method to the builder analystics
Add empty changelog section
Release 5.4.3
Add empty changelog section
Release 5.4.2
Work around Carthage/Xcode 12 issues
Update release packaging for Xcode 12
Add empty changelog section
Release 5.4.1
Update core and object store (#6769)
Switch to building with Xcode 11.7 (#6759)
Add empty changelog section
Call the correct isEqual function for Decimal128
Release v10.0.0-beta.5
Py/combine (#6757)
Polish ObjectId & Decimal128 (#6742)
Don't explicitly link AuthenticationServices.framework
Don't try to run tests if creating the app failed
Add missing exception translation to RLMApp
Don't crash when the client reset test fails
Identity refactor/naming (#6745)
Use correct `App::log_out` method from `[RLMUser logOutWithCompletion]` (#6765)
Add multiple realm apps support (#6755)
Change API acronym to uppercase (#6758)
Remove unused legacy sync classes/methods/properties (#6753)
Add empty changelog section
Release 5.4.0
Upgrade to core 6.0.24
Add empty CHANGELOG entry
Lm/v10 cleanup & beta.4 release (#6727)
Add empty changelog section
Release 5.3.6
Work around Xcode 11 crashing when given Xcode 12-built debugging symbols
Skip a test on iOS which relies on file locking
Upgrade to core 6.0.23
Make setup_bass.rb read STITCH_VERSION from dependencies.list (#6726)
Update dependancies and add tests for null partition value (#6723)
Update no-response.yml
Change Configuration.objectTypes property type (#6703)
Add Watch functionality
Add empty changelog section
Release 5.3.5
Upgrade to core 6.0.19
Remove the hacks for building for catalyst on 10.14
Rework how core is downloaded
Switch to using the core/sync xcframework
Add empty changelog section
Release 5.3.4
Upgrade to core 6.0.18
v10.0.0-beta.3
Add -ObjC linker flag (#6695)
Add empty changelog section
Release 5.3.3
Upgrade to core 6.0.14
Remove the __bit_reference workaround since it's been fixed in Xcode 12b3
Temporarily disable building arm64 for macOS and simulators
Revert "Temporarily disable building for the 64-bit watch simulator"
Add support for the 64-bit watchOS simulator added in Xcode 12
Add getter/setter for associated object in category (#6663)
Add empty changelog section
Release 5.3.2
Update to core 6.0.12
Add AppClip Example (#6634)
Create no-response.yml
Release 5.3.1
Upgrade core and object store
Refactor RealmServer to use Result rather than value/error tuples
Update ISSUE_TEMPLATE.md
Bump travis to 11.6 too
Add Xcode 11.6
Add empty changelog section
Release 5.3.0
Upgrade to core 6.0.9
Hide the spm installation example project from Carthage
Add Apple authentication helper (#6589)
Add missing items in setup_baas.rb's output paths
Remove incorrect project changes
Use precise lifetime for TimeoutProxyServer
Add admin push service
Add admin sdk, clean up test process
Rename RealmCollection.publisher to RealmCollection.collectionPublisher
Add Realm.objectWillChange
Add RLMPushClient (#6569)
Add empty changelog section
Release 5.2.0
Don't download core twice in cocoapods-setup
Update core and objectstore
Update the list of expected error codes when resetting simulators
Temporarily disable building for the 64-bit watch simulator
Upgrade to core 6.0.7
Update changelog
Work around Xcode 12b1 shipping a broken version of __bit_reference
Bump the iOS deployment target to 9.0 in more places
Add Xcode 12 to the PR matrix
Bump the iOS deployment target to 9.0
Bump the deployment target for the Tests target to macOS 10.14
Maybe fix a race condition in testCompactOnLaunch
Parallelize creating stitch apps a bit
Speed up and simplify getting the appId in child processes
Use the appId as the partition value in more tests
Maybe fix a race condition in sync tests
Add missing quoting to run_baas.rb
Drop support for Xcode 10
Add empty changelog section
Release 5.1.0
Rename classes and move calls to match other SDK's (#6575)
Allow opening full-sync Realms in read-only mode
Add empty changelog section
Release 5.0.3
Property initialize the schema for frozen Realms
Add error checking for freezing objects in the transaction they were created in
Actually implement -[RLMObject isFrozen]
10.0.0-beta.2 (#6563)
Update CHANGELOG.md
Add empty changelog section
10.0.0-beta.1 (#6558)
Add some quoting to make CodeFactor happy
Add MongoClient functionality (#6543)
Don't use xcpretty for packaging jobs
Add more robust testing for BSON and bad auth sessions (#6551)
Don't reset simulators for building packages
Try to make simulator deletion more robust
Maybe fix installation examples
Print the hostname at the start of some CI jobs
Make swift-version -u clean
Update README.md
Add empty changelog section
Release 5.0.2
Limit the number of simulators for more Carthage jobs
Upgrade core and object store (#6547)
10.0.0-alpha.6
Update ObjectStore to latest v10
Remove cert challenge; add default configuration for syncManager initialization (#6544)
Add next generation sync (#6481)
Add empty changelog section
Work around Carthage/xcodebuild bugs
Release 5.0.1
Avoid depending on simulators existing for jobs that don't run anything
Only verify the Swift pod on PR jobs
Disable debug symbol generation in cocoapods installation examples
Prelaunch the Apple TV simulator for tvos jobs
Wait for the dyld cache to update after creating a simulator
Disable warnings when building ReactiveCocoa for the example
Upgrade ROS version used in tests and switch to node 10
Skip some redundant simulator resetting
Only initialize nvm for jobs which need it
Maybe speed up swift-version.sh on CI
Avoid building Realm.framework twice in some CI jobs
Add Xcode 11.5
Initialize generic properties on frozen Swift objects
Update CHANGELOG.md
Update CHANGELOG.md
Update build.sh
Update CHANGELOG.md
Add empty changelog section
Add missing tvOS @available checks
Release 5.0.0
Remove some leftover debugging code
Maybe fix swiftlint failure
Add API documentation for Combine
Add a SwiftUI example
Add Combine publishers for Realm types
Add the thread-local object to object change notifications
Add empty changelog section
Release 5.0.0-beta.6
Reorder switch clauses so that the cocoapods dynamic test actually gets used
Release 5.0.0-beta.5
Use the correct version of the frameworks in dynamic installation tests
Release 5.0.0-beta.4
Bump objectstore
Adjust some naming
Add stitch function and api key auth credentials (#6468)
Add RealmApp class, Swift ProviderClients (#6470)
Remove ROS; Add baas setup and runscript; Re-enable some auth tests (#6472)
Don't try to open the Realm for notifications on the source queue
Add support for notifications delivered to a different queue
Implement scheduler-confined Realms
Add empty changelog section
Upgrade to Xcode 11.4.1
Upgrade to Xcode 11.4.1
Release 4.4.1
Upgrade to Xcode 11.4.1 (#6474)
Update to latest object store
Add support for embedded objects (#6457)
Add release and xcode upgrade documentation (#6463)
Refactor PrimitiveArrayPropertyTests a little to reduce the compiled size
Add basic docs for ObjectId and Decimal128
Consolidate foundation -> decimal128 conversions
Add an explanation of the runtime type swapping for objectid and decimal128
Use ObjectId::is_valid_str() to validate input
Add support for object id and decimal128 property types
Target watchOS 5.0, not 6.0
Bump the deployment targets for the examples
Update the podspec
Upgrade to core 10.0.0-alpha.3
Integrate Object Store 'App' functions into Cocoa (#6455)
Bump rake from 10.3.2 to 12.3.3 in /examples/ios/rubymotion/Simple (#6442)
Add empty changelog section
Release 4.4.0
Explicitly mark objc bridging functions as internal
Adjust the typed KVO tests to work with Xcode 11.4
Switch to explicitly listing source files in Package.swift
Switch to building the watchOS simulator slice for Series 4
Update framework header merging to work with Xcode 11.4
Remove Xcode 10.0 and 10.1 and add Xcode 11.4
Add a changelog entry for #6454
Allow users to optionally set a file path for synchronized realms (#6454)
Add RealmApp structure; Add basic login; Disable ROS Tests (#6439)
Bump the deployment target for the static framework target
Remove the sync permissions and privileges code
Upgrade to sync v10 alpha 2
Don't automatically mark primary keys as indexed
Move the changelog entries to the correct section
Migrate Core and Sync to 10.0.0-alpha.1 (#6437)
Add empty changelog section
Add object_changeset.cpp to the iOS static target
Release 5.0.0-beta.3
Maybe fix a race condition in a test
Add support for frozen objects
Upgrade to latest core/sync/objectstore
Remove the table accessor cache on RLMClassInfo
Remove the link target type cache from RLMClassInfo
Explicitly set the swift version for the watchos swift dynamic installation example
Update to core beta 3
Bump version to 5.0.0-beta.2
Update Xcode version for dynamic framework installation test
Add -fno-aligned-new to the podspec for armv7
Actually test building for device in the CocoaPods installation test
Update CHANGELOG.md
Update to core 6.0.0.beta.2
Iterate over a snapshot of the table in migrations
Bump version to alpha.2
Build armv7 with -fno-aligned-new
Work around the current core release having an extra file in the src dir
Handle core version numbers with a hyphen in them
Update to core 6
Add empty changelog section
Release 4.3.2
Upgrade to sync 4.9.5 (#6421)
RCOCOA-532 - property_copyAttributeList produces memory leak (#6420)
Allow returning a value from realm.write() (#6415)
Add empty changelog section
Release 4.3.1
Upgrade to core 5.23.8 (#6382)
Set the SDKROOT for catalyst in a way that doesn't break Carthage
Run more of the CI jobs only on the oldest and newest Xcode versions supported
Drop the 10.3 spm test from the CI matrix
Don't run swift perf tests on catalyst
Add catalyst test targets to the CI PR matrix
Add support for running the tests on Catalyst
Use the correct Documents directory for catalyst
Add empty changelog section
Release 4.3.0
Add an option to make non-fatal errors cancel async opens
Honor the user-set timeout for login requests
Use a dispatch timer rather than NSTimer for token refreshes
Rework test lifecycles a bit to not require swizzling -[RLMSyncManager sharedManager]
Export sync timeout options
Add the ability to set the sync logger
Upgrade to sync 4.9.0
- Update "Getting Help" with more specific mention of Stack Overflow vs GitHub - Remove retired Newsletter link
Add empty changelog section
Release 4.2.0
Update Xcode versions for packaging examples
Explicitly use the rbenv-installed ruby to build docs
Update CI matrix for Xcode 11.3
Add Realm.fileExists() and Realm.deleteFiles()
Replace Xcode 11.2 with 11.2.1 (#6360)
Add empty changelog section
Release 4.1.1
Test the swiftpm build with asan and tsan on CI (#6352)
Properly propagate update policies over lists (#6347)
Add empty changelog section
Reset simulators before running installation tests
Release 4.1.0
Split the cocoapods ios-dynamic test into a separate CI job
Restore support for @objc enums on Swift objects
Update to sync 3.8.2 (#6344)
Add empty changelog section
Release 4.0.0
Lazily initialize the backing storage for unmanaged Lists
Move ISO8601Formatter to RLMUtil
Rework managed object initialization
Add missing docs
Convert LinkingObjects to a struct
Switch to the REST-based permissions API
Re-enable the Realm-level permissions tests
Mark all previously deprecated functionality as unavailable
Remove old rename helpers for functions removed in 3.0
Change some wrapper types to structs
Remove the generic type parameter from SyncSubscription
Rework Swift schema discovery
Forward the url_prefix from auth responses to the sync session
Update build.sh
Add empty changelog section
Release 3.21.0
Avoid building the Realm framework twice in CI jobs that test examples
Add Xcode 11.2 builds
Make rlm_lldb.py compatible with Python 3 (#6290)
Add empty changelog section
Actually set the version to 3.20.0
Release 3.20.0
[RCOCOA-1] Add custom refresh token credentials (#6311)
Add empty changelog section
Release 3.19.1
Upgrade to sync 4.7.11 (#6309)
Add empty changelog section
Release 3.19.0
Upgrade to core 5.23.5 (#6276)
Add internal section with core/sync version information
[ObjectSchema] Expose objectClass from RLMObjectSchema private interface
[RLMRealm] Add shorthand method -[RLMRealm transactionWithoutNotifying:block:] to omit the error parameter and return value
[RLMRealm] Upate method signature to -[RLMRealm transactionWithoutNotifying:block:error:] based on feedback in PR
[Realm] Add 'Realm.write(withoutNotifying:_:)' to match Objective C implementation
[RLMRealm] Introduce new '-[RLMRealm transactionWithBlock:withoutNotifying:error:]' method to pass ignored notification tokens and add unit test
[RLMRealm] Update '-[RLMRealm commitWriteTransaction:]' to call through to '-[RLMRealm commitWriteTransactionWithoutNotifying:error:]' with empty array ('@[]') in order to prevent duplicate implementations
Add empty changelog section
Release 3.18.0
Explicitly set the swift version for the watchOS Carthage installation test
Call reset-simulators before test-ios-static in post-build tests
Update device type used for watchOS installation tests
Build Carthage package with Xcode 11
Use a sync build which has a catalyst library
Reset simulators before building Carthage packages
Update some description tests for iOS 13
Try to work around Xcode 10 simctl not producing valid JSON when running on a machine with Xcode 11 installed
Update the check for unsupported devices for the new error code Xcode 11 produces
Run swiftlint on the examples
Add a catalyst framework to the release package
Add Xcode 11 to the build targets
Add support for building a library for catalyst
Update RLMPlatform to actually work for all platforms
Write a script to generate .jenkins.yml
Rework and simplify release packaging build scripts
Drop support for Xcode 9
Don't build a xcframework for build.sh build
Add a working xcframework target
Update core/sync/object store (#6242)
Clarify documentation for RLMRealmRefreshRequiredNotification (#6239)
Deprecate nickname provider (#6232)
Add empty changelog section
Bump version to 3.17.3
Release 3.17.2
Update dynamic framework installation tests to use Xcode 10.2.1
Bump swift version for the examples projects to 4.0
Drop Xcode 9.2 and 9.3 and add 10.3
Add empty changelog section
Release 3.17.1
Update to core 5.23.1
Add support for cancelling async opens
Add empty changelog section
Release 3.17.0
Make RealmOptional and List conform to Codable
Make testCompactOnLaunch more reliable
Add missing validation for observing unmanaged LinkingObjects
Point the core dependency at master
Set TEST_HOST for the ios static tests correctly
Also build a swift module in the static version of RealmTestSupport
Exclude nonsync.swift from the podsepc
Switch reset-simlators.rb to us iPhone 8 simulator
Mark some helpers that are public for tests as nodoc
Add a SwiftPM package
Add empty changelog section
Release 3.16.2
Add an expiration time to the dummy subscription so it gets cleaned up
Call the completion handler on the correct queue
Ensure we get permission objects when using asyncOpen on a query-based Realm
Update RLMObjectStore.mm
change not to ignore unexpected files (#6175)
Add a changelog entry
Remove remaining code for pre-3.2 Swift
Build a universal xcframework when using Xcode 11
Build a xcframework rather than lipoing together libraries
Switch the run destination for iOS tests to iPhone 8 as Xcode 11 no longer supports 6
Disable a test which crashes the beta 1 compiler
Work around Swift 5.1 not explicitly setting the ivar name for String properties
Release 3.16.1
Check the runtime type for a primary key in realm.create() rather than the static type
Add empty changelog section
Release 3.16.0
Use objectstore async open
Updated Results.swift example docs for "observe"
Renamed "changed" to "modified" to align with JS
Add an option to only set the properties which actually change
Update Sync.swift docs with deprecation warning. (#6110)
Add empty changelog section
Release 3.15.0
Add changelog entries for the core/sync version bump
Leave the query as nil until the actual query from the subscription is available
Set RLMSyncSession.sessionState on the main thread
Improve the error message when a keypath ends in the wrong type of property
Add subscription properties and options
Add empty changelog section
Release 3.14.2
Update the request headers for existing sessions when SyncManager.customRequestHeaders is set
Run analyze-osx in a separate CI job from the osx tests
Use build-for-testing rather than build in test tasks
Remove some old build.sh stuff for Xcode 8
Switch to Xcode 10.2 for travis CI testing
Replace Xcode 10.2 with 10.2.1 in the build matrix
Add empty changelog section
Release 3.14.1
Package a valid obj-c header for Swift 5
Release 3.14.0
Set an explicit build destination for the watchos cocoapods tests
Temporarily disable the device test jobs since the machine is offline
Split the cocoapods PR job into several smaller jobs
Use _Exit() rather than abort() for interprocess crash tests
Preboot the simulator used for iOS installation tests
Update examples packaging for the new versioning scheme
Maybe fix the cocoapods installation examples
Add Xcode 10.2 release packaging
Add Xcode 10.2 to the test matrix
Add some missing @objcs in examples
Preboot the simulator we use for tests
Use https: URLs for cocoapods tests rather than ssh
Update the installation examples to work with Xcode 10.2
Bump LastUpgradeVersion to 10.2
Bump default Swift version to 4.0
Improve build.sh to download deps from another url (#6105)
added new core/sync versions in the changelog
Disable a broken test
Moved 2 items to Internal in Changelog
Improve changelog a bit
Disable the duplicate_imports SwiftLint rule as it doesn't apply to how we use modules
Downgrade to sync 3.15.1
Update to core 3.14.0 and sync 3.15.2
Minor API doc fix: Add missing categories (#6080)
Update README.md
Update README.md
Release 3.13.1
Update CHANGELOG.md
Release 3.13.0
Build with -allowProvisioningUpdates on CI
Bump objectstore
Fold RLMNewSyncSubscription into RLMSyncSubscription
Add subscription management functions
Add empty changelog section
Update CHANGELOG.md
Release 3.12.0
Add Xcode 10.1 to the test matrix
Add prebuilt binary for Xcode 10.1
Set the binding user agent separately
Update to ROS 3.13.1
Add support for setting the user agent for sync requests
Add empty changelog section
Set version to 3.11.2
Upgrade to sync 3.13.3
Add some error checking to the state cleanup for ROS tests
Only set the SkipBackup attribute when first opening a Realm
Update again
Update CHANGELOG.md
Update to latest objectstore
Add empty changelog section
Release 3.11.1
Add some missing validation to property getters and setters
Update CHANGELOG.md
Update build.sh
Release 3.11.0
Update to sync 3.12.2 (#5945)
Update build.sh
Update CHANGELOG.md
Update build.sh
Re-fix a crash on non-@objc `String?` properties
Add empty changelog section
Set version to 3.10.0
Add an iOS-only TestHost target to work around iOS static framework issues
Work around a cocaopods 1.5.3/Xcode 10 incompatibility
Update to sync 3.9.10
Update some examples to compile as Swift 4.2
Disable the prefix header for CI runs
Work around a race condition in a test
Update a renamed thing in a test
Build an arm64_32 slice for watchos
Bump LastSwiftMigration version
Test installation examples with the version of Xcode we're building Carthage libraries for
Update release packaging for Xcode 10
Run PR jobs on 9.2, 9.3, 9.4 and 10.0
Add empty changelog section
Release 3.9.0
Lengthen some test timeouts
Add support for limiting the number of objects in a sync subscription
Upgrade to ROS 3.10.3
Add an additional type hint needed by Xcode 9.3
Add support for suspending and resuming synchronization
Add a connection state property to RLMSyncSession
Override dynamicList() on DynamicObject to do the right thing
Publicly expose RLMSyncUser.refreshToken (#5908)
Release 3.8.0
Downgrade to ROS 3.9.17
Clarify some docs wording a bit
Add .cer versions of the test certificates
iOS does not have SecItemImport
Add support for SSL certificate pinning
adds a list of the supported types List can store (#5493)
Update to ROS 3.10.3
Update sync, core, and objectstore
Remove handling for the Error sync state
Explicitly list the headers for the Realm.Private cocoapods module
Build Carthage package with Xcode 9.4
Release 3.7.6
Update to sync 3.8.8
Release 3.7.5
Add Swift 4.1.2 symlink to release package
Update another test validating an exception message which changed
Update to sync 3.8.2
Update a test that checks an error message which changed
Update to sync 3.8.1
Add a test for compacting when the temporary file already exists (#5852)
Update to sync 3.7.1
Changed lhs to rhs for the right side of ascending comparison (#5806)
Update to sync 3.5.6
Code sign installation tests with no identity rather than not at all
Regenerate the cocoapods installation examples xcode projects
Update sync and object store
Release 3.7.2
Update to sync 3.5.2 (#5815)
Release 3.7.1
Work around a Xcode 8 compiler bug
Update changelog
Remove some leftover Swift 3.0 cruft
Make RealmCollectionValue conform to Equatable in Swift 4.1+
Special-case NSNull during enumeration
Remove a Xcode 8.1 workaround that now produces a warning
RLMAssertThrowsWithReasonMatchingSwift is not actually noescape
Add __attribute__((noescape)) to method definitions in addition to declarations
Add empty changelog section
Release 3.7.0
Add RLMSupport.swift wrapper
Use full sync for the permissions realm
Don't discard the values of the non-realmURL parameters when realmURL is nil
Add -[RLMSyncUser configurationWithUrl:fullSynchronization:]
Refactor method names
Deprecate initWithUser
Update changelog
Convert tests
Happy compiler
Add a missing __block in a test
Make shellcheck happy
Use an explicit schema subset for the interprocess tests
Skip the update checker checks entirely on CI
Use a nonblocking and somewhat faster filtering function for the test child processes
Explicitly use node 8 when running on CI
Update to ROS 3.4.2
Switch back to using Xcode 9.2 for the ios 8 device
Retry reset-simulators.rb entirely on error
Add some missing error checking to testOfflineClientReset
Separate more of the build jobs into separate 'build' and 'test' steps
Retry when `simctl list` doesn't actually give json output due to an error
Lengthen an overly short test timeout
Switch from using localhost to 127.0.0.1 in tests
Remove a redundant directory creation
Add more complete password reset/email confirmation tests
Rework how ROS is downloaded and launched for tests
Update ISSUE_TEMPLATE.md
Add Realm.syncSession (#5788)
Remove the slack notification for pipeline builds
Release 3.6.0
Add a link to the issue to resolve the FIXMEs
Allow setting the shouldCompactOnLaunch block for sync realms
Update to core 5.6/sync 3.3
Release 3.5.0
Add some basic password reset tests
Update to ROS 3.1.4 for tests
Make the timeout for HTTP requests configurable for tests
Add password reset wrappers to RLMSyncUser
Rework RealmOptional to work when it outlives the parent object
Release 3.4.0
Mark the preview versions of the partial sync API as deprecated
Switch the Carthage binary to Xcode 9.3
Switch to Xcode 9.3 on travis
Add a missing doc comment
Always build docs with the most recent supported version of Swift
Remove the xcode93 node label
Don't fail the build if ROS isn't running after tests complete
Add Xcode 9.3 to the PR test matrix
Add APIs to control ROS HTTP requests (#5724)
Add a changelog entry and bump the version
Ensure that the builds that require Xcode 9.3 are performed on hosts with Xcode 9.3 available.
Include Swift frameworks built with Xcode 9.3 in the release artifacts
Release v3.3.1
Update to sync 3.0.1 (#5708)
Cancel pending waits when fetching a refresh token fails
Add the RLMSyncAuthErrorMissingPath error code
Add a minimal test for RLMObject.object(forPrimaryKey:) (#5702)
Remove an obsolete build setting from Base.xcconfig (#5703)
Expose the factory methods for query objects by primary key.
Remove obsolete WholeModuleOptimazation setting
Exclude classes that are not subclasses of `Object` from `customSchema`.
Release v3.3.0.
Override the objc names for Permission classes
Add a change log entry.
Add convenience methods for retrieving the permissions for a given class and the entire Realm.
Release v3.2.0.
Create the Carthage archives as part of the releasability pipeline, rather than during the release process
Release v3.2.0-rc.1.
Use a better workaround for https://github.com/realm/realm-object-server-private/issues/950.
Add a change log entry.
Update to ROS v3.0.0-rc.1
Test that the API behaves as we expect.
Use the automatic sync configuration to simplify testPartialSync.
Implement `SyncConfiguration.automatic` and friends.
Declare dependency on Security.framework
Add a change log entry.
Add a change log entry.
Update object store so user's private role will be automatically created
Expose the per-user private role
Enable the configuration settings recommended by Xcode 9.3.
Cast to optionals rather than implicitly-unwrapped optionals.
Disable a workaround for a bug in Swift 3.1.
Update tests for ROS v3.0.0-beta.3
Release v3.2.0-beta.3.
Release v3.2.0-beta.2.
Mark PermissionUser.roles as public
Add some integration tests for object-level permissions
Add helper methods for the more error-prone parts of permission setting
Disable the tests for the old Permissions API
Add the ability to get a sync session from a Realm
Report a more useful error for 601 auth responses
Bump sync version
Use `Results::clear` instead of `Table::clear` in order to work correctly with partial sync.
Change version number to v3.2.0-beta.1.
Release v3.2.0-beta.
Update object store submodule so sort / distinct is respected in partially-synced queries.
Add brief changelog entries describing partial sync + object level permissions.
Address review feedback.
Bump objectstore pointer to the merged version
Add class definitions and wrappers for object-level permissions
Update to latest sync/ROS
Refactor object server test init a bit and cut down on shelling out
Work around ROS returning an incorrect error code.
Expand tests to cover error handling and unsubscription.
Update to latest object store / core / sync / ROS.
Add header documentation for remaining methods.
Use better xct asserts
Improve performance of ROS logging in tests
Make the login timeout in object server tests longer
Add _realmColumnNames to the swiftlint exclusion list
Also remap column names for non-objc properties
Add support for overriding table and column names
Print a more useful description for unmanged LinkingObjects
Print the correct class name for List properties in object descriptions
Override -[RLMLinkingObjects description] to use the correct type name
Add support for unregistering subscriptions.
Tell CocoaPods that RLMSyncSubscription.h is a public header.
Release v3.1.1.
Start documenting the API.
Rename RLMPartialSyncState to RLMSyncSubscriptionState.
Move RLMSyncSubscription into its own file.
Move subscription stuff to Sync.swift.
Update to latest object store.
Get error handling working.
Try to fix the build with CocoaPods.
Introduce an explicit type to represent the subscription.
Begin implementing the new partial sync API.
Don't copy the RLMSchema every time a swift Realm is opened with explicit object types (#5591)
Release v3.1.0.
Update to the latest available versions to fix some build errors.
Update to latest core/sync/object store
Add a changelog entry for the addition of `Results.distinct(by:)`.
Anonymous and Nickname Authentication (#5560)
Add runloop checks to the permissions API
Add support for JWT auth method
Don't force the iOS static tests to use Xcode 8.2.
Don't test PRs with Xcode versions prior to 8.3.3.
Update release packaging to include symlinks for Swift 3.2.3 and 4.0.3.
Upgrade dependencies
Use autoreleasepools in sample app background transactions (#5476)
Resolving swift lint errors
Adds Swift tests for distinct Results
Release v3.0.2.
Code cleanup;
Removes unnecessary/inconsistent throw when checking keypaths;
Removes unnecessary keyPath validation
Adds additional tests against different property types
Switch to .distinct overload taking strs; Removes redundant nil check;
Add support for distinct results (swift)
Adds support for distinct results (obj-c)
Update to the latest versions of core and sync.
Translate exceptions thrown when initializing RLMSyncManager to RLMExceptions
Mention Swift 3.2.2 in the release notes.
Package examples for Swift 3.2.2 and 4.0.2 as well.
Also package for Swift 3.2.2.
Test against Xcode 9.1 in CI, and build Swift 4.0.2 binaries during releases.
Set version to 3.0.1
Bypass ROS startup prompts when running tests
Update object store and sync
Explicitly exclude KVO-generated subclasses from the schema
Update change log in preparation for v3.0.0 (#5402)
Add a missing rename hint to RLMSupport.swift (#5401)
Release v3.0.0-rc.2.
Update object store to pull in fixes
Update to the latest versions of core, sync and ROS.
Add changelog entry
Add changelog entry for https://github.com/realm/realm-cocoa/pull/5374
Add an empty changelog section.
Synchronize reading `s_defaultConfiguration` in `rawDefaultConfiguration` method
Add back in support for sorting permissions on user ID
Reenable more tests
Add some missing fix-it hints for 3.0 renames (#5389)
Replace ROS test macros with normal methods
Update ROS dependency and fix some tests
Make SwiftLint happy (#5375)
Release v3.0.0-rc.1.
Release v3.0.0-rc.
Replace permission offer and response objects with APIs
Update sync dependency to rc27
Reenable most tests
Reenable more tests
Update to sync v2.0.0-rc26, for compatibility with ROS v2.0.0-alpha.42 and newer
Update object store to a slightly newer version to silence a warning.
Date fixed
Release v2.10.2.
Be consistent in how we interpolate variables
Release v3.0.0-beta.4.
Add a missing include to silence a warning when building for iOS.
Add a change log entry.
Revise the method names, and tweak the documentation.
Add a Swift test for partial sync, and fix a bug it uncovered.
Expose partial sync to Swift.
Add the new header file to the podspec.
Use the correct sync configuration when opening the partially synced Realm.
Update to the latest object store partial sync branch.
Add support for partial sync
Re-enable a test, move other tests
Update ROS testing dependency, reenable tests (#5332)
Invert the sense of the define that Util.swift looks for when determining if it should import RealmSwift.
Update a test case now that a more precise error is being raised.
Add a changelog entry
Throw an exception when querying arrays of primitives rather than silently failing
Have +schemaVersionAtURL: do a better job of translating any exceptions that are thrown.
Remove `List` conformance to `RangeReplaceableCollection`
Add a change log entry.
Satisfy SwiftLint.
Add Swift support.
Add a test of offline client reset.
Handle incompatible synced Realm exceptions.
Add compatibility for ROS 2 user info API
Swap the order of SwiftLint and documentation suppression comments.
Remove an unnecessary changelog section.
Add documentation for extension methods on RealmCollection, and explicitly suppress documentation on a few internal methods.
Increase the timeout for the interprocess tests.
Compile Util.swift into RealmSwift Tests rather than using `@testable`.
Tweak some tests to be compatible with Swift 3.0.
Rename `PrimitiveListTestsBase.assertEqual`.
Disable a portion of `testReplaceRange` that hits issues with Swift 4's exclusive access checking.
Don't hard-code the type of the string in the expected error.
Don't use -compare: to compare NSData objects.
Add missing `@objc` annotations to `SwiftPrimitiveArrayObject`.
Remove some duplicated file references from the Xcode project.
Duplicate the protocol `RealmCollection` extensions related to arrays of primitives
Only test SwiftLint with Xcode 9.
Disable checking of cyclomatic complexity on a KVO test.
Tweak the FIXMEs to have a consistent format that's easily greppable.
Update core to v3.2.1 and sync to v2.0.0-rc21.
Use per-app keychain item for sync metadata
Add an empty changelog section.
Release v2.10.1.
Archive the generated documentation so it can be retrieved by the release-cocoa job
Mention Swift 3.2 and 4.0 in the changelog.
Disable the block-based KVO SwiftLint rule entirely.
More fixes
Enable Slack status messages once again.
Extract some duplicated logic.
Move running of the iOS and macOS unit tests out of the build phase.
Reintroduce testing of installation examples.
Stash the build products without any leading path prefix.
Ensure the working directory is empty before starting work on a new node.
Implement testing of examples.
Implement the packaging step.
Build each Swift version in parallel.
Build the Obj-C frameworks.
Remove references to the tightdb_objc directory.
Inline the docs and examples jobs.
Better naming.
Use a built-in SCM operation + stash rather than separate job to get the code.
Disable slack notifications for now.
More fixes. Disabled tests that don't work with ROS 2
Add the existing pipeline script for reference.
Begin addressing feedback
Make changes for testing against ROS 2
Have the examples tasks work with either the source or packaged layouts.
Do not test for `.note` file on tvOS
Add changelog entry.
Add empty changelog section
Set `NSURLIsExcludedFromBackupKey` for auxiliary files to prevent them from being backed up.
Build and package for Swift 3.2 and 4.0.
Disable a SwiftLint warning about preferring block-based KVO with Swift 3.2+.
Treat error 162 from simctl the same as 161.
Handle the difference in naming of the AppleTV simulator between Xcode 9 and prior releases.
Include Xcode 9 in the test matrix.
Don't attempt to run iOS tests in 32-bit when using Xcode 9.
Look for the installation examples in the correct place.
Update the examples-ios-swift and examples-tvos-swift commands for the new workspace location.
Remove the base example directory once we've copied it.
Remove Swift language version symlinks from the examples.
Change the optional property on collections to BOOL
Update to core 3.1/sync 2.0-rc18
Update objectstore
Rename generic type parameter on collections
Delete some unreachable code
Add support for arrays of more types
Refactor `RLMSyncPermissionResults` to refine `RLMResults`
Remove a use of containsString:
Deliver notifications for deleted RLMArrays
Support optionals when specifying predicate varargs
Update objectstore
Move changelog entries to the correct section
Mark RealmCollectionValue.className as nodoc
Rename swap() to swapAt() to match the name used by Array
Add `array` to RLMProperty's description
Make breaking changes needed to support arrays of primitives
Add an empty changelog section.
Have the GitHub release notes include only changes since the last beta. (#5262)
Release v3.0.0-beta.3.
Remove the workaround for realm/realm-core#2724. (#5255)
Release 2.10.0.
Update object store
Make mention of the fact that `fileURL` and `inMemoryIdentifier` are mutually exclusive with `syncConfiguration`
Replace `:nodoc` with a documentation comment on the RLMRealmConfiguration's Sync category
Update README.md
Move sync error JSON models into the shared models file
Empty string shouldn't match anything with `CONTAINS`, `BEGINSWITH` and `ENDSWITH`
ompletely remove workaround for rdar://33514802
Revert "only apply swift_objc_members attribute if available"
Update to latest object store
reactivate ios10 device
Minor cleanup changes for sync APIs
Work around a hang seen when building Realm using Xcode 9b5 with Carthage.
Improve handling of auth errors
fix compilation error with Swift 4 from Xcode 9 beta 5
fix KVO tests on Swift 3.0
extend KVO tests to exercise Swift 3.2+ KVO APIs
add docs for SyncPermissionResults.observe(_:)
provide SyncPermissionResults.observe(_:) Swift overlay
add changelog entry
add migration helper
rename -[RLMNotification stop] to -[RLMNotification invalidate]
rename addNotificationBlock(_:) to observe(_:)
Change `SyncUser.logIn()` callback queue behavior
Add back in changes replacing `containsString:`
Move some misplaced tests
Remove erroneous property, fix openness
Remove some now-unneeded commands for testing with the iOS 7 simulator.
Drop support for iOS 7.
add empty changelog section
Rework the 'interactive errors' API
Remove deprecated sync-related APIs
set version to 2.9.1
update object store to pull in realm/realm-object-store#506
don't test "compact on launch" if the Realm is open on another thread
move changelog entries to appropriate section
Rename `addOrUpdateObjectsInArray:`
fix bash scoping issue
add empty changelog section
Try to fix sporadic CI test failure
log error message when there is no device (#5183)
Detect and automatically ignore computed properties
fix how the podspec determines if the version is prerelease or not
Set version to 3.0.0-beta.2
Update object store to avoid making non-additive schema changes to synced Realms.
fix typos in github_release.rb
mark the GitHub release as 'prerelease' if version matches criteria
add empty changelog section
Add a new section to the changelog for changes made after 3.0.0-beta.
disable iOS 10 device tests job from CI matrix
Update to 2.9.0
Add support for user info REST API
Replace boilerplate in test code with a macro
improvements to build.sh
add Swift 4 symlinks for examples
consistently use '@objc dynamic' in Swift examples
mark RLMIterator.next() as 'mutating' now that it's a struct
only apply swift_objc_members attribute if available
simplify workaround for rdar://33514802
enable running Swift sources of Realm Objective-C tests in Swift 4
Add a test for read-only access to global synced Realms
Add RLMTestCaseUtils.swift to the iOS static target
Add proper validation for RLMArray object types in Swift RLMObject subclasses
Change fast enumeration to use a Results snapshot rather than a TableView
Add non-regex version of assertThrows to Swift TestCase
Change most of the Swift wrapper types to structs
Rename RLMArrayLinkView to RLMManagedArray
Remove a very out-of-date clause from the RLMArray docs
Refactor schema discovery logic to share number type discovery logic between NSNumber and RLMArray
Strip trailing whitespace from all source files
Remove some counterproductive XCTAssert failure messages
Add generic types for RLMArrays and RLMResults in tests
Adopt the ObjectStore keypath sorting functionality
Adjust for the ObjectStore property type changes
update TestCase.realmFilePrefix() for Xcode 9 beta 4 / Swift 3.2/4.0
rename XCTAssert{Not}EqualWithAccuracy to XCTAssert{Not}Equal
Update SUPPORT.md
set language value in xcschemes to avoid upgrade warning in Xcode 9
Create SUPPORT.md
Pull in object store changes to sync metadata subsystem
Add `RLM` prefix to RefreshBuffer constant. (Rename RefreshBuffer => RLMRefreshBuffer)
Extend the retry time to longer than `refreshBuffer`
Rename 'API Breaking Changes' to 'Breaking Changes'
Remove workarounds for incorrect `create(_:, value:, update:)` behavior
Add changelog entry for removed non-sync APIs
Remove non-sync APIs marked `deprecated` and `unavailable`
skip update checks for pre-release Realm versions
disable update checker on master-3.0 branch
dynamically assume that versions with 'alpha', 'beta' or 'rc'
point podspec documentation URL to '/latest'
fix typo in `Realm`'s `==` docs
Bump version to 3.0.0-beta.
Add a change log entry.
fix syntax to Swift 3
Work around realm/realm-core#2724.
Update to core v3.0.0-rc3 and sync v2.0.0-rc12.
use system curl when downloading object server, sync or core
update packaging scripts to use Xcode 8.3.3
fix Swift 4 compilation error with Xcode 9 beta 3
remove extraneous parameter label for Swift < 3.2
add more tests for initializing unmanaged objects
only call `initializeLinkedObjectSchemas` once per class
specify a LastSwiftMigration value of 0900 in xcodeproj
rename XCTAssert{Not}EqualWithAccuracy to XCTAssert{Not}Equal
typo
Update ISSUE_TEMPLATE.md
update to Xcode 8.3.3
Add integration tests for wildcard permissions
Remove a redundant call to RLMInitializeSwiftAccessorGenerics()
Remove the watchos installation samples from test-all
Delete the Swift 2.3 installation examples
Add support for user ID-based permissions
Reapply #5056
Revert "Change how synced Realm permission errors are handled"
Change how synced Realm permission errors are handled
Further improve `RLMSyncUser`
Add empty changelog section
Bump version to 2.8.3
Update object store version
Add empty changelog section
Set version to 2.8.2
Set properties to `nil` when addOrUpdating a RLMObject
Restore support for modifying primary keys in migrations
Move ownership of refresh handles to `SyncUser` (#4964)
Add empty changelog section
Set version to 2.8.1
Update object store
Update object store to fix warnings
Mark non-overriding class funcs called from obj-c as @objc
Update project version check version and enable some new recommended warnings
update RLMSupport.swift to support Swift 4
add empty changelog section
release 2.8.0
fix typo in Object.swift
add changelog entry
test changePassword:forUserID:completion:
implement changePassword:forUserID:completion:
Clarify documentation for `Realm.create()` method
update license to match changes in realm-java
update ROS version to 1.7.5
update sync to 1.9.2, core to 2.8.1 & object store to latest
fix SwiftLint violations for upcoming release
Add a changelog entry for the one minor bug fix
enable CI testing on an iOS 10 device
Assert that currentProperty is non-nil in all functions that need it
Add tests for adding objects with cycles over arrays
Upgrade to core 2.7.0
Use the object store object accessor functionality
Add a test for setting properties to nil with createOrUpdate:
Readme update
remove unnecessary :nodoc: annotation in Error.swift
fix testManageAccess logic
fix `-Wdocumentation` warnings introduced in Xcode 8.3.2
silence unused variable warning
update newsletter link to latest
add empty changelog section
release 2.7.0
rephrase changelog entry
update sync to 1.8.2 and core to 2.6.2
specify min ROS version needed for some features
Add new permissions API
update sync to 1.8.0
also handle NSNull.null
add changelog entry
Add tests for nil values passed to Array properties via KVC
Add handling of nil for Swift-based Array properties accessed via KVC
Update to core 2.6.1, sync 1.7.0
add changelog entry
add testUserChangePassword
implement changePassword APIs
add RLMServerEndpointChangePassword
refactor postRequest* methods to use a generic 'sendRequest'
update ROS to 1.4.2
fail the build at the first sign of trouble (#4902)
Add changelog entry for fixing the issue deliting objects during migration
Add tests to ensure multiple enumerations can be done correctly when deleting an object during migration.
marge master
indent CHANGELOG
update ObjectStore submodule
Updated changelog.
Added test for arbitrarily renamed classes.
trim trailing spaces
Added test that objects with custom `@objc` names can be created and added to realms.
Added tests for objc renamed class initialization
Support Swift files with overridden @objc names
update logOut docs to reflect that Realms are deleted on next app launch
add empty changelog section
release 2.6.2
update object store to latest version
fix sync session being closed before wait_for_download_completion
update CI & packaging scripts to use Xcode 8.3.2
add empty changelog section
release 2.6.1
return Swift.Error from asyncOpen callback
relax expected file size numbers in compaction tests
add empty changelog section
Improve docs and correct errors
release 2.6.0
fix syntax for retrying downloads
increase compaction margin
fix ListTests.testValueForKey() in Swift 3.0
fix trailing whitespace in ListTests.swift
Add performance tests for `value(forKey:)` for Swift properties
Add more test cases for `value(forKey:)` for Swift properties
Add changelog entry for https://github.com/realm/realm-cocoa/pull/4796
Split `valueForKey:` for wift generic properties and for other properties.
Added a test to ensure returning correct value when using `valueForKey:`/`valueForKeyPath:` method for `List`/`RLMArray`.
update object store to latest master
update comment header copyright year
set _shouldCompactOnLaunch after validation
remove unnecessary check for isParent
disable testMultipleProcessesTryingToInitializeSchema in debug mode
add changelog entry
validate when shouldCompactOnLaunch can be set
add compact on launch tests
implement shouldCompactOnLaunch
update object store to expose compact_on_launch_function
move compaction test to CompactionTests.m
Add aggregate functions to RLMArray and RLMCollection
typo fix
more review fixes
review fix
rename RLMAsynchronouslyOpenRealmCallback to RLMAsyncOpenRealmCallback
add check for migrationCalled in async block
always fulfill expectations last
add changelog entries for relevant core 2.6 changes
bump core to 2.6 and sync to 1.5.2
add note highlighting that returned Realm is still thread-confined
acquire exclusive lock on lockfile to prevent Realm from being created
fixing url
consolidating common code
add changelog entry
create the bg queue directly in asyncOpen
rename openAsynchronouslyWithConfiguration: to asyncOpenWithConfiguration:
incorporate PR feedback
avoid allocating an RLMSyncConfiguration
avoid allocating an RLMSyncConfiguration just to check if it's set
fixing missing then
retry downloading core and sync binaries
preserve XCTAssert failure locations
document RLMAsynchronouslyOpenRealmCallback typedef
add Realm & migration tests for async open of local Realms
add object server tests
expose RLMHasCachedRealmForPath for object server tests
reduce extreme indentation in an object server test
convert RLMObjectServerTests to ObjC++
add Swift implementation of async open
open uncached+schemaless Realm when opening a synced Realm async
sort imports
rename 'queue' param to 'callbackQueue'
fix sync_session_for_realm
fold setCustomAsyncOpenHandler into openAsync implementation
reword docs for open async
remove RLMSyncConfiguration.waitForServerChanges
Replace `RLMRealm` extension with helper function
Initial commit for download Realm functionality
minor style fixes
SwiftLint's 'variable_name' rule was renamed to 'identifier_name'
add missing files
update ObjectStore
remove SystemConfiguration framework from linker flags
remove workaround for rdar://31302382
update Xcode 8.3 to 8.3.1 in build.sh and .jenkins.yml scripts
add top changelog section
release 2.5.1
Disable the ObjectStore Realm caching (#4812)
confirm obj is attached in RLMGetLinkingObjects
reword changelog entry
update Object Store to latest `master`
replace "realm client" with "realm framework"
small edits to changelog entry and docs for RLMSyncUser.isAdmin
Add `isAdmin` flag to `RLMSyncUser`
request ROS version in issue template
changelog entry formatting
Updating changelog
rm Jenkinsfile.cocoa-with-sync-release
update CHANGELOG
add SystemConfiguration framework to linker flags
update ObjectStore
add empty changelog section
release 2.5.0
fix build error when running test_ios_static
reset simulators when forcing xcode 8.2
force Xcode 8.2 when running test_ios_static() too
inline rdar://31302382 workaround
package bitcode-enabled objc frameworks with Xcode 8.2 rather than 8.3
skip 8.3 ios-static in Jenkins matrix
add changelog entry for Swift versions
update packaging scripts and directory layout for Swift 3.1
add Xcode 8.3 axes to .jenkins.yml
update changelog entries based on PR feedback
update object store to 'master'
bump core to 2.5.1, sync to 1.5.0 and object store with associated changes
add changelog entries for changes pulled in from Object Store, core and sync
avoid another redundant `get()`
avoid redundant `get()`, remove unnecessary include, and small refactors
set encryption key on sync config in setEncryptionKey/setSyncConfiguration
use quotes when importing sync file instead of angle brackets
avoid temporary when copying the config key into the sync config key
fix include for CocoaPods
Improve the error message for a bad primary key type (#4780)
add test checking that the wrong (or no) encryption key fails to decrypt
add test for encrypted synchronized Realms
support encrypted synchronized Realms
update to sync 1.4.2
Mark -[RLMRealm init] as explicitly unavailable
Hide comments in issues
fix case in `.update` reference in API docs
Eliminate some refcount churn when creating RLMRealms
Ensure that background Realms are torn down before clearing the cache in tests
Don't delete unavailable simulator devices.
add note about the menu item not being displayed in Xcode 8
Also explicitly check for NSNull in create
Use the correct RLMException overload
Add LinkingObjects to testTypeToString
Remove redundant double-setting of default values on unmanaged objects
Remove bogus validation for LinkingObjects setting
Require that the Realm be in a write transaction even for no-op createOrUpdate
Improve some error messages
Better align initWithValue: and createWithValue: allowed input
Restructure and expand the object tests
Switch to using `CFStringCompare` / `CFStringFind` for moar performance.
Add tests with diacritics on the right.
Extract the bodies of the comparison functions into non-templated functions.
Add a note about using core's version of overload once it makes it into a release.
delete derived data if pcm file needs to be rebuilt
Ensure that simulators have been created in each packaging command that needs them.
Add support for the diacritic-insensitive modifier for string comparison operations.
Add support for multi-level object equality comparisons against NULL
Swallow the expected errors about the device type being incompatible with a specific runtime version.
Only attempt to create simulator devices for runtimes marked as available.
Remove a double negative.
Change our approach to resetting iOS simulators
add empty changelog section
release 2.4.4
Pull in 'schema move' object store fix
Update to core v2.3.3.
Revert "Update to core v2.3.3"
Update to core v2.3.3.
clarify docs for -[RLMSyncUser permissionRealmWithError:]
clarify SyncPermission changelog entry
remove trailing whitespace
Use ROS 1.2.1 for ObjectServer tests
`updatedAt` in `SyncPermission` should be public
Add CHANGELOG for permission Realms
Add unit tests for Permission API
Add RLMSyncPermission.h to podspec
Expose `permissionRealmWithError:` on header
Expose permission-Realm
[docs] Consistently refer to the "Management Realm"
Remove superfluos RLMSyncUser forward declaration
[project] Add RLMSyncPermission*_Private headers to targets
Rename User to SyncUser in docs
Update object store submodule pointer
Heap-allocate two global locks and a map
Add empty changelog section
Set version to 2.4.3.
Add OwnerObject to the list of classes to reverse the properties on.
Pass a property index to RLMClassInfo::linkTargetType rather than a column index.
Remove RLMAccessorCode and objcType from RLMProperty
Get the type encoding for methods from the superclass
Eliminate a bit of silly indirection in automaticallyNotifiesObserversForKey
Track generated classes via a class name prefix
Refactor accessor creation a little to reduce the compiled size
Optimize accessor class creation
Clarify that RLMClassInfo::linkTargetType takes a property index, not a column index.
Add validation for Swift property names
Change how progress notifications are dispatched
Add a change log entry.
Update LLDB support now that RLMResult's object schema hangs off the class info.
insert missing set_xcode_and_swift_versions
Add a test to ensure bridging `RLMError` to `Realm.Error`.
update sync client to 1.1.0
use SwiftLint's variable_name's excluded configuration
remove redundant 'let _' assignment in Swift tests
find Xcode preferentially without spotlight - v2 (#4652)
remove SwiftLint commands to disable valid docs rule
add a changelog entry for async daemon improvements
update core to 2.3.1 and sync to 1.0.4
fix use-after-free crash in Xcode 8.3 beta 2
Revert "fix crash in test with Swift 3.1"
add changelog entry about Xcode 8.3 beta 2 fixes
fix crash in test with Swift 3.1
fix warnings in tests when compiling with Swift 3.1
provide noWarnUnsafeBitCast(_:to:) utility function
avoid unnecessary unsafeBitCast operations
add forceCast private function
change Realm.Error.Code to be a typealias to RLMError.Code
fix List.swift compilation with Swift 3.1
Allow generic user info to be passed up for client reset errors
add changelog entry for #4615 fix
add empty changelog section
update sync to 1.0.3
move local var declarations higher up in swift-version.sh
update build.sh package commands to specify Xcode version
specify Xcode version in Jenkins jobs
Clarify documentation around `delete()` method
Don't wrap NSError creation in an @autoreleasepool
Set version to 2.4.2 and update changelog
revert RLMSyncAuthErrorInvalidCredentials back to RLMSyncAuthErrorInvalidCredential
use errors from network client when handle failed request
add test for RLMSyncManager.errorHandler errors domain
Prevent a RLMRealm instance from escaping into another thread's autorelease pool within +[RLMRealm realmWithConfiguration:error:]
Add empty changelog section
Set version to 2.4.1
Add changelog entry for 2.4.1 hotfix
add empty changelog section
release 2.4.0
Wrap the ObjectNotifier callbacks in autorelease pools
Improve and align docs
Make RLMPropertyChange's properties publicly read-only
Add object-level notifications with information about what properties changed
update sync client to 1.0.1 and ROS to 1.0.0
Change the way a private header is used by the object server test code
add missing changelog entries
set Xcode project/scheme last upgrade check to 8.3
rename modulemap from 'module' to 'Realm'
Disable broken Travis jobs
add SyncAuthError typealias
use errors from network client when bind session
RLMSyncAuthErrorInvalidCredential -> RLMSyncAuthErrorInvalidCredentials
add changelog entry about dropping Swift 2 support
remove Swift 2.x from Jenkins PR matrix
bump travis image to Xcode 8.2
bump minimum required Xcode version in README to 8.0
remove all Swift 2.x examples
drop support for testing Swift 2.x installation examples
remove Swift 2.x sources from Realm/ and RealmSwift/
stop packaging Swift 2.2 examples in package_examples.rb
remove support for testing and packaging Swift 2.x from build.sh
add docstring to NSError+RLMSync category
fix implicit conversion and linker warnings
add empty changelog section
release 2.3.0
Update changelog
Add support for sync session progress notification blocks
Add support for client reset
update sync to latest version
Revert "fix for #4534, find xcode without spotlight"
refine documentation for permission offer/response
remove RLMMakeSyncManagementObjectStatus from public interface
refine wording in changelog entry
Add CHANGELOG for PermissionOffer and PermissionOfferResponse
Confirm to be able to open shared realm file from other user.
Modify PermissionChange's `id` property to primary key
Make `PermissionOffer` and `PermissionOfferResponse`'s `id` property primary key.
Change RLMSyncPermissionStatusCodeToStatus to RLMMakeSyncManagementObjectStatus to align Foundation naming conventions
Add permissin offer/response unit tests for Swift
Add unit tests for PermissionOffer and PermissionOfferResponse
Add SyncPermissionOffer and SyncPermissionOfferResponse for Swift
Add RLMSyncPermissionOffer and RLMSyncPermissionOfferResponse.
Pick up the fix for realm/realm-object-store#344.
Update object store submodule pointer again
Update to Realm Object Server v1.0.0-BETA-6.0.
Tell the binding context about the Realm.
Add missing object store headers to the Xcode project.
Update object store and dependencies
sort by 'key path' rather than 'property' in examples
removing a debug echo
update REALM_CORE_VERSION to 2.3.0
fix bad documentation formatting for ThreadSafeReference.swift
add empty changelog section
WHAT YEAR IS IT
release 2.2.0
fix for #4534, find xcode without spotlight
Update binding in response to object store updates
add missing words to the changelog entry
Use static func in protocol Equatable
documentation refinements
use sortedResultsUsingKeyPath
remove unnecessary `@private`
use release assert to validate the Realm in RLMArrayLinkView init
get rlmObjectSchema from parentInfo
remove 'rlm_' prefixes for TSR-related methods and properties
address some SwiftLint violations
Apply review feedback.
Add support for sorting based on simple key paths.
Align the thread id used for the RLMRealm cache with what the object store checks
remove unnecessary imports
remove unnecessary bool cast in RLMThreadSafeReference.isInvalidated
move thread-confined methods out of objc categories
remove redundant optional nil assignment in RealmConfiguration.swift
update more warnings that should've been changed in ce82bda
refine a warning in RLMThreadSafeReference API documentation
remove out of date comment
complete API docs for thread-safe references
align and improve ObjC, Swift 2 & Swift 3 TSR tests
merge implementations for Swift 2.x and 3.x of ThreadSafeReference.swift
translate C++ errors in RLMThreadSafeReference
return nil if object is invalid after resolving TSR
fix RLMThreadSafeReference.isInvalidated
fix formatting for an exception message
fix comment headers for newly added thread-safe reference files
no space before objc arguments
sort import in RLMArray.mm
add RLMThreadSafeReference.h to Realm.podspec
move changelog entry to appropriate section and expand it
update object store to latest version after merging TSR support
Implement thread-safe reference for Swift
Introduce `AssistedObjectiveCBridgeable`
Introduce thread safe references in Realm Objective-C
Add a changelog entry.
vertically align parameters in Swift function declarations
reset file if a file format upgrade is required in ResetFile mode
specify the colon next to the key in Swift dictionary literals
add empty changelog section
release 2.1.2
update core to 2.2.1 and sync to 1.0.0-beta-5.1
use underscore for unused Swift closure parameters
fixing merge goof on comment
re-enabling phyiscal device tests on CI (#4403)
re-disabling failing swift device testing
prepping for merge
prefer '() ->' over 'Void ->'
comment to get restesting
symlink Swift 3.0 usage and installation examples to 3.0.2 locations
update package_examples.rb to also package Swift 3.0.2
update build.sh packaging jobs to also package Swift 3.0.2
update .jenkins.yml to test on 3.0.2
update ObjC model template comment to use ObjC generics
Disabled idle timer for Realm Draw
add more LIKE query tests
Added support for 'LIKE' queries
remove unused `-[QueryTests isNull]` method
fix expected error code in auth error tests
prefer '-> Void' over '-> ()'
implement -[RLMSyncConfiguration setStopPolicy:]
fix -[RLMSyncUser sessionForURL:] implementation
apply fixits to silence two warnings surfaced by -Wall
update Object Store to incorporate -Wunder warning fixes
fix -Wundef warning in RLMConstants.h in projects with no C++ files
make RLMSyncConfiguration.stopPolicy property dynamic
silence warning in upcoming SwiftLint release
omit empty parentheses in Swift trailing closure calls in Tests
add changelog entries for CloudKit changes
fix "an CloudKit" to "a CloudKit" typos
a few missing files
moving from iCloud to CloudKit
Update community link
fix more unbalanced backticks in docs
fix doc comments in Object(RealmSwiftObject).
make the "Object Server Tests" scheme buildable and profilable
Fail to cast a list that was retrieved `DynamicObject` to List<DynamicObject>
Fail to iterate `for ... in` Results of DynamicObject The following code will crash because cannot cast `Results<T>` to `Results<DynamicObject>`
run iOS device tests with Realm dynamic framework
remove unused REALM_SKIP_DEBUGGER_CHECKS env var
run iOS device tests on Jenkins
Set version to 2.1.1
Update to core 2.2.0 (#4404)
wip try to re-enable tvos-device test
Update binding to use latest object store
Revert "Make the 'Object Server Tests' scheme buildable directly"
Another round of refinements.
Updated copyright year
update to pass SwiftLint 0.13.1
Integrated JP’s improvements
Update Cocoa binding to reflect object store changes
update ROS to beta 4.8
clarify changelog entry
add changelog entries for object store update
update object store to laster `master`
speed up -[CanvasView drawRect:]
misc changes to Draw demo
sort examples in Xcode project
fix issue preventing using synchronized Realms in Xcode Playgrounds
update sync to 4.0 and ROS to 4.3
fix log in callback thread
fix recursive option of git submodule update command
realm iClould identity provider fix
address minor stylistic issues in ObjectiveCSupportTests.swift
move objc support changelog entry to appropriate section
fix docstring issues in ObjectiveCSupport.swift
Remove @testable, revert to basic sanity tests
Simplified canvas drawing
Refactored swatch colors class
add "Sync Breaking Changes" section to changelog
update changelog
enable reset metadata
Simplified swatch colour creation
Started consolidating swatch colors
Removed un-needed primary key entry
Removed redundant check
Removed un-necessary readwrite exposure
Additional code review refinements
fix ROS config to make its proxy listen to '::'
add empty changelog section
release 2.1.0
Improve the docs a bit
Explicitly stop notifications to silence warnings in tests
Reduce how much stuff is done with the lowered open file limit in -[AsyncTests testErrorHandling]
Increase the timeout for the interprocess tests
Remove some unused methods
Don't send Realm notifications recursively
Add support for suppressing specific notifications from writes
Update to latest ObjectStore
Additional delegate code refinements
Deferred view presentation until successful login
Don't try to continue running a test after opening a Realm fails
Reduce the iterations used for hashing passwords when running ROS tests
Make the 'Object Server Tests' scheme buildable directly
fix another 'a optional' typo
fix another typo in Optional.swift
Update Optional.swift
Updated to the latest version of the Realm API
Various code cleanup and formatting
clean up xcodeproj
merge master branch
review related fixes
fix typo
unshare PlaygroundFrameworkWrapper scheme and autocreate schemes
Added ObjectivC interoperability feature (Closes #2920, #4232)
add empty changelog section
remove outdated file reference in pbxproj file
Release 2.0.4
change +[RLMSyncUser allUsers] to return a dictionary
rename RLMCredential/Credential to RLMSyncCredentials/SyncCredentials
rename `RLMSyncCredential.{h,m}` to `RLMSyncCredentials.{h,m}`
update object store to include registered session check fix
finish merging master
Streamlined IP address build phase
rename RLMSyncPermissionChange constructor to conform to ObjC convention
don't explicitly set schema mode when generating the management config
add changelog entry for client permissions
state that submodules are required when cloning from git
specify that Xcode 8.x is supported
remove custom implementation of -[RLMSyncSession isEqual:]
remove unnecessary std::move
don't create unnecessary block
update object store to tip of master
remove unused code
avoid extra RLMRealmConfiguration copy in RLMObjectServerTests
remove RLMCppBridge class and fix stopPolicy build error
update Object Store to head of `master` branch
Update build.sh to account for new headers and cocoapods
Refactor binding to move sync functionality into object store
fix docstring for RLMObjectSchema.objectName
rework custom table naming to avoid changes to the object store
rename `+configurationForUser:` to `+managementConfigurationForUser:`
use `realms` when auth server uses TLS
add more documentation about client permissions and management Realm
implement `_realmTableName` on fake test classes to fix tests
add swift tests
allow customizing the table name used by a Realm model class
fix imports in RLMSyncUtil_Private.h
Added more detail to the Draw install instructions
rework cocoa permission change implementation
minor refactoring of permissions tests
Updated to latest Sync APIs
Updated Draw plist and project settings
Updated Draw plist
API updates
Add sync_hosts settings for testing purpose
Update ROS version to 1.0.0-BETA-4.2
Refactor permission change tests
Add permission change objects for RealmSwift
Add unit tests for the permission change
Add permission change management objects
Moved Draw README to master iOS examples one
Added installation README for Draw
Added local IP address detection for Draw
Added Draw app to build script
Updated Draw app icon
Added Draw app
add +[RLMSyncUser currentUser] to match API in other SDKs
consistently annotate `NSArray` type in `-sortedResultsUsingDescriptors:`
Replace Swift sync configuration tuple with a struct
fix Swift 2.x static method overrides for SyncManager/SyncUser
Rename `SyncManager.sharedManager()` to `SyncManager.shared` in Swift 3
rename `SyncUser.all()` to `allUsers()` in Swift 2 and `all` in Swift 3
Rename `+[RLMSyncUser all]` to `+[RLMSyncUser allUsers]`
rename authenticate to logIn
disable vertical_whitespace rule in SwiftLint
replace AuthenticationActions with `register` boolean
add empty changelog section
release 2.0.3
fix Swift 3.0.1 example packaging
fix Swift 3.0.1 force cast error in KVOTests.testAllPropertyTypesStandalone()
fix remove_reference_to_realm_xcode_project
realize symlinks in package_examples.rb
symlink Swift 3.0 usage and installation examples to 3.0.1 locations
update packaging scripts to include Swift 3.0.1
add Swift 3.0.1 to Jenkins PR matrix
Always return zero rather than nil when summing an empty results or linking objects.
update object server to beta 3
update to core 2.1.4, sync beta 3.3 and object server beta 2.3
handle authentication errors in network client
add server error response model
add auth errors tests
add sync auth errors enum
update core to 2.1.3
Make minor improvements to the object server tests
Reenable some disabled object server tests
add changelog entries for bugs fixed by updating the object store
adapt for changes to SyncConfig constructor
update object store to latest cocoa branch
fix Swift 3 playground example source and packaging
Disable module debugging for the static framework build target
Remove target membership for private header files not used by the private module
recover from "operation never finished bootstrapping" CI errors
continue early if property is primary in RLMAddObjectToRealm
Add empty changelog section
Delete the CoreSimulator log before running CI tests
Only try to upgrade swiftlint if it's out of date
Remove trailing whitespace
Silence Swiftlint errors about undocumented parameters in Credential
Don't error on swiftlint already being up-to-date
Set version to 2.0.2
Delete the WatchKit example
Add warning to sync URL documentation
Update ObjectStore
Move the changelog entry into the API breaking section.
Renamed `User` to `SyncUser` in Realm Swift.
Upgrade to core 2.1.0/sync BETA-2.0
Add Xcode 8 targets to the examples build script
Remove Xcode 6 targets in the examples build script
Set version to 2.0.1
Update depdencies.list in set-version
Update to core 2.0.1
move references to this repo back to realm/realm-cocoa
set submodule back to realm-object-store@cocoa
Update year in license
update object store to latest cocoa-sync
always allow local builds of sync
Add more stuff to the changelog
hacks to let CI run object server tests
Update version in dependencies
Update sync dep (#359)
Add Swift object server test infrastructure
re-enable cocoapods Jenkins matrix entry
insert RMP launch blog post link in changelog
start adding changelog entries for 2.0.0
set version to 2.0.0
Allow environment variable to disable sync metadata encryption
remove placeholder text in license
update LICENSE with new wording for export compliance
allow setting REALM_SYNC_VERSION to "current"
Add object server tests, changes for ease of testing
improvements to how sync is downloaded
Add missing setter for Swift 3
set version in dependencies.list to 1.1.0-3
update ports used by auth & ROS servers in Object Server tests
update object server to beta-19.1
update version to 1.1.0-3
remove unused imports from RLMRealm.mm
remove sync.md since it's not up to date
update summary and description for both podspecs
update README to reflect that Xcode 7.3.1 and Xcode 8 are both supported
remove outdated TODO
fix minor formatting issues in RealmConfiguration.swift
kill any running object servers
nest Error into Realm extension
workaround for testOpenUnencryptedWithKeyThrows throwing the wrong exception
update object store to latest cocoa-sync
undo incorrect packaging changes
report sync version using REALM_SYNC_VER_STRING
Release with 37.2 (#336)
re-enable ios-static Jenkins matrix entry
link iOS examples with libz
reset examples to master state
re-enable the two disabled UtilTests
Placate static analyzer
Use `warn` as the default log level.
simplify testAdminTokenAuthentication now that we download the ROS directly
prevent web browser from launching several times during tests
add skip_setup to object server configuration
Update object server version
just run osx-object-server on 3.0 release
update object store to latest cocoa-sync
link libz in Realm.podspec
add all the sync related bits to Realm.podspec
add util/apple to podspec source files
point podspec source to the private repo
revert podspecs to their state in the public repo
fix build.sh cocoapods-setup for sync
update ObjectStore submodule to fix include for keychain helper
re-enable Swift 2.2 & 2.3 and Debug configuration
Add convenience initializers for remaining identity providers
Purge invalid users from user store whenever necessary
Finish documentation for Sync Cocoa APIs
Update object store to include Thomas's `Session` fixes
Don't mutate a collection while iterating through it
Update to changes in the sync archive (#313)
avoid subshell in build.sh download_object_server()
re-enable watchos Jenkins matrix item
update core to 2.0.0-rc8 and sync to 1.0.0-beta-37.0-rc
Download the object server, not the bundle (#306)
Bump version
Add RLMSyncCredential
Add  TokenModel
Add RLMSyncUser
Add missing file from ios target
Bump version
update sync dependencies
Improve support for sync-related testing
re-enable osx-swift & ios-swift Jenkins matrix entries
re-enable tvos matrix entry
No need to format the JSON in the POST request.
add missing Object Store sync cpp files to Realm iOS Static target
add NSAllowsArbitraryLoads to TestHost app
add osx-object-server item to Jenkins matrix
update ROS tests to compile and pass with the latest changes to ROS/binding
reuse REALM_SYNC_VERSION when downloading object server
add more tests
add RLMTestCase to Object Server Tests target
add "reset-object-server" command to build.sh
first stab at making "Object Server Tests" unit test target
add "start-object-server" command to build.sh
add "download-object-server" command to build.sh
don't download sync if using a local build of core/sync
get core & sync versions from dependencies.list in build.sh
Make proposed API change
Use swift 2.3 (#286)
download sync releases instead of core
disable two failing UtilTests due to sync being misconfigured
disable failing jobs in .jenkins.yml for now
add sync* to .gitignore
use SetDefault instruction for default property values
Allow throws within Realm.write(_:) block in Swift 3
Add functionality for disabling SSL validation
Make changes alongside object store improvements
remove DynamicDefaultObject from default schema
avoid reading from foundExisting before it's set
change tests for dynamic default property values to use incrementing seed
use default property value for primary key if none was provided
add tests for dynamic default property values
Release with sync 34.0  (#268)
Specify the right core version
remove extra apostrophe
fix "type type" typo
set version to 1.1.0
changelog updates for 1.1.0
Update project to support new keychain functionality
fix CoreSimulator.log known Xcode error detection
remove API .diff
tvos swift examples should have their own copy of Places.realm
use clone --recursive to clone the submodules via hardlinks
update Swift 3 packaged examples to find the right frameworks
reorganize test-package-release to be more legible
include binaries for Swift 2.2, 2.3 and 3.0 when packaging Swift frameworks
stop packaging unused tvOS examples
test packaged tvOS examples
use clean_retrieve when building osx
build tvOS & watchOS Swift frameworks into Swift-versioned directories
update submodules in test-package-release
remove xcode-7 directory from packaging
Update sample projects
Remove accidental Swift 2 changes
add "Failed to lookup" simulator error to build.sh detection
nest Notification enum inside Realm
fix Error docs, re-add Equatable conformance and ~= operator
avoid simctl switch crash and avoid logging pid of springboard
use ruby instead of jq to parse json from simctl in reset-simulators.sh
avoid simctl switch crash and avoid logging pid of springboard
fix Swift 3 SwiftLint violations
use ruby instead of jq to parse json from simctl in reset-simulators.sh
unlabel write(block:) parameter
update Swift 3 examples
consistently call fatalError() in previously named methods
rename writeCopy(toFileURL:encryptionKey:) to writeCopy(toFile:encryptionKey:)
rename shouldAutorefresh to autorefresh
rename allDynamicObjects(ofType:) to dynamicObjects(_:)
rename allObjects(ofType:) to objects(_:)
rename Realm.deleteAllObjects() to Realm.deleteAll()
rename createObject(ofType:populatedWith:update:) to create(_:value:update:)
rename createDynamicObject(ofType:populatedWith:update:) to dynamicCreate(_:value:update:)
rename Migration.createObject(ofType:populatedWith:) to create(_:value:)
rename removeLastObject() to removeLast()
rename removeAllObjects() to removeAll()
rename addNotificationBlock(block:) to addNotificationBlock(_:)
rename maximumValue to max
rename minimumValue to min
rename sorted(with:) to sorted(by:)
rename sorted(onProperty:ascending:) to sorted(byProperty:ascending:)
rename filter(using:) to filter(_:)
rename indexOfObject(for:) to index(matching:)
add a space in @available(_,_,renamed:)
byProperty & ofProperty
edits to Austin's Swift 3 API review
Review diffs between Swift 2 --> preliminary Swift 3 API
update build.sh docs generation for Swift 3 & Jazzy 0.7.1
fix tvOS Swift examples directory
Release 1.0.2-17 with sync 33.0 (#266)
unshare PlaygroundFrameworkWrapper scheme and autocreate schemes
move to Carthage/
fix Carthage by making a Realm.xcworkspace
git add -f examples/ios/swift-3.0/Migration/*.realm
add Swift 3 tvOS examples
move tvos Swift examples to swift-2.2 directory
add Swift 3 iOS examples
update CocoaPods watchOS installation tests to support Xcode 8
update CocoaPods OS X installation tests to support Swift 2.3 & 3.0
update CocoaPods iOS installation tests to support Swift 2.3 & 3.0
re-add set -o/-e
remove jq on-demand installation
export DEVELOPER_DIR if currently active Swift version is ok
re-write reset-simulators.sh
rerun ci-pr job if a known Xcode error is detected
skip failing Xcode 8 build.sh jobs
update .jenkins.yml to test Swift 2.3 & 3.0
Add private API to specify a custom file URL for synced Realms
Improve how duplicate users are handled
Update object store for compatibility with 1.0.0-beta-33.0
Skip unspecified, undefaulted values in `initWithValue:` (#4048)
Bridge `Optional` to `NSNull` (#4057)
Refactor `objectForPrimaryKey` to provide better error messages (#4058)
fix Realm Objective-C's Swift 3 extensions
Release 1.0.2-16 with sync 1.0.0-beta-32.0 (#258)
remove podspec dependency versions
bump version to 1.0.2-15
update for Query::find always returning indexes in table
update object store submodule to head of cocoa-sync
Update dependencies
Bump version
Revert "Skip unspecified, undefaulted values in `initWithValue:`"
Skip unspecified, undefaulted values in `initWithValue:`
Rework logging in with a direct access token
Bump version (#242)
make Credential.facebook and Credential.usernamePassword public
Rename types
Add initial support for persistence, minor changes
Enhance error handling
Convert non-custom initializers to factory initializers (#240)
Enforce uniqueness for `RealmOptional` primary keys (#4023)
Set primary key before all other properties (#4024)
Throw when `deleteRealmIfMigrationNeeded` and `readOnly` are both set (#4031)
Represent `Credential` as a struct instead of an enum (#234)
disable unreliable tests
Introduce `unsafeCastToRLMObject` method on `Object` (#4035)
Address feedback
Rewrite token JSON models
Ensure `RLMSyncManager` is always initialized early enough
Release 1.0.2-11 (#237)
actually lint Swift files and fix lint violations
change .travis.yml to upgrade swiftlint rather than install
Remove no-longer-necessary `null_unspecified` annotation
Annotate nullability in all pure Objective-C headers
Add support for sync logging
Use default `FileManager` rather than constructing a new one
convertion -> conversion
Update to changed in realm-sync (#231)
Release 1.0.2-10 (#227)
Rewrite Cocoa sync binding to conform to new API
Backport primary key test restructuring to Swift 2
Add argument labels to differentiate `dynamicBridgeCast` types
Only conform types in need of custom bridging to `CustomObjectiveCBridgeable` (#4008)
remove pk warning
Emit SetUnique instruction even if setting row to existing value
fix getting core & sync dependency versions
update podspecs to build from source
Release 1.0.2-9 (#221)
Update object store to 8a58130d6e1e5277a21de400548ead0baeee7363.
Use `set_int_unique` and `set_string_unique` for primary keys
Use the sync release, not rc (#218)
Release 1.0.2-8 (#217)
Use `Date` and `Data` (#3979)
Update the pattern used to look for the sync release zip now that the version has changed.
Update to realm-sync v1.0.0-beta-29.0-rc.
Update build.sh's cocoapods-setup command to handle the newly-added util/apple subdirectory.
Update the object store.
change auth server SSL port to 443
Accommodate the introduction of `SyncManager` in the object store.
Reset simulators before job (#210)
Use `ObjectiveCBridgeable ` for `RealmOptional` conversions (#3984)
Support `NSDate` and `NSNumber` in aggregates (#3980)
Bump version
Update sync dependency
Update FIXEME comment indicating still broken (#3978)
Migrate to Swift 3 Beta 6 (#3965)
Point the object store to the tip of the cocoa-sync branch.
set C++14 via CLANG_CXX_LANGUAGE_STANDARD rather than OTHER_CPLUSPLUSFLAGS
Update to core 1.5.0
Bump version
Add support for directly providing an access token
Add new files to the Xcode project
Elminate unused argument warnings
Use Additive schema mode when a sync URL is set
Bump version 1.0-2-4 -> 1.0.2-5
Update sync dependency
Remove support for anonymous user
Add support for opening a sync Realm before logging in a user
Get rid of the term 'sync'
Make RLMSchemaInfo::init() a constructor instead
Remove an unused variable
Rename RLMObjectInfo to RLMClassInfo
Update a commented-out test
Address initial review feedback
Make minor fixes and enhancements to sync binding
Rewrite Realm Sync Cocoa bindings
Rewriting Realm Sync Cocoa bindings Part 4
Rewriting Realm Sync Cocoa bindings Part 3
Rewriting Realm Sync Cocoa bindings Part 2
Rewriting Realm Sync Cocoa bindings Part 1
Slightly optimize RLMTimestampToNSDate
Cache the target object schema lookup for creating linked objects
Cache the objectstore version of RLMSchema
Redesign per-thread schema information
Simplify Swift object init and subscripting logic a bit
Have Git fetch submodules when checking out realm-cocoa-private.
Check out from Git with the Realm CI SSH credentials active.
Add libz dependency per realm-sync changes
Point the submodule at `master`
Update to ObjectStore master
Manually bridge `RLMErrorDomain` errors to `Error` to preserve the ability to document error codes.
Get Swift 3 building with Xcode 8 beta 4.
 Add jenkinsfile for building cocoa with sync (#162)
Update to core 1.4.1
Remove commands from build.sh that were used to push / pull changes from object store.
Release 1.0.2-4 with sync 0.26.3 (#184)
Update our CocoaPods installation examples to set the submodules flag.
Generate an error if the object store submodule is missing.
Update podspecs to accommodate changes to how we integrate the object store.
Switch to pulling in the object store as a submodule.
Give Realm collections lazy semantics in Swift 3 (#3866)
stop handling uncaught exceptions
Work around an apparent Xcode bug in dependency tracking.
Ensure that the `ARCHS` setting is correctly escaped.
Override `ARCHS` instead of `VALID_ARCHS`. Avoid hard-coding i386 while I'm at it.
Make testing 32-bit iOS frameworks in iOS simulators compatible with Xcode 8.
Remove the workaround for <rdar://problem/23055637>.
use Yaml Axis Jenkins Plugin
Don't specify the development team on framework targets as it is no longer needed.
Apply Xcode's suggested fix-its in our Swift code to get things building again.
Additional improvements for API and interop
Always respect $REALM_EXTRA_BUILD_ARGUMENTS, rather than only when we invoke xcodebuild directly.
Pass the desired Swift version to xcodebuild in the `SWIFT_VERSION` configuration setting.
Have swift_version.sh check all toolchains for the requested version of Swift.
Work around an apparent Xcode bug in dependency tracking.
Ensure that the `ARCHS` setting is correctly escaped.
Override `ARCHS` instead of `VALID_ARCHS`. Avoid hard-coding i386 while I'm at it.
Make testing 32-bit iOS frameworks in iOS simulators compatible with Xcode 8.
Remove the workaround for <rdar://problem/23055637>.
use Yaml Axis Jenkins Plugin
Release with convenience API for username/password-based auth
Don't specify the development team on framework targets as it is no longer needed.
Adding a convenience password login API, minor improvements
Apply Xcode's suggested fix-its in our Swift code to get things building again.
Further improvements to sync auth code
Release 1.0.2-2 with fixed sync path (#172)
Look for the GitHub PR's source branch in a different environment variable.
Release 1.0.2-1 with sync 0.25.1 (#171)
Update sync version to one that uses core 1.4.0
More improvements
Add a new object store header to the Xcode project.
Add `List::snapshot` and `Results::snapshot`.
Add `List::get_object_schema` and `Results::get_object_schema`.
Remove the workaround for the missing implementation of TableViewBase's copy-assignment operator.
Allow for non-nullterminated object type names (#97)
Change the API-misuse exceptions from runtime_error to logic_error
Enable clang's warning about implicit fallthrough.
Specify width of PropertyType to 1 byte
Improving error reporting and path configuration
fix compilation with Swift 2.3 using Xcode 8 beta 2
Adding 'return' after completion blocks; fixing a bug
Various code fixes
Bump version 1.0.1-1 -> 1.0.1-2 (#165)
Improve error message when using NSNumber in Swift
Add `assertThrows(_:reason:)` to Realm Swift test suite
More fixes, including feedback fixes
More improvements
Improving user-facing APIs
Update for the release of v1.0.2.
More enhancements
Add entry for `RLMResults` subscript change (#3868)
Mention the old, broken behavior of adding an object with no properties.
Verify that results update and post notifications when they refer to an class over an inverse relationship and an object of that class is modified.
Verify that adding an object with no properties throws.
Update to core v1.3.1, and fix the tests so that they continue to pass.
More improvements
Bump sync version
Release 1.0.1-1 with sync 0.24.0 (#164)
Refactoring, adding refresh support
Rewriting Cocoa API to match design document
Update RLMResults to use generic type in subscript (#3848)
Removed references to nonexistent class (#3849)
Add FIXME information
Convert Swift Realm Objective-C Tests to Swift 3
Update support functions to match imported
Add nullability annotations
Work around lack of instance by assuming LinkingObjects is correct type
Work around issue where ObjC generics type not exposed to runtime w/ Swift
remove RLMSupport's test() function
Group together the resolve_backlink() functionality to make it a bit clearer
Forward the subquery rather than unconditionally moving
Rework query building to not use column numbers from RLMProperty
Upgrade to core 1.3.0
Remove a pointless abbreviation
Test queries on reversed column orders
Use a separate index for column -> property lookups rather than sorting the properties
Updates for compatibility with Xcode 8 beta 2
Replace RLMUpdateQueryWithPredicate with RLMPredicateToQuery
Introduce `RLMNotification` type (#3818)
Ensure that the initial notification for Results is always .Initial
Re-introduce testImplicitlyUnwrappedOptionalsAreParsedAsOptionals for Swift 3
Call refresh directly, since it is now thread-safe
Remove debug prints
Map `RLMSyncLogLevelVerbose` to `Level::detail` to better match the previous behavior.
Remove unnecessary forward declarations and include.
Delete a bunch of dead code in RLMObjectStore
Let Xcode know that we've updated our Swift code to support Swift 3.
Check for implicitly unwrapped object-optionals with NilLiteralConvertible conformance
Use a single sync client rather than one per Realm.
Remove `log_everything` from `Realm::Config` now that the level can be configured directly on the logger.
Update according to changes in master@sync (#155)
move versioned core directory to core/ in build.sh cocoapods-setup
add empty swift(>=3.0) sections to Realm Objective-C tests
git mv Realm/Tests/Swift2.2 Realm/Tests/Swift
share more in Util.swift
remove Swift symlink workarounds from build.sh
rm -rf RealmSwift-swift3.0
rm RealmSwift && git mv RealmSwift-swift2.2 RealmSwift
Latest changes from JS
Resolve minor differences with the ObjectStore code
Killing a few gcc warnings (#88)
Allow throws within write block
Add the new tests to the Swift 3 versions of the files
Add empty changelog section
Consistent use of 'managed' and 'unmanaged' terminology
Commenting out Sequence-related extensions to work around compiler bug
Removed redundant `as URL`
Changes for Xcode 8b1
update package_examples.rb for changes in xcodeproj gem
release 1.0.1
Preparing for Swift 3
port Realm Swift to Swift 3
cp -R RealmSwift-swift2.2 RealmSwift-swift3.0-dev
Add some documentation for readOnly
Upgrade to core 1.1.1
Authenticate via 3rd parties
Update realm logo in README.md
Add object store's util directory to the podspec.
Add format.cpp to the static framework target.
Have `List`s exceptions inherit from standard library exception types.
Add basic string formatting for error messages
Prohibiting non-ignored lazy properties in models
Explicitly add project-specific tab and indent settings
Update `Results` exceptions with changes from the object store repository.
Use memory reads rather than `EvaluateExpression` to retrieve the object class name of `RLMResults` instances.
Remove some dead code.
Update the synthetic children provider for Realm collection types to not assume that they all have the same instance variable layout.
Update the `RLMResults` summary provider for the fact that it is now backed by the object store `Results` type.
Update to core 1.1.0
explicitly use 'Type.self' notation when passing types to Realm Swift APIs
Set user-token during BIND
Update changelog
Implement commit helper and realm notifier for Android
fixes gcc optimisation causing RealmCoordinator to use a empty/default path
Use erase-remove_if in RealmCoordinator::unregister_realm()
Avoid leaking the runloop and source if WeakRealmNotifier is move-assigned.
Express `Results`' asignment operators in terms of their equivalent constructors.
Have `Results` default its copy constructor.
Move `List`s defaulted constructors and assignment operators out of line.
Add Realm::is_closed()
Make the key parameter of `dynamicObjectForPrimaryKey(_:, key:)` to be optional.
The key parameter of `objectForPrimaryKey(_:, key:)` should be optional.
remove redundant build settings overrides in PlaygroundFrameworkWrapper
add changelog entry.
update package_examples.rb to properly package playground
add PlaygroundFrameworkWrapper target to Swift iOS examples
small playground edits
Adding RLMSupport.swift to SwiftLint
[CHANGELOG] Add entry for #3672
Allow to create or update objects with RealmOptional as primary key
fix extra space
simplification of Swift gsub() internal function
remove duplicate NSDate null check
remove unused RLMObjectBase realm/objectSchema setters
remove unexposed RLMObject...withObject methods
remove Xcode 7.3 version check
New swift syntax related selectors
update .gitattributes
link to Realm's Code of Conduct page in the readme
fix indentation issues in doc comments & consistently use 'a RLM...'
Addressing JP's feedback
Add current version to dependencies.list (#140)
Update path for modifying the server url in the ios draw example app (#125)
More minor changes, lint fixes
Additional copyediting and polish
add empty changelog section
fix hardcoded '0.' version assumption in installation examples script
Release 1.0.0
release 0.103.2
Copyediting the rest of the code
Tweak phrasing in the changelog entry.
Add a Swift test.
Lint fixes
Update to core 1.0.1
Improving docstrings for dynamic API
More copyediting
Corrections based on feedback
Copyediting RLMRealm and RLMNotificationToken
Corrections based on feedback
Remove property of type 'id' since it it not allowed by the latest version of Realm
Copyediting RLMMigration, RLMResults, and RLMSchema
Factor out some duplicated error translation and improve the resulting messages
run analyze-osx in verify-osx
add analyze-osx job to build.sh
Adding review fixes
Copyediting RLMCollectionChange, RLMCollection, and constants
Review fixes:
Copyediting RLMArray documentation
Remove +[RLMRealm realmWithURL:key:readOnly:inMemory:dynamic:schema:error:]
Add an empty changelog section.
add osx-swift-cocoapods installation example
test test-ios-objc-cocoapods-dynamic installation example in verify-cocoapods
Remove an obsolete workaround
Release v0.103.1.
remove redundant `exit 1`s from build.sh
Update to core 1.0.0
OS X demo schema fixes & cleanup
use inherited framework search paths in watchOS CocoaPods installation examples
remove podspec target checks
add empty changelog section
set version to 0.103.0
fix trailing whitespace
Improving error validation test macro
expand documentation on deleteRealmIfMigrationNeeded behavior
Delete realm rather than run migration if delete_realm_if_migration_needed is set
Add tests for integer and optional primary keys for Swift
Add changelog entries.
Revert an unintentional change to `testAllMethodsCheckForInvalidation`.
Add a test to verify that -[RLMResults isInvalidated] performs a thread check.
Avoid a redundant thread check in `validate_read`.
Make the code uglier to make SwiftLint happy.
Rename `Results::is_invalidated` to `Results::is_valid` for consistency with `List::is_valid`.
Add an `invalidated` property to `Results`, `LinkingObjects`, `RealmCollectionType` and `AnyRealmCollection`.
Update `RealmCollectionTypeTests` to not have an open write transaction across tests.
Add `-[RLMResults isInvalidated]`.
Restore the intended behavior of a `RLMResults` depending on a deleted object being empty rather than invalidated.
Default to testing the current branch rather than master, and warn if there are any local changes.
actually run the installation examples build.sh
simplify & improve build.sh verify-cocoapods
Add RLMLinkingObjects to the list of supported property types
Mostly remove Mixed property support
misc README updates
move changelog entry to appropriate section
only check git diff-index in verify-cocoapods if it's a git repo
address PR feedback on verify-cocoapods and cocoapods-setup
re-add pod setup to verify-cocoapods
allow failing on git reset
also modify RealmSwift.podspec when linting
allow pod spec lint to work locally
update symlinks for Swift 2.2
remove RLMDefines.h
remove RLMObjectArgument macro
remove RLM_GENERIC_RETURN macro
remove RLM_GENERIC_COLLECTION macro
remove RLM_GENERIC(...) macro
remove __has_feature stub macro
remove RLM_SWIFT_UNAVAILABLE macro
remove RLM_WARN_UNUSED_RESULT macro
remove RLM_NOESCAPE macro
remove nullability macros
add changelog entry
avoid Swift 2.2 warnings & deprecations
update examples & packaging to remove xcode 6 support
cd Realm/Tests && rm -rf Swift1.2 Swift2.1 Swift2.1.1 Swift2.2 && git mv Swift2.0 Swift2.2
assume that REALM_SWIFT_VERSION is never 1.2
always use core with bitcode
update .swiftlint.yml to point to RealmSwift-swift2.2
git mv RealmSwift-swift2.0 RealmSwift-swift2.2
rm RealmSwift-swift2.1 RealmSwift-swift2.1.1 RealmSwift-swift2.2
Improving a test, fixing macro params
added missing documentation
update build.sh verify-docs for new json format
Adding test for external commit helper error handling
Improving tests
Improving file exceptions
Adding better error domain support for system errors
Update README.md
add changelog entry and remove cast
remove all deprecated APIs
Add an empty changelog section.
Release 0.102.1.
Have `-[RLMWeakObjectHandle object]` consume the row accessor to avoid unnecessary row accessor churn.
Make SwiftLint happy.
Lazily initialize Swift `LinkingObjects` instances.
[CHANGELOG] Add entry for #3559
Add a test for querying over multiple backlinks with different column indices
Add a test for opening a read-only Realm on multiple threads
Update to core 0.100.4
[Error] Expose case for schema mismatch
[MigrationTests] Extract test for fail on schema mismatch
[MigrationTests] Reword assert message
[MigrationTests] Use assertFails and assertSucceeds
Update baselines for tests now doing more work
Increase the work done for Swift perftests with overly high variance
Improve performance of RLMInitializeSwiftAccessorGenerics
Update iPad baselines for iOS 8
Remove the testRealmCreationUncached() baseline
Update performance baselines
Speed up sending Realm-level notifications
Add an empty changelog section.
Release 0.102.1.
Have `-[RLMWeakObjectHandle object]` consume the row accessor to avoid unnecessary row accessor churn.
Make SwiftLint happy.
Lazily initialize Swift `LinkingObjects` instances.
[CHANGELOG] Add entry for #3559
Add a test for querying over multiple backlinks with different column indices
Add a test for opening a read-only Realm on multiple threads
Update to core 0.100.4
[Error] Expose case for schema mismatch
[MigrationTests] Extract test for fail on schema mismatch
[MigrationTests] Reword assert message
[MigrationTests] Use assertFails and assertSucceeds
Update baselines for tests now doing more work
Increase the work done for Swift perftests with overly high variance
Improve performance of RLMInitializeSwiftAccessorGenerics
Update iPad baselines for iOS 8
Remove the testRealmCreationUncached() baseline
align sync branch with some differences in master
reset unnecessary whitespace changes compared to public master
Update performance baselines
Speed up sending Realm-level notifications
Cache the default Realm file directory
Make Realm() less needlessly slow
update Draw example for syncUserToken
Add a changelog entry.
Add an empty changelog section.
Move the sync client/session ownership to RealmCoordinator
Release 0.102.0
Add Swift tests for delete Realm if migration
Add a test for the code path without custom schema.
Add tests for `RLMRealmConfiguratin.deleteRealmIfMigrationNeeded` option.
Delete the Realm file then re-create with new schema if migration is required
Add `deleteRealmIfMigrationNeeded` property for Swift
Add `deleteRealmIfMigrationNeeded` property to RLMRealmConfiguration
Update dependencies.list to sync 0.22.0 (#131)
update core to 0.100.2
minor fixes to account for API changes in realm-sync & realm-cocoa
improve exception when renaming a property not present in the latest model
Update to core 0.100.1
remove debugging code clearing accessor cache when renaming a property
simplify some code in -[RLMMigration renamePropertyForClass:]
Only use the subquery codepath for key paths that traverse to-many links.
Rename `ColumnReference` members for consistency.
Add Swift tests for delete Realm if migration
Add a test for the code path without custom schema.
Add tests for `RLMRealmConfiguratin.deleteRealmIfMigrationNeeded` option.
Delete the Realm file then re-create with new schema if migration is required
Add `deleteRealmIfMigrationNeeded` property for Swift
Swift fix for recent linking objects change
updates for linking objects changes
address PR feedback
also check object name when deleting properties
remove nullability attributes to allowing running tests with Xcode 6.4
use std::move to pass properties to remove_properties
update accessors after renaming properties
unbreak some stuff
revert to using vector of properties
update Swift tests to reflect latest changes to URLs in APIs
allow renaming a property in an intermediate migration
set name of properties to delete to empty strings
rename ObjectStore::rename_property
update for latest changes in master
stop using Objective-C generics to support running tests with Xcode 6.4
update table_column for each property after ones being removed when renaming
don't remove properties after a migration when we're not migrating
fix SwiftLint violations
add changelog entry
assorted whitespace cleanup
add Migration.renamePropertyForClass(_:oldName:newName:) to Realm Swift
clean up object store exception spacing
add unsuccessful property rename tests
add missing property rename exceptions
add Property::type_string() function
add additional successful property rename tests
add property rename test helpers
add basic test for renaming properties in migrations
add -[RLMProperty copyWithNewName:]
add -[RLMMigration renamePropertyForClass:oldName:newName:]
add basic ObjectStore::rename_column function
delay deletion of properties in migrations
add empty changelog section
Add `deleteRealmIfMigrationNeeded` property to RLMRealmConfiguration
fix Swift Optional.map usage to compile with Swift 2.1
Remove List::get_version_counter()
[CHANGELOG] Correct 0.101.0 version
Release 0.101.0
Add a test for queries using an auto-migrated index
Add a test for dates immediately around the reference date and fix a rounding error
Handle NSDates outside the range representable by Timestamp
Re-enable indexing NSDates
Remove another platform-specific comment
Test migrating directly from the pre-null file format to latest
Add a test for mutex robustness
Update to core 0.100.0
Give a variable a less terrible name and add a comment
Improve change calculation performance for nontrivial object graphs
Add dependencies file to specify which version of sync is used (#130)
fix doc comments in RealmCollectionChange.Update
fix more typos
consistently use four spaces in doc comment code samples
re-add addNotificationBlock(_:) vending 'Self' to RealmCollectionType
Add an empty changelog section.
Release 0.100.0.
Check if the userToken is not null in initWithUserToken (#129)
Specify the `isDirectory:` argument where possible when intializing `NSURL`s to a file path.
[Examples swift] Inhibit all warnings from pods
Remove a comment that doesn't add any value.
Update to core v0.98.4 to pick up two further fixes to `Query` when restricted to a `TableView`.
[Examples objc] Ensure forwards-compatiblity with CocoaPods 1.0
[build.sh] Build examples with external dependencies
[Examples] Commit Podfile.lock
Add `LinkingObjects` coverage to `RealmCollectionTypeTests`.
Ensure that a `Query`'s restricting view is in sync before running any queries.
Decouple `LinkingObjects` from `Results` to work around a Swift compiler bug.
Remove use of Objective-C generics to keep the example compatible with Xcode 6.4.
Update to core v0.98.3.
Added back in the 'readonly' explanation.
Updated backlinks example apps with new syntax.
Add a changelog entry.
Add tests for fine-grained notifications on linking objects properties.
Rename the `klass` member of `RLMPropertyDescriptor` to `objectClass`.
Update to core v0.98.1 to pick up a fix for handing over `TableView`s.
Introduce `RLMPropertyDescriptor` and use it within `+linkingObjectsProperties`.
Remove a redundant initialization.
Use the correct capacity when initializing `map`.
Explicitly specialize `ColumnReference::resolve` rather than using `enable_if`.
Deprecate `-[RLMObject linkingObjectsOfClass:forProperty]` and `Object.linkingObjects(_:forProperty:)`.
Link to the HTTPS version of the documentation.
Add tests for the various ways that linking objects properties can be declared incorrectly.
Allow `RLMLinkingObjects` properties to have a protocol type annotation like we do for `RLMArray`.
Require that `RLMLinkingObjects` properties are declared as readonly.
Add support for linking objects properties in Swift.
Implement querying over backlinks.
Update to core v0.98.0 which contains the support needed for queries involving backlinks.
Implement accessors for linking objects.
Add support for declaring linking objects properties from Objective-C.
Add the linking objects property type.
Add support for the concept of computed properties.
Add -[RLMProperty isEqual:], and use it.
Simplify converting between realm::Property and RLMProperty.
Update Swift to use the syncUserToken (#127)
Use the syncUserToken instead of identity and signature (#126)
[Examples] Share scheme for ReactKitTableView example
Add documentation for a demo involving the draw app
add empty changelog section
release 0.99.1
Update -[AsyncTests testErrorHandling] to work with core 0.100
Always deliver results to the correct SharedGroup
add empty changelog section
release 0.99
fix changelog deprecation table rebase error
re-add addNotificationBlock without changes for Swift, but mark as deprecated
remove Swift notification block APIs without change information from AnyRealmCollection
remove Swift notification block APIs without change information
update RLMCollection.h for new notification API
[CHANGELOG] Add entry for #3461
Improve error when appending to array property before the schema is ready
Remove `addNotificationBlock(_:)` from `RealmCollectionType`.
fix "move address space exhausted changelog entry to appropriate section"
move RLMErrorAddressSpaceExhausted changelog entry to appropriate section
shorten long Swift lines
simplify Swift tests for URLs
address PR review feedback
change use of 'FileURL' to just 'URL' in method names
fix wrong class name in changelog
add API deprecation table to changelog
fix performance test
highlight optional encryption key in writeCopyToFileURL & schemaVersionAtFileURL docs
avoid deprecated APIs in examples
fix Xcode 6.4 deprecation errors
fix Swift style issues
completely remove the variants of writeCopy:/schemaVersion: without encryption keys
update tests for schemaVersionAtFileURL:
deprecate schemaVersionAtPath: methods in favor of schemaVersionAtFileURL: versions
update tests for writeCopyToFileURL:
deprecate writeCopyToPath: methods in favor of writeCopyToFileURL: versions
update tests for +[RLMRealm realmWithFileURL:]
add +[RLMRealm realmWithFileURL:] constructor, deprecating realmWithPath:
update tests for RLMRealmConfiguration.fileURL
add fileURL property to configuration, deprecating path
use -[RLMNotificationToken stop] in examples
[Test] Try to exhaust adress space on device/32-bit sim only
[Test] Check that AddressSpaceExhausted is correctly rethrown
[CHANGELOG] Add entry for #3437
Catch AddressSpaceExhausted and set error
assorted typo & grammar fixes in comments
fix typo in CollectionChangeBuilder comment
Update changelog
Refactor SortedMoveCalculator and add more of an explanation
Make more member functions in CollectionNotifier pure virtual
Add a FIXME
Pull CollectionChangeBuilder into its own file
Ensure -[NSIndexPath section] exists on all platforms
Iterate backwards to pick the last valid list in select_link_list
Use aggregate initialization for the base class in CollectionChangeBuilder
A bunch of docs wording updates
[Doc] Add example which coalesces
[Doc] Explain notification coalescing
[Doc] Explain threading and runloop requirement
[Doc] Explain NotificationToken in last paragraph
Rename CollectionChangeIndices to CollectionChangeSet
Rename BackgroundCollection to CollectionNotifier
Change all of the mentions of 'query' in NotificationToken to 'notifier'
Allow specifying the section for the index path methods
Remove RealmCollectionChangePaths<T>
Report modification paths as pre-delete/inserts as required for UITableView
Refactor the incremental change tracking for mixed source versions
Deliver the new TableView even if it did not change
Make RealmCoordinator::run_async_notifiers a bit less gross
Remove transaction log handlers for old pk functions
Clean up includes and forward declarations a bit
Only track inserts and deletes for tables being queried directly
Move CollectionChangeBuilder to background_collection.hpp
Improve performance of move mapping when there are a lot of deletions
Improve performance for large numbers of deletions
Install util/*.hpp in cocoapods-setup
Add basic performance tests
Actually unregister List notifiers when the List is destroyed
Use a better data structure for IndexSet
Add a first pass at API documentation
Speed up CollectionChangeBuilder::move_over()
Rename erase_and_unshift() to erase_or_unshift()
Make the initial results deliver for RLMArray less clunky and wrong
More API updates
Clean up stale moves for linkviews even without a merge
Update moves when there is another move to exactly the previous move target
Improve and expand the changeset calculation tests
Treat Results from LinkViews as if they were sorted for diff calculations
Add support for wrapping a LinkView in a Results
Speed up transaction log parsing for queries
Greatly speed up sorted changeset calculations
Speed up the IndexSet combining operations
Speed up IndexSet::count() a bit
Make sorted move calculations a bit less gross
Use binary search in IndexSet::find()
Speed up unsorted changeset calculations by eliminating most calls to count()
Don't parse the transaction logs on the background thread if no change info is needed
Always send an empty changeset to the first call of a Results notification callback
Skip collecting change information when it isn't needed
Discard moves which are turned into no-ops when merging
Partially split out the code for calculating changesets from the struct for delivering them
Remove an unused function
Comment and clean up the Notifiers/BackgroundCollection
Rename AsyncQuery to ResultsNotifier
Prioritize modified rows when calculating changes for sorted results
Skip calling callbacks if two commits cancel each other out when merged
Actually report deletions for table clears
Rework handling of mixed move_last_over() and modifications to actually work
Refactor the transaction log parsers to eliminate some duplication
Update the API
Add fine-grained notifications for lists and results
Pull all of the common things between RLMArray and RLMResults to RLMCollection
Filter out changes from outside the src dir when pulling from the object store
add changelog entry for mixed deprecation
move mixed type warning from RLMSchema to RLMProperty
Deprecate mixed properties
Small reformat
Update constructor call to match current sync version
add top changelog section and set version to 0.98.8
soften changelog entry fixing #3194
update core to 0.97.4
address PR feedback
stop using deprecated RLMRealm.path property in performance tests
add RLMRealmConfiguration_Private.hpp
add comments explaining usage of deprecated RLMRealm.path property
set version to 0.98.7
add empty changelog section
convert LaunchScreen.storyboard to xib to support Xcode 6.4
add changelog entry for #3372 fix
update core version to 0.97.3
add changelog entry
deprecate path & readOnly properties on RealmSwift.Realm
don't create an RLMRealmConfiguration for internal usage of readOnly
deprecate RLMRealm.readOnly in favor of configuration.readOnly
deprecate RLMRealm.path in favor of configuration.path
Have `-[RLMResults indexOfObjectWithPredicate:]` respect the sort order.
Cleaned up Objective-C Examples project file.
Cleaned up Objective-C project.
Consolidated the Launch Screens to one file per project.
update for jazzy 0.6.0
Added final Launch Screen storyboards in Objective-C project.
Updated Launch Screen in Swift GroupedTableView
Added Launch Screen for TableView example.
Added Launch Screen to the Swift Simple example
Added storyboard to ReactKit example
Added Launch Screen for Migration
Added Launch Screen for Swift Backlink, Encryption, GroupedTableView projects.
Added Launch Screen for TableView example
Updated Xcode project with launch screen files.
Added Launch Screen to REST example app
Added Launch Screen to RACTableView project
Added Launch Screen to Migration
Added Launch Screen to GroupedTableView
Added Launch Screen to Extension.
Updated Encryption Launch Screen PLIST property.
Added Launch Screen to Obj-c Encryption example
use token.stop() in tests
add NSNumber to the list of supported properties
improve property type exceptions
deprecate `-[RLMRealm removeNotification:]`
run 'pod setup' before linting podspecs
Remove the manual storage of observationInfo on RLMOBject
Added compatibility UUID for Xcode 7.3
add GettingStarted.playground to examples README
stylistic changes to remain consitent with other examples
add Xcode Playground to iOS examples
Work in progress
Suppress the warning in console when use playground
Added compatibility UUID for Xcode 7.3
add GettingStarted.playground to examples README
stylistic changes to remain consitent with other examples
add Xcode Playground to iOS examples
Limit `find_all` to returning a single matching row as that is all we need.
Update with changes from v0.98.6.
Add a changelog note about fixing tests.
Keep SwiftLint happy.
Avoid opening Realm files from within the .xctest bundle.
Use the correct path to TestHost.app's binary on iOS vs OS X.
Revert "temporarily remove TestHost app to allow testing on CI"
use Xcode 7.3 Travis image
add comment explaining why we allow warnings in RealmSwift.podspec
allow warnings in Realm Swift podspec
temporarily remove TestHost app to allow testing on CI
[ISSUE_TEMPLATE] Point out how to share confidentally
[ISSUE_TEMPLATE] Replace advises by questions
[ISSUE_TEMPLATE] Add placeholders for versions
[ISSUE_TEMPLATE] Revise intro
use Swift version 2.2 when building docs with jazzy
make Swift 2.2 new default Swift version
Test that convenience initializers work correctly
[CHANGELOG] Add entry for #3305
Mark all required initializers as NS_DESIGNATED_INITIALIZER
[Swift] Check Object subclass with custom initializer
[Doc] Add pragma marks to RLMObject.mm
lint podspecs during build.sh verify-cocoapods
Add supported data types to doc comments for indexedProperties
Change the block parameter to a named tuple
Add empty section to changelog.
Set version to 0.98.5.
Update to core v0.97.1.
Add supported data types to doc comments for indexedProperties
Change the block parameter to a named tuple
Carrying over the syncIdentity from Swift Configuration object to the RLMRealmConfiguration object.
Add empty section to changelog.
Set version to 0.98.5.
Update to core v0.97.1.
Use realm::List in RLMArrayLinkView
The primary key warning ends up being wrtten to the console a lot in any app that is using a PK right now (and in the tests). This will limit the warning to show only once.
Replace custom sync client (implemented in Cocoa) with the new one provided by core (realm::sync::Client)
Set TMPDIR value correctly if it's nil.
Set the version to 0.98.4.
fix two small Swift style violations
Update to core 0.97.0
[build.sh] Overridable fallback value for TMPDIR
Include Draw demo auth token for reference.
Updated Draw demo with crypto-based auth.
Added syncSignature configuration option; pass it with IDENT.
* fixed broken link within the document to #cla
Report changes made via addOrUpdate/createOrUpdate to KVO
apply minor backwards-compatible updates to support Xcode 7.3 beta 5
Update sync.md
Add empty changelog
Set version to 0.98.3
use `getconf DARWIN_USER_TEMP_DIR` rather than `$TMPDIR`
minor comment language fixes from #3227
move #3227 entry to appropriate changelog section
[CHANGELOG] Add entry for #3227
[Podspec] Remain backwards-compatible to 0.39.0
Handle ClearTable well.
Require SSL connections to use TLSv1.
Remove Realm::m_in_transaction and use the value from the SharedGroup
[ISSUE_TEMPLATE] Bigger headings
Reset simulators before testing examples to ensure things are in a consistent state.
Update the script that packages the examples to handle the changes to use workspaces.
Update the various example projects to use a workspace for doing in-tree builds.
Update to core 0.96.2
[ISSUE_TEMPLATE] Remove all the pleasantries
[ISSUE_TEMPLATE] Stylistic refinement
[ISSUE_TEMPLATE] Get rid of all the ℹs
[CHANGELOG] Add entry for #3120
Use the right util class depending on parent class
Add a changelog entry.
Stop overriding `+className` on the generated accessor classes.
Use `object_getClass` instead of the pair of `objc_getMetaClass` / `class_getName`.
Stop overridding `+shouldIncludeInDefaultSchema:` on generated accessor classes.
Add `warn_unused_result` attributes to `addNotificationBlock` methods.
[ISSUE_TEMPLATE] Move into .github directory
add watchOS Swift CocoaPods framework installation example
add watchOS Objective-C CocoaPods framework installation example
add watchOS Swift Carthage framework installation example
add watchOS Objective-C Carthage framework installation example
add watchOS Swift dynamic framework installation example
add watchOS Objective-C dynamic framework installation example
Remove a bogus `FRAMEWORK_SEARCH_PATH` from the Puzzle demo.
Enable SSL in Cocoa client when connecting over port 443.
Add new changelog section.
Set the version to 0.98.2.
[ISSUE_TEMPLATE] Initial proposal
Split SchemaValidationException into two of SchemaValidationException and SchemaMismatchException
match exception message in testSchemaVersionCannotGoDown
fix inverted old/new versions
Don't consider simulators with the same name in different sections of `simctl`s output to be duplicates.
[Podspec] Unwrap framework header files
Sort the schema for -description so that the result is deterministic
Make partial schema initialization more robust
Remove some unnecessary temporaries.
Xcode 7.2.1 fails to run tests in the iOS simulator for unknown reasons.
Add support for predicates of the form `%@ IN collection`.
Reword an error message for clarity.
Add a changelog entry.
Allow aggregate operations to be used on key paths that start with a unary relationship.
Avoid holding locks while calling transaction::advance()
Update the changelog entry to mention the full scope of the fix.
Clean up the test case a little.
Add a changelog entry.
Ensure that `RLMFastEnumerator` initializes our Swift generics machinery for the accessor objects it creates.
Add a test case that shows that optional values and lists on Swift objects are not correctly copied between Realms.
don't package examples and don't package watchOS/tvOS
disable packaging watchOS & tvOS when packaging sync
speed up carthage installation examples
merge fixes
Remove an unused method
Improve RLMRealm test coverage
Move the changelog entry into a new release section.
Add some missing documentation comments, and fix the line length.
Add a changelog entry.
Have Swift collection types forward `valueForKeyPath` to their underlying Objective-C types.
Remove the Query version of Results::index_of()
Crash called "indexOfObject" method to RLMResults made ​​from RLMArray, when the object wasn't found.
Set version to 0.98.1
Update changelog
Glob the _Private.h headers in the podspec rather than listing them individually
Add a test case for queries on deleted arrays
Update to core 0.96.1
Release 0.98.0.
move subquery changelog entry to appropriate location
Pull in the ReactKit example we had for Swift 1.2, and modernize it to work with Swift 2.1.
Add a changelog entry.
Print an error when building Realm Swift with an unsupported version of Swift.
Only write SwiftVersion.swift if RealmSwift supports the given version of Swift.
Remove Swift 1.2 support.
Switch to using `RLMAssertCount` to ensure the subquery tests are tested via the async path.
Add a test for expected error when using IN in conjunction with a SUBQUERY.
Introduce helper functions to clarify the logic around decomposing subquery expressions.
Move `PredicateExpressionTransformer` out of the header file.
Add a changelog entry.
Update to core v0.96.0, which contains support for subqueries.
Add support for subqueries.
update to pass validation with SwiftLint 0.7.2
Partially work around CocoaPods 1.0 issues
Update the podspec header handling to work with the new ObjectStore layout
Preserve the directory structure when assembling headers for CocoaPods
Enable -Wunused-private-field and remove some unused fields
Actually update m_have_callbacks when the last callback is removed
Update changelog
Add a subclass of QueryTests which runs queries via the async machinery
Pull tests for query construction validation into a separate test suite from query result validation
Remove redundant check in RealmCoordinator::advance_helper_shared_group_to_latest()
Remove AsyncQuery::m_unregistered
Update some out-of-date comments
Write a much better comment about thread stuff for AsyncQuery
Remove a pointless modification of AsyncQuery::m_tv
Add a commment about AsyncQueryCancelationToken atomicness
Update the comments for Realm::Internal
Rename AsyncFriend to Interal
Bump the handover version when it doesn't need to be rerun
Update Swift Results docs to match the obj-c ones
Reorder checks for creating background queries by cost of the check
Make -[AsyncTests testAddingNewQueryWithinNotificationBlock] more reliable
Retain the AsyncQuery in the cancellation token
Remove incorrect debug assertion
Remove an unused forward declaration
Only deallocate AsyncQuery from the query worker thread
Don't hold onto the tableview between runs of async queries
Only wake up the worker thread when a callback is added
Better avoid having any Realm instances alive when the cache is cleared between tests
Don't create background queries for Results on threads without runloops
Add more tests
Simplify AsyncQuery::remove_callback()
Remove an unused member variable
Do a better job of not holding locks while calling callbacks
Update Swift 1.2 versions of things
Add more tests and fix bugs
Reduce the scope of class friendships
Use a Results notification block rather than a Realm one in the TableView examples
Don't continue to run queries in the background if the result is unused
Automatically create the async query when converting to a TableView
Use a single AsyncQuery per Results regardless of number of callbacks added
Remove -[RLMResults deliverOn:block:]
Ensure that the query shared group is not closed while queries are running
Add addNotificationBlock to List and AnyRealmCollection
Spell 'asynchronously' correctly
Check the thread in addNotificationBlock:
Avoid holding the query mutex while running async queries
Use TableView::get_query() rather than passing around the query separately
Add addNotificationBlock to RLMArray and RLMCollection
Switch to -[RLMResults addNotificationBlock:]
Use an unordered map for the Realm coordinator cache
Update RLMResults' objectSchema when the realm changes due to switching threads
Use a guard clause for the error case in Result
Speed up RealmCollectionTypeTests a little
Avoid doing pointless work for already-stopped queries
Use the correct syntax for Swift doc comments
Avoid copying the input config when getting an RLMRealm from the cache
Remove old workaround
Add support for running queries asynchronously
Add wrappers for platform-specific headers and normalize include paths
Destroy all notifiers before closing realms in clear_cache()
Add a not-very-useful generic CachedRealm implementation
Extract the non-Apple specific parts of CachedRealm to a base class
Add an untested non-Apple ExternalCommitHelper implementation
Remove some unused cruft from ExternalCommitHelper
Add a short explanation of CachedRealm
Actually remove the Realm from the cache when close() is called
Log uncaught exceptions in the notifier thread
Eliminate a config copy when opening Realms
Simplify RealmCoordinator::get_coordinator()
Use an unordered map for the Realm coordinator cache
Decouple Realm instance tracking from interprocess notifications
Extract cache management and inter-Realm sharing to RealmCoordinator
Skip CMakeLists.txt when pulling from the object store
set version to 0.97.1 and add top changelog section
fix use of grep in build.sh binary-has-bitcode
Key off the Swift version rather than checking the Xcode version.
Don't invoke `sh build.sh binary-has-bitcode` unless we're building with Xcode > 6.
Add changelog
Add Objective-C tests for index optional properties
Add Swift tests for index optional properties
Add support index optional properties
Add changelog
Add Objective-C tests for indexable properties
Add Swift 1.2 tests for indexable properties
Bool and NSDate properties can be indexed.
Improve the wording of the changelog entry.
Add a test case for queries involving links to objects that are then deleted or moved.
remove superfluous `_ = ` assignment
Use XCODE_VERSION_MINOR rather than ACTUAL
Restore test location reporting in Swift tests
Upgrade to core 0.95.9
stop passing file & line to XCTest functions
just use 'strong' rather than 'copy' for RLMObjectSchema.className
revert setting 'ONLY_ACTIVE_ARCH = YES' in project.pbxproj
add Swift 2.2 symlinks
update APIs passing __FILE__ to XCTest functions from String to StaticString
avoid postfix increments
make RLMObjectSchema.primaryKeyProperty nullable in the private header
fix issue with testDeleteData() & testMigrationProperties() in MigrationTests
apply Xcode 7.3's recommended upgrades
use the standard copyright notice in installation examples
fix CocoaPods installation examples
Some cosmetic fixes
Extract some logic to a helper function to avoid recursion in update_schema()
Make Schema constructable from initializer lists
Rearrange some lines of code
Rename delegate -> binding_context
Update path for push-object-store-changes
Tweak * placement.
Implement `+automaticallyNotifiesObserversForKey:` on `RLMObjectBase`.
Use objc_setAssociatedObject() to extend the lifetime of a stream delegate object
[build.sh] Use full CURL flags instead of abbreviations
[build.sh] Print stderr when curl fails
Add RLMAssertCount() and use it for all of the query tests that do that
Eliminate pointless direct uses of NSPredicate in query tests
Remove pointless uses of the dynamic API in query tests
Delete RLMPredicateUtil
verify that binaries have bitcode if necessary
disable verify-osx-encryption job on Travis
Use memory_order_acq_rel for refcount decrementing
[CONTRIBUTING] Remove point about tags
[CONTRIBUTING] Add guidelines about the format of commit messages
enable PR CI builds on Travis CI
grep -q
rename cocoapods-setup 'without-core' argument to 'swift'
Minor fix to give better error message for misspelled keypath operators.
generate SwiftVersion.swift in cocoapods-setup
fix indentation
change swiftLanguageVersion ACL to internal
remove trailing '/' from link tags in custom_head.html
update build.sh's build_docs() for jazzy 0.5.0
track Swift version used to compile Realm Swift
Forward the source error location in several Swift test helpers
[CHANGELOG] Add entry for #2451
[SwiftLint] Disable variable_name rule
[Realm] Propagate File::NotFound from writeCopyToPath:key:error:
[Swift Test] Use Error to catch possible failures
[Swift Error] Expose RLMError.FileFormatUpgradeRequired
[Swift RealmConfiguration] Expose disableFormatUpgrade
[Swift Error] Implement Equatable
[Test] Test error when file format upgrade is required but disabled
[ObjectStore] Catch File::NotFound and rethrow correctly
[Test] Explicit assert what's going wrong on opening
Keep error in userInfo when wrapping them in exceptions
[Doc] Explain when FileExists and FileNotFound can occur
[RLMConstants] Rename RLMErrorFileAccessError to RLMErrorFileAccess
[Doc] Explain how to catch errors in Swift 1.2
Allow to catch RLMError cases by ErrorType wrapper
[Script] Operations for bcsymbolmap files should be done in the product's directory.
fix invalid Swift docs
update all Xcode projects to recommended settings
make `Realm.init(path:)` inherit from the default configuration
use default configuration in +[RLMRealm realmWithPath:]
Specifying strong attribute to underlyingValue to avoid warning
add empty changelog
Release 0.97.0
[Script] Avoid code signing bcsymbolmap files
Always allow adding notification blocks on the main thread
correct usage of va_start/va_end
fix tvOS Swift packaging
compact, filter & reuse Realm file in tvOS examples
[tvOS] use Swift 2.1.1 when packaging
Order history member before associated shared group member in RLMSyncSession, such that they are destroyed in the right order
simplify vararg handling for NSPredicates
[CHANGELOG] Add entry for #2990
[Test] Check that sharedSchema doesn't dead-lock
[Test] Make assertThrowsWithReason available
[RLMSchema] Fail instead dead-lock in +sharedSchema
[NSPredicate] move predicate format validation from RLM_VARARG into RLMValidatedPredicate
made va_list methods public
[RLMProperty] cached property value & add comment about Any->List/RealmOptional
[RLMResults] Improve error thrown on missing argument of KVC collection operators
[RLMArray] Don't allow nested key paths for standalone arrays
[CHANGELOG] Add entry for #2989
[RLMArray] Delegate KVC collection operators
[RLMResults] Implement array KVC collection operators
[RLMResults] Implement numeric KVC collection operators
[RLMResults] Implement KVC collection operator @count
[RLMObjectBase] fix analyzer warning (#3006)
[Examples] Use RLMNotification block to reload data when download completed.
[tvOS] actually run tests & build examples
[tvOS] add changelog entry
[tvOS] package examples
[tvOS] build examples in `build.sh examples`
[tvOS][examples] add bundled Realm files
[tvOS][Examples] simplify reloadData code
[tvOS][Examples][DownloadCache] fix compilation issues
[tvOS][Examples] add tvOS section to README
[tvOS][Examples] remove unused clearData method
[tvOS][examples] use standard Realm comment header
[tvOS] reword comments
remove incorrect mention of tvOS when opening an encrypted Realm on watchOS
[Notifier] Watch changes for tvOS without pipes
Revert "[Notifier] Watch changes for tvOS without pipes"
Add scheme for examples
Add tvOS examples in Swift
Add a preloaded data example for tvOS
Add a cache example for tvOS
Enable encryption for tvOS by updating core to 0.95.0
add verify-tvos-debug and verify-tvos-device to full verify
enable bitcode & set rpath for both watchos & tvos
add tests to TestHost & combine objc & swift tvOS device tests
share TestHost scheme
update warning in test_devices for AppleTV
exit after building tests if requested in Realm Swift
merge test_ios_devices and test_tvos_devices
work around rdar://23055637 for Swift simulator tests (ios-swift/tvos-swift)
merge build_ios_combined, build_watchos_combined & build_tvos_combined
Add build script for device tests/verify for tvOS
Enable unit tests for tvOS framework
Add conditional macro for tvOS to analitics/encryption/tests
Use Library/Caches directory as default
Add support for building Realm & RealmSwift for tvOS
[Notifier] Watch changes for tvOS without pipes
Support install via CocoaPods
Adding tvos to the build.sh command list.
Throw when defining `Object` properties of an unsupported type
Removing the duplicate change from Thomas then Kristian between the two repos.
Move construction of the `NSPredicate` back out of the benchmark loop.
Drop the recently-introduced use of  in examples/installation/build.sh.
Update paths to the built copies of the frameworks.
Added warning for developer when using primary keys. Explains the current behavior and the expected behavior once primary key support is added.
`git mv` Swift 2.1 examples to 2.1.1
wtf
work around rdar://22993940 and move swift-2.1 examples to swift-2.1.1
use Swift 2.1.1 to build Swift docs
Support for Xcode 7.2
Update more references to Swift 2.1
Switch to using Swift 2.1.1
Update LastUpgradeVersion for Xcode 7.2
Apply the objc annotation to the Swift 1.2 code as well.
improve config error when missing path+identifier
Enabled support for embedding the Swift source code inside the main project rather than a secondary Swift module named "RealmSwift"
Set Info-Plist version to 0.96.3
drop mention of Xcode 6.3 support in README
Update doc tool & supported Xcodes in README
Call TableView::clear() with RemoveMode::unordered
Update to core 0.95.5
Add 0.96.3 changelog
Follow recent core-side changes
Remove unnecessary `-v` that I had added while debugging.
Have github_release.rb fail if any of the carthage commands it runs fail.
Add a test case that verifies `-[RLMMigration createObject:withValue:]` respects the declared ordering of a model class's properties when the columns in the Realm are in a different order.
Add a changelog entry.
Extend `-testRearrangeProperties` to test the order of array entries.
Update to core 0.95.4
Update existing TableViews in first() and last()
Updated the build.sh script to copy the local core directory into the release folder, so that the release process uses that versus downloading core.
Add a changelog entry.
Move all the things.
Check for nil realm parameters in objectstore functions
Add support for key path vs key path comparisons when one side contains an aggregate operation.
Simplify the implementation of `value_of_type_for_query_with_collection_operation` by adding an overload for `CollectionOperation`s.
Add support for basic key-path vs key-path comparisons.
Represent the column that an aggregate operator is applied to as a column reference.
Simplify the implementation of `value_of_type_for_query`.
Move remaining query building to use ColumnReference.
Add a ColumnReference class to represent a reference to a column within a query, and deploy it for collection expressions.
update core to 0.95.1
[RLMAnalytics] s/mimimum/minimum/
Added doc section about designing data models for sync
[PoC] Read-only Realm should be opened even in immutable directory Realm files in an app bundle should be opened if marked as read-only
more limitations
Throw an exception when notifications blocks are added outside of a run loop
sp
sp
limitations of sync
sp
remove Swift casts of RLMObjectSchema
sp in doc
Minor intro to doc
Document that Realm.Configuration can be shared between threads
Document that RLMRealmConfiguration can be shared between threads
allow targeting the last official release in Carthage installation example
ignore Carthage directories
[carthage installation examples] expand sha environment variable inline
test Carthage installation examples from source
remove trailing whitespace in Realm.swift
Updated Objective-C doc comments, clarified run loop behaviour on Swift
address PR feedback
[CHANGELOG] Add entry for #2650
[Query] Make sure that linked objects are from the same Realm
[Query] Make sure that linked objects are attached
[Test swift-1.2] Add XCTAssertEqual overload with optional support
[Tests swift1.2] Remove duplicate assert
[Tests] Test all property types for access through DynamicObject
add ci-pr task to build.sh
Added missing parameter to exception constructor.
[Results] Use unsafeBitcast instead force-cast
Remove the exception TLS slot workaround in Swift tests
Removed disabling cache from format upgrade configuration.
Added UUIDs for Xcode 6 and removed GC key.
Add a test for non-end table insertion observation
[SwiftLint] wholly disable rules for length of functions, files & types
Remove accidentally duplicated functions
update for SwiftLint 0.4.0
Add SwiftLint target to Realm.xcodeproj & build.sh verify-swiftlint
attempt no. 4 at fixing indentation
address indentation concerns
[SwiftLint] indent some function bodies
[SwiftLint] lint all of RealmSwift
address PR feedback
[SwiftLint] address style violations
[SwiftLint] add .swiftlint.yml, address some style issues
Check for invalid schema changes even when KVO is not used
Handle allowed schema changes in the transaction log observer
Add changelog entry for the LinkList performance fix
Remove the encryption-related checks for an attached debugger
Update to core 0.95.0
Added UUID entries for Xcode 7.0 and Xcode 7.2 beta to Realm Plugin.
Added Xcode 7.1 (Also 7.1.1) to the list of accepted UUIDs for the Xcode Plugin.
Remove the tracking of if any changes were made from update_realm_with_schema()
Reshuffle the updating of m_config in Realm::update_schema()
Add an explanatory comment in subscript.
Add a test for enumerating a Swift class with optional properties during a migration.
Ensure that the `property` property of the `RealmOptional` is initialized.
Annotate collections with generic types
Changed wording of alert windows and standardised escape conditional.
update old docs links
Use dispatchAsyncAndWait for testRefreshCreatesAReadTransaction
Remove stray semicolon
Clarified doc comments for cancelTransaction
Eliminate a query copy in Results::filter()
remove RLMPlatform.h after building docs & refactor verify-docs
verify that Objective-C docs have 100% coverage in build.sh verify-docs
mark explicitly undocumented declarations as :nodoc: & add missing docs
touch Realm/RLMPlatform.h when generating docs so jazzy will find it
add pragma marks and documentation comments for externs in RLMConstants.h
move RLMError definition up in RLMConstants.h
remove appledoc hack to document notification externed globals
indent RLMResults aggregate docs code samples as code blocks
convert RLMNotificationToken comment into documentation comment
document RLMCollection protocol
fix typo in migration header docs
prevent the RLMArray(Swift) category from being documented
replace old appledoc `@name` sections with `#pragma mark`s for jazzy
fix old links in header documentation
fix old links in ObjectStore/property.hpp
rewrite docs/README.md as it was completely out of date
update jazzy templates from latest changes in jazzy
generate both Objective-C and Swift docs using Jazzy
Use make_optional()
Remove unnecessary cast
Switch back to just passing the index to RLMCreateObjectAccessor where applicable
Remove the force-dealloc of RLMRealm instances in Swift tests
Add Realm::close() and call it in RealmCache::clear()
Expose the object class name from Results
Switch to throwing exceptions with all of the info needed to build error messages
Port most of RLMResults's functionality to realm::Results
Add results.{hpp,cpp} from realm-js
Move Realm::Config's default constructor out-of-line
Removed jittering effect when re-positioning puzzle pieces.
add `Int8` support for `RealmOptional`, `MinMaxType` and `AddableType`.
Added 'shake to reset' logic to Puzzle app.
Added screen clearing logic to Draw app.
Updated Swift 1.2 & 2.1 doc comments
Added 'Shake to Edit' logic.
Initial changes to api docs
add syncServerURL and syncIdentity properties to Realm.Configuration
expose RealmSwift.Realm.setGlobalSynchronizationLoggingLevel(level: SyncLogLevel)
allow setting syncIdentity to nil
update sync docs with changes from #95
move cocoa_sync_doc_DRAFT.md to sync.md
Update cocoa_sync_doc_DRAFT.md
How it works
Information about setting the user identity.
Try link syntax
Direct people to the realm-cocoa-private repo
Spelling, syntax highlighting
Initial draft of cocoa sync docs
s/Ludicrous/Verbose/
update sync example apps
add RLMSyncLogLevel enum with 'Normal' and 'Ludicrous' modes
remove duplicate cachedRealm/realm syncServerURL check
move sync identity from RLMRealm global setting to RLMRealmConfiguration
Use `carthage archive` command to create Carthage release zip - Make archive include `bcsymbolmap` and `dSYM` files
Use the new 'hydrogen' server in the server URLs of the demo apps
Remove dead and disabled code
Removed redundant new API.
added 'import Foundation' to Swift template
generalize strip-frameworks.sh to copy/delete bcsymbolmap for any framework
Copy bcsymbolmap files to build products folder when archiving 1. Copy bcsymbolmap files to framework bundle 2. Move bcsymbolmap files from bundle to xcarchive whenever archiving
[RLMArray] fix typo in comment
Use the path of the file which actually failed to open in error messages
Don't copy .xcconfig files into framework targets.
Remove Realm prefix
Rename RealmDelegate to RealmBindingContext
Change the Realm iOS static target's product type to indicate that it produces a static framework.
Let API users set sync client user identity.
Add support building on Swift version 2.1.1
Avoid updating RLMVersion.h unless its contents have changed.
Add back two Swift-related Xcode configuration settings that I missed when moving the targets to Realm.xcodeproj.
Have the RealmSwift framework target depend on Set Swift Version to ensure it runs before any swift code builds.
Remove RealmSwift.xcodeproj, and redundant .xcconfig files.
Copy the performance baselines for the Swift tests into Realm.xcodeproj.
Copy the RealmSwift framework and test targets into Realm.xccodeproj.
Embed Realm.framework in Tests.xctest, and remove the unnecessary duplication of the TestHost target.
Add client-side write combining based on server provided hints
Update CHANGELOG for `@noescape` attribute
fix type
Add `@noescape` attribute to `write(_:)` method
Tracking recent changes in sync protocol and in C++ client
Give the TestHost target an explicit dependency on the Realm framework target.
Revert "Try a cleaner approach to working around <rdar://problem/23055637>."
Try a cleaner approach to working around <rdar://problem/23055637>.
Work around <rdar://problem/23055637> in a more reliable way.
Update the path that package_examples.rb replaces to match the one present in RealmExamples.xcodeproj.
Disable building the test targets as part of the framework schemes.
Add back the setting that picks up the prefix header from the `REALM_PREFIX_HEADER` environment variable.
Improve the explanatory comment
Clean up cached things tied to the read transaction before calling compact()
Improve the -[RLMRealm compact] test
Convert exceptions from compact() to NSException
Update to core 0.94.4
Switch the Swift examples back to looking in `build/ios` for the frameworks.
Update iOS examples for the change in build path of the iOS static framework.
Run the performance tests on iOS devices only.
Have the Realm and Realm iOS Static targets build their test targets when building for running.
Add strip-frameworks.sh back to the dynamic framework bundle.
Add casts to suppress spurious warnings about values outside of the range of the enum.
Specify a destination when building for iOS simulators.
Remove bogus files from resources of Realm.framework, and fix dependencies.
Include the performance tests as part of the iOS static framework tests.
Disable all multi-process tests. They are not yet compatible with TestHost.app.
Get iOS tests passing.
Configure TestHost to build for OS X so that the tests can run there.
Unify 'Set Swift Version iOS' and 'Set Swift Version OSX'.
Remove the old framework targets, and fix the tests to run from within Xcode.
Duplicate the iOS target as Realm static.
Add a Realm framework target that supports OS X, iOS and watchOS.
Pull deployment targets up to Base.xcconfig where possible, and only set code signing identity for iOS-based platforms.
Extract framework target configuration settings into .xcconfig files.
Extract project-level configuration settings into .xcconfig files.
Add changelog stub.
Remove `testRealmCreationUncached` baseline from the new iOS devices.
Remove `testRealmCreationUncached` baseline from the new iOS devices.
Release 0.96.2
Handle symlinks pointing to other symlinks in cocoapods-setup
Update more paths to 2.1 in packaging scripts
Open Swift examples in Xcode 7.1 to get the Swift language update check out of the way.
Rename swift-2.0 directories to swift-2.1 in examples.
Switch from Swift 2.0 to Swift 2.1
duplicate cocoapods tests to work around #2701
add build.sh command to verify that CocoaPods
Add comment why copy uppercase header  directory
Add check whether `core/include/Realm` exists before copy
[PoC] Optional ignored properties would not be ignored, and causes crash
Added file format flag to config constructor
Disabled config caching when checking for file format updates.
Reversed configuration for format upgrades in SharedGroup
Exposed file format upgrade error to Objective-C level.
Added support for suppressing file format upgrades.
Handle symlinks pointing to other symlinks in cocoapods-setup
Update more paths to 2.1 in packaging scripts
Open Swift examples in Xcode 7.1 to get the Swift language update check out of the way.
Rename swift-2.0 directories to swift-2.1 in examples.
Switch from Swift 2.0 to Swift 2.1
[PoC] Optional ignored properties would not be ignored, and causes crash
Remove some miscellaneous forward declarations and #imports.
Remove declarations of RLMNotifier now that it's not used or implemented.
Enable and fix a few additional warnings
[build.sh] copy all cocoa-related object store headers in cocoapods-setup
include impl and impl/apple object store cpp files in podspec
duplicate cocoapods tests to work around #2701
add build.sh command to verify that CocoaPods
Add Realm/ObjectStore/impl/apple to private_header_files in the pod spec.
[Podspec] add header files from ObjectStore's impl directory
Add a test showing our behavior when migrating from an optional column to a required column.
Support migrating required columns to optional, preserving their contents.
Add build.sh commands to push and pull commits from the objectstore repo
Create accessors for things with custom schemas even if dynamic is set
Remove REALM_NULL_STRINGS checks
Move things which are not part of the API to an impl directory/namespace
Send changes_available() even if autorefresh is enabled
Add a bit of documentation for RealmDelegate
Simplify column shifting for removed properties a little
Add a Schema class, move lookup by name and internal-consistency checks there
Add baselines for the new perf tests
Make Realm::compact() more robust
Reduce the scope of a variable
Avoid capturing the RLMRealmConfiguration in the migration function
Add a comment explaining why some code is weird
Add a RLMMakeError overload for std::system_error
Eliminate a duplicated error message
Add trailing newlines
USe more const refs to avoid copies
Make a bunch of things const
Remove an unused function
Share ExternalCommitHelpers between Realm instances for a single path
Lower the amount of work done in the new perf tests
Allow more nullable property types when supported
Refactor schema initialization a bit
Move the interprocess notification functionality to the object store
Shuffle stuff around and clean some things up
Add more KVO perf tests
Refactor array KVO performance tests
Improve array KVO performance a bit
Add a performance test for Array KVO
Skip PK uniqueness checking when first creating a Realm file
Add performance test for initializing a new realm file
Improve performance of realm_requires_update() and make more things const
Speed up RLMRealmSetSchemaAndAlign a bit
Port some of the KVO support functionality to the object store
Add the ability to bypass the Realm cache entirely
Rework change notifications
Ensure that exceptions in migration blocks can't leak objectstore Realms
Eliminate an extra hashtable lookup
Avoid materializing the shared schema just for Swift migrations
Add Realm::get_schema_version()
Change realm::Schema to a vector rather than a map
Remove property.hpp include from object_schema.hpp
Don't create accessors when copying the schema from a cached Realm
Remove cacheTableAccessors and switch back to lazily getting TableRefs
Convert RLMRealmConfiguration to a wrapper around Realm::Config
Use NSDMIs for realm::Property
Don't cache dynamic realms in the ObjectStore cache either
Actually set Realm::Config::schema_version
Eliminate some copies
Use NSDMIs for Realm
Reduce s_init_mutex's scope
Use NSDMIs for Realm::Config and make it moveable
move exception message creation to exception constructors
port RLMRealm to c++
undef INFO_KEY macro after use
support exception format strings
allow replacement of work 'property' in default exception messages
use enum for dict/info keys, support per platform/language exception messages
Add changelog stub.
Release 0.96.1
[RealmOptional] extract RealmOptionalType casting into separate functions
don't clean up lingering files in child processes
Clean up any potentially lingering Realm files from previous runs
Remove older deprecated Objective-C methods
fix typo in CHANGELOG
Remove all deprecated things
Use a unique directory for each Swift test rather than just a different file name
Greatly speed up copying RLMRealmConfiguration
Update tests to remove uses of deprecated methods
fix more int issues
test number extremes in setAndTestAllOptionalProperties
Populate the RLMRealmConfiugration correctly in Swift's migrateRealm(path:)
Honor the schema version set in the configuration in `+[RLMRealm migrateRealm:]`
Remove testNotificationsForChangesWhileSuspended
expand PROJ & WORK variables in installation examples build.sh
add comment & rename base to collectionBase to clarify RealmCollectionTypeTests
refactor installation examples to lazily bootstrap in order to parallelize
create a large number of identical string objects to test compaction
bump up iOS 7's testRealmCreationUncached std dev
Make RLMException perform string formatting
Move all relevant information to exception messages rather than userInfo
don't limit where Swift device tests are run
add performance test baselines for iPad Mini 2
[build.sh] skip Swift tests on iOS 7 devices
add iOS 7 64-bit device baselines
verify-ios-device-objc/swift
PR feedback
Undo whitespace removal
Remove a newline that somehow snuck in.  Apologies!
Add dynamicList method to Swift 1.2 and improve ObjectTests for method
Create a dynamicList method on Object
Add comment why copy uppercase header  directory
[build.sh] split device tests
add objc test
Add check whether `core/include/Realm` exists before copy
Add changelog stub
remove mention of CGFloat from docs
Add the aggregate query support to the changelog
Remove the -beta2 tag from the version
Set version to 0.96.0-beta2
Add RLMOptionalBase.h to the podspec
Mark this version as 0.96.0-beta in the changelog
Add support for the -beta tag on the version in package-test-examples
Set the version to 0.96.0-beta
Update to core 0.94.0
Update the supported property types docs for optionals
Comment some unreachable code in RLMQueryUtil
Add more tests for unsupported predicates
Test every operator on every null-supporting property type
Remove a pointless helper method
Remove an unused helper method
Implement query support for null
Add some tests for nil where only NSNull was tested
Refactor some migration tests and improve code coverage
Improve test coverage of primary key migration logic
Delete an unused function
Remove REALM_ENABLE_NULL checks
Extent automigrating to optional to all property types
Update requiredProperties documentation to reflect that everything but Array supports nil now
Set version to 0.96.0
Remove leading space before colon in class declarations
Document RealmOptional
Add KVO support for optional properties
[RLMOptionalBase] Ensure an exception is thrown when mutating an invalidated accessor
Add Null query tests
[RLMUtil] Remove extraneous import
Move REALM_ENABLE_NULL definition in RealmSwift to XCConfig
[RLMProperty] Update copy-pasted code from list -> optional
Update Swift 2 object interface tests to use Swift 2
Add query tests on nullable columns
Add tests for invalid RealmOptionalTypes
Add tests for default values for primitive optionals
Support optional NSNumber properties in Swift
Add tests for invalid NSNumber properties
[RLMUtil] Clean up nil check in RLMIsObjectValidForProperty
Add tests for optional NSNumber properties
[TestObjects] NSNumberObject -> NumberObject
[RLMUtil] Make DateTime casting explicit
[RLMUtil] RLMNSNullToNil -> RLMCoerceToNil
Port Swift nullable primitive changes to Swift 2.0
Add nullable primitive support to Swift 1.2
Reflect Swift optional types natively
Add support for NSNumber properties in ObjC
Add basic nullable NSDate support
Extend support to @max, @sum and @avg.
Add support for queries that perform comparisons on collection.@min.property.
Extend test case to cover other comparison operators.
Use an object with an integer property for testing @count.
Add support for querying based on the count of an RLMArray property.
Update core to 0.93.0
Update for changes in core's API.
Validate that the encryption key matches for cached realms
Use the default realm path in testInitCustomClassList()
Cherry-pick portions of bbc4eb35 from realm-cocoa to fix builds against core's current sync-demo-5.
Print property and class names when assigning nil to a required property
[CONTRIBUTING] Add Speed up section
Have CocoaPods set `APPLICATION_EXTENSION_API_ONLY = YES` when building Realm.framework and RealmSwift.framework.
Store copies of input strings and encryption keys in RLMRealmConfiguration
Consolidate parameter validation in RLMRealmConfiguration
Work around a case where the iOS simulator fails to launch when using `xcodebuild test`.
fix the target names in the CocoaPodsDynamicExample Podfile
Support passing in the branch to use to the CocoaPods installation samples
Add autorelease pools to Swift 2.0 performance tests
Re-enable Swift device tests for Swift 1.2 only
Hack around "libc++abi.dylib: cannot create pthread key for __cxa_get_globals()"
Handle errors when delete test files due to the file not existing
Explicitly set TestHost's bundle id to make Xcode happy
Use prelaunch-simulator when switching between xcode versions for building release packages
Update changelog and version for 0.95.3
Update examples-ios to support xcode 6+7 ios examples
Update examples packaging
Remove extra rebuild of OS X framework
update ObjC installation examples for new dual Xcode packaging
Update release package to contain both Xcode 6 and 7 builds
Automatically select the correct core library when installing via CocoaPods
Use `rm -f` rather than `|| true` to avoid spurious error output
re-add Set Swift Version targets to Realm.xcodeproj
Use bitcode core in podspec & set bitcode symlink in iOS static target
update core version to 0.92.4 and automatically switch core bitcode symlink
0.95.3 release notes
Set default Swift version in build-docs.sh to 2.0
Add validation for class subsets
Remove CGFloat from "Supported property types" section of docs
Support using initWithValue: in Swift property defaults
Copy strip-frameworks.sh into watchOS framework
Add a simple test for partial schema init
Explicitly track which classes are generated rather than implementing a method
Avoid adding classes to the partial shared schema multiple times
Avoid adding generated accessor classes to the shared schema
Clean up lingering in-memory realms for perf tests
increase maxStandardDeviation for testCommitWriteTransactionWithLocalNotification
Include a watchOS framework to GitHub release zip
Add Realm.isEmpty
[Doc] Explain when an object becomes invalidated
Set version to 0.95.2
Extract the simulator resetting to a separate script
Let Xcode 7 make changes to the carthage xcodeproj
Update the installation examples version of simulator prelaunching
Resolve symlinks in cocoapods-setup by copying rather than moving
Switch Carthage installation example to testing Swift 2.0 rather than 1.2
Actually enable bitcode for more things
Add support building on Swift version 2.1
Update changelog and version for 0.95.1
Update to core 0.92.2
Shut down all booted simulators when switching device models
Ensure that the documents directory exists when running tests
Make prelaunch-simulator more reliable
Ensure DEVELOPER_DIR is always set
update installation examples to point to appropriate Swift branches
Set default Swift version to 2.0
Simplify Draw app
Compilation fixes.
CGFloat -> float
Revert "temporarily disable a test to see how CI reacts"
temporarily disable a test to see how CI reacts
update build-docs.sh to support both Swift 1.2 and 2.0
Remove handling of initial schema-creating changesets.
Add Xcode 7 GM to DVTPlugInCompatibilityUUIDs
Updated CHANGELOG with bug fix.
[README] Update Xcode 7 version
remove about office hour from README.md
Use alignof macro to get alignment when adding ivars
Add a test for using an RLMObject subclass created at runtime
[Examples] Update Swift 2 examples to try! commiting writes
Add try! to new tests for commit writes
[CHANGELOG] Add entry for write transaction error handling
[RLMRealm] Allow handling errors commiting a write transaction
Add KVO support for array move and exchange
Remove ancient workaround in migration tests
Use a type alias rather than a default template argument.
[CHANGELOG] Add entry for bumping the minimum CocoaPods version
[CHANGELOG] Move RealmCollectionType entries to Enhancements
[Podspec] Enable WMO for RealmSwift
[CHANGELOG] moved RealmCollectionType entries up
[RealmCollectionType] make _AnyRealmCollection final
[RealmCollectionType] removed List tests already tested in RealmCollectionTypeTests
remove duplicate line in CHANGELOG
[RealmCollectionType] fix Swift 2 tests
[RealmCollectionType] document AnyRealmCollection.init()
[RealmCollectionType] copied changes from Swift 1.2 into Swift 2.0
small fixes
[RealmCollectionType] consolidated common Results and List tests into RealmCollectionTypeTests
[_AnyRealmCollection] added FIXMEs for force-casts
[CHANGELOG] move changelog entires up
added ugly hacks to actually implement _AnyRealmCollection for Swift 1.2
AnyRealmCollection
[RealmCollectionType] removed functions already present in CollectionType
[RealmCollectionType] add var realm: Realm? { get }
[List] use NSPredicate(value: true) to generate Results
[RealmCollectionType] add documentation
[CHANGELOG] add aggregate operations entry
[List] document typealias
added CHANGELOG entry
spacing
[RealmCollectionType] add common List/Results functionality to shared protocol
[List] add aggregate operations to List
[RealmCollectionType] use RLMGenerator in Swift 1.2 and 2.0
[RealmCollectionType] Add Element typealias
[Swift] make List and Results conform to an empty RealmCollectionType protocol
[CHANGELOG] Add entry for primary key property setting leading to an exception
[RLMAccessor] Throw an exception when attempting to update persisted primary key property
[README][LICENSE] added Crimea to list of prohibited regions
[Swift-2.0][Examples] update Swift 2 examples to do/catch instead of try!
[ObjectSchemaInitializationTests] Add tests for implicitly unwrapped optional properties
Set version to 0.95.0
[GitHubRelease] Remove the broken Xcode 7 build directory
[README] Update Xcode 7.0 version to Beta 6
[RLMRealm] Don't eagerly load the shared schema when accessing the configuration property
[List] insertContentsOf should have been appendContentsOf
[CHANGELOG] Add entries for Xcode 7 beta 6 changes
Update for Xcode 7 Beta 6 Swift 2.0 changes
[RLMObjectStore] Also include RealmSwift property name in error
[Object] Use the partial shared scheme for Swift standalone object
[CHANGELOG] Add entry for RLMRealmConfiguration.objectClasses
NONE.
Add unit tests for queries using NONE.
[build.sh] Use clean_retrieve in osx-swift
[RLMObjectStore] Improve exception message when trying to persist object w/o schema
Avoid deadlocks in standalone object initialization
[Docs] Add documentation for objectTypes parameter
[RLMSchema] Make the sharedSchema a proper singleton
[build.sh] Copy Realm.framework to OS X swift directory
Remove example scratch code
Just set an array of classes on the configuration
[RLMConfiguration] Allow specifying a set of classes
Cleaning up whitespacing from last commit and from others who shall go unnamed.
Adding two tests for Realm Swift:
Also make `initWithValue:` designated initializer
Line spacing fix that appeared from rebase.
Additional fix for Swift1.2 header documentation. Each delete() method should have the correct documentation for its implementation now.
Adding RLMObjectBase_Dynamic.h as a public header for WatchOS.
Small fix for documentation per Sam.
Doh! Adam should drink more coffee and rememeber his previous thoughts.
Per Sam's advice, these should not be methods or properties of a different name, but simply the functions that we are currently using.
Primary key should be id not NSString since we support RLMPropertyTypeInt too.
Adding dynamic objc method to retrieve an object via primary key. New Swift API had this but objc was lacking it.
Added method on Realm:
Reworked the RLMRealm_Dynamic header to only include the ability to retrieve objects via className string from a Realm and to create an object with a className string.
Added two methods to Realm (RealmSwift):
Adding warnings to the dynamic methods.
Breaking out RLMRealm_Dynamic.h into Dynamic module.
Adjust headers to include RLMRealm_Dynamic.h as a public header.
Puzzle app: Do not delete the Realm file on lauch
Add `NS_DESIGNATED_INITIALIZER` macro to `RLMObject`s init
Have update_query_with_column_expression delegate to add_constraint_to_query.
[Podspec] Use pod_target_xcconfig to set C++ standard
Avoid an extra hashtable loopup in Object's subscript
Avoid going through subscript to initialize list properties
Change how KVC for Swift List properties is handled
Avoid derefrencing nil when RLMValidateMatchingObjectType is passed a nil object.
Change how the prefix header is set so that it's only used for Realm.xcodeproj
Undef verify() in the precompiled header
Only use the prefix header when building the CI PR job
Add an env variable for passing extra arguments to xcodebuild
Add a precompiled header
Add changelog entry
Update an error message
Don't rely on NSArray using a single contiguous allocation
Actually write a comment
Add Swift tests
Use a frozen copy of standalone arrays for fast enumeration
Use indexInSource: for valueForKey:
Avoid creating the extra TableView when the Realm is not in a write transaction
Add an RLMArray test
Enumerate a frozen copy of RLMResults/RLMArray
[Podspec] Allow building via CocoaPods as a static lib on OS X
Remove long-commented-out test
Remove SwiftTestCase and just use RLMTestCase
[Podspec] Add RLMRealmConfiguration.h to public headers
[CHANGELOG] Add entries for Realm Configuration
Update examples for the nesting of Realm.Configuration
[RLMRealm] Document migrateRealm:
Rename RLMConfiguration to RLMRealmConfiguration
[RLMObjectSchema] Only suggest NSString? when null strings are enabled
Rename RealmConfiguration to Realm.Configuration
Clarify configuration documentation
Ignore if update checker encountered server errors
Sort configuration tests in xcodeproj
Clarify default realm configuration documentation
[RLMConfiguration] Add tests
[Migration] Document the new `migrateRealm` function
Update example apps to use realm configuration
Keep schema versions as uint64_t all the way down
Path and Configuration based realm construction are now mutually exclusive
Improve RealmConfiguration docs
Deprecate Realm methods in favor of RLMConfiguration
[Realm][RLMRealm] Expose a configuration property
[RLMConfiguration] Rewrite to just be mutable
Add RealmConfiguration / RLMConfiguration
Add missing KVO files to watchOS
Build watchos-swift instead of just the obj-c version
[Realm] Support using IUOs in methods that use generics to get the class name
Add verify-watchos CI target
Switch versions so that error makes sense
Make List<> properties observable without being dynamic
Update changelog
Track deletions when deleting a LinkView
Implement a missing test
Don't pointlessly take a unique_ptr in RLMGetObservationInfo
Avoid creating the NSIndexSet for standalone array changes when it's not needed
Assert that prepareForInvalidation() is called on the head of the list
Add a bunch of backticks to docs
Change year to 2015
Reduce the scope of some variables
Remove out of date test
Update for core API changes
Add test for notifications from array KVC
Add test covering row erasure from an ordered table
Generate KVO notifications for RLMDynamicValidatedSet()
Add tests for setting via the dynamic API
Add tests for setting via KVC
Pull AssertIndexChange up to the other assert macros
Add a ReactiveCocoa example
Add a bunch of comments
Throw an exception when an invalid observer is added to RLMArray
Set multipleLinkviewChanges correctly
Remove an unused variable
Fully embrace using "invalidated" for RLMArray
Add example using ReactKit
Make RLMObservationInfo uncopyable
Remove unused function
Check the correct object schema for RLMArrayLinkView observers
Test a more useful scenario for array diffs
Add some minimal documentation
Don't set a cascade notification handler if there are no observers
Remove a FIXME comment
Improve performance of RLMClearTable()
Greatly speed up large numbers of change notifications on `refresh`
Make RLMObservationInfo::valueForKey() a bit faster
Use in-memory Realms for the KVO tests
Send notifications when -[RLMRealm invalidate] is called
Collapse more sorts of changes into an array clear
Add a test
Update for linkview changes in core
Move a bunch of code out of the header
Add a constant for @"invalidated"
Give the returnNil stuff a more appropriate name
Rename RLMNotification to RLMObservation
Give up on trying to support preversing observers when adding an object to a Realm
Rework deletion handling in TransactLogHandler
Cut down on the pre-emptive work done by TransactLogHandler
Simplify RLMTrackDeletions
Make ListBase more observable
More Swift tests
Add simple Swift tests for KVO
Make most of RLMObservationInfo's members private
Don't send NSNull to all properties when an observed object is deleted
Make RLMTrackDeletions a little less bad
Cache linked objects on the observer info
Finish removing RLMOverrideStandaloneMethods
Pull a lot of the notification functionality out to its own source file
Make RLMObjects Key-Value Observing compliant
Sort the Xcode projects
Release 0.94.1
Update to core 0.92.1.1
Update Migration example in Swift 2 for String API loss
Update to core 0.92.1
Handle leading blank lines in the core version check
[build.sh] Download core over https
[RLMArray][RLMResults] Improve class mismatch exception message
[RLMResult] Allow checking for the index of standalone objects
Improve a variable name
Cut down on some includes
Remove uses of RowIndexes::Sorter
[Swift 2 Beta 5] Update for parenthesis around force casting in function args
[Swift 2 Beta 5] Update for assertThrows type inference changes
[Swift 2 Beta 5] Update to cast to NSString when using file path APIs
[Swift 2 Beta 5] Update for no dyanmic generic properties
Disable syncing to disk for everything but running on device
revert isEqualToString: check in RLMTestCase's waitForNotification
DrawApp: Do not delete the Realm file on startup. It is no longer necessary.
disable Carthage's Xcode 7 installation tests
changelog entry
Override className in RealmSwift.Object to make it final
Document that +[RLMObject className] should not be overridden.
[Examples][Installation] Test Carthage with Swift 2.0
[Installation][Examples] enabled Carthage Swift 2.0 tests
Specify content type when uploading github release assets
Release 0.94.0
explicitly set REALM_SKIP_DEBUGGER_CHECKS in RealmSwift test scheme
[List][RLMArray] Clarify move documentation
[build.sh] Print out when downloading core fails
[RLMRealm] Centralize all encrytion-related validation
[RLMRealm] Throw a helpful exception when attempting to use encryption on watchOS
Xcode 6 fixes
[CHANGELOG] add entry for RLMArray/List move
[List][RLMArray] Allow moving objects from on index to another
[CHANGELOG] fix typos
Update Core to 0.92.0
CHANGELOG typos
tweak CHANGELOG wording
add favicon to html docs. fixes #2220
verify that an in-memory realm's path is in the temporary directory
use temporary path for in-memory realms
Use operatingSystemVersionString directly
re-introduce RLM_GENERIC_ARRAY for Realm's unit testing purposes only
Remove RLM_GENERIC_ARRAY macro
Add autoreleasepools everywhere we dispatch_async in RealmTests
updated Swift 2.0 doc comments to new syntax
attempt to fix issues with launching simulators from different Xcodes
fix typo in installation examples
[RLMTestCase] Ensure waitForNotification has an autoreleasepool
[watchOS] add RLMAnalytics to watchOS target
Add changelog item
Add analytics on simulator/debugger run
[Installation][Examples] split test-all into test-xcode{6,7}
[Carthage][Packaging] renamed Build-Swift-2.0 -> Build-Xcode-7.0 & only move watchOS to Xcode 7.0
fixed typo in README entry
[List][RLMArray] Improve swap documentation
[List] Add swap for Swift 2.0
[CHANGELOG] Add entry for addition of List.swap
[RLMArray][List] Allow swapping two elemements
Erase all available simulators when prelaunching
Typo fixed
Delete dynamic framework before building each Swift version for package-ios-swift
Add sanity check to make sure that we don't throw too many files to user's face
prelaunch-simulator before running ios-swift in package-ios-swift
[README] Xcode 7 Beta 4 is now required for Swift 2
Prelaunch the correct simulator in the installation examples
Dont attempt to test the carthage swift 2 installation examples yet
[CHANGELOG] Add entry for migration autoreleasepools
[RLMMigration] Call enumeration blocks inside an autoreleasepool
[build.sh] Copy scripts directory
[ObjectUtil] Use Functional Swift™
[List] Add tests for replaceRange
[RealmSwift] Update for Swift 2.0 Beta 4
[build.sh] Ensure the dynamic cocoapods example is installed
[build.sh] Source the swift version file relative to $0
Split "Set Swift Version" into iOS and OS X versions
[CHANGELOG] Add entry for mroe informative exceptions
[RLMAccessor] Make dynamic get/set exception messages more informative
[CHANGELOG] Add entry for watchOS & bitcode
[CHANGELOG] Add entry for 64 bit date precision on 32 bit devices
Guarentee 64 bit integer precision for dates even on 32-bit
Add watchos support to the RealmSwift podspec
[build.sh] Extract swift version handing into its own script
Setup cocoapods, but without downloading core
[Podspec] Add the different swift directories to the RealmSwift preserve_paths
Update installation examples for swift 2.0
Add Swift 2 to the Carthage zip
[build.sh] Allow working with a relative workspace in test-package-release
[build.sh] Exclude the .git dir when searching for symlinks
[build.sh] Guard against two files being symlinked to the same source in cocoapods-setup
Recursively remove symlinks since Jenkins seems to archive them as directories
Download Core when building for watchOS
[build.sh] Automatically reify all symlinks
Always use Xcode 7 for watchOS packaging
Build dynamic frameworks with Xcode 7
Update to core 0.91.2
Actually create the watchOS packaging directory
Enable bitcode for ios static
Add watchos and watchsimulator to the Realm target in the RealmSwift project
Enable APPLICATION_EXTENSION_API_ONLY for watchOS builds of Realm.framework
Enable bitcode for watch / dynamic iOS builds of Realm.framework
Package watchOS Frameworks
Add watchOS support to the podspec
Support bitcode in RealmSwift
Add `watchOS Dynamic` target, that is framework for watchOS architecture (armv7k and i386)
Add build script generating Realm/RealmSwift.framework for watchOS architecture
Add watchOS build configuration to RealmSwift
[build.sh] Add a task to pre-launch the appropriate iOS Simulator
Test Swift examples with both versions of Swift
iPad icon for Puzzle.
Add migration example realms to swift 2.0 example
Ensure swift version is set when running OS X tests
Wrap dispatch_async tests in an autoreleasepool
Use REALM_SWIFT_VERSION in set-swift-version if it's set
Begin updating packaging stuff
Sort out a bunch of conflicting Swift-versioned paths
Correct the framework search path for the Swift 2.0 examples
Use bash features and add some missing quotes
Only override DEVELOPER_DIR if REALM_SWIFT_VERSION is set
Let Xcode 7 change stuff
Move the RealmSwift xcconfig files to an unversioned directory
Split symlink updating into multiple lines
Update supported Xcode version in the README
Remove the long-running branches section of the README
Temporarily disable bitcode in RealmSwift project
Handle Int8/Bool properties in a way that works with the old Swift API
Use the demangled class name for objectClassName
Temporarily disable bitcode until we have a core build with it
use (T.self as Object.Type).className() instead of T.className()
fixed missing force unwrapping
Get rid of unused initializer result warning in examples
Get rid of unused initializer result warning
Make RealmSwift.Results fast enumerable
remove old commented out CVarArgType support
make writeCopyToPath throw
Update Swift examples
Update Swift performance tests
Make Realm initialization use Swift exceptions
Make the failable init sort of work
fix for descirption
differentiate between bool and int8 in swift
fix for varargs and equatable issues
Incomplete Swift 2.0 support
update SwiftTestCase to not force try
Removed explict typealias that could be inferred
support Xcode 7
Backwards-compatible changes for Xcode 7
Make a copy of all Swift files for Swift 2.0
[build.sh] Allow setting Swift version from outside a git repo
Pick correct Xcode for the current swift version
[build.sh] Set swift version symlinks in one place
Allow compile Realm.framework from the command line to work
Make the swift example switchable
Make Realm.framework swift tests switchable
Use a symlink to make Swift version changeable
Address reviewer's concern, categories are remove in favor of static utility function
Add more document of class and methods in order to comply with Realm's contribution guideline
Refactor error handling a bit, make things a little nicer
Finish implementing glob file and open Realm browser app with URL path as arguments
Add NSFileManager category to support easier Realm file searching
Add SimulatorManager to perform work of finding booted iOS Simulator
Wait until recieving didApplicationFinishLaunchingNotification
Add DVTPlugInCompatibilityUUIDs item for Xcode 6.4
Wrap dispatch_async tests in an autoreleasepool
Do a union merge on the CHANGELOG
[build.sh] Print out undocumented RealmSwift declarations
[CHANGELOG] Add entry for not thorwing when setting same key / schema version
[RLMRealm] Synchronize checks to avoid potential races
[RLMRealm] Allow setting the same encryption key / schema version when a realm is open
Integrated Sync support on a basic working level into Puzzle.app.
Update to core 0.91.1
Disable syncing to disk for debug builds of tests
[build.sh] Update to core 0.91.0
Add `using namespace realm` to a bunch of files
Updated according to recent changes in core API
Constrain our generic collections to RLMObject and subclasses
Mention RLMResults in the changelog as well as RLMArray
[CHANGELOG] added RLM_GENERIC_ARRAY entry
forward declare RLMObject in RLMDefines.h
moved generic defines into RLMDefines.h
added casts in unit tests with mismatched generic types
Added RLM_GENERIC_ARRAY() macro
Make RLMArray and RLMResults generic
Added Swift File Template.
[CHANGELOG] Add entry for uncaught exception handler
Install an uncaught exception handler to close write transactions when possible
[Docs] fixed a few incorrect references to `object` rather than `value`
Update versions in README
[Docs][Swift] use https for Google Analytics
[Docs][Swift] added Google Analytics script to Swift API docs
[Docs] added Swift jazzy templates
[Docs] moved appledoc templates to docs/templates/objc/html
Add a test for correct updating of sorted Results after insertion
Added table view controller for existing sessions.
Added a new puzzle object and laid the groundwork for receiving updates.
Integrated Puzzle code into Examples project.
Update the RealmSwift LastUpgradeCheck to 0640
Remove redudant header search paths
[Podspec] Add RLMDefines.h to public header files
Remove some extra whitespace that snuck in.
Enable documentation warnings and fix a few
Mark +[RLMSchema sharedSchema] as nullable.
Link to swift docs in PropertyType documentation
Eliminate a redundant call to RLMRealmSetSchemaAndAlign when migrations occur
[MigrationTests] Add testMigrationProperlySetsPropertyColumns
Updated iOS Draw project with linked list for points per path
Support building with Xcode < 6.3 when nullability annotations are used.
[README] Keep only the overview of branches
Mark values passed to +[RLMObject objectForPrimaryKey:] and +[RLMObject objectInRealm:forPrimaryKey:] as nullable.
[README] Clearify limitations with Carthage
Set CarthageExample MACOSX_DEPLOYMENT_TARGET to 10.10
use leading newline when adding lldb load script
set MACOSX_DEPLOYMENT_TARGET to 10.10
Moved points per path relation back to a linked list property on the path object.
fixed minor issues to make all tests run and pass
fixed issue with cd $path
added OS X Swift Carthage example
added iOS Swift Carthage example
build.sh changes for iOS & OS X Swift Carthage examples
don't explicitly `exit 0`
added OS X Swift dynamic example (fixes #1936)
[Examples] share OS X Carthage example scheme
Simplify language
re-enabled Carthage examples
added CocoaPodsDynamicExample (fixes #1939)
[CHANGELOG] Avoid evaluating results eagerly when filtering and sorting.
[Results] Add test for not materializing the tableview when sorting
[Results] Properly stack allocate new sorter & dont move the existing one
Add change log entry.
Work around a crash seen in SwiftDynamicTests.testDynamicRealmExists.
Audit the Objective-C API for nullability.
[Results] Make sorting and filtering not eagerly create intermediary views
[Results] Manually construct sorter
Make RLMArray bounds checking more consistent
Extract safe valueForKey: into a function
[TestCase] Make the exception name a default arg
Throw an RLMException for missing keys when initializing an object
Check the exception name in RealmSwift tests
Validate that the value for an array property is enumerable even if validateNested is false
Added missing using namespace realm.
[README] Use null-string-beta-2 as example branch for Carthage
[README] Rephrase experimental warning
Add `verify-ios7-static` and `verify-ios7-static-debug`
Add dispatchSyncNewThread helper in swift tests
Make swift tests more stable with regard to leaking realms
[ObjectTests] Remove extraneous autoreleasepool
[RLMUtil] Add comment for weird casting in RLMBinaryDataForNSData
[RLMObject] Update documentation for +[RLMObject requiredProperties]
[LinkTests] Update error message
[ObjectStore] No need to template set_value, it can be overloaded
Feature-flag null binary and string support
[RLMobjectStore] Re-allow creating with missing optional properties
[RLMUtil] Ensure empty data is maintained
Update Swift tests for the fact that array properties are no longer considered optional
Don't let the Darwin module drag in AssertMacros.h
Use the null-beta version of core
[TestCase] Comment why we have initializeSharedSchema()
[ObjectSchema] Array properties can't be optional
[ObjectSchema] Throw an exception if trying to make a link property required
[ObjectTests] Test setting non-optional properties to nil
[RLMObject] Allow opting into required properties
Ensure the shared schema is initialized in the tests outside of any test case
[ObjectStore] Ensure values are properly coerced to nil
[ObjectSchema] More informative exception for String? properties
Enable optBinaryCol in RealmSwift tests
Add support for nullable NSData properties
[RLMProperty] Add RLMPropertyTypeIsNullable
[QueryTests] Update for withValue:
[MigrationTests] Update to use withValue:
[RLMUtil] Clean up RLMStringDataToNSString
[RLMUtil] Introduce RLMNSNullToNil
[Object] Remove extraneous logs from getOptionalPropertyNames(_:)
[RLMProperty] Include optional attribute in description
[ObjectTests] More tests will nil strings
[RLMObjectBase] Support initializing with an NSNull in an array
[QueryTests] Add tests for querying across links on string columns with nulls
[QueryTests] Add null string tests for containment
[RLMObjectStore] Allow createOrUpdate with nil primary keys in the dictionary
[RLMObjectStore] Add support for null string pimary keys
[ObjectTests] Test varius accessors with a NULL string column
[QueryTests] Add tests for querying on optional string columns with NULLs
[RLMObjectStore] Automatically migrate required properties to be optional
[RLMObjectSchema] Throw an exception when trying to mark a non-nullable column type as optional
[RLMObjectStore] MArk a property as changed when its nullability has changed
[RLMObjectSchema] Right now, all link columns are optional
[RLMObjectStore] Require a migration when changing the nullability of a column
Mark link properties in RealmSwift tests as optionals
Mark all link properties as optional
[RLMObjectStore] Allow adding objects with nil optional properties
[RealmSwift] Add a basic test for NSString? properties
[RealmSwift] Add an optional string column to the test SwiftOptionalObject
[ObjectTests] Update for the fact that string properties are now nullable
Add support for nullable string columns, and make NSString properties nullable by default
Added a README in the original location of the Realm Browser project.
Support any fast enumerable rather than just NSArray in `deleteObjects:`
Remove -[RLMArray deleteObjectsFromRealm]
[UpdateChecker] Use https
Re-enable the UtilTests
Removed browser build/package phases in build script.
Removed tools directory (Including Realm Browser)
Disabled testCrossThreadSyncLatency until we can fix it. Currently hangs.
Remove RLMAutoreleasePoolTestCase
[README] Format markdown table
[RLMObjectStore] Improve validation exception messages
Add test-ios7-static
[README] Add entry for null-string-beta-2
temporarily disable Swift device tests
Update Swift performance tests
Make RealmSwift.Results fast enumerable
Set the bundle identifier for RealmSwift
Backwards-compatible changes for Xcode 7
Update RLMMultiProcessTestCase to work with Xcode 7
Update project settings
Updated to track recent changes in the core API
Revert "One of the tests of iOS static lib runs on iOS 7"
Add a link to the docs
fix for extra includes/only run perf tests for release (as it was previously)
[build.sh] Separate ios7 and ios static tests
Lower the stack size for notification lister threads
Test on 32bit x iOS 7, 32bit x 8 and 64bit x iOS 8
One of the destinations of iOS static lib runs on iOS 7
[README] Explain why Carthage can't be used for custom branches
[README] Add pod 'Realm'
[README] Add an overview section with long-running branches
Updated according to recent changes in core API
Update version to 0.93.2
Update performance baselines
Update to core 0.89.6
Add trailing newline
Throw an exception rather than asserting when an invalidated object is added to an RLMArray
Squashed 'Realm/ObjectStore/' content from commit 107c2de
remove object store dir before refetching from subtree
add api to delete a table and remove the pk for an object type
pr feedback
move exception classes to their own file - store exception messages and implmenet what()
clear primary key for deleted objects
make stuff const and use move
fixes for pr comments
[build.sh] Copy object store headers for cocoapods
podspec
podspec
podspec
podspec
podspec
don't verify when not told to, reuse tables in cases it isn't inconvinient
make all string arguments const references
remove duplicate files
readd files
remove duplicate code
fix test cases where we now get an error during migrations rather than an exception
don't validate when we only need an updated column mapping
error handling cleanup
use foreach/return pointers for optional properties
validate primary keys after migrations
update table indexes based on schema changes
use references instead of shared_ptr
remove logic for table name determination from cocoa
make set_schema_version private
comment
remove duplicte code and privitize methods
refact cocoa to use c++ table creation apis
add RLMNotVersioned back into the public api
std::String -> StringData, fix header include identifier
fix other targets
refactor out schema version code to c++
[RLMSchema] Throw an exception if there are duplicate class names
[build.sh] Only generate test coverage files in debug builds of OS X framework
[Examples] delete the realm file for the JSONImport example
[ObjectUtil] Remove unused method
[Swift][List] Removed unused List.init(_ rlmArray:) initializer
[build.sh] Add command to prepend empty changelog section
[build.sh] Just use the build directory for github releases
[github_release.rb] Properly create Carthage release zip
[build.sh] Automate creating GitHub releases
Set version to 0.93.1
Update to core 0.89.5
[Docs] fixed OS X location of defaultRealmPath in docs
Add a comment to explain the overload of add_link_constraint_to_query.
Add a changelog entry.
Switch from using std::enable_if to partial specialization of template structs.
Make the operator names human-readable in exception messages.
Allow key paths on either side of operators in cases where it clearly makes sense.
Fold the iOS Device Test target's functionality into RealmSwift Tests.
Use one framework and test target for both iOS and OS X.
Pull the configuration settings for two of the test targets out into .xcconfig files.
Pull the configuration settings for the project and framework targets out into .xcconfig files.
fix for rebase omission
add compiler attribute to prevent autoreleasing accessors
changelog
pr feedback fixes
remove retain/release calls to improve performance
pr fixes
add a test condition to make sure update flags get propogate through non-primary objects
fix method names and remove dead code
small pr fixes
change literal -> value
perform validation during object creation
bug fixes and fix for swift api and tests
don't allow copying accross realms when using the standlone creation pipeline
add back in creationOptions with new options
use separate validation code path when creating/updating/adding objects
remove RLMCreationOptions
Release 0.93.0
[Packaging] use Realm.framework from build/ios/swift
[Packaging] Updated `package_examples.rb` to reflect the changes to Swift packaging
Adding Readme in OSX example project
Tweak changelog wording
Improve error reporting when trying to index unindexable properties
[CHANGELOG] Add entry for no longer embedding Realm.framework inside RealmSwift.framework
No need for PROJECT_DIR in the FRAMEWORK_SEARCH_PATHS
[build.sh] No need to build osx twice
[build.sh] No need to build ios-dynamic twice
[build.sh] Make building space-safe
Run strip-frameworks.sh in the dynamic installation examples
Remove strip-frameworks.sh from RealmSwift.framework
Update installation examples to use un-nested RealmSwift.framework
Add the CocoaPodsExample.xcworkspace to the installation example gitignore
Build the RealmSwift tests and examples with un-nested frameworks
Remove two unnecessary semicolons.
Add a gitignore for the installation examples
Update Swift docs
Add a test for a class with an invalid primary key
Fully re-enable indexing int properties
Also un-nest RealmSwift's OS X framework
Don't build RealmSwift as a nested framework for iOS
[strip-frameworks.sh] Remove the shebang so it doesnt require signing
[Swift] Made SortDescriptor conform to Equatable & StringLiteralConvertible
README.md file included in XCode Projects
[Swift][Results] simplify CVarArgType support
Bump version to 0.92.4
[README] HTTPS everywhere
[README] Update links for Objective-C / Swift docs
[README] Align to wording guidelines
Update Swift tests
Remove incorrect __unused
Add a less slow implementation of indexOfObjectWithPredicate
Add some backticks.
Make some code more consistent and improve a comment
Update performance baselines
Increase the amount of work done in some perf tests that run too fast to give stable results
Add some consts
Make stuff faster
Remove unneccesary extern "C"s
Speed up RLMInitializeSwiftListAccessor
Clean up the extra files used by -testCanCreate100RealmsWithoutBreakingGCD.
Update to core 0.89.4
Add a changelog entry.
Have RLMNotifier create a dedicated thread to listen for notifications rather than doing so on a global concurrent queue.
Formatting for the style guide.
Let the backing array handle removing all objects.
Sync: Add preliminary support for user and app identification (presumed to be needed for authorization)
Don't allow the user to set the schema version to RLMNotVersioned.
Give RLMNotVersioned a consistent value in 32- and 64-bit.
Use uint64_t for the schema version so that it has a consistent size across platforms.
RLMRealm.h: Remove duplicate method definitions which presumably occured due to an incorrectly resolved merge conflict
[Browser] Sort classes alphabetically
Sync: Add cryptic server file identifier to decrease the risk of rebinding to a new server Realm with the same path name
Removed debug logging.
Slight change to do a cheap string comparison before checking against set membership. Could probably be even better (especially with fine-grained notifications).
OS X client now also marks DrawPaths as ended (drawerID = "") to help performance on iOS devices.
Removed the shake to deleteAllObjects functionality.
Attempt at optimizing rendering by keeping track of active vs inactive DrawPaths. Inactive DrawPaths have ended (touchesEnded) and thus will not change again. They are drawn to an offscreen image that is then the base layer while active paths are drawn on top. This might result in less than 100% _visual_ parity between devices, but this is fixable if needed.
Removed unused code.
Optimized icon files.
Added app icon to Draw for OS X
Decreased size of pencil assets in OS X draw by 33%.
Enable sync in OSX Draw app
Added Realm pink color and cleaned up sizing on mobile devices.
Moved updated apps from branch 4 to branch 3.
Another fix for: Attempt to reconnect after a network connection failure (+ a few bug fixes)
[Examples] skip examples/installation when packaging examples
[Examples] moved installation examples into this repo
Set version to 0.92.3
[RLMUpdateChecker] Link to changelog at the newest versions tag
Update to core 0.89.3
typo
Update CHANGELOG.md
Attempt to reconnect after a network connection failure (+ a few bug fixes)
Revert "Add a helper type alias for __unsafe_unretained"
[List] Add invalidated property
Run the strip frameworks script for the swift examples
[Results] Return nil for average(_:) when count == 0
s/Realm/RealmSwift/
Update to new style for indicating Swift-specific changelog entries.
Add a changelog entry.
Update the type check used for aggregate operators to work correctly for Swift classes.
Use rangeOfString: instead containsString:
[Docs] use https for author_url
Release 0.92.2
[Documentation] Clarify purpose of delete data
[ObjectSchemaInitialization] Allow declaring swift list properties as dynamic var
[CHANGELOG] Add entry for swift list initialization during fast enumeration
[RLMCollection] Ensure swift list accessors are initialized
[CHANGELOG] Add entry for deleteDataForClassName:
[Documentation] Clarify the deleteData docs
[Migration] Add deleteData(_:)
[RLMMigration] Handle removing primary key entries
[RLMMigration] Add `deleteTableForClassName:`
[MigrationTests] Directly check whether the group has the orphaned table
[RLMObjectStore] Add comments around deleting irrelevant class tables
[Migrations] Add a test case for removing the table for a subclass that has been deleted
Add more detail to the exception messages when sorting by key path or by a property of unsortable type.
Introduce an explicit exception indicating that sorting on key paths is not supported.
Improve the exception message when sorting on an invalid column name.
Improve the exception messages when a property name used in a predicate is not found.
Test that the exception thrown when a class has duplicate properties is sufficiently descriptive.
Added iOS Draw app icon
Add a changelog entry.
New browser icon
[CHANGELOG] Add entry for linked object reuse
[ObjectCreationTests] Make the updated object be coherent
Delete commented-out failing tests
[RLMObjectStore] Allow properly updating linked objects with primary keys
[RLMAssertions] Pretty-format the macros
[Tests] Make it possible and easy to test exception messages
Test classes with both a single and multiple duplicate properties.
Have +[RLMObjectSchema schemaForObjectClass:] throw an exception when it sees the same property name multiple times for one class.
[Scripts] Make sctrip-framework.sh not executable
Wrap user-provided data in type error messages in single quotes to offset it from the message itself.
New apply_foreign_changeset signature with peer_id
Include information about the property name and object class when a type error is raised.
Release 0.92.1
When a type error is rasied, include information about the problematic object in the exception.
[strip-frameworks.sh] Force code re-signing after stripping architectures
Switch +[EncryptionTests defaultTestSuite] to NSStringFromClass so that it compiles on iOS.
Add a changelog entry.
Treat requests to open an encrypted Realm as a request for an unencrypted Realm when REALM_DISABLE_ENCRYPTION is set in the environment.
Skip the encryption tests when running under a debugger.
Reinstate the debugger check for encrypted realms. Reverts 4fa6d6f.
[Podspec] Add build.sh to the preserve_paths
[Podspec] Group the module_map with other build settings
[Examples][Swift] revert optional-then-assert to just force unwrap
[Examples][Swift] don't create temporary variables just for optional binding
[Examples][Swift] updated GroupedTableView and Encryption examples to avoid force unwrapping
[Examples][Swift] no longer force-unwrap in Migration example
Generate unique object IDs for objects in the RealmSwift Xcode project.
[Examples][Swift] Update Realm Swift Migration example to inherit from Object
Get back a lost exception message
[Swift] import Foundation to make jazzy generate the proper USRs
[Podspecs] s/OSX/OS X/ and point docs to `/docs/{objc,swift}`
Revert "[Podspec] Add headers to preserve_paths"
[Podspec] Updated descriptions
[Podspec] Add headers to preserve_paths
[build.sh] Copy core/include
[Header] Import public headers only with <> imports
[Podspec] Add RLMRealmUtil.h to private_headers
Add RealmSwift.podspec
[Podspec] update podspec for 0.92.0
[Documentation] Use `false` in Swift instead of `NO`
[CHANGELOG] Add entry for inWriteTransaction
[RLMRealm] Improve inWriteTransaction docs
[RLMRealm] Add ObjC tests that cover inWriteTransaction
[RLMRealm] Make inWriteTransaction public
Release 0.92.0
Properly ignore first schema-creating changeset on the client [hack]
Enable sync on the client when we have a peer ID.
Reinstated mistakenly removed sync progress handling.
Reinstated special handling of schema-creating transaction.
Use server-generated file identity (peer_id).
Add a changelog entry.
Ensure that a compound AND predicate with no subpredicates evalutes to true.
Teach update_query_with_predicate to evaluate NSPredicates with constant values.
[build.sh] split release package into Objective-C and Swift zips
[build.sh] comment tr lowercase hack
Copy `strip-frameworks.sh` to `Realm.framework/strip-frameworks.sh` and `RealmSwift.framework/strip-frameworks.sh` on iOS
[RealmSwiftExamples] Moved Realm Swift examples from `examples/swift-next/` to `examples/swift/`
[Project] removed old Swift examples
[RealmSwift] Package Realm Swift examples
[build.sh] Package Realm Swift as prebuilt frameworks under `ios/swift` & `osx/swift` Package now contains `ios/{static,dynamic,swift}/Realm{Swift}.framework`
[Xcode] Updated Realm Swift examples to use build.sh
[Xcode][RealmSwift] Removed alternate (release zip) location for RealmSwift binary
[Xcode][RealmSwift] Removed "Headers" phase for Realm Swift OS X & iOS
[RealmSwift] make RealmSwift.framework use embedded Realm.framework [build.sh][RealmSwift] make `build.sh ios-swift` build fat RealmSwift.framework [Xcode][RealmSwift] no longer use `../ios/dynamic/Realm.framework` when building Realm Swift [Xcode][RealmSwift] no longer build RealmSwift iOS Tests when building Realm Swift [build.sh][RealmSwift] move Realm Swift for OS X to `build/osx`
Add a helper type alias for __unsafe_unretained
Enabled client-side sync.
Updated RLMRealm sync support to use new Replication API.
Test that, in migrations, arrays yield DynamicObjects
[CHANGELOG] Align deprecation table so its more legible as plain text
Updated the Mac Draw app to match.
Moved the Draw example away from linked-lists to static foreign keys.
update README instructions for Draw.app examples
[Draw.app] use `double` for all platforms
move OS X Draw.app from RLMArray-based to foreign-key based
move Draw.app from RLMArray-based to foreign-key based
fixed some issues with sync-related changes in Realm.framework and brought back Draw.app in ios examples
fixed RLMRealm initializer
[CHANGELOG] Add entry for withValue: change
re-add stuff that was lost in the rebase
Update examples to use withValue:
Network protocol upgraded to handle distinct histories and decoupled versioning between synchronization participants
copy files phase
Update README.md
use release build
remove old realm
osx demo
Sort tables by name in  of  in the hope that it will solve the problem with non-identical initial transactions
Replacing HTTP-based sync protocol with a custom TCP-based one (not yet completely stable)
added Drawing app and increased server requests to 100 times per second
added Chat to examples README and use hostname instead of IP
moved SyncedRealmExample to examples/ios/objc/RealmExamples.xcodeproj
Work in progress
Work in progress
tweak
fix for fist sync related problem, when the realm is empty
Lots of minor tweaks
Work in progress
scrolling down to show last message
Chat app works offline
With hostaddress property hopefully working
should remove recursion and fix race condition
local persistence works
Settings mostly done
Sort of working
added example app
Server sync demo muck-up: Initial blocking download, and non-blocking upload done. Non-blocking dowload still missing
Rename parameter variables to be value instead of object
[Browser] Update to use withValue:
Update the newest tests to also use withValue:
Add back deprecated declarations of withObject:
Change withObject: to withValue:
Eliminate some redundant work during migrations
Bump version to 0.91.5
Update to core 0.89.1
Bump version to 0.91.4
Simplify a test
Move changelog entry to breaking changes
Don't call migration blocks when first initializing a Realm file
[CHANGELOG] Add entry for Swift Int8 properties beign treated as integers
Remove unused REALM_SWIFT compiler flag
use full logo URL in README
[SwiftPerformanceTets] Remove baseline for testInsertSingleLiteral()
[RLMAccessor] s/Char/Byte/
[RLMAccessor] Avoid undefined behavior by using the more permissive BOOL type
[RLMAccessor] Introduce RLMAccessorCode enum
[ObjectAccessorTests] Make the tests halt
[ObjectAccessorTests] Test every way of accessing sized int properties
[RLMAccessor] Allow dynamic access to swift Int8 properties
Add tests that RealmSwift can have Int8 object properties
Allow storing Int8 Swift properties as integers
Ensure we dont treat RLMDynamicObject / DynamicObject as classes to persist
Add RLMObject_Private.hpp to the xcodeproj
Phrasing
Update README.md
Updated readme to be similar to contact page
exit early if `lipo -remove` fails
fixes for RealmSwift due to changes to dynamic framework
[strip-frameworks] added license to strip-frameworks.sh
[Packaging] fixed some dynamic framework packaging issues
[build.sh] package dynamic framework
[Dynamic] Add strip-frameworks.sh and copy into iOS Dynamic framework
[Docs] re-enable jazzy in build-docs.sh because it now supports Swift 1.2
Generate test coverage files in build.sh->test-osx
Added `-[RLMRealm compact]`
[RealmSwift][Docs] Disable jazzy until it supports Swift 1.2
Update Realm.framework swift examples for Xcode 6.3.1
Various fixes to tests & examples for Xcode 6.3.1
[Swift 1.2] Use forced downcasting where necessary in the swift performance tests
[Swift 1.2] Enable whole-module optimization
Make VERSION_INFO_FILE Objective-C so Clang wont complaing about unused flags
[Swift 1.2] The inherited optional returning method needs to be declared as such
[Swift 1.2] Work around compiler crash by explicitly casting to dispatch_block_t
[Swift 1.2] Force cast in iOS tests
[Swift 1.2] NSPredicate's variadic convenience initializer is not failable anymore
[Swift 1.2] countElements => count
[Swift 1.2] Generic cases of as => as!
[Swift 1.2] Trivial cases of as => as!
[Swift 1.2] Make capture explicit by using self
[Swift 1.2] Make block escaping
[Tests] Annotate RLMAssertThrows' block argument with noescape
[DynamicObject] Add KVC tests for normal & non-existant properties
[ObjectTests] comment withMigrationObject
[DynamicObject] Override the undefined key methods
[RLMObjectSchema] Update comment for RLMDynamicObject
[DyanmicObject] Properly support KVC, and properly test KVC + subscripting
[RLMDynamicObject] Add to support working KVC
Add missing `RLMArray#replaceObjectAtIndex:withObject` for standalone array
Add missing `RLMRealm#addOrUpdateObjectsFromArray:` test
Bump version to 0.91.3
Restore initWithObjectClassName to the public headers
Bump version to 0.91.2
Remove pointless check for column type
Don't require a migration to update indexes
Add and remove indexes from existing columns during migrations
[RLMRealm] Return nil after RLMSetErrorOrThrow
[RLMRealm] Return an error when attempting to open a read-only uninitialized realm
Bump core version
Remove (TightDB) from LICENSE
Update the core library name
Update header paths
Rename tightdb namespace to realm
TIGHTDB_ -> REALM_
Rename REALM_VERSION to REALM_COCOA_VERSION
Update for API changes
[SwiftPerformanceTests] Update baseline for enumerateAndMutateAll since before it wasnt testing anything
[ObjectSchemaTests] Don't store the objectSchema in an instance variable
[SwiftPerformanceTests] Make it clearer which realm is being used
Omit .self suffix on types where not needed
[ObjectBase] Throw an exception when an attached accessor is deallocated on the wrong thread
[Object] Add a test for recursive object descriptions
[List] Actually use the depth when creating the description
[List] Implement description with max depth
[List][Results] Use NSFastGenerator for generate()
Update performance baselines
Swiftify descriptions for RealmSwift types
Wrap the measured blocks for perf tests in autorelease pools
Clean up the garbage of the deleted file
Add tests for RLMArray delete methods
[ObjectCreationTests] Add a case for testing create with NSNull links and lists
Remove a few unneeded autorelease pools
Avoid using private implementation details in the Swift tests
[Realm] Allow copy when calling Realm.create()
[SwiftPerformanceTests] Results doesnt conform to NSFFastEnumeration...
Commit missing performance test baselines
[RLMCollection] Add swift KVC tests for self keypath
[RLMUtil] Refactor RLMCollectionValueForKey's branching on @"self"
[ListTests] Force-unwrap instead of explicitly casting
[RLMCollection] Add valueForKey:@"self" tests
Add preceding space before opening up block scope
[CHANGELOG] Add entry for RLMCollection KVC operations
[RLMUtil] Remove unnecessary import of table.hpp
[RLMCollection] Add missing trailing newline
Add Collection KVC to RealmSwift
[RLMArray] Add tests for KVC on standalone arrays
[RLMCollection] Add documentation for KVC methods
[RLMResults] Use get_source_ndx for KVC
[RLMUtil] Remove the need for the __block index variable
[RLMUtil] Make sure swift list properties are initialized
[RLMCollection] Implement custom KVC support
[RLMProperty] add tests for isEqualToProperty:
[RLMObjectSchema] don't check indexes in -isEqualToObjectSchema:
preserve old testDynamicSchema test
[RLMObjectSchema] +dynamicSchemaForRealm: now respects search indexes
[SwiftPerformanceTests] Remove testRealmCreationUncached baseline as it is very slow and inconsistent
Add SwiftPerformanceTest baselines
Rename SwiftPerformanceTests Class name to not interfere with ObjC benchmarks
[RealmSwift] Port PerformanceTests from Obj-C
[Doc] Retun => Return
[Doc] :retuns: => :returns:
Check for leaked RLMRealms rather than deallocating them in tests that don't throw exceptions
Forcibly deallocate leaked RLMRealms in Swift tests
[build.sh] Verify there are no undocumented RealmSwift declarations
[Results] import Foundation.NSDate
[BuildDocs] Dont skip undocumented tokens in RealmSwift
[BuildDocs] Use full option names when invoking jazzy
[build.sh] add more info to jazzy doc generation
[build.sh] quote SRCROOT in appledoc's usage
[build.sh] Run jazzy to generate RealmSwift docs
Add comment why should we use withUnsafeMutablePointer() function
don't use private apis
Invoke test methods correctly
Update changelog for #1676
allow RealmSwift to be used in an app extension
allow Realm to be used within an app extension
test setting lists using DynamicObject subscripting
[RealmSwift] hide unfortunately public declarations that should be private
test subscripting/setvalue with array of objects
test subscripting
fix for indexOfObject in swift
updated exception message
re-add check for objects of wrong type in indexOfObject
merge latest from master
remove default parameter value for migrateRealm()
fix typo
remove unused Swift test object
use default realm path as a default parameter value for migrateRealm(_:)
remove reference cycles in Swift examples
spacing in ObjC protocol conformance
[Realm] Put else on the same line
[Realm] Simplify update logic
[List][Results] Put sequence support inside extension
Clean up RealmSwift docs
[Object] Add docs for KVC & subscript
Sort imports alphabetically
spacing
[build.sh] remove fat variations of ios-dynamic and ios-swift
package RealmSwift & examples
update build.sh
- remove unused files from RealmSwift.xcodeproj - add symlinks for Realm/RealmSwift plists
[RealmExamples] remove reference cycle in examples
fix example
default value for migration.create
make MigrationObjects optional
[Realm] Test that when cancelling inside a write block, the count of objects doesnt change
[List] Test that doing unsupported things with standalone lists throws an exception
move over old tests, test max floating pt
Add tests for Swift descriptions
Make Object, ObjectSchema, Property, and Schema conform to Printable
List.remove -> List.removeAtIndex
fix ResultsFromTableViewTests test
[RLMUtil] Restore default value merging for Swift subclasses of RLMObject
typo
merge
pr fixes pt 2
pr fixes pt 1
[PropertyTests] Revert unintentional changes
Small typo in comments
Update Migration.swift
remove if/let
pr fixes
remove MigrationObject and other swift dependencies from objc code
[ObjectCreationTests] Test object counts
remove build settings argument from build.sh:
change install name after building
[ObjectCreationTests] Update initializer parameter name
[ObjectCreationTests] Test that an array that includes a persisted object works
[ObjectCreationTests] Add comments
[ObjectCreationTests] s/valueCreator/baselineValues/
[ObjectCreationTests] Add some tests around Realm.add
[ObjectCreationTests] Add some tests around Realm.create
Test NSNull.null() as a valid Object value
Move subscripting out of RLMObjectBase
Remove extraneous cast in RealmSwift Backlink example
fix for examples
object: -> value:
fix formatting errors
remove extraneous initializers
fix for example
remove isEqualToObject from RLMObjectBase
remove initWithObject from RLMObjectBase
hide objc linking objects method from swift
make RLMObjectBase methods private
[SwiftSimpleExample] print correct results
Updated documentation to reflect recently renamed method name.
[Browser] Display seconds for dates
[build.sh] run all device tests
[build.sh] Make a variable for the device test command
Declare CollectionType conformance in an extension
Set up RealmSwift device tests
re-enable Extension example on jenkins
fix indentation
add missing files
Remove extraneous Index typealias that the compiler can infer
[List] Conform to ExtensibleCollectionType
Make Realm collections conform to CollectionType
re-add old swift api examples
[RLMRealm] Added RLMClearRealmCache to resetRealmState
fix project file after rebase
tweak setup
serialize queue usage
fix for defaultRealm path
store test realm files in a separate directory
[build.sh] remove duplicate Encryption example from examples-ios-swift
[build.sh] update for renamed build.sh commands
use different realm paths for each test
normalize verify/test naming
build.sh fixes for examples
Add Swift tests for Property, ObjectSchema, and Schema
Declared wrapped properties as let instead of var
[Schema] Declare Equatable conformance in an extension
[Schema] Add explicit internal ACLs
[Schema] Make class final
[Schema] Make the initializer arguemtn unlabeled
[ObjectSchema] Declare Equatable conformance in an extension
[ObjectSchema] Add explicit internal ACLs
[ObjectSchema] Mark class as final
[ObjectSchema] Make initializer argument unlabeled
[Property] Declare Equatable conformance in an extension
[Property] Add explicit internal ACLs
[Property] Make final
[Property] Make the initializer arguement unlabeled
fix for examples
add newline
fix for comments
add back missing tests
remove duplicated files
actually test osx swift rather than just building
[ObjectSchemaInitializationTests] Dont double-specify type
Don't use var when avoidable in the object tests
[Realm] Dont specify enum type when it can be inferred
throwRealmException instead of using fatalError
rebase fixes - coy over project files
add accessor tests
more tests
test multiple valid and invalid values for each property type
test invalid literals
test all properties for all tests
refactor tests to remove duplicate code
split up existing tests
[Object] Add tests for ignored properties
[Object] Test KVC for both standalone and persisted objects
[Property] Make objectClassName return an optional
move creation tests to new file
[SwiftTestObjects] Stop trying to index int column, for now
[Object] Add setValue:forKey: test with a list
remove old tests
new tests and test stubs
[Obejct] Add KVC tests
add array literal test
move test to correct file, improve it
fix for merge, added test
tests
clean up kvc support for lists
[Object] Add more tests
kvc array support - is there a better way?
[RealmSwift] Add ObjectTests.swift
pr fixes
use native methods for swift object customization - remove swift default values method
if let for iuo
use ivars instead of prefixed property names
[Realm] Make objectForPrimaryKey return an optional
[RLMObjectBase] Prefix realm and objectSchema properties
example fixes
add missing methods and properties
combine add/addOrUpdate and create/createOrUpdate variants
move 'create:' to Realm.swift
Add assertThrows to RealmSwift tests
Add SortDescriptor.swift
use -dynamic extension for dynamic tests so it uses the correct framework
fixes for ci
readd swift examples
reapply swift changes
fix local verify
[build.sh] Silence the output from running the JSONImport output
[build.sh] Properly set the scheme for test-ios-swift
rebase fixes for build.sh and xcodeproj
test fixes for rebase
[Util] s/checkNonNegative/throwForNegativeIndex/
[Util] s/assertPositive/checkNonNegative/
[Util] s/throwException/throwRealmException
[RLMArray] Test that inserting an object at an invalid index throws an exception
[Migration] Add tests that things throw when they should
[Migration] Throw an exception when subscripting on a property that doesnt exist
Add assertPositive
[Results] Add tests that things throw when they should
[List] Add tests that things throw when they should
[RLMArrayLinkView] Validate insertion index
Use trailing closure syntax for autoreleasepool & Realm.write
pr fixes
doc fixes
[Realm] Make Realm : Equatable
[Realm] Add tests around exceptions being thrown when adding and remove objects
[RLMObjectStore] Make RLMDeleteObjectFromRealm take a realm parameter
test invalidate
test autorefresh
test adding outsidide of write transaction
Update the RealmSwift example projects
test canceling block transcation
test transaction methods
test inMemory Realms
init tests
fully test readOnly
fix for readonly test
doc fix
reorder tests to match Realm.swift and add stubbed out missing tests
order functions based on approximate usage frequency
make setEncryptionKey class function on Realm
objects -> Realm().objects
return NSError from writeCopy
defaultRealmPath -> Realm.defaultPath, initializer cleanup
fixes for examples
[RealmSwift/TestUtils] Remove __ variable prefix
Add assertThrows to RealmSwift tests
[Realm] Add more tests
[Realm] Make generic sequence constraints work for subclasses of Object
[Realm] Add property tests
[Realm] Be consisten in naming of readOnly parameter
[Realm] Add explicit ACL annotations
[Realm] add setEncryptionKey
[Realm] Make realm a parameter on the objects() function instead of a method on Realm
[Realm] Use typed SequenceType parameters properly
[Realm] add return value to refresh()
[Realm] add cancelWrite()
[Realm] Add return value to writeCopyToPath
[Realm] Make class final
[Realm] Make default realm path a variable
[Realm] Make initializer that takes an RLMRealm have an unlabeled parameter
[RealmSwift] Add test for ignored property default values
typo
[ListTests] Properly test sorting with multiple descriptors
[ListTests] s/testSortWithFormat/testSortWithProperty/
[ResultsTests] Properly test sorting with multiple descriptors
pr fixes
Add tests for sorting with multiple SortDescriptors
[Results] Make sure all public methods are tested
[List] Make sure all public methods are tested
Add SortDescriptor.swift
[List] Use NSPredicate indexOf method from indexOf with a format string
[Results] Return optionals from min/max
[Results] Make ACLs explicit
[List] Make ACLs explicit
[Results] Add proper test coverage for TableView-backed Results
use framework header
cache class lookups
add test/fixes for getting/setting all types during migrations
use MigrationObject instead of Object/support for MigrationObject using dynamic apis
squash migration improvements
use -dynamic extension for dynamic tests so it uses the correct framework
pr fixes, link against dynamic framekwork
remove unnecessary step
fixes for ci
swift documentation
fix for device tests
move RealmSwift files to reasonable location
make Property equatable again
use configuration build dir
fix for swift migrations
fixes for examples, osx release framework
delete old framework befory copying new one
disable tests which hard code module name for static lib
re-apply lost build.sh changes
use root build dir for examples
readd swift examples
reapply swift changes
Bump version to 0.91.1
Update office hours URL
Conform to browser code style by not specifying property storage type
[CHANGELOG] Add entry for browser multiprocess refresh
[RealmBrowser] Reload after external commits have been made
Bump version to 0.91.0
Update performance baseline
Update changelog
Test a bit more in testRecoverAfterCrash
Add some sanity-check asserts
Remove pointless check
Delete FdHolder's copy constructor and assignment operator
tabs -> spaces
[RLMObjectBase] Test isEqual:/isEqualToObject: against a non-RLMObjectBase
[RLMObjectBase] Dont crash when calling isEqual: against a non-RLMObjectBase
RLMGetCurrentThreadCachedRealmForPath -> RLMGetThreadLocalCachedRealmForPath
Refactor RLMDeleteRealmFilesAtPath
Make RLMTestRealmPath/RLMDefaultRealmPath/RLMRealmPathForFile consistent
Check fcntl's return value
Fall back to putting the fifo in $temp if it can't be created next to the realm file
Add some missing 'static's
Move the dispatch_async out of -listen for less indentation
Push the runloop source creation onto the background thread
Report errors when opening the fifo to the error out parameter when applicable
Delete the notification fifos during tests
Write some words and move things around
Move some stuff around
Rename RLMWeakNotifier to RLMNotifier
Add support for interprocess change notifications
Speed up shallow copies of the object schema
Explicitly end write transactions in tests
Add interprocess performance tests
Add a test for opening files during a write transaction
Add test for recovering after a process crashes
Handle multiple lines of output from child processes at once
Add OS X tests for doing things with multiple processes
Add missing target dependencies
Build new extension example app in build.sh
Add comments explaining what's happening in the notification blocks
Use NSNumber to get the string representation of the tick count
Remove user-specific framework search paths overrides
Use NSNumber to get the string representation of the tick count
Only set the default realm path once
[build.sh] Rename tightdb dir in download check to realm-core
Don't blindly ping-pong back and forth in extension example
Add watch app target to extension example
Update extension example
Add example app that has an extension
Trivially speed up -[RLMRealm sendNotifications]
Refactor the Realm cache and inter-thread change notifications
Update to core 0.88.5
s/bowser/browser/
[Swift] Throw when RLMObject subclass is nested in *any* Swift declaration.
Remove unused variable
[RLMArray] Test deleting an RLMArray member updates count and maintains appropriate validation.
[RLMArray] Don't check for thread in isInvalidated.
[RLMArray] Added `isInvalidated` to RLMArray.
Add encryption tests
Optionally use encrypted Realms for all of the tests
Call setUp, invokeTest and tearDown in separate autorelease pools
Clean up uses of setUp/tearDown
Use the registered encryption key in migrateRealmAtPath:
Use the registered encryption key in writeCopyToPath:error:
Remove the debugger check for encrypted realms
[RLMProperty] Update tests for the added semicolon in the description
[RLMProperty] Terminate attributes in -description with a semicolon
[CHANGELOG] Add entry for better RLMSchema object descriptions
Add more description tests
Add more useful descriptions for RLMObjectSchema, RLMSchema, and RLMProperty
[RLMUtil] Move RLMIsSubclass to the implementation file
[CHANGELOG] Add entry for Object and array properties of type `RLMObject` will no longer be allowed.
[RLMUtil] Add RLMIsObjectSubclass
[RLMProperty] Disallow creating a property of type RLMObject
Update package_examples.rb for the changed location of the osx framework
Remove unnecessary explicit passing of CONFIGURATION to subshells
Print out the invalid command when a command is not recognized
Add dummy verify targets that will be real targets on al-swift
Pull over some build.sh changes from al-swift
Make the OS X examples support using a debug build of the framework
Make the browser support using a debug build of Realm.framework
Restructure verify to make it more parallelization-friendly
Refactor build.sh to eliminate duplicated debug/release tasks
Set the deployment targets to OS X 10.9 / iOS 7.0 for the Project, while letting the individual Targets inherit. The iOS 8 Framework and iOS 8 Tests have deployment target set to 8.0.
Set the example projects' deployment target to 7.0 for the Project, while letting the individual Targets inherit.
[Info.plist] Update version number to 0.90.6
Network protocol upgraded to handle distinct histories and decoupled versioning between synchronization participants
Update changelog for v0.90.6
Update core version
Update perf baseline
Move calls to RLMRealmSetSchema to RLMUpdateRealmToSchemaVersion
Extract check for if a migration is needed to a function
Avoid an unnecessary write transaction when opening Realms
[Realm] Test verify RLMArrays and RLMResults belong to the given realm.
[Realm] Verify RLMArrays and RLMResults belong to the given realm.
fix for deleting objects from the wrong realm
Streamline, add help links.
fix for #1477
[RLMObjectBase] Always print the total length of data properties
[RLMObjectStore] Remind users to call setSchemaVersion when opening with wrong version
[RLMObjectBase] Shorten max printed data length
[RLMObjectBase] Truncate description for NSData properties
[RLMObject] Declare re-declared/inherited properties as @dynamic
[RLMObjectStore] Improve the exception message when attempting to migrate to a bad version number.
[CHANGELOG] Add entry for new exceptions thrown when setting properties for realms that are already open
[CHANGELOG] Add entry for browser not showing objects with no persisted properties
[RLMRealm] Test exceptions are thrown when trying to migrate/set schema version/set encryption key for a Realm that's already open
[RLMRealm] Throw an exception when trying to set encryption key when that realm is already open
[Browser] Ignore object schemas with no properties
[RLMRealm] Throw an exception when trying to set schema version or migrate a realm when that realm is already open
[Broswer] Remove redundant imports
[Browser] Use modular imports
Use $TMPDIR instead of direct access to /tmp.
Bump version to 0.90.5
Update to core 0.88.1
Added logo
[RLMUtil] Only try to import RLMVersion.h if REALM_VERSION is undefined.
Add RLMProperty_Private.h to the list of private headers
Add property equality tests
[RLMProperty] Re-add isEqualToProperty:
Ask server for unique client file identifiers
ai logo
placed small logo
copy files phase
Update README.md
[Project] Configure MODULEMAP_FILE
[Project] Remove gone RLMObjectStore.hpp
pr feedbac
make migrations not overwrite Schema accessor classes
fix schema after enumerating objects
make migration example work
partially working migrations
merge fixes
Clean up header inclusions
fix module headers
private Realm.Private module
changelog and docs
Replace attributes by property indexed
use release build
remove old realm
osx demo
renamed reference to wrong method.
Use one single-threaded background operation queue per file rather than one global one
[RLMUtilTests] Replace macro for exception equality with a static function
Bump version to 0.90.4
call setSchema in createTables, copy custom schema
remove schema copies in RLMCreateTables - now the callers responsiblity to pass in a properly copied schema
Update changelog
Eliminate a duplicated hash lookup for each property
Add a test for insertion a property not at the end
Verify that the unaffected data is unchanged in some of the migration tests
only copy schema/properties when necessary
create properties by name map lazily - this should require creation of this map for only the first thread accessing a particular realm
fix for invalid property comparison and reuse during column reorder and migrations
Add RLMUtilTests
Use RLMErrorDomain when creating NSErrors
Make RLMMakeError and RLMSetErrorOrThrow into proper util functions
Replace usage of throw_objc_exception with direct calls to RLMException
Move exception creation to the RLMException function
[RLMUtil] Add convenience function for creation of exceptions
Revert "replaced logo png with svg"
Revert "Updated x position of svg"
Updated x position of svg
replaced logo png with svg
Added logo to readme
Fxes for: Replacing HTTP-based sync protocol with a custom TCP-based one (not yet completely stable)
Bump version to 0.90.3
clarify that createOrUpdate* allows nested objects without primary keys.
added a test for createOrUpdateInRealm:withObject: without a primary key
- RLMCreateObjectInRealmWithValue() is now a no-op if value is an RLMObject   of the same type already backed by the target realm. - Moved check for primary key from createOrUpdateInDefaultRealmWithObject: to   createOrUpdateInRealm:withObject:
Throw an exception when adding an invalidated or deleted object as a link
Don't create accessor classes for nonexistent tables
Check _column in isEqualToProperty:
Removed logo and replaced with h1 realm
Bump version to 0.90.2
[Podspec] Add missing RLMPlatform to public_header_files
Release 0.90.1
Switch to explicitly listing the public header files in the podspec
Don't include RLMObject/RealmSwift.Object in the object schema
Properly close socket streams
Bump version to 0.90.0
Add a test
Improve error reporting for imcompatible lock files
Add a missing changelog entry
Add support for comparing string columns in queries
[RLMAccessor] Improve the exception message when trying to set a property with an object of the incorrect type.
Update to core version 0.88.0
Sort tables by name in  of  in the hope that it will solve the problem with non-identical initial transactions
Replacing HTTP-based sync protocol with a custom TCP-based one (not yet completely stable)
[Browser] Use a localError when opening a Realm
[Browser] Present errors to the user
Add "export compliance" section and ToC in LICENSE
[Podspec] Define private_header_files only once
[Podspec] Add the private header files to the subspec
[build.sh] Improve tmp path handling in cocoapods-setup
[Gitignore] Ignore tmp directory from cocoapods-setup task
Make a test less verbose
Add more tests
Roll back the write transaction on schema init if nothing changed
Use a less confusing name for the template type parameter
Update CHANGELOG.md
merge fixes
Uncomment a test
don't check schema version for dynamic realms without a custom schema
fix for browser and docs
examples fixes
another test
per-realm migrations
Update performance baselines
Eliminate a bunch of overhead from the perf tests
Use a Table-backed RLMResults for allObjects
Update to core 0.87.5
[build.sh] fix dynamic framework packaging
[build.sh] mkdir -p dynamic ios framework directories
[build.sh] fix dynamic framework distribution
Add test for max string length
Remove the NSData size checks
[build.sh] rm -rf + when cleaning
[build.sh] fix build.sh clean
Improve the migration test
Allow indexing ints and index int primary keys
simplify schema/migration logic
Refactor schema init and fix a crash
remove duplicate s_* definitions
Updated CHANGELOG.
Set locale for NSDateFormatter.
make RLMNotVersioned public
fix return value when hitting an error
pr fixes and browser test fix
add method to expose schema version - code clean up and small bug fixes
Update the examples
Rename methods for encrypted realms
Eliminate duplicated copies of the header files
[build.sh] Remove CocoaPods include directories before creating them
[Browser] Disable column reordering
Build obj-c tests with -fobjc-arc-exceptions to avoid leaks when testing for exceptions
Actually encrypt the write logs
Add writeEncryptedCopyToPath:key:error:
Update changelog
Also check for RLMArray count changing
Add fixme
Use XCTAssertThrows and a block for the test
Add a check for the count changing during RLMResults fast enumeration
speed up default merging
pr feedback
Update RLMObjectStore.hpp
deployment vs
re-privatize
put bridging header back in umbrella header
Roll back changes made when an exception is thrown during a migration.
Add changelog stub for next version
fix dynamic framework by removing RLMSwiftSupport
Actually set the version number to 0.89.2
Bump version to 0.89.2
Update to core 0.87.04
project fixes
pr fixes
remove swift scheme:
rearrange bridging header
make private private
remove class initialize for RLMArray
update README to point to latest setup instructions, reflect current API & tell people to email help@realm.io
fix for subscripting swift objects
Changed model exporting to use UTF8
fix for browser on mavericks
fix for osx framework headers
Don't set Swift list properties to nil when adding them to a Realm
fixes for swift list properties
fix merge errors
swift api prep/cleanup
rebase and cleanup
Add changelog stub for next version
Bump version to 0.89.1
Update core version
mkdir -p since `build/ios` may already exist
zip all ios frameworks together when packaging
package dynamic frameworks
split dynamic framework into separate device/simulator frameworks (closes #1163)
wrap path in single quotes
[RLMRealm docs] Added doc overview to RLMRealm (fixes #1198)
s/process/app/
Clarified exception message when opening a realm with insufficient permissions
Add changelog stub for next version
Update to core version 0.87.2
Bump version to 0.89.0
Update changelog
only define valueForUndefinedKey on test objects
add test for custom getter
support creating from objects wihtout getters
Update changelog
Bump core version to one with encryption support
Add setEncryptionKey:forRealmsAtPath:
Mention that encryption doesn't work with lldb attached
Make the Swift example a little nicer
Add support for encrypted Realms
Recombined file and class template installation in install_templates.sh using sudo
pr fixes
Added baseline for Mac Mini CI device
do classname initialization before creating object schema
Added baseline for Mac Pro CI device
fix for accessor/classname initialization
Objects with custom getter names can now be used to initialize other objects
failing tests for classname method for swift subclasses
Remove baseline for testInsertSingleLiteral
Added iPhone 5 Mac Pro CI performance tests baseline
Only run performance tests in Release
make "ios-debug" produce a fat binary
Commit performance test baseline measurements for CI
Add a performance test for sorting
Moved installation of file templates from privileged script to a new build phase
Rollback write transactions on schema validation errors rather than committing them
update rlm_lldb.py install instructions
Only check for cached RLMRealms when using the shared schema
[RLMProperty] Ensure the proper class name is shown in the exception message for an unsupported object property type
uncomment
Mention reference cyles in the comment
Don't clear the realm cache after performing a migration
fix dash & xcode icons in html docs (fixes #1189)
updated testINPredicate to also test format predicate negation
Header texts, plus removed sidebar outline navigation hints which are hardly used anymore.
Addressing comments by JP
Test "NOT IN" queries
changed "OK" to "Open" and removed header guard
Remove unnecessary dispatch_once in +initialize
update Swift examples for Xcode 6.1.1
First take at testing the Realm Browser (just a single test for now)
Release 0.88.0
Avoid setting _table on the objectSchema when not needed
Rename isDeletedFromRealm to isInvalidated
Give group a setter name that looks less weird when used for side effects
Create a read transaction in refresh if one does not already exist
Throw an exception if invalidate is called on a read-only realm
Update changelog
Rename test method
Documentation fixes
Rename endReadTransaction to invalidate
Add -[RLMRealm endReadTransaction]
only set the RLMResults once in the ios/objc/TableView example
changelog
fix error message when no migration block is specified for old Realms
fixed log message wrapping
improve dealloc rollback log message
[Podspec] Add build.sh to preserve_pathswq
cancel transaction on RLMRealm dealloc if still in write transaction
fix comment typo
Don't log update checker errors
store default property values in object schema
test propery indexes
make sure accessor creation is thread safe
cache default values
added method to change the default Realm path
only copy properties during column alignment
changelog
fix for schema version initialization
copy properties with schema
add missing properties to RLMCollection protocol
Cleanup and tested for int properties. Try to use small ints if possible.
changelog
pr fixes
generate multiple sets of accessors for different schema
Makes unique values for primary keys, takes much less than a millisecond. Only tested for strings so far.
Enable BEGINSWITH/ENDSWITH/CONTAINS on linked strings
Switch the file name back to rlm_lldb.py
Package the lldb script with the plugin
Add handling for deleted accessors
Add realm property to the RLMArray display
Add realm and objectSchema properties to RLMObject accessors
Improve setup instructions
Changelog and setup instructions
Avoid some redundant query re-executions
Add RLMResults summary provider
Cut down on the uses of EvaluateExpression a bit
Add lldb debug visualizer
Make RLMObject not retain its objectSchema
Add some __unsafe_unretained in useful places
Cache objectSchema on RLMResults/RLMArrayLinkView
Eliminate some redundant query executions
support case insensitive queries on array properties
changelog
update core release
Don't check the NSError pointer against NULL
Change `-[RLMRealm writeCopyToPath:]` to follow Cocoa's error handling conventions
added Drawing app and increased server requests to 100 times per second
added Chat to examples README and use hostname instead of IP
moved SyncedRealmExample to examples/ios/objc/RealmExamples.xcodeproj
copy SyncedRealmExample to real repo
added test to confirm that writing to two different realms simultaneously works
minor
Add -[RLMRealm writeCopyToPath:]
Added GroupedTableView example entries in examples/README.md
Work in progress
Work in progress
Work in progress
Work in progress
Work in progress
Work in progress
Work in progress
Work in progress
simplified tableview examples
Added GroupedTableView examples for Objective-C and Swift
added test to confirm that Swift RLMObject properties with no setter defined are ignored by Realm
tweak
fix for fist sync related problem, when the realm is empty
Work in progress
Work in progress
Undoing typo fix to avoid conflict
Remove 'return' from initialBlockingSyncWithServer
Work in progress
Work in progress
Work in progress
Work in progress
Lots of minor tweaks
Work in progress
Work in progress
share Backlink schemes
added Backlink examples to build.sh
added "backlink" examples for objc & swift
scrolling down to show last message
Chat app works offline
Work in progress
Work in progress
Work in progress
Work in progress
With hostaddress property hopefully working
spelling
Work in progress
Work in progress
should remove recursion and fix race condition
local persistence works
fixed browser packaging
removed ?? summary from CHANGELOG
fixed typo in changelog
fixed issues with examples and browser packaging
test examples after they've been packaged
Settings mostly done
Work in progress
Work in progress
Work in progress
Sort of working
added example app
Server sync demo muck-up: Initial blocking download, and non-blocking upload done. Non-blocking dowload still missing
Release 0.87.3
fix for crash on delete
Named constants instead of -1
Replaced -1 with constants with meaningful names
If a window is NOT showing the same array as the one where objects are deleted or created, it should do a reloadData because it might be displaying an object that got deleted, or the class where a new object got created.
Got rid of one level of calls by doing the arrayNode check in the window controller
Split up move method while factoring out common part, for readability as Ari suggested
Check for updates on each run (in the simulator)
Update RLMProperty.mm
changelog
test tweak
fix for missing search index during migrations
Updated references to online docs in exceptions
make browser work on mavericks
cleanup after merge problem
Add a test for the non-deep-copying behavior of createInRealm:withObject:
Test the dynamic framework in verify
Add a test target for the iOS dynamic framework
Add a shared schema for the iOS 8 target
Run iOS tests on both 32-bit and 64-bit simulators
Move all of the fat framework building logic to build.sh
Use a different build dir for the dynamic framework
Add support for building an iOS 8 dynamic framework
changelog
fix core caching
throw exception in addObjects for non RLMObject
Some issue with a change in timing caused the realm to load after the windowcontroller.
whitespace
Bump version to 0.87.1
fixed links to img/dash-icon.png and img/xcode-icon.png in docs
validate property type and objectClass
basic backlink support
Use a subshell for JSONImport running
Try to run the JSONImport example in verify
Try to run the JSONImport example when packaging releases
Test building the Swift examples when packaging releases
Bump version to 0.87.0
Remove RLMSupport.swift from the OS X framework
add/delete objects add/remove links in array (remove with or without deleting objects)
fix for swift examples
Enable Swift for OS X
Update Swift tests for Swift 1.1
merge
Speed up creating RLMRealm instances on background threads
Add a test that will fail when the Swift name mangling changes
Throw an exception when a nested RLMObject subclass is found
Validate RLMArray's protocol rather than crashing horribly if it's invalid
some adjustments to menus
Main and popup menus mostly done and wired up, not all of them implemented yet.
don't set primary key when updating
partial updates
fix rubymotion example
merge
pr fixes
Allow calling -cancelWriteTransaction from within a transaction block
Re-enable transaction rollback
merge fix
merge master
Make all intCol columns the same type to simplify tests
Preserve sort order when querying sorted RLMResults
Implement querying array properties
Update CHANGELOG.md
changelog
Make the performance tests a bit more useful
Update CHANGELOG.md
changelog
make in-memory realms used writelog
tests
new in-memory realm api
Update to core 0.85.0
typos
fixes for examples
fix migration example
fix tests/changelog
reuse realm instance for auto migration
rework schema initialization
inserting new objects
Update RLMResults comments
Enable indexing string primary keys
merge fix
fix error messages for property mismatches requiring migrations:
add method to clear a Realm
Animating moving rows and inserting new objects into array
build browser when running "verify"
Add tests for schema init with inheritance
browser fixes for RLMResults
Rearrange arrays with drag and drop
Uses RLMResults when needed Always uses Release build since certain headers are not found otherwise
Using new RLMResults where applicable Re-added supposedly missing image "RealmUnlocked"
Avoid extra objectSchema lookup
add test to show how to delete objects in a migration
doc changes
rename addObjectsFromArray to addObjects
pr fixes
Bump version to 0.86.3
small doc/message fixes
set version when specifying migration block
merge
typo
split migration into registration and application
pr fixes pt 1
fixes for latest merge
fix for typos
Add missing initializers
doc fixes
typo
add RLMresults class for empty results
fixes for examples
changelog
rename sort methods
merge in #978
fix for swift tests
fix tests, conversion stage 2
RLMResults stage 1
Switch to using RLMSortDescriptor for sorting by multiple columns
Implement sorting arrays by multiple columns at once
pr fixes
fixes for dynamic interface
type
changelog
make re-adding an object to the realm it is already in a no-op
Add support for != in queries on links
added "Realm" as a target dependency for each Swift example
some refactoring
header finally custom
customising header
Adding custom table header cell
Add support for XCMODE to test_ios_devices
re-add cocoapods-setup build.sh job
run device tests on CI
added build.sh commands for device tests
Update "iOS Device Tests" to work
no logs
Delayed show and hide
Popup window looking good now
only contain the necessary framework search paths
removed unused scripts
Set version to 0.86.2 and updated changelog
remove hardcoded paths
Bump version to 0.86.1
Get the accessor class name from the schema rather than the className method
added Swift/RLMSupport.swift to zip release
Release 0.86.0
Add a test for query chaining
Update to core version 0.84.0
Position popup according to the position of the array cell
cannot pull or merge
Verify that data of the maximum size is stored correctly
Throw an exception on NSData columns larger than can be stored
Rename to objectForPrimaryKey:
Add `+[RLMObject objectWithKey:]`
merged primary master and resolved conflicts
Made a computed convenience property (used for abstraction purposes) readonly.
dynamic interfaces and tests
Add support for empty IN clauses
Allow using any enumerable for IN clauses (such as RLMArray)
Revert to not officially support Xcode 5
small tweaks to changelog
fix for transposed query messages
Changes after JPs comments.
After JPs comments
Removed helper methods in accordance with JPs comments, restricted statistics computations to tables.
Abstraction of the difference between when we are showing an array or a query
step 2
trying to fix "file mode changed" issue
Project file update
Resolving conflicts
merged primary masterand resolved conflicts.
remove ghost "iOS Tests copy-Info.plist" file
simplify iOS 7 check
runtime check for iOS 7 to disable update checker
Add another test
Use an enum for RLMDynamicSet's options rather than a bunch of bools
Don't allow passing persisted objects to -[RLMRealm addObject:]
Only run Realm update checker if min required iOS version is >= iOS 7.0
removed outdated comment
use parentheses instead of blocks
improve IN operator predicate coverage
make build for xcpretty
Eliminate a Query deep copy when constructing RLMArrayTableView
cache core download
delete file
fix examples for distribution package
don't codesign OSX framework
change default configuration
fix Xcode capitlization in CHANGELOG
add destination to test-ios
Better looking popover
remove destination
fix for destination
add destination to build.sh
fix for paths
fix for framework paths
fix for subclass className race condition
merge master
simplified build.sh for xcode6-only and fixed typo in build-fat.sh
Don't throw an exception when -description is called on a deleted object
changelog
typo/changelog
support subclassing
shows window with appropriate tableview in it...
Added popup wc
integer property indexes don't work currently
elaborate docs on RLMPropertyAttributeIndexed
format
changelog
With non-attributed string
with non-functional string attributes for array reference
Send path of current xcode project as launch argument to browser
fix/update test
bump core version, header fix
fix for paths, code sign
turn off code sign
Typo
Introduces an object node in the outline view, and shows it between class nodes and array nodes.
changelog
new Release-Combined configuration for fat framework
fix for build.sh and release builds
import not needed anymore
More fixes
Got rid of unused files + other fixes
Export model definitions for java and objective c, with save dialog
build fat framework in xcode6, remove xcode5 support
fix exception message
Correct preambles
[WIP] Shows a java version of the schema in a separate window each time a new class is selected.
changelog
First commit
Update README.md
Plugin now also adds a menu item in the file menu to open the Browser, if it exists.
fix for nested objects where some are not primary keys
failing test
fix warning
Update CHANGELOG.md
revive linkview sorting
Get the version in a way that actually works with Xcode 5
Automatically ignore readonly properties
merged primary master (again) and resolved conflicts.
Shows tooltips with statistics in the column headers
Removed padding attempt
Adding min, avg, max etc to column header tooltip
Cache the getter and setter selector on RLMProperty
Add package-test-examples task
Change uses of xcpretty to forward $XCMODE instead
Update the release scripts for the new examples packaging
Add the release packaging scripts to build.sh
Add RLMSwiftHelpers.h to the Xcode 5 project so that it ends up in the released frameworks
Adjustments according to JPs comments
Changed to dot notation in four places.
No also adds app name for files in the simulator. Cleaner code.
Make package_examples.rb ruby 1.8-compatible
Bump version number
Improve attributesForProperty: documentation
Update changelog
decouple code paths for parsing properties for objc vs swift
Clean up some stuff
Make the path to Xcode overrideable with the XCODE_PATH env variable
Rewrite the Swift class support in Objective-C
Set the executables to run for the example projects
another attempt at fixing CI
attempt to fix CI by cleaning for every target in RealmExamples
attempt to fix conditional ios framework build phase in ios/objc/RealmExamples
re-added realm files for Migration examples
- shared all RealmExamples schemes - added package_examples.rb
fixed osx/objc/RealmExamples
updated examples structure to use a single Xcode project per platform/language combination
Now also adds the name of the app if it is in the developer folder and finds a corresponding .xcodeproj file
Some comments
Conflicts resolved
Changes according to JPs comments
Changes according to JPs comments
Upgrade core library version 0.82.3 -> 0.83.0
Reworked the recursions in tooltip descriptions
Removed redundant files
Adds blue underlined style to array and object links, adapts to white when selected.
remembers locking state between sessions, separately for each document
Syncs locking state of all realm windows
Tooltip wording fix
Tooltip for lock icon + starts in unlocked mode
Headers…
Upgrade core library version 0.82.2 -> 0.82.3
Reloads table when editing is cancelled with ESC, thereby resetting number of decimal digits.
Subclassing NSTextField in order to be able to catch cancelled editing sessions
Better indentation
More polish
Some polish
trying to get notified when editing is cancelled
merge and pr fixes
always show exactly three decimal digits.
changelog/docs
Made array indices gray and right aligned
Make the core version check case-insensitive
update changelog
add basic primary key/usert test for swift
Conflicts resolved
Conflicts resolved
Update RLMTableCellView.m
Clean up
clarified docs for minOfProperty: and maxOfProperty: to reflect its support for NSDate properties
Add a basic update checker
changelog
Eliminate a few more #ifs
Add full support for 16, 32 and 64-bit Ints in Swift
migration support for primary keys
Made randomData method random, and implemented randomAny
Remove FIXME comment
shared all RealmSwiftExamples schemes
Avoid holding a strong reference to RLMRealms for notifications
Working
Wiring up, cleaning
first commit
Replaced the combination of own tooltip definitions for arrays and objects (that also used the binding versions) with completely own approach, with shallow recursion.
Removed image cell view for property type data until supported.
comment cleanup
add test condition for updating objects in RLMArray properties
fix for updating nested objects, fix for creating object with primary key values of 0 and ""
store primary key in metadata
factor out code for creating or updating rows on insert
more swift test fixes
fix for other swift test
pr fixes
fix for swift test
add createOrUpdate methods on RLMObject
making sure we use the latest bindings
fix for hash and isEqual
fix for last race condition
fix for posible race conditions in tests
Extract duplicated code in setter creation
update RLMPrecondition message
re-add nil predicate check
refactored RLMUpdateQueryWithPredicate to only handle NSPredicates
fixes for upsert
don't allow primary properties to be changed, tests
pr fixes
primary keys and upsert for int and string
Further fixes
Build the Swift examples project in c++14 mode
add test for createInRealm
support kvc properties when initalizing objects
Implement read-only realms
clean-up TableView verification
Build in c++14 mode when building from the pod
Use std::unique_ptr to hold pointers to C++ types
Clean up
Got rid of some unnecessary changes and added comment explaining why tooltips were nil:ed.
fixed build.sh examples
Add the name of the class in the missing property value exception
Changes according to JPs comments.
Update to Xcode6-Beta7
Added robustness
first
clean up nslogs
with lots of log statements
added some logging statements
Improve the tests
Rename RLMRealmNeedsRefreshNotification -> RLMRealmRefreshRequiredNotification
Split the notifications into DidChange and NeedsRefresh
Test both query and tableview count updating
Don't materialize the TableView for a query just to get the count
Added max, min of ints, floats and doubles, plus occasionally a very long string.
Bump version number
Properly deletes links to arrays/objects
Now removes links to objects and empties linked arrays
disable failing test in XCode6
Add better tests for querying RLMArrays from queries
explicit query copy
changelog
added test, fix for re-sorting
fix for enumerator test
enum cleanup
make sure new tableview is attached
create tableview on demand
Upgrade core library version 0.82.1 -> 0.82.2
Document RLMRealm lifetimes and related issues
Right click to delete object or array link (actual deletion not implemented yet)
Clean up
Added correct preambles and some comments
Started preparing for showing images in the browser.
Generates random objects according to any existing class definitions
small modifications from PR feedbacl
updated CONTRIBUTING.md with guides to filing issues and contributing code
Test file generator completely refactored and now very flexible Still needs to fix array references so it doesn’t create new ones all the time.
Actually report failure from build.sh when a test fails
Ended refactoring, now needs to actually calculate the statistics.
Update README.md
Update README.md
Update README.md
License details; let us know about your apps!
refactored, step 1
Cleaned up
Improve the migration documentation more
Improve the migration documentation
Improve the autorefresh documentation
Don't set TIGHTDB_MAX_LIST_SIZE for debug builds
Upgrade core library version 0.82.0 -> 0.82.1
Update changelog
Updates necessitated by change core Group API (https://github.com/Tightdb/tightdb/pull/515)
Upgrade core library version 0.81.0 -> 0.82.0
Update docs + installation instructions
initWithContentsOfURL ends up on the wrong thread.
keep trying
Just for parking
Double click to resize column
Use an exception rather than assertion
Shows index within array, if an array is displayed
Links are no longer blue, and do change color when selected
Change how Realm in linked into TestHost
improved wording
Minor docfix: mentioning that array has to be in right order
Lock button locks everything
Column fitting faster, minor cleanups
Saves window size and to some extent position (seems to be some automatic cocoa behaviour that influences this) between session.
Throw an exception if the user asks for case-insensive matching on link queries
Add better string comparison query tests
Eliminate some weirdness in add_constraint_to_query
Removed spacing in front of class names
Revert "Updating to XCode 6 beta 6"
Updating to XCode 6 beta 6
add test for notifications in bg threads
changelog
changelog
api cleanup
Don't claim that autorefresh is off by default on background threads
Eliminate more of the differences between link and regular queries
Enable unused parameter warning in the Xcode 6 project
Extract some duplicated query building logic and add support for multi-level link queries
Extract some duplicate code for ORing queries
Add a helper for checking predicate preconditions
Implement the IN operator for link queries
Implement BETWEEN for link queries
Add more and better tests for link queries
core api change
typo
support sorting LinkView arrays
changed instances of Xcode 6 Beta 5 to Beta 6
use const for non-versioned version number
updated build.sh to use Xcode6-Beta6
fix for reusing cached objectSchema tables
Support for Xcode6-Beta6 (Realm-Xcode6 and RealmSwiftExamples)
Support setting model properties starting with the letter 'z'
Check the token's block in case it was niled while being enumerated
Make sure the token block is not nil
fix for async test conditions
cleanup table creation flow, use only 1 transaction during migrations
Update CHANGELOG.md
Update CHANGELOG.md
rename
fix for swift tests
only initialize the schema for the first thread accessing a realm at a particular path
simplify
add isDeleted method to RLMObject
Lower deployment target for the Xcode 6 projects to iOS 7.0
Handle object cycles in -description by limiting the recursion depth
Update changelog for #804
Copy `_notificationHandlers ` in case it was mutated while being enumerated
Changed preambles.
Tweaks. Still not working. Needs changes in the core, or completely different method.
Starting to implement notifications.
Stops showing the open file dialog at startup when double clicking realm file.
Make the array tableview validation functions better named
[WIP] Added back the Insert object in to array and Add object menu items.
Don't sync table views while iterating over them
Removed non-working insert and add row functionality (will need to update dynamic realm functionality). Should be a self-sufficient and releasable commit.
With add/insert present
Cleaned up, got rid of testcases and unnecessary type checks.
Use set -e for build.sh rather than manually checking each exit code
Add `|| exit 1` to all of the commands in the CocoaPods setup
Rework the podspec
Enable sign comparison warnings in the Xcode 6 project
Make functions which do not need to be exported static
Enable warnings for missing function prototypes
Add a better error message for non-constant values in predicate aggregates
Add RLMDynamicCast
Add tests for more types of invalid predicates
Implement the IN operator for predicates
with testcases for default realm vs dynamically loaded realm
[WIP]
[WIP]
Supports removing objects from arrays, including multiple objects.
Removed column editing
Last commit with ADD COLUMN
Using “type *var” instead of “type * var”.
Don't download the core when a local build is present
Trying out (ugly) array icon
row -> object column -> property
Schema -> Schemas
Schema and row edit lock buttons
lock/unlock buttons
Version bump
Ensure the write transaction from initializing a realm gets closed
select multiple columns select column and open menu by right clicking header add and delete multiple (non-contiguous) rows
Explicitly autorelease realms returned from RLMRealm class methods
fix for incorrect macro
typo
merge
fixes for compiler warnings in testS
Bump the core version
Refined multiple selection editing Refactored away claZZ.
disable “editing” of objects and arrays as text.
Reject invalid subclassing of RLMObjects at schema generation time
Allow 0 and 1 to be used as bools in predicates
Multiple selection of rows for adding and deleting Menu items are greyed out when not applicable
brought back tooltips, took care of very annoying IB bug
Selects the row you right click on
removed some empty lines
Remove unused comment
Revert "Remove comment of unused method"
Remove comment of unused method
Add tests for compound queries
Extract duplicated stuff for predicate exceptions
Add support for BETWEEN {from, to} predicates
support sorting LinkView arrays
user proper literals
final fix
pr fixes
Add a test for setting default values when initializing from a dictionary with nulls
fix for other types of queries
fix for long predicates
before adding an extra instance viewcontroller as a detail view below the main window
Adding and removing rows
Allow arrays and object properties to be missing when initializing from a dictionary
Remove unnecessary int overflow checks
Speed up RLMArrayLinkView fast enumeration
Throw an exception when objects are used on the wrong thread
Speed up setting the className method for accessor classes
Build in release mode when running tests on a device
Add support for running Objective-C tests on devices
Add performance tests for all of the benchmarked things (and a few others)
numberformatter should be decimalstyle even for ints
Transition to view based basically complete All types (except array and object) are editable in-cell. Date is additionally editable using the old popup date picker, by double clicking
Corrected Xcode Beta version
Now floats and doubles can also be edited, although the locale is ignored, so “12,3” will not be accepted. Should use the formatter, which should be kept a reference to. Strings can also be edited.
Strings can be edited (but not very polished)
Edits and saves date using the date picker.
Remove the pointless _readOnly ivar
Make the documented style for defining RLMArray properties on Swift objects work
Verify that adding objects to standalone arrays works from Swift
Improve error message for invalid literals
Text alignment in cells
uses view based approach and shows bools, arrays and objects as it should, the remaining as text.
Removing commented out and unused code
changelog
add support for querying nil objects
more tests for deleting array children
Add an explanatory comment
Add a test for memory leaks when creating a lot of queries
Sort the project files
Build with Xcode6 beta 5
Update Swift examples
Update Swift code for Xcode 6 beta 5
set date
bump version
Version bump
temporary fix for casting issue
Update changelog for core version bump
Upgrade core library version 0.80.4 -> 0.80.5
Object links now displayed as MyClassName(somePropertyValue, someOtherPropertyValue […]) Within an object link, arrays, object links, dates and bools receive special formatting Formatting split out to separate method, which calls itself for object links (but only one level of recursion)
- update docs readme
- use placeholder in class templates
- use placeholder in file templates
fix for indentation
fix for xcode6
changelog - move ivar initialization to initializer
disable timer for ios - support disabling autorefresh
merge
Use an autoreleased C array for the fast enumeration buffer
Verify that objects are released during fast enumeration and not just at the end
Update changelog
Switch RLMArrayLinkView's fast enumeration implementation to RLMArrayTableView's design
use TARGET_IPHONE for everything
enforce correct framework for xcode6proj
Improve the error message when properties are of an invalid type
Don't add a duplicate copy of libtightdb-ios.a to the framework
don't allow wrong framework to be used
throw for all uses of IN predicate operator
merge
Copy tableviews correctly in arraySortedByProperty:
Add documentation for RLMArray init and new
Mark -[RLMArray init] and +[RLMArray new] as unavailable
Create the directory containing the realm file if it does not exist
Move the default realm path on OS X to Application Support
Added preprocessor conditional for choosing property type according to running arch
changelog
fix for standalone RLMArray creation with array literals
Add Swift versions of some RLMArray tests
Some equality tests
Boxed 0.
Similar setObject tests
A couple negative keying tests
fix for casting issue
Test case for ignoredProperties on Swift. Issue #686.
Update CHANGELOG.md
Updated CHANGELOG.md with fix from #701
Explicitly copy the TableView in arraySortedByProperty
Add a test for sorting an already sorted array
Add a dumb test to verify that holding subqueries past the lifetime of the parent appears to work
don't hold onto query - fix for query double release
Implement -[RLMArray indexOfObjectWhere] and friends
Use custom getter name when adding object to Realm
Clarified exception message when using ‘IN’ predicate operator (unsupported)
update changelog
fix for column alignment for standalone accessors
Disable the REST example in build.sh
renamed defaultPath to defaultRealmPath and removed unused/unexposed setDefaultRealmPath:
Added [RLMRealm defaultRealmPath]
Remove CocoaPod buttons
clarify core licensing
When ignoredProperties is overridden on Swift, the schema ends up invalid
Use of tightdb::TableRef improved in various places
Upgrade to use core library version 0.80.4
Added quoting of some variables
simplified Xcode6-Beta4 release note
@bmunkholm comment updates
added link to all supported types in NSNumber property exception
Updated README.md with license and pod tags
clarified when CGFloat is a float vs a double
Make message clearer
- Realm-Xcode6 universal iOS framework now builds to Release-iphone to not conflict with OSX build - updated CHANGELOG
updated NSNumber error message
Using NSNumber properties (unsupported) now throws a more informative exception.
- clarified CHANGELOG entry - removed “Note on float” - moved nsnumber_can_be_float() check to nsnumber_is_like_float()
convert RLM_ARRAY_TYPE documentation to appledoc format
- extended documentation for RLMConstants, RLMObjectSchema and RLMSchema - tweaked build-docs.sh to reflect these docs changes
- better document RLMProperty - appledoc no longer ignores RLMProperty - fix a few doc-related issues
removed RLMSortOrder
- use CocoaDocs' Dash/DocsForXcode links - no longer build our own docset
Ignore RLMRealm_Dynamic in appledoc
updated RealmSwiftTableViewExample to Xcode6-Beta4
typo
updated CHANGELOG
fixed issues with Xcode6-Beta4 tests
WIP support for Xcode6-Beta4
Allow to build with whatever version of core is in the core folder
Be paranoid and unlink build/bin before creating a new symlink
Realm.podspec now lints for 0.81.0
will keep docs at realm.io/docs/ios/** for this release.
mkdir -p Debug
mkdir -p Release
Updated spacing
updated CHANGELOG
- updated source to point to cocoapods zip - updated docs from ios->cocoa
Added back SimpleExample's AppDelegate, which was mistakenly overwritten with the content of EncryptionExample in this commit: https://github.com/realm/realm-cocoa/commit/e4ac3011452b5f30b35d138694ae6d809cd6e514
sh build.sh ios{-debug} now builds a universal framework when XCODE_VERSION=6
Updating Browser's version number
Getting ready to version 0.81.0
Adding unit tests and a short notice in the documentation about float and double values.
NSPredicate does not support float values in query strings; only double is. If a value can be casted to a float, and a class has a float property, we can help the user by casting for her but it might lead to loss of precision.
missing argument
use mktemp instead of /tmp. Help with concurrency
another try at fixing core symlink
merge
typo
fix core symlink CI issue
use ANY modifier correctly
completely renamed RealmVisualEditor to RealmBrowser
fixes for JP's pr comments
removed stderr.log and updated old XCVERSION references
add object equality queries on RLMArrays, verify objects passed into link queries
delete build/bin, otherwise the symlink will fail
edit changelog
bump version
merge
support predicates for object equality
There are a few implicit casts stopping master from successfully testing/building in Realm.xcodeproj
Upgrade to use core library version 0.80.3
merge
add more thorogh testing to KeyPath predicates, slight refactor/cleanup
changelog
Using the Realm’s schema when validating relationship queries.
Core does only support link queries in the for X.Y.
add transaction block helper
Safer string conversion
ANY does also work
A little style
Cleaning up unit tests and adding more explaination to the changelog
Support for querying objects' RLMArray properties
Updating changelog
Adding basic support link queries
Version bump
Move build.log into the build folder
No need to remove the bin folder now
Move the bin symlink into the build folder
The core folder is now a symlink to a versioned folder
Add OSX support to the pod spec file
Have the browser app still be called “Realm Browser.app”
Rename RealmVisualEditor to RealmBrowser in a consistent way
make property initializer private, update swift
add JP's dynamic tests, fix for setting usig object subscripting on standalone objects
updated CHANGELOG
- moved UTF8Object to RLMTestObjects to be shared with Swift tests - ported the UnicodeTests to Swift - improved test messages in UnicodeTests
fixed changelog
al-standalone-subscript
Upgrade to use core library version 0.80.2
Add the util test to OSX Tests as well.
Use UTF8 (byte)length instead of character length.
- renamed rubymotion model properties from *Col to *Prop - expanded on rubymotion README
fixed a few things about docs - deleted docs/src/docs.md because it's now versioned in realm.io - removed references to docs.md - fixed bug in dash docset creation
Upgrade to use core library version 0.80.1
Added RubyMotion example
added /usr/libexec to PATH to simplify PlistBuddy usage
Add link to contribution guide to README.
Add contribution guide
plugin now installs Xcode 6 Swift/Objective-C templates
- file/class templates are now installed for both iOS/OSX - fixed improper usage of RLM_OBJECT_PROTOCOL in docs
Updated READMME.md with note about contributing.
Use the NSURL class method fileURLWithPath: rather than URLWithString to prevent the app from crashing if there are spaces or special characters in the filename
added RealmEncryptionExample and RealmSwiftEncryptionExample
reverted encryption changes to RealmTableViewExample and RealmSwiftTableViewExample to create a new example instead
added file encryption to RealmTableViewExample
fixed small typos
updated objc/swift migration examples to use Realm headers
fixed issues building RealmSwiftMigrationExample
fix license path
Also change the path for the license file in the podspec
Our JSON example cannot compile using Xcode 6
Using the new where instead of withPredicateFormat
Make the schemes shared for the objc examples
Adding the Realm xcode5 project as a subproject.
Removed JSONImportExample from README as it will not be distributed yet.
the version is the second argument
disable code signing in RealmSwiftMigrationExample
added RealmSwiftMigrationExample and fixed issue where RealmSwiftExamples didn't run on device
Added back SimpleExample in README
updated examples/swift/README.md
moved RealmSwiftExamples to examples/swift
added RealmSwiftExamples.xcodeproj
Last fixes on all snippets. Only swift version of migration blocks missing
updated Swift Dog and Person models to match Objective-C
Update docs.md
merge
docs for background
add swift examples
Re-added the Swift and Objective-C simple examples
Minor fixes to docs to make code snippets actually run
Re-enabled testRealmIsUpdatedImmediatelyAfterBackgroundUpdate for Xcode5
disable test again
disable notification test
fix comment
clear realm cache, enable disabled tests
Bumped version of browser to 0.80.0
rewrote demangleClassName to use NSString substring methods rather than String range subscripting
Updated changelog
unimplemented methods now pass through to the va_list equivalent
fixed issues in building and running objc examples
README updates
Use where instead of withPredicateFormat
Quick fix to avoid reflow of docs on website.
hotfix to use realm-core-0.80.0
using objectsWhere
Removing defaultConfigurationName
- Changed usages of `WithPredicateFormat` to `Where` - Added vararg support to Swift
Updated soem code - missing ';'
aligned 1 code line
Update README.md
Updated indent.
fix for swift tests
Added RealmJSONImportExample and removed RealmPerformanceExample from build.sh
merge
use new method for deleing arrays of links from realm
merge
minor pr fixes
fix for minor pr feedback
Minor cleanup
Removing README.md
Minor tweaks to README
removed RealmSimpleExample and RealmSwiftSimpleExample
Updating README for consistency
Documenting targets
Set the DerivedData folder path in the build directory
README.md should only tell how to build iOS framework
Removing absolute paths
Backticks
Removed RealmPerformanceExample until it's been heavily refactored and cleaned up.
Naming interfaces
More common? phrasing
Updating readme for examples
This was said with exactly the same words above
Consistent tag and dots
Consistent linking
Dots.
Adding framework twice: debug and release
Adding framework twice: debug and release
Adding framework twice: debug and release
Adding framework twice: debug and release
Find framework in build folder
Updating samples
Update AppDelegate.m
Update README.md
Make the dependancy to core explicit and formal.
Update README.md
updated changelog with Swift changes
added links, minor edits
Rewrote the README
PR cleanup
clean up PR
Added FIXME's for Asana ticket
Tweaked tests
Minor fixes for review comments
fixes for tests and changelog
add batch deletion that doesn't crash
update changelog
update migration docs
Replaces tabs with spaces
added a space :-)
Renamed app to "Realm Browser"
Resolves conflict in AppDelegate.m
Separates API request and Realm persistence to separate methods to make the code easier to follow
add another check
update enumeration test
update enumeration test
Revert
Revert
fix for swift tests
fix for error running tests on ios
support object and array literals when initializing/inserting objects
removed wrong (old?) comment
one char added in comment
remove function only called once
rename migration methods to make default migration more obvious and to put the block as the last argument
Added search in double properties from search box (floats waits for fix in binding)
Minor fix for review comment (use property)
free accessors per after each enumeration batch
fix typo REALM_SWIFT
hotfix for Realm.xcodeproj (shouldn't import Realm-Bridging-Header)
Added simple search box to browser
re-enabled Sequence-style RLMArray enumeration
Adding a space!
Adopting non-public RLMRealm method for getting all instances of a specific type.
clean up bin symlink
Now supporting nil object links and adapt cursor handling accordingly.
Automatically scrolling tableviews so that selected rows are visible.
Temp fix for getting all instances of same type as a specific object.
Selections in array views are also stored and set accordingly when navigating back.
Removing unused delegate handling methods.
Setting the initial selection in the outline view.
Create a symlink to the proper bin folder before launching xcodebuild
We don't want to track selection movement in the instance table view.
Clearing row selection is now handled else where.
Navigation new works correctly again following links and arrays.
fix for XCode5 from previous swift checkin
specificy message for protocolless array properties
Some refactoring and clean up.
Added many ObjC model tests in Swift
Added many ObjC model tests in Swift
duplicated all Swift tests to also test Objective-C models
- removed objc model tests in swift tests temporarily. these all have to be re-added later - made TestFramework schemes shared
fix for core api changes
Create TestFramework and added RLMTestObjects to it (enables testing Objective-C models in Swift)
improvements to various exception messages
Tweaks to migrations copy & code
Get rid of xcode-select and use the right xcodebuild directly.
optional properties work for String, NSData and NSDate
Changed jsonResponse var to serializedResponse to be more accurately descriptive
Swift-defined models
Update AppDelegate.m
Added header to main.m and removed implementation from Venue.m
Feedback updates to REST sample app
small bug fixes
A bit of cleanup and optimisation.
A bunch of refactoring and bug fixing.
fix for docs warnings
fix build issues
Changing instance selection is now correctly registered as a navigation state.
Make build.sh show what it is building
Small cleanups in formatting.
mutiple bug fixes for standalone arrays and indexOfObject:
fix docs for api changes
changelog
fix for browser
merge
fix notification tests to take into account write transaction when opening the realm - use threads instead of runloops for lower latency notifications
Update RLMRealm_Dynamic.h
do migration example 1 version at a time
remove public query api from RLMRealm
Doing the groundwork for supporting arrays in the navigation stack.
Refactoring navigation stack logic out in a separate class.
Navigation buttons are now updated correctly.
Basic navigation back/forth works.
Updating file headers.
Adding navigation stack.
Refactoring the view controllers dependencies and communication.
Added RealmRestExample example app
Added docs on schema migration
fix podspec license
fix for description in dynamic interface
Some refactoring
Some clean up.
Moving object table configuration into RLMTableView
Removing deleted files from project.
Reenabling automatic selection highlighting when following links/arrays.
Removing a superfluous table update.
Test the location of key path in comparison
Updated to match core and added changelog
Add GA to README
Removing redundant code
Reducing some code duplication
Make schemes shared for command line tools
cache accessors on object schema
regenerate accessors every time (partial bug fix)
protocol
pr fixes
first pass optimizations
Implemented indexOfObject for RLMArray (both with underlying TableViews and LinkViews). Dependent on tightdb PR #472
add more test conditions
add migration test
Use code blocks consistently
Use an array instead of many similar assertions
Made sidebar look more like Finder: - Correct gray color and size of headers - Gradient selection background - Background change color when loosing focus - Headers not selectable
Add some explicit links to API
Remove links to class names; automatically linked in JS now
Some work on visual selection style.
Remove child arrays from outline view when not shown
Drop the prefix of RLMPredicateException
Moving to a better location
Copy/paste error
Dates are similar to other numeric comparisons.
Swap which argument is the key path every other time.
Init as double
Float, doube, and custom selector comparisons.
Remove log statement.
Handling some link cursor corner cases correctly.
Move file to subfolder
Add source for iOS guide
Remove warning.
Enabling true hyper link behaviour cells with object links and arrays.
First draft of implementing hyper link behaviour on cells with links and arrays.
Moving view controller initialization into awakeFromNib
Removing unused search path item in project.
Removing old files from build rules.
Making scheme shared
Make the version handling dynamic
small tweaks
updated changelog for editor
updated changelog for last few prs
update license
change back to standalone objecT
updated Visual Editor with new dynamic realm constructor and removed unused framework search path
fix for async tests in xcode6, get rid of XCTest+Async
Invalid operator tests
Removing unused error codes.
Workaround for 32 bit issues with DateTime.
Breaking long lines.
Objective-C-like verbosity
Removing unused constant.
Revert "Adding support for two-column comparison for Date."
Renaming class.
Removing dependency to derived data.
updated templates to use RLM_ARRAY_TYPE instead of RLM_OBJECT_PROTOCOL
test-debug now respects xcmode
cr edit
o->i
swift fix
fix for swift tests
fixes for xcode6
example pr tweaks
first batch of pr fixes
change method signature from RLMObject to id
merge and fix Schema test case to use new apis
pr fixes
Removing default icons in sidebar.
Disabling toolbar
Bump version number
Optimize performance of large databases
Enabling the generation of large demo databases.
added comments for used error types
Adding support for two-column comparison for Date.
just one test
Adding type conversion to fix Mr Jenkins' nervous breakdown.
test for unknown type
using protocol instead of macro
Updating comment.
indentation fix
added bool property type check
comment on data model changes
headers and merge fix
migration example and bug fixes
updating comments
change enumerateObjectsOfClass: to enumerateObjects: to be consistent with other api calls
fix for jp's comments
added RLMPredicateUtil to Xcode6 project
alignment
moved space
Add a script to replace the framework search path
property type checks + json test
Update RLMQueryUtil.mm
small test fixes
Reenable two-column comparison unit test.
tableview json string
The Compare class declared in query_expression.hpp is no longer supported for two-column comparisons. Using the table’s column comparison operators can be used instead.
indentation
Change color and format of array and object links.
add line break
updated build.sh and shared schema
merge with master
Add a couple of debug test targets to build.sh
moved files up in Xcode project
renamed pragma mark
removed try / catch renamed to RLMPredicateUtil
updated based on feedback
Moving to tableCellView for sidebar in order to support count badges.
added fixme comment
disabled test due to changes in core
Update RLMObject.h
Update RLMObject.h
Log xcpretty builds
small fixes based on feedback
added swift simple example
removed spaces
reverted in-line edit
fixed more typos in code comments
fixed typo in code comments
merge fix
merge
add tests
finish test
add ability to create objects directly from arrays/dictionaries
Throwing an exception when error == nil. Using error variable is a hack but keeps the changes to a minimum.
added Swift example. uses objc model
fix for object enumeration
invalid path for realm check + test
Adding new custom sidebar table cell view
string predicate valid test
dates test
Change font style of outline's root node.
Removing column headers in outline view.
Change the text color of the outlines root node.
standalone array tests
Only one array instance will be displayed for a particular class at any time.
Change the column tooltip text for object links and arrays.
Formatting references to object links and arrays like hyperlinks.
Remove unused category.
Changing method name.
Reenable double-clicking for selecting links and arrays.
A bit more refactoring.
Style changes.
Renaming RLMClassOutlineViewController to RLMTypeOutlineViewController.
Different formulation.
Updating copyright file headers
Renaming selectedObjectNode to selectedTypeNode
more outdated accessors
fix for build error for ios
fix for wrong accessors, less string copying, remove unnecessary ivar population
first migration test
updated examples locations in build.sh
Moved all objc examples to examples/objc
private interface for schema mutation
moved private headers to project headers
use 2 realms during migration
Further refactoring (changes to the separation of concerns)
fix for compile issues
fixed merge issue
Modify test cases to only verify the availability of a subset of types.
check for specific exceptions thrown
xcodebuild treats empty strings in a very weird way
Use double quotes for xcodebuild options
Informing the user where the problem is when property does not descend from RLMObject
Don’t sign the examples while on CI
Support junit output on xcpretty if running within Jenkins
added tests for query between
Make build.sh configuration behaviour uniform.
json not yet implemented
replace objects in tableLinkView
nil is possible value for a RLMObject
test realm path
link array remove tests
more standalone array test
test standalone sum, min, max, avg
Remove dependency from the Realm project in the examples
add migrations
use single accessor class to avoid c-accessor edge cases, true dynamic interface
fix for headers
moved spaces
Reposition of methods
Copyright notice
Following style guide
Rewriting string tests and new predicate tests
Testing string comparisons in predicates.
- moved test objects to support Swift tests - added Swift tests
just Xcode 6 project
- className now returns demangled name for Swift classes - store tables under demangled Swift class names
merge
merge
moved RealmSwift to Realm-Xcode6
- moved RealmSwift.xcodeproj to Realm-Xcode6.xcodeproj - merged latest build.sh changes
Fail appropriately if not excpetion thrown
A couple bool predicate tests
A missing file!
Refactoring the control of the tableview out in a separate view controller.
added license for XCTestCase+AsyncTesting in LICENSE
Removing non-working code
A couple different BETWEEN tests
added description in header
added support for init object from array or dic
Refactoring the outline handling into a separate view controller.
resvoled merge conflicts in CHANGELOG
Add custom window controller + a bit of cleanup
Changing style of the Date/time picker.
added support for Swift-defined RLMObject subclasses
merged latest build.sh
updated with comments from @emanuelez
updated build.sh
updated RealmSwift.xcodeproj with header renames
Some code cleanup + changes to the array description in outline view.
Refactoring and adding numeric predicate tests
Reverting in order to reenable document recognition.
fix in test already merged into master
rollback unintended commit + fix in test
Refactoring based on review.
removed libstdc++
fixed tableview example
fixed simple example
small tweak
removed unintended lines
using new query method
remove useless comment
updated CHANGELOG
moved RLMNotificationToken interface to bottom of RLMRealm.h
merged both bridging headers and fixed issues with RealmSwift.xcodeproj configuration
consistent naming of abstract type properties
consistent test object naming
- updated where test objects are defined - cleaned up some test objects
Refactoring suggested by Brian
Renaming RLMQueryUtil_Private.hpp -> RLMQueryUtil.hpp
Renaming RLMQueryUtil_Private.hpp -> Realm/RLMQueryUtil.hpp
Adding file icons to project and rearranging project a bit.
Enabling opening realm files by double-clicking or dragging to dock icon.
Add user's PATH; use spaces instead tabs
Supporting bool in two column comparisons
Reducing the delay time for showing tool tips.
First draft of date field editing using a date picker.
Merging multiple write transaction into one single transaction
merge
test iOS Release configuration in simulator
merged latest tweak to RealmTableViewExample
removed unused code from RealmTableViewExample
undid changes to Realm.xcodeproj
fix notification token and withPredicate: issues in Swift
using Xcode6-Beta2 now
Some changes based on review.
updated predicate and sorting method signatures
moved RLMNotificationToken property declarations from interface to class extension
moved notification token interface from RLMRealm.mm to RLMRealm.h
added LICENSE to final Realm.framework's in RealmSwift.xcodeproj
headers
added SwiftArrayTests
Adding unit tests for RLMSchema
minor spelling fixed.
Adding a (yet non-functional) backward/forward button to the toolbar.
Removing 'tightdb' namespace when not required
Removing 'tightdb' namespace when not required
Ask user if a newly generated demo database should be opened afterwards.
Query stuff is building but unit tests are failing.
Open file dialog when generating a new demo database.
Updating source file headers.
add LICENSE to iOS framework
Renaming schemaForObject on RLMSchema + updating changelog
- updated podspec to point to license file - LICENSE file is now copied to the final framework on OSX and iOS
Added RealmSwiftExample
only checking for default realm instances
"added" SwiftDynamicTests
license in Swift headers
Added SwiftArrayPropertyTests
Added SwiftLinkTests
Added SwiftObjectInterfaceTests
Added SwiftMixedTests
moved all test objects to RLMTestObjects
SwiftRealmTests now match RealmTests
Moved RLMNotificationToken to its own h/m files
All methods that previously accepted variadic arguments as a predicate now only accept NSPredicate
fixed swift tests
merged swift-compatibility into this
fixed a few clang errors (unused arguments)
- documentation_url now points to real docs - target iOS 6.0 - use double quotes consistently - stdc++.6 -> c++
fix tests so that we don't ever leak objects when throwing exceptions
Update RealmPerformanceExample-Info.plist
Updated all headers to new license.
accessor fixes, namespace most RLMObject properties
Update LICENSE
Update Realm.h
removing uniq_ptr as it was causing issues with implicit transactions
Apache license proposal
indentation fixed
wrong description
realm in memory now supported
Using xcrun to find tools
test and links to asana
Setting PATH and other clean up
more tests
Remove the docket folder after compressing it
typos in exceptions
typo
Copy changelog and info files to iOS framework
Resizing tableview columns to fit table names and content.
Displaying tooltip for arrays.
Automatically expand the outline view and select the correct array node.
Modifying the text description of link and array property values.
Change description of selected arrays in outline view.
Removing "New" menu option.
Can now display content of arrays.
Version bump
initial implementation for migrations
enable TIGHTDB_ENABLE_REPLICATION
enable TIGHTDB_ENABLE_REPLICATION
fix for shared group creation
use new transaction apis
use ivar for row
merge
Renaming a few commands and introducing new commands
implemented support for deletion of objects on array
Add header path for coverage tests
Array properties can now be selected and will be added to the outline view.
Adding display nodes for array + some refactoring.
Generation of test db now works again and includes arrays.
Minor updates - instead of just commenting a pull request
Copy the headers in the OSX framework correctly
merge conflicts resolved
add added zero rows test
minor spacing fixed
minor spacing fixed
Adding Realm framework as a subproject to Visual Editor project.
Commit
added check to see if core was built in debug or release mode
don't rm -rf docs and core
added 'examples' and 'verify' commands
added shebang, usage comments, added xcmode parameter, xcodebuild is now default xcmode
change Table* accessor to TableRef
Added a few Swift tests
removed unused common_funcs
fixed compile-time issues in tests
xcode6
completely rewrote build.sh
added test-ci command to build.sh
fixed a few things
merged master
renamed swift xcode project to RealmSwift.xcodeproj
added swift example
Update Visual Editor README
make it fail - assert if accessors are attached
tune-up
ported over enumerator test from old-src
Minor source code sture modifications.
Change the text of the root node in the outline view.
Expanding the test classes/db to include array properties.
Enable coverage flags for the OSX Framework target
small fixes
rearrange framework search paths
added path to framework
Add Coverage configuration
cleanup + shared schema
added correct comment in header
added test for property types
Applying private schema property on RLMObject for obtaining objects' metadata.
Updating header search path in project.
don't double update objects unnecessarily
fix for spurious accessor update crash
make schema private
Update podspec wording for consistency with website
removed `rm -rf core` since it will never be called
- Enabled “Treat warnings as errors” - Enabled GCC_WARN_SIGN_COMPARE - Updated tests accordingly
- re-commented out RLMPropertyAttributeDeleteNever like before to remove it from docs - updated wording on exception thrown when getting a realm from a thread without a runloop
renamed schemes to what they were before
Cleaned up build system
Catch more exceptions for better error messages
Removing private headers from framework and ensure correct copying.
Added tests for predicate misuse, predicate not supported, and predicate valid use.
cleaned up the example
simple example added
Adding a simple build instruction.
Getting the project to build and run again.
Creating a better download script.
Linking performance example with Realm framework; switching C++ library
Using libc++ in example; removing user specific search path
merge
Updated to use private api for dynamic interface
Modified Xcode project so you can drag in Realm.framework
Reenabling property editing of all "basic" types (expect dates)
Removing deprecated run build phase.
Display object link correctly and enable navigating to object by double click.
Adding category for fetching the correct schema for linked RLMObject instances.
Some documentation and code cleanup.
Adding linked objects to the test database.
A bit of project cleanup.
set proper version
add download back in
bumped Realm.podspec to 0.21.0
Upate docs for 0.21.0
fixes for last two prs
Version bump
fix for fast enumeration
fix double incremented indeX
refactor description to not use fast enumeration
switch over to using tightdb::Row
merge
new link_array api, bugfix for mismatched table/tableIndex
changelog
remove unnecessary returns
minor spelling fixed.
add readonly flag, clean up exceptions
support standalone RLMArrays
Updated test and added text for skipped objects
make RLMArray initializer private
remove MAX_LIST_SIZE=4 when linking against release build
Using libc++ instead of stdlibc++.
try again
remove docs from project - fix naming inconsistency
fixes for review
update example
fix for notification handlers and tests
temporary fixes to unbreak the build again
notification token
Removing Makefiles
OS X and iOS framework wil not overwrite each other
- print the indices of items in the RLMArray in -description - only print the first 1,000 items in an RLMArray -description
Updating ignore file.
Removing binary file
added newline at end of file.
Rename schemes to simpler names
Update target names per recommendations
fix for ios build
Add versions structure to Framework
Move last script to scripts/
realm-core -> core
Change core location in gitignore
Remove build scripts from Xcode hierarchy
Update target names for readability
Rename Realm scheme to Realm-OSX for consistency
Tweak names for docs scheme+target
Point doc packages to proper URL
Do not delete docset
Make download binary target a dependency of other build iOS target
Do not download binary if folder already present
Move core download to zip build with build-objc
Remove bundle loader setting from iOS tests target
Move Scripts to scripts/ folder
use accessor classes for readonly arrays - properly separate two array implementations
added RLMArray -description and tests
isReadonly property should only use "is" in the custom getter. "is" doesn't belong in property names
update LinkView accessors
first working editable arrays
use static library when building osx framework
Updated CHANGELOG.md to reflect release 0.20.0
Removed .orig files
Ignore merge files
removed old sources.
Simplify Copyright message dialog.
define initObject test
omitting space
fast enum test case added
Adding data type tool tip to column headers.
tiny cleanup
Some minor code formatting clean-up.
Removing irrelevant menus and menu items.
Adding tool bar to window + change default size.
Change background color in the left Realm table selector pane.
Adding tooltip to date columns for full date/time view.
added alternative init to insert
Change format for date/time columns
Get bool cells (checkboxes) centre aligned.
Aligning columns based on the element types.
Bumping build number prior to internal release.
Simplified .gitignore. Remove binaries in general - we don't want any no matter their location.
implement RLMLinkArray
fix for script dependencies
Amend inline description per @alazier/@jpsim feedback
Finish rename objectClass -> objectClassName
Remove keyed subscript methods from RLMRealm
updated gitignore to ignore realm-core
made changes recommended by @alazier
Adding Appledoc target
Follow fix in core
fix header paths
make table view example work, remove workspace
only copy public headers
fix for bad path, use different dirs for debug/release in build dir
fix for linking on osx
make ios tests use framework
minor refactor of RLMObject -description.
tweak sha1sum calculation commands
fix for broken xcodeproj for osx
Adding target to download binary core
Adding an extra test table.
partial implementation of arrays of links
Adding skeleton NSWindowController
The outline is automatically expanded and the first table selected.
tidy up
init porting over to object bag
Set the appropriate SDK for the Realm target
Replace Realm path displayed in separate column with tooltip.
Adding app icons.
Minor update
Always store in iphoneos; explaining framework flow.
reworked indentation in realm.xml docset feed
added sha1 key/value to realm.xml docset feed
no longer need RLMClassNameFromAccessorClassName
Remove index entry for classes that cannot be hidden
Remove unnecessary header bars from index.
Slight task name tweaks
Updates with Ari
merge fixes
merge from master
Adding libtightdb.9 to resulting application bundle.
Change Realm lib's install path to accommodate embedding it into application bundles.
Upgrading RealmCore
Displaying date fields + disabling editing for now.
Improving test data.
Headers are now included in the framework
Reference to Realm framework changed to the parent project.
Added RLMPropertyAttributeIndexed
Minor feedback + make tests pass
default implementation for attributesForProperty
Point Dash & Xcode links to proper version
Remove Xcode 4 docs links
Clean appledoc output
updated templates with ignoredProperties
unblockify
Moved isPropertyIgnored: from RLMObject to RLMObjectSchema
fixed typo's in RLM_PREDICATE macro comment
Added description method to RLMObject
Ignore more tests
Remove guide from API docs
added test confirming transient can still be used within the object lifecycle
updated podspec to require iOS 7+, add help@realm.io, add twitter url
Added support for ignored properties
tweaked wording in template comment
fix for header
fix for jp's review comments
more tests
rename for consistency
return base className for accessor classes, proper validation of object type, re-enable dynamic tests and added test cases
removed Realm.xccheckout and added entry to .gitignore
add property validation for linked objects and fix tests
Cleaning up project file
Moving the remaining of tableview callback to new objc api
check is_null_link before getting linked object
fix for link nullification
Getting framework target to work
Update RLMUtil.h
Added method to check if RLMPropertyTypeAny object is valid
Added unit test for missing values in createInRealm:withObject:
Made validation occur at object creation instead of separate util method
removed LICENSE file and moved to inline text block
pointing documentation_url to realm.io until docs/* are accessible
Updated iterator to NSUInteger
Resolved conflicts with master
Updated iterator to use NSUInteger
Updated CHANGELOG
Added unit tests for validation NSArray and NSDictionary value types
Added implmentation for new util validation methods
Declared new util methods in header
Added validation calls
updated documentation_url
- updated podspec - added LICENSE file
add disabled test for nullification
added README.md to plugin
enable links support
Added podspec
Removed Podfile with realm core
pass old version in migration block
attempt to use query_expressions interfaces for column comparison
made changes recommended by @kneth
fixes for JP's comments
merge
fix for test failures, test cleanup
Temporarily disabling build errors.
Deleted files
Adopting Object bag API
Version bump
remembering to commit
Removed runtime import
Updated changelog
updated interfaces
Removed duplicate remove
add missing version (needed when implementing migration block)
Refactored defaultValue unit test to remove duplicate code
headers
migration interfaces
renamed tools/RealmTools to plugin/RealmPlugin
Created RealmTools project to install templates
use the protocol macro and add a comment explaining how to define the model
Added class templates
Remove default realm path at teardown
fixed issue in Xcode file templates directory
Added basic Realm model Xcode template and installation script
Added mixed unit test for default values
Added binary type test for defaults
Removed trailing space
Added log message when a commit was not done before dealloc.
Remove unnecessary files & methods from docs output
Adding target for generating an iOS framework
Minor updates to QueryTests. Removed warnings under 32bit. Removed unneeded delete of defaultRealm (now done by Testcase) Follow code style guide of max 120 chars.
Remove the docset from the html docs output
added comment
Update version number
Change cross-reference of addObject
Do not include the FIXME in the docs
Make docs generation work with the object store
re added prop. But still using ivar in methods
RLMArray using tableview as ivar not property
Get and set version with build.sh using PlistBuddy
W-I-P
removed white spaces
Revert "Revert "added sort test on mixed column""
added fix me for version handling
Revert "added sort test on mixed column"
Building binding and unit tests for iOS using downloaded core library
build framework with static version number
added sort test on mixed column
build.sh (clean,build,test) is using xcodebuild for OS X target
Reversed unneeded header include change in 2'nd previous commit
Added FIXME and asana tickets
Added default value for NSObject properties
Updated unit test to test for not implementing default values. And to test adding nil objects with no default values.
Declare initWithDefaultValues in private category
Throw exception when NSObject property has nil value. Also called initWithDefaultValues on accessorClass method to bypass default values getting set.
Added default implementation of defaultPropertyValues. Added implementation for private initWithDefaultValues to bypass default setting.
Cleaning of code a bit.
Apply rlmtype_to_string to display type names in output + updating tests.
Removed defaultValue property
Removed adding default values to RLMProperty objects
Set default values in init
Reenabling testTwoColumnComparisonQuery
Added defaultValue to RLMProperty defaultValue
Unit test for default properties
change log not release_notes
test method rename
Temporarily disabling a test case in order for test to run.
Update .gitignore
renamed src to old-src. Should be deleted once there is nothing else to reuse in the new object-store.
added class extension test case
minor updates
src -> Realm
sh build.sh build is working
resolved merge conflicts
fix for test cases
re-add and fix mixed tests, fix for warnings
update file list in fixed project
copy projct from object-store-master
Automatically display the "Open.." dialog at startup.
Avoid reopening old document windows at launch.
Separate release and debug version of realm.
Displaying bools as check buttons.
RLMDocument now only supports a single realm + correct title.
Extract the realm name from the file path
Integrating tightdb core and ObjC binding
fix table view exapmle, make release
property attribute fix, fix for header paths, fix for table view example
convert categories to utility methods - these cateogories can get stripped out when compiling for ios unless all users of our library add extra compile flags. Not using categories avoids these issues.
add category to NSString to check for overflow when converting to/from StringData, header fixes
spelling fixes and header
spelling fixes and make attributes a bitmask
enumerate all enum types instead of default
pr code review fixes
resolved merge conflicts
resolved merge conflicts
use any
Adding outline view for realm/table navigation
test formatting
bug fix for any type, re-enable test for all types
test for getting all types dynamically - fix for data types
add delete rule attributes
bugfix for missing objc type, keep objectschema on object, test property getters
fix view sort order when copying arrays
translating type enum to string
added translate method
merge and more tests
using correct top-level domain
Misuse test + a few exceptions thrown
throw for RLMArray until implemented
more cleanup
Minor whitespace updates according to coding practices
RLMRow is now history.
added misuse test
Colums in the (database) column view is now removed and added dynamically.
Cleaning up RLMIsObjectOfType a bit
Simplifying code based on review comment.
Alter exception names and some code cleanup
added newline at end of file.
Adding platform as we only support iOS
separate private headers, make schema, objectSchema, and property headers public and add property docs
change linkClass to objectClassName, code cleanup
add test for direct inheritence from RLMObject
add dynamic interface
use per realm schema and className rather than class objects for object retrieval and class lookup
fix for warnings, remove cascade
add -Wall, -Wextra, and fix all warnings which don't indicate an issue
Initial commit
clean up code a bit
Clean up and extend test suite
Adding support of the remaining operators.
wrapping
sort on float, double and string cols
Update README.md
Adding Realm Core using CocoaPods
reverting unintentional header path in XCode
Adding tests
Adding support for right-side keypath predicates.
disable link code until we are all using the new stuff
merge
change code/comment for clarity
lib search
fixed merge conflicts
indentation
merge conflicts resolved
using backingView instead of doing a query
min and max added to Date properties
resolved merge conflicts
using switch and '@' to wrap into NSNumber
Keep realm as property so we use it in every unit test.
Let’s wait a bit longer - seems to fail now and then due to time out on my slow machine.
Checking that the values are correct.
add mixed support
use accessors to insert directly when adding an object to a realm
rename RLMType to RMLPropertyTYpe, Mixed to Any, Binary to Data, fixes for commnets from pr review
method rename for clarity, comments, pr fixes, bug fixes for links
fix spelling error
create readonly and invalid accessors for objects and arrays
move accessor and class generation code to RLMAccessor
move accessor and class generation code to RLMAccessor
implement sum, avg, min, max. Adjusted tests
typo
Adding unit tests for mixed type columns
fixed copy-paste error
tidy up a bit
added init tests
enabled more tests
Converted table_typed test to ObjectsTest
Update build.sh
Update build.sh
Micro update of error message in build.sh
Split long lines in TableViewExample.
enable links for testing
partial support for links
partial links support
add test case for no results
minimize query copying
fix for bad query destructor gettig called - gets around issues in core which should probably be fied
fix test target and add DerivedData to .gitignore
fix broken test, make tableviewexample crash so other people can take a look
remove garbage files
example cleanup, try sorting by date
Adding a number of new folders and files to dist-copy
more simple
looping through all example folders
updated test-examples in build.sh
change return type in private header
resolved merge conflicts
more simple
Revert Realm.xccheckout to the previous commit
looping through all example folders
updated test-examples in build.sh
build job added to ci-test
schema renamed
removed unused test files
added simple example
Make the schemas shared in order to be able to build the project with command line tools
catch core not found, return NSNotFound
add tests for delete (fail to do non-updatin accessor)
semi-working delete - existing accessors need to be updated
move inline function to fix linking error when buildng release
add ios static lib, ios tests, and make workspace for demo project
track all accessors
hook up array query - disable until we figure out retainment issue
hook up queries
Don’t fail if directory exists
Update gitignore
Version output into a single folder
Remove duplicate appledoc arg
Move Dash artifacts to docs/docset/publish/
renamed release_notes.md to CHANGELOG.md in Xcode
Update README.md
Use a specific version of appledoc
Install the documentation and improve the README
Test docs in pull requests
Add the docset package url in the docs generation
Removed "### Internals" section.
proof of concept
Generate tgz and xml files for Dash
Ignore useless appledoc warnings, raise threshold to 1
Move h2’s back to h3’s for readability
Update release_notes to CHANGELOG
Added links to docset tools and appledoc dependency.
Removed redundancy in .gitignore
Address @kneth’s feedback
Add docs README
Move source docs to docs/source/
Make docs links appear/disappear with CSS
add missing realm property
Add build.sh clean and build to ci-test
initial fixes based on feedback
Removing examples folder from top Makefile
Minor cosmetic changes based on review.
Add links to Xcode and dash in the html docs
Consider spaces in more places
Allow spaces in paths for the package-examples target
Remove the need to run the vi-test target as root
files for review
delete
files for review
deleting old file so we can see entire file for review
Updating release note
Adding test cases for NOT operator
Adding handling of not (negation) predicates.
Adding skeleton support for NOT operator in predicates.
Package the examples as self-contained zip files
Adjusting release note entry.
Adjusting comments.
Adding new methods to release note
Ignore appledoc output
Generate docset format
Increase the appledoc threshold to 2 in order not to fail on warnings
Add Google Analytics to the docs html templates
minor typo "onto" -> "on to"
fixed issue in RealmPerformanceExample where xib's weren't found when running the app
Added suffixes for clarity
Renamed methods for distinction for set_row methods
Getting rid of warnings
Updated release notes
added to ci-test
Included copyrights in headers
removed local reference + files from lib
added and renamed RealmPerformanceExample
Adopting new table creation api in unit tests.
A fix of the subtable bug
More unit tests to hunt down the subtable bug
Adding test for JSON string generation on table views.
Optimizing JSON tests a bit.
Adding JSON serialisation to the RLMView
Adding JSON generation support to Tables
Corrections
Unit test - empty subtable in typed table
Adding comments.
Add the docs template to the repo
Using NSString instead of char *
Increased async test timeouts
re-added (and simplified) background add
removed mention of ci-clean from README and fixed some typos
- moved doc/ to docs/ - `sh build.sh docs` now outputs to `docs/html` instead of `doc/appledocs/html` - updated .gitignore
cleaned up doc/ dir
updated README.md
removed README.linux since it's not something we want to support at launch
added tests to demonstrate crash when an RLMRow subclass contains both a mixed property and a subtable property
Adding unit test for JSON serialization on Realm
Adding simple JSON serialization to Realm
add query validate check
test/Makefile: Do not include headers in SOURCES
Must use anonymous namespace for stuff that is private to a translation unit
test/Makefile: Do not include headers in SOURCES
Adding unit test to hunt a bug
Document the changes
Don't build for OS X
Resolving RLMTypes to string
Removed the building of RefDocExamples and made the script exit on any failure.
- refactored and removed BG Add feature from RealmTableViewExample
Removed PrivateHelperMacros, PrivateTableMacros & RLMPrivateTableMacrosFast
moved group_misc_2 to object interface
moved tutorial.m test to object interface
moved query.m tests to object interface
moved mixed.m tests to object interface
typos
udpated notification doc
typos
moved shared_group tests to object interface
updated docs
Casting age and value
Integer casts
Made NSInteger casts
Casted macro on testVersionGetters
deduplicate nspredicate from varag code by using macro
Removed duplicate RLMRealm accessor method from RLMTestCase
moved group.m tests to object interface
moved get_subtable test to object interface
merge from master
remove merge garbage file
send notification when starting a write transaction requires a refresh
Removed reference examples
use transaction mode instead of inReadTransaction and inWriteTransaction
fix example to not block
remove unneeded header file
comment and fix for test
commented out unused function
commiting cheetah generated version of PrivateTableMacros.h
Updated comments in RealmTableViewExample
Removed /**/ for Realm.xcodeproj
merge latest from master
Added inverse between tests
removed redundant casts in query_util (floatValue, doubleValue and intValue)
remove merge file
added mixed support to object interface
moved most functions in query_util to an anonymous namespace
- prefixed predicate_exception() and validated_column_index() with “RLM_” - RLM_predicate_exception() and RLM_validated_column_index() are no longer “inline”
Changed minInProperty:where: and maxInProperty:where: to minOfProperty:where: and maxOfProperty:where:
Renamed all new methods and properties to call property instead of columnName
abandon -> rollback
Require sudo or root to ci-test
fixes for style and namespace issues
Use absolute path for the installation folder
TIGHTDB_CONFIG -> REALM_CONFIG
Actually use the right folder
Version control the CI scripts for pull requests
fixes for examples - would be really nice if I could verify a build without submitting to jenkins
try casting ConstTableRef to fix jenkins warning
hopeful fix for warning only seen on jenkins
add back in realm to realm notifications
remove disabled code, namespace c++ function
Migrated functional.m tests from table macro to object interface
Started migrating tests from macro tables to object interface
code cleanup and disable implicit commit
update examples to use Realm instead of TransactionManager
fix for test warnings
remove transaction manager from makefile
commit transaction implicitly if not already done so at autoreleasepool purge
No more merge conflicts :)
typedef block types
fix for warning
add docs, and expose refresh method
missing project file
Remove transaction manager, block based notifications
examples/README.md -> examples/RealmTableViewExample/README.md
Renamed TableViewExample to RealmTableViewExample
fixme for realm identification by path
add docs for disappearing/reappearing constructor
add throttling for fast background commits, fixed FIXME
change realm file name for gitignore
add error argument and add FIXME for when adding mac support
fixed merge hell except refdoc
fix for test case
add support for multiple run-loops - throw exception on error during initialization
Added support for optional format va_list to firstWhere: and allWhere: methods
Doc updates for aggregate queries
get rid of timer before updating realm on main thread - update immediately when writes are made on main thread
Moved query/predicate functionality to query_util.mm and removed RLMTable+Predicates category
updated method to use renamed method
Update release_notes.md
Added unit test and implememntnation for maxInColumn:where:
Updated per Mortens finds
Updated example code
added AND and OR predicate tests
Added minInColumn:where: implementation and unit test
Moved RLMTable predicate functionality to a separate file (category)
Added implementation and unit test for averaheOfColumn:where:
Updated unit test
Updated releast notes
Aded typed table test for sum
Working on unit test
Finished implementation for sumOfColumn and unit test for dynamic table. Need to add unit test for typed table.
Added typed table test for countWhere
Added countWhere: implementation and unit test
Improved between implementation
updated TableViewExample to use RLMTransactionManager
Updated testRowDescription to use RLMTransactionManager
- removed ImplicitTransactionsDemo - renamed Demo to TableViewExample - updated examples/README.md
Added support for BETWEEN predicates on int/float/double types
Changed where: to allWhere:
Renamed find: to firstWhere:
Support BETWEEN predicate operation type on NSDate's
Changed parameter name to predicate
Consolidated `addColumnWithName:type:error:` with `addColumnWithName:type:` (throws exception if read-only)
updated context references in doc/index.md and RLMTable.h to transaction manager
updated doc/index.md
Renamed RLMDemo->Demo
- Updated RLMDemo to reflect the new doc changes - Added a README to RLMDemo - Updated the RLMDemo screenshot
added running missing refdoc examples
typo fix in tutorial text
Added predicate support for NSData
Amend per PR feedback
Minor tweaks
Updated to use realmWithDefaultPersistenceAndInitBlock
Removed ex_objc_table_dyn_table_init_with_columns() implmentation. Changed ex_objc_context_intro to use default context. Added ex_objc_table_dyn_table_sizes() to main
Update release_notes.md
Changed testPredicate: to use for loop instead of enumerateObjectsUsingBlock because Jenkins gives warning about unused variable.
Improved testRowDescription
addColumnWithName and variant methods now return col index
Added basic `description` to RLMRow
Changed testPredicate: to use for loop instead of enumerateObjectsUsingBlock because Jenkins gives warning about unused variable.
Refactored example code to not use alloc init
Removed init for new typed interface
- renamed defaultManager to managerForDefaultRealm - renamed managerWithPath: to managerForRealmWithPath:
Add logo to docs index
Add appledoc index page with examples
Add appledocs for RLMRow
Add appledocs for RLMView, consistency tweaks to RLMTable
Appledoc improvements on RLMRealm and RLMContext
Add appledocs for RLMTable
Hide more classes from the docs
Change comment syntax to add code samples
Prevent private methods from seeping into the appledocs
Added '.'
Update all headers to JP’s format
Add files to ignore for appledoc
Initial example of appledoc headers
*stop parameter must be used
updated the tutorial to refer to RLMContext and to introduce contexts before realms
comment tweak
Refactored predicate tests to use helper method
removed unused @@example@@ tag in RLMDemo
Reverted tutorial to pseudo-markdown format required with the lovely documentation system
- fixed string predicates: begins_with, ends_with, contains, not equal - added support for NSCaseInsensitivePredicateOption on string predicates - added tests for string predicates - throws if using NSDiacriticInsensitivePredicateOption on string predicates
- Completely rewrote the tutorial - Tweaked RLMDemo
Simplified the example code by extracting title and date generation
- checked->date - cell subtitles instead of accessories - added background add method and button - added long-press gesture to delete all rows
comment tweak
Tweaks to tutorial
sp /the access/be accessed/
Migrated RLMDemo to use the new schema functionality
Renamed RLMContext to RLMTransactionManager
Added asterik to ignore .o and .d files with generated suffixes
Sped up asynchronous tests
util.mm now calls [[RLMTable alloc] _initRaw] instead of init
Clean up realm test path after tests are run
All tests now create tables from a realm rather than directly alloc/init
Renamed findFirstWhere: back to find:
Refactored dynamic_table.mm tests to create RLMTable’s from a RLMRealm
Changed find to be findFirstWhere and return an RLMRow
no longer use RLMTable init directly in enumerator.m test
add assert and change init method
Removed initLocal
finish hooking up custom getters/setters, tests, dangling bug fix
code cleanup/reorg, partial support for custom getters/setters
Removed tests for deprecated RLMTable methods: “setIndex:”, “hasIndex:”, “countWithIntColumn:” and many others
- re-added dynamic_table tests to Xcode project - (style) fixed alignment in data_type tests - re-added and fixed testAppendRowWithLabelsDateColumn tests
convert over completely to blocks
testing out using imp_implementationWithBlock
Update release_notes.md
Added XCTAsserts to enumerator.m
updated release_notes
another day, another merge
Removed #define
fixes for JPs comments
doc fixes
doc fix
doc fixes and selector rename
fix for return type of find
- reuse existing context ("group") when constructing RLMRealm with initBlock: - remove references to rollback in initBlock documentation - add isEmpty check to the examples - added initBlock variant of the many-argument RLMRealm constructor - added test for initBlock when called from non-main thread - fixed test for many-argument RLMRealm constructor on a non-main thread
merge attempt #3 - success
Adding initLocal to typed table implementation because user will not be able to access unless they import RLMLocal. Which is not exposed in the first place
Working on solution for initLocal on typed tables
use optimized string getter
more test fixes, typed initializer for macro tables
Added writable initializer block to Realm constructors
put object type in macro static assert, hopeful fix for tests
nicer message when using impl macro in header
spelling fix in macro
Changed initialization to _initRaw
Added file references
Replaced init with initLocak
Removed init from public interface and throwing exception on init
Added init methods for unit test initialization outside of context
Removed init for typed tables to make them default to RLMTable implementation
New Local category files
split up macro into definition/implementation
initial documentatino for RLMRow
add tests for c/c++ bool and alternate int types
eneable keyed subscripting and test with new macro
Corrected file reference for RLMTableFast.h
new/old macro to support dot syntax accessors
code style/comment fixes
Reverting links and fixing code snippets
Updated release note
Renaming TIGHTDB to REALM in a few more places
Version bump
Updated release note. Added it to the Xcode project to make it easily available and visible :-)
Renamed some TightDB references in the RLMDemo.
Updated comment
remove no longer needed code
throw for invalid types, tests, better macro name
custom accessors for NSString, code cleanup
Removed importing RLMTransaction
proper support for BOOL, dynamic setter for subtables, support for all row accessors
Removed leftover import
Removed unused variable warnings
Updated tutorial to not use old where method
Updated example code to use predicate interface
spelling
unsigned int -> NSUInteger
Commented out documentation for where
Removed comments
Removed Cheetah comments
unsigned int for column index
- Moved Xcode project to root of repo and renamed to Realm.xcodeproj - Removed hardcoded jp path from RLMDemo
Added where for RLMViews, typed and dynamic RLMTables in Fast categories and macros
fallback to dynamic lookup when surpassing column limit - detailed comments on template function generation
Share the stupid RLMDemo scheme
atomic -> nonatomic
code review fixes
Minor tweak to comment
specify that RLMRealm's can only be created on the main thread (unless you know what you're doing)
- renamed _hasParentContext to (!) _usesImplicitTransactions - +realmWithDefaultPersistence and +realmWithPersistenceToFile: throw an exception when called from a thread other than the main thread - -hasTableWithName:withTableClass: no longer creates a table - tests were added to confirm these changes stay permanent
updated doc and release notes
merge latest from master
only support objects which derive from RLMRow
Moved where from RLMTable typed interface into RLMPrivateTableMacrosFast
Updated tutorial
Simplified iOSTutorial Xcode project and beautified simple_search example
updated ref docs for RLMRealm
Updated copyright
Removed copyright
Updated example files (as reported by Jenkins)
Updated ref and release note
Casting for picky test framework (only needed in older versions of Xcode)
updated ImplicitTransactionsDemo
Use optional argument to request rollback in write transactions
fixed more issues with iOSTutorial
Moved setter for variable
Removed optimize method from documentation
Updated import to use optimize on RLMTableFast
Added documentation for objectAtIndexedSubscript: and objectForKeyedSubscript:
no need to remove .realm.lock file
Removed optimize from RLMTable interface and moved it to RLMTableFast. Need to import RLMTableFast to test cases that use optimize method
ex_objc_smart_context_intro -> ex_objc_realm_intro and updated it
Updated documentation for insertRow:atIndex: and renamed setRow:atIndex: to updateRow:atIndex:
Renamed methods to make it more clear that an update operation is being performed.
Updated unit tests and setter methods to be consistent with an `update` model instead of a `set` model. We will need to refactor those methods in a separate PR.
Updated examples in doc/ref/examples
Updated all tests to subclass RLMTestClass where a test realm file is removed from disk before every test. All test contexts and realms use the same test path.
Added documentation for indexed subscript
Added objc_dyn_table_set_object
Added setRow:atIndex: documentation
Added documentation for dyn_table_ref
moved method braces to newlines in RLMRealm
Replaced all size_t variables in tests to NSUInteger
changed references to “read/write realm” to transaction
updated release_notes.md
These unit tests seems to fail now and then due to floating point precision
startsWith is implemented for binary/nsdata
- removed group.h since it was no longer used - updated unit tests since group.h was removed - fixed issues with read only flag of tables caused by the transaction/smart-context merge - simplified tableWithName: and tableWithName:asTableClass: methods
- renamed TDBPrivateWeakTableReference to RLM… - added tableWithName:asTableClass: support to RLMRealm when _hasParentContext is NO
Renamed all “group” references to “realm”
- Consolidated RLMSmartContext and RLMTransaction into RLMRealm - Updated most “group” references to “realm” (remaining changes incoming)
fix for recursion bug when specifying a bad subtable without an object type
protocol method rename
remove @dynamic from tests
dangling rename schema->objectDescriptor
more code review fixes
fixes for review comments from JP and Alex
Changed previous rowCount to NSUInteger
removed dynamic_table.mm from test target to see if ci passes
Added keyed subscripting for Typed Tables
Added comment-based documentation for the tutorial.m
Made lookup changes per Alex comments
Re-added dynamic_table.mm
rename
Changed of TestObject declaration
Updated prefix for XCTest classes
fix for compiler warning
fix for compiler warnings
Updated release notes
Updated objectForKeyedSubscript: to use core lookup method instead of RLMQuery.
merge tdb->rlm changes
Updated as many of the TightDB references to Realm in doc/* as possible
Added smart context documentation and example. Also fixed an issue with ex_objc_context_intro example
Added setter tests to typed table
Finished unit test for dynamic_table keyed subscripting
fixed test case
Working on setObject:forKeyedSubscript unit tests.
Working on setRow:atIndex: and setObjectForKeyedSubscript: implementation. Added out_of_bounds exception for objectAtIndexedSubscript:. Added FIXME to remove duplicate code in setObject:atIndexedSubscript:.
Added new method called setRow:(NSObject *)anObject atIndex:(NSUInteger)rowIndex. This is used by setObject:forKeyedSubscript:. Still need to write unit tests.
Added keyed subscripting for RLMTable with unit tests for typed and dynamic tables
removed fiel's hardcoded objc path from RefDocExamples's FRAMEWORK_SEARCH_PATHS
minor tweak to RLMDemo
libtightdb-objc -> librealm-objc
build.sh: renamed more local bash variables from tightdb_* to realm_*
build.sh: renamed tightdb_config_dbg_cmd to realm_config_dbg_cmd
build.sh: renamed tightdb_config_cmd to realm_config_cmd
build.sh & project.mk: renamed TIGHTDB_LDFLAGS_* to REALM_LDFLAGS_*
build.sh & project.mk: renamed TIGHTDB_CFLAGS_* to REALM_CFLAGS_*
build.sh: changed TIGHTDB_VERSION to REALM_VERSION
renamed common_funcs from tightdb_* to realm_*
Replaced TIGHTDB_IPHONE_CORE_LIB with REALM_IPHONE_CORE_LIB since it's not referenced in either TightDB Core or Docs
minor style change: align ='s
Renamed TIGHTDB_OBJC_HOME and TIGHTDB_CONFIG to REALM_* in build.sh and README's
Replaced usage of TightDB with Realm in README & build.sh error messages
Renamed everything in TightDbObjcDyn to RealmObjcDyn
Updated context_ref.yaml
Updated dyn_query_ref.yaml
Updated dyn_table_ref.yaml
Updated dyn_view_ref.yaml
Updated reference.yaml
Updated transaction_ref.yaml
Updated typed_query_ref.yaml
Updated typed_table_ref.yaml
Updated typed_view_ref.yaml
Updated template.md
- added tests for TDBSmartContext (also had to include XCTestCase+AsyncTesting) - fixed issue with TDBSmartContext.h where TDBTable was referenced but not declared
Removed SenTestingKit from linked frameworks and set Tests target's "Wrapper Extension" from octest to xctest to allow testing from Xcode
made tableWithName:asTableClass: look a lot more like tableWithName:
- renamed RLMTitles to RLMDemoTable - added a checked Bool column to RLMDemoTable - now using tableWithName:asTableClass: method on TDBSmartContext - now displays a checkmark on even row numbers (backed by the checked BOOL column)
Added -tableWithName:asTableClass: to TDBSmartContext
Ignoring persistence files for realm
Updated import/include renames in build.sh
Renamed TightdbError
Updated exception prefixes
Updated exception messages
Changed file extension to .realm
Changed missing TIGHTDB_DEBUG macros
Updated macro in example code
Updated directory references in build.sh and Makefile
update RLMDemo to use the new +contextWithDefaultPersistence and -isEmpty methods
Changed source path from tightdb/objc to realm/objs
Updated example code with new macros
documented TDBTransaction -isEmpty method
Added +contextWithDefaultPersistence to TDBSmartContext
Renamed make_tightdb_error
added isEmpty BOOL property to TDBTransaction as requested here: https://app.asana.com/0/861870036984/11732977760858/f
Renamed TDBAccessor
Renamed util macros
updated RLMDemo to use a typed table instead of a dynamic one
Updated Table macros
- fixed potential race condition when creating table - keep a strong reference to self.table property and lazily instantiate it - align ='s
Replaced TIGHTDB from PrivateHelperMacros
Updated release_notes.md
Added `IGNORED: ""` under empty keys to make ref_generator work
linked Tightdb.framework to ../../, minor tweaks to the RLMDemo code
Adding libstdc++.6.dylib and Realm.framework to TightdbTutorial project
Renamed PrivateRLM method prefixes
minor changes to remove redundant code
Renamed PrivateTDB and Updated iOS Tutorial Project
Added Realm.framework to RefDocExamples project
Updated missing example with correct framework import
Updated build.sh set-version mode to reference RLMVersion.h
Move from dispatch_after to TDBContextDidChangeNotification to update the tableview
Updated import statements in examples to reference Realm framework
Updated build.sh to reference RLMVersion.h and updated ios-framework mode to create Realm.framework and realm-ios-*.zip.
Update .gitignore to ignore Realm.framework and zip
Updated examples with renamed classes
Renamed TDBColumnProxy
Removed TDBBinary forward declartion
Renamed Tightdb.h to Realm.h
Renamed TDBSmartContext to RLMSmartContext
Added RLMFast to Makefile
Renamed TDBContext to RLMContext
Renamed TDBReadBlock and TDBWriteBlock
Renamed TDBFast
Updated examples with renamed classes. Will need to re-visit this.
Renamed TDBView
Renamed TDBVersion
Updated import statement for test
Updated Makefile for renamed files
Renamed TDBType and TDBSortOrder. Also used NS_ENUM for enum declarations.
Renamed TDBTransaction_noinst
Renamed TDBTransaction
Renamed TDBTable
updated project to use implicit transactions
Added missing renames for TDBRow
Renamed TDBRow
Renamed TDBQueryFast
Renamed TDBQueryFast
Renamed TDBQuery_noinst.h
Renamed macros referencing TDBDescriptor
Renamed TDBQuery
Replaced TightdbTutorial with RLMDemo, WIP because the documentation comments haven't been added
Renamed TDBDescriptor_noinst.h
Renamed RLMConstants
Renamed TDBDescriptor
Initial Commit
Renamed TDBContectDidChangeNotification
Renamed category and methods for NSData+TDBGetBinaryData
Added gitignore for AppCode directories
Unit tests in `testAppendRowWithLabelsDateColumn` have been commented out because they fail for obvious reasons
Updated test cases to use XCTAssert. However Test are failing independently of these changes.
@kspangsege Updated TightDbObjcDynTests target to include XCTest.framework instead of SenTestingKit.framework
Updated call to throw exception from using raise to using @throw
Updated test table schema
Updated release notes for new method
Added unit test for createTableWithName:columns:
NOTE: Doesn't execute yet - link error.
some renaming, and linking with proper c++ lib
Moving categories around
Updates due to feedback
prepare for next release_notes
min cleanups
Updates
files relative to project
Change build setup
Making clear how to split class interface and implementation in typed interface
Updates due to feedback
Renamed methods to where Added find method Allow both string and NSPredicate as condition
Updating typed view ref doc
Updating typed query ref doc
Updates to typed interface
Get rid of some superfluous white space
ref doc
added to release_notes
Examples can build again
Updates for dynamic view
renamed to contextWithDefaultPersistence
Updating dynamic query API ref
resolved wrong merge
include smart context in xcode
Update refdoc
support for descending sort. Sort on date, bool, int
Updates of dyn. table API ref
Version bump
Use libstdc++.6 instead of libstdc++.6.0.9
Use libstdc++.6.0.9 for tutorial
Revert "Choose libstdc++ in build settings for doc examples"
Use libstdc++.6.0.9 for doc examples
Choose libstdc++ in build settings for doc examples
Revert "Use IPHONEOS_DEPLOYMENT_TARGET = 5.1 for doc examples"
Use IPHONEOS_DEPLOYMENT_TARGET = 5.1 for doc examples
Use libstdc++ for doc examples
Add -mios-version-min=5.0 when compiling for iOS to reflect the equivalent recent change in the core library
Prefix ivar names with `_`
Added new method to specify schema when creating a table from a TDBTransaction. This method is useful for adding subtables.
assert when calling verify_object_is_type on unsupported object type
more fixes for refdoc
Update dyn_table_ref.yaml
Disabled debug NSLog messages in dealloc. Don't think it's used anymore by anyone.
remove swap file
hopeful fixes for docs
bug fix for nil predicate and tests for sort
fix for last compiler warning
fixes for compiler warnings
add OR support
support other expression types, cleanup/refactor
initial predicate functionality
Updating ImplicitTransactionsDemo due to recent changing in binding
Use `userInfo:nil` when throwing
refdoc updated
added defaultPath helper method
includes Persisted in methods names
indentation
revert xcode project changes
refdoc updated
relase note + renamed contextWithPersistenceToFile
default path on context
deleted moved example files
Rewrite of a unit test which fails sometimes
updated refdoc
fixes due to code review
Adding TDBQueryFast.h
minor updates
New convenience constructor for TDBSmartContext. Introucing TDBConstants.h for string constants such as TDBContextdidChangeNotification.
Mention `TDBSmartContext` in `release_notes.md`
small tweaks
remove rows now check for readonly
refdoc and release notes updated
tutorial updated
updated refdoc
deleted example
updated to usingBlock
where on view
fixing dates
fixed merge conflicts
removed HEAD
 merge conflicts
a proper path for test-core
migrating to xctest
Don't use tabs
changed libstdc++ to libc++
Using NSObject derived classes in addRow, insertRow and entire row update
exception when adding row read transaction
Apperently, XCTest is broken
resolved conflicts
include XCTest instead of SenTestingKit
remove unnecessary file
migrating to xctest
Get rid of unused ivar
Stay away from lines longer than 100
a few more nils
A bit of cleanup for: Version 1 of 'implicit transactions' + iPhone demo app (iOS 5.1, Xcode 4.4)
Version 1 of 'implicit transactions' + iPhone demo app (iOS 5.1, Xcode 4.4)
userInfo nil
updating ref doc example
refdoc and release_notes updated
addRow and insertRow do not return any value.
updated release note
Renamed `castClass` to `castToTytpedTableClass` in TDBTable. Updated some comments in TDBTable Minor internal renaming in TDBRow
using @throw for exceptions and better alignment
return void instead of bool
minor updates
cleanup
Removing old files
no use for old file
An Objective C specific template
added comment
conlficts resolved
merge conflicts resolved
zero rows test case added
all size_t have been replaced by NSUInteger
Updating API doc
Query enumerator should work for the case with no condition
more updates of refdoc examples
min + max added and moved
Updating to NSNotFound
sum merged and moved
Additional unit tests
merge avg methods nu NSNUmber + moved old to fast interface
rename
shorter name
checking find_first calls
merge conflicts resolved
tdb prefix to refdoc classes
fixed example
typo
Identifying a number of not_found
refdoc fixed
typed interface updated with between
fixed tests
test case added
Enable some columnless unit tests.
Making files relative to project
Removing release notes from XCode project
merge conflicts resolved
test reenabled
ref doc + release_notes
merge conflicts resolved
release notes
ref doc + test case
Manual merge of release notes
removed and from argument names. Now using no argument name
added cheetah file to Xcode
The validation of data for Mixed typed columns has been very relaxed (“everything goes”). This is an attempt to restrict what the user can use as values.
noinst in noinst categories
small fixes
Updating API doc examples
Updating documentation
refdoc updated
rename column added to table. + release notes updated
Non-capital letters in typed table column names
distinct added to table
between in query added + test cases reenabled
Removing obsolete note about column names
added bug note
sorted files by name
removed unused supporting files
Updating of release notes template
Updated ref-doc examples
Removed references to refdoc in project.
test-iphone removed (moved to examples repo)
merge conflicts resolved
fixed merge conflicts
Up to date with newest changes in master
release not merge conflicts resolved
Document how TightDB types and Cocoa classes are mapped
release note description added
obvious fixes
small fixes
Fast getters and setters moved from `TDBRow` to `TDBRowFast`
Using subscription as unified getter and setter
Version bump
Added max/min for Date columns
It seems that setting a timestamp in a date column is done wrong.
Using utility predicates to test type of objects
missing tutorial updated
moved util methods to header
better comparison
nsnumber os bool check
Prefixing with TDB
ref doc updated
examples and changes updated
Methods renamed
Type conversion as properties
removed getting started mini tutorial
More cleanup
Minor style fixes
Schema -> Columns
Hiding type conversion for numbers
Mixed unit tests
moved private row methods to private header
made isReadOnly private
Renamed protocol to TDBView
simple renameíng of some variables (for consistency)
Update release_notes.md
Additional unit tests
release notes updated
merge conflicts resolved
renamed to release_notes.md
examples and ref doc
column renames
Initial implementation of generic set and get for rows
wrong template version
fixes
changes.txt
fixes in examples
A few updates
The installation test is now very simple
Move utility functions to util.mm
Adding missing break
renamed gettable
moved to private header
Raise exception on invalid schema
Updated changes.txt
Minor changes from review feedback
Working on Subtables
update to changes.txt
Experimental feature
changes.txt
changes.txt
renamed some selectors due to merge
Use all parameters
Updating documentation
tests and exceptions
Test cases
initial method calls
Updates due to PR feedback
text update
Object subscripting in Views
cleanup
Updating unit tests
fixed ref doc
removed insertEmptyRow from table
Removing even more TDBMixed
example updated
last methods
TDBMixed has been removed
more correct pre_fixes
prefix_
wrong import fixed
renamed _priv headers to _noinst
with capital T
first commit
renamed helper macros
rearranging
extra line
updated iPhone test
ref doc
examples and ref doc updated
remove withError
Using @encoding instead of raw characters
dynamic.mm
second move
first move
correct headers
changes txt + headers updated
merge conflits resolved
test cases updated
tutorial updated
initial rename
merge conflicts resolved
changes txt updated
using created var
Going to property
ref fox updated
Use tdbBinaryData
Upgrade `generic.mk` to latest version from core repo
removed newlines
conflicts resolved
small fixes
Replacing a few missing NSData to BinaryData conversions
iPhone example reenabled
changes.txt updated
ref doc updated
writeContextToFile public in transaction
clean up
Adding a categoty to NSData in order to simplify code
examples updated
updated exceptions
test cases updated
build.sh: Avoid `!` in quoted strings in shell scripts, since they will be interpreted as history substitutions by Bash
Added new protocol header to build script
Added a shared protocol for View and Table
Added dynamic table creation with schema (very limited error handling yet)
Added support for transactions on named tables
changes and examples updated
table methods fixes and updates
test cases added
a few updates
Updating API doc; using NSData instead of TDBBinary
small tweaks
Updating unit test to use NSData instead of TDBBinary
splitter getTable and createTable
TDBBinary has been removed; NSData is used all over
changes txt updated
updated examples
ref doc updated
ref doc updated
examples and ref doc updated
Updating changes.txt
API doc reference examples
contructor renamed to contextWithPersistenceToFile:
test case added
Removing underscore from typed table's generated classes
Changed comment style to single line comments (looks more modern)
Initial reordering of selectors in TDBContext and TDBTable
verify method removed from table
test case added
init change
subtable and parent now return TDBQuery *
test case added
updating due to feedback
version.h is renamed to TDBVersion.h
Updating unit tests to match renamed files
Changing imports to match renames
premature rename
Renaming shared group and group. The description of the new classes is updated.
Version bump
added findFirstRow and rename
merge conflicts resolved
typing error
Updating documentation due to renaming
remove where and optimise error selector versions
reenabled test cases for dates
merge conflicts resolved
conflicts resolved
removed reference to Kneth
merge conflicts resvoled
fixed test cases
One class per file.
resolved changes txt
ref doc updated
renamed initWithFile on context
merge conflicts resolved
moved write to buffer and file to group.h
Sharing scheme for doc examples.
moved write to buffer and file back into transaction.h
fixed tutorial to use Row instead of Cursor
fixed example to use Row instead of Cursor in typed interface
renamed SharedGroup to Context
sorted classes
merge conflicts resolved
removed spaces
removal of selectors form Transaction into temp group.h
build.sh: Pay attanetion to existing contents of `DYLD_LIBRARY_PATH` when testing
example updated
mini tutorial updated
renamed group files to transition
rename of TDBGroup to TDBTransaction
removed countEnumerator from headers
The examples are now working with Xcode and iOS. It is possible to compile at the command line using “xcodebuild build -scheme RefDocExamples CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO”.
renamed cursor to row
Revert "Revert "initial usage of NSDate""
refdoc updated
resolved merge conflicts
changes.txt
code standard + new appendRow
Upgrade `generic.mk` to latest version from core repo
removed error from group
changes txt
lastRow + firstRow on view and return nil on table if empty
Revert "initial usage of NSDate"
initial usage of NSDate
The two first examples.
changes txt
[group getTableWithName:] added
removed unused Xcode project
updated tutorial
Removed use of size_t from tutorial
Updated tutorial with latest syntax improvements
Small fixes
removeRows in query
sum, min, max, avg
Updated dynamic table to reflect the new names
more fixes
fixed names in ref doc query
.git ignore updated
hasChanged implemented + test cases
more in query
query equal to and not equal to
renamed ref doc selectors for view
Using NSDictionary in example.
ref doc old import
macro now used NSUInteger instead of size_t as arguments
ref doc updated
ref doc updated
removed absolute path
created Xcode project to handle ref doc using framework
tutorial updated
test example updated
mini tutorial updated
updated build.sh to use VERSION
Version -> VERSION
Sort order enum using TDB prefix
test cases updated
Column types using TDB prefix
merge issues resolved
using tdb for version in build-sh
Making unit tests more readable.
Renaming TightdbType to TDBType
Making unit tests more readable.
test cases fixed
version constants using TDB prefix
small fixes
Query TDB prefix
binary using TDB prefix
descriptor and group using TDB prefix
readied removed method
merge conflicts reselved
changes.txt
Adding setObject to TightdbTable (t[2] = @[@1, @Hello] is possible).
__unsafe_unretained added where missing
tutorials updated
renaming colNdx to colIndex
__unsafe_unretained added
nonatomic properties
descriptor updated
latest changes implemented
renamed rest of query
minimum -> min etc
tutorial updated
iPhone test performance updated
update mini tutorial
Renaming to insertObject
rename of tightdbtable to TDBTable
last test cases
keep going....
more test cases fixed
more tests fixed
more tests fixed
a few test cases fixed
table macros fixed
Extending insertRow to accept NSOBject as optional parameter
more selectors
find selectors in table renamed
getters and setters + more in table
view implemented
Version bump
Removing appendRowWithLabels by adding NSDictionary support in appendRow
round 2
Unit test for appendRowWithLabels and Mixed column
query implemented round 1
changes implemented iteration
return types equal to column types
column and descriptor selectors changed
fixed typos
Added object subscripting on cursors
TDB prefix
merge issues resolved
rename of cursor to row + method names
group renamed
added missing place
query renaming
view renamed
reenabled test case
table rename suggestion
Adding appendRowWithLabels to TightdbTable
Make the Xcode scheme shared
updated mini tutorial to deal with NSUInteger
removed warning. Implementation now also uses NSUInteger
removed warnings for table
Disable failing unit tests related to column less tables.
fixes in Xcode project files to include
conflicts resolved
test case type mismatch fixed + added files to project
Adding support.{h,mm}, version.h and version_objc.mm to Xcode project. Using system’s default compiler instead of GNU C++ compiler.
merge conflicts resolved
more method return types changed
Remove data file when initializing app
more size_t to NSUInteger
using NSUInteger in query as well + adjusted test cases
mini-tutorial is using appendRow
group using NSUInteger
more size_t converted to NSUInteger
init change size_t to NSUInteger
make sure test gets run => Start method name with test
Removing a deprecated test.
ignore readonly test
Delete readonlyTest.tightdb
include table_view test in Makefile + sorted make files sources alphabetic
Version bump
iOS tutorial uses the new appendRow.
resolved merge conflicts
documenting appendRow
resolved merge conflicts
using libc++ in getting started example
using libc++ in example
removed public setReadOnly method
adding NSData support in appendRow
adding NSDate support in appendRow
Added support for using object subscripting (bracket syntax to access rows) on table.
removed clear with error object
included same test in table read transaction
Restoring tutorial
added read-only flag to view and test case
appendRow: Support binary in mixed columns
bugfixing
typo
added remove column method on table
WTF: @YES and @NO are chars
should not segfault anymore
A couple more type-checking tests.
Check if array has the correct number of elements
Expected, not excepted.
Reorganising
remove usr/lib for header search path
smaller text
missing space
method for determining path to put shared group
Adding partial support for Mixed in appendRow
removed unused @class import in query.h
changes.txt
test case added for table view get column count
added getColumnCount on view as well as check if col index is valid when getting type of col
surrounded m_view->sort with try catch
added test case for date columns as well on tableview sort
changes.txt update
added sort on view and getColumnType on view
Subtable support in appendRow
Adding isAtLeast, getCoreVersion and getVersion methods
Simplified serialization example
Forgot file
Support for binary
Support for DateTime
updated tutorial to use auto-file path
added shared group to mini tutorial
Support for float and double
A few extra unit tests
initial implementation of appendRow using NSArray
Build for ARMv7, not for ARMv6
Build fat binaries for iPhone when supported by Xcode (from version 5)
More tests yielding segfaults.
A range of tests on columnless tables.
query syntax updated
removal of unneeded indentation
updated examples files with addEmptyRow
enabled writeToBuffer
resolved merge conflicts
relative path in Xcode project
updated tutorial to reside within an iPhone application and use our framework
Using version number in the name of the framework zip file
Adding get-version and set-version to build.sh
addRow renamed to addEmptyRow
Simple version class
Deleting the old file.
Splitting into typed and dynamic.
updated project to include table_macros
merge conflicts resolved
removed the need to explicitly import group_shared.h
merge issues resolved
included new table_macros header in makefile
Exclude /test/ subdirectory.
Core coverage is not that simple.
renamed tightdb.h.cheetah to table_macros
Adding FIXME regarding removal of insert methods from public Obj-C API
-gitignore
rollback
More specific message.
removed hard references
Updated iPhone test app to use tightdb.framework
Better error message.
test-cover mode
updated .gitignore
support for iPad as well
mini tutorial using relative framework
Renaming types: TightdbSharedGroupReadTransactionBlock -> TightdbReadBlock TightdbSharedGroupWriteTransactionBlock -> TightdbWriteBlock Renaming TightdbSharedGroup selectors: readTransactionWithBlock: -> readWithBlock: writeTransactionWithError:withBlock: -> writeWithBlock:withError:
Consistent naming.
license
Error handling and lots of other stuff from Jesper
build.sh: Support added for checking documentation examples `sh build.sh check-doc-examples`
No C99/C++ comments allowed in Obj-C files (discounting Obj-C++ files)
Adding remaining FIXME
Makefile (generic.mk) upgraded to version 1.0.1 (latest) from core library
added import of shared group into tightdb.h
.gitignore updated
do not check for if columnCount is zero before adding columns
correct signature
ref doc for din table add column
gitignore
small changes
small tutorial
Main header file for a framework begins with a capital letter by looking at other frameworks
Adding a target for build.sh to generate iOS framework
Check that $CONFIG_MK is writable.
removed wrong target
changed lib path
correct org
added Xcode project
small changes
using correct compiler + added 2x default image
Renaming optimize references.
Many bug fixes. Major style fixup.
Now using new Descriptor based API (Spec is no longer a public class)
Typo in documentation. Can now generate again.
Removing extraneous trailing white-space
Converting TABS to SPACES using TAB spacing of 4 for most files, a few files were expanded using a spacing of 8
Getting rid of DOS newlines CR LF -> NL
split for genericity
Rename `src/config.mk` to `src/project.mk`, then rename `src/config-dyn.mk` to `src/config.mk`
cleanup of makefile
added test-examples target in build.sh to run example tutorial
updated .gitignore
cleanup in project folder
changes to -gitignore
title changed
added readme file into examples folder
added xcode project to examples
README.md: Explain how to specify location of `tightdb-config`
API ref: fixing anchor.
shared group update
Upgraded to support new build process
Stop setting up redundant search paths during building as they risk masking errors
generic.mk: Do not clobber EXTRA_CFLAGS and EXTRA_LDFLAGS when they are set in config.mk
generic.mk: `DESTDIR` must also apply to install dirs set as xxx_INSTALL_DIR, where xxx is a primary prefix
Load common functions from objc home.
Add common_funcs.sh to dist-copy.
Adding common_funcs.sh
Adding "install-report" target to build.sh.
Adding support for one-line installer.
build.sh: Rename 'install-shared' -> 'install-prod'
Call 'make' using '$MAKE' to prepare for using 'gmake' on FreeBSD
Notes about Xcode and command line tools on OS X 10.9 (Mavericks)
Specify --mmacosx-version-min=10.7 when building on Darwin
Tracking latest generic.mk changes in core library
When using 'tar' to transfer files, don't extract original timestamp, since that causes trouble on OS X, at least when running it in a VirtualBox
Tracking latest generic.mk changes in core library
a split of the description
build.sh: To disable the use of 'pandoc' during 'dist-copy', one must now set TIGHTDB_DISABLE_MARKDOWN_TO_PDF to a nonempty value
Improve Cheetah handling Makefile (now in line with similar changes in core lib)
build.sh: Add config rerun reminder when specific param retrieval fails
Removed mention of table find* in documentation becuase it's incomplete.
Updated the tuturial.
Added test cases for cursor.
Using renamed anchor.
Now using -ltightdb-objc-ios-dbg in debug mode in iPhone example again.
Don't run pandoc if you don't have it installed.
Removed redundant examples/tutorial2.m
Removed -dbg linker flag in debug mode in iPhone example.
Delete old files in iPhone performance test.
Adding a unit test
start position for find is inclusive - add one
Query.find unit test
Removing stale entry from iPhone Xcode project
tightdb.h updated by Cheetah due to recent changes in tightdb.h.cheetah
Core has renamed find_next to find
Objective-C test-suite updated according to recent changes in Query::find_next()
Updated the tutorial
Adding a note about the tutorial.
Adding a note about the tutorial.
Remove old file before write in iPhone example.
Remove old file before write in iPhone example.
Work in progress
Work in progress
Tracking latest generic.mk changes in core library
Adapted to method renaming in the core.
Updated naming of aggregate methods (typed and dynamic).
Bumped shared library version from 1:0:0 to 2:0:0 (note, this is the Libtool style version). This was done becuase the Obj-C API changed in an incompatible way since B28.
Project specific Emacs settings updated: Always show trailing white-space
Broken doc alias (quick fix).
Naming updated: addRow and insertRowAtIndex
Cheetah wrapper script no longer clobbers target file on error
Updated iPhone example (works now).
A cursor can now return the index.
Changed naming of addColumn:name: in Dynamic Table.
Implemented curser support in Dynamic API (all classes).
Updated typed table unit test to cursor based add.
Implemented curser based insert in typed table.
Naming updated in Typed Table
is_valid -> is_attached
splitting get_column_type doc
Updated Typed Query signatures (incl. tests+docs)
Minor YAML updates.
Cleaned up documentation vs. API.
Minor example update.
Minor YAML updates
Dynamic Query - YAML updated
Pulling in latest changes in generic.mk from core library
Added or changed naming in all conditions in dynamic query.
Yet another review doc commit.
Minor update.
Review doc formatting.
API review doc updated
README.pdf created as part of preparing a distribution package
Added two memos and an initial api review docs.
Updated an example
Documentation updates
Adding disclaimer.
Adding conditions in Query Dynamic (with tests). In progress.
Error handling added for query. Note that in order to maintain query stackability, last error is kept and given in the actual request on the query.
Error handling finalized for table.
Changed duplicate code to use a macro for general handling of exceptions.
Added nserror handling to group write methods. group write serves as a possible example of multiple exception handling
Added nserror to table insert and set methods. Updated python script to use implement an error version of add##type..
Initial NSError handling setup groupWithFilename now has error interface. Added xcode setup for easier testing.
No longer building for iPhone during the regular build step
Initial NSError handling setup groupWithFilename now has error interface.
Added methods in dynamic API. Updated yaml.
Improved code generation from Cheetah templates
Initial test case for error handling created
More YAML cleanup.
Updated YAML files according to new syntax (TODO etc.)
removed html files
Corrections for prerequisites
Corrections for prerequisites
Created addRows(..) method in API.
Pulled master into doc_ref.
Added more examples.
refdoc update
Changed 'Tightdb' to 'TightDB' when appropriate
Remove file before calling [TightdbGroup write] everywhere
Remove file before calling [TightdbGroup write]
New attribute 'readOnly' added to TightdbSpec
Fis for: 'sh build.sh test-gdb' is now supported
'sh build.sh test-gdb' is now supported
'sh build.sh test-debug' is now supported
Respect 'DISABLE_CHEETAH_CODE_GEN'
A 'config' step has been introduced into the build procedure. The main reason is that it allows reliable uninstallation, but there are several other benefits too.
refdoc updates
refdoc: updated. compiles
fixed up parts of reference
Work in progress - examples.
Tutorial updated.
Added "intro" examples for Table, Query, TableView (typed) and Group
Support for DESTDIR when installing via build.sh
cleaned up tutorial
Tracking latest changes in generic.mk in core library
Emit a success message after each build/install step in build.sh
Set LD_RUN_PATH during test-installed to avoid failure on systems where /us/local/lib is not in the default runtime library search path
updated doc/ref/data
Tracking latest changes in generic.mk in core library
No need to build 'tightdb-config-ios' 'tightdb-config-ios-dbg' for iPhone
Full uninstall support
Bumped library version from "0:0:0" "1:0:0" (note, this is the Libtool style version). This was done becuase the API changed in an incompatibel way since B24
Exception File::OpenError renamed to File::AccessError
Tracking latest changes in generic.mk in core library
updated doc/ref/data
Group::BufferSpec eliminated. Using BinaryData instead.
Updates in doc/ref/data
Adding Query::remove()
Renaming popBack() to removeLast()
Renaming delete() to remove()
Full support for queries on binary data
String sizes are now explicitely represented rather than relying on null-termination
1) yaml files in doc/ref/data updated. 2).gitignore updated (*.html in doc/ref)
updates in /doc/ref/data: Group, Table (typed) and Query (typed) first draft ready
updates in docs/ref/data
doc/ref
doc/ref/group updated
Tracking latest changes in generic.mk in core library
'libtightdb_objc.so' is now properly versioned
Tracking latest changes in generic.mk in core library
Adding Objective C specific output.
Major renaming session. All names are now properly qualified.
Support for 'float' and 'double' column types and a lot of other fixes
Tracking changes in core library
Tracking latest changes in generic.mk of core library
Just another exception related FIXME
Tracking latest error handling improvements in core library
More changes due to improved error handling in core library. Group no longer has an is_valid() method. From now on, Group instances are always valid.
Changes due to improved error handling in core library. Group no longer has an is_valid() method. From now on, Group instances are always valid.
Use different Mixed constructor for binary data
Updating generic.mk to track changes in the core library
TIGHTDB_ prefix added to COLUMN_TYPE_* names. ColumnType enum renamed to TightdbColumnType. No need for a C++ special case of the TightdbColumnType enumration.
Suffix '_objc' added to all Objc++ module files to avoid object file nameclasing between this language binding and the TightDB core library
Swap name/type in table macros
generic.mk updated to same version as is used in core library
Improved mixed comparison Subtable fields of a cursor now has the right type for that subtable Proper recursive table type comparison Got rid of the unqualified COLTYPE* macros Got rid of the unqualified tdbOCType* macros Various other fixups
Some TODOs removed, some changed to FIXMEs
Rudimentary support for mixed columns in typed API. Rudimentary support for subtable columns in typed API. Rudimentary support for transactions.
Debugging build modes removed from build.sh, since they do not work
Add Cocoa framework when build tests
Debugging build modes added to build.sh
generic.mk updated to match the one in the core library
More untabification + removal of extranous trailing white space
TDB_TABLE_* renamed to TIGHTDB_TABLE_*
Files converted from CamelCase to unserscore_separated
Untabification + removal of extranous trailing white space
Clean before building installation test
Use MAKEFLAGS=-w when building on Darwin
Use correct suffix '.dylib' for shared libraries on Darwin
Use proper include directives
Post installation test added
More portable use of the sort command
aparrently it is necessary to link language binding library against the Cocoa framework
Ignore more transient files
It is now possible to build and run the iPhone test
Also build and install a debug version of the Objective-C language binding library
Major reformation of file structure
Lots of garbage removed
Test suite now runs properly from the build script
More fixes for: Now also building for iPhone when building on OS X
Now also building for iPhone when building on OS X
Minor update of generic.mk: It is now possible to disable creation of static library, and also of debug library
Minor update of generic.mk: Improvements in regard to CFLAGS specification
Multiacrh disabled: Not supported by Objective-C ARC
Minor update of generic.mk: Allow CFLAGS to be specified for each library and program
Major update of generic.mk: More consistent use of shared libraries
Updating xcode project files
Got rid of old and unneeded cpp-example
File filtering is now performed as part of building a distribution package
Making the use of 'grep' more portable
Improved makefile and build script
Makefile added
Order of items in enum ColumnType updated to mach recent changes in the core library
Emacs indentation update
Build scripts update
Build scripts update
Build scripts update
Updated according to recent changes in core library
Build scripts update
Makfile update
'build.sh' update
Incomplete guide to building on Linux
Libs updated
Failed to fix copy constructor
Beautifyed output
Updated delivery and added sql example performance
Added performance tests
Last minute changes
Implemented enumeration
Updated to build with latest tightdb (after the big method case refectoring and more)
Overlays for Objective C
Examples for short tutorial
Tutorial update
Release and debug working now
Failing test commented out
Comment out OCTopLevel get because of crash.
Changed lib stuff
Extra unit tests
Added testing function for subtables
Added Table::getTopLevelTable()
Added testing function for Query class
Added MACTestTutorial - NOT compiled!
Some small corrections
Works for simulator now
Remove invulgosoft
Cleaned up a little
removing php examples
Works now with nw lib
Cursor added and a bit more ObjC like
Moved header files
Added ignores
Changed naming
Tutorial updated
Moved tigtdb headers
Moved files around
TYPE is DOCTYPE
Almost up-to-date
Macro redefined
Cursor removed
Lots of minor tutorial fixes
Cursor implemented. Better workaround for ARC implemented
Updated libs with RELEASE libs
Added OCCursor
Initial import
Resolved merge conflict
Changed insert to insertAtIndex. Highlighting some missing functionality (e.g. cursor)
TightDb.h is now generated by CheetahTemplate and Python with numbers of columns 1 through 8.
Changed comments. changed *Paran to group/endgroup
Application on IOS working as well
Woks now with workarounds for ARC problems
All implemented, but problems with tableref
Problem with crash fixed. _DEBUG=1 needed
Implementation done. Need to find crash problems
Added original c++ for chrash test
Adding more tests
OCGroup initial implementation and tightdb.h initial impl. - Testcase working for Group
First table test case working
Added test files.
OCTable half done
first commit
first commit
