Removing some unnecessary methods from host and function parameters (#51499)
Move deprecate from Debug to deprecatedCompat (#51522)
visitEachChild not traversing all nodes (#51543)
Refactor module resolution `Extensions`, fix lookup priorities (#51471)
Improving Date.getTime documentation (#51365)
Update package-lock.json
fix(51277): Array find thisArg fix from being void (#51278)
fix(51112): skip checking binding parameters for functions that contains arguments (#51258)
Undo accidental style changes from Map/Set PR (#51529)
Add smoke tests to CI (#51464)
Update package-lock.json
Add alias ResolutionMode for ModuleKind.ESNext | ModuleKind.CommonJs | undefined (#51482)
Handle reusing type reference resolution in resolution cache correctly (#51475)
Update package-lock.json
Emit buildinfo if file deleted isnt global (#51472)
Remove ts.{Map,Set,ESMap,Iterator} and associated types (#51439)
Remove no-unnecessary-qualifier from eslintrc (#51456)
Make lkg task depend on local task instead (#51468)
Simplistic watch mode for runtests (#51461)
Detangle unittests to reference helpers directly (#51450)
Add --no-typecheck option for runtests/runtests-parallel/min/local (#51460)
Replace eslint-plugin-jsdoc by extending local jsdoc-format rule, saving ~20% of our linting time (#51438)
Remove leftover todo from mjs/cjs transition (#51453)
Bump volta/packageManager in package.json (#51445)
Update package-lock.json
Depend on build-src in runtests (#51436)
Add known keys of the mapped type constraint to its members (#50081)
TypeReference directive reuse (#49750)
Remove dynamicImport and setDynamicImport
Remove outFiles from launch.json
Disable slow CodeQL queries
Remove globalThisShim and globalThis modification for TypeScriptServicesFactory
Remove Promise redeclaration
Move compiler-debug into Debug namespace, which allows the compiler to be tree shaken
Ensure ts object passed to plugins contains deprecatedCompat declarations
Directly import namespaces for improved esbuild output
Export ts namespace from tsserver for hacky-post patching
Remove mkdirp
Don't use needsUpdate for quick tasks
Modernize localize script, use new XML library
Use jsonc-parser instead of LKG compiler in build
Update baselines for corrected line endings in lib files
Change build system to hereby
Rename Gulpfile to Herebyfile for improved git diff
Add ts to globalThis in run.js for convenience during debugging
Consolidate checks that test if the current environment is Node
Add dts bundling
Add build via esbuild
Get codebase building pre bundling
Remove typescriptServices, protocol.d.ts, typescript_standalone.d.ts
Convert require calls to imports
Add JSDoc eslint rule
Undo changes needed to load codebase into ts-morph
Make processDiagnosticMessages generate a module
Add gitlens settings suggestion
Generated module conversion step - .git-ignore-blame-revs
Generated module conversion step - inlineImports
Generated module conversion step - stripNamespaces
Generated module conversion step - explicitify
Generated module conversion step - unindent
Explicitly reference ts namespace in tsserverlibrary
Make a few changes to allow all code to be loaded as one project
Pass in information for the module name resolution when resolutions from file are partially used (#49738)
fix(51374): ts(80004): Quick fix... > Annotate with type from JSDoc :: object types (#51378)
Enables passing `--declaration`, `--emitDeclarationOnly`, `--declarationMap`, `--soureMap` and `--inlineSourceMap` to `tsc --build` (#51241)
Update package-lock.json
Update package-lock.json
Avoid unnecessary buildInfo read if host supports caching it (avoids in --build scenario) and some reporting cleanup (#51403)
Improve reduction of similar intersections in type inference (#51405)
Change watchdog tagged users (#51411)
There is no use of creating reference map with --out since its not used anyways (#51379)
Enum unification and improvements (#50528)
Update package-lock.json
Serialize and use files that can be emitted as affectedFilesPendingEmit (#51364)
Write original fileInfo when its not just string = version = signature in readable baseline (#51391)
fix test baseline
do not report use-before-declaration error in async IIFE initializer (#50199)
Update package-lock.json
Update package-lock.json
Bump version to 5.0.
Set impliedNodeFormat on sourceFile we get from host to ensure the field is set correctly (#50977)
Store array only if dtsOnly emit is pending to compress buildinfo (#51246)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Only call return() for an abrupt completion in user code (#51297)
fix for-in enumeration containing yield in generator (#51295)
Update CodeQL workflow and configuration, fix found bugs (#51263)
Update package-lock.json
fix(51245): Class with parameter decorator in arrow function causes "convert to default export" refactoring failure (#51256)
Update package-lock.json
fix(50654): "Move to a new file" breaks the declaration of referenced variable (#50681)
Dom update 2022-10-25 (#51300)
Remove "No type information for this code" from baseline (#51311)
fix(50068): Refactors trigger debug failure when JSX text has a ' and a tag on the same line. (#51299)
Update package-lock.json
Add a GH Action to file a new issue if we go a week without seeing a typescript-error-deltas issue (#51271)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Generate shortest `rootDirs` module specifier instead of first possible (#51244)
Include 'this' type parameter in isRelatedTo fast path (#51230)
Update package-lock.json
Make the init config category order predictable (#51247)
fix(50551): Destructuring assignment with var bypasses "variable is used before being assigned" check (2454) (#50560)
Update package-lock.json
Revert structuredTypeRelatedTo change and fix isUnitLikeType (#51076)
change type (#51231)
fix(51222): Go-to-definition on return statements should jump to the containing function declaration (#51227)
markAliasReferenced should include ExportValue as well (#51219)
Update package-lock.json
Remove old tslint comments (#51220)
fix: avoid downleveled dynamic import closing over specifier expression (#49663)
Rename internal functions to `narrowTypeBySwitchOnTypeOf` and `narrowTypeByInKeyword` (#51215)
Update package-lock.json
fix(49196): add jsdoc snippet for interface member functions (#51135)
fix(51170): Completing an unimplemented property overwrites rest of line (#51175)
Remove some unnecessary code discovered by rollup (#51204)
Update package-lock.json
Update package-lock.json
Add more tracing to node16/nodenext resolution (#51168)
Update package-lock.json
Add an extra regression test for awaited unresolvable recursive union (#51167)
fix(50416): correctly names disabled export refactors (#50663)
feat(37440): Provide a quick-fix for non-exported types (#51038)
Remove VSDevMode.ps1 and createPlaygroundBuild (#51166)
fix(51112): omit parameter names that precede the type (#51142)
feat(51163): show QF to fill in the missing properties for the mapped type. (#51165)
Remove bug-causing carve-out in conditional type instantiation that hopefully is no longer required (#51151)
Check nested weak types in intersections on target side of relation (#51140)
Update package-lock.json
Overloads shouldn't gain @deprecated tags of other overloads in quick info (#50904)
Update package-lock.json
Remove unused declarations array in extractSymbol's TargetRange (#51091)
fix(51100): ensure tsserver shuts down when parent process is killed (#51107)
Update package-lock.json
fix(51072): ts.preProcessFile finds import in template string after conditional expression with template strings (#51082)
Convert scripts/Gulpfile to checked mjs/cjs so they can run without compilation (#50988)
fix(51017): Make lineText in the references response opt-out (#51081)
Properly defer resolution of mapped types with generic `as` clauses (#51050)
Update package-lock.json
Plugin probe location is higher priority than peer node_modules (#51079)
Plugins in project were adding up after every config file reload (#51087)
Update package-lock.json
Covert some of the config testing to baselines for easy validation (#51063)
Remove unused defaultWatchFileKind method since useFsEvents is default for tsserver and tsc (#51044)
Use typescript.d.ts in APISample tests (#51061)
Remove configureLanguageServiceBuild, instrumenter (#51048)
Update GitHub Actions (#51045)
Update package-lock.json
Adding a JSDoc comment to the es5 type declarations to describe the functionality of Date.now() (#50630)
fix(50750): Object type literal with string literal property in contextual typing position causes language service error on all literal type references (#50757)
Update package-lock.json
Update package-lock.json
Include type parameter defaults in contextual typing (#50994)
Allow Unicode extended escapes in ES5 and earlier (#50918)
Update package-lock.json
Add option to OrganizeImports for removal only (#50931)
feat: codefix for `for await of` (#50623)
Properly compute `SymbolFlags.Optional` for intersected properties (#50958)
Fully resolve aliases when checking symbol flags (#50853)
Update LKG to 4.8.4 (#50987)
Update package-lock.json
Update package-lock.json
Pick correct compilerOptions when checking if we can share emitSignatures (#50910)
During uptodate ness check with buildInfo, check if there are errors explicitly with noEmit (#50974)
Update package-lock.json
Handle if project for open file will get recollected because of pending cleanup from closed script info (#50908)
fix(49594): Typescript 4.7.3 bracketed class property compilation error strictPropertyInitialization:true (#49619)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Use paths in package.json 'files' array that work with npm 6 and later. (#50930)
Remove 'async' dependency, used only in errorCheck.ts, modernize file (#50667)
Update package-lock.json
Pluralized `hasInvalidatedResolution` -> `hasInvalidatedResolutions` (#50912)
Make hasInvalidatedResolution non internal for program and add it watchApi (#50776)
Update package-lock.json
package.json `exports` should have priority over `typesVersions` (#50890)
Remove .github/tsc.json (#50664)
fix(49993): skip the quick fix for an expression with an enum type (#50625)
fix(49200): skip duplicated method declarations (#50609)
fix(37030): Expand Selection in function and arrow function skips body block (#50711)
DOM update 2022/09/21 (#50884)
fix(50866): emit modifiers from export declarations (#50874)
Consistently add undefined/missing to optional tuple element types (#50831)
Improve escape sequence handling in private names (#50856)
feat(49962): Disallow comparison against NaN  (#50626)
fix(50591): RangeError: Maximum call stack size exceeded (#50594)
Allow a union property of a private/protected member and an intersection property including that same member (#50328)
Update package-lock.json
Add rules from eslint's recommended set that triggered good lints (#50422)
Improve checking of `in` operator (#50666)
Gabritto/jsemitfixsilly (#50849)
Don't elide imports when transforming JS files (#50404)
Improve check of whether type query node possibly contains reference to type parameter (#50070)
Update package-lock.json
make `RegExpExecArray` always include index 0 (#50713)
Accepting baselines
Rewording documentation
fix(50796): omit questionToken in object literal method completions (#50802)
Update package-lock.json
The error "Object is possibly null or undefined" is ambiguous. (#49797)
Update user baselines +cc @sandersn (#43554)
Removing duplicated code
Partially revert #41044, restoring parameter destructurings in d.ts files (#50779)
Update package-lock.json
Update package-lock.json
fix(50717): tsc crashes when it sees a JSDoc tag inside an @override annotation (#50724)
Discriminant of type `never` should never be matched (#50755)
Update package-lock.json
Handle more places where package direcroy is converted to canonical file path (#50740)
Revert removal of nonInferrableAnyType (#50691)
Update twoslash workflow (#50738)
Don't run linter after tests runs (#50597)
Support for auto-accessor fields from the Stage 3 Decorators proposal (#49705)
Update package-lock.json
Update package-lock.json
Don't leave space for property access on non-integer literals (#50703)
Preserve special intersections in mapped types (#50704)
Don't remove space before dot if in property access on numeric literal (#50695)
Baseline host state when baselining tsserver tests (#50678)
Update LKG and devDep of typescript to v4.8.3 (#50689)
Update package-lock.json
Remove error message in node16 (#50673)
Ignore `--help` and `-?` in `tsc init` generated `compilerOptions` (#50628)
Forward intersection state flag to conditional type target check (#50620)
Update package-lock.json
Simplify CI detection (#50661)
Make useFsEvents as default strategy for the watching (#50366)
Remove unused cancellation from build (#50658)
Update package-lock.json
Update package-lock.json
Report every instance of TS1208 (#50101)
Check if its same buildinfo only for directly referenced projects and not recursively (#50617)
Allow `{}` to narrow in same special cases as `unknown` (#50601)
`in` operator shouldn't narrow `{}` originating in `unknown` (#50610)
Update package-lock.json
fix(50079): show deprecated on JSX attributes (#50084)
Use bidirectional comparability in narrowing (#50592)
Remove unused baselines (#50593)
{} & null and {} & undefined should always be never  (#50553)
Defer distributing index over generic object types (#50540)
Do not canonicalize the file names when getting absolute paths during nodenext resolution (#50557)
Update package-lock.json
fix(50340): typeof ... === "undefined" check on discriminated union of undefined and object type doesn't narrow correctly (#50344)
Only normalize intersections that include {} (#50535)
Rename API to importPlugin (#50554)
Managing control flow
Update package-lock.json
Move contributing related info out of README to CONTRIBUTING (#50543)
Retain name and propertyName in declaration emit copies of binding patterns if property name is a keyword (#50537)
Update package-lock.json
Remove redundant pretest script (#50518)
Handle intersections in isGenericTypeWithoutNullableConstraint (#50497)
Reuse computed type of condition expressions (#49881)
Update package-lock.json
fix(50427): allow convert function expressions (#50430)
Push package-lock.json updates via typescript-bot token (#50476)
fix(50415): Language server debug failure - Did not expect GetAccessor to have an Identifier in its trivia (#50470)
Rephrase error message to be 100% technically correct (#50471)
add unknown to DateTimeFormatTypes (#50402)
Don't include .gitattributes in package (#50475)
Optimize substitution types (#50397)
feat(7481): Operator to ensure an expression is contextually typed by, and satisfies, some type (#46827)
Update package-lock.json
Remove AUTHORS.md, .mailmap, authors.ts script (#50410)
fix(50435): Duplicate seeming Code Actions for convert const to let (#50442)
Jsdoc property description (#50269)
Remove top level loc folder (#50421)
Update package-lock.json
fix(50375): Errors for missing enum-named properties should attempt to preserve names (#50382)
Discard union types before considering weak type checks on unit-like types (#50423)
Syntax operations also need to ensure project is present for the open script infos since update could be pending to make sure open script info has project (#50418)
Update package-lock.json
fix(50224): Intellisense for strings within a type's Union doesn't work properly for JSX (#50231)
Use package.json files array instead of .npmignore (#50408)
Update package-lock.json
Split CI linting/playwright out into separate jobs (#50406)
Use a mapped type to enforce type-safety on `forEachChild`. (#50409)
Replace eslint rulesdir with eslint-plugin-local, convert eslint rules to JS (#50380)
Make canHaveModifiers/Decorators public (#50399)
Update package-lock.json
Swap `forEachChild` to use a table of functions instead of a `switch` statement. (#50225)
Update package-lock.json
Update package-lock.json
Re-caret dependencies so deps like eslint continue to be bumped (#50368)
Remove some unused deps and dead code (#50367)
fix(50075): do not strip undefined from the function class properties (#50169)
Unify default import resolution across specifier target codepaths (#49814)
Update package-lock.json
If resolvedFileName differs with realPath only in casing use the resolvedFileName before realpath so that errors can be reported with forceConsistentCasingInFileNames (#50364)
mark Intl.LocalesArgument as readonly (#50135)
Add a jump-table for visitEachChild (#50266)
Add fourslash function for validating syntactic classification (#50362)
Run eslint at root, rather than on src and scripts individually (#50327)
Ensure all scripts are checked, fix errors (#50326)
Update package-lock.json
fix first match in `RegExpMatchArray` being possibly undefined when `noUncheckedIndexedAccess` is enabled (#49682)
Ignore related info in diagnostic deduplication (#50309)
Update baseline after out-of-order merge (#50320)
Update package-lock.json
Make literal types not comparable to weak object types without property overlap (#49865)
Strip literal freshness of contextually typed literals (#49884)
On windows handle the long paths in realpathSync.native (#50306)
Forward intersectionState flag when comparing indexed access constraints (#50261)
fix(49149): remove unneeded array overload to Object.freeze (#50029)
fix(49629): fix crash in find-all-refs when using module.exports/export= with arrays/primitives (#50291)
Make `React` import fix not block component import fix (#50307)
Run ESLint over our JS files, fix all lints (#50172)
Update package-lock.json
Update package-lock.json
Report aggregate statistics for solution as well as some solution perf numbers (#50267)
refactor: follow gh-50257 JSX.IntrinsicClassAttributes logic (#50271)
Update package-lock.json
fix: produceLKG does not work on Windows (#50140)
use cache for program creation on watch mode. (#49958)
Make build info tolerant to json errors (#50265)
Remove shims project (#50049)
Simplify normalizeSlashes (#50154)
Don't treat object properties as potential JS contructors without JSDoc class tag (#49735)
fix: crashes when JSX.IntrinsicClassAttributes is an alias type close GH-50254 (#50257)
update baseline (#50252)
Update package-lock.json
JSDoc @type tag optional parameters (#48132)
Use binary search in file system cache (#50163)
feat(49903): omit declare on type declarations (#49925)
fix CFA for BindingElement. #49759 (#49836)
feat(49928): Provide quick fix for a missing callback function (#49930)
feat(lib/es2015): Add typed overloads to `Reflect` (#35608)
feat(49834): Suggestion: filter enum member ids from their own jsdocs (#49843)
Bump version to 4.9. (#50239)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
fix(50188): omit QF on function arguments (#50189)
Update error messages for CJS imports resolving to ES modules (#50088)
Update package-lock.json
Ensure that file watcher is closed only once for affected file locations that share watcher because of different names but same real path (#50150)
Add rule to auto-paren optional chain in normal prop or element access (#50156)
fix(50077): skip convertOverloadListToSingleSignature refactoring if position is in function body (#50093)
Downgrade es5-ext via overrides (#50061)
Update package-lock.json
Restore ordering of operations involving type parameters and unions (#50116)
Better typings for Promise.resolve(), like #31117 (#33074)
Update package-lock.json
fix(49935): omit parentheses in the operand of the unary expression (#50111)
No synthetic Awaited for unconstrained type when not a type variable (#50100)
Improve import type support for commonjs exports (#49745)
Update package-lock.json
Update package-lock.json
Update package-lock.json
fix(49869): throw an error on optional binding pattern parameter in JavaScript (#50094)
Transform decorators that reference private names into a 'static {}' block (#50074)
Add an additional test for favoring the asserted type in type predicate narrowing (#50065)
Update package-lock.json
fix dts generation of jsdoc (#49904)
Pass correct module resolution state when reading package.json info so that they are correctly tracked in the resolution (#50085)
feat(47983): Negative tuple index access should not be allowed (#49901)
Update package-lock.json
feat(49358): use filename based on exported name (#49875)
Report error only on local declaration with additional related information (#49746)
Update pr_owners.txt
Update to npm 8, pin in package.json via volta and corepack (#49941)
Changes to resolve pr comments
Normalize effective constraint intersection before checking if source is a part of it (#49956)
Don't uninstall typescript before npm ci in GHA (#50062)
Use proper type for result of resultModuleNamesReusingOldState (#50012)
Favor asserted type in type predicate narrowing (#50044)
Account for type parameters in missing function codefix (#49727)
Resolve parsingContextErrors TODO (#50011)
fix(50048): remove token name from id (#50051)
Walk tokens with the correct walker (#50042)
Parse parameter decorators outside of Await context when appropriate (#50040)
Follow up changes to es5.d.ts
String.prototype.replace docs fix.
Update package-lock.json
Properly handle null and undefined in getCommonSupertype (#50021)
Remove uses of visitNodes and visitNode in visitEachChild (#49992)
More fixes to uncalled function checks in && expressions (#49868)
Protect watcher from double close (#49990)
fix(49964): handle auto-import dependencies/omit duplicate constraints (#50004)
fix(49854): fix start index to emit statements after super (#49858)
fix(49719): Incorrect error 2301 when using ES standard class properties (#49725)
Update DOM lib for 4.8 RC (#49976)
Update package-lock.json
fix(49704): Code folding not working in file with simple syntax error (#49743)
Copy type parameters to function with @type tag (#49960)
Clean up inference of type parameters, contravariant types (#49915)
Document order-dependence of isLocal flag (#49959)
Added type checks to avoid false positive results
fix(49838): "Extract function" refactoring action is disabled for a wrong reason (#49840)
Update package-lock.json
Don't leak EvolvingArray out of code flow (#49943)
feat(49786): show completions in expression with type arguments (#49810)
fix(49392): show optional class methods with enabled strict option (#49768)
check base constraint when checking operand of plus (#49918)
Update package-lock.json
Update package-lock.json
Improve narrowing logic for `instanceof`, type predicate functions, and assertion functions (#49625)
Update package-lock.json
Properly propagate ObjectFlags.NonInferrableType, clean up non-inferrable code paths (#49887)
noUncheckedIndexedAccess with enums Type narrowed
Delete unused code in object literal binding (#49879)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Move DebugTypeMapper to debug.ts (#49864)
Update package-lock.json
Update package-lock.json
Defer types like `keyof (T & {})` (#49696)
Handle pseudo-references in getFlowCacheKey (#49828)
Add path completions for package.json exports with wildcards (#49644)
fix: correct name length criterion for spelling fixes (#49575)
Make contextFlags an explicitly required parameter (#49720)
fix(49685): omit incorrect visibility error when setter precedes getter (#49697)
fix(49642): resolve JsDoc comments/tags if accessors exist in symbol declarations (#49654)
Add debug format helpers for more enums (#49732)
Remove dependence on `module` compiler option to consider mts/cts files always modules (#49815)
More documentation on the impliedNodeFormat SourceFile field (#49816)
Always resetErrorInfo if structuredTypeRelatedTo succeeds (#49718)
Protect against a language service host mutating its underlying source for `getScriptFileNames` (#49813)
Add visible alias statements for non-visible binding patterns when emitting declaration (#48869)
Constrain infer type parameters made to preserver distributivity for inlined homomorphic mapped types (#49793)
fix(49544): allow comma token after accessors (#49545)
Retire $ExpectError awareness from DefinitelyTypedRunner (#49756)
Infer rest type without using assignContextualParameterTypes (#49740)
Update package-lock.json
Set Error.prototype.cause type to unknown (#70) (#49639)
Minor fixes (#49791)
fix(49426): Object method snippet completions incorrectly add this parameters (#49757)
Cache results of expensive repetitive type operations (#49760)
Elide import equals in transpileModule if referenced only by export type (#49664)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
Get type arguments lazily for instantiating inferred type parameter constraint (#49744)
Instead of storing timestamp of when last d.ts file was modified, store its name so buildinfo becomes portable again (#49717)
Add variance results to tracing, capture variance verification on annotated type params (#49712)
For missing constraint quickfix insert position, Use node name end rather than related span end (#49673)
Demote priority of JS completions (#49716)
Update package-lock.json
Pass contextFlags when getting contextual type of JSX elements/attributes (#49707)
Add reference to TypeScript-Compiler-Notes in CONTRIBUTING.md (#49689)
Use value meaning for computed property name for visibility check (#49678)
To handle d.ts emit errors that could affect other files, in incremental mode use d.ts emit text + diagnostics as signature of the file (#49543)
Reuse start position in binarySearchKey (#49641)
Update package-lock.json
Disallow expression with type parameters as left side of property access (#49464)
Add case to capture enum subtype reduction
Add a simple queue implementation with better performance than `Array.shift` (#49623)
fixes #49491 (#49493)
fix(49449): change error location when passing objects/arrays to an argument of type (#49593)
Ensure resolved signature is cached before processing call errors (#49598)
Add `fractionalSecond` part type to DateTimeFormat().formatToParts (#49569)
Use separate marker types for variance annotation validation (#49616)
Update package-lock.json
fix(49546): create computed property name for symbol props (#49554)
fix(49548): show completions after keywords in block (#49600)
Update 4.8 DOM from Typescript-DOM-lib-generator (#49596)
Add TS Server option to exclude files from auto-imports (#49578)
Add error when importing/exporting types in JS files (#49580)
Downgrade node-fetch back to v2 (#49592)
Allow nongeneric string mapping types to exist (#47050)
Tune FAR aggregation (#49581)
Update all depedencies, including ESLint 8, refresh lockfile (#49550)
fix(49566): Implicit this.property completions not returned while writing property (#49574)
Update package-lock.json
feat(49385): forbid inlay hints for some kind of initialized declarations (#49412)
Properly re-scan `>` token in type argument list determination logic (#49560)
Allow exports map entries to point at `.ts` source files (#48563)
Expand constraint suggestion related span and add quick fix (#49481)
Handle `this` in isEntityNameVisible (#49521)
Update package-lock.json
Ensure scripts compile, are checked in strict mode (#49524)
fix(49483): throw error on await inside non-async function (#49496)
Enable TS Server plugins on web (#47377)
Forbid unused property renaming in destructuring binding in function types (#41044)
fix #49235 Objects that pass the spread syntax can no longer be assigned to assignable types. (#49337)
Fresh `{}` is subtype of `object` (#49503)
Update package-lock.json
Update package-lock.json
Eliminate (ts as any).SyntaxKind (and similar) in favor of Debug.format functions (#49485)
Improve performance of Debug.format functions (#49487)
fix(49478): add return type to method signature (#49482)
Instantiation expression can be followed by line break or binary operator (#49353)
fix missing 'internal' comment
Avoid repeating codefix work when resolving auto-import specifiers for completions (#49442)
Update package-lock.json
Always recreate the file watcher when rename event occurs (#48997)
Serialize inaccessible class declarations the same as class expressions in declaration emit (#49440)
Give cjs export assigned types an alias symbol (#49407)
Revise and simplify CFA for `typeof` check expressions (#49422)
Handle package.json watch in tsc and tsserver. (#49328)
Build improvements (#48784)
Update package-lock.json
Replace ts.hasOwnProperty.call(...) with hasProperty(...) (#49410)
Use symbolic GitHub Actions Node.js versions (#49403)
fix(47821): skip nodes with export modifiers (#47829)
remove unnecessary files (#49401)
feat(47558): check JSDoc link tags in TypeScript/JavaScript files (#47822)
Update package-lock.json
Update package-lock.json
Explicit types should prevent ATA from doing package.json discovery (#49380)
Move legacy decorators into separate transform (#48669)
Expose import mode calculation functions (#49360)
fix(49223): checker.getTypeAtLocation for ExpressionWithTypeArguments returns an error any type (#49284)
Add nightly-only error on ImportType resolution mode assertion (#49356)
Use node's algorithm for calculating the longest matching export/import pattern (#49361)
fix(48653): throw an error on an invalid optional chain from new expression (#48656)
fix(49306): add isImportTypeAssertionContainer helper (#49313)
Update package-lock.json
Remove `undefined` from source type of renaming destructuring assignment with default (#41042)
Update package-lock.json
Use NonNullable<T> in more scenarios (#49330)
fix(49151): format type parameters/arguments (#49165)
Issue serialization error when attempting to serialize a late-bound name from a mapped type (#49221)
fix(49178): check expression with type arguments in inlay hints (#49179)
Allow accessors to override non-class or abstract properties  (#41994)
fixes #48630 array binding pattern with only OmittedExpressions does not check RHS of for-of loop (#49008)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
Improve intersection reduction and CFA for truthy, equality, and typeof checks (#49119)
More specific inference for constrained 'infer' types in template literal types (#48094)
fix(30003): formatter deletes comment after trailing comma (#49168)
Port #48978 forward to the revised FAR code (#49267)
Update package-lock.json
moduleDetection: auto makes cjs files parse as modules, module: node sets moduleDetection: force (#49268)
Handle the case where the FAR results map is empty (#49254)
fix(47562): Add option to suppress type hint if variable name matches type name (#48529)
fix(49131): allow type keyword inside functions (#49134)
Limit type argument inference from binding patterns (#49086)
Key validity of import=require in module: node off of module and not target (#49222)
When building projects in watch mode, only schedule projects that need build or need update to bundle (#48865)
Instantiate original target type in substituteIndexedMappedType (#49205)
Add es2018.intl ref to es2020.intl (#49152)
Update package-lock.json
Update CONTRIBUTING.md to mention issue claiming and force pushing (#49090)
Use changeCompilerHostLikeToUseCache in synchronizeHostData (#48980)
Clean up FAR aggregation (#48619)
Update package-lock.json
fix confused comment (#49094)
fix(49058): Language service crashes for static member in class with unresolved base members (#49059)
No errors on apparent type of bigint or symbol, even for recent targets (#49104)
Update package-lock.json
Update package-lock.json
move tests to conformance/salsa from compiler
add messages to plainJSErrors
Update package-lock.json
Make watch/FS testing code friendlier for project loading in module transformation (#49087)
feat: support error when comparing with object/array literals (#45978)
fix: getDefaultLibFilePath should normalize __dirname (#49051)
fix(7410): allow using JSXElement as JSXAttributeValue (#47994)
Allow referencing type-only exports as namespace members in ImportTypes and TypeQueries (#49056)
Update package-lock.json
Accepted es2020Intl baseline.
Add regression test for #46192 (#49057)
fix: update types for RTF.p.formatToParts() result (#46508)
Identify when file name is matched by default include spec (#49040)
fix(48912): fractionalSecondDigits is 1, 2 or 3. (#49042)
Add missing source property to Intl formatRangeToParts methods (#48754)
Add JSDoc's @inheritDoc Support for Static Class Members for TypeScript (#46719)
fix(49001): handle missing imports in addMissingMember QF (#49009)
fix: fractionalSecondDigits configure (#49014)
fix(48673): allow Find All References on access modifier for constructor (#48813)
fix(48887) exposing rest helper functions externally (#48888)
Report error for invalid 'this' type during 'await' (#48946)
Remove spurious lookAhead, as this fn is already in a lookAhead
Use all modifiers test
Update package-lock.json
Bump version to 4.8.
Flag resolution mode assertions in non-nightly builds (#49002)
Respect importModuleSpecifierEnding inside node_modules packages (#48995)
Add ES2022 `Intl.Segmenter` type (#48800)
Harden combineProjectOutputForReferences against empty results (#48978)
Clear ExportMapCache on cancellation requested (#48979)
fix(48878): return errorType on invalid nodes in getTypeAtLocation (#48967)
Allow export map entries to remap back to input files for a program (#47925)
Remove some unused baselines. (#48964)
No error on toplevel return in JS (#48874)
Skip ambient modules in globalThis (#48938)
Revert "feat(47595): allow using private fields in type queries" (#48959)
Skip missing nodes in formatting (#48953)
Revert "Don't treat a colon in a conditional expression branch as part of an arrow function" (#48940)
fix(48948): disallow constructor name in class accessors and generators
When source file is redirected, set the prototype correctly in node factory (#48862)
Don’t let other completions shadow type keywords in type locations (#48939)
Run `mocha` using `process.execPath` instead of harcoding `"node"` (#48797)
Document encodeURIComponent/encodeURI's argument as unencoded (#48803)
Add tests case for function check type being correctly paranthesized in quick info (#48836)
Start Node ESM stable version at Node16 (#48879)
Don't go past import in cross-project renaming (#48758)
Temporarily revert unconstrained type parameter strictness in TS 4.7 (#48923)
fix(48557): Add missing JSDoc parameters  (#48560)
Add a regression test for completion list in object literal involving inferred obj with optional members (#48910)
Update package-lock.json
Update package-lock.json
fix(48759): throw an error on using import expression with type arguments (#48787)
Use same error for iteration in <=ES5 (#48881)
Update package-lock.json
Dont reload config file when package.json change is detected (#48866)
fix(48851): exclude in from document highlights (#48853)
Eagerly resolve module specifiers for auto-import completions in `--moduleResolution node12+` (#48752)
feat(48743): allow autocompletion in parameter object destructuring in JavaScript (#48757)
Add JS-specific diagnostic message for `resolve()` in Promise where type argument can't be inferred (#48533)
Stop tag after @callback from crashing (#48860)
Add Node v18 to CI (#48824)
Update package-lock.json
Update package-lock.json
Improve support for numeric string types (#48837)
Don't run scheduled GitHub actions on forks (#48693)
Update package-lock.json
Update package-lock.json
fix(48556): throw an error on jsx spread attributes with an invalid type (#48570)
Format completion snippet text before escaping (#48793)
Handles time on vfs and write non empty shadowed files in baseline even if they were not read (#48703)
During emit, if shape signature for the file is same as version, then update it with emitted d.ts file (#48616)
If we are updating dts of any of the file and it affects global scope, everything needs update in signature and dts emit (#48600)
Ensure enum aliases referenced in other enum members do not get marked as referenced (#48770)
Update package-lock.json
Disallow line break between entity name and type arguments in typeof expression (#48755)
Constraints for mapped types with filtering 'as' clauses (#48699)
Instead of maintaining cache id etc, reset the "working" exports map cache. (#48579)
Allow triggering twoslash bisection manually (#48721)
Update package-lock.json
Find Source Definition (#48264)
Update package-lock.json
Checkout needs everything (#48689)
setup-node needs a version spec (#48688)
WIP (#48682)
Update signatures to avoid post-LKG error (#48677)
fix(48657): allow JSXElement names to be IdentifierNames (#48661)
More permissive parsing of instantiation expressions (#48659)
Handle declaration file names consistently (#48647)
Variance annotations on class expressions + deferred valiation (#48645)
Update package-lock.json
Make LKG and nightly declaration emit the same (#48641)
Update affected files pending emit when emitting using SemanticDignosticsBuilderProgram (#48519)
Allow twoslash-repros action to be run on-demand
Don't skip tests named *Fourslash.ts (#48615)
don't have type annotations on suggested object literal methods (#48607)
Explore fewer constraints in getResolvedBaseConstraint (#48613)
Reuse type nodes from optional parameters even when not written as a union with `undefined` (#48605)
Update update-package-lock.yaml
Update update-lkg.yml
Update sync-branch.yaml
Update set-version.yaml
Update nightly.yaml
Update ci.yml
Update accept-baselines-fix-lints.yaml
Update new-release-branch.yaml
Update release-branch-artifact.yaml
fix(48487): allow using private names as the self-assignment entity name (#48496)
disentangle the meaning of `SymbolLinks.target` (#47098)
preserve this when extracting functions (#41992)
Write version for baselining in buildinfo (#48602)
Do not reset control flow analysis on index signatures (#48427)
Write more useful types in .types test outputs (#48578)
Preserve the distributivity of inlined conditional types in declaration emit (#48592)
Ensure late painted statements are only transformed once, so inner substitutions are consistently read (#48558)
Add additional tests for intra expression inference (#48584)
More refactoring of tsc baselines to help with easier updates (#48572)
Permit type alias variance annotations only for certain object types (#48589)
Some refactoring for baselining for easy update (#48516)
manually update webworker to remove AbortSignal.abort (#48580)
Only report isDefinition when FAR is triggered on a definition (#48566)
Update Intl.DisplayNames types for better spec compliance (#48442)
fix(48544): allow to convert default exports to names for import type nodes (#48550)
fix(48540): Extract to typedef from (invalid) type with comments in JS file causes assertion failure (#48545)
Update DOM for 4.7 beta (#48577)
Add more options to `DateTimeFormatOptions.timeZoneName` (#48467)
feat(46907): Add `Intl.ListFormat` type declarations (#47254)
Run API tests with 'strict' and 'exactOptionalProperties'. (#48574)
Improve inference for context sensitive functions in object and array literal arguments (#48538)
Add 'extends' clause to 'infer' type (#48112)
[Feature] - Automatically create sort groups based on newlines (#48330)
fix: ensure ts source file with no-default-lib that augments the global scope gets emitted with incremental program (#48412)
narrow type for generic variables inside TypeQuery (#48434)
fix(48109) - 'Convert to arrow function' refactoring adds extra indent (#48440)
Allow arrow function parameter parsing to bail out during speculation, redo (#48493)
Remove non-baselining fourslash FAR validation (#48564)
Properly check singleton labeled tuple before unwrapping (#48554)
fix(48418): allow using empty tuple (#48420)
fix(48406): resolve JSDoc host of property signature (#48407)
fixed code duplication (#48425)
Remove nightly-only flagging for nodenext features (#48555)
fix(48542): omit parameter info of contextual union type (#48549)
fix(48541): forbid function extraction to arrow function with expression body (#48548)
Convert many tests from verify.singleReferenceGroup to verify.baselineFindAllReferences (#48518)
fix(48520): fix getting parameter type by index (#48521)
Sync fourslash shims and shims-pp (#48507)
Respect @BaselineFile in fourslash tests and tidy up quickInfoDisplayPartsVarShims (#48506)
Reserve a core in runtests-parallel on non-CI machines (#48502)
Correct node used for isDefinition calculation (#48499)
fix(48405): emit dummy members from a mapped type (#48481)
CFA for dependent parameters typed by generic constraints (#48411)
No contextual typing from return types for boolean literals (#48380)
fix(47733): omit JSDoc comment template suggestion on node with existing JSDoc (#47748)
Ensure that we copy empty NodeArrays during transform (#48490)
Add a new compiler option `moduleSuffixes` to expand the node module resolver's search algorithm (#48189)
feat(27615): Add missing member fix should work for type literals (#47212)
Add label details to completion entry (#48429)
Enable method signature completion for object literals (#48168)
fix(48445): show errors on type-only import/export specifiers in JavaScript files (#48449)
Prevent looking up symbol for as const from triggering an error (#48464)
Revise accessor resolution logic and error reporting (#48459)
fix(48166): skip checking module.exports in a truthiness call expression (#48337)
fix(48031): show circularity error for self referential get accessor annotations (#48050)
revert #44956 - remove hyphen separator (#48416)
Add explicit tests for unconstrained type param not being assignable to `{}` and `Record<string, any>` (#48421)
fix(47081): show completion list in parenthesized object literal arguments (#47104)
Update package-lock.json
Make the unconstrained type parameter and {} assignability rule not apply under strictNullChecks (#48366)
align ClassStaticBlockDeclaration with IIFE in CFA (#44969)
fix(48218): Split Intl.DisplayNames options (#48262)
fix(48034): Get a literal string of type intersection in a template literal type (#48044)
Optional variance annotations (#48240)
fix: export default anonymous function works with prefixText and suffixText when disabled (#48259)
fix(48053) Description of tsBuildInfoFile is misleading in generated tsconfig.json (#48072)
Update package-lock.json
Make AutoImportProvider look in ATA cache (#48329)
Add server tracepoints (#48282)
fix(48291): omit jsdoc modifiers (#48304)
Infer extracted local variable name from property name (#37902)
Add isolatedModules error for ambiguous imports referenced in decorator metadata (#42915)
fix(48191): Duplicates comments on "Add definite assignment assertion to property" (#48299)
feat(48231): allow unique symbol for constant variables (#48270)
Change sortText for class member completions (#48196)
fix(48277): show parameter type inlay hints after ? operator (#48283)
Handle JS synthetic rest args in contextual parameter assignment (#48263)
Consistently avoid pulling on the source return type when the target return type is any (#47306)
Exclude mapped types with optionality modifiers and 'as' clauses from constraint logic (#48273)
Exclude mapped types with 'as' clauses from certain checks (#47889)
fix(47597): ignore commented imports following template expression (#47657)
Update issue templates (#48261)
fix(48081): omit error on importing variables defined with require() (#48115)
Add `boolean` to supported literals within `Object.freeze` (#48117)
Update package-lock.json
Update package-lock.json
Introduce set with custom equals and getHashCode (#48169)
Add assertion on invalid cache set (#43845)
Add moduleDetection compiler flag to allow for changing how modules are parsed (#47495)
Properly reduce intersections to never in identity relation (#48111)
Clean up a load of unused dependencies, broken jake script (#48214)
Move `hasOwn` from Object instance to Object constructor (#48207)
Make direct assignments to cjs exports considered literal contexts (#39816)
Don't eagerly simplify reducible generic union index types (#46812)
Preserve the homomorphism of inlined mapped types in declaration emit (#48091)
Handle nonmaster branches in user suite tests (#48128)
Rename SyntaxKind.JSDocComment -> JSDoc (#44416)
🤖 Sync option descriptions <- website (#46465)
Bail on 0- and 1-length lists in `removeSubtypes` to avoid spurious circularity problems (#46981)
Don't crash on non-literal computed property names during getPropertyAssignment (#48079)
Tidy up navto and find-file-references (#48106)
Show error when trying to instantiate a union of abstract and concrete constructors (#48114)
Add a test for emit of a computed property based on an aliased symbol (#47978)
fix(43154): emit typeof type for static methods with a computed name (#46923)
Describe jsxFragmentFactory option default value (#46798)
fix(40617): handle uninitialized class member with computed key (#45974)
support generic type when checking implicit conversion of symbol to string (#44578)
Note git's core.longpaths in CONTRIBUTING (#45069)
fix(44477): emit full path to access expressions in comments (#44545)
Prevent crash on code fixes on default keyword (#48028)
Require `tag` parameter and allow `Locale` object as argument to `Intl.Locale()` constructor (#48019)
Add an overload to Object.freeze that preserves literal types (#33767)
fix: add this type for Reflect.defineProperty (#33544)
Add test for call (#48015)
Add explicit assertion on somewhat commonly incorrectly passed argument (#48078)
Add import assertions to type only imports and import types to force the resolution mode of the specifier (#47807)
Esm imports of cjs files should unconditionally have a default patched on (#48062)
Update package-lock.json
fix(47946): check literal types in export assignments with declared JSDoc types (#47951)
Use full `isReadonlySymbol` check rather than declaration flags (#48064)
Add `Intl.Locale` parameter type to `toLocale[X]String` signatures. (#47811)
Add missing `getReducedType` call in `getConditionalTypeInstantiation` (#48061)
fix(47853): Convert to template string issue (#47976)
Expose text property of SourceFileLike for some Public APIs (#44599)
Don't treat a colon in a conditional expression branch as part of an arrow function (#47550)
go-to-type-definition, and find-all-refs should work for import.meta (#44364)
Revert "Use related spans for "implement abstract class" errors" (#48029)
Update package-lock.json
fix(47158): Removes comments when line variable declaration (#47407)
early return if pattern type is never (#47927)
fix(47296): add outlining spans for parenthesized expressions (#47307)
Update package-lock.json
Update package-lock.json
Only suggest `@param` codefixes in TS (#47959)
update baseline (#47960)
feat(44956): remove hyphen separator (#47777)
Standardized aka.ms links for tsc and tsconfig (#47129)
Remove unnecessary check in getNarrowableTypeForReference (#47953)
fix(47024):fix type of DateTimeFormat and NumberFormat (#47117)
feat(47281): use unknown type instead of any (#47308)
Use webworker typings for webServer (#46944)
fix issue where duplicate default exports aren't detected (#46871)
Uncalled function checks only works with single conditional (#42835)
Remove unnecessary check for misaligned complex rest parameters (#47934)
fix(47391): omit | token from jsdoc linkTag text (#47575)
feat(47619): add support for extracting jsx string literal attribute to a constant (#47624)
fix(47820): forbid extraction jsdoc (#47830)
Instantiation expressions (#47607)
fix(47261): allow linkcode/linkplain tags in see tag (#47403)
fix(47256): show deprecated on index signatures (#47400)
feat(47223): show completion in jsdoc template tag (#47317)
feat(47595): allow using private fields in type queries (#47696)
Make Intl.Locale baseName and language properties required (#47720)
mark length of readonly tuple as readonly (#47717)
Add support for formatRange to Intl.DateTimeFormat  (#47740)
Triple-slash reference type directives can override the import mode used for their resolution (#47732)
fix(47713): allow JSDoc tags on CaseClause nodes (#47741)
Eliminate redundant or meaningless elaborations in type relations (#47738)
Update package-lock.json
Allow extensionless `main`s for cjs mode packages even from an esm import (#47893)
[GH Actions] Implicitly use AUTHORIZATION header instead of PAT-in-URL (#47894)
Explicitly annotate return type of getCommentRange (#47860)
Ensure empty array literal is assignable to never[] (#47816)
Update package-lock.json
Update version to 4.7 and update baselines. (#47856)
ESM mode nonrelative imports should assume index.js entrypoints even if no package `main` is present (#47854)
Ensure subtype relation ordering for readonly properties (#47069)
Consider a symbol visible for declaration emit when it is the target of an ambient module's export= (#47835)
Correctly resolve imports ending with "." and ".." (#47850)
fix(46803): remove unused react imports with enabled react-jsxdev, react-jsx (#47247)
Enable path completions for node12/nodenext (#47836)
Update package-lock.json
Add missing isolatedModules error for `export import` (#47838)
Avoid auto-importing from barrel re-exporting index files that are likely to make an import cycle (#47516)
feat(11378): check param names in JSDoc (#47257)
fix(46611): allow to use jsdoc type on class methods (#46688)
Update package-lock.json
mergeSymbol in checker:Remove block-scoped duplicate declaration errors in plain JS (#47825)
Constructor function methods:Add two missing tag lookups (#47742)
Avoid pulling on setter type when only getter type is needed to break circularity (#47818)
fix(47787): show QF to delete parameter in getter (#47797)
Compute writeType from set accessors for union and intersection properties (#47674)
fix(47788): forbid convertToMappedObjectType QF in invalid index signatures (#47798)
Update package-lock.json
Trace document registry operations (#47785)
Log per-project FAR and update baselines (#47781)
fix(47783): show globals completion in case keyword outside of switch statement (#47786)
fix(47782): forbid super() extraction outside this container (#47784)
Update package-lock.json
Update package-lock.json
Refactor named imports to default instead of namespace when esModuleInterop is on and module is an export= (#47744)
fix(32941): include Template tag constraint to QuickInfo response (#47567)
Use 'static {}' for static fields when available and useDefineForClassFields is false (#47707)
fix(45917): show completions in string literal followed by a comma (#46970)
Auto-import perf: Do symbol name/flags filtering before cache rehydration (#47678)
Update package-lock.json
feat(27601): include JSDoc comments for destructuring arguments (#46886)
i18n:Inappropriate localization (#46924)
Bump node-fetch from 2.6.1 to 2.6.7 (#47564)
"Convert parameters to destructured object": enable for functions with just one parameter (#46945)
Update package-lock.json
fix(47670): remove import alias that uses the same name (#47676)
Update package-lock.json
support quickinfo and go-to-definition on `typeof this` (#47085)
Use node moduleResolution everywhere (#47687)
Correctly check computed property names in type-space get/set accessors (#47156)
fix typefacts of intersection (#47583)
Transform param patterns/initializers after object rest (#47095)
Bump copy-props from 2.0.4 to 2.0.5 (#47342)
Manual revert of AbortSignal.abort in webworker.generated.d.ts (#47675)
Update terminal.integrated.shell.linux config in devcontainer.json (#47192)
remove unused errors in checkGrammarModifiers (#47198)
fix(47582): skip extraction if the type node is in the range of the type parameter declaration (#47596)
Update package-lock.json
Allow usage of local value symbol merged with type-only import (#47642)
Add `assert` keyword in completions (#47644)
Revert to temporary AbortSignal fix (#47643)
Proposal: simplify auto import descriptions (#47631)
Update package-lock.json
Allow moduleSymbolToValidIdentifier to be uppercase for JSX tags (#47625)
Add codefix and completions for promoting existing type-only imports to non-type-only (#47552)
Don't block completion after end of type parameters in JSX elements (#47501)
fix: enum self reference (#47287)
Update DOM 2022-01-26 (#47623)
fix(47561): use parameter name from enclosing declaration (#47609)
Update package-lock.json
feat(42684): allow deprecated JSDoc tag to be used on aliased nodes (#47293)
Don't trace bindSourceFile cache hits (#47602)
Allow structure reuse if a declaration file within a package is updated (#47472)
Update package-lock.json
Update package-lock.json
Update package-lock.json
fix(47165): ignore spaces in goToDefinition imports (#47541)
return early from fixUnreachableCode if syntactic errors exists (#47463)
fix(47524): skip assertion on checking this in fixImplicitThis QF (#47527)
Associate paths with nodes when tracing (#47530)
Update to TypeScript 4.5.5, fix semantic lints. (#47529)
Update package-lock.json
Add a comment to `maybeSetLocalizedDiagnosticMessages`
Avoid global mutations
fix(47492): more detailed parseTryStatement error message (#47504)
Avoid crash for import code fixes with dotted require (#47433)
Modify debug assertion to avoid crashing on SyntaxList (#47500)
Update dom.generated.d.ts (#47507)
Do not show the additional file/errors table when there's 1 file with many errors (#47345)
Update package-lock.json
fix(47451): Implicit 'any' quick fix text grabs text from wrong file (#47493)
Delay "File change detected" reporting until createProgram (#47427)
🤖 Update TypeScript DOM Libs (#47445)
Add missing currencyDisplay to resolved number format options (#44006)
Deprecate ScriptElementKind.jsxAttribute (#47414)
Better reuse of package.json cache, module resolution cache, and package.json auto import filter (#47388)
fix(47438): show auto-complete for this inside class static blocks (#47460)
Bind RHS of comma expressions too (#47049)
feat(47439): omit optional key from jsx output (#47467)
Make Map constructor argument optional and nullable (#43396)
Update package-lock.json
fix(47417): allow undefined type to be added to JSDoc types (#47449)
Update package-lock.json
Deprioritize import paths made up of only dots and slashes (#47432)
Rewrite logic for JSX attribute completion detection (#47412)
Allowed non-this, non-super code before super call in derived classes with property initializers (#29374)
optimize `__createBinding`
fix(47415): don't show addConvertToUnknownForNonOverlappingTypes QF in JS (#47424)
fix(46406): add Template Literal types to decorator metadata serialization (#46913)
Add names for refactoring functions. (#47375)
Avoid printing comments on static fields twice. (#47363)
Process package.json exports with auto-import provider (#47092)
Add missing mapped type indexed access constraint (#47370)
Update package-lock.json
Update package-lock.json
fix ATA toplevel dep detection (#47164)
Use relative paths for the end of compile report (#47344)
fix(46402): create valid property keys/jsx attribute names (#46716)
Prevent merged class/namespace from overlapping with `Record<string, unknown>` (#47088)
Add `Error.prototype.cause` (#47020)
Adds a github actions workflow which pings related repos with a blank commit once a month to ensure their automation stays running (#46747)
docs(common): url link format updated (#47336)
Update package-lock.json
Use node ipc for TS Server (#46418)
Update package-lock.json
Gabritto/semicolons (#46832)
Control flow analysis for dependent parameters (#47190)
Update package-lock.json
fix(46845): Add missing "locale" field to Intl.DisplayNamesOptions (#46849)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Discourage typo fixes in PR template (#46908)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
fix merging of function and derived class (#47170)
Emit class fields as-is with `target: es2022` (#47018)
fix(47004): ignore arguments name in PropertyAssignment (#47054)
fix(47056): report errors for all properties with errors (#47057)
fix(46824): remove duplicate private identifier errors (#47116)
Update package-lock.json
update es2020.intl DisplayNames#of (#47157)
Update package-lock.json
fix(47134): show all meanings for type-only imports and exports (#47138)
fix(47062): support generic arrow function with default type parameter in tsx (#47112)
Revert change to getFalsyFlags (#47125)
Update package-lock.json
fix(44693): emit declaration of JSDoc overridden properties with different types (#46797)
Enable customDescriptionGenerator in launch template, update eslint setting (#47089)
Explicitly Omit unspreadable properties from rest type in the generic case (#47078)
chore: add packageManager field to support corepack (#46756)
use default type parameter rather than `unknown` when show quick help (#46792)
fix: do not use ts.NodeArray in factory inputs (#46843)
Add 12 more grammar errors (#47075)
Exempt tslib from indirect call transform (#47070)
Plain JS grammar errors (#47067)
fix(47043): as const cast wrong colour when using typescript 4.5.2 (#47066)
Update package-lock.json
fix(46606): show completion in jsdoc property tag (#46657)
Add a test for a destructured union with tuple members (#46656)
fix(45713) Improve error report summaries (#45742)
Update package-lock.json
Unwrap parens when checking for JSDocFunctionType in conditional expression (#46962)
fix(46998): Hover on as const shows type const = /*unresolved*/ any (#47000)
Properly union inferred template literal string types (#46782)
fix(42678): detect access to uninitialized variable in IIFE (#42776)
"No repeated property names" error in object literals is duplicated in strict mode (#46929)
Use features for selected module resolution rather than all features for type reference directives, since they can add restrictions to resolutions (#47007)
Improve isValidSpreadType check (#47010)
Completions sorting overhaul (#46703)
fix(46563): show completions at this type (#46581)
feat(46986): offer QF for using await outside of async context (#46994)
Add DanielRosenwasser to PR owners. (#47006)
fix(46345): omit temp variable for computed property name in ambient context (#46446)
fix(46195): handle numeric separators and larger integers correctly in codefix for large integers (#46389)
Add jakebailey to pr_owners.txt (#46996)
Pin chalk to ^4.1 (#46985)
Describe defaults of more options (#46498)
Don't call afterEach within beforeEach (#46963)
Update package-lock.json
fix(44639): Transpilation of optional chaining combined with type casting results in function call losing its context (#44666)
Import chalk with import() syntax (#46931)
Add function names for code fixes. (#46728)
Update package-lock.json
Update package-lock.json
Switch deferredNodes from a Map to a Set. (#46751)
Update package-lock.json
Update package-lock.json
Plain JS binder errors (#46816)
fix(46366): handle enum string access as enumMemberName (#46431)
Stop calling our own @deprecrated APIs (#46831)
enable go-to-type-definition on type nodes (#46714)
fix(42238): emit this parameter in function declaration (#46511)
Update symlink cache from AutoImportProvider resolution even if host project already contains the file via its realpath (#46830)
Allow nightly-only flags in `-insiders` builds (#46829)
implement code fix for override of js files (#45780)
Update package-lock.json
fix(43359): emit default exports with named exports that have the same names with types (#44718)
fix(46712): Add "exceptZero" for "signDisplay" option of Intl.NumberFormat() (#46740)
Revert changes to matchFiles/readDirectory made since 4.3 (#46787)
Removed replacement from jsx completions (#46767)
fix(46605): show completions in object literal parameters (#46743)
Remove unnecessary annotations/casts/aliases (#46727)
Update package-lock.json
fix(45907): don't use static member name to inherit JSDocs from instance members (#46274)
Big[U]Int64Array.at returns bigint, not number (#46733)
fix(45692): merge non-primitive in spread-union (#45729)
fix(44059): omit duplicate types (#45739)
fix(33325): allow extract refactoring on selected statement without trailing semicolon (#45765)
fix(46666): add outlining spans for comments preceding call expressions (#46682)
Add `target: "es2022"` (#46291)
fix(46615): remove useless assertion. change error suggestion for rest params (#46628)
Make specifier generation from export map information conditional on module resolution mode (#46670)
fix(46589): omit ? in method signature completion for optional methods (#46594)
Duplicate GDPR fragment from VS Code repo (#46625)
Control flow analysis for destructured discriminated unions (#46266)
Allow import assertions on esm imports under module: nodenext (#46630)
fix(46512): allow to use tag names containing keywords with - (#46546)
Improve recursion depth checks (#46599)
Properly check whether union type contains only primitive types (#46645)
Exclude identity relation from mapped type relation check (#46632)
Update package-lock.json
fix(43292): forbid highlighting multiline template strings (#46531)
Bump version to 4.6 and accept baselines. (#46612)
Check for type parameters on original type when getting type argument completions (#46614)
remove placeholders in class member snippets (#46598)
Set hasAddedOrRemovedSymlinks when discovering an existing file by its link (#46569)
Enable auto imports in member snippet completions (#46592)
Add error on new module/moduleResolution modes when used in non-nightly TS (#46557)
Update GDPR comment formatting (#46585)
Improve errors on module: node12 and extensionless relative imports (#46486)
Add method signature completions (#46370)
🤖 Update TypeScript DOM Libs (#46222)
Update package-lock.json
Check for array types when instantiating mapped type constraints with `any` (#46218)
Support resolveJsonModule in new module modes (#46434)
allow `typeof this` after for-loops (#46181)
Slightly less conservative check in isConstraintPosition (#46526)
Always cache relations involving intersection types (#46523)
Bypass caching in removeStringLiteralsMatchedByTemplateLiterals (#46525)
Update package-lock.json
Update package-lock.json
Bind assignments to 'this' within static blocks in JS files (#46472)
fix(46433): forbid using keywords as parameter names (#46459)
Defer computation of isDistributionDependent to avoid circularities (#46474)
Update package-lock.json
Simplify relationship check for conditional type on target side (#46429)
fix(46466): add missing async keyword before type parameters (#46467)
Pass absolute path to directoryExists (#46086)
@link parses trailing <...> as part of linkName (#46450)
@link: format trailing () as part of linkName (#46428)
Update package-lock.json
Remove defaultValueDescription: "n/a" from options (#46280)
Improve logic for choosing between co- and contra-variant inferences (#46392)
Avoid hard-wired build-tree paths
`scripts/build/utils` simplify exec
Error on mapped type w/properties (#46346)
Update package-lock.json
Changes to enable the module conversion script
Update package-lock.json
fix: ES6 Modules => ES Modules in error messages (#46378)
Import assertion: do no parse } if { is not present (#46388)
fix(45799): skip checking arguments used as a key in object literals (#45814)
Update package-lock.json
No error for markdown links in @see (#46348)
fix(46305): omit converting jsx (react-jsx) spread attributes to Object.assign for ES2018 and up (#46317)
fix(suggestion): Remove 80001 from cjs/cts files. (#46270)
Update package-lock.json
Pass symbol under inspection into checkIndexConstraints (#46350)
Set impliedNodeFormat on sourceFiles maufactured in watch mode (#46349)
fix(39744): make template literals more spec compliant (#45304)
Improve checks for infinitely expanding recursive conditional types (#46326)
Update package-lock.json
Set import mode on synthetic imports (#46327)
Improve perf of unions with many primitives (#45220)
fix(45336): add a blank line before the comment expression to avoid disrupting return statement (#46287)
Update package-lock.json
Update package-lock.json
Auto-imports: fix some exports being incorrectly stored as re-exports of others due to key conflict (#45792)
Update package-lock.json
Use a binary search when looking for the token at a given position (#46250)
In plain JS files, only suggestion did-you-mean errors (#46151)
Accept new moduleResolution options on commandline (#46239)
Update package-lock.json
Properly support scoped package self name lookups (#46212)
Only set package data map under watch mode (#46211)
Limit package.json realpath lookup to only successful resolutions (#46209)
Feat/quick fix for types (#42126)
Update package-lock.json
Update package-lock.json
Update package-lock.json
improve response time of invalid rename attempts (#46158)
Follow and respect export maps when generating module specifiers (#46159)
Modify synthetic default generation code for dual-mode module resolution (#46156)
Allow for class static vars to be called static (#44813)
feat: display the tsconfig generated when running tsc --init (#45930)
fix(sourcemap): accept a sourceMappingURL that ends with a newline (#45983)
Update package-lock.json
Track source and target relationship stack depth seperately, only increase on change in value (#41821)
Minimal fix for auto-importing node_modules in node12/nodenext (#46148)
fix(45919): allow using JSDoc types for arrow function with type predicate (#45952)
feat(36080): forbid to use JSDoc visibility modifiers in private fields (#46056)
Update package-lock.json
Add `module: es2022` (#44656)
fix(26635): allow casts only when JSDoc type directly attached to an expression (#45960)
fix(44021): reference jsx pragma when JsxFragment is used (#45894)
fix(45876): Remove "ascii character" order from docs for Float64Array.sort (#45883)
fix(45999): show parameter inlay hints before initializer (#46040)
Update parameter types of RegExp compile method (#46038)
Update package-lock.json
Update package-lock.json
`keyof` should always include remapped keys (#45923)
LEGO: check in for main to temporary branch. (#46093)
LEGO: check in for main to temporary branch. (#46092)
LEGO: check in for main to temporary branch. (#46091)
LEGO: check in for main to temporary branch. (#46090)
LEGO: check in for main to temporary branch. (#46089)
LEGO: check in for main to temporary branch. (#46088)
Updates the DOM APIs (#46080)
Type-only import specifiers (#45998)
Make `never` inferences with template literal types only in special cases (#46075)
Update package-lock.json
Properly handle missingType in intersections (#46052)
Update package-lock.json
Update package-lock.json
`moduleResolution: node12` support (#45884)
Default tsc --init to es2016 (#45934)
Resolve with -lib in TypeScript lib node lookup (#46046)
Transform JSX spread children (#45693)
ES private field check (#44648)
Update package-lock.json
fix(45607): add snippet for type only import statements (#45873)
Adds more Intl.ResolvedDateTimeFormatOptions, and hooks up Intl for ES2021 (#45905)
Create type aliases for unresolved type symbols (#45976)
Revert "Stop looking at binding patterns for type argument inference" (#46013)
Update package-lock.json
Avoid Promise<Awaited<T>> in return type inference (#45925)
Added Jsx Snippet Completion feature (#45903)
Make isDefinition aware of declaring symbol (#45920)
Update package-lock.json
Remove referenceGroups/noReferences from fourslash (#45988)
Update github workflows node10 -> node16 (#45996)
fix(45987): fix pasring invalid names (#45994)
Update package-lock.json
fix(45489): add test to cover comparison operator with intersection type (#45936)
Import assertion (#40698)
fix(45802): keep children of mismatched jsx element (#45839)
Update package-lock.json
Update package-lock.json
Simplify a branch of the Awaited type and clean up comments (#45918)
Remove vestigial baselines (#45916)
fix(45850): Preserve const enums should keep import refs for exported const enums exported via named exports (#45858)
Update pr_owners.txt (#45911)
Update package-lock.json
fix: add corresponding message for override error in js files (#45656)
Support resolving `@typescript/[lib]` in node modules  (#45771)
Go back to the old spelling of NumberFormatPartTypes to not break DT (#45889)
Update package-lock.json
fix(44880): allow narrowing aliased conditions for catch variables (#45797)
feat(45679): support 'did you mean' diagnostics for string literal union (#45723)
Update package-lock.json
Adds back NumberFormatPartType to the global types from intl (#45843)
fix(45840): remove duplicate entries in diagnosticMessages.json (#45841)
Update package-lock.json
Intl fix for nightly (#45820)
Update package-lock.json
Adds 'Awaited' type alias and updates to Promise.all/race/allSettled/any (#45350)
Track non-null unknown types in control flow analysis (#45575)
Update package-lock.json
Add `--preserveValueImports` (#44619)
Tail recursive evaluation of conditional types (#45711)
Allow type comparison when target is generic mapped type with key remapping (#45700)
feat(45010): handle unclosed fragment in `getJsxClosingTagAtPosition` (#45532)
Intl 2021 Updates (#45647)
Add support for raising if you set a tsconfig entry of target/module with the right setting in the root (#44964)
Update package-lock.json
Stop looking at binding patterns for type argument inference (#45719)
Include index signatures for tagged primitives in keyof (#45773)
Update package-lock.json
Update package-lock.json
Update package-lock.json
improve error message for using property of type as type (#45354)
Don't suppress comments when adding or removing braces to/from arrow function. (#45597)
fix(45687): allow selection to next token (#45695)
Revert "fix(45501): don't remove spaces between empty object literals with enabled insertSpaceAfterOpeningAndBeforeClosingEmptyBraces (#45514)" (#45682)
Remove unused code coverage command (#45684)
Minor fixes to "Convert To Async" refactor (#45536)
Update package-lock.json
Update package-lock.json
Close package json watches in watch mode on close (#45642)
Update lib types to mark Annex B as deprecated (#43710)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update es5.d.ts (#45454)
Don't include literals from enum members in completions (#45588)
Use realpathSync.native on case-insensitive file systems (#44966)
Update packages (#45587)
Update package-lock.json
Properties on intersections should be readonly only if all declarations are (#45263)
Let AutoImportProviderProject resolve JS when allowJs and maxNodeModulesJsDepth allows (#45524)
Add rich navigation indexing action (#45431)
fix(45501): don't remove spaces between empty object literals with enabled insertSpaceAfterOpeningAndBeforeClosingEmptyBraces (#45514)
Adds a script for removing unused diagnostics (#44324)
Update CONTRIBUTING.md (#45552)
Only provide hints for simple literals when 'literals' is specified. (#45557)
Some cleanup around inlay hints types to get more-precise checking. (#45391)
Restore HTMLDocument constructable value in DOM (#45554)
Update package-lock.json
fix for 45006 (#45020)
feat(44888): omit completions in an object expression with an instantiated class type (#45044)
feat(16755): show QF to declare missing properties in a call expression with an object literal argument (#44781)
feat(44720): allow renaming string literal in switch/case (#45084)
support contextual return type of iife (#45007)
Reuse checker's property accessibility check for completions (#45388)
Update package-lock.json
`getReferencesAtLocation`: fix handling of destructoring imports
Update package-lock.json
Increase type instantiation depth limit (#45025)
feat(18147): skip uncessary parenthesis (#44769)
feat(43963): change var to a parameter in destructured function parameters (#44767)
Expose getTypePredicateOfSignature (#44863)
fix(45294): show parameter inlay hints for template strings (#45305)
Create SECURITY.md (#45474)
Enable `max-statements-per-line` lint rule (#45475)
Update package-lock.json
fix(45233): allow type assertion in ExportAssignment with JSDoc type definition (#45342)
fix(45417): show inlay hints for null and literal-like identifiers (#45426)
Update package-lock.json
fix: nodeWillIndentChild judge for BinaryExpression with JsxElement child (#44695)
Update package-lock.json
Update package-lock.json
Update tsc-instrumented for project build (#45383)
fix(45393): show parameter name hints for unary literal expressions (#45399)
fix(45345): throw an error on overridden member that is defined in multiple interfaces (#45352)
Use getFileAndProject in session provideInlayHints to ensure language service updates are applied (#45394)
Update package-lock.json
Update package-lock.json
Bump version to 4.5.
Improve error message TS1210 (#44892)
feat(45163): add QF to declare missing jsx attributes (#45179)
Update package-lock.json
Enable events on web server (#45313)
Revisions for the new --help (#44800)
Some tweaks for backtick strings
Update package-lock.json
Migrate over 4.4 lib dom and webworker (#45324)
Store symbol table map key in CachedSymbolExportInfo (#45289)
`convertStringOrTemplateLiteral.ts`: Re-fix `escapeStringForTemplate`
fix(45221): suggest unknown symbols in type positions (#45323)
Visit children of jsdoc type aliases in the binder (#45312)
Do not classify Infinity and NaN (#44778)
Update package-lock.json
fix(45224): show inlay hints for setter parameter (#45229)
fix(45102): do not suggest refactoring for functions contains arguments reference (#45116)
Dev: Have a clickable link for a new baseline created (#44552)
Update package-lock.json
fix: omit inlay hints for setters (#45228)
Ensure all `SortText` entries have the same length (#45292)
Add test for intersection narrowing bug (#45296)
expose getImmediateAliasedSymbol() publicly (#44644)
Replace non-null assertion with optional chain on assert nodes (#43788)
fix(45192): show implement interface QF for re-exported types (#45245)
Actually instantiate the type of the annotation used for contextual types (#45285)
Update package-lock.json
Update package-lock.json
Update package-lock.json
fix(44812): add outlining spans for comments inside blocks (#44847)
Use arrow functions to bind globals correctly in web scenarios (#45242)
Avoid provide hints for binding patterns (#44961)
Avoid no-op export map updates (#45238)
Update package-lock.json
Allow narrowing for any left-hand in operand (#45152)
fix(45225): do not show add missing member QF for libraries files (#45231)
Update package-lock.json
feat(45210): add inlay hints for getters and setters (#45214)
Update package-lock.json
fix(45182): allow property access in arrow function (#45193)
fix(44837): add graceful recovery for require completions (#45151)
Add transitive pnpm import statement completions test (#45186)
Supress hints for access expr too (#45121)
fix(45114): throw an error when using '#' as an identifier (#45124)
fix(45157): omit error after property declaration without semicolon (#45165)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Consider module augmentations in files referenced by imports in watch/incremental (#45156)
Filter auto imports by symbol flags before resolving module specifiers (#45168)
Update package-lock.json
Update package-lock.json
Check cancellation token during exportInfoMap generation (#45138)
feat(42639): allow narrowing type in 'in' operator with the identifier on the left side (#44893)
Update package-lock.json
Don’t try to create auto import provider when host program doesn’t exist (#45126)
Detect preference for U`node:`-prefixed node core modules (#45080)
Update package-lock.json
Check for watched directories before clearing map (#44947)
fix(45049): fix diagnostic for missing property initializer (#45052)
fix(44701): allow renaming string literal in rhs/lhs of equality (#44708)
Properly propagate silentNeverType in intersections (#45073)
Dont swallow declaration emit errors when issued on nodes without names (#44995)
Shorten baseline names (#45054)
fix(44168): exclude adding export to existing exported identifier (#44755)
fix(44902): resolve members in Union or Intersection types (#44904)
Avoid bogus circularity error on context sensitive constructor property assignments (#44601)
Specific diagnostic suggestions for unexpected keyword or identifier (#43005)
chore(typo): fix comment (#45016)
Update package-lock.json
Support syntactic diagnostics in partial mode (#44859)
Update package-lock.json
Watch mode watches for changes in package.json files used in resolution (#44935)
Add collision check for 'Reflect' when using super in static initializers (#44876)
Update package-lock.json
Update package-lock.json
fix(35050): Decorator emit incorrect within `try` block (#41951)
Detect circularities printing recursive conditional types (#43733)
Update package-lock.json
fix(44926): change noImplicitOverride description (#44929)
Update package-lock.json
Apply disableReferencedProjectLoad to getOriginalLocationEnsuringConfiguredProject (#44836)
Improve "Convert to template string" with template-strings
Consistently ignore attributes with hyphenated names in JSX (#44873)
Refactor export map cache to not store transient symbols (#44816)
fix(44868): handle import type in shorthand assignment (#44881)
Update package-lock.json
Update package-lock.json
Change PerformanceObserver to be compatible with new Node types (#44884)
Add evaluation tests for class static initializers (#44878)
Update package-lock.json
Update package-lock.json
Further optional delete corrections (#44862)
Correctly check for 'delete' on optional properties in 'exactOptionalPropertyTypes'. (#44854)
Update LKG to enable improved narrowing in 4.4. (#44842)
Update package-lock.json
feat(44799): allow auto import codefix for shorthand property assignment (#44827)
ensure export modifier is used before default modifier (#44570)
Update package-lock.json
fix(44448): disallow 'delete' operator for optional properties (#44612)
Validate symbol-named properties against symbol index signatures (#44815)
fix(44725): handle this parameter in tagged template call (#44734)
Update package-lock.json
Reduce exceptions (#44710)
feat(44736): add go-to-definition on overridden members (#44740)
Issue unawaited promise error on symbol-less expressions (#44491)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Forbid duplicate tests only in compiler+fourslash runner (#44752)
Change static fields emits (#43114)
Resolve module specifiers for auto imports in completion list (in incomplete chunks) (#44713)
fix(44738): fix eslint rules (#44739)
Migrate latest dom types into libdom.d.ts  (#44684)
Control flow analysis of aliased conditional expressions and discriminants (#44730)
Proposal class static block support (#43370)
Add inlay hints support (#42089)
Update package-lock.json
Update package-lock.json
Skip typedef in services getJSDocTags (#43677)
regard TemplateLiteral as discriminant property (#44569)
json modules should not treated as affecting global scope (#44690)
avoid computing a full shape for indirectly invalidated files (#44090)
Indirect calls for imported functions (#44624)
Improve parsing in await and yield context (#44680)
importModuleSpecifierEnding changes .ts string completions to .js (#44602)
Report exact position of invalid characters in scanner (#44671)
Index signatures for symbols and template literal strings (#44512)
`getEditsForFileRename`: fix `updateTsconfigFiles` w/ empty `include`
Update package-lock.json
Update package-lock.json
fix(44637): add spaces between exports assignment equal token (#44655)
fix(44465): remove only unused declarations instead of the entire line (#44490)
fix(44377): omit type alias declarations from JavaScript (#44378)
Allows plugin to register commands (#44291)
Forbid duplicates in baselines (#44652)
Make files safe for Windows (#44651)
Rename strictOptionalProperties -> exactOptionalPropertyTypes and remove from strict family (#44626)
`services/utilities/getMeaningFromLocation()`: fix w/ export specifiers
feat(28491): add QF to declare missing properties (#44576)
Make export-module and reference maps invertible (#44402)
allow `this` in typeQuery (#43898)
Slightly more conservative check in isConstraintPosition function (#44621)
Don't attach declarations to symbols in mapped types with 'as XXX' clauses (#44609)
support JSDoc comments inherited for parameter properties (#44329)
Skip base type checks that can cause circularities (#44615)
New command line help developer experience. (#44157)
Update descriptions for all compiler options (#44409)
Issue "Cannot find name did-you-mean" errors as suggestions in plain JS (#44271)
Update package-lock.json
Correct tuple relations in --strictOptionalProperties mode (#44568)
Ensure singleton types always compare identical (#44565)
Update package-lock.json
Improve __spreadArray perf, and other fixes related to SpreadElement (#44527)
Make handleDtsMayChangeOf void-returning (#44322)
Update package-lock.json
Init (#44206)
Include actual generated module specifiers in module specifier cache (#44176)
Add missing JSXSpreadAttribute case to JSX completion logic (#44514)
Re-name really long file (#44413)
fix(43298): copy comments on converting from arrow function to anonymous function (#44236)
feat(44263): add quick fix for misspelled override error (#44266)
Include type reference directives in symlink cache, wait until program is present to create it (#44259)
Update package-lock.json
Add SolutionBuilderHostBase.getCustomTransformers to be used when emitting. (#44489)
Update playground build script (#44456)
Update package-lock.json
Update the version in baselines (#44447)
Do not incorrectly add line separators for non-synthetic nodes when emitting node list (#44070)
Update package-lock.json
fix: check if sysFormatDiagnosticsHost is defined (#44344)
Update LKG. (#44423)
Handle strict flag when writing tsbuildinfo (#44394)
fix(44273): preserves 'override' modifier in JavaScript output (#44290)
Add flag to change `catch` variables' default types to `unknown` (#41013)
 Improve non-ambient class and function merge error  (#44352)
Rename TSConfig option categories (#42514)
Update package-lock.json
Tsserver tests can be baselined (#44326)
Update package-lock.json
Strict optional properties (#43947)
Switch references to master to main in the codebase + validating infra post-main migration (#44347)
Add a testcase that fails when someone tried to make an Object.keys PR (#44368)
Update package-lock.json
Consider inferences between mapped type templates lower priority (#44126)
fix(44123): forbid convert to async for generator callbacks (#44147)
Update package-lock.json
Dont update timestamps of output files if noEmit was specified (#44306)
Move string trim methods from utilities to core (#44308)
Add type brands for fileId and fileIdListId (#44280)
Add traces for module resolution reuse (#44282)
Update package-lock.json
redirectsTarget is keyed with Path (#44278)
Ensure AutoImportProviderProject can share source files with main program (#44274)
More updates to program reuse with different option changes (#44276)
Use correct state when getting it from redirected program (#44275)
fix(44249): JSX: "extract to constant" generates invalid code when using fragment syntax (#44252)
Add unqualified JSDoc member references (#44202)
Cache parsed path mapping patterns (#44078)
Update package-lock.json
feat(44190): check misspelled base members in override checks (#44213)
Refactor tsbuild watch tests (#44258)
Properly remove generic types that are constrained to 'null | undefined' in getNonNullableType (#44219)
IntelliSense doc string.replace typo (#41385)
IntelliSense doc string.replace typo (#41385)
IntelliSense doc string.replace typo (#41385)
IntelliSense doc string.replace typo (#41385)
Update package-lock.json
don't duplicate function properties when emiting definitions of overload signatures (#44235)
Simplify or optimize regexes with polynomial time worst cases (#44197)
Ensure static index signatures have an errorNode available (#44129)
Implement a two-way mirroring between the wiki and its public repo
Add @linkcode and @linkplain tags (#44208)
Avoid `convertExport` when there's a non-identifier or a bogus one
Kick out of normalizePath if there's nothing to do (#44173)
fix: internal createSignature support undefined declaration (#44109)
Update package-lock.json
support QualifiedName when narrowing inside loops (#43592)
Avoid calling replace in normalizeSlashes when it would do nothing (#44100)
Add jsdoc member names: Class#method (#44150)
Private identifiers use standard identifier scanning (#44184)
Move class name capture for private state until after declaration evaluates (#44186)
Correct path segment regex (#44149)
Improve parser recovery for unclosed/mismatched JSX elements (#43780)
fix(WeakMapConstructor): readonly iterable items (#43905)
Error for abstract property with initialiser (#43615)
Update package-lock.json
Revert #43460 and #40884 (#44175)
Preserve generics in contextual types for rest arguments (#44122)
Update package-lock.json
improve jsdoc for array fill methods (#43627)
fix(43799): Support bigint type for Intl.NumberFormat.formatToParts (#44015)
fix(43796): Sort @deprecated completions lower than others (#43880)
feat(eslint): consistent-type-assertions (#43556)
`skipParenthesesUp()` is exactly the same as `walkUpParenthesizedExpressions()`
Update package-lock.json
Generate SourceMap mappings string using array of character codes and fewer String.fromCharCode calls (#44031)
Don’t offer import statement completions at `from` position (#44125)
Simplify codeql github action (#44124)
Update package-lock.json
Dont allow generic narrowing when contextually typed by a binding pattern (#44081)
Update package-lock.json
Cache accessibe symbol chains and serialized type parameter name generation (#43973)
Loosen up the first argument type for `String.raw`
fix(43879): forbid async in the left hand in a for-of statement (#43886)
fix(43030): fix instantiated null/undefined type from JS initializer (#43933)
Update package-lock.json
Bump version to 4.4. (#44028)
Test for  Update the type reference cache with correct project options (#44008)
Update package-lock.json
Update diagnostic message and quickfix for parameter property (#44010)
Update package-lock.json
Update the type reference cache with correct project options (#44004)
Don't eagerly get apparent type of spread expression contextual type (#44002)
Revert #35877 - fix receiver on calls of imported and exported functions (#43993)
Add writeFile and customTransformers to build and buildReferences (#43984)
Remove accidentally added file in baselines (#43998)
Support semantic highlights for JS files  (#43992)
Correctly use ownMap from module resolution cache (#43986)
Improve errors for incorrectly nested export default (#43967)
Update package-lock.json
Revert "typeRelatedToSomeType passes through intersectionState (#43707)" (#43983)
Dont allow namespace reexport symbols when looking up valid local names (#43969)
When directory watcher is invoked with any file from node_modules package, invalidate for file paths in that package (#43974)
fix(43939): forbid converting getters to async/await (#43944)
Update package-lock.json
Allow filterType to consider union constraints of non-union types when determining never-ness (#43763)
Unwrap substitutions on conditional check types before comparing them (#43888)
Add single-element fastpath to getSupertypeOrUnion (#43934)
fix(43957): insert Override keyword after static modifier (#43959)
Update package-lock.json
Use options from referenced project for including resolved imports in the file when using sources of project reference (#43914)
Update package-lock.json
Displayparts resolves non-values in link tags (#43903)
Use project relative preference for declaration emit (#42232)
Handle localness in special cases by checking exported variable assignment (#43851)
getExternalModuleMember:always resolve alias of moduleSymbol (#43718)
Update package-lock.json
Simplify arity errors, rewording spread errors (#43855)
Complete `constructor` keyword after property declaration (#43654)
fix(43408): emit nullable/optional types on getters (#43476)
Use single quotes consistently in diagnostic messages. (#43634)
Update package-lock.json
Enforce keyword order of `abstract` and `override` (#43829)
Allow `override` as parameter property (#43831)
typeRelatedToSomeType passes through intersectionState (#43707)
Update package-lock.json
Relate non-augmenting subtypes without resorting to structural comparison (#43624)
Add instantiation rules for reverse mapped types (#42449)
Update handbook link in readme (#43813)
Refrain from attempting to perform parameter fixing on a generic signature multiple times (#43835)
Update package-lock.json
Don’t create invalid type-only imports during add missing import (#43828)
Contextual typing checks property assignments for type annotation (#43598)
Update package-lock.json
update contextual discrimination to include omitted members (#43633)
Update package-lock.json
fix(43559): allow renaming in files with no-default-lib enabled (#43579)
Omit spaces after https in jsdoc comments (#43800)
Compute dervied generic-ness for substitutions and create lower priority inferences for substitutes (#43765)
Don’t allow an object literal with a spread as a fallback for destructuring a property not present in all constituents (#43783)
fix(42829) ignore preceeding jsx whitespace (#43452)
Update package-lock.json
Module Resolution and Type Reference directive cache updates and its API changes (#43700)
Handle getter setter quickInfo (#43769)
Remove pin, it’s fixed (#43766)
Comment copy edit
Add `infer T` constraint inference rule matching up mapped type templates across check/extends types (#43649)
Pin octokit types (#43762)
Update package-lock.json
Completion list for type literals in type arguments (#43526)
Added skipDestructiveCodeActions argument to organize imports server command (#43184)
Instantiate getter when infering setter parameter value (#43564)
Check type flags before checking multiple-meaning object flags (#43745)
Stop checking getter/setter compatability twice (#43741)
Clean up ObjectFlags enum (#43732)
Use faster, stricter prop type comparison when merging props in union prop creation (#43696)
Skip up-to-date checks during force build (#43666)
Remove preprinter, add parenthesizer callback to emit (#43652)
Wire up 'writing' parameter through protected derived class detection (#43455)
Update package-lock.json
Don't re-alias top-level type aliases with local type aliases (#43701)
Reducing tsbuildinfo size further (#43695)
Update package-lock.json
Node factory should insert override modifier between static and astnc (#43699)
Enforce keyword order between override and static/async (#43660)
Do not erase signatures in getSignatureOfTypeTag (#43688)
Update package-lock.json
Consider identical instances of the same symbol equivalent when creating union and intersection properties (#43560)
Expand exception to contravariant constraint elision to all type variables (#43599)
Add telemetry properties for import statement completions (#43664)
fix(43444): add support JSDoc function signatures on returned function expressions (#43607)
Add jsdoc to all js statements (#43659)
Reinstate constraint check for template literal types (#43661)
Trim indexed access and type variable constraint error output (#43540)
Don’t error for missing await when promise is referenced in condition body (#43593)
@link and @see resolve C.m as a class property reference (#43625)
Don't start jsdoc tag before whitespace (#43602)
Catch hover on as const (#43588)
Update package-lock.json
Update package-lock.json
Process only existing files and directories in the test harness
ignore static and declared member if checking override (#43569)
Improve rendering of JSDoc comment text with displayparts (#43390)
While writing tsbuildinfo sort the properties of compiler options to make sure they stay same if nothing changes. (#43601)
Update package-lock.json
Specified diagnostic for CLI flags mismatched with/out --build (#43199)
Properly handle tagged primitives in control flow analysis (#43538)
Again: Improve error messages for empty DOM interface property access (#43007)
Corrected parsing for decorators on 'this' parameters (#43175)
Gh 41788 incorrect output for esprivate with nested class in esnext (#42663)
Update package-lock.json
Use control flow to type CommonJS exports (#42751)
fix(43495): insert Override keyword after accessibility modifier (#43504)
fix(43535): preserves 'override' modifier in JavaScript output (#43536)
Update user baselines +cc @sandersn (#42842)
Enforce `override` precedes `readonly` (#43545)
fix(43347): fix crash occurred when export type to existing commonJs imported name (#43369)
Always grammar checker for override (#43544)
fix(43160): improve error location for functions without explicit return (#43367)
Add asserts to type only symbols meaning exclusion (#43382)
Go to definition: pass `unverified` through server (#43483)
Handle document Registry to distinguish between files with same name and document registry key(compiler options affecting source file) but different ScriptKind (#43474)
fix quickinfo of narrowed private filed (#43356)
fix(42605): support refactoring for export default assignment without equal (#42936)
Make origin union cache key unique for key lists still under construction (#43339)
Allow nested reverse mapped type printback (#42485)
When reusing input type nodes, only instantiate the type for comparison if it is a this type (#42584)
fix(43316): omit to suggest converting to async function if a void is explicitly returned (#43358)
Do not covariantly mix in constraints from contravarrying positions (#43439)
Add grunt user test (#43510)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Disabled 'used before initialization' error for optional properties (#43100)
Add @link jsdoc auto-complete (#43475)
Add @deprecated to tree walk (#43473)
Added BindingElement to isSomeImportDeclaration (#43387)
Error if assignment after block (#41115)
Only issue matching token errors on non-dupe locations (#43460)
Update package-lock.json
Do not delete output file names that are same as input file name (#43448)
fix(43313): add parentheses to a type assertions (#43315)
"fix(services): convert to es6 module generate invalid code with .default" (#43309)
Consider base types in isArrayLikeType (#43435)
Adding Diagnostic message for missing ']' and ')' in Array literal and conditional statements (#40884)
Remote duplicated assignment (#43399)
fix(43215): disallow using never as an interface name (#43217)
Consider class field properties to redeclare parent definitions (#43194)
Improve (and actually use) "always truthy promise" error (#43023)
Update package-lock.json
Support relations and inference between template literal types (#43361)
Rename isWrite -> writing (#43405)
Update package-lock.json
Variant accessors (#42425)
--noImplicitOverride (#39669)
Add static index signature (#37797)
Import statement completions (#43149)
Cache resolved project references and watch wild card directories from them to update them (#42929)
Template literal types for contextually typed template literal expressions (#43376)
Update package-lock.json
Port realpath workaround from release-4.2 (#43384)
Don't build type catalog during server tracing (#43354)
Use 'abstract new' in InstanceType and ConstructorParameters (#43380)
Update typescript-eslint to latest (#43381)
`getSemanticDocumentHighlights`: don't fail...
Update package-lock.json
ES private class elements (#42458)
`deleteDeclaration`: don't crash on the top node.
Use last detected JSX import source pragma as canonical source, rather than first (#43351)
Do not calculate signatures if old state is not used (#43314)
@link support, second try (#43312)
Delete issue_template.md (#43320)
Adjust scanning of keywordy jsx namespace names, add grammar error for jsx dotted names containing namespace names (#43104)
Update package-lock.json
Accepts baseline change caused by #43035 (#43322)
Update package-lock.json
Use shared binary trampoline in checker (#43035)
Improve narrowing of generic types in control flow analysis (#43183)
fix CommonJs modules no longer affecting the global scope (#43090)
Made TS6059 rootDir validation consistent for programmatic usage (#43145)
Only catalog types when tracing (#43304)
Normalize target type after null-stripping unions in relationship checks (#43202)
Revert "Editor support for link tag (#41877)" (#43302)
Editor support for link tag (#41877)
fix(43254): show named tuple member type (#43273)
Update package-lock.json
Refactor the test for easy maintainability (#43262)
Update package-lock.json
Emit readable BuilderFileEmit kind (#43221)
Improvements to dts emit for tsbuildinfo (#43205)
Update package-lock.json
Bigint constructor forbids object null undefined (#43204)
Updated error message for TS2539 (#39827)
Build info baseline improvements (#43200)
Add missing relationship allowing a type to be assignable to a conditional when assignable to both branches (#30639)
Bloomberg computed property name fix (#43197)
Add a test for JSX namespace lookup with `jsx: preserve, jsxImportSource` (#41676)
Accept generics for defineProperty (#42424)
Don't crash when renaming a JS property declared via module.exports (#40297)
fix(41027): handle unused static members (#41103)
Update package-lock.json
Add target: ES2021  (#41239)
fix(42265): Error accessing abstract property in constructor via destructuring (#42276)
Update package-lock.json
Ensure that when new file affecting global scope is added, the signatures are updated (#43084)
Optimize the size for tsbuildinfo (#43155)
Clearifies protected error message (#42599)
Don't inherit jsdoc tags from overloaded signatures (#43165)
fix(42380): include JSDoc comments in declarations for static/prototype methods (#42454)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Exclude enum/number compatibility rule from comparable relation (#42472)
Remove undefined from optional properties when inferring to index signatures (#43086)
Update package-lock.json
Update parseInt parameter name and jsdoc (#42756)
Unnecessary elaboration about not being assignable to type parameters (#42952)
Properly instantiate inferred constraints in conditional types (#42747)
Update package-lock.json
Relax requirements on index signatures to 'any' when a type also contains a string index signature to 'any' (#43065)
fix(39836): allow type declaration/unknown type in catch arguments in JavaScript files (#42392)
Expose 'reservedInNestedScopes' option when creating temp and loop variables (#43083)
Update the DOM: March 03, 2021 (#43070)
Do a shallow clone for Docker tests. (#42966)
Update package-lock.json
capture thisArg of optionalChaining in parens (#35494)
fix receiver on calls of imported and exported functions (#35877)
Update package-lock.json
Added tests
Delete old, different-case name of quickInfoJSDocTags.baseline (#43052)
Move fixed chunk size polling as a watch option and move it out of server (#42542)
Baseline completions and signature help (#43049)
fix(43006): skip trivia in a function name (#43021)
Add undefined to Symbol.valueDeclaration (#43033)
fix(42765): require should not work in ts files (#42792)
Update project.ts (#42900)
typo (#42899)
Update package-lock.json
Only filter ignored paths from module specifier generation if there exists a better option (#43024)
Support go-to-definition for imports of arbitrary files (#42539)
Add undefined to Symbol.declarations' type (#42975)
Update package-lock.json. (#43028)
Add 'data' property to completion entry for better coordination between completions and completion details (#42890)
Tracing: dump more information about types (#42962)
Update package-lock.json
Optimize checking involving large discriminated union types (#42556)
Update package-lock.json
Update package-lock.json
Refactor emit substitution into transform (#42676)
Remove special `any` assignability for numeric index signatures (#41660)
Properly handle duplicate enum types in type inference (#42943)
Expose EncodedSemanticClassificationsRequest in protocol.d.ts (#42640)
Use yarn resolutions to inject nightly TS version across whole workspace in fabric test (#42961)
Update editorServices.ts (#42951)
Type lookup in getIntrinsicAttributestypeFromJsxOpeningLikeElement should match getIntrinsicTagSymbol (#42819)
Update package-lock.json
fix(42923): add go-to-definition on unresolved shorthand properties (#42924)
Do not cache directory structure for symlinked directories (#42868)
Update package-lock.json
Never-reducing intersections are not untyped function call targets (#42917)
Base signatures resolve only the type parameters local to the signature, not all type parameters (#42703)
Bail when comparing a specialized form of an already ongoing comparison (#42727)
Refactor to simplify project references tsc-watch and tsserver tests (#42926)
Improve JSON parser error recovery (#42657)
fix(42833): add return type to methods with overloads (#42881)
Update package-lock.json
Extend the `MetaProperty` check to work for `new.target` too
Add missing MetaProperty stuffs
Eliminate well known symbols as a concept in the checker and rely on unique symbols (#42543)
Combine multiple overloads into a single contextual signature (#42620)
fix(42339): skip return if spread type is wrong
Update package-lock.json
Make 'calendar' and 'numberingSystem' open strings in es2020.intl. (#42886)
improve isRequireVariableDeclaration parameters (#42865)
Update package-lock.json
Update npm in user tests (#42841)
fix(42368): omit converting jsx spread attributes to Object.assign for ES2018 and up (#42554)
feat(lib/es2021): Add type parameter to `FinalizationRegistry` (#42274)
Improve error messages for computed class property names (#42675)
Update scriptInfo.ts (#42855)
Update package-lock.json
Improve @template lookup and resilience (#42851)
Specified diagnostic for iterating known array type without --downlevelIteration (#40070)
fix(41740): disallow renaming/exclude from references default keyword (#41947)
Provide completion for partial expression on closing jsx tags (#42029)
Check for missing type parameter names in JSDoc template tags (#42017)
Reduce void | undefined only in conjunction with subtype reduction (#42846)
Expand extractSymbol ranges (#42770)
Update user baselines +cc @sandersn (#42611)
fix(37578): Deprecate variable name AllowQualifedNameInPlaceOfIdentifier (#38726)
fix: fix RelativeTimeFormat type definition (#39661)
Ignore .devcontainer for npm (#42826)
Add a basic dev container (#42041)
Add error for missing await in conditionals
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update package-lock.json
--inspect can no longer be used as a flag through gulp (#42701)
fix(42519): fix infer function return type quick fix with arrow functions without parens (#42532)
Refactor project references and source map tsserver tests so they are inline for easy editing (#42782)
No did-you-mean-to-call error on casts Part 2 (#42779)
No did-you-mean-to-call error on casts (#42626)
Update package-lock.json
feat(42735): add single line comments to selection ranges (#42763)
fix(42133): fix instantiated undefined type from JS initializer (#42662)
Avoid getting undefined `callSignatures`/`constructSignatures` in `getPropertyOfType`
Improve error message for overload that takes spread arguments
Refactor the tracing namespace organization
fix(42714): do not show inferFunctionReturnType QF on function body (#42737)
Update package-lock.json
Pin Node version for Volta users. (#42746)
Update package-lock.json
Bump version to 4.3. (#42728)
Handle if plugin doesnt specify name (#42717)
Revert assignability cases in getNarrowedType (#42231)
Refactor params for interface (#42652)
Allow only package names as plugin names (#42713)
Use a 10ms sampling frequency to filter tracing dumps
Re-do tracing initialization and tests around calls
Update package-lock.json
feat(42637): add generateReturn option to UserPreferences (#42642)
Add fallback error locations for nameless declarations, better class error locations (#42585)
Create synthetic `exports` symbol for commonjs `module` (#42655)
Signature help turns off current-parameter display for non-trailing rest parameters (#42592)
Update package-lock.json
Swapping the quote style of a string for completions should swap _all_ quotes in the string (#42650)
Use a (hopefully) more efficient regex for matching jquery in the safelist (#42653)
Replace _all_ tabs in pretty output, not just the first on each line (#42649)
Add check for no match into fs watch rename event handler (#42651)
Smarter subtype reduction in union types (#42353)
Update package-lock.json
fix(39022): wrap export references UnaryExpression to ParenthesizedExpression (#41156)
Strip nullable types from 'this' type in inference with optional chain calls (#42536)
Revert changes for template literal types, keeping tests. (#42588)
Use spaces instead of non-breaking spaces, narrow non-breaking spaces. (#42500)
Keep extended config's raw file, include, exclude relative to itself and correct it when setting extending options (#42544)
Sort import fixes by number of directory separators (#42614)
Update package-lock.json
Make object literal properties new identifier locations when not contextually typed (#42612)
Limit tuple size resulting from spread (#42448)
Update user baselines +cc @sandersn (#42420)
Update package-lock.json
fix 38503. (#39716)
Switched 'ts.performance' to a mixed mode only uses native performance APIs when necessary (#42586)
Update package-lock.json
Don’t create missing nodes for identifiers that would be valid in a newer script target (#42520)
Remove Travis CI (#42507)
Use related spans for "implement abstract class" errors
Only skip any checks for unwrapped tuples in conditionals, rather than all nondistributive conditionals for backcompat (#42447)
Narrow QualifiedName inside typeof (#42540)
Propegate contextual types through nonnull assertion operators (#42526)
@typedef: Improve error spans from declaration emit (#42501)
Add regression test for #37314 (#42525)
Include all properties from the mapped modifier type when calculating index types for mapped types with name types (#41976)
Update package-lock.json
Only look for file exists and read file on supported locale directories that we build (#42505)
Update package-lock.json
Support top level "for await of" (#37424)
fixes microsoft/TypeScript#41286 (#41294)
In bundle declaration emit, refuse to rewrite nonrelative references to files outside the common source directory (#42306)
At starts jsdoc tag only after whitespace (#42364)
Narrow via discriminant property through optional chain (#42450)
Filter out global keywords of UMD module export declarations in completion providing auto import suggestions (#42141)
WIP-semantic in session based TS (#42438)
Update package-lock.json
Update user baselines (#42451)
Only when typings file change for the project, schedule the update for the project (#42428)
Update package-lock.json
Preserve alias information where possible when looking up union and intersection base constraints (#42430)
Update package-lock.json
Optimize import fixes for projects with many symlinks (#42150)
Update user baselines +cc @sandersn (#42366)
Filter origin types when filtering union types (#42378)
Update package-lock.json
Add missing unwrap call for the inferredExtendsType (#42409)
Update package-lock.json
Accept merge-conflicted baseline (#42398)
Update package-lock.json
Update package-lock.json
Include alias type arguments in keys for aliased types (#42365)
Feat/exclude completions of variable initializers (#42087)
Update user baselines +cc @sandersn (#41496)
feat(33715): include methods of class defined in a property (#42164)
Update package-lock.json
fix(41405): allow using property access as reference to function (#41429)
fix(42259): omit merging modules with different names
fix: const enums + isolatedModules emit invalid code (#41933)
fix forEachChildRecursively (#42300)
Do not suggest paths inside node_modules/.pnpm as module specifiers (#42095)
Improve naming of hasNonBindableDynamicName (#42297)
Better detect when typical nondistributive conditionals need to be defered by unwrapping their check and extends types (#42248)
feat(31388): allow binding elements starting with an underscore (#41378)
Update package-lock.json
'in' should not operate on primitive types (#41928 + @andrewbranch) (#42288)
Support re-aliasing of type alias instantiations (#42284)
fix(42166): allow assertion signature for private identifiers (#42176)
Update package-lock.json
Update baselines.
Update LKG.
fix(42088): fix crash on unreachability condition in for statement (#42110)
Update package-lock.json
Preserve type aliases for union and intersection types (#42149)
feat(26217): Add missing member fix should work for missing function (#41215)
If import is used in the file, prefer that import specifier over calculating new one (#42224)
Try file if matched pattern specifies the extension instead of all the time (#42246)
Reverts #39277 removing bundledPackageName (#41499)
feat(14248): add returns tag to JSDoc template (#42068)
Add support for abstract constructor types (#36392)
Finish #42230 by reverting webworker too (#42250)
Do for unions of many empty-object-spreadables what we did for unions of 2 (#42233)
Make optional properties assignable to string index signatures (#41921)
Revert the DOM query changes (#42230)
Update package-lock.json
Adjust TS2691 message for .ts import sources (#42184)
Update package-lock.json
Cache complex union and intersection relations (#37910)
Leading and middle rest elements in tuple types (#41544)
Retain CheckFlags.Late on symbols manufactured based on Late-bound symbols (#42205)
fix(41420): forbid optional chain in extends/implements (#41481)
remove duplicated type -- remove TriviaKind, keep TriviaSyntaxKind. (#42108)
fix(37791): fix incorrect private field access in a computed property name (#38135)
Update lib dom for 4.2 (#42067)
fix(42160): omit unnecessary parentheses around assertions (#42169)
fix(42019): include the jsdoc tags from the base declaration (#42098)
Improve documentation for basic array methods (#41961)
Add information on gulp diff to the contributing guidelines (#42031)
Update package-lock.json
Update package-lock.json
Update package-lock.json
fix: host.isKnownTypesPackageName maybe undefined (#42050)
fix(41965): fix error in definite assignment assertion context (#41989)
fix(41867): completions - omit the deprecated flag if some declarations are not deprecated (#41941)
Shrink error span on @type errors for signatures (#42024)
fix(42099): fix JSDoc optional properties declaration emit (#42116)
fix(42034): allow convert async function with empty catch (#42123)
fix(42128): Stricter type for ES5 Intl, redefine ES2020 intl (#42134)
Update package-lock.json
Hierarchical refactorings (#41975)
Update package-lock.json
Avoid rewriting bare module specifiers on rename when fix is not verifiably correct (#41959)
fix(41259) : JS autocomplete doesn't work for object literal shorthands (#41539)
Update issue templates (#42049)
completion for return const assertion. (#41475)
fix(40806): Add missing options and possible values of DateTimeFormat (#41880)
Add missing NumberFormatPartTypes types (#42066)
Update package-lock.json
Properly make inferences from partial source type (#42038)
Update package-lock.json
Use getPropertiesForObjectExpression in string literal object completions (#42020)
fix(41818): use last JSDoc comment related to host (#41858)
Under jsx: preserve, actually preserve expressions which contain only comments (#41757)
Dont check computed name visibility results when the computed name representation is not in use (#41806)
Report implicit any error for 'yield' result with no contextual type (#41348)
Use fs.realpathSync.native when available (#41292)
Add type annotation into services so _services_ API baseline is stable post-LKG (#42028)
Simplify visitNode's 'lift' argument (#42000)
Make the configurePrerelease script OK with version having a string type annotation (#42008)
Don’t require fourslash completions tests to specify replacementSpan when it’s zero-length (#42013)
Update package-lock.json
Allow identical type parameter lists to merge in union signatures (#31023)
Ensure factory symbol remains unused in react-jsx mode when not referenced in user code (#41905)
Update package-lock.json
Simplify constraint depth limiter logic (#41972)
Add text-based fastpaths into LS token matching (#41924)
fix(41822): add isJSDocSeeTag (#41835)
Generalize the fastpath for comparisons of unions which are correspondences (#41903)
Spelling correction fixes should not be case-agnostic for two equally weighed options (#39060)
fix(41868): Infer parameter from usage does not work on arrow functions that are a PropertyDeclaration of a Class (#41869)
Update package-lock.json
Simplify expression type to fix build break (#41942)
Template literal types for template literal expressions (#41891)
Make findAllReferences work on triple-slash reference paths that resolve to scripts (#41936)
Find references of a module by filename (#41805)
fix(37539): extend scope for function expressions to include JSDoc (#41364)
Update package-lock.json
Watch extended configs if present (#41493)
Detect comparisons between large unions or intersections (#41574)
Elide export assignment when it does not resolve to a value (#41904)
LEGO: check in for master to temporary branch.
fix(41845): add missing values to diagnostic message related to jsx option (#41873)
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Keep track of why files are in the program (#40011)
Adds experimental support for running TS Server in a web worker (#39656)
Loosen author tag parsing (#41820)
Reuse input nodes where possible when serializing jsdoc implements clauses (#41783)
LEGO: check in for master to temporary branch.
Preserve substitution types in check position of conditional types (#41841)
fix(41827): allow infer parameters from method signature usage (#41836)
Undo #39258 (isArray changes) see overview at #41808 (#41851)
Handle output file names descripency between tsc --b and actual program emit file path calculation (#41811)
import statement from "node" in js source file could produce correct declaration path.  (#41816)
Update package-lock.json
Update package-lock.json
fix(41526): add JSDoc type annotations before parameters (#41561)
Update accept-baselines-fix-lints.yaml (#41826)
fix(41295): handle deprecated callbacks (#41310)
Improve uncalled function checks with parenthesized expressions in condition (#41748)
JSDoc declaration emit should reuse input nodes where possible when serializing typedefs (#41760)
Update package-lock.json
Allow type-only imports on ImportEqualsDeclarations (#41573)
Update package-lock.json
respect quote Preference
Reuse temp variable scope for converted loop body
Read the base construct signature from the static base type, not the instance base (#41767)
Remove incorrect assert that triggers crash on completions of globalThis (#40278)
Update package-lock.json
Used String on base class per suggestion
...except for the small master merge slipups
Allow qualified name for convert namespace import (#41592)
Add missing BinaryExpression source side cases to isMatchingReference (#41765)
Check nested conditional types for non-distributiveness in mapped types with 'as' clauses (#41713)
Propagate wildcard types in non-homomorphic mapped types (#41622)
addImplementationSuccessElaboration admits declarations with no symbol (#41758)
Update package-lock.json
fix(41736): tsserver should not crash if external file does not exist (#41737)
Produce source maps for local typescriptServices build (#41589)
Improve uncalled function checks (#41599)
fix(41621): fixUnusedIdentifier - allow deleting prefix/postfix unary operators (#41624)
fix(41688): completions with infer keyword (#41704)
Update package-lock.json
fix(41653): convert arrow function to function expression that used as destructure initializer
Update package-lock.json
Properly cache types for shared control flow nodes (#41665)
replace whole path if directory separator appears for import completion. (#41412)
fix(41216): update baseline (#41687)
Remove obsolete go-to-definition code after CommonJS alias changes (#41522)
LEGO: check in for master to temporary branch.
feat(41216): show JSDoc for aliases (#41452)
Trace checkDeferredNode to cover JSX elements (#41572)
Use stricter types for tracing event arguments (#41217)
fix(41194): ignore jsxFrag identifier in import declarations (#41441)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Add a comment to clarify the #private field (#41547)
fix(41240): allow emitting numeric with underscored separators as-is in esnext target (#41435)
LEGO: check in for master to temporary branch.
Pass throwIfNoEntry to fs.statSync (#41604)
Update package-lock.json
Remove-unused-identifiers codefix skips assigned identifiers (#41168)
Add an action to update baselines/fix lints (#39898)
Split line and node counts by file extension (#39720)
fix(41534): fix children circular references
Update package-lock.json
Update JSX test errors (#41602)
Do not parse template arguments in JavaScript files. (#36673)
If there are no open files, do not schedule ensureProjectForOpenFiles (#41537)
fix(41227): change message about incorrect property access with possible replacement with static access (#41275)
Unused Identifier codefix better understands constructors and methods (#41555)
Update package-lock.json
fix(41492): make more friendly handling the missing call function in binary expressions (#41502)
Add tracing support to tsserver (#41374)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Actually install playwright in artifact build script
Remove redundant type annotation
Update link to TypeScript-Handbook (#41460)
Comment position feedback
Fold tracing.begin and end into push and pop
Proposal: importModuleSpecifierPreference: project-relative (#40637)
Update user baselines +cc @sandersn (#41423)
dispose Mocha Runner after use to avoid MaxlistenersExceededWarning (#41403)
Update package-lock.json
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Add missed resolveSymbol in commonjs import resolution (#41479)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
Add more team members to pr_owners.txt (#41416)
Revert "Revert "feat(40197): handle uncalled function checks in binary expressions (#40260)"" (#41462)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
String literal rename support (#39298)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update user baselines +cc @sandersn (#41195)
LEGO: check in for master to temporary branch.
fix(40469): suggest QF convert 'Convert to named function' to function expressions (#40476)
fix(40610): handle template string concatenation (#40653)
fix(40632): skip emitting abstract members (#40699)
Add way to exclude files and directories to watch (#39243)
Update package-lock.json
feat(40750): add refactoring to infer a return type annotation to a function (#41052)
LEGO: check in for master to temporary branch.
Dont look for properties of Object and Function type when looking to resolve named import from module with `export=` (#37964)
LEGO: check in for master to temporary branch.
Bump 4.2 (#41377)
Update package-lock.json
LEGO: check in for master to temporary branch.
fix(39858): generate valid async/await code for imported functions (#40154)
LEGO: check in for master to temporary branch.
fix(40042): add modifiers in correct position for decorated methods (#40050)
fix(41078): add element access expressions support in convertFunctionToEs6Class (#41089)
Support xml namespace prefix for JSX elements and attributes (#37421)
fix(40257): fix type parameters range (#40265)
Add support for pedantic property access (#40171)
fix(38283): fix incorrect parsing of static modifier (#41127)
Add index signature for anonymous object literal type (#37903)
fix(40901): skip checking custom arguments name in a constructor (#40912)
Rename 'compat' to 'deprecatedCompat'. (#41000)
fix(35779): emit comments after trailing comma (#37887)
Separate delete-all-imports from other delete-all (#41105)
feat(eslint): upgrade typescript-eslint/eslint
Update package-lock.json
Update package-lock.json
Update package-lock.json
Update src/compiler/program.ts
Use same metho as importHelpers to add synthetic import
Add mroe incremental-affecting affixes to compiler options, add incremental test for changing jsxImportSource
Add affectsModuleResolution: true ot jsx and jsxImportSource options
LEGO: check in for master to temporary branch.
Update package-lock.json
fix(40671): suggest ConvertStringToTemplateLiteral refactoring for string with property/element acceses elements (#40942)
Auto-include types for the jsx import source in the new jsx transforms
Update control flow for nested binary exprs
noop in setTypeAcquisiton for undefined (#41291)
Update style
Log AutoImportProvider creation time (#41315)
Update package-lock.json
Update control flow for correct destructuring evaluation order
Bind comma expression LHS call expressions
Don't relate unmatched parameter positions in signatures (#41308)
fix(41208): add insertSpaceAfterOpeningAndBeforeClosingEmptyBraces to tsserver protocol (#41304)
When creating synthetic default symbol set parent as module symbol (#41282)
Update package-lock.json
feat(41249): allow import.meta with module: es2020 (#41274)
LEGO: check in for master to temporary branch.
Remove string literals from unions with matching template literals (#41276)
Bind `module.export = {Thing}` with alias symbols
fix(41244): ignore synthesized imports (#41267)
LEGO: check in for master to temporary branch.
Don't cache Ternary.Maybe results when recursion is encountered during variance measurement (#41218)
fix(40994): change type for optional properties (#41011)
LEGO: check in for master to temporary branch.
Update package-lock.json
Stop doing tracing work when tracing is disabled
LEGO: check in for master to temporary branch.
Limit binding element visibility painting to those biding elements which are declarations of aliases
Make 'getIndentString' just use a loop. (#41221)
LEGO: check in for master to temporary branch.
Update package-lock.json
Update package-lock.json
PR feedback
Don't emit duplicate triple-slash directives when using API to print a .d.ts (#40968)
Remove --skipPercent reference from README
fix(41176): Missing Compiler API predicate function: isTemplateLiteralTypeNode (#41177)
Update package-lock.json
Style feedback
Remove shims, workaround for bug in peformance.measure
Support partial reverse mapped inferences with tuple types (#41106)
Adopt push-pop API
Add tracepoint in resolveTypeReferenceDirectiveNamesWorker
Add tracepoints within createProgram
Update package-lock.json
Update user baselines +cc @sandersn (#40950)
New error format (#40974)
Tracing work
Track control flow for comma expressions in call expressions
Don't reduce 'keyof M' for mapped types with non-distributive 'as' clauses (#41186)
Handle the new js binding element alias symbols in JS declaration emit
Update package-lock.json
Percent-encode source map URLs (#41102)
Update package-lock.json
Accept updated baselines
Accept updated baselines
Revert "Add extensions to jsx automatically added import, per babel change (#40871)"
Do not consider empty jsx expressions semantically important children
Properly reduce intersections of string literal and template literal types (#41162)
Optimizes project loading in few scenarios (#41126)
Add editor configurable filename-based ATA (#40952)
Move anonymous type instantiation cache from AST node to root type (#41084)
Update package-lock.json
Add auto-import for createElement when using the new JSX transform
Add tests related to the key prop when using new JSX transform
Update package-lock.json
Simplify tests for enablement in mark/measure, remove onProfilerEvent
Add unit tests for PerformanceHooks shim
Write message instead of crashing when native perf API not found.
Migrate 'ts.performance' to use native performance hooks when available
`performanceTimestamp`: use `performance.now` on node
fix: IOSession access this before calling super (#40645)
Update package-lock.json
`transformGenerators`: handle `CommaListExpression`
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix(29881): infer quote preference for property access conversion in completions (#41041)
LEGO: check in for master to temporary branch.
allow type narrowing with NonNullExpression
Use minimal endings when generating declarations for js
Delete duplicate test
fix: show deprecated error for alias (#40961)
Update package-lock.json
Update package-lock.json
Update package-lock.json
Handle noEmit and noEmitOnError with SemanticDiagnosticsBuilder (#40880)
Structure is reused should be on new program instead of old program (#41005)
Handle extra file extensions when wild card directory watch is invoked (#41018)
Update package-lock.json
Small baseline change - find() will get the first declaration with a body
PR feedback
Rename variable
Add elaboration when call fails all overloads but succeeds against the implementation signature
fix(3758): show completion for object literals in an assignment pattern (#40976)
LEGO: check in for master to temporary branch.
Revert "feat(40197): handle uncalled function checks in binary expressions (#40260)"
feat(40197): handle uncalled function checks in binary expressions (#40260)
Add comment
Adjust typeof import name lookup to better match type query lookup
LEGO: check in for master to temporary branch.
Add isDeeplyNestedType logic to getResolvedBaseConstraint (#40971)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Add currency sign to NumberFormatOptions type (#40709)
Don't emit duplicate triple-slash directives when using API to print a .d.ts
Test indexed access to `this` on intersections (#40967)
Use suggested command, add now-fixed log
Add pyright user test
Rephrase to use binarySearchKey
LEGO: check in for master to temporary branch.
fix(40817): suggest import for default exported alias (#40845)
Use npm ci for nightly builds (#40905)
Add definitions for WeakRef and FinalizationRegistry (#38232)
lib: remove `length` field from SharedArrayBuffer (#40858)
fix: change deprecated FunctionLike type to SignatureDeclaration (#40795)
fix(40685): fix generating docs for arrow functions (#40728)
Update package-lock.json
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix(40929) PromiseConstructor error message for newer versions of ECMAScript (#40931)
Improve the performance of requesting completions within a massive array literal
Skip past `module.exports = { Foo }` in go-to-defintion on 'Foo' (#40835)
Use other files when necessary to determine import style in JS (#40879)
Handles creating a reasonable AST when destructuring into a parens'd expresssion (#40115)
LEGO: check in for master to temporary branch.
Update user baselines +cc @sandersn (#40918)
Update package-lock.json
LEGO: check in for master to temporary branch.
fix(40320): Better errors when using properties/methods from newer versions of ECMAScript (#40650)
Update user baselines +cc @sandersn (#40748)
Do not create packagejson imports and auto import provider in partial semantic server mode (#40890)
Remove unnecessary requirement for createHash since we already handle absence of it (#40891)
Properly compare path prefixes when generating module paths (#40885)
Updated error message for TS1031 (#40889)
Limit when we allow nested unique symbols to be serialized to when their declaration is within the same file as the context
Properly compare path prefixes when generating module paths
Limit export= js declaration emit to only json source files (#40882)
Ensure whitespace jsx elements are not counted when determining if a jsx child is the only child (#40839)
Propagate wildcard types in template literal type construction (#40875)
Emit non-identifier enum member references as typeof parent[some name] (#40679)
Add extensions to jsx automatically added import, per babel change (#40871)
Properly distribute over unions in keyof for mapped types with as clause (#40837)
Remove duplicate comment (#40667)
Use correct program when checking for reexports from AutoImportProviderProject (#40843)
fix(40441): show deprecated error for deprecated property in namespace (#40605)
Match suffix _after_ prefix when inferring literals out of templates (#40841)
Install playwright on demand (#40722)
fix(40609): add tests to cover TemplateLiteralType extraction (#40834)
Update type diagnostic messages with --save-dev (#40776) (#40784)
fix(40609): fix crash for extracting type  alias with several type arguments (#40820)
LEGO: check in for master to temporary branch.
Don’t offer non-relative non-paths path when baseUrl is undefined (#40813)
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
Use the existing checkCrossProductUnion helper
fix(40756): disable truncation for inferred type (#40764)
feat(40233): add JS Doc types to smart selection (#40338)
jsx option affects emit (#40775)
Accept updated baseline
Add test
Revert 7181c2af
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Enforce a size limit in getSpreadType
CommonJS imports support destructuring+property access (#40702)
feat: expose findAncestor. (#40325)
Remove old Typescript-*-Starter user tests (#40752)
Add missing visitor of template literal type (#40738)
Update user baselines +cc @sandersn (#40156)
Allow pattern literal types like `http://${string}` to exist and be reasoned about (#40598)
Allow discrimination to identical object types when discriminating contextual types (#40574)
Reorder LKG tasks so protocol build isn't using partial LKG (#40717)
Allow an infer type node to resolve its own name (#40483)
fix(40510): add element access expressions support in convertToOptionalChainExpression (#40524)
LEGO: check in for master to temporary branch.
Const contexts for template literals (#40707)
fix(39589): add await before return promise expression (#39649)
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
fix(40640) add missing notApplicableReason in protocol (#40680)
LEGO: check in for master to temporary branch.
feat(40674): make error messages more consistent (#40675)
feat(40663/40664): improve error messages for assignment assertions '!' (#40669)
LEGO: check in for master to temporary branch.
Intrinsic string types (#40580)
Support properties of mapped types in assertion control flow analysis (#40482)
Properly preserve modifiers in homomorphic mapped types with 'as' clauses (#40633)
LEGO: check in for master to temporary branch.
fix(39899): include in NavigationBar default exported call expression arguments (#40412)
Update package-lock.json
fix(40432): show as keyword in function context (#40481)
Update package-lock.json
Handle the mapping between Array and ReadonlyArray in isTypeDerivedFrom
Update package-lock.json
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
Use unexpanded parameter list in serialization when the expanded list has a non-trailing variadic position (#40556)
Pull all history in branch sync script
Add quick fix to add 'void' to Promise resolved without value (#40558)
LEGO: check in for master to temporary branch.
Support auto-import from paths alias without baseUrl (#40546)
copy prologue directives to new file (#40306)
Issue a diagnostic when the node builder performs truncation despite the `NoTruncation` flag being set (#40477)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
Remove technically unnecessary 'module' option from 'harness' config. (#40526)
Consistent inferences when inferring to template literal type (#40518)
Update package-lock.json
Support element access aliases: exports["x"] = x (#40514)
Properly check types in template literal placeholders (#40498)
Don't crash when observing invalid 'export' in object literal (#40295)
Simplifying padLeft() to only allow spaces or zeros for padding. Updated padRight() to mirror padLeft() but without the option to use zeros since that would be an unlikely use case.
feat(14751): show static members at the top of the list for a class like completion (#40428)
--noUncheckedIndexedAccess (#39560)
Allow 'paths' without 'baseUrl' (#40101)
Updates Dom lib with TSJS changes, adding a new library for webworker iterable (#40500)
Import the semantic highlighter from typescript-vscode-sh-plugin (#39119)
Add emit support for jsx/jsxs experimental jsx runtime api (#39199)
A union including non-iterable types is not iterable (#40350)
Add lib es2020.sharedmemory (#39541)
Modified existing padLeft() and padRight() functions to support strings other than a single space as padding. Used this new functionality to zero-pad the timestamp created by nowString().
Replaces the default module index resolver with '/index' instead of '' when handling internal routing for dts bundles (#39277)
Update package-lock.json
Change baseline name to avoid case-only conflict
Use ad-hoc code for nested destructuring in require (#40188)
Retains trailing cmments in a logical manner in extract type (#40245)
Alias for `module.exports.x = x` (#40228)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update package-lock.json
Template literal types and mapped type 'as' clauses (#40336)
fix(40322): bad completions for string literal type as indexed access type object (#40424)
Add see tag support (#39760)
fix(39676): skip removing unused parameters for functions used as callback references (#40299)
Update package-lock.json
fix(40150): use parameter name for a Promise callback function (#40191)
fix(40222): fix crash on using destructuring in a catch clause (#40240)
Remove assignability cases in getNarrowedType + an isArray improvement for readonly arrays  (#39258)
Remove trailing space from Gulpfile.js comment (#40199)
LEGO: check in for master to temporary branch.
Add errors when providing type arguments for intrinsic JSX tags (#40293)
Consistently error when rest element isn't last in tuple type (#40254)
Remove Language specification link from README (#40407)
Add full stops in diagnostic messages (#40165)
Allow private symbols to be control flow narrowed (#39978)
Add DockerFile for ChromeDevTools (#39624)
Accept baseline from test added since merged PR was made
Better support class instances assigned to the module object for JS declarations (#40037)
fix(28516): forbid using async modifier with the abstract modifier (#39963)
Add optionalReplacementSpan to completions response (#40347)
fix(26141): show completions for string parenthesized types (#39697)
Add CodeQL security scanning (#38939)
fix(lib/es2015): Remove `Reflect.enumerate(…)` (#38967)
Mark spec files as archived (#40373)
Remove optionality for Promise resolve callback (#39817)
Reprioritize cross-project module specifier suggestions for auto-import (#40253)
fix(31126): show completions in nested namespace name (#39663)
Add support for vscode-js-debug's customDescriptionGenerators (#40308)
fix(39410): don't remove variables with type definition during converting named export to default (#39505)
include stdout in `runSequence` thrown error
Unignore the package-lock.json in the root Dockerignore, fixing docker suite tests
Correct bottoming-out tracing for recursiveTypeRelatedTo
Checkjs implies allowjs (#40275)
Nested assignment to a require alias isn't a declaration (#40186)
LEGO: check in for master to temporary branch.
Add missing description to CONTRIBUTING.md (#40329)
Update package-lock.json
LEGO: check in for master to temporary branch.
feat(part of 40169): add spelling suggestion/quick fix for module/namespace exported members (#40211)
Update package-lock.json
Add instantaneous events when depth limits are hit
Treat trailing 'void' as optional for assignability (#40231)
Use a correct Object.entries polyfill (#40268)
Update package-lock.json
fix(40010): add outlining for comments before variables statements (#40016)
LEGO: check in for master to temporary branch.
Specified error diagnostic for invalid variable names (#40105)
Disable diagnostic consistency checking for large tests (#40280)
Update package-lock.json
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update package-lock.json
LEGO: check in for master to temporary branch.
don't emit "unused @ts-expect-error" in unchecked js files (#40046)
Swallow empty-commit error
Update CONTRIBUTING.md for code contributors (#40230)
LEGO: check in for master to temporary branch.
Update package-lock.json
Update package-lock.json
fix(31046): add new diagnostic message for incompatible constructor signature (#40073)
Record the recursion ID of each type, if available
Trace structuredTypeRelatedTo, rather than recursiveTypeRelatedTo
Revert System changes and consume fs directly
Trace key operations
fix(25770): add diagnostic message for the possible mapped type used as an index (#39973)
fix(26325): use a unique name for reserved words in 'constructor like' function name (#39684)
Add compactDisplay and signDisplay to NumberFormatOptions (#40039)
Update package-lock.json
Delete extra npm update
Add missing contextual type to static PropertyDeclarations
Allow trailing params of 'undefined', 'unknown', and 'any' to be optional in non-strictNullChecks JS (#40057)
Revamp dockerfile for office-ui-fabric to reduce noise (#40147)
Update user baselines +cc @sandersn (#39881)
Typescript Language Specification amended (#40120)
Update bot email address
Git ignore package-lock.json and forcibly update in workflow
Add a workflow to update package-lock.json daily
Adopt package-lock.json and npm ci
Optimize external source maps without full cache (#40130)
Revert "Optimize source mapping into external source map sources (#40055)" (#40126)
Add missing properties to stdlib (#38678)
LEGO: check in for master to temporary branch.
Optimize source mapping into external source map sources (#40055)
LEGO: check in for master to temporary branch.
Ping @sandersn on new user baseline commits (#40117)
Add unit tests for VersionRange (#40114)
The falsy part of any/unknown is any/unknown (#39529)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix(10019): allow renaming labels (#40064)
LEGO: check in for master to temporary branch.
Alias for commonjs require in JS (#39770)
Revert "Add '(approximate)' to the beginning of quick info requests in PartialSemantic mode (#40061)" (#40072)
Recursive conditional types (#40002)
Add '(approximate)' to the beginning of quick info requests in PartialSemantic mode (#40061)
Added zero-padding to timestamp output
Set stackTraceLimit to 0 in fileSystemEntryExists
Ensure file, include and exclude specs used are strings  (#40041)
fix jsx completions after attributes (#39859)
fix(15230): change the diagnostic message about a non-module file in an --isolatedModules project (#40032)
Small branch sync script change
feat(40004): make isNamedTupleMember public (#40005)
Revert to including only open files in partial semantic server mode (#40026)
Avoid the double-symbol trick for enums
fix(13503): fix crash on calling getTypeAtLocation with the SourceFile nodes (#39994)
No this-property assignments in TS (#40009)
Improve deprecated suggestion node position (#39702)
fix export * as default syntax (#39803)
Bind alias ThisProperty assignment declarations (#39908)
Export anonymous functions in 2 steps, declare as variable and then assign to exports. (#39820)
Use isUncalledFunctionReference for aliases too (#39950)
Update CI node versions (#39940)
Insert auto imports after header comment (#39924)
Add missing 'importName' for private field helpers (#39932)
Handle empty package.json files (#39937)
LEGO: check in for master to temporary branch.
Renames in servermode per feedback (#39883)
Find tagless JSDoc as preceding token (#39912)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Handle the fact that noResolveResolution resolution is reused (#39889)
LEGO: check in for master to temporary branch.
Rename and use the default ref instead of having a `workflow_dispatch` option
Add an 'Update LKG' action (#39897)
Bump version to 4.1. (#39894)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Make numeric Array constructors take ArrayLikeBuffer union
Update user baselines (#39857)
LEGO: check in for master to temporary branch.
Update user baselines
LEGO: check in for master to temporary branch.
Add separate flag serverMode for server mode (#39735)
Limit auto import provider project size (#39855)
In JS declaration emit, move imports painted in nested contexts to the root private context (#39818)
Update user baselines (#39502)
Redo in narrowing for intersections (#39637)
The iteration type of overloaded iterator signatures derives from the intersection of their return types (#39722)
PR Feedback
Issue35876: Give better error message when Classic Module Resolution with incorrect path (#38105)
Make `getLocalSymbolForExportDefault` look harder for an export
Updates Uint8ArrayConstructor to match MDN documentation. (#38449)
Restore reference change
Temporary revert to compare user test baselines
fix(39245): change related diagnostic for missing rest parameter arguments (#39356)
Allow assignments to a narrowable reference to be considered narrowable
Make @enum,@this tag construction stricter (#39791)
Add diagnostic info to getNameForExportedSymbol crash (#39790)
Undo accidental change from #39772 (#39779)
Add contextual type for generator return type (#39772)
Move off deprecated mocha types
Reduce unnecessary error computation
Handle unresolved baseType when trying to get completions for static member (#39731)
Lower priority for speculative variadic tuple inferences (#39723)
Use new octokit API method in review request script (#39719)
LEGO: check in for master to temporary branch.
Make AutoImportProviderProject work with symlinked monorepos (#39679)
Add a fastpath for comparing common mapped types like Pick which avoids manufacturing intermediate type identities (#39696)
not escape unicode char for import path string. (#39463)
Support loading of child project if found project is not pure solution has some of its own files and project references (#39613)
Add disableReferencedProjectLoad to stop loading child projects to allow users to disable loading large solutions (#39593)
switch typeof any could be checked for unreachable (#39389)
fix 39453 (#39579)
LEGO: check in for master to temporary branch.
Consistent errors on circular base types (#39675)
Properly preserve numeric string named properties in declaration files (#39658)
Triple slash references must resolve against the resolved file name (.d.ts and not original source file) since they are rewritten in the .d.ts emit (#39645)
tests(39373): add addition tests (#39631)
Adds latest version of TypeScript to the repro code (#39641)
Explicitly add dependency on node to compiler tsconfig, remove es6+ string method usage (#39636)
Minor fixes to consmetic build issues in user test PR script
fix(39373): add diagnostic message about using a private name for class declarations without name (#39567)
Add twoslash repros to the compiler (#39628)
Resolve only relative references in open files on syntax server (#39476)
fix(39515): fix getting a position for an element before the line break CRLF/LF on the line that contains 'after' element (#39554)
fix(38868): add separator for type parameters (#39621)
Support variadic tuple inference from trailing optional to non-optional (#39614)
Better error message for unparenthesized function/constructor type notation in union/intersection types (#39570)
Do not resolve require calls in typescript files even if it contains dynamic import (#39617)
Flag mapped types with circular property types and do not attempt to print them structurally (#39552)
Use combined node flags (#39403)
Don’t give all instantiated signatures in JS strict arity (#39606)
Use jsxFragmentFactory entity name for factory name lookup from checking fragments (#39475)
fix(33511): show jsx namespace default import quick fix if it does not exists in the current scope (#38419)
Load ETW module from a specified path (#39599)
Add refactor convertToOptionalChainExpression (#39135)
Don’t create expando declarations on alias symbols (#39558)
fix(types/mocha): change deprecated Mocha types (#39573)
PR comments and minor bugs
Add ClassExpression, FunctionExpression and ArrowFunction to check for cancellation token from classifier (#39557)
Handle typeAcquisition could be undefined (#39551)
Remove object literal freshness in control flow based array types (#39518)
CI: Use checkout@v2 (#38822)
PR comments
Revert "Removed public commands"
fix static method reference non-static (#38730)
fix(39524): convert access property suggestion to string (#39527)
Insert auto-imports in sorted order (#39394)
LEGO: check in for master to temporary branch.
Better checking of @param/@property tags (#39487)
fix(25155): add space before optional parameters/properties (#38798)
Add regression test for #38834 (#39479)
fix(39421): omit prefix text for rest binding element (#39433)
fix(39440): show QF for abstract classes with methods which include 'this' parameter (#39465)
Remove unnecessary assert (#39483)
LEGO: check in for master to temporary branch.
Update user baselines (#39220)
Type `this` in more constructor functions (#39447)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Properly handle rest parameters in function declarations with @type annotations (#39473)
Ensure type/namespaceish statics are included in the list of namespace merge members (#38920)
Add workflow_dispatch to our nightly publish script. (#39485)
Move deprecated jsdoc tags to compat/deprecations.ts
Dont include auto type reference directives (#39472)
Process type nodes in codefixes/refactors for auto-imports recursively (#39130)
Mark @typedef as a type declaration (#39468)
fix(23871): change insertNodeAfter to replaceNode to avoid extra newlines (#38045)
LEGO: check in for master to temporary branch.
Don't narrow against unions of constructor functions with instanceof (#38099)
Parse *= separately in types (#39457)
LEGO: check in for master to temporary branch.
fix(39332): handle quotes preference in interface method signatures (#39348)
Avoid check for union keys (#39314)
In JS, assignment to `void 0` isn't a declaration (#39452)
Retain the original eslint arg order (#39450)
Adds a script for hooking up dev builds of TS to the playground (#38859)
Split the GH actions CI into multiple stages (#39210)
LEGO: check in for master to temporary branch.
autocomplete works for const assertion. (#39412)
feat(25259): change diagnostic message
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
allow consecutive newlines in jsdoc tag comments (#38036)
Node-based @deprecated checks (#39323)
Emit fallback for decorator metadata for type only imports (#39337)
LEGO: check in for master to temporary branch.
fix(39346): show completion in inherited classes from the composited base interface
Revert the type change to ts.Map (#39366)
Drop dead files from LKG (#39330)
Copy typesMap.json in produceLKG.ts (#39329)
LEGO: check in for master to temporary branch.
Use MS repo for making monaco builds (#39316)
JSDoc uses same newlines as normal scanner (#39351)
Disable signature help on unresolved bare identifiers; add more declaration info on other unresolved calls (#39352)
fix(32297): add quick-fix action to delete parameter destructuring elements (#38764)
Add assertion.
Accepted baselines.
Exempt bare 'boolean's from the check.
feat(25259): add better error to report for equals instead of the colon in object literals
Infer implied arity before inferring from 'this' argument (#39328)
Delete lib/lib.esnext files no longer found in built/local
Delete lib/diagnosticMessages.generated.json
Consistent narrowing to 'never' in conditional and switch statements (#39191)
No speculative inferences for variadic tuples (#39281)
Use mapped rest type member when expanding rest parameter names (#39317)
fix(39047): handle extra spaces after the catch statement (#39306)
Allow distinct string enum members with identical property names to form unions in mapped types (#39101)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix(29890): wrap variable/method/property to jsx expression
LEGO: check in for master to temporary branch.
Preserve newlines between try/catch/finally, if/else, do/while (#39280)
not narrow static property without type annotation in constructor. (#39252)
Migrate more places to use Map/Set
Switch to ES Map/Set internally (#33771)
fix(38840): omit completions for a spread like argument in a function definition (#38897)
fix(38785): include in NavigationBar child items from default exported functions (#38915)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Avoid effect of element access expression (#39174)
Update typescript-eslint to 3.4.1-alpha.1 (#39260)
Handle 'keyof' for generic tuple types (#39218)
Disable unsound T[K] rule in subtype relations (#39249)
LEGO: check in for master to temporary branch.
Upgrade typescript-eslint version (#39242)
Handle recursive type references up to a certain level of expansion in inference (#38011)
Do not consider binding patterns in contextual types for return type inference where all the signature type parameters have defaults (#39081)
LEGO: check in for master to temporary branch.
Do not add reexported names to the exportSpecifiers list of moduleinfo (#39213)
Update user baselines (#39214)
Leverage syntax cursor as part of reparse (#39216)
Update failed test tracking to support Mocha 6+ (#39211)
Update user baselines (#39196)
LEGO: check in for master to temporary branch.
Variadic tuple types (#39094)
chore: resolve suggestions
Expand auto-import to all package.json dependencies (#38923)
inline local functions
Update bigint declaration file (#38526)
Update user baselines (#39077)
LEGO: check in for master to temporary branch.
Add missing index.ts files to user projects (#39163)
Add reason for a disabled code action (#37871)
Minor fix for assertion predicates (#38710)
Update LKG (#39173)
Reparse top level 'await' in modules (#39084)
change
chore: more change
chore: resolve review
chore: save space
fix: lint error
test: add test for it
chore: make isJsxAttr required
chore: revert change in checker
feat: re-impl react class name fix
Revert "feat: add a codefix to fix class to className in react"
feat: support spell checking in JSX attribute
feat: add name suggestion for JSX
feat: add a codefix to fix class to className in react
Add deprecated related feature (#38523)
Rename `callbackfn` params to `predicate` where possible (#39150)
Adds [unit] and [unitDisplay] to NumberFormatOptions (#38013)
Code fix for accidental calls to get-accessors (#38749)
Allows emitting buildInfo when --noEmit is specified (#39122)
LEGO: check in for master to temporary branch.
fix rename cause import change wrongly (#38462)
LEGO: check in for master to temporary branch.
reset soft with master for single commit (#38720)
LEGO: check in for master to temporary branch.
Avoid semi
LEGO: check in for master to temporary branch.
In JSDoc, parse postfix-? below conditional types/tuple types (#39123)
Show a diff when the  public api baselines fail (#39108)
Add a type-guard overload of Array.every (#38200)
LEGO: check in for master to temporary branch.
Update baseline
Add outlining spans for call expression or arrow body
LEGO: check in for master to temporary branch.
Small fix in `getObjectLiteralIndexInfo`
LEGO: check in for master to temporary branch.
Refactor node factory API, use node factory in parser (#35282)
Make debug mode work with new VS Code JS debugger (#39098)
LEGO: check in for master to temporary branch.
Assignment operator is definite assignment (#39087)
Syntax only server creates inferred project with all the open files w… (#38561)
Update README.md (#39074)
fix out-of-date baseline
Move notation to es2020.intl.d.ts
Include reexported names in list of exported names (#38809)
Update user baselines
Small fix in `getIsContextSensitiveAssignmentOrContextType`
Simplify `visitObjectLiteralExpression`
DOM update 2020-06-12
fix(a11y): make ISSUE_TEMPLATE/Bug_report.md more accessible for folks with screen readers (#39013)
Update request-pr-review script to latest version of octokit (#39031)
pin version of octokit
skip implements types with no symbols
isDynamicName skips parentheses for element access
Allow `e: unknown` in `catch` arguments
Serialize (noncontextual) keyword named namespace members with export declarations in both declaration emitters (#38982)
Patch to use this.timeout() > 0 rather than this.enableTimeout() to work with mocha 8+
Handle missing return type nodes and nested type references missing type arguments in existing jsdoc node serialization (#39011)
Add containerName to CallHierarchyItem (#38997)
Update baselines (#39000)
Make isEntityNameVisible duplicate the node builder logic to always consider type parameters as visible if they are the resolution result (#38921)
Schedule failed lookup updates (#38560)
Remove non null assertion on oldSourceFile.resolvedModules (#38984)
use blocklist instead of blacklist (#38988)
LEGO: check in for master to temporary branch.
Deprecate reloadFs so the tests are more clear in what they are achieving and its easier to track changed behaviour (#38954)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Make `hasCorrectArity` handle tuples properly
fix error when use spread arguments twice
LEGO: check in for master to temporary branch.
`getSymbolDisplayPartsDocumentationAndSymbolKind`: use actual `symbol.flags` for `getAliasedSymbol`
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update user baselines
LEGO: check in for master to temporary branch.
address PR comments
Emit build info even on noEmitOnError or tsc --build (#38853)
Some changes to tsc baselines for clarity (#38850)
LEGO: check in for master to temporary branch.
fix(38081): allow transforming object binding to named imports
add support to convert lambda to function and vice-versa (#28250)
LEGO: check in for master to temporary branch.
Skip default when initially iterating exports in __importStar, same as __exportStar (#38808)
fix line endings
Improve error range for ts2657 (jsx expr must have parent element), add code fix for it (#37917)
fix(32341): add prefix name for module exports properties (#38541)
fix(19385): add space after brace in the multiline string template (#38742)
fix(38815): dive in arrow functions to check only this usage instead of checking all statements (#38865)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix merge conflicts
polish tests
remove outdated tests
convert import trigger reason test
convert import trigger reason only
convert export trigger reason test
convert export cursor only changes
remove declaration
Revert "update refactorConvertImport_partialSelection"
remove unused test method
fix up some bools
accept new baseline
convert get set test
update test names
extract symbol test
extract type test
add refactorNotAvailableForTriggerReason
fix some indices
use verify trigger reason for import export
arrow function refactor test
change type of RefactorTriggerReason
accept new baseline
convert import tests
convert export tests
use enum for RefactorTriggerReason
accept new baseline
update refactorConvertImport_partialSelection
extract symbol
fix lint errors
extractType explicitCursorRequest
extractType
convertImport
loosen convertExport conditions
enable explicit requests for addOrRemoveBracesToArrowFunction
add trigger reason to protocol
LEGO: check in for master to temporary branch.
Convert HTML tags in doc-comments into markdown
fix linting error
LEGO: check in for master to temporary branch.
Use getFileAndLanguageServiceForSyntacticOperation
LEGO: check in for master to temporary branch.
fix(38722): change error message for use-before-declaration on const enum (#38728)
Delete .gitmodules
fix(23716): show generic type in tagged template expression
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Removed public commands
LEGO: check in for master to temporary branch.
Added comment and uncomment selection
Removed TextRange and added FileRangeRequestArgs
Updated d.ts baselines
Added simplified result to ToggleComment
Added jsx to singleLineComment
Added toggleLineComment, toggleMultilineComment with jsx and tests
fix(34934): exclude private properties from Js completion list
Less code
Updated baselines.
Feed generalized source type to elaboration.
Updated baselines.
Check constraints deeply on singleton types.
Revert "Wrap classes with decorators or static properties in an IIFE, even for ES2015+ (#32011)"
Preserve module marker in es2015+ module emit for tool compatability (#38712)
remove errant tab
Switch to isSymbolAccessible for both.
fix(33286): add outlining for arrow function with one parameter (#38631)
Accept baseline
fix names
Make new error an error, not message
fix untagged argument lint
fix(38299): use string literals as keys to creating rest result (#38600)
Intersection check for empty object type shouldn't cause circularities (#38673)
fix(38682): use stable typescript version (#38683)
Add d.ts for Intl.RelativeTimeFormat (#36084)
fix(38295): handle duplicate object literal keys which contain '+' and '-' tokens
fix(38463): show completions for index access properties
Support naming tuple members (#38234)
LEGO: check in for master to temporary branch.
fix: extract const in jsx (#37912)
No contextual types from circular mapped type properties (#38653)
Ensure formatter can always get a newline character (#38579)
Remove mentions of runtests-browser in CONTRIBUTING.md
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix(33233): add outlining for comments before property access expression
LEGO: check in for master to temporary branch.
Use control flow analysis to check 'super(...)' call before 'this' access (#38612)
LEGO: check in for master to temporary branch.
accept new baseline
fix rebase conflict
add missing semi
Add more check
fix mission baseline
avoid shouldCaptureInTempVariable
Remove newline
fix assignment check of logical assignment
Add type narrow
Add more case
Refactor logical assignment
fix operator
make ci happy
Update src/compiler/transformers/utilities.ts
Add more check
Add cfa
Add contextual types infer
Add mission semi
Add more case
Add logical assignment operator
Make `processTaggedTemplateExpression` visit a returned node
goToDefinition: find only the value if it's the RHS of an assignment
Include unknown in spread prop override check (#38577)
Perform intersection reduction before and after getApparentType (#38565)
fix(33836): allow readonly modifier for a field with only get accessor (#36543)
Update user baselines
feat(38225): change diagnostic message for remove braces from arrow function body (#38226)
fix(37877): include in NavigationBar default exported child items (#38255)
fix: add missing semi-colon to `__exportStar` unnamed function
regression(38485): allow using rawText property in processing a tagged template
make last para of Actomics.notify optional.
LEGO: check in for master to temporary branch.
Update baselines.
Add and use the 'intersperse' helper function.
LEGO: check in for master to temporary branch.
Don't add duplicates of JSDoc comments.
Added tests for union types with identical doc comments.
Improve assert message in binder (#38270)
fix broken regex on "src/services/completions.ts#getCompletionData" (#37546)
report error for duplicate @type declaration (#38340)
fix(38073): hide 'Extract to function in global scope' action for arrow functions which use 'this' (#38107)
Update user baselines (#38472)
Update user baselines (#38405)
Changed template strings to emit void 0 instead of undefined (#38430)
LEGO: check in for master to temporary branch.
Make isDynamicFileName available publicly (#38269)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Exclude arrays and tuples from full intersection property check (#38395)
Update user baselines (#38128)
LEGO: check in for master to temporary branch.
moveToNewFile: handle namespace imports too
Unify logic in typeof narrowing (#33434)
LEGO: check in for master to temporary branch.
feat(37782): 'declare method' quick fix for adding a private method (#37806)
expose jsdoc factory (#29539)
Add support of contextual quick info (#37451)
Update LKG 2020 05 06 (#38371)
Allowed comment directives to be multiline (#38228)
fix(36055): forbid union type with invalid types in the 'in' operator (#37786)
Updating dependencies (#37788)
LEGO: check in for master to temporary branch.
Consistent narrowing by discriminant (#38311)
fix(37703): forbid required parameter after optional (#38155)
add outlining spans for the tuple type (#38179)
add outlining spans for array destructuring elements (#38191)
Add missing arguments to typeToTypeNode. (#38336)
Properly handle private/protected members in unions of object types (#38277)
Harden node builder APIs to no longer return `undefined` for a node when `NodeBuilderFlags.IgnoreErrors` is provided (#38273)
fix(38177): add auto-import for missing argument type in new functions/methods (#38213)
Make `getAwaitedType` private
feat(36266): add a quick fix for incorrect return types in async functions
Adjust to newer changes
disallows exponentials with BigInts for targets lower than ES2016
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix order and tests
move to invocationErrorDetails
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Adds support for looking up past Blocks in expando objects (#38031)
Early couldContainTypeVariables check in instantiateType (#37844)
Control flow for constructor initialized properties (#37920)
Guard against recursion in inferTypeForHomomorphicMappedType (#38224)
Error on this.xxx access of previously declared but uninitialized property (#38030)
Include a stack in InitializationFailedResponse (#38223)
this: undefined in modules (#37784)
feat(38225): change diagnostic message for remove braces from arrow function body
I did everything you said I followed all the rules
Handle undefined in indent helper (#38217)
Bump version number to 4.0 (#38215)
Revert "Revert "Add check for delete expression must be optional (#37921)" (#38154)" (#38173)
LEGO: check in for master to temporary branch.
Skip comparing optional property flag when comparing against discriminant properties (#38101)
Revert "Add check for delete expression must be optional (#37921)" (#38154)
Revert #37106 (#38172)
LEGO: check in for master to temporary branch.
Reset error variable in downlevel for-await-of loop (#38170)
Revert "make splice `deleteCount` required in es5.d.ts (#32643)" (#38169)
fix(38138): show suggestions for identifier in class property initializer (#38157)
Special-case export assigned namespaces in getSpecifierForModuleSymbol so they behave like their containing module symbol (#38151)
convertToAsyncFunction: Disable for `.then` with both fulfillment and rejection handlers (#38152)
Issue an error on cross-file merges we cant emit (#38148)
Have the `ChangeTracker` filter out edits that are no-ops (#38123)
LEGO: check in for master to temporary branch.
Update user baselines (#38109)
Filter undefined from binding elements with initialisers without undefined in the type (#38122)
Prefer a likely literal over anonymous type in --noImplicitAny codefixes (#36015)
Filter undefined only in binding patterns in params (#38116)
Used DH's suggested heuristic
fix(37825): exclude private fields from completions in subclasses (#37906)
fix(38080): add outlining spans for TypeLiteral (#38089)
Add check for delete expression must be optional (#37921)
LEGO: check in for master to temporary branch.
Update user baselines (#37995)
Navto covers all projects (#38027)
LEGO: check in for master to temporary branch.
Delay pulling on signature contextual type until absolutely needed (#37851)
Remove superCallShouldBeFirst error (#37947)
fix(15398): skip adding line breaks when replacing JS checks directives (#38086)
Add outlining spans for object destructuring elements
LEGO: check in for master to temporary branch.
Excluded type unions from the generale source types
Handle non literal computed name when trying to get the name for object literal property name in json object (#37988)
fix(37242): add reference to return type for JSDocFunctionType (#37911)
Propagate nonInferrableType in &&, || and ?? operators (#38035)
LEGO: check in for master to temporary branch.
Lint fix
This had better be the last unit test fix...
Again fixed up manual unit tests
Eased up on some of the more aggressive reporting changes
Report primitive type in literal-to-primitive relation complaints
replace the original not-callable error
prefix-unused-parameter-with-_ codefix now works in jsdoc @param (#36152)
fix(37242): add reference to return type for JSDocFunctionType
Use string representation for negative numeric property names (#37936)
Update user baselines (#37946)
fix(37940): add space after parameter decorator (#37959)
Typo at Uint8Array[Symbol.toStringTag] (#37989)
fix(refactor): keep comments after refactor (#35937)
Improve error message for computed enums (#37790)
No iteration type errors during CFA (#37965)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Added error when Enum member initaliser references itself (#34655)
Add fastpath to isRelatedTo for type references (#37481)
Accept recent tests with updated baseline code (#37945)
Update user baselines (#37935)
Update __exportStar helper to skip default and __esModule members (#37236)
chore(ts-toolbelt): remove deprecated test (#37932)
Retain imports in declaration emit if they augment an export of the importing file (#37820)
fix(37781): import missing argument types for a new method (#37857)
Error on missing BigInt in es2020 (#37899)
Add _0_is_declared_here pointing to accessor declaration
Better error message for accidental calls to get-accessors
Avoid circular reference in this-property assignments (#37827)
Minor cleanup
fix(37150): ignore private fields in string index type checking (#37183)
fix(37364): show completions for string literal index on mapped type (#37367)
Reorder tsconfig and move one more function
No recursive intersection property checks (#37854)
No excessive stack depth global errors (#37873)
move into new, centrally (?) located file
refactoring done except for deduping
Add node 13 to CI
Remove node 8 from the github actions (#37870)
Codefix invokes generate get-set accessor refactor
add fourslash tests for codefix
Lock playwright version (#37869)
Error on invalid uses of namespace export (#37715)
Remove extraneous string escape from convert to template string refactor (#37743)
Always error when property overrides accessor or vice versa
Set contextual type on elaborated error node rather than passing it, so its discriminated (#37828)
fix build break by updating missed baseline
LEGO: check in for master to temporary branch.
Use comments from host variable declaration when exporting a signature in js declarations (#37594)
fix(37817): omit comments in name accessor (#37822)
Skip `isBlockScopedNameDeclaredBeforeUse` error in interface or type declarations
Minor improvement
Make skipLibCheck: true the default in --init (#37808)
Disambiguate types with same name from different namespaces in mapToTypeNodes (#37543)
Accurate Array.prototype.flat definition (#32131)
Look for outer type parameters on VariableStatements (#37819)
Extra check in assignment of intersections with generic constituents (#37537)
Generic functions are never context sensitive (#37811)
Allow Source Mapping inside destructuring assignment (#37298)
Consider arrays and tuples within one another as possibly requiring deferral (#37776)
LEGO: check in for master to temporary branch.
Cache the regularized form of union types (#37749)
Reduce intersections with conflicting privates, elaborate on reasons (#37762)
Remove error when spreading optional any (#37757)
fix(37456): add tests for JsxOpeningElement nodes (#37752)
Quick fix for functions lacking return expressions (#26434)
fix(37431): allow only one space between async keyword and method name (#37504)
Reuse input type nodes when serializing signature parameter and return types (#37444)
Add replacement span for string literal (#37490)
Explicitly merge module augmentation members into the exports added by export * declarations (#37691)
fix(37456): omit type arguments from JsxSelfClosingElement, JsxOpeningElement nodes (#37739)
Add replacer function overload for replaceAll (#37476)
Disallow partial matches for discriminant properties when generating error messages (#37589)
fix(37519): forbid trailing comma in a index signature (#37535)
Add node to zone.js' tsconfig types (#37499)
Add support for extraFileExtensions on WatchCompilerHost (#37726)
fix #32843 : evaluate right scope when checked if all type parameter are unused for jsdoc `@template` (#33320)
Add support for NumberFormatOptions notation
support 'in' type guard of intersections (#37106)
Don’t offer `this.` completions on `self`, `window`, `global`, `globalThis`. Disambiguate `this.` completions from others in details requests. (#37652)
Rerun LKG to remove 'awaited' type (#37616)
Don't delete comments when deleting unused declarations (#37467)
Update user baselines (#37498)
Make never rest type top-like (#35438)
Add link to documentation in tsconfig.json template generated by tsc --init  (#34686)
Improve error message for invalid return type of JSX component (#32702)
update baseline (#37692)
fix(33054): allow variables starting with an underscore in for/of statement (#36739)
fix(36909): wrong error message when trying to named-import an export (#36925)
feat(37092): improve error message about missing default export (#37212)
Handle comment directives in incremental parsing (#37632)
Support completions for local named exports (#37606)
Adds a preview link to the baseline emits for sourcemaps (#37111)
Report error when cannot read file (#37611)
Revert 'awaited' type (#37610)
Handle packages inside another node modules package when auto importing (#37561)
When the global file is deleted mark all files as changed (#37538)
Release the documents from language service using key instead of calculating it on the spot since we want to use correct paths for the files (#37596)
Don’t suppress completions after yield (#37609)
Ensure computed property names are always checked (#37307)
Sort the arrays of fileNames in the build info (#37541)
Add test for #35011 (#37312)
Enhancement new expression with type arguments without parenthesized argument list error message (#37576)
Handle if reading tsconfig file fails (#37563)
Revert cloneNode overrides in the DOM (#37568)
Convert to async function: handle type arguments to then/catch (#37463)
Do not include global errors in semantic errors from the file (#37545)
LEGO: check in for master to temporary branch.
Check JSDocPropetyTag (#37544)
fix: hyphened name not auto-completed by the ls (#37455)
Handle import type and export type in preprocess (#37508)
LEGO: check in for master to temporary branch.
Bring over last 3.9 dom changes (#37502)
Narrowing from truthy unknown to object (#37507)
Add the 'awaited' type operator (#35998)
Update user baselines (#37354)
  If emitting declaration file, update the d.ts signature in state to not have to save all files when different file changes without changing its shape (#37483)
Handle auto import scenarios when using project references (#37482)
Add code fix for importsNotUsedAsValues error (#37468)
Track tuple type recursion in inferFromObjectTypes (#37479)
Allow rich response for compile on save (#37462)
Allow nested conditionals to be related via constraints (#37208)
Add huge maximal length for noTruncation mode (#37461)
Preserve newlines from original source when printing nodes from TextChanges (#36688)
Allow assertion signatures to narrow by discriminant (#37310)
fix(37287): check appropriate context with enabled useDefineForClassFields (#37323)
Dom update 2020-03-18 (#37464)
Simplify return type of Object.fromEntries (#37457)
Always generate configFileDiag if file is going to be added to configured project (#37443)
feat(37409): add fix all quick fix to fixInvalidJsxCharacters (#37436)
LEGO: check in for master to temporary branch.
Support for/of variables in assertion checking (#37432)
fix(37194): fix crash on go to the definition in variable assignment (#37253)
Undind unintentional whitespace changes
fix(36247): disallow 'constructor' as a parameter property name (#37285)
Clarified file-not-found error for reference paths without extensions (#35956)
fix(36936): fix crash caused by resolving non existent export (#37077)
feat(36908): add 'property overwritten by spread' error for jsx attributes. add related span for conflicting declaration in spread (#37329)
Add codefix for --noImplicitThis (#27565)
Add script to work around GH issue with suggested reviewers (#37422)
Flatten immediately nested conditional types in the false position (#36583)
 When the imported module is through node_modules and symlink to folder that isnt node_modules (#37387)
On second thought, removed the {}s
LEGO: check in for master to temporary branch.
 getPropertiesOfUnionOrIntersectionType: handle types with index signature (#31979)
Add valueOf declarations for TypedArrays (#36668)
Add trimTrailingWhitespace Editor Option (#36905)
feat(33792): add new quick fix service to handle missing call in condition (#37152)
Make substitution types even if the substitution base isnt a type variable (#37348)
Add outlining spans for case clauses (#37374)
Handle when default project for file is solution with file actually referenced by one of the project references (#37239)
feat(36249): add quick-fix action to declare a property as private which starts from underscore (#36632)
[minor] Adds some docs to the LSP interface  (#36740)
LEGO: check in for master to temporary branch.
Filter the type of a binding pattern to not include undefined is the pattern parent has an initializer (#37309)
improve error message TS2307 (#27054)
Show token hints for missing closing braces (#36317)
Support template literals in preProcess (fixes #33680) (#33688)
Treat write-only-access to a class member with setter as a reference. (#35922)
Remove 'path' from assert call (#37372)
Add implementation for fixExpectedComma (#33879)
fix(36102): fix extra new line in Organize Imports (#36911)
More clear comment for String.prototype.match() (#36301)
Don't parse duplicate JSDoc for ExpressionStatement starting with ParenthesizedExpression (#36289)
make splice `deleteCount` required in es5.d.ts (#32643)
add config to insert space for empty braces (#35427)
Move useSourceOfProjectReferenceRedirect to program so other hosts can use it too, enabling it for WatchHost (#37370)
  Ensure that we have seenAffectedFiles map when files are added to pending emit because they were present in the old state (#37302)
No infinite recursion in excess property and weak type checks (#37360)
adds error message for using value as type argument (#37359)
Increase the idle time before which ensureProject for open file is called (#37121)
Recognise master branch-equivalent as master
LEGO: check in for master to temporary branch.
Update user test baseline script to diff against a single authoratative WIP master branch (like RWC) (#37350)
Optimize module resolution cache for watch and editor (#37055)
Use objects instead of closures for type mappers (#36576)
Implement constructor type guard (#32774)
No union subtype reduction during type inference (#37327)
LEGO: check in for master to temporary branch.
Add constructor functions for {Symbol,Node}Links (#36845)
add promise.any (#33844)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Add flag to omit default case (#33574)
Support NetBSD platform (#34756)
LEGO: check in for master to temporary branch.
Infer to erased signatures (#37261)
LEGO: check in for master to temporary branch.
Handle WatchCompilerHost without timeout methods to retrieve correct Program (#37308)
cleanup: remove unused variable assignment (#33917)
Removed unused host variable in createProgramHost (#37278)
Added runtime TypeError for non-function, non-null __extends
fix(28163): change outdated options (#37268)
Reset hasChangedAutomaticTypeDirectiveNames once new program is created (#37266)
Update tests to be more precise
Update baselines
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Reinstate incorrectly removed esnext.bigint (#37233)
LEGO: check in for master to temporary branch.
Added @ts-expect-error to @ts-ignore directives (#36014)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
add string.prototype.replaceAll (#33845)
Don't inferFromIndexTypes() twice (#34501)
Don't crash when there's no class type to derive a 'this' type from (#37164)
Preserve arity for preserving js optional parameters (#37173)
LEGO: check in for master to temporary branch.
More precise property-overwritten-by-spread errors (#37192)
fix(36883): accessor allows `this` parameter but is not checke… (#36889)
fix(36238): allow aliases in spelling suggestions (#37168)
Emit an `any` for namepath types (#37176)
fix(37135): handle PrivateIdentifiers in isPropertyName (#37184)
Thread host.useCaseSensitiveFileNames through program and node builder into specifier generation (#37170)
`symbol.parent` really is possibly sometimes undefined here. (#37159)
Reinterpret a type parameter constrained to any as an upper bound constraint (#29571)
LEGO: check in for master to temporary branch.
Clean up convert-to-async refactor (#36858)
Stop looking for the default configured project at node_modules (#35011)
fix: Intl.PluralRulesOptions to behave according to spec (#33414)
Update LKG (#37175)
Retain reexports in js emit even when they export nothing (#37124)
LEGO: check in for master to temporary branch.
Use merged symbol to pick up js-alias-merged members on export assignments (#37162)
Update user baselines (#37147)
Remove bogus @implements errors (#37114)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Remove ordering restrictions in control flow analysis (#37134)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Reduce intersections by discriminants (#36696)
Revert #36907 (#37122)
Full support for CommonJS auto-imports in JS (#37027)
Update LKG (#37116)
Hoist initial assignment to exported names in cjs to they are not blocked by bindings made by __exportStar (#37093)
LEGO: check in for master to temporary branch.
Grammar error on `export type *` (#37064)
office-ui-fabric: silence progress counter again
Harden findAllReferences.ts against `symbol.declarations = undefined` cases (#37088)
Forcibly remove _the other_ submodules
Forcibly remove submodules
Update LKG (#37087)
LEGO: check in for master to temporary branch.
Reapply contextual type when recalculating array literals as tuples (#37071)
Proper treatment of splicing tuples in array literals
Exempt ambient [#]private from unused error (#37050)
Remove crashing diagnostic code that wasn't helping us (#36913)
Include input PR title in bot PR title
Measure module and type reference directive times (#37054)
Update the authors script to generate the content of authors.md (#36867)
Adds underlines to differences in strings (#36409)
Adding support for @implements. (#36292)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix(36989): 'async' modifier cannot be used in an ambient context.ts (#37010)
LEGO: check in for master to temporary branch.
Allow --composite false or --composite null on the command line (#36997)
Remove unnecessary assert (since we allow already open file to be opened again even through openFile command - partially) from updateOpen command (#37059)
Detect circularities when removing 'undefined' from defaulted params (#37023)
LEGO: check in for master to temporary branch.
Expose call count for instantiateType in extendedDiagnostics (#36797)
Update baseline (#37049)
No error on `this` exprs in static property inits (#36781)
Retain undefined initializations (#36806)
Update user baselines (#37033)
Unwrap substitutions both before _and_ after potential simplification (#32116)
Revert "Support declaration emit for late bound element accesses assigned to functions in both TS and JS (#36593)" (#37034)
Properly handle control flows from returns in try/catch within IIFE (#36901)
Handle getScriptVersion correctly to ensure program structure is checked correctly (#36808)
Ignore data- props when excess property checking (#36952)
Reduce lerna loglevel (#37024)
Adds floating block comments to the outlining spans response (#36880)
Check for undefined `source.symbol` (#37021)
Support declaration emit for late bound element accesses assigned to functions in both TS and JS (#36593)
Baseline arity checks for jsx sfc tags (#36643)
Add js-equivalent test for the binary expression stress and introduce  trampoline into getJSSyntacticDiagnosticsForFile (#36724)
Add helpers to helper list, per comment on #36806
Harden telemetryOnOpenFile (#36993)
Declare dependencies between helpers in the declaritive fashion introduced by #35967 (#37001)
Remove unneeded branch from getHelperName (#36998)
LEGO: check in for master to temporary branch.
test(helpers): Update test baselines
fix(helpers): Use `hasOwnProperty.call`
Switch Debug.assertX functions to use asserts conditions (#36995)
Convert UnionOrIntersectionType.couldContainTypeVariables to ObjectFlags (#36947)
Use couldContainTypeVariables to short-circuit instantiateType (#36951)
Add --force to vue-next dockerfile since latest image version errors without it
Update user baselines (#37003)
Rescedule nightly publish to 11pm pst, (7am ust)
Update user baselines (#36999)
Use getters to define live export bindings refresh (#35967)
Update user baselines (#36992)
LEGO: check in for master to temporary branch.
Update user baselines (#36973)
Properly handle both special export forms when renaming (#36914)
Set CI=true in the office-ui-fabric docker test so it doesnt use a progress indicator (#36982)
Update CONTRIBUTING.md (#36553)
LEGO: check in for master to temporary branch.
sanitize yarn-node path in output (#36953)
Add elaboration & quickfix for async-able arrow function (#36342)
Name workflow
Probably dont need artifact drops on release branch PRs
Add task mirroring devops release branch artifact building pipeline
Update user baselines (#36942)
Some would say it's trigger'd
Publishing to npm isnt the default on github for reasons
Make the nightly publish cron task also respond to a publish-nightly event
Port nightly publish task to actions
Update scripts for octokit 17 (#36915)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Try removing fetch-depth 0 config to improve speed, add sync-branch workflow
Cast version result so it isnt declaration emitted as a literal type once it has a wellknown value
Add set-version workflow
Expose importModuleSpecifierEnding to protocol (#36725)
use const instead of let for new class iife assignments (#36907)
Copy diagnostic messages to built/local to fix localization process (#36903)
azure-sdk test: move typescript location (#36902)
Remove trailing whitespace from copyright notice (#36886)
feat(36048): handle uncalled function checks in ternaries (#36402)
fix(33377): use quoteStyle option for string literals completions (#36720)
Unify padding impls and consistently use them
Cast sys.bufferFrom results in cases where global buffer and sys copy of buffer mismatch
One _big_ script block (since it seems like FS edits are not persistent across steps?)
Limit dispatch triggers
Add new release branch workflow
getDate not getDay, also 1-based months please
Add buildTsc to preTest for user test runner (#35781)
Include stdout in test worker error messages (#35921)
fix(29908): Declare static method/property quickfix can add st… (#36854)
Wrap classes with decorators or static properties in an IIFE, even for ES2015+ (#32011)
Update user baselines (#36801)
Import style punditry (#36814)
Exempt ambient private properties from noImplicitAny (#36640)
fix(30003): formatter deletes comments after trailing comma (#36674)
Marked internal createAnonymousType type as allowing undefined Symbols (#36016)
Set correct pos for NamespaceExport (#36794)
Update user baselines (#36796)
Update user baselines (#36765)
No template refactor on plain strings (#36785)
Adds puppeteer to test whether typescript.js runs in the browser (#35471)
Add --git-dir and --work-tree to user tests (#35362)
Avoid expensive relationship checking in mapped type member resolution (#36754)
fix(36416): empty import path causes server crash (#36751)
Don't npm install the parent project with no args (#35359)
Update versionMajorMinor to match package.json
Bump package.json version to reflect reality
Do not report errors when we fail to find a module symbol at an import specifier when invoked via API (#36742)
Error when property is specified more than once via a spread (#36727)
Throw syntax error for `}` and `>` in JSX text (#36636)
Use type-only imports in auto-imports when it would be an error not to, and use auto-imports in “implement interface” fix (#36615)
Allow intersections (and substitutions) to be checks against discriminable unions (#36663)
  Handle walkThroughSnippet:/ and untitled:/ as dynamic files (#36722)
Either clone or pull, don't do both (#35230)
Update user baselines (#36669)
redo #28564 (#36665)
Support property declarations in jsdoc template generation (#36658)
Cache results of isGenericObjectType and isGenericIndexType (#36622)
Optimize deferred type references (#36607)
Faster exit from isTypeRelatedTo with identityRelation (#36590)
Update user baselines (#36641)
Add vue-next to docker suite (#33865)
Update user baselines (#36617)
Also edit the cherry-pick script to handle non-master base branches while we are here
Patch cherry pick script for new octokit
add support for Lift Template Literal Restriction (#23801)
Expose hasOnlyExpressionInitializer as a public type guard (#33229)
Add rxjs to the docker suite (#33500)
Drop support for defunct Chakra host (#33797)
Make Response.performanceData public (#36595)
Enable @typescript-eslint/space-before-function-paren, @typescript-eslint/no-unused-expressions (#36569)
De-duplicate indentations in JSX Texts (#36552)
Update user baselines (#36578)
resolvedJSDocType should cache on node, not symbol (#36561)
Do not adjust location for import/export keywords with more than one possible binding (#36560)
Support 'find references' on most declaration-related keywords (#36490)
Filter out private fields in string literal property completions.
Improvements based on @sandersn's notes
Add a similar test for `target.symbol.valueDeclaration`
Avoid testing `isClassDeclaration` if there's no `valueDeclaration`
fix spelling errors (#36523)
fix(35069): insert blank line after last new import (#36531)
Report config file parsing diagnostics correctly with tsc --b (#36520)
Capture fakes.version instead of the current version string in baselines (#36518)
Actually use the caches resolvedJSDocType (#36516)
Class fields w/esnext+[[Define]]:no shadow error (#36405)
Subtypes of ErrorConstructor extend it (#35549)
@typedef's nested Object syntax disallows type arguments (#36172)
Dont use sourcemap if it contains inlined sources (#36384)
createPrivateIdentifier: names must start with # (#36506)
Add constructor functions to aliasable expressions (#36108)
Nested this container (#36495)
fix(36481): allow renaming private fields (#36499)
Make javascript require goto def similar to ts import equals (#36487)
fix(36385): return failed exit code if tsconfig doesn't exist and there are no input files. (#36474)
NoEmit and incremental are allowed with listFilesOnly (#36488)
Disallow incremental with noEmit (#36483)
fix(33362): 'extract to function' for variable that is assigne… (#36455)
Use deepEqual in tests for clarity
Don’t use 'import =' for auto-import when esModuleInterop is on unless it’s already been done (#36475)
Update config.yml (#36419)
Allow type-only namespace imports in implements clauses (#36464)
Add # to completion trigger character, (#36462)
When looking at outlines for try functions, allow for not finding a child to provide a span when requesting  outlines (#36389)
Type-only auto imports (#36412)
fix(36140): handle quotesPreference option in interface implementation (#36398)
Issue better error for exporting primitive type (#36424)
fix(36068): Incorrect quick fix for undeclared private field i… (#36373)
Allow `infer` type variables to have constraints inferred (#32093)
Trampolines for large binary expressions (#36248)
Respond to CR
Remove distinction between CI lint and local lint (#36430)
Handle error reporting of files when new file is created after its opened in editor (#36271)
Add tests
es2018: visit other binding elements when transforming object destructuring with rest (#35872)
Add --force option to npm install commands in dockerfiles (#36431)
Track changes to redirect info
ESNext+[[Define]]: reference to param props illegal (#36425)
Emit statements before super (#36417)
Adds extension recommendation for rbuckton.tsserver-live-reload (#36426)
Add more detailed log for bad codefix request (#36420)
Update user baselines (#36411)
Handle header comments better by comparing its end line with first node line (#36413)
Add prefix/suffix only to binding element name (#33538)
Consider SymbolFlags.Method as function-esque during js declaration emit (#36274)
fix(lib/es2019): `Symbol.description` may be `undefined` (#36263)
Update user baselines (#36382)
Add tests
Disallow 'declare' modifier on private named properties (#36381)
Dont add "use strict" prologue in json emit (#36380)
Update type-only import semantics to allow type queries (#36092)
Produce redirect info about files when requested
noErrorTruncation affects semantic diagnostics (#36306)
Add `as` completions (#36359)
Do not short-circuit module visibility calculation when alias visibility is requested (#36339)
Be more tolerant with private identifier parsing, issue more targeted errors, and support private identifiers in forgotten 'this' codefix (#36188)
Add jest to fp-ts user test (#36360)
Add a list of PR owners for tooling to use (#36357)
Include super.XXX(...) assertion method calls in CFA (#36293)
Completions for `asserts` and `declare` (#36355)
Adds support for showing default exports in the navtree (#35477)
feat(29624): better errors for non-exported types (#36187)
forceConsistentCasingInFileNames affects module resolution (#36334)
Update LKG.
resolveJsonModule affectsModuleResolution (#36290)
experimentalDecorators and emitDecoratorMetadata affect builder state (#36297)
useDefineForClassFields affects emit (#36308)
Remove the compiler diag 1360 after it got missed in #35751 (#36332)
remove duplicate message (#36125)
feat(36231): Improve message for "Remove declaration for: ..." (#36283)
Improve diagnostics and add code fixes for top-level await (#36173)
fix(34621): show suggestions in class property initializer (#35999)
fix(35043): TS Server: references does not mark isDefinition o… (#36051)
fix(36023): fix crash in document highlight service (#36233)
Improve variance measurement (#36261)
LEGO: check in for master to temporary branch.
Instead of checking if file exists before file read, handle exceptions from file read (#36244)
Handle untitled files from vscode which are of format: untitled:^Untitled-1 (#36240)
Codefix: Don’t return a `fixId` if there’s definitely nothing else that can be fixed (#35765)
fix(35954): Change spelling for private field incorrectly fixes to a string property (#36079)
fix(35944): show spell checking quick fix for non-existent private named property access (#36195)
Move individual duration properties into a `performanceData` object (#36210)
importsNotUsedAsValue affects semantic diagnostics (#36001)
Use fs.existsSync to check for cancellation (#36190)
sys: Use readdir withFileTypes option to skip lots of stat syscalls (#35286)
Revert "Add related diagnostic to "used before defined" if type is a function that returns a union with undefined (#33171)" (#35751)
remove private named properties from rest and spread types (#35950)
throw an error when no default export present (#35815)
Update LKG (#36164)
Handle Identifier declarations in getDeclarationSpaces (#36136)
Use watch invoked with `node_modules/.staging` as watch for refreshing complete node_modules, so that npm install is reflected correctly (#36039)
Handle invalid package.json typings fields when generating specifiers (#36137)
Remove the check that if base file name starts with ^ is dynamic file name since those files can exist (#36109)
Allow references to uninitialized ambient properties (#36112)
Check combined intersection properties against target index signatures (#35143)
Get jsdoc host from chained assignment (#36111)
Remove CFA discriminant check restrictions (#36114)
Correctly resolve tags for function overloads (#30253)
Update user baselines (#36046)
Report time spent in updateGraph (#35675)
Tweak the test and add more duplicate name assignment tests
Allow destructuring the same property multiple times
Disable declaration emit for json files (#36066)
More actionable "must have annotation" message (#35839)
Parse error on private identifier optional chain (#35987)
Make unchecked property assertion optional
Resurrect `SuppressAnyReturnType`, but make it used only at the toplevel
Remove `SuppressAnyReturnType`
Add test
Rename new property
Add property for unchecked completions
fix(31909): show suggestions for second type argument of generic (#36024)
Do not omit the anyFunctionType from intersections (#35658)
Renamed references to 'configurePrerelease'. (#35997)
Add `s` to `importsNotUsedAsValue` (#36037)
Contextually typed binding element initializers (#35855)
CustomElementConstructor: should be construct signature (#36030)
Shorten test baseline names (#35993)
Type-only imports and exports (#35200)
Add assumeChangesOnlyAffectDirectDependencies as a option to skip checking and generating .d.ts files for files indirectly importing affected file (#35711)
feat(lib/es2020): Add `Promise.allSettled(…)` (#34065)
fix(35179): formatter incorrectly remove spaces (#35979)
Cleaned up refactoring names, descriptions.
Remove refactoring from template expression to string concatenation.
Make `checkPropertyNotUsedBeforeDeclaration` ignore properties of properties
Reuse "getBestMatchingType" logic during elaboration to allow for more specific elaborations (#35278)
Update DOM from TSJS-lib-generator (#35938)
Disable timeout when debugging
Private named instance fields (#30829)
Add es2020 transformation (#35518)
show an error if --showConfig is enabled and tsconfig.json does not exist (#35723)
fix(35474): formatter incorrectly adds space after increment (#35550)
Support bigints in ES2020 (#33874)
Add base constraint completions for JSX attributes (#35803)
Add ES2020 to diagnostic messages (#35814)
fix file extension (#35825)
Add support for Call Hierarchies in language server (#35176)
Add top-level await for esnext and system modules (#35813)
Add module: es2020 (#33893)
Implement export as namespace from (#34903)
Increase selectivity of subtype relationship for signatures (#35659)
Readonly support for jsdoc (#35790)
Update user baselines (#35791)
remove JSDOC object->any rewrite for noImplicitAny (#35661)
Ignore @private/@protected on constructor functions (#35782)
Correctly set filesByName map when reusing program to ensure it is same as old (#35784)
Move executeCommandLine ambient code into tsc (#35788)
Filter out self-fulfilling completions (#35709)
Use resolvedPath consistently in the builder (#35757)
Update user baselines (#35756)
Add jsdoc support for @public/@private/@protected (#35731)
Update user baselines (#35755)
Remove unnecessary internal tags, handle bad input
Do not list output files that just change their modified time when using --listEmittedFiles (#35714)
Baselining tsc `--watch` output just like `tsc` baselines for easier updates (#35710)
Refactor to make failure messages more consistent
Add asserts to narrow down position issue
Properly reflect CFA effects of return in try or catch blocks (#35730)
Add `ignoreInterpolations` util to fourslash for fuzzy diagnostic matching (#35652)
Update user baselines (#35687)
Update user baselines (#35685)
Don’t offer import fix for members of arrays or classes (#35635)
Update user baselines (#35671)
Update user baselines (#35665)
  Do not write files directly from builder when noEmitOnError is true  (#34832)
Update user baselines (#35662)
Update user baselines (#35643)
Handles different references and renames involved with import export and import type node (#34813)
Dedent external runner message text
Add watchOptions to tsconfig and allow supplying them on command line as well (#35615)
Open bigger set of configured projects when opening composite project for operations that operate over multiple projects like rename (#33287)
Improve some completions on generic object literals (#34855)
Update user baselines (#35618)
Handle consistent file name during editor and tsc --watch scenarios (#34622)
Add ts namespace reference to tsc, since it now doesnt have one
Rename debug.ts so its name differs from its namespace (#35596)
Move executeCommandLine.ts into its own project (#35595)
Issue/34870 (#35586)
Sort extract constant above extract function (#35580)
Move most harness globals into namespaces (#35530)
Update user baselines (#35535)
Update user baselines (#35532)
Update user baselines (#35500)
Update user baselines (#35519)
Don’t auto-import undefined (#35504)
Move codefix types into services/types.ts (#35506)
test(ts-toolbelt): recursive iteration types (#33810)
Make no inferences from binding patterns with no defaults (#35454)
Use namespace import for esnext when esModuleInterop is off (#35475)
Remove unneeded Array and Promise JS rewrites (#35482)
Update user baselines (#35490)
Add nested global member creation to shim (#35473)
Update config.yml (#35388)
Update user baselines (#35450)
Remove redundant checker functions and use patterns more friendly to modules (#35399)
Remove duplicate definition of `Push` (#35397)
Update user baselines (#35436)
Emit unused identifier suggestion diagnostics in declaration files and ambient nodes (#35119)
Update user baselines (#35401)
Don't filter away private completions if in the same context
Refactor: No more than 1 namespace declaration per file (#35373)
Handle when output file would be in subFolder specified by outDir/declarationDir (#35366)
Improve control flow type caching (#35332)
Create returnOnlySignature only when inferences will possibly be made (#35173)
assign error to method definition node if a return type is empty (#35309)
When calculating spreads, merge empty object into nonempty object to … (#34853)
Normalize type references before relating them (#35266)
Emit defineProperty calls before param prop assignments (#34987)
useDefineForClassFields skips emit of ambient properties (#35058)
Clean up error messages for using TypeScript syntax in JavaScr… (#35254)
Actually use the moer complete update function in visitEachChild (#35301)
Add fp-ts to .gitignore (#35295)
Scan types of `yield` expressions in classes too
Allow `--inspect=port` in `gulp runtests`
Add fp-ts to user tests (#35249)
Allow references to globalThis to be made in declaration emit (#35279)
Have definite assignment assertions on property signatures mark them as typescript (#35270)
Update user baselines (#35275)
Add inference priority level for conditional types in contravariant positions (#35199)
Update user baselines (#35272)
Update user baselines (#35271)
Map stale empty object type in union into fresh empty object type after spread is complete (#34839)
Update user baselines (#35251)
Make `getSourceFileToImportFromResolved` prefer files in `program.getSourceFiles()`
Update user baselines (#35218)
DOM update 2019-11-19 (#35207)
Add preceding semicolon on await insertion when parentheses are included (#34627)
Revert "Skip costly tests" (#35197)
Improve positioning of the implement interface codefix (#34928)
More tests for super.method call chain, improve vary-by (#35013)
fix emit for delete on optional chain (#35090)
Properly strip readonly from rest argument types (#35169)
Adds back the script to request a playrgound build (#35168)
fix: mardkown link syntax error (#35123)
Update LKG (#35128)
disallow 'await' and 'yield' in property and enum member initializer (#34892)
optimize transform of optional chaining and nullish coalescing (#34951)
Support dynamic file names with project root path (#35111)
Adds 'did you mean' to the CLI args parser (#35063)
Update user baselines (#35075)
Properly analyze switch statement bypass control flow (#35087)
Do not allow freshness to move errors out of the current file, ensure json documents are deeply unfreshened and fully widened (#35048)
strip QuestionToken from MethodDeclaration and PropertyDeclaration emit (#34954)
Defer switch exhaustiveness checks (#35000)
More version sanitization
Don’t assume importing some JSON means you want everything imported with .js extensions (#34961)
Add "auto" to importModuleSpecifierPreference (#34981)
Strip more timestamps and versions from docker logs to better handle the more verbose logging from office-ui-fabric
Properly instantiate object types created from rest parameters (#34826)
(34894): Wrong information in error message for overridden acc… (#34901)
Add related diagnostic to "used before defined" if type is a function that returns a union with undefined (#33171)
Use empty object for invalid package json contents instead of undefined (#34906)
Improve error message when compiling a .js file (#34861)
Propagate 'undefined' instead of the optional type marker at an optional chain boundary (#34588)
Remove the ping for playgrounds on TS deploys (#34862)
Update user baselines (#34851)
Update user baselines (#34845)
Exclude types originating in literals from recursion depth limiter check (#34742)
add template literal spans (#34699)
Update user baselines (#34838)
Update user baselines (#34820)
Report generic rest parameters as unreliable variance positions (#33020)
Add circularity checking during deferred type argument creation (#34791)
Generate more correct property name nodes in declaration emit (#34741)
Evaluate RHS of binding/assignment pattern first (#34806)
Add isIntersectionConstituent to relation key (#34789)
JSDoc type reference understands require with entity name (#34804)
Update user baselines (#34759)
This handles when packages are symbol links in mono repo like scenarios to use source files instead of output d.ts from project reference (#34743)
Update issue reports agian (#34768)
Update issue templates (#34767)
Adds accept header to the dispatch request when requesting a playground build of monaco (#34763)
make `globalThis` have an empty `declarations` (#34561)
Show all matching enum flags in debug flag formatter (#34689)
Include *.json in the root files if they are specified as root (#34676)
Update inconsistent use of the word multiline/multi-line in test cases (#34733)
Update CONTRIBUTING.md
Avoid a crash with `@typedef` in a script file. (#33847)
Restore delayed merge check to getTypeFromJSDocValueReference (#34706)
Do not consider element accesses which are neither statically bindable nor late bound as special assignments (#34679)
getTypeFromJSDocValueReference: handle import types (#34683)
Add GitHub Actions (#34614)
Prioritize loading plugin from probeLocations over peer node_modules
Don't assume that all symbols have declarations
Treat any mix of element/prop access as declaration in JS (#34649)
Update the README links
Handle undefined from getPropertyNameForPropertyNameNode
Use longer lambda parameter names
Change `master` branch version to 3.8 (#34629)
Accepted baselines.
Update version to 3.8.
Address more potential `this` issues
Extend the correct tsconfig.json. (#34615)
Extend the correct tsconfig.json.
Ensure export= symbol from JavaScript always has a valueDeclaration (#34553)
Accept new baselines
Add regression tests
Accept new baselines
Add tests
And a few more
Improve the launch template
Add option to configure automatic optional chain completions (#34552)
Ensure original files are included in tsconfig.release.json (#34584)
[WIP] Improve optional chaining checker performance (#33794)
Handle more cases
Ensure functions that have prototype properties assigned by Object.defineProperty get marked as classes (#34577)
Extend tsconfig.release.json from the sibling tsconfig.json to ensure files aren't forgotten.
Don't immediately return in getMemberSymbols.
Bind @class in the right place -- bindWorker not bindChildrenWorker (#34575)
Emit computed property temps even w/o init w/useDefineForClassFields (#34406)
Perform checks prior to calling `addTypeProperties`.
Optional chain control flow analysis fixes
fix assertion condition
Remove redundant and misplaced perfLogger startup statement (#34551)
Add completion test for partial generic object (#34559)
Accepted baselines.
Update comment.
Accepted baselines.
Add user preference to the protocol.
Added option 'includeAutomaticOptionalChainCompletions' to disable '?.' completions.
Delete redundant test
Added test.
Dropping assert for 3.7
Rewrite tests
Add additional properties to switch declaration
Consolidate checks in emitFilesAndReportErrors
Add listFilesOnly command-line option
Extract shared helper
LEGO: check in for master to temporary branch.
Accept module resolution trace baseline where baseUrl is specified as "../" in tsconfig
Feedback on formatting
Add test with incremental program with only d.ts files
Some changes to incremental tests
Update another writeFile call-site
Resolve more jsdoc value references as types (#34515)
Make ImageData(Uint8ClampedArray)'s 3rd param optional (#34519)
factory: parenthesize for-of expression when necessary (#34229)
Make sure that global module re-exports are short-cutted to be added to completions
Update bug template to link to nightly playground
Dedupe inherited jsdoc comments (#34522)
LEGO: check in for master to temporary branch.
Add test for #34502
Sample to baseline output
Does not add a duplicate completion when offering an export which was re-declared as a global - fixes #32675
outFile to baseline
rootDir tests are baselined
resolveJsonModule as baseline test
transitiveReferences as baseline
missingExtendedConfig to baseline test
empty files to baseline test
Write ExitStatus as enumng-rootDir-is-in-the-tsconfig.js
Inline function to tidy up control flow
Stop pre-emptively creating directories
factory: correctly parenthesize conditional head (#34227)
Demo as baseline test instead
Convert some more tests into baselines
Some changes to incremental tests
LEGO: check in for master to temporary branch.
Do not write build info if there are no files to emit
refactor(spelling): correct misspelled response
Update user baselines (#34411)
Remove property-override-method error (#34494)
Restore 'type' and 'namespace' to All completion filter (#34491)
Better format for the exit code test
Typofix: `..._OutputsSkupped` -> `..._OutputsSkipped`
Accept new baselines
Properly attach alias symbol to `readonly T[]` types
Accept new baselines
CR feedback + Consistent error spans on case/default clauses
Do not write build info if there are no files to emit
Add test for #30457
Add test for --tsbuildinfo not as absolute or relative path
Update Math.round in es5.d.ts (#33920)
Update user baselines (#34345)
Allow inferFromUsage to do auto-imports (#33915)
Update DOM from TSJS-lib-generator (#33753)
Accept new baselines
Add tests
Use control flow analyzer for switch case fallthrough checks
Update user baselines (#34112)
LEGO: check in for master to temporary branch.
Update user baselines (#34002)
Add assertion when classification has unexpected length
fix #33427 (#33486)
Handle when import alias has to parent (therefore is synthetic module symbol) (#33813)
Update issue templates
Handle string literals in merge conflict regions
Update user baselines (#33909)
Update user baselines (#33905)
LEGO: check in for master to temporary branch.
Update user baselines (#33887)
Revert "Disallow incremental with noEmit"
Include project reference in release config so LKG build works (#33864)
avoid space before dot question (#33840)
Add external mapShim/debug modules (#33712)
Update user baselines (#33838)
'amd' missing from error message for error TS1323 (#33803)
More succinct
Accept new baselines
Update tests
Add tests
Accept new baselines
Add tests
Support typeof and instanceof
Change link to tutorial in README
Accept new baselines
Add tests
Update user baselines (#33817)
Accept new baselines
Update tests
Reflect CFA effects of optional chains in equality checks
LEGO: check in for master to temporary branch.
Update user baselines (#33816)
Code following truthiness assertion with false argument is unreachable
Update user baselines (#33801)
Detect unbindable exports before setting CommonJS module indicator (#33784)
update eslint. fix eslint @typescript-eslint/no-unnecessary-type-assertion errors
'amd' missing from error message for error TS1323
Update user baselines (#33775)
LEGO: check in for master to temporary branch.
Add template .vscode/* settings, ignore real ones (#33758)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update user baselines (#33773)
Update user baselines (#33772)
Revert old lkg and re lkg (#33769)
Backfill TypeReference.typeArguments in the API (#33714)
Update user baselines (#33740)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Improve error message when reserved word is used as identifier (#33702)
Update LKG (#33710)
Ensure prepend texts are set when skipping internals (#33694)
Update baselines.
Change error codes.
Better error message for mistaken import (#33706)
Rename this function so it stops shadowing a local we use elsewhere (#33692)
Better error message for mistaken import (#40)
LEGO: check in for master to temporary branch.
Improve error message when reserved word is used as identifier
nullish coalescing commit (#32883)
fix (lib): Loosen predicate return types of typed arrays, adapt docs (#31343)
Add error message for set accessor vsibility issues (#33683)
Allow special element access assignments to create declarations (#33537)
Add support for Optional Chaining (#33294)
Implement declaration emit for accessors in the js declaration emitter (#33649)
Accept new baselines
Add regression tests
Properly handle recursive type references in type inference
Remove the post-publish script
Accept new baselines
Update tests
Accept new baselines
Revise error messages + related spans + no errors on never-returning functions
Enable forceConsistentCasingInFileNames by default in newly generated configs (#39) (#33614)
Add test when file is part of non default configured project before the default one
More refactor
Refactor
Update user baselines (#33635)
Undo showing redirected files in --listFiles
Support some late-bound special property assignments (#33220)
Updated: Only auto-import from package.json (#32517)
Add support for capturing cpu profiles into tsc itself (#33586)
Respect //@ts-nocheck in TS files (#33383)
Better template literals support in checker (#32064)
Add the test that fails with find all references
Prevent collision of imported type with exported declarations in current module (#31231)
Handle alias symbols in getTypeOfDottedName
Update DOM (#33627)
update message, generate diagnostics, update src and accept baselines
Allow `allowJs` and `declaration` to be used together (#32372)
Accept new baselines
Add tests
Error on assertion and non-returning function calls that aren't CFA-ed
Enable eslint cache (#33619)
Add useDefineForClassFields flag for Set -> Define property declaration (#33509)
Add semicolon preference to formatter options (#33402)
Rename the smaller build to '@typescript/language-services' and have a separate build step for creating and publishing vs configuring the build
Update the baselines
Add tsc baselining test for scenario that changed.
Accept new baselines
Add regression test
Limit this.foo(...) reachability checks to explicit this types
Accept change in existing baseline
Update user baselines
Update emitting timestamps during testing
More work on generating a small typescript build
Accept the baselines
Remove all baselines
Accept API baseline changes
Reword the option description per feedback
Update the error summary reporter to take sys as parameter
Add getTypeArguments method to TypeChecker interface
Improve the gitignore / npm ignore
Add a command for stripping the dependency down
Make time and tick local to test case so it doesnt affect the baseline
change eslint-disable rule name
try eslint-disable-next-line instead
Update user baselines
Accept new baselines
Add tests
Cache propagating variance flags in the relationship cache (#32225)
Hoist and distribute type parameter constraints over type parameters … (#33453)
Introduce flattened error reporting for properties, call signatures, and construct signatures (#33473)
Relax the constraints of isValidBaseType to allow base types to be constructor types (#33146)
use forEachEntry
Update user baselines (#33557)
Add doc comments for fileExists and directoryExists implementation
Update user baselines
update missing baselines
Remove errors from the gulpfile
Include type operators in aliased type checks
Accept new baselines
Add tests
Show redirected files in --listFiles
Add test that fails to emit declarations correctly
Add test to verify tsc like command line input
Expose method to baseline fs
check for SyntaxKind.JSXAttribute instead of located-ness of name prop
When a packed version of TypeScript ios requested, also send a request to create a build of monaco for the playground
Minor simplification
Update user baselines (#33534)
Cheaper caching scheme
Update user baselines (#33508)
Allow readonly arguments to Promise.all(), etc.
Enable caching for control flow paths that precede loops
report extraneous jsx attribute error on attribute name instead of entire attribute assignment
report error on extra jsx prop instead of component name
Properly handle try-finally statements in isReachableFlowNode
Add output file names api for supporting ts-loader
getConstraintDeclaration gets the first declaration with a constraint… (#33426)
Reintroduce cloneInferredPartOfContext to fix overloaded inferences with returnMappers (#33478)
Narrow unknown under inequality when assumed false (#33488)
Attach flow nodes only when allowUnreachableCode !== true
test: update error log
fix: change error1023 key name
fix: permit string/number literal in union type
fix: add "either" in code 1023 message
Reverse mapped types should have inferable indexes if their source had an inferable index (#33450)
Handle parentless nodes in isParameterPropertyDeclaration (#33472)
Handle parentless nodes in isParameterPropertyDeclaration
🤖 User test baselines have changed
Make extractSymbol explicitly drop JSDoc nodes
Accept new baselines
Added example of sortFn
Cache last isReachableFlowNode result + switch statement CFA fix
fix conflicts
fix typo
Accept new API baselines
Ignore references in with statements in getTypeOfDottedName
Report grammatic and type-based unreachable code errors in the same way
Revert "More efficient scheme for caching flow node reachability"
More efficient scheme for caching flow node reachability
Update user baselines
for-in or for-of expression is evaluated before loop back edge
Accept new baselines
Further CFA handling of exhaustive switch statements
Treat exhaustive switch statements like non-returning functions in CFA
Separate Tokens and Identifiers from other Nodes
Force a gc before printing diagnostics
Remove all submodules - just force clone and reset on run instead (#33425)
Update user baselines (#33411)
Use isReachableFlowNode to check for implicit return
Add build-eslint-rules to npm prepare script (#33417)
Dedicated isReachableFlowNode function to determine reachability
fix duplicate async modifier codefix
Use declared type for references in unreachable code (again)
Make perf count functions public
Even more renaming
Update baselines with any[] inferences
Revert "Use declared type for references in unreachable code"
Use declared type for references in unreachable code
Show more items in the navbar (#33040)
Handle --isolatedModules and d.ts emit in the builder
Add failing test cases for isolatedModules after enabling declaration emit
Added '}' to allowed characters in diagnostic message
Update src/services/refactors/extractSymbol.ts
Better Array.sort compareFn docs
Accept new baselines
Address CR feedback
Assume void variables are initialized
Do not emit .js files if only d.ts file will be impacted.
update eslint-formatter-autolinkable-stylish
LEGO: check in for master to temporary branch.
Accepted a few more baselines, why not
Added more helpful syntax error for enum member commas
Separate emitOnlyDtsFiles and forcing dts emit (for builder signature detection where we want it irrespective of settings)
Baseline emitted files that are written even if same file contents
Baseline tsbuild info section files from written files
Get the last output from the written files
Use clean and written files to verify the tsbuild incremental compilation = clean build compilation
Refactor to write baseline of sourcemaps that are written
update typescript-eslint to the latest version
Update user baselines (#33322)
LEGO: check in for master to temporary branch.
Added explicit check for scientific notation
Added codefix for numeric literals >= 2 ** 53
LEGO: check in for master to temporary branch.
Add test + reshuffle/rename new code
Update user baselines (#33281)
Add heuristic for extracting irreducible `null` and `undefined` types from intersections of unions (#33150)
Renames and more cleanup
Tonnes of cleanup
Fallback type is always any now
Infer void from expr statement usage, not calls
Update user baselines (#33261)
Update user baselines
fix eslint errors
Mark deep indexed access comparisons as expanding (#33144)
Add browser field entries for all require calls in sys.ts (#33242)
Accept new baselines
Add regression test
Accept new baselines
Make lower priority inference when entire source is matched in target
Elevate mapped types over type parameters in the same way as naked type parameters in intersection inference prioritization (#33223)
Ensure that TS can run in a browser by checking for a process obj before using it in the perf logger (#33141)
someTypeRelatedToType now passes isIntersectionConstituent (#33213)
Bind typedef/enum on all assignment decl kinds (#33240)
Handle browserify-ignored module result for etw logger (#33225)
Update user baselines (#33238)
fix eslint errors
Accept new baselines
Add regression tests
Accept new baselines
Update user baselines (#33212)
Don't instantiate-in-context-of when inferring to type variable
Value for transpile option in CommandLineOption
update typescript-eslint, eslint-plugin-jsdoc, del. remove @types/del
LEGO: check in for master to temporary branch.
Only error when testing functions that are not used in the following block
update eslint, typescript-eslint, eslint-plugin-jsdoc
Flag non-nullable values with call expressions in `if` statements as errors
Accept new baselines
Tweak isAliasedType
Handle seenEmittedFiles which was not being set when emit of a file was complete (#33145)
Add type parameter inference
Update user baselines (#33162)
Accept new baselines
Defer resolution of type arguments in aliased type references
Add convert const to let
Turn on findBuiltinTypes
Better outlining spans for prototype methods (#32782)
Accept new baselines
Update user baselines (#33083)
add support for extract as interface (#31644)
Exclude method symbols when relating tuple types
Added errorCount to WatchStatusReporter to detect 2 or more errors (#33082)
goto-def should treat constructor functions as functions (#33109)
Accept new baselines
Only defer aliased array and tuple types
Copied from old branch
Close over common variables in inferTypeFromReferences (#33095)
Handle missing global array type
Accept new baselines
Minor fixes
fix eslint errors
Remove unnecessary tslint-ignore (#33091)
add completion for promise context (#32101)
Improve names in infer-from-usage (#33090)
Improve names in infer-from-usage
Properly handle recursive array and tuple types in printback
Instantiate deferred type references like anonymous types
Recursive tuple types + fix instantiation of recursive type references
Added optional trailing slash regex
Make trailing slash required on cleanText regex
Use the in operator
Make triple-slash comment classification more restrictive
Support deferred resolution of type arguments in type references
Change doc-string for Unreliable variance flag. (#33036)
Should not report that files are not part of config for files that are not going to be emitted
Test with --out as well
Verify config file errors
Cache JS inferred class type symbol (#33010)
LEGO: check in for master to temporary branch. (#33011)
Update baselines
Improve “Add missing await” fix-all (#32922)
Walk up parenthesized type nodes when looking for the type alias hosting a node (#32924)
Add support for jsdoc properties with hyphen (#32631)
Handle network style paths for watching (#32888)
update eslint
@typescript-eslint/quotes
update typescript-eslint packages to 2.0.1-alpha.14
remove .eslintrc from scripts
change createMap<boolean> to createMap<true>
Constructor functions as classes (#32944)
Instantiate generic conditional infer source types in the context of the target conditional (#31545)
Resolve SymbolFlags.Type only at first in jsdoc getTypeFromTypeReference (#32947)
Update user baselines (#32975)
Update Feature_request.md (#32974)
Update String#toLocale{Lower,Upper}Case methods (#32961)
add baseline for unknown type spread
update typescript-eslint, eslint
@typescript-eslint/unified-signatures
update typescript-eslint packages to 2.0.1-alpha.8
restrict object spreading on unkown type
remove useless baselines
Detect more TS syntax in JS files
Accept new API baselines
Update API to be backwards compatible
Support 'asserts this' and 'asserts this is T' type predicates
Update user baselines (#32946)
Add more info to the readme on the topic of the `runtests` command (#32942)
Run user test submodule update in the correct directory (#32921)
Right. Environment variable on windows should be uppercase.
Update user baselines (#32930)
jsdoc template tags might be unmatched (#32936)
Lowercase `M` to `m` in all reference to the microsoft github org (#32938)
Add produceLKG flag to cherry-pick PR script
Add JSX codefix if available (#32281)
checkJs: require JSDoc type argument for Array, Object, and Promise in noImplicitAny (#32829)
Always run Public API tests, allow lowercase skippercent (#32892)
Update node types dependency (#32424)
refactor: modify the TokenFlags default value (#32112)
Accept new baselines
Add additional test
Accept new API baselines
remove 'project' option from default .eslintrc configs
add --ci option to lint command to run eslint with the .eslintrc.ci config
remove typescript dependency from boolean-trivia, no-double-space rules
remove useless comment
Add InferencePriority.Circularity per CR feedback
 Allow to omit the begin parameter of %TypedArray%.prototype.subarray (#32125)
Report error when using generic class in js file (#31723)
Add check for Records in reportNonexistentProperty function (#31701)
remove useless condition as argumentExpression is always defined (#31567)
small refactor to cut back on type assertions (#32920)
Accept new API baselines
Point es2020 in esnext.d.ts (#32776)
Reuse unchanged ambient declarations in incremental parsing (#32849)
Accept new baselines
Add regression test
Stricter criteria for eliminating types in unions during inference
Comment correction
set augmentations, moduleAugmentations as readonly
Accepted baselines.
Perfer the non-module name of a symbol when writing the name of a symbol (#32880)
A bit of cleanup.
Accepted baselines.
Get base primitive type for unary operators.
Accepted baselines.
Report on base primitives for certain operations.
Update versions to 3.7 (#32879)
report invalid modifiers on class expression properties
Update user baselines (#32886)
lint all ts files in scripts. remove tslint: directive. add extended eslint config for CI environment
add .eslintrc for src and scripts. update typescript-eslint
Do not escape actual template literals on emit (#32844)
Add cancellation token check for function expression, arrow expression and class expression just like their counter part declarations This helps in early exit if request is cancelled and intellisense in js files is super quick with edits
Do cleanup after opening files only if opening a file.
Update user baselines (#32837)
PR feedback
Elide /index from auto-import when using rootDirs compiler option (#32828)
Add error message for keywords with escapes in them (#32718)
Do not emit 'this' for __awaiter helper at the top level of a strict-mode file. (#32823)
Print program only if there are files are added or removed from the program.
Add support for import.meta in System modules (#32797)
disable array-type for es2019.array.d.ts
remove spaces from @internal tag
harness: change const to var
change const to let
remove TODO comments
Call getResolvedSignature only when needed for generics or overloads
Allow accessors in ambient class declarations (#32787)
Allow functions and ambient classes to merge (#32584)
Ignore unknown files to search from in document highlights
Tweak message text
Correct string template
Add error related to file not in rootDir and file not part of included root files at the references
Use an explicit type
Use defaults for transpileModule (#31563)
Support tree-shakable imports for --target es2015 (#32742)
Update src/compiler/sys.ts
Update src/compiler/sys.ts
Handle status and error messages for better checking
Transitively upstream blocked project should not build
Circular reference in the build queue is build stoppable error
Verify demo build
Remove error on invalid jsdoc tokens (#32769)
Restore logging of the program file list
Use switch instead of instatating an array and when looking inside a module
Include fewer paths in exception
Accept API baseline changes
Less aggressive monomorphism for flow nodes
add additional tests to no-keywords
Accept baseline API changes
Make flow nodes more monomorphic
revert lib/react16.d.ts
remove useless semicolons
disable no-redeclare
Accept new baselines
Excess discriminated types match all discriminable properties (#32755)
fix formatting
no-unused-expressions: [error, { allowTernary: true }]
array-type: [ default: array, generic: array ]
Adds a debug command to the scanner
fix eslint paths
Reflect control flow effects of calls to never-returning functions
add eslint setting for .vscode
Truncate to 150 chars and added unit tests
fix eslint errors. remove tslint:* comments
Only add unnecessary-await suggestion on await expressions (#32754)
remove useless TODO comment
Move helper function outside class
Only check import = reference when target is Value (#32747)
Add some logging to the sys.watchFile and sys.watchDirectory
Improve excess property checking for intersections (#32582)
Support extended unicode escapes in identifiers, per es6 spec (#32725)
Change to missing file watcher on linux and darwin explicitly to avoid watching deleted inode
Resolve module specifier relative to moduleFile.originalFileName (#32722)
Update user baselines (#32732)
Allow compile on save with decorator emit
Adds another test around parsing jsdoc
Remove unnecessary 'commandSucceeded' variable
Suggestions now use diagnosticCollection (#32740)
Handle the variadic args for inline console.logs
Update based on PR feedback
split lint task to list-scripts, lint-compiler. add list-scripts, lint-compiler to postTest
Adjust isIdentifierText to skip multiple characters when a code point is multiple chars long (#32720)
Preserve const enums should keep import refs (#28498)
Do not include built/local/enu when producing LKG (#32723)
Add 'readFileWorker' instead of modifying 'readFile'
Escape apparent substitution in synthesized NoSubstitutionTemplateLiterals (#32580)
Define interface for TSConfig. Change compilerOnSave to compileOnSave (#32481)
Address code review feedback
simple-indent: remove useless types definition
fix eslint errors
lint src/, scripts/ folders separately
change eslint tests formatting
simple-indent
Move const enums and typeof facts maps out of createTypeChecker (#32691)
Accept new API baselines
Remove unused code
Support 'asserts' type predicates in control flow analysis
Remove more try-finally blocks
Remove try-finally blocks
Make auto-imports more likely to be valid for the file (including JS) & project settings (#32684)
Prioritize “property names” over punctuation in smart select (#32687)
Add test
Avoid compile on save for declaration files
Update user baselines (#32683)
Amend scanner to support astral characters in identifiers when parsing es6+ (#32096)
Update browser table
Use 'noop' for NullLogger
Update user baselines (#32658)
Supress console.log & others inside the TS Server runtime so that language service plugins don't accidentally use them and kill the server - fixes #31209
Retarget to es6 and fix the resulting bugs (#32221)
Add PerfLogger and NullLogger to simplify conditional logic
Ensure that the comma is removed when all named imports are removed via moveToFile - fixes #31195
Don’t issue used-before-initialization errors in declaration files (#32579)
A merged interface with an inherited member should satisfy an abstract base class member (#32539)
Prevent infinite recursion resolving nested conditional types with import types in them (#32097)
Reflect effects of assertion calls in control flow analysis
Don't exclusively check for just JS but scope down the check to not include the expando'd objects
Ensure that when import/export are used natively in the JS runtime that the check for alias symbol is re-applied - re comment in #26912
Allow expando additions to an imported object in JavaScript - fixes #31312
remote unused eslint rules
remove useless semicolon
Accept new baselines
fix formatting. revert type assertion
Remove project status, watches etc when project is no longer part of build order
Some refactoring
File move
Use optional module "@microsoft/typescript-etw" for ETW logging
Update LKG (#32578)
fix eslint errors
@typescript-eslint/array-type
Support more terminators for parsing jsdoc filepaths
Accept new baselines
Add regression test
Properly instantiate contextual type for object literal methods
Record full inference status in visitation cache
Intersect 'this' types in union signatures (#32538)
Bind a jsdoc enum as SymbolFlags.TypeAlias and not SymbolFlags.Enum (#32520)
Accept new baselines
Add more tests
Add more comments
Less aggressive reduction of intersection types
scope out duplicate code into setMembersDeclaredBySpreadAssignment function
Decrement line ends if they end with a carriage return. (#31220)
Handle namepaths inside JSDoc type expressions a bit better - fixes #31298
Support classification of triple-slash references
Don't exclude non-anonymous object types in identity checks
Retain the  configured project opened during opening client file even if opened file isnt included in that project This helps not create and remove project on every open if tsconfig file isnt referenced by any open file
Add test case before change where config project is created just to remove it
Accept new baselines
Add regression tests
Accept new baselines
Property assignment uses parent type annotation (#32553)
Infer between closely matching types in unions and intersections
#32458 stop ES5 __values with no Symbol.iterator getting stuck in loop
prioritize exclude class or right of dot
change deprecated rule @typescript-eslint/prefer-interface to @typescript-eslint/consistent-type-definitions
move eslint rules from eslint-plugin-microsoft-typescript to scripts/eslint
Strip more kinds of timestamps and versions from dockerfile output (#32519)
Accept new baselines
When inferring from XXX to T | XXX make no inferece for T (instead of never)
Update __awaiter to be more spec compliant (#32462)
Minor cleanup plus more comments
Combine multiple separate code paths
update eslint
Always infer between distinct type references to same target
Accept new baselines
Add additional test
Make lower priority inferences when inference process is blocked
Update user baselines (#32483)
remove tslint:* directive
@typescript-eslint/triple-slash-reference
use a map instead of an array
Adds baseline updates
remove tslint, tslint:disable-next-line, update @typescript-eslint/*
jsdoc/check-alignment
no-null/no-null
sort text for class member, JSX attribute, RHS of dot
Set sort text while adding sysmbols
Set the ModuleKind value for ESNext to be 99 so it doesn't change between releases (and yet another module system?!)
Treat Array<T> and ReadonlyArray<T> as synonymous in inference
Set the ScriptTarget of ESNext to be 99 so it doesn't change between releases
Undo accidental push to master
Set the ScriptTarget of ESNext to be 99 so it doesn't change between releases
LEGO: check in for master to temporary branch.
Accept new baselines
Accept new baselines
Update tests
Update tests
Accept new baselines
Reduce union and intersection targets when source is singleton type
Revert "Proposal: If there’s a package.json, only auto-import things in it, more or less (#31893)" (#32448)
Add Semicolons to Gulpfile.js
addTypeToIntersection performance improvement (#32388)
LEGO: check in for master to temporary branch.
Get contextual type of yield from contextual signature of containing function (#32433)
Improve algorithm for inferring to union types
Control flow for element access expressions (#31478)
Make it easier to read multi-line exceptions
typeAssertionKeywords tests
Improve accuracy of remove unnecessary await fix (#32384)
Fall back to (Async)IterableIterator if (Async)Generator not found (#32303)
Update user baselines (#32403)
LEGO: check in for master to temporary branch.
Handle feedback from #32359
Accept new baselines
Add regression tests
Add kind to JsxAttributes (#32369)
Instantiate contextual type for return type in getReturnTypeFromBody
Parse quoted constructors as constructors, not methods (#31949)
Cache & widen assigned js prototype type (#32381)
Don't indent properties if an object literal follows directly from another object on the same line
Add 'Remove unnecessary await' suggestion and fix (#32363)
Proposal: If there’s a package.json, only auto-import things in it, more or less (#31893)
Add quick fix to add missing 'await' (#32356)
LEGO: check in for master to temporary branch.
Added new keword compeltion filter for assertions
Added "readonly" to Type Keywords
Add kind to JsxAttributes.
Accept new baselines
Add regression test
delete isfulfilled to pass tests
Don't add extra indentation for objects inside function parameters
Update DOM: Remove carriage returns from comments (#32352)
Improved parameter names for call signatures resulting from unions when only one parameter name is available. (#32056)
Update user baselines (#32346)
Improved const extraction for function expressions and arrow functions. The behavior applies if the function: - is contextually typed (because otherwise no type annotation for the variable would have been generated anyway) - is not generic - doesn't have parameters inferred as any
LEGO: check in for master to temporary branch.
Generate a unique type parameter name for each nested type parameter (#31544)
Update DOM from TSJS-lib-generator (#32335)
Add option disableSourceOfProjectReferenceRedirect to disable using sources of project reference redirect from editor
Rename parameter
Remove "Did you forget to use await" for unary arithmetic expressions
Update user baselines (#32324)
Added addMissingConst codefix for comma separated initializers
Improve multiple overloads error span (#32315)
Source of project reference behave as if those files cannot be emitted.
Finish addMissingConst codefix for single variable and array literal assignments
Only add "Did you forget await" for function args when the parameter type is not promise-like
Update error code
Refactor to use related info everywhere
Did you forget to use await? on arguments of function calls
Update baselines
Did you forget to use await? for call and construct signatures
Did you forget to use await? on iterables
Did you forget to use await? for operators
Update more baselines (?)
Updates the baselines for the typo fixes
Update baselines
Added fourslash tests for standalone and array initialization cases and started implementing them
Errors using DiagnosticsSync commands
import/no-extraneous-dependencies
fix eslint errors after merge
Refactoring
Add properties priority for completion
Accept new baselines
Add regression test
Include conditional types in top-level type parameter check
Improve type checking and inference for Generators and Async Generators (#30790)
Widen object literal this types (#32240)
Skip typechecking of source of project reference redirect
Adds support for completions after ASI inserted expressions
Refactor tests so its easy to edit and reason about them
Remove TODO
Update baselines
Update user baselines
Update baselines
Update user baselines
Add regression test
Restore union-like behavior for inference to conditional types
Revert unrelated fourslash test changes
Address PR comments
Add support for sharding tests across multiple workers (#32173)
Refactoring
Check for parse errors in emitted JS (#32009)
Update user baselines (#32195)
Elide the exact node version rush complains about from the docker output (#32204)
Verify the scenarios when d.ts directory of dependency doesnt exist
Update baselines
Update baselines
Accept new baselines
Add more tests
Accept new baselines
Pad tuple type initializers of parameter array binding elements
remove explicit escaping for placeholder opening
use stringLiteral property text instead of decodeRawString
Use only immediately preceding JSDoc
Accept new baselines
Add regression tests
Accept new baselines
Remove logic that pads array literals contextually typed by tuple types
Add tests for module and esModuleInterop affectsEmit change
Add affectsEmit to module and esModuleInterop options
Update baselines with new error numbers
Convert related spans to message chains
Improved error spans for call errors:
make prnums for experiments get pulled from GH tags
Added tests for new error messages on calls to unions.
Improved error message for calling/constructing types
Rework declaration emit visibility calculation for namespaces (#32156)
Add vscode docker test (#32152)
Update src/server/project.ts
Accept new baselines
Add regression test
Switch DiagnosticMessageChain to be a tree
Add xterm test to docker suite (#32149)
Create original project when location is in source of project reference redirect
Update user baselines (#32136)
Add fourslash test of jsdoc backtick parsing
update eslint, @typescript-eslint/*
remove tslint configuration
no-redeclare
@typescript-eslint/indent
Accept new baselines
Compare type parameters, constraints, and defaults in signature identity
Use intersectTypes instead of filterType
JSDoc:Treat tokens between backticks as comments
Add throw on not rebaseable to unmatched PRs, too
Check if triggering PR is in triggered set only if triggered pr exists (otherwise is master sync)
More tests
Make args types internal
Add sourceOf project reference redirect to filesByName list for redirect path so that module symbol is correctly resolved
allow const-assertion on aliased enum symbol (#32110)
Add some negative test cases and accept baselines
Treat negative numbers as non-dynamic names
Do not report multiple diagnostics per signature.
Improve error messages and related spans
Update user baselines
Handle making sure that two less thans are never converted into >>
Watch generated file if it doesnt exist when trying to translate it to to source generated position
Watch generated file if it doesnt exist when trying to translate it to to source generated position
Don't double-check JSX calls
Update baselines, except JSX
Handle feeedback
Add instantiation count limiter
Update src/services/formatting/README.md
Update src/services/formatting/README.md
Make close() in interface Watch<T> public
Adds some docs for how a formatter works
Use existing reporting mechanism
Explicitly error when an exclude is provided by a test as it will be unused (#32014)
Look at properties of constraint-instantiated optional mapped types when deciding assignability
Update user baselines
Accept new baselines
Add regression test
Remove duplicate call/construct signatures in intersections
fix eslint errors after merge
no-fallthrough
Accept new baselines
Add regression test
Out of bounds tuple elements have type 'undefined'
Update API baseline
Sanitize rush progress numbers in docker test output (#32029)
Use getEncodedSyntacticClassifications
Update cherry-pick pr script to use mergebase (#32031)
Check for language serivice enabled when including source files
Check only for .d.ts files
Log the config of the project
Remove secondary reference lookup implementation (#32016)
Improve error message and update baselines
Use source files instead of .d.ts files from project references
Assert ranges exist when looped over in fourslash (#32012)
Add test to verify when source changes
no-fallthrough
Update user baselines
Eliminate references to defunct LSHost in comments (#32018)
Ignore identifier declarations when calculating symbol visibility (#31974)
Retain related info for 1-overloads
Share code a bit better
Fake up a namespace enclosing declaration when generating expando namespace members (#31971)
Use absolute paths for buildInfoDirectory
Add dockerfile based tests for `azure-sdk-for-js` and `office-ui-fabric-react` (#31948)
Use related spans to form a tree of errors.
Update user baselines
microsoft-typescript/no-in-operator
microsoft-typescript/only-arrow-functions
microsoft-typescript/no-keywords
@typescript-eslint/unified-signatures
@typescript-eslint/prefer-function-type
no-var
@typescript-eslint/interface-name-prefix
Trivially expose getEncodedSyntacticClassifications
Re-add multiple errors
Bundle info paths as relative to tsbuildinfo file
Updated test-cost file for laptops.
Add skip-percent alias for skipPercent
Convert options to relative paths
Make any paths in buildInfoFile to be relative to it.
@typescript-eslint/no-unnecessary-type-assertion
Move .test-cost.json
prefer-const
@typescript-eslint/camelcase
no-unused-expressions
no-template-curly-in-string
Update user baselines
@typescript-eslint/adjacent-overload-signatures
chore(tsserver): fix typo
semi-colon
Add unit test
fix tsserver picking hidden files created by emacs
Notes on how to return errors from checkTypeRelatedTo
Working, just not the way I would like
Update DOM and baselines (#31806)
Initial attempt. Totally doesn't work.
Accept new baselines
Add tests
Added --noImplicitThis code fix for functions used as object properties (#31138)
Revert previous fix and improve error message instead
Move class property transform (#31848)
Improve help message for skipPercent
Don't let the additional property setting on an object show up as a definition for the lanmguage server
Accept new baselines
Union array literals in inference similar to object literals
Add test cases for union and intersection constraints
Run all tests on CI
Consider non-public literal members in index type of constrained type parameters
Allow passing skipPercent
Add failing test for smartSelect string literals
Update user baselines (#31902)
Skip costly tests
@typescript-eslint/prefer-namespace-keyword
@typescript-eslint/no-unnecessary-qualifier
@typescript-eslint/class-name-casing
quotes
no-trailing-spaces
linebreak-style
microsoft-typescript/no-double-space
microsoft-typescript/type-operator-spacing
microsoft-typescript/object-literal-surrounding-space
exclude *.generated.d.ts files
@typescript-eslint/type-annotation-spacing
@typescript-eslint/prefer-interface
@typescript-eslint/no-inferrable-types
microsoft-typescript/boolean-trivia
no-new-func
no-throw-literal
brace-style
dot-notation
object-shorthand
space-in-parens
no-eval
no-empty
@typescript-eslint/no-this-alias
no-restricted-globals
microsoft-typescript/debug-assert
@typescript-eslint/semi
Rename to use contextSpan
add eslint
Filter primitives from union when checking for mismatched excess props if nonprimitive type is present (#31708)
Revert to using spread instead of mutating value later
Adds a yarnrc which makes sure that the lockfile isn't generated for people using Yarn
Add regression test
Correct outline hint spans for functions
Add __spreadArrays helper (#31166)
Update user baselines (#31857)
Accept new baselines
Properly preserve CheckFlags.Readonly when widening properties
Improve ts6307 error (#31706)
Accept new baselines
Add tests
Update fourslash tests
Accept new baselines
Update tests
Intersections of disjoint types become never upon construction
Added test cases for JSXFragment span
Test when node typings dont get added on subsequent update graph because of invalid typing Test for #29865
create outlining span for JsxFragment
Revert "Move class property transformation into new transformer. (#30467)"
Update DOM and baselines
Handle module specifiers
Accept new baselines
Add tests
Minor fix
Consistent widening in property and element access expressions
Handle Lable
Handle jsx Opening, Closing and Self closing tags
Add test for semicolon detection in auto-import
Detect semicolons in file before writing quick fixes
Update fourslash tests that shouldn’t insert semicolons
Fourslash server tests
Update fourslash tests to have semicolons
Update user baselines (#31793)
More tests
Accept new baselines
Generate declaration file from tests
Handle export keyword of export assignment
More tests
Move class property transformation into new transformer. (#30467)
Accept new baselines
Add tests
Handle default keyword of default export
Taking typos out one line at a time
Deleting a branch that does not exist does not work (we should never download the ref anyway)
More tests
merge -> rebase in experiment sync script text
Dont clean - pipeline should already be clean and a clean will clean node_modules
Slightly reorder experimental sync commands
Handle numeric enums in mapped types + fix obscure crash
Cache ranges by text
Take optional string of range text for singleReferenceGroup
Unify contextual signature type parameter assignment (#31574)
Take optional texts to verify parameter for rangesWithSameTextAreRenameLocations
More tests
Update error message as requested by @danielrosenwasser
Set declaration span only if its not same as own span
More tests
Handle when declarationSpan from declarationNode is undefined
More tests
More Tests
Rewire experimental update script to handle PR triggers
Add script for pack response postback (#31748)
Handle computed property names
More tests
Handle destructuring assignments
LEGO: check in for master to temporary branch.
Include the project filepath in the error message for files not being listed in the 'include' pattern. TS6307
Accept new baselines
Add more tests
Consider object literals in unions to have properties of type 'undefined'
Accept new baselines
Add regression tests
Accept new baselines
When binding pattern contextually types x || y, x contextually types y
More tests
Propagate saved variance flags from cached comparisons (#31688)
Use for-of declaration list + expression as span for preview
More test cases
Update user baselines (#31699)
Dedent message so its not code-blocked
Reverse log order
Change test instead of behavior
origin/master because ref is fetched not pulled
Trim whitespace, fetch origin master
Cant use stdio inherit and stash a result away
Strictify the cherry-pick pr script
Show property assignment for special property assignments in js files
Add initial edition of cherry-pick script (#31705)
More tests
For property name of binding element use binding element as preview node
More tests
Refactor and add wildcard scenario
Export assignment identifier use ExportAssigment as declaration
Accept new baselines
Add regression test
Permit assignment this.xxx when class has index signature
More tests
Accept new baselines
Add tests
Respond to CR
Add test
Add comment
Small fix to user PR script (#31679)
Stop invalidating resolution when file stays open
Use import export sepcifier as declaration for the property name of import export as well
Accept new baselines
Add regression tests
More test fixes
Rename declarationRange to declarationRangeIndex
Update user baselines (#31674)
Accept new baselines
Add regression tests
Use proper variances when inferring between type alias instantiations
Accepted baselines
Update version to 3.6.0.
Return type inference should not include parameter inferences
More tests
Cache widened types (#31586)
Update user baselines (#31615)
Defer union or intersection property type normalization (#31486)
Use node.expression as error node for call diagnostics
Start fixing fourslash tests
31304 - Autocomplete for enum values fails when typing "/" (#31362)
Expose getTypeOfArrayLiteralOrObjectLiteralDestructuringAssignment with better name (#31564)
Collect _all_ symlinks a file may have witnessed when attempting to generate specifiers (#31571)
Accept new baselines
Add test
Limit size of union types resulting from intersection type normalization
Improve error messages when indexing into a type (#31379)
Add test
Manually copy just postMessage changes (#31557)
Allow JS with isolated modules (#31483)
Add string properties declaration to the completion list
Don’t crash when creating a union signature from signatures that do and don’t have this types
Reuse getSimplifiedTypeOrConstraint function
Accept new baselines
Implement inferrable index signatures for enum types
Error when writing to readonly tuple in rest element range
Add failing test
Trace Package id at the module resolution site
Don’t touch imports used for module augmentation in non-declaration files since it could change JS emit
Add test case for #30429
Relocate Debug namespace to reduce duplication (#31524)
Reset error record in downlevel for-of (#31519)
Expose ts.Diagnostics to fourslash
Make anyArray.filter(Boolean) return any[], not unknown[] (#31515)
Accept new baselines
Add regression test
Simplify index and object types when obtaining indexed access constraint
Accept baselines, I guess
Parse stray identifier-ish as JSXText instead of trivia
Accepted baselines.
Add related span to original declaration on disagreeing variable/property types.
Improve error message for JSXExpressions that are comma expressions
Update user baselines (#31496)
Revert "Allow synthetic identifiers to exist and give them escapedText"
Prevent type parameter printing from recuring on the same symbol (#31453)
Use range instead of two markers
Don’t remove imports that are used for module augmentation, just remove their import clauses
Add failing test
Test docCommentTemplate for prototype methods (#31477)
Add test
Allow synthetic identifiers to exist and give them escapedText
Cache unnormalized intersection types
Accept new baselines
Add regression test
Don't ignore index signatures in this type constraints
Make more build options internal which correspond to internal compiler options Also fix return type of readBuilderProgram
Watch only built projects
Add api to build referenced projects
Accept new baselines
Improve error spans on chained method calls
Always emit tsbuild info if path says so (irrespecitive of if there exists bundle and project)
Add writeFileCallbacks to done method and also on host
Add getParsedCommandLine as optional method on SolutionBuilderHost
Accept new baselines
Revert change to substitution type simplification
Add comment providing context on the change
Accept new baselines
Remove simplification logic from getConditionalType + simplify substitution types
Chain RHS narrowing and truthiness narrowing in assignment expression narrowing (#31348)
Remove fourslash test
Remove this-parameter filtering in statement completion
Simplify conditionals upon comparison, rather than instantiation
Update user baselines (#31371)
ignore trigger chars within a string literal
Moved the badges below the Typescript Header
Instantiate constraint with default upon comparison (#31240)
Reuse existing type instantiations
Accept new baselines
Defer resolution of the true and false branches of conditional types
Cache control flow results across invocations (#31003)
Maintain modifiers on `Omit` (#31205)
Accept new baselines
Add regression test
Consistently check conditional extends type for type parameter references
Api to get next invalidated project
UpdateBundleProject<T> to contain emit method
Move towards BuildInvalidatedProject api where one can query program and perform its operations
Add secondary error code to relevant error code list in addMissingConstInForLoop codefix
Accept new baselines
Lower priority for inferences made from partial reverse mapped types
fix parsing of leading union/intersection operator (#31265)
Update user baselines (#31310)
Add opt-in behavior for custom transforms to support bundles
Enable getSemanticDiagnosticsOfNextAffectedFile for EmitAndSemanticDiagnosticsBuilder
Make update bundle return invalidated project if it cant update the bundle
Make invalidated projects as api so we can expose it later
Make invalidated project when only need to be built or updated
Updating README: Travis CI icon (#31279)
Update user baselines (#31289)
add refactor of extract type (#30562)
Move everything into state so we can pass it around
add assert
fixed the comments
Update user baselines (#31269)
parseProjectReferenceConfigFile: always set SourceFile.path
updated the baseline files
added test
modified the service file
avoid more useless type assertions (#31239)
Add unmeasurable variance kind for marking types whose variance result is unreliable (#30416)
Don't use `any[]` in `arrayFrom` (#31201)
Update user baselines (#31207)
add baseline tests for spreading instantiable type
check if instantiable type constraint allows spread
Create api for buildNextProject
Enable apis to create incremental program
Make SolutionBuilder as Public API
Accept new baselines
Add tests
Remove startWatching as explicit method from api
Permit reverse mapped types to be created from partially inferable types
Rename cleanAll to clean and take optional project as input
Make API to build project and wire cancellation token
parseJsonConfigFileContent: add extendedConfigCache parameter
Don't use 'any[]' - return type are bivariant when relating to overloads.
Accepted baselines.
Change `Omit` back to using `Pick<T, Exclude<keyof T, K>>` in order to maintain modifiers.
Don't pass a candidates array to getResolvedSignature (#31203)
Accepted baselines.
Added test.
Improve error message for use of 'await' in non-async context (#31194)
remove extra newline
add tests to check errors for use of 'await' in non-async function
do not suggest to mark constructor 'async'
fix existing tests to accept new behavior
add related info to error for use of for-await-of in non-async function
add relatedInfo to error message for 'await' used in non-async function
Add test when module resolution includes .ts file from node_modules
Update user baselines (#31188)
Use 'Omit' instead of 'Pick<Exclude<...>>' for object rest (#31134)
Add ES2019 Object.fromEntries function (#30934)
fix(lib): Loosen `Array` predicate return types (#31076)
JSDocTypeTag.typeExpression is not optional (#30452)
Move substitution type elimination to getActualTypeVariable
Better typings for promise.race based on conditional types (#31117)
Added custom error message when trying to assign constraint type to generic type parameter (#30394)
Better errors for indexing gettable/settable values (#26446)
Allow Boolean() to be used to perform a null check (#29955)
More test baseline adjustments.
Adjusted baseline for tests.
Adjusted tests to correct baseline with new __rest
Modified __rest output in test baselines.
Added a Object.prototype.propertyIsEnumerable check to __rest to prevent enumerable symbols from sneaking through.
Only instantiate types if we need to
Relate a source type that is sufficiently covered by a target discriminated union
simplify pragma comment parsing (#31144)
Remove resetBuildContext
More refactoring
Instead of having two separate paths for building projects, (build all or invalidated use single path)
Make SolutionBuilder and SolutionBuilderWithWatch separate
Remove resolveProjectName as api
builderPrograms as ConfigFileMap
Diagnostics as ConfigFileMap
configFileCache, projectStatus, buildInfoChecked is now ConfigFileMap
Make FileMap Apis to match map but just ensure that keys are always paths Turn projectPendingBuild to config file map
Use maps for all the watch data structures
Make use of maps in build order calculation
More refactoring to move file map creation inside solution builder
Remove usage of fileMap for output unchanged timestamp modification and simplify to use configFileMap
Remove `getUpToDateStatusOfFile` from solution builder since that test anyways is tested with the --watch mode
Unchanged output time is no more required
Make api to return build order
Remove unused variable
No need to calculate and store project references graph
Instead of maintaining queue for invalidated projects, use the pendingSet and graph queue
Update user baselines (#31161)
Accept new baselines
Add additional tests
Accept new baselines
Add regression test
Remove over-eager check of AccessFlags.Writing in getIndexedAccessType
Accept new baselines
Add regression test
Accept new baselines
Add regression test
Properly instantiate true type when extends type is any or unknown
Accept new baselines
Add tests
check more case for empty binding patten (#25263)
Make changes to public API
Enable caches while watch mode compilation
Update existing baseline
Accept new baselines
Only defer function type inference when contextual type is function type
Update error code in baseline
Emit error on class fields named "constructor"
Change error code
Add baselines
Add grammar error on quoted constructors for TS 3.5
resolveName: remove useless case (#28669)
fix 31012 allow noEmitOnError with isolatedModules (#34) (#31043)
add action for enabling experimentalDescorators option in user config… (#30484)
fix jsdoc iterator on expression of export assignment (#30558)
Update pull_request_template.md
add ES2020 matchAll APIs (#30936)
Accept API changes
Accept new baselines
Make `Omit` alias a separate type (#31115)
emit error on destructuring of rest property (#29609)
Avoid eagerly computing test payload (#27851)
Simplify hasExportDeclarations (#27846)
update error message and update baselines (#27628)
Only defer pure functions and pure constructor functions during inference
Add test for quoted constructors
Avoid recalculating versionPaths in loadNodeModuleFromDirectory (#27537)
When function parameters span multiple lines, make the function span start at the `(` (#26907)
fix compiler crash (#25925)
Simplify chaining of transforms (#22994)
allow literan enum const assertions (#30700)
Accept new baselines
Support higher order inferences for constructor functions
Accepted baselines.
Make `Omit` alias its own mapped type so that references to it never expand to `Pick<...>`.
Accepted baselines.
Added tests.
Cache files extended so we arent calculating the config again and again
Don’t use checkExpressionCached when checking spread element inside a loop
Share module resolution cache among different program
Reuse map if module resolution is same for redirected and own files
Add getParsedCommandLine optional method on compiler host to be able to provide parsedCommandLine instead of redoing work
Exclude everything in tests
Add crashing test
Exclude tests/cases from tslint
[fix] ES5 Object.keys only accepts an object (#27089)
When unidirectionally merging symbols, do so recursively
Add bad test case
Update src/compiler/visitor.ts
Remove all but one server unit test
Copy smartSelect tests to fourslash
Add custom baseline format for smart selection
Parse generic function types in import type argument lists (#31079)
Rename _objectLiteralBrandBrand to _objectLiteralBrand. (#30797)
fix generate typenode from negative numerical literal (#30610)
Experimental management scripts (#31067)
Remove "generate types" code (#31075)
Skip primitive types comparison with array and object types (#31077)
Track parameter references errors in resolve name rather than secondary pass (#30349)
Add additional test to ensure merging more than augmentations still works
fix false positive 'variable is used before being assigned' in destructuring (#29636)
Remove the rule that replaces a union of literal types with the base type when comparing equality to a type that isn't a union of literal types. (#27588)
improve error message when type have same name (#27065)
30837 - Bad error message when default 'import'-ing an 'export =' without 'esModuleInterop' (#30847)
Add configure-experimental (#31064)
Better erreor messages for properties mis-handled as shorthand property declarations (#31039)
Update docs to reflect the removal of the "Community" milestone.
Update user baselines (#31058)
Only return the substitute in substitution instantiation when assignability fails (rather than subtype) (#31027)
Unify couldContainTypeVariables and the similar check done during instantiation (#30969)
handle generic types in getArrayifiedType (#30606)
baseline changes in other tests accepted
diagnostic messages conflicts resolved
Filter out zero-width selections
Consistify tabs/spaces in test and baselines
JSDoc author tag parsing updates (#17244)
Parse unexpected comments after email in author JSDoc tag (#17244)
Support email in author JSDoc tag
Add baselines for new tests
Revert accidental submodule change I guess
Revert accidental line ending change
Revert accidental line break added
Rename test to match
Rename to be smarter
Remove debug info
Skip lone variable declarations
Add stop for JSDoc comments
Special rules for binding elements, extend brace/whitespace logic to other kinds of bookended lists
Snap to nodes directly behind the cursor, create special rules for ParameterNodes
Solidify fake tree approach
Rethink sibling expansion by creating fake subtrees
Add rules for expanding selection to sibling nodes
Move to language service
Move most logic to separate file
Distinguish between same-line and different-line braces
Also skip TemplateHeads
Start imports
Add support for string literals
Add more tests, special handling for mapped types
Start smart select API
Check to make sure default npm exists at path before trying to use it (#30910)
Add tests for destructuring from variable with inferrable type
Clean up synthetic binding name creation and discriminating
Accept new baselines
Remove no longer extant gulp command from README (#31019)
Handle case where you have to add a destructuring after a try/catch block
Handle JSDoc backticks in the parser, not scanner (#30939)
Hide the table of perf results from the bot inside an expando element (#31007)
Remove unnecessary change
Enable renaming object binding patterns when needed
Add tests for binding elements that need to be renamed
Add new baselines
Basic support for binding patterns in async/await code fix
Handle simple lib file in the test case
Code review feedback
No need to fix hash of lib files since the content is now fixed
Make the tsbuild tests use simple libFile instead of bigger lib file set
Add test for #28334
Accept new baselines
Add regression test
Ignore generic mapped types in isStringIndexSignatureOnlyType
Add diagnostics for relation cache size (#30999)
One more iteration
Accept new baselines
Add regression test
Ignore string (but keep numeric) index signatures coming from constraints
Perform excess property checking on intersection and union members (#30853)
Even more succinct
Address CR feedback
Combine semantic diagnostics of files using exported entities from modules and their dts emit
Handle dts change as well as signature update when exported module affects dts but not js file
When exported types from module change, the modules exporting these types indirectly mean d.ts change too (not just semantic diagnostics)
Remove unnecessary check since seenEmittedFiles is set when getting pending affected files
Write test case that baselines the incremental build result Testcase for #30780
Test case for #30891
Accept new baselines
Add regression test
Propagate ObjectFlags.NonInferrableType through widening
Update user baselines (#30958)
Bad error message when default 'import'-ing an 'export =' without 'esModuleInterop'
Explicitly encode keyof behaviors for never and unknown into getIndexType (#30753)
Accept new baselines
Add regression test
Gracefully parse 'super' with type arguments (#10677) (#30913)
Update user baselines (#30937)
Elaborate array and tuple relation errors
Accept new baselines
Add regression test
Remove incorrect optimization in getUnionConstraintOfIntersection
Update user baselines (#30885)
Update misspelling 'identifer' to 'identifier' (#30894)
Accept new baselines
Add regression test
Use object identity check instead of IsTypeIdenticalTo
Update DOM 2019/04/11 (#30867)
Accept new baselines
Add tests
Only infer to single naked type parameters in intersections
Accept new baselines
Add regression test
Simplify non-inferrable property check to rely on propagation
Add new nonInferrableType with ObjectFlags.NonInferrableType
Accept new baselines
Add test
Properly filter mapped types in getIndexType with noIndexSignatures=true
Remove old comment
Update user baselines (#30832)
Accept new baselines
Optimize T[K] where T has string index signature and no other members
Use suggestion instead of ignoring UMD global access
Add affectsSemanticDiagnostics to flag (and move to right spot)
Update baselines with new flag
Add period to compiler flag description to match others
Add baselines for UMD global access
Don’t emit diagnostic accessing UMD globals from modules when flag is set
Add test
Add allowUmdGlobalAccess flag
Accept new baselines
Simplify obtaining base constraint of T[K] for writing
Update user baselines
Accept new baselines
Add tests
Accept new baselines
Do not request reviewers for fork-triggered PRs, just mention them
More conditional linkage in user PR responses when manually triggered
Always check extends clause of classes
Small addition to user PR script to support fork/branch PRs
Cache substitution types (#30775)
Tweak union type inference to restore previous behavior
Added error for class properties used within their own declaration (#29395)
Accept new baselines
Add tests
Accept new baselines
T[K] ignores index signatures in T's constraint
Change the default type parameter constraints and defaults to unknown from {} (#30637)
Updated baselines again
Add/update baselines
Add failing test for function calls that have at least one non-spread argument, a spread argument, and overall potentially too few arguments
Update TypeScript-React-Native-Starter
Update DOM 04-04-2019
Updated annoying 'globalTypes' list.
Accepted baselines.
Add the Omit helper type.
Make anonymous function formatting apply to anonymous generators too
Accepted baselines.
Update version to '3.5.0'.
Add new baselines
Fall back from globalReadonlyArrayType to globalArrayType when transpiling
VS IntelliCode-related changes (#30731)
add new message - TS1258 (#30704)
Accepted odd new baseline
Addressed quick feedback items
Treat hoisted temp variables as a custom prologue
Accept new baselines
Minor fixes
Add test when module resolution resolves to original file of referenced project with --out Test for #30591
Add baselines for new test
Don’t crash in forEachIdentifierInEntityName
Add failing test
Report program's source files even when there are errors when building using --build mode
Use const contexts and tuple mapped types to simplify some explicitly elucidated types (#30654)
Update user test submodules (#30705)
Just look at the current node instead of context
Add new baselines
Be stricter while parsing arrow function heads in conditional expressions
More exploration of indexed access type constraints in type relations
Update user baselines (#30703)
Remove unused arguments
Add test for parenthesized variable and function keyword within ternary
Add new baselines for destructuring void
Handle destructuring zero elements from void
Add failing tests for destructuring void
Accept new baselines
Add getIndexedAccessOrUndefined function
getIndexedAccessType for assignment target uses intersections
Add test for out file concat where command line --incremental flag changes between compilation
Improve soundness of indexed access type relations
optimize treeToArray
copy comments from string to template literal
Handle imports and exports in 'convert parameters to destructured object' (#30475)
Accepted baselines.
Generalize to intersection types when looking for discriminants in error reporting.
Accepted baselines.
Added test.
copy comments from template literal to string
Unify substitution type `any` handling into costruction and instantiation (#30592)
test also the output from visibility tests
add support for hex and unicode escapes
catch case when there is only single expr and optimize arrayToTree
optimize and add more tests for parenthesized case
update external files api
Add test for incremental with --tsbuildinfo file without specifying --out or config
Pull out the incremental compilation into a function so we can test it
Make it as api so we can test it
Always assert that source files are versioned when program is used with Builder
Update user baselines (#30595)
Compute per-element contextual type in getSpreadArgumentType
Make tsbuildInfoFile as commandline option to tsc (and not tsc -b)
Forbid accessing block-scoped variables on globalThis (#30510)
Accept new baselines
Add tests
Accept new baselines
Introduce ContextFlags to propagate origin of request for contextual type
refactor creation of template expression
support case when variable is re-assigned
clean test cases
support single quotes when decoding raw string
complete handling for octal escape
add skeleton for handling octal escape
add test cases
extract getEdits for template literal
optimize templateLiteral check
change from tuple to object literal
optimize getEdits string concatenation
extract getEdits for string concatenation
optimize nodesToTemplate
extract creation of templateHead
only show toString if expression is not binary
add possibility to invoke from parentheses
remove parentheses also when expression at ending
treat corner cases
optimize preceding expression
do not offer refactoring for tagged templates
combine preceding expressions to one
fix test case
add toString visibility from expression and from middle part
catch empty head of template literal
complete toString
complete toTemplate
add test cases
add working conversion to template literal
add diagnostic messages
add visibility tests
add test cases
add test cases
add skeleton
Instantiate contextual type using non-fixing mapper
Add script for posting perf results back to GH (#30526)
Handle huge unions better in createUnionOrIntersectionProperty (#30411)
update types
Update user baselines (#30521)
Allow --incremental to be command line option
Add test for current --incremental behaviour
Check extended tsconfig time with oldest output time to report not upto date
Adjust offset to account for 'this' parameter when emitting parameter decorators
Prevent substitution of 'super' in async super helper
Use shorthand property assignment in convert parameters to object (#30468)
Remove circularity fallback deferral in `getConditionalType` (#30470)
Update user baselines (#30463)
fix error on globalThis type extend (#30460)
Accept new baselines
Add test relating type predicates with and without this parameters
Make IdentifierTypePredicate.parameterIndex index into signature.parameters
Passing --force option to build, builds project from start
Revert "Passing --force option to build, builds project from start"
Passing --force option to build, builds project from start
implements not a keyword in js
Add more information when getValidSourceFile cant find the file in question. Log for #30180
Duh!! Static is allowed in JS.
Enable better error spans for async functions (#30413)
PR feedback
Pass time to the vfs of resolveJsonModule
rename convert to named parameters (#30401)
Display actual and expected diagnostic messages when they dont match
Use EmitAndSemanticDiagnosticsBuilder in builder from tsc
Handle outDir and declrationDir correctly to generate output file names for the tsbuild
add tests for finding references of named and default exports
fix check for default export
Accept new baselines
Add test
Proper contravariance in type parameter promotion
Accept new baselines
Add test
Only promote type parameters when they're referenced in input positions
Delete webtsc gulp tasks (#30350)
Mark tsc.release as incremental
Giving too many arguments should error on the first argument that exceeds arity (#27982)
Handle generic mapped types in getTypeOfPropertyOfContextualType. (#27586)
add related error span for default exports (#25396)
improve stripInternal with inline comments (#23611)
Update pull_request_template.md
Change casts to non-null assertions
Accept new baselines
Add tests
Remove redundant typeParameters property from InferenceContext
add jsx factory and hold text in jsxtext node (#29439)
Add regression test for #29692 (#30325)
Forbid contravariant inferences to conditional type branches (#30287)
Update user baselines (#30317)
Rename contextualMapper to inferenceContext (which it always is)
Accept new baselines
Show expanded parameter lists in signature help
Add output declaration files from referenced project into program if module: none
Rename setGetSourceFileAsHashVersioned
Rewrite fallback hash to be faster
Udpate LKG
Add incremental to normal tsc
Enable incremental program updates through tsbuildinfo in tsc --watch mode
Read program from buildInfo
Make watch use sourceFileHash so it can be used with --incremental as well
Conditional type simplifications & Globally cached conditional type instances (#29437)
Update LKG
Build project if existing project was built with different compiler version
Add tests that will verify that all rebuilding with new compiler version builds again
Add assignability rule relaxing the assignability of partial mapped types (#30112)
Reset toplevel flag when higher priority inference takes place (#30265)
Add compiler  version to buildInfo
To test platform independent buildInfo baselines, move the logic to writeFile of SolutionBuilderHost
Remove unused (and sometimes broken) targets and scripts (#30054)
Change to debug fail instead of assert never
Instantiating a signature in the context of another should infer from return type predicates if they match up (#30242)
Add fix for webpack history merge bug (#29339)
Renumber transform flags
Remove DestructuringAssignment and Generator flags
Remove Super/ContainsSuper transform flags
Restore ContainsLexicalThsi flag for performance
Minor change to heuristic for deferring generic calls
remove unnecessary closures
remove sudo: false setting from travis.yml (#30231)
Rename the request as updateOpen
Update LKG
Store semantic diagnostics as well (for future tsc without build but incremental)
Update LKG
Remove unnecessary excludeArgument array and getExcludeArgument function
Add tests to verify output of --out with modules as output
Accept new baselines
Consistently defer generic functions to second type inference pass
Update user baselines (#30211)
Accept new baselines
Add tests
Minor fix
Improve scheme for creating unique type parameter names
add test for non-transient symbol
Accept new baselines
Infer higher order function types when possible
Accept new baselines
Add tests
Defer calls to generic functions returning generic functions
Accept new baselines
Add regression test
Accept baselines with new build system
Update gulp to build using this branch
Update LKG with the branch build
Refactor the tests
use getTouchingToken
Because .tsbuildinfo is flag now, use .tsbuildinfo just like any other output to determine if project needs rebuild
Add options tsBuildInfoFile to provide name for the buildinfo file
Incremental false with composite not allowed
use interface for ValidVariableDeclaration
Minor fixes
Update user baselines (#30168)
Skip generic functions along with context sensitive arguments
remove inlineable
Always use same code path when transforming function bodies for es2015
Add regressions for conditional types that affect parameter variance (#30146)
Accepted baselines.
Update LKG.
Accept baselines
Update the tsconfigs
Resolve aliases to jsx namespace symbol (#30160)
Changes to generation of .tsbuildinfo: - If composite or incremental then only the .tsbuildinfo will be generated - if --out or --outFile the file is outputFile.tsbuildinfo - if rootDir and outDir then outdir/relativePathOfConfigFromRootDir/configname.tsbuildinfo - if just outDir then outDir/configname.tsbuild - otherwise config.tsbuildinfo next to configFile
Only collect inferences which actually have inferences into the returnMapper (#30111)
add diagnostics message for refactor description
use sortAndDeduplicate instead of deduplicate
Convert CheckMode to a flags style enum
Remove 'this'-related tx flag usage from transformConstructorBody
minor refactors to convertToNamedParameters
refactor getGroupReferences
Don't crash if someone created a folder while we were checking to see if it exists
Add globalThis (#29332)
Use identity with the permissive instantation to detect nongenric instances and disable variance probing on nongeneric instances (#29981)
Apply changes in reverse order even in new API to match behaviour with internal api
Update baselines
refactor utilities
Revert "Use execFileSync in typing installer"
Revert "Do not wrap npm path with quotes"
Dont create a union type to infer conditional type branches (#30010)
Make a fresh empty object literal not a subtype of a type with an index signaure (#29975)
Accept new baselines
Add regression test
Accept new baselines
Issue errors for all circular type parameter constraints
Add request applyChangesToOpenFiles
Add test that batches all the open files to update program only once
remove unused LeadingTriviaOption and TrailingTriviaOption options
don't export useNonAjustedPositions
change startPosition and endPosition to leadingTriviaOption and trailingTriviaOption
check completions with assignable rather than identity
Retain substitution types through instantiation if possible (#30059)
Include misc script outputs in local build (#30092)
Remove NewTargetInComputedPropertyName hierachy fact
add tests
Removes 'TypeScript' transform flag
add new tests for bad class references
update failing tests
Improved argument description for parameters originating from tuples that were extracted from functions. (ie mapped functions)
For now disable the new build
Enable building typescript.d.ts with current source
clarify intent in returnType creation
remove any annotation from declare method quickfix
fix comment
check usages of class if refactoring a constructor
Dont emit sourceMapUrl from prepend text into the --out file
Add test when declarationMap and sourcemap are disabled in the referenced project
Test that shows stripInternal of enum member prints multiple blank lines for the enum members
Test when internal and text region dont mix well together
Allow away to only test baselines excluding all other file read checks that are not going to change per scenario
Update user baselines (#30046)
Report error if overwriting buildInfo of another project reference
Have runtests always throw on failure, make rm stream signal end of read queue (#30035)
Update the message to not just mean javascript since we might need to regenerate .d.ts as well
Allow empty own source files
Refactoring for outFile tests
expose token flags and numeric flags (#29897)
Update the programBuildInfo to be platform and change independent so we can baseline it safely
Redirect getProgramBuildInfo onto builder so that we can test it for baselines more easily
Correctly set sourceFileInfo for bundle when generating output without creating program
Add test to verify incremental build is same as if its built clean
Accepted baselines.
Give a related span pointing to the implementation signature when reporting incompatibility.
Be more specific in errors.
Accept public Baselines
Combine d.ts and .js emit
Because we already have texts for fixing the emits, write them only if changed
Remove jake (hopefully for real this time) (#29085)
Enable other stripinternal test cases
fix no space before equal operator in type parameter (#29990)
Handle synthetic references better
minor refactors
Handle emit when using prepends and the referencing project has --stripInternal true
Add sections to the prepend (to be later used for stripInternal)
Add test for multi level prepend
Tests for strip internal
fix no space before equal operator in type parameter
refactor expected test output
add tests for inherited constructor and method
include trailing trivia after expression in getAdjustedEndPosition if endPosition is include
Remove diagnostic dependent output in `structuredTypeRelatedTo` (#29817)
don't provide refactor in js file
Accept new baselines
Add tests
Improve contextual typing by generic rest parameter
Accept new baselines
Never overwrite resolved type of symbol
update docs: dated build cmd
copy argument comments to property
replace argument list instead of whole call when refactoring
create new ConfigurableStart and ConfigurableEnd options and rename them
rename refactor tests
Use sha256 to hash file contents
Simplify flags propagation logic
Update lodash dependency (#29903)
Move TypeFlags.PropapatingFlags to ObjectFlags to free up 3 flags
Add diagnostic context for expando property declarations (#29905)
Readd configure-insiders task to Gulpfile (#29907)
Remove ES2015 and ContainsDefaultValueassignments flags
fix reference checking
Disable node 6 (#29832)
return function expression name in getFunctionDeclarationNames
don't apply changes when unexpected reference is found
Accept new baseline for Improve error message for using value as type.
Improve error message for using value as type.
Use built local on CI and not LKG (#29886)
don't apply refactor when parameter has decorators
Make printer option to be writing bunfle file info and use the result instead
Move bundleFileInfo as printer options
add tests for comments
copy comments when refactoring
create functions for copying trailing comments and rename previous copyComment function
Add setInterval/setTimeout
Enable no-eval rule
Accept new baselines
Add regression test
Accept new baselines
Disable checkJS survey (#29830)
Accept new baselines
Add regression tests
Accept new baselines
Update test
Accept new baselines
Make inferences to union types containing multiple naked type variables
Use getIndexedAccess to compute type for contextual rest parameters
Make the assignability rule for conditional types require the check types and distributivity to be identical.
Update user baselines (#29826)
Update user baselines (#29800)
Delete wayward comment
Accept new baselines
Add more tests
Process more complex constraints as per CR feedback
Handle when no .tsbuildinfo is to be generated
Emit bundle information into bundle field of buildinfo and only if bundled emit
Use execFileSync in typing installer
restore lib/*
Dont emit program information in --out scenarios
Add mechanism to dump and read program to build info
Generate buildInfo for non --out and prepend options as well
Ran `gulp baseline-accept` again to rebaseline the JSDoc tests
Add another test to generate baseline when sample's logic config file changes declaration dir
String.prototype.{trimStart,trimEnd} hit stage 4
Array.prototype.{flat,flatMap} hit stage 4
PR feedback.
revive esnext.symbol
restore flags
revive esnext.asynciterable
Add try priors as finally lock label andecedents rather than pre finally label antecedents (#29790)
Accept baseline diff
fix hasThisParameter to check for parameters length
Accept new baselines
Add tests
fix duplication of leading and trailing comments on refactored function
add option to suppressLeadingAndTrailingTrivia non recursively
Remove ES2018 transforms for ES2018 target (#26315)
Generate baselines for sample
Generate baseline of .tsbuildinfo sections
accepted new baselines
Added auto setting to quotePreference
Infer to partially homomorphic mapped types (such as Pick<T, K>)
Modifies the jakefile to use the LKG by default unless USE_BUILT=true is set
Also initialize transformFlags properly in NodeObjects.
Ran `gulp baseline-accept` to rebaseline the JSDoc tests
assertNever no longer crashes on string input (#29764)
Accepted baselines.
Give good error messages on more types.
Added test.
getEffectiveBaseTypeNode: only use JSDoc augments if there is extends (#29349)
Factor out baseline generation into tsbuild helper so that sample can generate baselines as well
Accept new baselines
Add regression test
Revert change to strict property initialization checks
Since dts file doesnt change the dts bundle info doesnt change either so no need to save the new buildInfo for dts emit
Accept new baselines
Add regression tests
Accept new baselines
Less aggressive logic for detecting circular mapped arrays and tuples
Use prologue directive information in buildInfo to emit prologues when manipulating js output bundle file
DOM update February 2019 (#29690)
Update test baselines
Factor out unparsed source file for own creation
Map dts file to sections to write and fix from
Even though .d.ts doesnt change, the map file most likely changes, so emit that
Use stored helpers to emit incrementally
Perform only emit on js file if no decl file change
Store pologue information in bundle info
add tests for rest parameters
implement refactor for functions with a rest parameter
Update user baselines (#29682)
Make modifierFlagsCache mandatory for Node objects
Accept new baselines
Add regression test
Make exception for synthetic 'this.x' in narrowTypeByInstanceof
Update baselines for types affected by JSON change
Narrow unknown in switch
Accept new baselines
Add tests
Accept new baselines
Less restrictive constraints in Parameters and ReturnType types
Add helpers from source files to the bundleInfo to be used later
Add source information to bundle info and use it to emit header information later on
Use unknown for array predicates' return types
add more tests
fix refactor to find super references
Don't  refactor if variable declaration has type annotation
Store commonSourceDirectory
Handle GetAccessor and SetAccessor in isThisless (#27869)
Accept new baselines
Add breaking change repros
More refactoring
Increase accuracy of remaining subtype reduction work estimate
Minor improvements of code and comments.
Correctly adjust the backward reference of the next entry when deleting an entry.
Adjust the unit test to spot a missed bug in the delete() implementation.
Revert a few unneeded (stylistic) changes.
Rework the implementation of the shimMap to ensure iterators will behave the same as with native Maps.
Add a unit test for the shimMap (currently failing).
Follow-Up: Avoid the memory leak problem by simply not allowing existing iterators to continue once an entry has been deleted from the map.
Adjust the iteration behavior of the shimMap (used for IE 11) to visit values that are added while forEach is running.
Verify header updates
Dont do base build again for each incremental scenario
Some more reorg in test
Dont diff with only sources in incremental compilation, diff with the base build
Baseline incremental build baselines
Separate out the tests for tsbuild into its own folder
Accept new baselines
Revert previous changes, use flag to disable fixing during constraint check
Update user baselines (#29660)
Use same property name for BundleFileSection and UnparsedNode for easy node creation
Add SourceMapUrl to section
clarify error message for 'readonly' type operator
Create nodes for unparsed text, prepend text
Create prepend text sections in .buildInfo
Generate .tsbuildInfo if bundle uses references with prepend
If the project only needs prepend output to be changed, prepare to just manipulate output Step 1: Update the verbose log to reflect it
update baseline
Allow per-file setting for rename default behavior preferences (#29593)
Test case when final project isnt composite project
More logs verification
Handle "" correctly when cacheing file text
Make 'gulp min' build tsc/tsserver in parallel
Make the bundle info into buildInfo
Make file generic to be .tsbuildinfo
Accept new baselines
Add regression test
Update user baselines (#29645)
Accept new baselines
Only check constraints after type argument inference is complete
add tests
update tests formatting
preserve this parameter when refactoring
Dont use tsbundleInfo to determine if bundle needs to be rebuilt
Create tests when bundleInfo file is not present
Dont assert but verify sourceMapGenerator
Update user pr script for latest version of octokit (#29639)
Handle --clean with .tsbuildinfo
Use bundle info to store info about prologues, emit Helpers, references etc
Update user baselines (#29633)
Bump version on issue template
Accept new baselines
Handle readonly arrays and tuples in decorator metadata serialization
Add tests for convert to named parameters refactor
Refactor direct function calls
Move function getTypeNodeIfAccessible from inferFromUsage to utilities
Accept new baselines
Add subtype reduction complexity limit test
Accept new baselines
Higher complexity limit for unions of primitives only
Error on union types that are too complex to represent
Bump version to 3.4.
Tuples are known to be covaraint
Simplify gulp to just use 'tsc -b' to build, update to gulp@4
fix spelling errors
revert invalid baseline change
accept baseline changes
revert change of trailing comment parsing
Accept new baselines
Add tests for decorators and declaration emit from error free source
get appropriate parent jsdoc node for arrow functions
Include index signatures of the source in mapped type template target inferences (#29253)
Handle triple slash refs
Handle emit helpers in --out scenario
Handle prologues in prepend outputs
Tests for multiple prologues
Handle shebang when using prepend nodes
Generate readable source map baselines for -b --out scenario
Write testcase to baseline with strict, prologues, shebangs
Skip declaration emit for files that are just executables
Add tsserver task to gulp
Remove extra http str in badge url
Accept new baselines
Address CR feedback
Accept whitespace change in baseline after merge
Don't report circularities when parameter has itself as contextual type
accept baseline change
Simplify type flag check
Remove old test file that snuck in
Narrow to any primitive or object and update tests
Update test file and baselines
Add narrowing for unknown with strict equal
avoid add missing member in declaration file
Move random file in root into test folder (#29575)
Accept new baselines
Add tests
Accept new baselines
Add todos for sourcemap that accidently got reverted.
Get dts content from sourceFile if present
Create getters for js sourcemap, dts and dts map text getters in prepend nodes
Tweaks
Don't infer from initializers of parameters of contextually typed functions
Add test to test the readFile called on prepend input file for emitting and verifying emit
Accept new baselines
Add additional repro
Accept new baselines
Add regression test
Match control flow logic for switch statements to conditional expressions
Update user baselines (#29560)
Use the correct source when skipping trivia
fix trailing comma should not allowed in dynamic import argument
Updating badge url
PR feedback
exclude nested functions and classes at containingThis check
Enable debug info by default when debugging the language server
Replace most instances of getTextOfPropertyName in checker
do not provide refactoring when it contains this because this behaves differently in arrow than in function
Accept new baselines
Add regression test for #29168
Accept new baselines
No union type reductions in contextual types
Accept baseline changes
Add tests
Accept baseline API changes
Validate const assertion operand
fix api
add test for convert to named parameters refactoring
implement new parameter creation
Support '<const> xxx' and 'xxx as const'
Add missing return statements (ugh)
Address CR feedback
Include all flow nodes made within `try` blocks as antecedents for `catch` or `finally` blocks (#29466)
Accept new baselines
Add tests
Accept new baselines
Add tests
Remove literal freshness when contextual type is a literal type
Don't treat interfaces as implementations
Make the relationship between partial mapped types and the empty object not apply for subtype relationship (#29384)
Add missing arity check on second inference pass (#29386)
Accept new baselines
Infer contextual types from return types through generic functions
renames
add missing type annotation
PR feedback
Allow rest parameter type to be a readonly array or tuple
Illustrate a case that isn't handled correctly
Add fourslash tests
Consider JSX namespace imports when moving statements between files
implement new parameter creation
WIP
fix quick fix infer parameter types from usage in js file
Accept new baselines
Add .d.ts generation test
Update user baselines (#29444)
Add opt-in user preference for prefix and suffix text on renames (#29314)
Accept new baselines
Add more tests
Fake up value declaration for synthetic jsx children symbol so they get excess property checked (#29359)
Add regression test. (#29433)
create refactoring for converting to named parameters
Accept new baselines
Add tests
Update array/tuple relationship checking
Elaborate jsx children elementwise (#29264)
Add regression test
Accept new baselines
Support 'readonly' type modifier on array and tuple types
PR feedback
Harden telemetryOnOpenFile against disabled projects
Remove overzealous simple relationship check for unique symbols
Respond to CR
Accepted 'witness' baselines; removed unnecessary !==
Save & recalculate declare flag modifier on late printed statements (#29412)
CompilerHostLikeForCache rename
Rename indexing variable
Added error for class properties used within their own declaration
Respect readonly mapped type modifier when mapping arrays and tuples
Add user preference to opt-in to renaming import paths
Test to verify external source map range addition
remove unused error message 2568
Extracted compilerOptions setting to helper function
Added codefix to enable experimentalDecorators in the user's config file
Add tests for noLib with <reference lib> and bundling.
Add tests for noLib with <reference lib>.
Do not process library reference directives with noLib set.
emit jsx type arguments
Add missing baseline references
Add more tests for qualified name param without top level object error
Allow circular umd-merged-with-augmentation refs to resolve to the module as intended (#29335)
Allow nonnull assertions in references (#29351)
Minor refactor in paramTagNestedWithoutTopLevelObject.ts
Add test for qualified name param without top level object error
Accept new baselines
Add regression tests
Improve logic that determines when to resolve conditional types
Use specific error message for qualified param name without leading top level param name
Add diagnostic message for JSDoc qualified param name without top level param
Update user baselines (#29336)
Exclude JSDoc @extends from 'super()' checks (#29308)
Allow untyped calls on unions of untyped things (#29265)
PR feedback: change error #2497 message
Allow referencing 'this' in parameters of functions in the constructor
LEGO: check in for master to temporary branch.
save work and fix lint
Symbol.prototype.description hit stage 4
Add types entry to tslint build to prevent inclusion of unwanted types installed via user tests
Do not emit code for `@extends` tags in JS. (#29244)
Replace ternary expression
update baselines
add transformer for emit add property to default export
Simplify approach
use existing util functions
Add test
give jsdoc outline span before func exp assigned to var
Add test
Use normal start for spans for args
Add test
Add class expression to set of nodes for outlining
Only provide suggestion for outermost async fix
Accept new baselines
Add regression test
Accept new baselines
Don't widen contextually typed literals in initializer expressions
Update user baselines (#29187)
Show template literal in navtree function call args
Accept new baselines
Add regression test
Accept new baselines
Type parameter defaults can only reference previously declared type parameters
Use DirectoryStructureHost for fileExists and readFile
add ES2019 target
Handle declaration emit errors in tsbuild mode by backing up builder state This helps us revert to state where we pretend as if emit is not done (since we do not do emit if there are errors)
Write the tests for incremental build and declaration emit errors handling These will fail since its still TODO
fix typeof completions broken
property is used before its initialization: check more nodes
Handle prepend in incremental build. Always emit when program uses project reference with prepend since it cant tell changes in js/map files
Update the timestamps of outputs that dont need to be written because of incremental build This ensures that after `tsbuild` after incremental build of `tsbuild -w` doesnt result in unnecessary rebuilds
Use emit builder to emit only changed files.
Use oldProgram to create the new Program. This helps in storing the semantic diagnostics
Add method to release held Program in BuilderProgram
Revert BuilderProgram to be redirected object to Program in preparation to set Program in state to undefined for storing.
Make SolutionBuilder handle BuilderProgram in preparation to handle incremental builds
Make BuilderProgram as Program
Use watch factory instead of direct host functions in tsbuild to provide detailed information on watch invokations
Accept new baselines
Add tests
Properly compute lower bound of key type in a mapped type
duplicate `wait` instead of `wait` and `notify`
Update user baselines (#29109)
Refactor tsc-watch tests
More tsserver tests refactoring
Add unittests:: on all unittests describe blocks for easy run
More scenarios in their own test
Move the tests into their own folder for easy scenario search
Sym links into single test
Move more tests into resolutionCache and project errors
Separate out caching file system test
More refactoring for resloutionCache and project errors
Separate out LargeFileReferencedEvent test
ProjectUpdatedInBackground in a separate unittest
Separate out tests for project loading events into their own unittest file
Emit error tsserver tests into projectErrors
tsserver's typingInstaller test into typingsInstaller unittest
Move error tests from tsserver project system to projectErrors
More refactoring for compile on save
tsc-watch emit tests in to its own tests
Split resolutionCache and watchApi tests into its own unittest
Split watch environment into its own unittest
Add name of test in all describe blocks in it
Accept new baselines
Add regression test
Allow calls on unions of dissimilar signatures (#29011)
Accepted baselines.
Check whether class declarations have a name, falling back to "default".
Added test case.
Accept new baselines
No public API changes
Accept new baselines
Improve error message for out-of-bounds tuple element access
Non-latebound computed property names should print as their underlying name type (#29084)
Adjust travis branch spec to capture all release branches (#29086)
Reset constEnumOnlyModule flag on relevant symbol merges in binder (#29079)
Accept new baselines
Add regression test
Handle intersection types in getWidenedType
Stretched the error to the end of 'n's
update baseline
PR feedback: change error #2497 message
update baseline
--downlevelIteration errors should mention using later targets
Update CONTRIBUTING.md
Update CONTRIBUTING.md
Update CONTRIBUTING.md
Address CR feedback, take two
Remove duplicate function from checker
Address CR feedback
Add regression test for #29047 (#29066)
Accept new baselines
Add regression test
isEmptyObjectType should check that argument is not generic mapped type
Accept new baselines
Add tests
Accept new baselines
Use synthetic access expressions for destructuring control flow analysis
#28977 Change error message according to review comments
#28977 Change const enum error message
Accept new baselines
Use getIndexedAccessType when computing destructured types
Disable truncation for codefixes in signatureToMethodDeclaration. (#28188)
Build - List "pretty-hrtime" as a dev dependency in root "package.json".
Add more tests that verify semantic diagnostics cache
Use contextual parameter types over binding pattern initializer types (#28967)
Accepted baselines.
Accept new baselines
Update tests
Simplify indexed accesses on mapped types with no depth limit
Accept new baselines
Add tests
Simplify indexed accesses on mapped types up to five levels deep
Update user baselines (#28961)
Accepted baselines.
Added more tests, including some in 'removeComments' mode.
Don't use 'fill' in 'fill'.
Only use 'es2015.iterable' to avoid accidental es2015 feature usage.
Accept new baselines
Add tests
Always generate lowercase locale names so 'LKG's produce identical results on case-sensitive file systems.
Update user baselines (#28941)
Accept new baselines
Add tests
Accept new baselines
Add tests
Type parameter with 'unknown' constraint not assignable to '{}'
Add newline
Add newline, bad edit
Change usages of String.prototype.endsWith to ts.endsWith.
Change usage of String.prototype.startsWith to ts.startsWith.
Change usage of Array.prototype.find to ts.find.
Avoid uses of ES6 Set, use Array instead
Update fourslash list of global types
Accept new baselines
Improve typing of 'bind' method on function types
TupleType - add additional tests to handle error on extra comma
28893 - update baseline
Allow trailing comma on tuple types
Add note about comparing source positions
Better error message for invalid bigint literals ending with n
Accepted baselines.
Check if the expression had any trailing comments.
Remove unnecessary fields
Accept test changes
Actually verify when dependency and main project is open
Test to verify presence of .d.ts file
Watch missing map file and update the source mapping accordingly
Goto defintion will not go to source if map is present
Test that when map file is created the changes are reflected.
Add test to verify when depedency and main project is open
TODOs
Add tests and fix DocumentPositionMapper creation on updates to d.ts, source file, map file etc
Update source and declaration projects on update to declaration file or map file TODO: add tests
Keep alive declaration script info and map file info if source file info is alive
Life time of declaration, sources and map infos Map Info and sources is not ideal and need to revisited since we need to update mapper and projects correctly // TODO: lifetime of source project and declaration map
Dont unnecessarily make textStorage internal
Dont depend on project in document position mapper so that we can unload or remove projects independently
Add method on host to get DocumentPositionMapper so it can be cached.
Handle source and generated files more gracefully
Use file names instead of paths for reading files
Refactoring to createSourceMapperHost
Use program directly to get the sourceFile of source position
Do not close over program in getSourceFileLike
Clarified error message; extended error to identifier end
Update user baselines
Accept new baselines
Add tests
Accept new baselines
Accepted baselines.
Added test case for trivia preceding dot in numeric LHS in property accesses.
Only infer from constituents with matching discriminants in unions
Accepted new baselines
Removed excess new check
Added error for IdentifierStart immediately after a NumericLiteral
Accept new baselines
Add additional tests
Accept new baselines
Improve excess property checking logic
Accept new baselines
Add regression test
Accept new baselines
Resolve conditional type only when check and extends types are non-generic
Revert over-eager bailout when trailing whitespace (#28848)
Skip implicit any suggestions with no codefix (#28822)
Infer from arrows from usage. (#28832)
Move await keyword to inside of function and test
Move await keyword to inside of function and test
Move await keyword to inside of function (Recovery & try test)
Move await keyword to inside of function and test
Move await keyword to inside function
Add constructor case
Accepted baselines.
Only count singleton unit types.
Accept new baselines
Add regression test
Handle destructuring in control flow reference matching
Add missing case to declaration diagnostic handler
Accepted baselines.
Types are only overlappy if their index types are single 'keyof's or literal types.
Accepted baselines.
Added tests for types with overlap across a single property name.
Add terminating newline to generated tsconfig.json
Accept new baselines
Add regression test
Exclude T[K] assignability check from definitelyAssignableRelation
--showConfig files list condition was inverted from what it needed to be (#28693)
Do not lookup name of default property symbols from the symbols value declaration (#28711)
Update user baselines
Count only unit types when counting overlapping keys
Revert "Don't consider 'typeof a' as using 'a' (#28528)"
Add perf optimizations for path comparisons
Dont explicitly get declaration diagnostics
Update user baselines (#28633)
Factor out caching logic so tsc (without watch can use it and --watch has its own cache logic).
PR feedback.
address comment
Cache results for readFile, fileExists, directory exists, sourceFiles for .d.ts files across the build (only first time)
ArrowFunction has no own 'arguments'
Update bug template to version 3.3
MethodSignature doesn't have 'arguments' (#28625)
Accept version change 3.2 => 3.3 in baselines
Update LKG.
update API baselines with new version number
Bump to 3.3.
address comment
 Allow union signatures to merge when they have differing argument counts (#28604)
Create map from fileNames in referenced projects to resolvedProjectReference for quick determination of fileName to projectReferenceRedirect
resolve TypeReference in class decorator at parent of class
Enable statistics reporting per program through temporary build api
Avoid infinite loop checking yield expression (#21728)
Update user baselines (#28601)
Handle merging unknownSymbol (#28453)
Show diagnostic when error found with --showConfig option
Remove jsdoc on ts namespace.
Dont emit module resolution errors when looking up specifiers for container symbols (#28558)
Properly set symbolMeanings when calling getSymbolsInScope
Minor cleanups in checkUnusedIdentifiers (#28513)
Clamp calculated sourcemap positions rather than throwing (#28583)
Enable --strictPropertyInitialization (#27558)
Accepted baselines.
Use intersection of member names to find largest overlap.
Error when destructuring private property in a parameter (#28562)
Add telemetry test
Restore useText
In JS, constructor functions infer from call+construct (#28353)
Ensure getApplicableRefactors doesn't crash when given a position (#28361)
Consistently return 'void' from ChangeTracker methods (#28563)
Don't consider 'typeof a' as using 'a' (#28528)
Remove unused baselines
Update API baseline
When adding relative completions with rootDirs, still add completions for regular relative imports (#28561)
Properly check if a codefix is needed
Review changes and adjustment of fourslash tests
Revert whitespace change
Add codefix for 'Cannot find name' diagnostic
Expose aggregate file sizes in FileStats
Expose file size from TextStorage
Strongly typecheck unions of intrinsic tag names (#28557)
forEachToken: correctly handle JSDocTag (#28369)
Better nameless parameter implicit any error (#28554)
Remove unused function (#28531)
Better checking of assignment declarations (#28387)
string|number inferences are low priority (#28381)
Add 'bigint' to type keywords (#28537)
generateGetAccessorAndSetAccessor: Don't use FindAllReferences
When renaming an imported symbol, rename only in current file (#28406)
Update user baselines (#28504)
Build better import paths for declaration emit/typeToString from reexports if possible (#27340)
Removed stray whitespace
update baseline after merge the latest changes from master
Use elipses for reverse mapped types in nested positions (#28494)
Remove no longer used baselines
Handle type argument lists as jsx completion starts (#28493)
Update LKG.
Track type recusion and symbol instantiation depth seperately in createAnonymousTypeNode (#28490)
git rm file; not sure how we missed that.
Accepted baselines.
More general test case name.
Force inner indexed access simplification during inference, if possible (#28420)
Add implicit-any error on JSDocFunctionType with no return type (#28487)
Slightly improve missing property errors (#28298)
Ensure all default type params are mapped to some default even in circular scenarios (#28423)
fix lint
fix comment parsing at start of file
Improvements to generateTypes (#28458)
Reduce duplicate code in getListByRange (#28455)
Add test for #28468
Change isolatedModules to allow const enum declaration and disallow access
Update user baselines (#28457)
Check modifiers on variable like declarations only
Accepted baselines.
Handle global augmentation in the module
PR feedback
Accepted baselines.
Updated test case.
Only complain about BigInt literals in pre-ESNext targets.
Report identical modifiers needed error when checking the file instead of reporting it as part of another file's type check
Remove SortedUniqueList
Change 'if' in combined switch case to two separate cases (#28444)
Add exports of current module to getSymbolsInScope (#28442)
Update Feature_request.md
Support finding references at `module` in `module.exports =` or `export` in `export =` (#28221)
add more testcases
Better reference usage detection
add test for remove modifier and parameter
add more modifiers
Remove obsolte ts namespace
Correct codefix by removing private modifier
Accept new baselines
Add regression tests
LEGO: check in for master to temporary branch.
apply suggested changes
Elaborate assert of infos attached to project
revert changes to tsbuild.ts
Better project logging
Log project name when removing project
Some reorg
Add tests that create relative path even though the script info isnt dynamic
Accept new baselines
Preserve actual empty object type intersection
check if functionExpression name is used
Do not output summary if theres nothing to report
Retain the casing in map files in file names
path mappings now supports rooted disk paths and urls - fixes #13730
remove even more redundant internal comments
update getAvailableActions
apply feedback from pr
resolve conflicts
fix for unnecessary duplication of comment
Change type of metadata to unknown
Accept API baseline changes
Add metadata to response if it exists for results from language service. Currently its wired through for completions requests. Handles #21999
Move FreshLiteral flag from TypeFlags to ObjectFlags
Update opposite direction of #28218 (#28384)
Remove pointless check
Avoid elaborating on generic indexes (#28294)
Add related span pointing to this-shadowing location for implicitly-any this (#28299)
Remove JSDocTag#atToken (#28376)
Update user baselines (#28371)
Remove usage of TypeFlags.FreshLiteral for fresh literal types
Remove TypeFlags.UnionOfPrimitiveTypes
Make for..in expressions allowed to be null/undefined (#28348)
Update user baselines (#28341)
Strcter testing for global completions; and 'excludes' can only be a string (#28349)
Don't error on bigint literal used in type
Add test for bigint property
Address review comments
Add bigint tests
experimentalBigInt compiler flag
Scan bigint literals
Add "bigint" to `typeof x` in baselines
Add bigint type
Add diagnostic messages for bigints
Utilities for PseudoBigInt
Declaration files for BigInt
Parameters infer from body and call sites (#28342)
Update baselines
Nov 2018 DOM update
adjust test: always indented inside a list
strict types
indent size 8 based on list startline indentation
resolve TODO
tests
indent using list start position
indent using list start position before first list item
add getListByPosition
remove deprecated function
use last line indentation on formatter
accept baseline for changed error message #2540
exclude mention about constant from error message 'a-constant-or-a-read-only-property' to be more specific.
add new error message 'Cannot assign to {0} because it is a constant.'
Add related span for mixin constructor error (#28319)
Improve error message when scriptInfo is missing in mapTextChangeToCodeEdit (#28258)
Move infer-from-usage earlier in codefix list (#28318)
Exclude keywords from import completions (#28114)
Refactors can return ReadonlyArray<ApplicableRefactorInfo> (#28305)
module.exports aliases have correct flags (#28303)
infer from usage's unification uses multiple passes (#28244)
Accept new baselines
Add tests
Accept new baselines
Ensure '{ [key]: x } = obj' for generic key is the same as 'x = obj[key]'
Accept new baselines
Remove Rest<T, K> and use Pick<T, Exclude<keyof T, K>> instead
Accept new baselines
Only create Rest<T, K> types when object and/or key type is generic
Define Rest<T, K> as Pick<T, Exclude<keyof T, K>> to ensure it is homomorphic
Report error summary in pretty mode during normal compilation
Check destructuring validity the same way element accesses and indexed accesses are checked (#24700)
Accept new baselines
Use Rest<T, K> for rest properties in object destructuring
Add Rest<T, K> type to lib.d.ts
remove some useless internal comments
Refactor convert to unknown codefix
Add codefix for 'convert to unknown' diagnostic
Instead of adding lib files, avoid creating diagnostics producing checker for container projects
Use mapDefined and combine event name inputs
Add showConfig tsc flag for debugging configs (#27353)
Dont ignore libs since that could result in unexpected error
Test to verify that file with --out and case mismatch works with source map
Handle case sensitivity correctly in source map decoder
Public API
Do not add source files to container only project
Update baselines
Allow intersections of readonlys to be assignable to a readonly intersection (#28218)
Test to verify project loading events with default event handler
Avoid this-instantiation if not necessary for relationship (#28263)
Some reorg in creating sessions for testing
Update user baselines (#28249)
Make conditions more expressive
rename testcases
add newline
apply feedback from pr
add testcase and apply feedback from pr
apply feedback from pr
make guideline compliant
extract creation of funcDeclaration
extract creation of block
refactor small progress
refactor getInfo getAvailableActions
adapt one test case
fix for tslint error
add tests for modifiers
fix bug modifiers by toNamed
add tests for ReturnType and available Arrow as FnParam
add tests for ToNamed and available anon
add tests for ToAnon, ToArrow and available arrow
change refactor name
fix multi decl bug
add multi vardecl
add working getEditsForAction
add getAvailableActions
add skeleton
Change pathCompletions to stringCompletions, move more code there (#28245)
Redo resolution on ATA when previous resolution was to '.js' file (#28236)
Prefer getValidSourceFile over Debug.assertDefined(program.getSourceFile(*)) (#28242)
Accept new baselines
Update tests
Accept new baselines
Continue to error on rest from generic source type
Report error requiring references to have composite only if the program is not container only
Accept baseline with correct additional span location (#28238)
Use constraint for default default value if possible (#28222)
Only suggest adding to types if present in compilerOptions
Bad callsite inferences fall back to body usage (#28235)
For path completions, include extension as a kindModifier (#28148)
Suggest adding to tsconfig after installing @types (#28211)
Support augmenting module with `export as namespace` (#27281)
Ignore wild card directory watchers with node_modules file or folder starting with .
Miscellaneous code cleanup relating to module resolution (#28092)
Remove `toSortedArray` and `toDeduplicatedSortedArray`, use `sort` and `sortAndDeduplicate` (#28214)
Accept new baselines
Add tests
Update user baselines (#28228)
remove unused 'debug' option. change 'jake runtests' description (#28226)
Avoid reformatting body of arrow function with single unused parameter (#28217)
Accept new baselines
Produce intersection types for spreads with generic types
LEGO: check in for master to temporary branch.
Set-only accessors spread to undefined (#28213)
infer-from-usage suggestions can't be ignored, and always do something when invoked. (#28206)
Allow to combine --resolveJsonModule with --isolatedModules (#28207)
Have flatMap return a ReadonlyArray by default (#28205)
Always use `verify.completions` when testing completions (#28137)
Use same condition in isReferencedAliasDeclaration as isAliasResolvedToValue (#28171)
Add missing apostrophe to codefix suggestion
Support synthesized SourceFile parent in getOrCreateEmitNode (#24709)
Update .mailmap
Measure variance of aliased conditional types using variance markers (#27804)
JSX uses mixed signatures and union sigs use subtype on partial match (#28141)
Accept new baselines
Add regression test
Parse an object literal property as shorthand unless followed by '(' or ':' (#28121)
Bring typeof switch inline with if (#27680)
Remove unused property ParameterInference#typeNode (#28115)
Constraint for { [P in K]: XXX } should be empty type
infer from usage JSDoc:Don't emit nested comments (#28161)
Update user baselines (#28157)
don't resolve import types in JSDoc of TS files (#28158)
Error messages and tests
Error messages for extending a specific type
LEGO: check in for master to temporary branch.
Do not merge commonJS exports into an alias (#28133)
Remove DirectoryOfFailedLookupWatch#ignore, use DirectoryOfFailedLookupWatch | undefined (#28091)
At '.' in array literal, don't close the array (#28120)
Add support for configuration inheritance via packages (#27348)
Update user baselines (#28129)
Improve performance of suggestionDiagnostics for convertToAsyncFunction (#28089)
Remove getBucketForCompilationSettings (#28088)
Accept new baselines
Add regression test
Reset narrowing of 'x.y' only when 'x' has a narrowable type
Update CI (#28082)
Use regex+getTokenAtPosition to find dynamic import (#28104)
Add generateTypesForModule to public API (#28069)
Test update of DOM. (#28050)
Update user baselines (#28076)
Improve code fix for missing members
Like #27964 but for JSX (#28068)
Rename of non-intrinsic JSX element should rename the declaration (#28066)
Add JSXText check into isValidLocationToAddComment (#27653)
Reject return type inferences to the autoType or autoArrayType (#27169)
Obey the excludeArgument parameter when checking JSX signature validity (#28002)
Infer over each mapped type constraint member if it is a union (#28006)
update other interfaces and implementations
fix compile errors, accept baselines
fix return type of LangageServiceHost.resolve*
fourslash: Add 'goToMarkerOrRange' helper (#28057)
Remove hack to get target of GetAccessor symbol (#27868)
added await keyword to completions and added test (#27912)
Un-consolidate overloads for Map and WeakMap (#28052)
Support import completions for a re-export with a different name from the original (#28055)
Update user baselines (#28047)
Typo fix
use Map instead of Array
Error messages and tests
Simplify addTypeToUnion function
Error messages for extending a specific type
Support 'isSourceFileFromExternalLibrary' for source files from '/// <reference types="" />'' (#28004)
Check EOF token to get errors for JSDoc (#28000)
Add new special assignment kinds for recognizing Object.defineProperty calls (#27208)
Corrected the order of passing arguments to word2mdJs
Change cast to the proper type
Add broken test for issue #27854
Remove now unnessesary casts (#27954)
Add ability to infer to the simplified form of a type variable (#27953)
Unify JSX And Normal Call Checking Codepaths (#27627)
add error showing where prop was also declared if is a dup
Update user baselines (#27922)
refactor baseline
refactor diagnostics
use decl key value if any
Simplify the test
Add getEffectiveConstructSignatures (#27561)
Accept new baselines
Add regression test
Handle circular mapped type instantiations for arrays and tuples
Update user baselines (#27905)
delete link
At '.' in object literal, don't close the object (#27850)
#27716: fix protected methods for intersection fo generic classes
noImplicitAny as suggestion (#27693)
When instantiating a mapped type, clone the type parameter. (#27597)
assertNever special-cases nodes with SyntaxKind (#27712)
Add test cases for transitive reference with different module resolution
One more CR fix
Update user baselines (#27710)
Address CR feedback
Accept new baselines
Add tests
Accept new baselines
Discriminant must include at least one unit type and no instantiable types
Allow discriminant property to contain some non-unit types
Always emit related diagnostic when a call expression can be fixed by adding a semicolon
Accept public api change
containsTopLevelCommonjs:handle uninitialised vars (#27642)
Update user baselines (#27632)
inferFromUsage codefix now emits JSDoc in JS files (#27610)
Don't crash if spawnSync result's stderr is null (#27616)
Updated callback signature
Infer from usage better import types (#27626)
Accept new baselines
Update test
Error when indexing out of bounds in a tuple or union of tuples
Have scanJsDocToken scan keywords (#27162)
Use relative module specifiers in error messages if possible (#27441)
Only functions can be constructor functions (#27369)
Update user baselines (#27606)
Accept new baselines
Add regression test
Remove duplicate code
Add missing check in getTypeAtSwitchClause
Report circular JSDoc type references (#27404)
Added ObjectKeyword check to isPartOfTypeNode
Code review - remove 'isCallExpression' check
Accept new baselines
Add tests
Accept new baselines
Remove unused (and incorrect) code in sys.ts
Properly handle unions of tuple types
Accept new baselines
Properly widen initializer types in binding elements
Formatting a union should not create a 1-element union type node (#27582)
Discriminate jsx contextual types same as object contextual types (#27408)
Add object check to justify cast (#27576)
Store and check deferred nodes by containing file (#27378)
Added Microsoft code of conduct file
Elt access assignment uses declared, not narrowed type (#27574)
Always await expression of promise type in return position
Infer tuples for jsx children if contextually typed by a tuple (#27409)
Remove duplicate case in parseJsDocCommentWorker (#27164)
Add tests for project updates with tsserver
Test transitive references in folders side by side so that later we can add tsserver tests as well
Verify errors on transitively referenced files
Handle resolution caching when referenced tsconfig changes
Verify that own config change in module resolution gets reflected
Handle caching of module resolution depending on project references
Use resolution options of project reference if the file is from the project reference
Resolve project references transitively
Widen export assignment types so they arent accidentally fresh (#27397)
narrowTypeByInstanceof understands ctor funcs (#27551)
Replace subtype check in derivedness check with flags and structure checks (#27403)
Rename to _superIndex to test conflict
fixed typo in CONTRIBUTING.md
Support loading "index.d.ts" using "typesVersions" without "types", "typings", or "main" (#27514)
Allow trailing void arguments to be omitted
fix comments
Per-property super accessors in async functions.
Also --init git submodules when running user tests (#27508)
fix typo in performance mark name
📝 Better description of Pick mapped type
textChanges: Reuse some methods (#27492)
Exclude the overlap between Type and Value when checking for parameter visibility (#27444)
Update user baselines (#27498)
Remove unneeded check from getTransformationBody
Update spec.md
Insert async keyword as last modifier (#27491)
Accept new baselines
Add tests
Accept new baselines
No unsound assignments to T[K] when T and K are both generic
Update CONTRIBUTING.md
Use safe some function to handle undefined declarations (fixes #27338)
Clean up amalgamatedDuplicates (#27285)
Minor cleanup in bindNamespaceExportDeclaration (#27367)
PR feedback
Add tests for failing redirect reuse of program when host implements getSourceFileByPath Test for #27207
 Add docs for better support of local testing and faster clones
Added real world examples of good commit messages
Added link to Jake website
Don't complain about `modules` and `outFile` options when `emitDeclarationOnly` is set.
Default logger for projectService has assert on exceptions being logged in tsserver
When there is parse error do not verify actual errors
ExpressionWithTypeArguments parent may be a JSDocAugmentsTag (#27229)
Free up space in the TransformFlags enum
Primitives should not be instanceof... anything (#27402)
Allow empty files lists in tsconfigs with an extends member (#27383)
Refactoring to unify updating no input files error
Make RenameInfo a union (#27382)
Add 'prefixText' and 'suffixText' when renaming shorthand properties (#27356)
Ensure verify.noErrors tests json files
Remove project tests from default compiler flag
Skip default lib checking in all tsbuild tests (#27380)
Don't implicit-any diagnostic for json module
Log text of relevant file after an exception (#27006)
navigationBar/Tree: Better description for anonymous function (#27063)
Support completions after 'async' in object literal (#27250)
Accept new baselines
Add regression test
Update bug report issue template TypeScript version to 3.2. (#27361)
Only add unique inferences to candidate arrays
chore(package.json): http -> https, add www. for homepage
Accept new baselines
Add regression test
Only make contravariant inferences from pure contravariant positions
Update API baselines (#27349)
Bump version to 3.2.
Update user baselines (#27339)
Add regression test for #25485 as it is already fixed (#27320)
Accept new baselines
Ensure session passes along fileToRename (#27323)
include baseline updates
Limit the narrow-to-fresh rule added with boolean literals to only boolean literals (#27274)
adding missing semi-colon to extendsHelper
Update user baselines (#27309)
Update GDPR annotations (#27242)
Add more tests for await
Add contextual typing for await operand
Support promise-like types in contextual return type of async function
Distribute indexes of indexed access types first (#27243)
Add release-3.1 to covered branches (#27253)
Set parent pointers on manufactured reference for property initialization check (#27246)
convertToAsyncFunction: Use ReadonlyArray / ReadonlyMap where possible (#27190)
Limit inference from apparent types to one level deep (#27225)
Add GDPR annotations (#27217)
Update user baselines (#27213)
Only report expando use-before-def for identical control flow containers (#27199)
Ensure all the usages of compilerOptions.declaration take into account compilerOptions.composite if needed.
Add codefix to generate types for untyped module (#26588)
Thread typesMapLocation down to the ProjectService
Update test name
Clean up for type precision and clarity
use getEmitDeclarations helper
allow using declarationDir with composite option
deny using allowJs option with composite
Add traceResolution option to build options
Implement readDirectory on the watch mode CompilerHost
Elaborate into arrow return expressions and array types (#27040)
Stop adding name of function being fixed and update baseline
Add test
Ensure name for callback is generated even when it has no args
Stop creating empty identifier name
Add baseline
Respond to CR
When renaming module, ensure rename span is just the last component of the path (#27151)
convertToAsyncFunction: Reduce casts in getTransformationBody (#27158)
Allow drawing inferences to conditional type branches (#27012)
Improve indexed access inferences (#27015)
Include triggerSpan in protocol.RenameInfo (#27160)
No longer specially recognize underscore and update baselines
Update user baselines (#27141)
Accept new baselines
Add tests
Definite assignment checking for expando properties (#27128)
Handle out and outFile options correctly in tsbuild
Simply override extendedSourceFiles array
Builder to use project reference redirects to output in the dependencies instead of source files
Add tests
Wrap expressions returned from promises in awaits when appropriate
Use this.toPath
Never escape string literals from textChanges (#26971)
Add test
Run callback as expression statement when no arg to assign to exists
Accept new baselines
LEGO: check in for master to temporary branch.
Correct falsiness for {} empty object type
fix getExtendedConfig in commandLineParser
Use head message at top level of elaboration if elaborating via possible call (#27107)
Update baselines
Add tests
Allow non-number array for source of TypedArray.from
Add test
Handle function assigned to binding pattern
Add test
Report diagnostic on expression name if it exists
Use qutemarks around new instead of ticks around `new` in diagnostic (#27106)
Introduce boolean literal freshness (#27042)
Revert the API change to resolveProjectReferencePath introduced in #27062
PR feedback
Make parseCommandLineWorker non generic
Use separate map with smaller scope to track renames
For completion in string literal union, don't include strings already in the union (#26755)
Add clarifying comments
Accepted baselines.
Added tests.
Try to find object/intersection types with the most overlap when failing assignability against unions.
getEditsForFileRename: Don't resolve to `a.js` when `a.ts` is moved (#27081)
Use nextToken() after parsing a tag name so we can parse type keywords (#26915)
Shorten more internal names to JS or TS (#27080)
typo: missing word: "to" (#27079)
Instead of watching individual script infos, watch the node modules folder for script infos in node modules
Add test for preserveWatchOutput on command line #26873
Enable listFiles and listEmittedFiles as build option
Unify the commandline parsing worker
Refactoring
Remove unnecessary case
Respond to CR
Add and update tests
Use existing identifier when possible for renaming functions
Support testing jsdoc tags of completions (#26962)
InsertNode instead of replace + handling call expressions
makeFileLevelOptmiisticUniqueName -> makeFileLevelOptimisticUniqueName
Consistently pass indent to 'parseTagComments' (#27055)
Avoid circularly resolving names when looking up type members using resolveName (#26924)
Report all project errors on incremental compile
Handle prepend output to be emitted in downstream project even if declaration file doesnt change
Test case to verify the non local change doesnt build referencing projects
Handle circular project references
Add and update tests
Handle promise handler block bodies with no return and other cleanup
Instead of queueing build for downstream projects right when invalidating project, do it after build for invalidated project is complete
Accept new baselines
Add 'bind' overloads for rest parameter arrays
Prefer error candidates with no rest parameters over those with
isExpandoFunctionDeclaration only checks values (#27052)
Rename JS-specific concepts (#26795)
Update user baselines (#27048)
Report file not found error about the project and watch config file even if not present
Deadcode removal
Maintain project references more clearly - no need to maintain map from referencing projects to references - When queueing for downstream projects, always handle build order
Provide suggestions for common can-not-find-name errors (#27034)
Always create dependency graph and build order
Sanitize module resolution logs for typesVersions entries
Prefer elaborating on expressions which could be called to produce a correct type by suggesting such (#27016)
Cache global dependency graph and invalidate it only if doing full reload of the project or resetting builder context
Start shaping SolutionBuilder API
Remove dead code and rearrange code to handle resolveProjectNames always returns array of resolved config file name
Always resolve the config file to ResolvedConfigFile if its json, otherwise combine tsconfig.json
Update baselines
[WIP] Record original name of renamed variable
[WIP] Use original identifier name to count up from when renaming collisions
[WIP] add test
Miscellaneous cleanup
Accept new baselines
Minor fix
Accept new baselines
Add tests
Update getAugmentedPropertiesOfType
Update declarations
Initial review
improve test case and add related diagnostic
improve Diagnostics for accidentally calling type-assertion expressions
Codefix: add quick fix for missing 'new' operator
Update watches to wild card directories, input files, config files when project invalidates
Add related span pointing at missing arguments (#27013)
Accept new baselines
Inline builder context instead of it being outside for easier access and resetting
Add CallableFunction/NewableFunction to virtual file system
Accept new baselines
New CallableFunction and NewableFunction types in es5.d.ts
New --strictBindCallApply flag in compiler
Update user baselines (#27000)
Add partial reload support also watch wild cards correctly. Partially fixes #26524
Refactoring to handle case sensitivity of the host when caching
Try the ParsedCommandLine from cache instead of re-reading contents of tsconfig file
Remove unnecessary projectReferences from ExpandResult and referenceSpecs from ConfigFileSpecs
Accept new baselines
Better scheme for choosing between co- and contra-variant inferences
Add 'fileToRename' property to RenameInfo (#24702)
Don't offer module completions in non-module JS files
Invert gutter instead of setting colors
Take into account undefined nodeValue when recording diagnostic
Clean up emit pipeline to reduce callback overhead
Ensure diagnostic reporting matches code fix ability
Improve use of SemanticMeaning in symbol display (#26953)
Avoid adding duplicate completion from contextual keyword (#26947)
Introduce literal freshness for literal enum member types (#26556)
add comment
rename rescan function
Add location info to empty lists diagnostics when tsconfig file exists
findAllReferences: Consistently use 'this' parameter as definition site (#26950)
Lowercase type reference directives when determining to reuse program structure (just like when we create new program)
Improve 'isWriteAccess' for findAllReferences (#26889)
Update narrowing baseline
Change `typeof` narrowing to narrow selected union members (#25243)
Error accessing abstract property in constructor of abstract subclass
Centralize diagnostic reporting for empty files diagnostic
Don't case on type node
Only perform async refactor if it won't delete code
Update user baselines (#26903)
Accepted baselines.
Renamed test.
Allow isSymbolAccessible to paint object literal declarations as visible (#24668)
Check privateness when emittign readonly/const props (#26920)
Support completions inside JSDoc before EndOfFileToken (#25568)
Allow literal initializers of readonly properties in declaration files (#26313)
PR Feedback
Remove duplicate function createTextRange (#23346)
Properly handle JS enum symbols (#26893)
Bind non-expando property assignments at top-level (#26908)
Update user baselines (#26888)
Accepted baselines.
Try finding the first type with a call/construct signature when relating to unions.
Refactor and clean up sourcemap decoder
Always check index type validity for all types when an error node is present so we always issue an error (#26789)
Dont consider export specifiers visible in their local scope (#26884)
Allow special assignments to have a contextual type of their declared  type if present (#26802)
Accepted baseleines.
Skip asterisks after newline when parsing JSDoc types (#26528)
Update user baselines (#26861)
Added test.
Collect jsdoc tags for type parameters (#26824)
better condition for file include exhaustiveness check
Enable allowSyntheticDefaultImports if esModuleInterop is enabled
Add newline to bottom of tsconfig files
update baseline
hand over to LanguageServiceHost.readDirectory
Assert CompilerHost.readDiretory for projectReferences with include
Accept new baselines
Defer reduction of identical function types in unions and intersections
Argument arity error should only consider signatures with correct type argument arity.
Baseline the require of json file in js file
Update baselines to fix build (#26822)
Revert #26762, #26726, and #26317 in preparation for a clean PR fixing all the issues.
LEGO: check in for master to temporary branch.
Add [Constructor]Parameter types to lib.d.ts (#26243)
Infer this parameters (#26800)
fix lookup regression again and again
Accept new baselines
Allow for undefined in type
No excess property error for spread properties (#26798)
Make finer-grained errors get reported on function arguments (#26784)
Add test for ts.equalOwnProperties
Accept new baselines
remove useless condition
Optimize relationship checks for arrays and tuples
Accept new baselines
Exclude generic types from weak object checks
Report file change detected only once when save takes place multiple times before timeout
Add test for signaure help with recursive type Test for #26155
Ignore newline and asterisk when parsing JSDoc typedef (#26775)
fix lookup regression again (#26762)
Make SymbolFlags.ObjectLiteral a Value (#26752)
LEGO: check in for master to temporary branch.
Remove unnecessary `getContainingClass` calls (#26753)
Completion for tuple index doesn't need to include quotes (#26750)
Add test to verify #26669 where declaration output is incorrect when declaration flag is not set explicitly in options
Use non-diagnostics-producing typechecker to get type
Add comment explaining special casing
Add tests and validate diagnostic spans
Allow codefix to apply to function expression in variable declaration
Look for correct description
Test for existence of diagnostic when running tests
In JS, fix contextual type of this assignments (#26743)
moduleSpecifiers: Simpler criteria for preferring relative path vs baseUrl (#25803)
Accept new baselines
Update tests
Stop inferring unions for disjoint callback parameter inferences
Move parsing of build options to commandLineParsing so it can be tested and it lines with other commandline parsing
Add shortname for watch option
Make generator function name a completion list blocker (#26640)
LEGO: check in for master to temporary branch.
add test case and fix regression (#26726)
accept baseline
Add survey event (#26455)
Use semver ranges
Ensure JsonSourceFile has all the non-optional properties of SourceFile (#26162)
Use protocol.UserPreferences in server to store UserPreferences
lazyConfiguredProjectsFromExternalProject as userpreference instead of command line option
Support signature help for type parameters of a type (#26702)
Add semver range parsing support
Support import fix/completions for `export =` (#25708)
getEditsForFileRename: Avoid changing import specifier ending (#26177)
Add path back-reference tests
noUnusedLocals: Destructuring assignment is a write (#26365)
renames per PR feedback
Uncomment tests fixed with #23631 (#26700)
Memoize collecting set of all imported packages (#26263)
Switch to paths-like pattern matching
LEGO: check in for master to temporary branch.
accept more case
add special check for parameter initializer lookup if targeting es2015+
Use array helper in computeCommonSourceDirectory and remove two unnecessary tests (#26416)
Get [type] parameter types from @type tag (#26694)
Accept new baselines
Add tests
Add tsserver test for completions and avoid excess properties (#25622)
Examine all constraints of indexed access types in relations
LEGO: check in for master to temporary branch.
No assert for nameless typedefs (#26695)
Distribute indexed accesses when simplifying them (#26281)
In pickLongestCandidateSignature, instantiate using inferred type arguments (#26646)
Declaration emit includes function properties (#26499)
Update user baselines (#26687)
improve test case
Accept new baselines
Add regression test
Add early out for type assertions in getTypeOfExpression
Accept new baselines
Add regression test
Ignore parameters when inferring from return type only signature
include leading non-ASCII horizontal whitespace in SyntaxKind.WhitespaceTrivia token
Accept new baselines
Add tests
Accept new baselines
Revise complex rest parameter handling in relations and inference
Accept new baselines
Use getSpreadArgumentType when relating to complex rest parameter types
Allow weak type detection for intersection sources (#26668)
Update user baselines (#26664)
try get add missing member return type from context (#26250)
LEGO: check in for master to temporary branch.
parse less than token rather than left shift in context of type arguments
Substitute process ID for "PID" in log file names
Get symbol at location for class expressions/keywords (#26636)
remove Animations from chrome-devtools' user test shim (#26494)
Update user baselines (#26632)
Don't create expando object literals in TS (#26525)
Revert #26360: Don't error on destructure of private property with computed property syntax
Use context free expression types in evolving array checking and cache context free type (#26585)
Make equalityComparer non-optional
fourslash: Allow to verify textChanges without changing file content (#26607)
Update user baselines (#26601)
Refactor sourcemap emitter
Remove jsTypings/semver.ts, add unit tests and logging
Accept new baselines
Add regression test
Accept new baselines
Ignore constraints of generic mapped types in definitelyAssignableRelation
Report error summary from the queue.
Remove unused overloads of 'deduplicate' and 'deduplicateSorted'
Accept new baselines
Add regression test
Simplify or get constraint in distributive conditional type, but not both
Do not expose change in createCompilerHost
Keep only errors starting on new screen
Add preserveWatchOutput option to build option and report starting compilation and file changes detected status
Combine buildHost methods into SolutionBuilderHost's reportDiagnostic and reportStatus
Create api with watchHost to include in solution builder host
Use SolutionBuilderHost instead of using compilerhost for solution builder
Print version along with help when doing --build
Remove unnecessary usage of system and compilerHost
Unify tsbuild option parsing with command line options parsing
Move perform build to tsc instead of tsbuild
Ger rid of unnecessary upto date host and functions pulled out
Write first test with --build and --watch
Remove todo.
When --noImplicitAny is enabled, don't report errors suggesting that a 'void' function can be 'new'ed (#26579)
Perform depth check for all type instantiations
Adjust subModuleName
Provide a default script target for the document registry.
Base version test on 'versionMajorMinor'
Added fourslash test
Initial support for 'typesVersions'
Emit lib reference directives in declaration output
Accept new baselines
Add tests
Accept new baselines
Covariant inferences (other than never) preferred over contravariant
Accept new baselines
Add tests
Guard against infinite type instantiations and constraints
Remove some duplicate code in convertToAsyncFunction unit tests (#26527)
Go back to the old narrowing algorithm (pre #26143) and avoid #26130 by skipping narrowing if the old algorithm produces a type to which the assigned type is not assignable.
Remove lockfile, add to gitignore, and add npmrc preventing its generation (#26519)
Track late bound names in binding patterns (#26336)
mark error type in baselines very not-aggressively (#26346)
Disable apis for tsc --build till we have the actual API figured out with tests
Remove unnecessary callback in runBaseline (#26500)
Accept new baselines
Add tests
Correct apparent type for homomorphic mapped types applied to array types
Update LKG and remove newly unnecessary non-null assertions (#26515)
Update user baselines (#26512)
Skip whitespace or asterisk in JSDoc param type and name (#26067)
Set "rootDir" for cancellationToken project (#26498)
Update user baselines (#26490)
Allow super references to constructor function methods (#26482)
Check SymbolFlags instead
Ensure for-in loop variable is checked
Property assignments in Typescript (#26368)
For a this-property assignment with an empty object initializer, use type annotation if present (#26428)
Accept new baselines
Use synthetic arguments instead of GetEffectiveArgumentXXX functions
Use string contains and nodeModulesPathPart const for "/node_modules/"
Narrow on element access of literal (#26424)
Accepted baselines.
Do it correctly.
Accepted baselines.
Updated test cases.
Accepted baselines.
Make it better.
Make file as externalLibrary import if path contains node_modules
Write tests to demonstrate how baseUrl + pathMapping to node_modules behaves
Test when module resolution because of path mapping takes to json file Test for #26402
Classes can extend Javascript constructor functions (#26452)
Remove special handling for JSDocPropertyLikeTag in getJSSpecialType (#26432)
disallow abstract property access in property initializer
Simplify chooseOverload function
Mapped types like Pick<T, K> should adopt property documentation from T.
Set rootDir in tsconfig-base.json (#26415)
Error on accessing private property through destructuring assignment, and mark property used (#26381)
Include all excluded arguments in one go instead of one by one
Check large file size only for non ts files
Update user baselines (#26419)
noUnusedLocals: `f(x = 1)` does not use `x` (#26366)
Add documentation for originalPath
Refactoring promises returning functions to use async and await (#26373)
Treat NoSubstitutionTemplateLiteral like StringLiteral in more places (#26330)
moduleNameResolver: fix invalid assertion and avoid unnecessary work (#26319)
Allow type predicates in JSDoc (#26343)
Don't error on destructure of private property with computed property syntax (#26360)
Review feedback
getDefaultExportInfo: Use `getImmediateAliasedSymbol` instead of `getAliasedSymbol` (#26364)
review comments
restore old algorithm
Dont use baseURL relative absolute paths in declaration emit, use absolute paths in bundle emit (#26341)
code review
Update user baselines (#26358)
check index access for fixed length tuple
Don't store @template constraint in a TypeParameterDeclaration node (#26283)
fixAddMissingMember: Support interface and don't crash on type parameter (#25995)
Don't include class getter in spread type (#26287)
Don't crash on computed property in destructure (#26334)
Accept new baselines
Add test
Make T[K] yield never when T is never
Check the ambientness of a symbol name before attempting to trim it (#26312)
Still generate signatures in SkipContextSensitive mode just to match on return types (#25937)
getScriptInfoOrConfig: Canonicalize tsconfig path before lookup
fix handling if there is no commonPrefix
improve completions for union type in type arguments
Actually add sorting of elaboration text to user baselines
Ping ryan instead of mohammed for user PRs now
unittests/moduleResolution: actually assert in checkResolvedModule
handle failed lookups
make it work for root directory
really, really fix test(?)
add test
fix commonPrefix handling
fix test
actually test the cache
fix moduleNameResolver cache
Don't compute suggestion diagnostics for lib files
moveToNewFile: Don't remove empty named imports (#26265)
goToTypeDefinition: Go to function return type (#25952)
Add TEST-results.xml to the gitignore
fix compiler crash (#26209)
Support signature help for contextual parameter type (#26022)
Add fourslash tests
Skip loading configured project just to report project info through synchronizeProjectList for project opened by external project
Add checks for remaining truthiness positions
Revise logic that computes the contextual type for a parameter
Dont delay external project update from openExternalProject Since external projects are needed to be uptodate when opening file, so in most likely scenarios these will be loaded anyways so there is no saving in postponing this work
Delay update graph when opening external project, and delay load configured project referenced from external project when opening it
Add flags on commandLineOption to indicate strictFlag or option affecting semanticDiagnostics
Hardcode xunit reporter output file into failed tests reporter
completions: 'true' and 'false' are type keywords (#26237)
infer number index signature in JS object literals (#26221)
If runner is xunit (as on CI) set output file
25840 - Add a more meaningful error message to the case when calling a public static method on an instance (#25922)
Accept new baselines
Add regression tests
Disallow exprs of type `void` to be used in truthiness checks
Use getReturnTypeFromAnnotation instead of ad hoc checks
visit exclamation token
Change esnext.asynciterable to es2018.asynciterable
Accept new baselines
Clean up return type checking logic
Accept new baselines
Ensure type parameters are erased in contextual signature from @type tag
Erase type parameters when fetching return type from JSDoc @type tag
Update user baselines (#26186)
Removing debugger statements from tests
Send event on referencing large file
Accept new baselines
add link to issue
Properly catch and error on circular function return types
add test
Update README.md: JavaScript has modules and classes
createProgram: don't use TypeChecker
remove useless test case
Accept baselines
Port generated lib files
Flag JS Literals and ignore assignments/accesses to invalid props, instead of adding an index (#25996)
Update user baselines (#26156)
Accept baselines
Port generated lib files
add check for function return unknow type
Have getAssignmentReducedType use the comparable relation instead of typeMaybeAssignableTo.
Instead of getSymbolAtLocation use resolveExternalModuleName without error reporting
Use updateGraphIfDirty to do quick check if project update is needed With this updateGraph is used only in locations we are certain project is dirty
Make a map for semantic diagnostics from old state
Make ExportedModulesFromDeclarationEmit as ReadonlyArray of symbols combining exportSpecifiers emitted and dynamic import type nodes written
No need for method to get the exportedModulesFromDeclarationEmit
"Could not find a declaration file for module" error needs to use the unmangled package name where appropriate.
additional test
update test
improve error message and update testcase
Make import fix for default import mention that it's a default import (#26105)
Always return a defined result from getTypeFromTypeNode (#26108)
Update more baselines from #25626 (#26107)
Avoid trying to write the type of non-values (#25626)
Port generated lib files
Jsdoc `@constructor` - in constructor properly infer `this` as class instance (#25980)
Refactor and improve caching in getTypeOfSymbol callees (#25842)
Update ThirdPartyNoticeText to include KhronosGroup copyright notice for WebGL.
Port generated lib files
Port generated lib files
Ignore trailing comma when resolving signature for quick info (#25841)
In JSDoc, resolve import types as values too (#26066)
Update CONTRIBUTING.md
Update user baselines (#26088)
make it work with AssignmentRestElement
Update the public API after PR #26032
Infer array rest as tuple if possible
Keep the original configured project alive created during findAllReferences
Move the original location getter to ProjectService. This is in anticipation of work needed to keep original projects alive
Test that verifies we arent updating all projects unnecessarily when called with compileOnSave and project
Only bind module.exports if no local definition exists (#25869)
createBinary: parenthesize ArrowFunction in RHS
test sourceMap
merge tests
Accept new baselines
Add tests
Accept new baselines
Homomorphic mapped type support for arrays and tuples
Remove trailing whitespace from JSDoc comments
Support the JSDoc @enum tag (#26021)
add additional test for grammar and type checking
getDocCommentTemplateAtPosition: Return result if in empty comment (#26026)
Document ObjectLiteralElementLike (#26024)
createJavaScriptSignatureHelpItems: Use array helpers and simplify (#26025)
Update authors for release 3.0.1
Use isArray instead of isProjectsArray
Unify getProjects for compileOnSave and others like (navigation etc)
allow BindingPattern in FunctionRestParameter
Support deleting all unused type parameters in a list, and deleting @template tag (#25748)
If project name is specified in compile on save, do not update all projects to just use that project
allow BindingPattern in BindingRestElement
Break createSignatureHelpItems into functions (#25948)
Use `import().T` for import completions/fixes of pure types in JS files (#25852)
Remove extraneous `const`, fixing #25714 (#25982)
Simplify and inline getPropertySymbolsFromType (#25940)
Accepted baselines.
Provide a better error on arrow functions that capture the global 'this'.
add quickinfo test
Expand span of @typedef with properties to include the @typedef tag (#25950)
correctly resolve Symbol of destructuring shorthand intializer
expose escapeLeadingUnderscores
accept baselines
minor cleanup in factory.ts
add help alias to jake --tasks in Jakefile.js
Minor refactor in goToTypeDefinition (#25951)
signatureHelp: Factor out 'isSyntacticOwner' function (#25518)
Improve the error message when asserting to a type that is not comparable to the original.
Accept baselines
Port generated lib files
fourslash: Don't parse lib if 'nolib' is set (#23277)
Accept new baselines
Add regression test
Rest parameter with fixed size tuple should be same as regular parameters
Simplify getContainers (#23323)
In getPropertySymbolsFromContextualType, use union discriminant to filter types (#25914)
Update comment
Address CR feedback
Handle PropertyAssignment in getCommentOwnerInfo (#25911)
Lookup files by resolved `Path` and not by `fileName` in sourcemapDecoder when querying program (#25908)
Accept new baselines
Add regression test
More simplification + consistent use of getConstraintOfTypeParameter
Accept new baselines
Simplify logic in getBaseConstraint
Call toPath on sourceRoot to ensure it is always absolute (#25838)
Inspect all possible module paths when looking for the best one to create a specifier with (#25850)
Add `.mailmap` and `Test-results.xml` to .npmignore
Accept new baselines
Consistently include circularity check in type parameter constraints
moduleSpecifiers: Allow "*" as a path mapping (#25881)
Simplify getWidenedTypeFromJSSpecialPropertyDeclarations (#25868)
Report a semantic error for an arrow function with a "this" parameter.
Accept new baselines
Add regression test
Revise intersection optimizations to include string, number and symbol
findAllReferences/rename: Search in all open projects (#25648)
Don't report quickInfo inside a comment in a PropertyAccessExpression (#25813)
use missingFileModifiedTime instead check on undefined
Remove bad import completions tests (#25816)
Check module.exports (#25732)
improve completions keyword for function like body (#25824)
improve enum rechability check
Update tests baselines
LEGO: check in for master to temporary branch.
Accept new baselines
Add regression test
Properly handle all generic kinds of types in rest positions
add correct test
correctly detect if strictNullChecks is enabled
API: expose CompilerOptions.stripInternal
Handle completions at name of namespace declaration (#25661)
LEGO: check in for master to temporary branch.
add grammar check for labeled declaration (#25317)
Consistently use ScriptInfo for converting positions to Locations (#25623)
Don't bother trying to get the name of a default export (#25773)
Do not emit comments if container had a comment suppression.
Retain synthetic comments on classes and their properties.
Reduce duplication of addSyntheticComment.
Retain synthetic comments on exported variables.
Accepted baselines.
Elaborate on the first non-array type when object literals are compared against 'T | T[]'.
Accepted baselines.
Added test.
Add test that getEditsForFileRename respects UserPreferences (#25745)
Avoid using old node in import fix to use namespace import (#25729)
Check for optional type parameters before issuing a "wrong number of type arguments" error on a function call.
Revert the revert of explicitly typed special assignments (#25727)
Update user baselines (#25718)
Revert "Explicitly typed special assignments are context sensitive (#25619)"
navigationBar: Don't merge unrelated grandchildren
Revert "Explicitly typed prototype assignments are context sensitive (#25688)"
Simplify rules for `isControlFlowEndingStatement` (#25693)
Explicitly typed prototype assignments are context sensitive (#25688)
add use strict and simple parameter check
Change getModifiedTime type
Change jsDocTagNames to lower case.
getContainingList: Handle TypeAliasDeclaration (#25614)
fixUnreachableCode: Don't delete whole block when non-first line is unreachable (#25625)
Don't report unused diagnostics when the unused node has a parse error (#25598)
Explicitly typed special assignments are context sensitive (#25619)
Stricter test that JSDoc @type tag matches function signature (#25615)
Optimize the deletion and calculation of bigger set of semantic diagnostics to be calculated
 mapTextChangesToCodeEditsUsingScriptInfo: Handle tsconfig.json text change (#25586)
Update issue template
Accept baselines
Update version
fixUnusedIdentifier: Support deleting @template tag (#25597)
Get return type from `@type` tag (#25580)
When running with -w, do an initial compilation
Accept new baselines
Add tests
Additional arity check following instantiation of generic rest parameter
Issue 19220 function parameter arity (#24031)
Ensure TypeChecker#getTypeAtLocation returns a defined result (#25583)
Expose visible to outside import declarations and dynamic imports through emitDts output
Excess property understands conditional types (#25584)
Improve isPossiblyTypeArgumentPosition (#25043)
When `import("foo")` has module resolution error, error span should be "foo" (#25569)
accept baseline
Accept new baselines
rename function
Improve test for 'symbol.exports' (#25523)
In services, when overload resolution fails, create a union signature (2) (#25100)
Update user baselines
Change message for import *-ing an export= based on module type. Update tests/baselines
Improve comments in narrowBySwitchOnTypeOf
Add release-3.0 to supported branches
Update authors for release 3.0
Accepted baselines.
Added test.
Accepted baselines.
Place 'pop' first in 'Array'.
Improve isNewFile assert (#25419)
Reduce non-null assertions in getPropertySymbolsFromContextualType (#24675)
JSX closing tag completion: Include '>' if not already present (#25551)
Add test for reporting errors from deep import. Test case for #24986
Use getEmitModuleKind to check module generation kind
getJsxClosingTagAtPosition: Return a result if parent has same name and is unclosed (#25557)
handle multiple prologue directives
Build script updates
Increase span of unreachable code error (#25388)
Support completions for unique symbol exported from module (#25537)
Pass sourceFile to getChildren in getTokenAtPositionWorker (#25505) (#25538)
getEditsForFileRename: Handle all projects and source-mapped files (#25522)
Compare normalized fileNames
Check for a module sysmbol existing before calling getReferencedSymbolsForModule
Handle intersection types when looking up base types for visibility (#25418)
Don't crash when an implicit rootDir constraint is violated under composite:true
Use getEmitDeclarations instead of .declarations
Do not watch modules that get resolved by ambient modules
Make getSuggestion APIs internal.
Pass sourceFile as appropriate
getLeftmostExpression: handle TaggedTemplateExpression
Rework entity name decorator metadata fallback emit to not throw at runtime (#25421)
Introduce truncation into node builder and symbol display part writer (#24258)
Strip literal freshness from type queries (#25471)
Update 'package-lock.json'.
Semicolon.
getJSDocReturnType gets return type from `@type` tags (#25486)
Index signatures contribute properties to unions (#25307)
make getEffectiveTypeParameterDeclarations public (#25472)
Update user baselines (#25482)
Accepted baselines.
getSuggestionForNonexistentModule -> getSuggestionForNonexistentExport
Switch from 'Error' to 'Message' on related span messages.
Accepted baselines
Add a related span for suggested declaration locations in error messages.
Caches the recursive directory watchers so we do not have to traverse and recreate more children watches Helps with #25018
Update LKG (#25470)
Rework symbol visibility checking to allow for multiple potential containers (#24971)
Actually cache intermediate results in getBaseConstraint (#25417)
navigateTo: Collect results from all referenced projects. (#25283)
Optimize sourcemap application more (#25425)
No merge for redirected source files in initializeTypeChecker (#25463)
Support prototype assignment with a function declaration (#25300)
Handle getting name of default export that's an alias
Change message for import *-ing an export=. Update baselines
Update user baselines (#25436)
accept baselines
createArrowFunction: parenthesize comma sequence
Update baseline
Add a suggestion - Did you mean 'typeof import()?. Add tests to handle undated error message
Add missing jsdoc tag names
Put error spans deep on nested object literals (#25140)
Only provide signature help contextually on a character trigger.
Don't add completions from a discriminated union type when the discriminant doesn't match (#24770)
Added tests for syntactic context.
Remove 'name' property which was invalid.
Restore `NewFileContent` type (#25406)
Account for comments.
Amend test for comments, other string types.
Renamed test.
Check if module reference requires type reference before path reference (#25385)
Canonicalize path before calling `startsWith` (#25364)
Remove outdated comment
Update user baselines (#25399)
Update tests baseline. Change tests
Add new error message - Property {0} is used before its initialization.
Accept new baselines
Add tests
More thoroughly test navigateTo (#25239)
Change import type determination to not use a RE on the symbol name (#25381)
goToDefinition: Don't go to jsx constructor signature (#25382)
Lints.
Use `addRelatedInfo`.
Accepted baselines and updated fourslash test.
Account for trigger reasons, as implemented by Roslyn.
Handle JSON extension correctly
Accept new baselines
Infer contextual tuple types
Update API (#24966)
Remove shadowed variable
Add --out
rename: Re-use code for isDefinedInLibraryFile (#25367)
Accepted baselines.
Addressed code review feedback.
Baseline update
Give related error on declaration location for used-before-declared errors.
fixAddMissingMember: Improve deduplication in code-fix-all
moduleSpecifiers: specifier from "rootDirs" should be treated as relative (#25369)
.json also doesn't produce outputs
Handle multiple output .d.ts files changedness correctly
Adds related spans and error grouping for duplicate identifier errors (#25328)
Remove deprecated escapeidentifier and unescapeidentifier functions (#25333)
.d.ts files don't have outputs
remove unnecessary qualifier
add tests
add tests
factory: deprecate signatures using JSDoc
Update user baselines
Update README.md
accept baselines
expose createExpressionStatement and updateExpressionStatement
revert unnecessary change
getLeftmostExpression: handle AsExpression and NonNullExpression
createExportAssignment: parenthesize nested class or function expression
Accept new baselines
Add regression test
Use helper functions in a few more places (#21308)
Accept new baselines
Guard against recursion in resolveAnonymousTypeMembers
ChangeTracker: Combine deleteDeclaration, deleteNode, and deleteNodeInList (#25276)
Update API (#24966)
Combine code-fix-all for missing class member and missing enum member
Support LibraryManagedAttributes<TComponent, TAttributes> JSX namespace type (#24422)
Remove deprecated SymbolDisplayBuilder API (#25331)
Add test
Only include attribute span if one or more
Add outlining regions for jsxelements and jsxattributes
Simplify getRangeOfEnclosingComment (#25168)
JsxTagNameExpression can only be Identifier | ThisExpression, not any PrimaryExpression (#21555)
Split isConst into isVarConst and isEnumConst (#25312)
Make regexp a constant
Add test
Stop including region delimiter comments in comment fold regions
Update user baselines
Accepted baselines.
Actually make the test file use '--strict'.
Assignement -> Assignment
Asignment -> Assignment
arugments -> arguments
arbitary -> arbitrary
abount -> about
anohter -> another
affectected -> affected
additinal -> additional
accross -> across
actuallty -> actually
Accepted baselines.
Use a more direct error.
Accepted baselines.
Don't elaborate on primitives at all.
Added test case.
Introduce more caching and deferral into jsx checking (#25302)
Add codes and categories to related information, officially (#25304)
Add bailout case to sourcemap searching code (#25212)
Remove dead code testing result of `resolveProjectReferencePath` (#25284)
Destructuring declaration prefers type annotation type (#25282)
Update user baselines
Accepted baselines.
Strip `null` and `undefined` from targets when relating from certain atomic types.
do not handle enum type member
Accepted baselines.
indicates -> indicate
Add test for goto-definition with project references (#24867)
Remove redundant checks in getNameOfDeclaration (#25244)
Don't look for a file called 2.map
findPrecedingToken: default includeJsDocComment to true (#25262)
getTouchingToken: default includeJsDocComment to true (#25258)
When renaming at a tsx opening/closing tag, just rename the current element (#25273)
fixUnusedIdentifier: Remove arguments corresponding to unused parameters (#25011)
add Initializer if enum value is another enum
Point VSTS build badge to results of the latest build (#25248)
Only add completion for a symbol if it is accessible (#25096)
getEditsForFileRename: Test both before and after the rename (#25074)
getTokenAtPosition: default includeJsDocComment to true (#25015)
Use different cache for the ScriptInfoVersion
Update error code expectations.
semanitc -> semantic
Report errors in corrrect process for gulp-typescript-oop
Accepted baselines.
Give a better message up-front for incompatible equality errors.
Stop not emitting mappings for function and class names (#25210)
Retain the version information of script infos when they are deleted This helps in having to not restart the versioning, which could potentially have same version but different contents and project could confuse with it
Add exists check before unlink
Track name scope aloneside lexical scope
Add name to jsDocParsing link tag test (#25229)
Remove @internal from Program::isSourceFileDefaultLibrary
Update user baselines (#25226)
Set current scope for classes.
use better scope
accept baseline
add quick fix for add missing enum member
Revert package.json change
Clean up browserify task, remove unused 'debugMode.js' script
Treat link tag as comment (#25206)
Ensure upToDate also handles referenced project outputs
Don't try to write --pretty results to unsupported consoles in --build
Pipe through Chakra APIs for tsc.exe --build
Accept new baselines
Add tests
Contextual typing by tuple rest elements
Improve verify.renameLocations (#25192)
Support doc comment template at function expression (#25050)
Simplify addJSDocComment (#25196)
parseJSDocCommentWorker: Don't need `result` (#25197)
goToDefinition: Don't add duplicate definitions for PropertyAssignment and ArrowFunction at `m: () => {}` (#24995)
Don't crash on property access with type (#25170)
Make GetEditsForFileRenameRequestArgs not extend FileRequestArgs (#25052)
Add refactor to convert named to default export and back (#24878)
LEGO: check in for master to temporary branch.
Remove unused function (#25138)
Accept new baselines
Update tests
Complete support for rest elements in tuples
LEGO: check in for master to temporary branch.
Multifaceted approach to performantly enabling fileExists outside of the synchronize step in the emit host (#25107)
Cache specifier resolutions for speed when emitting many types from the same place (#25112)
getEditsForFileRename: Don't update import with non-relative path if the imported file didn't move (#25159)
Don't provide a path completion if a directory name was already typed (#25055)
Accept new baselines
LEGO: check in for master to temporary branch.
Adds support for gulp.watch
Accept new baselines
Accept new baselines
Accept new baselines
Update tests
Update destructuring to support optional and rest elements in tuples
Parse nested prop and param tags the same way (#25139)
Use `getObjectFlags` as suggested in previous PR.
provide spelling suggestion for indexed access (#22225)
Accepted baselines.
Expand better error messages to anonymous object types with identical type aliases.
Add 'withContext' helper in createNodeBuilder (#24994)
getEditsForFileRename: For directory rename, preserve casing of suffix (#24975)
check return tag in getTypePredicateOfSignature (#25130)
Convert getInsertNodeAfterOptionsWorker to switch statement (#25128)
Don't recommend to install '@types/foo' if that already exists (#24815)
Don't treat a declaration as a type argument position (#25046)
Error on 'const' in class expression (#25125)
Mark some Type[] and Signature[] as ReadonlyArray (#25099)
LEGO: check in for master to temporary branch.
Accepted baselines.
Try to report errors on types who have matching type references.
Accepted baselines.
Added test.
Accept new LKG
Cleanup, remove some unneeded dependencies, make it easier to add gulp.watch support later
In JS, always check the extends tag of a class before its heritage clause (#25111)
Remove contributor info
navigationBar: Avoid double recursion on special property assignment (#25077)
Add CompletionInfo command to protocol (#25080)
Update user baselines (#25091)
refactorConvertToGetAccessAndSetAccess: Don't trigger on leading trivia (#25054)
fixUnusedIdentifier: Don't needlessly exclude jsdoc (#25014)
Add missing references in clparser and libs.json
Add Intl.NumberFormat.formatToParts types
Simplify getJSDocCommentAndTags (#24997)
Update user baselines (#25070)
Accept baseline
Address lint warnings
Accept API baselines
Disable gulp.watch for now
Remove excess exports from exec.js
Update gulpfile to support project references
Add a testcase
Adds failed test tracking
Do fewer calls to getRelativePathToDirectoryOrUrl when writing sourcemaps
Update user baselines (#24989)
Array literals contextually typed by tuple types with rest elements
Infer union types for rest elements in tuples
Accept new baselines
Dont use unreliable inodes for checking file identity (#25008)
Add default task
Remove unused thing
Parsing and rudimentary checking of tuples with rest elements
Accept baseline
Introduce related spans into tsserver protocol (#24548)
PR fixups
Update user baselines (#24952)
getEditsForFileRename: Don't update unrelated import (#24961)
No dupe jsdoc for assignment inside an initializer (#24973)
Js/check type tags (#24967)
Accept new baselines
Add tests
Don't add diagnostic on unused import starting with underscore (#24958)
Handle package.json, jsconfig.json, tsconfig.json in the getDiagnostics of fourslash tests
In JS, fix crash with in a file with conflicting ES2015/commonjs exports (#24960)
Turn on SLC
Handle combinations of rootdir and outdir when calculating paths (#24941)
Avoid huge inferred type (#24953)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Stop generating sectional sourcemaps (#24917)
Ryan feels shame as a major action
Properly widen type element types in inferred rest parameter types
Use LKG for g-d
Use LKG for scripts
Updates for nightly publish
LEGO: check in for master to temporary branch.
Add publishing tasks
Remove extra dependency + build smaller tsc.js into lkg
Test for amd resolution setting the recursive directory watcher in the parents of root folder
LKG update
Move internal comments around all day
Accept baselines
Don't bail wrongly in tsc -b -w
Remove -v from compile
Minor fixes
Update baselines
Proper dependencies for lkg
Add fs-extra
Move internal flag around
Return exit codes from tsbuild
add vfs snapshot capability for future tests
PR Feedback
Add js to gitignore
Move Comparer around
Issue a better error
Add internal where needed
Don't believe prepend projects are UTUTD
Add produceLKG script
Rewrite jakefile
Support `@this` tags (#24927)
LEGO: check in for master to temporary branch.
Add vfs diff, update tsbuild test
Accepted baselines.
Implemented support for trigger characters in signature help.
API sample is building again
Use symlinks when looking for module names for declaration emit (#24874)
Accept new baselines
Better algorithm for combined co- and contra-variant inferences.
Update user baselines (#24908)
Better handling of circular JS containers in getTypeOfVariableOrParameterOrProperty (#24732)
LEGO: check in for master to temporary branch.
Use / in paths in the auto-generated files' header (#24883)
mapRoot is not filePath
Accept baseline changes in APIs
LEGO: check in for master to temporary branch.
Remove generated files (#24892)
Reuse resolvedProjectReferences
Use correct search order for position location (#24886)
Collapse core/compiler/parser into parser
Set use flag (#24881)
Baseline LKG update
Remove error baseline
LEGO: check in for master to temporary branch.
Add Variable to HasExports (#24871)
Support async tests in runtests-parallel
Accept baseline API changes
Accept new baselines
Flatten spread expressions of tuple types
Accept baselines
Simplify tryDeleteDeclaration (#24808)
Update API
goToDefinition: Don't add duplicate definitions for VariableDeclaration and ArrowFunction at `f = () => {}` (#24863)
Undo debug
addClassStaticThisReferences: Don't cross class boundary (#24860)
Debugging linux failure
LEGO: check in for master to temporary branch.
Record parameter names in inferred tuple types
Accept new baselines
Expand rest parameter with tuple types when emitting signatures
LEGO: check in for master to temporary branch.
Tests passing and lib loading
Almost working?
Give up again
Should not have existed
tsserverlibrary
The baselines are back in town
Jakefile rewrite WIP
Revert the jakefile
Update test to reflect new behavior
Attempt to rewrite the jakefile and fail
Projzilla phase 1
Accept new baselines
Optional elements in tuple types + empty tuple types + other fixes.
Last round PR comments
Use native map
Normalize paths in GetEditsForFileRename
PR fixups
fixStrictClassInitialization: Support array initializer (#24810)
fixUnusedIdentifier: Remove unused writes (#24805)
LEGO: check in for master to temporary branch.
always visit them all (#24802)
move static flag predicate before get container
Actually forward sourcemaps to gulp-typescript doesnt disable sourcemaps (#24766)
fixUnusedIdentifier: Delete trailing comma in array binding pattern (#24800)
Inlined asterisk token creation.
LEGO: check in for master to temporary branch.
Modernize syntax by using arrow funcs
Add getDirSize checks to Jakefile LKG
Change getDirSize to default export
Rename get-dir-size to getDirSize
Rename get-dir-size.js to getDirSize.js
Remove unused promisify
build: add check for lib size
tryGetModuleNameAsNodeModule: Ignore file extension (#24774)
LEGO: check in for master to temporary branch.
fixStrictClassInitialization: Don't provide a default for `string` or `number` (#24767)
Add completions from literal contextual types (#24674)
Support 'tsconfig.json' when converting TextChanges to CodeEdits (#24667)
Update header
Add 'nameSpan' property to NavigationTree (#24698)
Accept new baselines
Allow generic rest parameters and infer tuples when possible
moveToNewFile: Infer quote preference (#24652)
Don't consider `x.` a new identifier location just because x has a number index signature (#24699)
checker: avoid useless closures
addMethodDeclaration codefix creates a generator function when target is child of a YieldExpression, resolves #24728
Handle import types in serializeType (#24701)
Update Third Party Notice text
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Improved watch mode
LEGO: check in for master to temporary branch.
Improve handling of container projects and issue relative filename messages
Update messages
Improve valueDeclaration for js module merges (#24707)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Lint
Include all lib files in tsbuild harness
Move proj ref logic to the right place
Include filename when reporting not found
Simplify parseJSDocIdentifierName (#24660)
Lint
Tidy
Don't crash on no args
Complicate the paths of the project for better sourcemap testing
Accept baselines for sourcemap sections
Add outfile-concat project refs test
Reorganize tsbuild unit test file
Use more nodelike paths for import types when possible (#24610)
If parsing a function type fails, parseTypeReference() to ensure something is returned (#24567)
LEGO: check in for master to temporary branch.
add commnet
disallow static field access
LEGO: check in for master to temporary branch.
Fails test if evaluator source text has errors
LEGO: check in for master to temporary branch.
Allow trailing commas after-rest elements in destructuring
Update baseline tests
Visit the children of an import type/require call/dynamic import when looking for those (#24663)
Update baselines
Resolve aliases before using getTypereferenceType (#24594)
Always include Jsdoc comment in getTouchingPropertyName (#23379)
Update Third party notice doc
goToDefinition: Put variable definition before signature definition (#24649)
Port generated lib files
Change file name
Update LKG
Remove debugger statement
Use redefining helper pattern for better tree-shakeability
Add 'parseOptionalJsdoc' helper (#24650)
Tests to acknowledge the public watch api
Template tag allows specification of constraints (#24600)
Add 'unknown' to type keywords (#24606)
moveToNewFile: Update namespace imports (#24612)
moveToNewFile: Ignore reference to global (#24651)
Add autoCloseTag language service (#24543)
Remove redundant null assertion
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
allow access protected member in this parameter context
Treat host as possibly undefined for base64encode/base64decode
Accept new baselines
Add regression test
Simplify nested indexed access types
Accept new baselines
Add tests
Improve typeof x === "function" narrowing for non-unions
LEGO: check in for master to temporary branch.
Make tag readonly
Always get latest tag of types-registry
Remove second get call
Replace has with get and check undefined
LEGO: check in for master to temporary branch.
Add test
Visit super arguments even when no signature exists (#24591)
Handle installed package missing from registry
Store + use the resolved path of sourceFiles in proj. ref. scenarios
Include export specifiers in the list of syntactic defaults (#24549)
fix syntax error in unit test
Reduce size of span for unused declaration (revert #22388) (#24566)
Support import completion for merged declaration exports (#24539)
Scaffold watch mode
LEGO: check in for master to temporary branch.
getEditsForFileRename: Support directory rename (#24305)
remove redundant assertions in fourslash tests (#24561)
Remove deprecated internal method (#24540)
Invalidation + separated downstream builds
implementations: Use declaration name for the span (#24537)
Better JS container binding (#24367)
Updated baselines
Do not emit 'use strict' prologue in .json files with --alwaysStrict
Rename ESNext `flatten` to `flat`
PR Feedback
Update user baselines
add esnext symbol proposal
Candidate sectional sourcemap emit implementation
For type emit, walk non-parent containers when those containers have aliases leading to the target (#24507)
moveToNewFile: Remove newlines after last moved statement (#24503)
Update authors
Lookup type arguments correcly for taged templates when checking generic arity (#24496)
fixUnusedIdentifier: fix "Remove variable statement" codefix  (#24497)
Add refactor to convert namespace to named imports and back (#24469)
Support getting references even if quickInfo failed (#24476)
LEGO: check in for master to temporary branch.
Improve template literal tests (#24359)
We definitely have a type system
Add more errors; commandline help for --build; invalid flag combo detection
Better fix for bogus duplicate identifier in module exports (#24491)
isValidMethodAccess: use getTypeOfPropertyOfType instead of getTypeOfFuncClassEnumModule (#24488)
Update user baselines (#24487)
Rename unknownType to errorType in merged code
Don't allow to rename string literal (#24477)
Refactor and inline getNodeToInsertMethodAfter
fix broken test
Accept new baselines
Update tests
Remove eager resolution of distributive conditional types
Test for asyncIterator existance before defining
Simplify calculation of sourceFiles for getReferences (#24475)
Avoid duplicate import completions when a namespace is exported by two different modules (#24473)
Do not await iterated value in for-await-of
LEGO: check in for master to temporary branch.
VFS fixes
Skip IntrinsicAttributes elaboration in JSX errors (#24461)
Add test that verifies watched directories and files when resolution of module references sibling folder to root with symlLink
Accept new baselines
Update tests
keyof unknown should be never
moduleSpecifiers: Don't return a relative path to node_modules (#24460)
fixUnusedIdentifier: Don't remove parameter in override or non-last parameter in callback (#24306)
Include '...' on doc comment for rest parameter (#24462)
Add graph ordering tests
LEGO: check in for master to temporary branch.
Remove unneeded assertions
Add assertions
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
add lookup for extends class when implement interface
Accept new baselines
Update tests
Add new diagnostic
Check we have non-unknown where we require non-nullable
Update undeclared method quickfix tests
addMethodDeclaration: add after quickfix location if possible (#22674)
Accept new baselines
Add tests
{ [P in unknown]: XXX } should resolve to { [x: string]: XXX }
Accept new baselines
'null' and 'undefined' are bottom types in non-strictNullChecks mode
Accept new baselines
Implement 'unknown' type in checker
Accept new baselines
Add 'unknown' keyword to scanner/parser/emitter
Accept new baselines
Free up one bit in TypeFlags
Rename existing unknownType to errorType
Use better toposorting algorithm
Accept baselines
LEGO: check in for master to temporary branch.
Revert "Check detected npm path is existing"
Make configure prerelease script compile under strict null checks (#24417)
LEGO: check in for master to temporary branch.
accept baseline
Document highlights on yield keywords highlight other occurrences in the same body
LEGO: check in for master to temporary branch.
add more test and fix others
remove invalid check
Graph ordering test WIP
Don't constrain string tag values
Correctly skip upstream-blocked projects
Don't use invalid cached SourceFiles
Dump fork output on unclean exit (#24394)
Use external aliases in quickinfo and signature help return types (#24391)
Update user baselines (#24374)
Disallow nested object param syntax in callback tag (#24392)
LEGO: check in for master to temporary branch.
Do not trigger invalidation if emitted file is in declarationDir
Hoisted declarations should occur after prologue directives (#24386)
Add resolution branding
Comments
Dont count duplicated errors in case-insensitive duped files in rwc (#24383)
moveToNewFile: Format the new file (#24379)
WIP
moveToNewFile: Respect UserPreferences#quote (#24365)
LEGO: check in for master to temporary branch.
remove failed test
Update Bug_report.md ts version to 3.0.0
Update issue_template.md ts version to 3.0.0
fix ambient context
fix export class declare with name object targeting es5 (#17494)
LEGO: check in for master to temporary branch.
remove some case
Simplify convertToMappedObjectType (#24360)
LEGO: check in for master to temporary branch.
add code fix convert to mapped object type (#24286)
LEGO: check in for master to temporary branch.
Support signature help for partially-filled-in type arguments `f<` (#24138)
Make undefined for default case less pervasive by removing once done with it
fix void return statement
revert wrong inline parameter
update body only
fix converter
stash
add tests and fix
add support for add or remove braces to arrow function
WIP more tests
Add fall-through test and correct comment about implied type
Add fix option to lint task (#24344)
Use compare paths for comparing diagnostic paths, since the canonicalization of fileName and unitName differ (#24340)
Check for keyof constraint type instead of syntactic check (#24098)
Use unknown serialization kind when type symbol isnt resolved (#24332)
Remove duplicate class 'NodeSet' (#24337)
moveToNewFile: Don't provide refactor if selection is just imports (#24336)
Enable '--strictNullChecks' (#22088)
Use symbolToTypeNode for class & interface references (#24330)
moveToNewFile: Support selecting the name of a declaration (#24331)
Don't need to check failedLookupLocations if resolved successfully
Support recommended completion for union (#24326)
Baseline accept
For completions, treat a '// @ts-check' file like a TypeScript one (#24321)
Passing tests
getEditsForFileRename: Handle old file still being present
Add a test when orphan file changes before it gets added back to project
Verify ref counts are set correctly when reusing the source file from script info cache
Add type for diagnostics where location is defined (#23686)
Check TransformFlags.ContainsJsx, rather than LanguageVariant.JSX
Update user baselines (#24289)
Add suggestion diagnostics for unused label and unreachable code (#24261)
WIP
fix wrong formatting with multiline type literals with IntersectionType and UnionType
Testing WIP
Testing WIP
Added tests
Clean, etc
Preserver jsx imports even when the compiler option is not set
Accept new baselines
Add tests
Accept new baselines
Handle union types in getRegularTypeOfLiteralType
fixUnusedIdentifier: If every VariableDeclaration is unused, remove the VariableStatement (#24231)
Infer non-widening literal types when type parameter constraint includes primitive types
WIP
Add noGetErrOnBackgroundUpdate session option to not queue diagnostics check for open files This will ensure that the getErr will be queued in by host and hence would make sure that it is cancellable. Handles one of the scenario delaying completions in #19458
builf lib.es2018.full.d.ts
Update LKG
Lint
Remove .js.map and .d.ts files added in #23844
update .npmignore
Port changes in #24238 to source file
LEGO: check in for master to temporary branch.
Use single quotes around 'typeof' in message.
LEGO: check in for master to temporary branch.
Get constraint with this argument of the type parameter for comparisons (#21210)
getEditsForFileRename: Do fresh module resolution instead of relying on cache (#24211)
Add code fix to remove unused label (#24037)
getJSDocTypeParameterDeclarations: Avoid unnecessary array (#24257)
getJSDocHost always returns a defined result (#24255)
Extract sorting helper
Update user baselines (#24247)
Eliminate runtime type check
Delete redundant tests
getEffectiveTypeParameterDeclarations: Always return a defined result (#24251)
Some RWC tests had dupes in their input/outher files list because paths werent both resolved (#24235)
es2018 regexp dotAll
only allow refactor if selected span overlaps name declaration
Sort exports when organizeImports is run
simply quick fix for import type missing typeof
WIP, need to lint
WIP
Remove leveldown, stip absolute paths from test mk 2, accept reordered and new user baselines (#24227)
Set startPos at EOF in jsdoc token scanner so node end positions for nodes terminated at EoF are right (#24184)
Improve ChangeTracker#deleteNodeInList (#24221)
More robust circularity detection in node builder (#24225)
fixUnusedIdentifier: Don't delete node whose ancestor was already deleted (#24207)
Accept changed baseline (#24222)
Use import types to refer to declarations in declaration emit (#24071)
Add undefined guard
Reduce map lookups (#24203)
moveToNewFile: Don't move imports (#24177)
Cache the latest source file from document registry so we can keep it alive when script info is orphan
Add test to verify the document is released from source file when info is orphan
Add callback tag, with type parameters (#23947)
add quick fix for import type missing typeof
LEGO: check in for master to temporary branch.
disallow acesssor generate in function like initializer
Sort the whole diagnostic, plus giving up on isolating tests (#24186)
Properly handle edge cases
Add Unicode ThirdPartyNotice
LEGO: check in for master to temporary branch.
Accept baselines
Use newer signature help check (#24179)
Update version
Don't collect open-file telemetry on the syntax server
Have the bot link the build associated with the PR (#24176)
Correctly show instantiated signatures for JSX element signature help and quick info (#23492)
Use jsdoc aliases if visible when printing types (#24153)
Add temp module dir to gitignore to reduce git intellisense load when running user tests
Have bot force push his branch so he can run multiple times a day
Bump user test enumeration timeout
Update authors for release-2.9
Accept new baseline
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix generate accessor if starting with underscore
Give issue template's checklist checkboxes
Give checklist checkboxes
fix trailing comma in accessor generator
LEGO: check in for master to temporary branch.
Handel synthetic rest parameter declarations
Avoid duplicates when finding jsdoc (#24086)
Normalize this.currentDirectory
Move synthetic comments from arrow body expressions to return statement (#24135)
Copy allowTextChangesInNewFiles property to protocol.ts (#24127)
Combine signatureHelp testing methods (#24132)
Accept new baselines
Add regression test
Optimize intersections of unions of unit types
External runner fixes (#24115)
Remove assert
WIP
Comments/naming
Reorder, add `"http2"`, `"async-hooks"` and `"perf_hooks"`
Add 'inspector' to known node modules
Do not remove extension js or jsx from the subModuleName if the subModule doesnt have js or jsx extension
Add test for module resolution with package json containing main field referencing js file in sub directory
Cache simplified indexed accesses to better handle circularly constrained indexed acceses (#24072)
Don't add a suggestion to convert to an es6 module if no commonjs import/export appears at top-level. (#24101)
Use SHA256 hash for project info telemetry (#24099)
Reduce aggression of parenthesis removal in ts transform (#24073)
Push through original mapping location
Alter basic auth strategy
Update API baselines
LEGO: check in for master to temporary branch.
Inject token into push like vsts does
LEGO: check in for master to temporary branch.
Cut back on more 'caught exceptions' from vfs
Return mapped locations in alternate fields
Add another test of js special assignment merging (#24070)
"gulp" -> "jake"
add tests
Add fourslash test case
Assert:only merge into transient symbols
LEGO: check in for master to temporary branch.
Add declarationDir to excludeSpec
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Small test fixes
Ignore case when sorting imports
Added deferred to FileStats telemetry
Stop deleting empty named import lists
First half of fix
Support '/' as a trigger character in path completions (#24042)
Add code fix to remove unreachable code (#24028)
VSTS prefers to pass secrets as command line params (#24041)
Improvements to find-all-references for import types (#23998)
LEGO: check in for master to temporary branch.
Add script for automatically creating PRs for user test updates (#24036)
Dump XML test results (#24034)
Don't count '/' in division as a completions trigger (#24038)
Update user baselines (#24032)
Add release-2.9 to covered branches
Add 'move to new file' refactor (#23726)
Generate names for type parameter declarations in inferred types (#23902)
fix incorrect find reference pos
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
add prependRange and move more variable declaration
find reference at begin of constructor
Allow all private declarations to be emitted in declaration output (#23351)
Remove unnecessary filtering of tsx completions (#24004)
LEGO: check in for master to temporary branch.
Default to 'edge' instead of 'IE' for browser tests
Add createRegularExpressionLiteral and expose createStringLiteral
PR Feedback
Add additional Array.from test case
Add telemetry for open JS files (#23833)
improve performance
update all reference in constructor
LEGO: check in for master to temporary branch.
Adress review comments
Do not check for await expression and always output yield await
LEGO: check in for master to temporary branch.
Accept typo fix (#23983)
Rename test (#23978)
Reduce number of 'caught exceptions' raised by vfs
fixUnusedIdentifier: Handle destructure with all bindings unused (#23805)
Batch enumerateFiles for multiple configurations into a single web request
Make new harness fake host more performant in large complications (#23951)
Handle BindingElement in fixUnusedIdentifier (#23819)
Add hook for adding transforms into the declaration emit pipeline after the main one (#23946)
Support '.' as a trigger character (#23890)
Accept new baselines
Add regression test
Exception for 'any' constraint only applies to type parameters
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Apply transformation to await expression
Accept baselines for new import call expression error in ES2015
Make error message for dynamic imports when module is ES2015 more helpful
add support for readonly modifier
LEGO: check in for master to temporary branch.
convertToEs6Module: Replace 'module.exports =' with 'export default' without replacing nodes (#23948)
Treat 'import("")' as a module reference (#23949)
Pass setParentNodes through to parseJsonText
Project References Core support
Avoid unnecessary newline when inserting node at start of class (#23935)
Add 'string' ScriptElementKind (#23821)
Expose ProjectService to plugins (#23824)
Rename
generateGetAccessorAndSetAccessor: Preserve a parameter property declaration (#23318)
Replace `verify.rangesReferenceEachOther` with `verify.singleReferenceGroup` (#23933)
Remove verify.referencesAre, verify.referencesOf, verify.rangesReferenceEachOther (#23900)
Check detected npm path is existing
Document highlights on async/await keywords should highlight other occurrences in the same body fix #22944
LEGO: check in for master to temporary branch.
Code review comments
Add comments to kinds
Revert adding named import binding list outlining spans
Change kind name to `imports`
Add WSH as an alias for WScript in scripthost.d.ts
LEGO: check in for master to temporary branch.
Revert "Resolve promise inside async generator"
Always yield await in async generator
Accept new symbol baselines, ensure expected ordering for default libs
findAllReferences: Treat a nested property in a jsdoc type literal as a definition (#23901)
Remove unused interface (#23905)
Fork gulp-typescript tasks to run out-of-process
Add 'lib' reference support
add libMap and libs exports
Move getSpellingSuggestion to core
Create a test case for module resolution when symlinked folder contents change and resolve modules Test case for #22349
Few renames to distinguish between fs File and File in the test case to load in the VFS with watch
Look at simplified types when checking distributive conditional constraints (#23884)
Update test
Accept baselines
Add outlining span for named bindings in import declarations
Update the message for resolveJsonModule as per PR feedback
PR feedback
Add outlining spans for import declarations
Accept baselines
Resolve promise inside async generator
only disallow infinite or nan in const enum
disallow nan and infinity in enum member
Add assertion message
Minor changes to reduce stack depth during emit
Add formatting rule for import type import keyword and open paren (#23872)
Unpatch vfs resolver and default lib rename
Unpatch project tests
Don't close runtests-browser server when browser-launcher closes (#23875)
Move templates (#23874)
Update Question.md
Stress that questions should not be asked.
Implement feedback on "Improve completions testing" (#23842)
In insertNodeAfter, handle file with no trailing newline (#23814)
Rename
Update Custom.md
Update Custom.md
Update Custom.md
Update Feature_request.md
node builder should strive to preserve mapped type keyofness (#23815)
Updated stray baseline.
Update Bug_report.md
Ensure properties with computed names are visited (#23787)
Dont consider global augmentation top-level members as having the export modifier (#23846)
Update issue templates
Move property errors to the name for the error span (#23865)
Move symbol instance type to es5 to follow PropertyKey (#23864)
Stop using circularity-unchecked-caching (#23808)
Don't show a definition at a 'require' call (#23822)
Update LKG (#23844)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Rollback fileExtensionIs
Downlevel destructuring in module transformer if destructured variable has multiple names (#23832)
Flag default imports with named imports as needing importStar (#23795)
Centralize lib management for build
fixAddMissingMember: Add a new PropertyDeclaration at the end of the first set (#23837)
Use 'firstDefined' in 'enablePlugin' (#23825)
LEGO: check in for master to temporary branch.
Pre-generate names ahead of time
Update completion order in test
LEGO: check in for master to temporary branch.
Update documentation comments
More path cleanup
Add VSTS Build status badge to README (#23789)
Inform getDeclarationSpaces about how an imported exportAssignment may merge (#23816)
LEGO: check in for master to temporary branch.
fixCannotFindModule: Special handling for node core modules like "fs" (#23807)
Accept new baselines
Check that test cases produce expected types
Improve completions testing (#23591)
Accept new baselines
Add regression tests
Unconstrained type parameter not assignable to 'object'
Add code fix to convert 'require' in a '.ts' file to an 'import' (#23711)
PR feedback
No error for require, module.exports or exports in Javascript (#23743)
LEGO: check in for master to temporary branch.
Always export typedefs (#23723)
remove modifications to lib/*
Add used-before-declaration errors for class refs inside computed names (#23784)
Remove circle & jenkins (#23752)
add lib.es2018.intl + fix lib.es2017.intl
PR feedback
Accept new baselines
Add regression tests
Check for null type instead of null keyword
Accept new baselines
Add tests
Treat unconstrained T[K] the same as unconstrained T
update string template rule and test
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Update issue template to match current nightly builds versions.
More logs in tsc.js
Specify ESNext module in test.
Check for both 'module' and 'target'.
Look for top-level imports/exports before diving into the tree.
Accept new baselines
Add tests
Relax switch-case narrowing restrictions (#23522)
Actually visit expression node on empty destructuring assignment (#23744)
Add implicit any errors for destructuring computed names which aren't late bound and have no corresponding index (#23489)
LEGO: check in for master to temporary branch.
Remove readonly from object rest properties (#23746)
Partial migration of some shared vpath functionality to core
Copy consistient valueDeclarations on union/intersection symbols (#23190)
Remove redundant primitive types from intersections with literal types
Add prettier user test and fix associated crash (#23715)
Add tests
Check base type for special property declarations (#23671)
LEGO: check in for master to temporary branch.
Auto format: no space between closing parenthesis and string template
Don't add import completion from a re-export in "./index" (#23623)
Use @types/travis-fold (#23694)
There exist type parameters with symbols but without TypeParameterDeclaration nodes (#23690)
Remove unused property 'referencedDiagnostics' (#23688)
Prototype-property assignment:fix name resolution crash (#23680)
Remove unnecessary check for ElementAccessExpression#argumentExpression being defined (#23685)
Handle diagnostic with unknown file (#23681)
Make signature help node building cancellable (#23543)
Accept new baselines
Add additional tests
Accept new baselines
Handle more situations involving combined constraints of intersections
Always parse an argument for an ElementAccessExpression (#23683)
LEGO: check in for master to temporary branch.
Accept new baselines
Add tests
Accept new baselines
Remove more intersections with empty value domains from union types
LEGO: check in for master to temporary branch.
Properly check relationships for intersections with union constraints
Accepted baselines.
Make 'ImportMeta' more minimal.
Do not remove inferred project immediately and try to reuse it on next file open
Detach the removed typing files from the project
Helper for getting string comparer
Rearrange code such that project Root path of open file is always used in watching and removing the config file watches
Add warn that user can not use --strictPropertyInitialization without --strictNullChecks
Reorganize and remove duplication
Accept new baselines
Add regression test
Reinstate type simplification for 'keyof T[K]' as target in relation
goToDefinition: Also add definitions for symbol if it does not match the signature symbol (#23657)
LEGO: check in for master to temporary branch.
Improve error message for unused type (#23633)
Support import fix even when the error is that a type is used as a value (#23655)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Accept new baselines
Add tests
Accept new baselines
Transform 'keyof (A | B)' to 'keyof A & keyof B'
Suggestion to convert to ES6 module should only trigger in projects which express some intent to use ES6 (#23576)
`module.exports = Entity` is an alias, just like `export = Entity` (#23570)
LEGO: check in for master to temporary branch.
Make symbol display at ExportSpecifier use 'export', not 'import' (#23629)
Allow getting import completion details with misspelled name (#23624)
getEditsForFileRename: Update tsconfig "files" (#23625)
Deduplicate declarations in combined type/value symbols (#23593)
Accept new baselines
Address CR feedback
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
accept baseline
Added deferred project context test, marked JsFileExtension as deprecated
LEGO: check in for master to temporary branch.
Skip arrow functions in checkAndReportErrorForMissingPrefix (#23584)
Add 'renameFile' command to services (#23573)
Add 'triggerCharacter' option for completions requests (#23491)
Accept new baselines
Properties with numeric names have numeric literal types in keyof T
Use getFirstConstructorWithBody in one more place, and simplify other class members iteration (#23567)
Support getting JSDoc comment starting at a FunctionType node (#23546)
LEGO: check in for master to temporary branch.
resolveEntityName: don't return false (#23563)
avoid generated helpers in baseline
binder: don't inline generator function's control flow
LEGO: check in for master to temporary branch.
Trailing whitespace, oh no!
Simplified to one output line
Used return value from clearScreenIfNotWatchingForFiles
LEGO: check in for master to temporary branch.
More cleanup and reorganization
In JS, class supports `@template` tag for declaring type parameters (#23511)
Make code fix to add 'this.' work for statics (#23527)
quickInfo: Get JSDoc tags from aliased symbol (#23526)
Accepted baselines.
Avoid duplicate code when checking for tagged templates.
Added test in case 'super' is ever possibly parsed as a tagged template string.
LEGO: check in for master to temporary branch.
Revert change to PromiseConstructor in #22772
Cleanup and reorganize fakes
Accepted baselines.
Added test for ASI concerns.
Visit typedef type expressions so they contribute to referenced-ness (#23525)
LEGO: check in for master to temporary branch.
allow string concat in enum member declaration
Standardized for --preserveWatchOutput too
Visit EOF to collect jsdoc import types (#23521)
Trim unused functionality
Update test
Revise IndexType to have stringsOnly property
Misc. improvements to addImplementationReferences (#23507)
findAllReferences: Reduce node.getSourceFile() calls (#23524)
Add typeof-for-switch
Revert "Improve PromiseConstructor"
Addressed PR comments
Simplify getParentSymbolsOfPropertyAccess (#23513)
Improve performance of duplicate check (#23516)
Accepted baselines.
Address CR feedback.
Use indexOf and substr to exclude node_modules and bowerComponents instead of using loop
Cache canonical global cache's package.json path
Renames as per PR feedback
Accept new baselines
For 'T extends { [x: string]: XXX }' constraint of T[keyof T] is XXX
MissingDeclaration is only ever a Statement (#23485)
LEGO: check in for master to temporary branch.
Improve PromiseConstructor
Propagage reportsUnnecessary in convertToDiagnosticsWithLinePosition
Trim unused functionality
Revert the change of PromiseLikeConstructor
Reorganize project structure.
flags--;
Accept new baselines
Don't widen unique symbol types during type inference
Add axios' source to user tests (#23490)
Find-all-references: Don't crash on 'typeof import' (#23448)
Use watch recursive directories instead of watchFile for node_modules and bower components
Use ts-check instead of ts-node to avoid transpilation overhead on gulp startup (#23486)
Update to respond to PR feedback
Accepted baselines.
Avoid breaking change by introducing overloads for 'createTaggedTemplate'/'updateTaggedTemplate'.
Symbol kind for a method on a mapped type should still be 'method' (#23478)
Update configurePrerelease to not utilize ts internals (#23476)
Add '?' in quick info for optional properties/methods (#23480)
Rename `pushTypePart` to `pushSymbolKind` (#23481)
goToDefinition: Remove isSignatureDeclaration, use isFunctionLike (#23475)
goToDefinition: Reduce duplicate code around createDefinitionInfo (#23473)
Add create-react-app and puppeteer user tests (#23471)
Remove unnecessary allocation
Treat expectedRanges as readonly
Only normalize for purposes of assert
convertFunctionToEs6Class: Copy comment from variable declaration (#23445)
Helps to check in the test changes, too
Adjusted newlines in non-pretty output for consistency
findAllReferences: Mark *every* search symbol as seen, not just search.symbol (#23451)
LEGO: check in for master to temporary branch.
Combined the "Found X error(s)" and "Compilation" complete --watch messages
LEGO: check in for master to temporary branch.
Shrink span for convert-to-es6-module suggestion (#23441)
Add test
Move normalization into services
Normalize paths to search for highlights
Delete "delete me" files (#23446)
LEGO: check in for master to temporary branch.
Convert gulp processDiagnostics builder to project compilation
Refactored getSupportedExtension to only copy array when necessary
convertToEs6Module: Avoid replacing entire function (#22507)
Remove condition
In outliningElementsCollector, treat 'else if' as having same depth as the 'if'
Simplify getConvertibleFieldAtPosition (#23315)
LEGO: check in for master to temporary branch.
Use getPossibleSymbolReferenceNodes in one more place (#23378)
Add members for numeric and symbol named properties in mapped types
Accepted baselines.
Allow parsing tagged templates with type arguments in new expressions.
Accepted baselines.
Added test for tagged templates in new expressions.
Accept new baselines
revert change
detect nested non-imports
fix up
undefined instead of null
store lastToken
Accepted baselines.
Perform checking and resolution of tagged template type arguments.
Accepted baselines.
Strip away type arguments from tagged templates when emitting.
Accepted baselines.
Added basic support for parsing/emitting type arguments in tagged template expressions.
Accepted baselines.
Added tests.
Accepted baselines
Automatically configure tsc output and provide a new 'diagnosticStyle' option.
Invoked should be property on watchers map instead of local variable since watchers arent closed if they need to be reopened
Invalidate the unresolved import resolutions when typing files are set This has 3 changes: 1. In updateGraph when enqueue the typing installation request (depending on unresolved imports) 2. When ActionSet event is received, invalidate only files with unresolved imports and resolve those. 3. When ActionInvalidate event is received, typing installer has detected some change in global typing cache location, so just enqueue a new typing installation request. This will repeat the cycle of setting correct typings and pickiing unresolved imports
Force new typings resolution only if there are more or less script infos in the project. This helps in reducing number of forced typing installation requests We anyways use changes in unresolved import array to determine if we need to enqueue new typing request Hence there is no need to soley rely on hasChanges from updateGraph which just indicates that we didnt reused the program (that does not mean new files were added to the program or changes in unresolved imports)
Remove the specialized type UnresolvedImportsMap which is just a redirection and helps only in test only
Typings cache is internal data structure
LEGO: check in for master to temporary branch.
use state
Update tsserverlibrary.d.ts after missed baseline
Re-add fixName to tsserverlibrary.d.ts
Switch webpack to submodule (#23372)
Remove reference emit from diagnostics
Remove ref comments from processDiagnosticMessages
Update diagnostic tasks in jakefile
Combine getTouchingWord and getTouchingPropertyName (#22127)
Simplify tryGetImportOrExportClauseCompletionSymbols (#22961)
Don't copy trivia when implementing an interface (#23343)
Handle command too long failure in typings installer
generateGetAccessorAndSetAccessor: Share modifier-creating code (#23311)
Exclude generated files from user tests (#23371)
Simplify registerCodeFIx (#23349)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fix: do not match MySymbol.import("mod")
You have to do this everywhere now!
Remove TODO: GH#18795 comments (#23337)
Don't include "/index" in import from @types even with classic resolution (#23347)
Improve user test tsconfig (#23325)
.d.ts changed order
Remove all reference comments from services
Add explicit file lists to server tsconfig files
Remove explicit harness file list from Jakefile
Explicitly list server source files in their current emitted order
Remove all reference comments from server/
Explicitly list compiler source files in their current emitted order
Remove all reference comments from compiler/
patternMatcher: Return single best match instead of list (#23166)
When testing references, also test documentHighlights respects filesToSearch (#23306)
Update outdated comments (#23320)
Allow exports assignments (#23319)
LEGO: check in for master to temporary branch.
Include guards on comment kind in pragma extraction (#23313)
Accept new baselines
Update test
String index signatures do not apply to symbols
Add support for destructuring well-known and late-bound names (#23297)
handle any'd method signature types (ie, from special property declarations) (#23316)
'modulekind' -> 'moduleKind'
Accepted baselines.
Added tests around ES5, assigning to 'import.meta' and properties, global augmentations.
Provide an error when using 'import.meta' without setting 'esnext'.
Added semicolon.
LEGO: check in for master to temporary branch.
In getWidenedTypeFromJSSpecialPropertyDeclarations, parent of PropertyAccessExpression must be a BinaryExpression (#22727)
patternMatcher: Just return 'undefined' for an invalid pattern (#23237)
Accepted baselines.
Basic checking for 'import.meta'.
Basic parsing/emitting support for 'import.meta'.
JSDoc:positional matching of destructured params (#23307)
Add 'disableSuggestions' to UserPreferences (#23283)
add refactor of convert private field to getter and setter (#22143)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Accepted baselines.
Added tests for 'import.meta'.
LEGO: check in for master to temporary branch.
Allow variable statements used as declaration sites to be marked visible (#22798)
Rename infoCheck to suggestionCheck (#23286)
Simplify handling of parameter properties in forEachRelatedSymbol (#23213)
Prioritize spelling fix over add-missing-member fix (#23268)
Support goto-definition for index signatures (#23220)
Accept new baselines
Update tests
Enable 'keyof T' for full string | number | symbol
Accept new baselines
Move 'PropertyKey' from es2015.core.d.ts to es5.d.ts
Add support for numbers and symbols in keyof (but keep it disabled)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
improve parser and error message if definite assignment assertions in object short hand
findAllReferences: forEachRelatedSymbol can always include shorthand destructuring (#23223)
IndexInfo#declaration is always an IndexSignatureDeclaration (#23232)
Update user tests with improved lib settings (#23238)
Do not watch script infos that are part of global typings location
Do not send project update in background if there was no ensureUpdate pending on the project structure
There is no need to ensure project structure when tryiong to get inferred project The project operations will validate if its valid anyways
Add time stamp into the ti log.
Reverted unintentional formatting changes
Update user test baselines (#23181)
Allow both module.exports= and module.exports property assignments (#23228)
Clean up code for nonrelative path completions (#23150)
Remove unnecessary test file (#23214)
found another place to fall through in the checker
Don't add import completion for re-export with different name (#23211)
Accept new baselines
Limit getLiteralTypeFromPropertyName to only return string-like types
removed always true condition
refactor: use union type in `DateConstructor`
Added deferred ScriptKind and renamed JsFileExtensionInfo to FileExtensionInfo
Move nameType to base Symbol, generate nameType properties where missing
Resolve json modules only when --resolveJsonModule is specified
LEGO: check in for master to temporary branch.
findAllReferences: Share code between populateSearchSymbolSet and getRelatedSymbol (#23028)
When --noUnusedLocals/--noUnusedParameters is disabled, add suggestions instead of errors (#22361)
findAllReferences: Be consistent how we handle unions in root symobls (#23002)
redundant code
LEGO: check in for master to temporary branch.
Allow extending any, with noImplicitAny errors (#23153)
isDefaultExport is always false here.
removed unused code
Move nameType from SymbolLinks to TransientSymbol
LEGO: check in for master to temporary branch.
Only include unique symbols when getting index types for access checks (#23145)
Introduce a --syntaxOnly server mode
Print js-constructor function type names (#23089)
Dont bind a local symbol for a default export without a name (#23152)
Port generated lib files
Report errors in JSX properties on the failing prop or the tag name (#23148)
Update LKG
Allow rest parameter trailing commas in ambient contexts (#23139)
Prototype assignments count as method-like (#23137)
Feedback: correct order in watch.ts; DRY tests
LEGO: check in for master to temporary branch.
patternMatcher: Use helper functions to simplify loops over strings (#23095)
completions: Properly handle preferences.includeCompletionsWithInsertText (#23092)
Add type predicate helper functions to Type (#23066)
No error referring to UMD symbol in CommonJS modules (#23129)
Allow multiple class base types; intersect them, as with interfaces (#23123)
Actuallt preserve nonblock for of statements in forofs with object rest (#23122)
SyntaxKind.ImportTypeNode -> SyntaxKind.ImportType (#23120)
Consider jscontainer aliases as referencible even if they have other local meanings (#23119)
Enable member completions for import types (#23085)
LEGO: check in for master to temporary branch.
Accept new baselines
Add regression test
Only look up identifiers that could actually be type parameters
Skip parens and non-null assertions when looking for this-context (#23097)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
matchTextChunk: combine a) and b) cases (#23083)
Support completions for members with symbol names (#23091)
Handle double quotes for every argument
Simplify matchTextChunk (#23081)
Path completions for import types (#23082)
Close over getLogPath
Use object destructuring instead of tuple
Work around bug with global completion with invalid identifier (#23086)
Consume extra parts of file path
Improve string literal completions from a signature (#23062)
Remove trailing whitespace
Unclosurefy patternMatcher (#23071)
Mark js-assignment functions' symbols as methods (#23078)
Remove unused properties from patternMatcher (#23076)
fix: `CompilerHost.getSourceFile` is being called for odd filenames besides the one being compiled
Simplify 'bestMatchKind' (#23073)
Update baselines for chained prototype assignments (#23075)
Ensure TSS_LOG handles paths with spaces
Don't offer import completions in non-module files unless "--module" is set (#22951)
Module or `import` types (#22592)
Port generated lib files
Include arrow functions as javascript initializers (#23068)
Improve binding and jsdoc of chained special js assignments (#23038)
Accept new baselines
Add regression test
Less aggressive test for type parameter references in conditional types
LEGO: check in for master to temporary branch.
textChanges: Don't crash when inserting type annotation on function with no parens (#23034)
Add 'getNameFromPropertyName' helper (#23036)
LEGO: check in for master to temporary branch.
Remove _this, _super, and _newTarget name conflict errors (#22890)
Add union check to improved error message (#23027)
Accept new baselines
Add tests
Call ensureModifiers on private property modifiers (#23026)
Constraint of 'T extends U ? T : F' should be 'T & U | F'
Combine getDocumentationComment implementations (#22722)
Simplify getPropertySymbolsFromBaseTypes (#23004)
Allow using Advanced_Options with --init. Exclude all possible Advanced_Options in tsconfig.json which were NOT defined in command line
Do not rely on ElementAttributeProperty if it is not present (#22936)
Elide type reference comments which are also imported (#22752)
update baselines
Mangle comment for sorcery (#23006)
Handful more usages of emitIfPresent on optional nodes (#22274)
Remove unused method (#23000)
Remove duplicate helper function (#23001)
Use isExternalModuleImportEquals in one more place (#22417)
add option for object literal indent
Propagate noDefaultLib comment into emitted declaration files (#23003)
Fall back to check expression if resolving an export assigned entity name fails (#22928)
Consider property accesses in heritage clauses as type-space references for calculating type reference directives (#22746)
Use 'map.get' instead of 'has' (#22998)
Emit amd-module and amd-dependency comments in emitter if printing declaration comments (#22740)
Propagate CheckFlags.Late through instantiateSymbol (#22749)
Copy comments from inferred types to generated nodes (#22730)
NodeBuilder only preserves parameter modifiers for constructors (#22706)
Error on rest parameter with trailing comma (#22262)
fixAddMissingMember: Remove special-casing for 'this' (#22987)
Handle ts-only declaration export aliases in system transformer (#22919)
Dont follow aliases when looking for default exported symbol (#22995)
Move JSX props support check and make syntactic (#22970)
Assert argument is provided to diagnostic (#22992)
Error on `for (const x in never)` (#22988)
Adding trailing newline to a baseline test file
Dont let an import that doesnt need helpers override one that does (#22966)
Add regression tests documenting current behavior of #14121 (#22748)
Accept new baselines
Add regression test
Don't allow to iterate over 'never' (#22964)
`@typedef` supports nested `@property` names (#22967)
PR feedback
Remove unnecessary test (#22962)
Revert "Do not watch child directories of the sym link folders"
Update LKG
Accept new baselines
Add another test
Simplify createChildren (#22270)
Use getAllSuperTypeNodes in more places (#22718)
Port generated lib files
Accept new baselines
Add regression test
Erase 'infer T' locations in conditional type constraints
fix accessor parse with line terminator (#22893)
isMethodLike recognises prototype-assignment methods (#22935)
Inline isParameterOfConstructorDeclaration (#22838)
completions: isNewIdentifierLocation = false for string literal where all legal values are known (#22933)
Add 'isParameterPropertyModifier' helper (#22841)
findAllReferences: Consistently use getTextSpan (#22847)
Add regression test for GH #21871 (#22733)
findAllReferences: Respect search file set searching for references to an exported symbol (#22657)
Support completion details for string literal completions (#22664)
refactorConvertToEs6Module: Preserve quote style of imports (#22929)
Reuse getBinaryOperatorPrecedence (#22844)
Anything after Debug.failBadSyntaxKind is dead code (#22922)
Transform setter bodies if they contain es2015 (#22931)
Always test replacementSpan, and don't provide if it would just be an identifier (#22918)
Debug.failBadSyntaxKind should always be defined and return 'never' (#22091)
Test for isNewIdentifierLocation, and make true for type with index signature (#22910)
completions: Use keywordForNode helper instead of .getText() (#22751)
Handle toplevel this-assignment (#22913)
textChanges: Add insertCommentBeforeLine method (#22902)
textChanges: Use InsertNodeOptions instead of ChangeNodeOptions where possible (#22903)
textChanges: Use replaceRange in more places (#22904)
replaceNode: Always use non-adjusted end (#22519)
 Make T[never] = never instead of erroring or being any (#22787)
fix type lookup rule
pass in sourceFile and revert child to `TextRangeOfKind`
fix test
more tests
Tighten heuristic for definite dts moduleness to check for syntactic default (#22814)
textChanges: Clean up *Options interfaces (#22813)
In JS, this assignments in constructors are preferred and nullable initializers become any (#22882)
Remove unnecessary 'forEachEntry' call (#22653)
Declaration maps and transparent goto definition using them (#22658)
Remove unused function (#22848)
Accept new baselines
Change test to use type variables
Change to more conservative conditional type relationship
Accept new baselines
Add tests
Add tests
Add missing type relationship for conditional types
Update authors for release-2.8
Accept new baselines
Add regression tests
Don't infer between tuple types with different arity
Handle completions in interface / type literal similar to class (#22701)
test synthesized object literal formatting
cSharp-style formatting for multi-line object literals
Run test in both module resolvers
Always include parent folder failed lookup locations
Make region outlining more sensitive to CRLF
Alternate but more general token comment emit fix + organizeImports fix (#22836)
Accept new baselines
Add regression test
Obtain constraint from destructured property when applicable
Refactor `tryGetGlobalSymbols` into list of things to try (#22704)
Simplify functions for adding parse errors (#22513)
Test suppression of diagnostic events
Add support for suppressing project events
Improve behaviour of `...` inside JSDoc functions (#22809)
Always make a new jsxAttributes type, dont reuse emptyObjectType (#22810)
Parse and check type arguments on JSX opening and self-closing tags (#22415)
Allow local class declarations to be returned as mixins (#22807)
Stop printing two spaces between heritage clauses (#22801)
Don't provide spelling suggestion for module (#22805)
Invalidate resolutions from typeRoots watch event as a fallback mechanism There are times when the directory watcher for failed lookup locations isnt invoked and is not very determinitstic So as a fallback, when we receive typeRoots watch event, handle failed lookup locations as well
Accepted baselines.
Update version to 2.9.
Improve assertion violation message (#22522)
Revert change to `canUseEvents` in `IoSessionOptions` (#22791)
Correctly track thisContainer for this-property-assignments in JS nested containers (#22779)
Combine getLastChild helpers (#22418)
convertFunctionToEs6Class: Combine `deletes` and `deletedNodes` (#22742)
convertFunctionToEs6Class: Copy comments from constructor to class (#22738)
Remove unnecessary exports (#22739)
Delete IoSessionOptions
In source files and blocks, bind function declarations before other statements (#22766)
Accept new baselines
Add regression test
Accept new baselines
Revise binder logic to correctly find 'infer T' containers
Revert strict containment check in checkInferType
Undo 'any' inference propagation (#22736)
Accept new baselines
Add regression test
Accept new baselines
Add test to verify errors on nested 'infer T' declarations
Properly generate 'infer T' declarations in typeToTypeNode
Accept new baselines
Add test
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Implicit constraints in non-distributive '[T] extends [U] ? X : Y' types
Support services settings (#22236)
Evaluate isPrototypePropertyAssignment lazily (#22728)
Js constructor function fixes (#22721)
Two JSdoc parsing fixes (#22705)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Combine keyof T inferences (#22525)
Accept new baselines
Add tests
Accept new baselines
Add constraints to indexed access types in conditional types
LEGO: check in for master to temporary branch.
Put simpler condition in front of more complex one (#22696)
Use isFunctionLike instead of switch (#22698)
Simplify isImplementation (#22660)
findAllRefs: give entry for union its own definition (#22694)
Remove type assertion in sum function (#22670)
Accept new baselines
Add regression test
Accept new baselines
Mark implied object destructuring patterns as object literal types
Parse JSDoc ...T and T= only at top-level JSDoc (#22661)
Clean up isNameOfExternalModuleImportOrDeclaration (#22659)
getAllJSDocTagsOfKind always returns a defined result (#22652)
Store import nodes in SourceFile.imports instead of StringLiteral nodes (#22495)
For import fix, for "foo/index" module, use "foo" as default export name, not "index" (#22651)
JSDoc `?Type` adds optionality to parameters (#22646)
Add 'isPrototypeAccess' helper (#22648)
Change es2015 transform to retain comments on for of loop bodies (#22396)
For `f.prototype.m = function() { this.x = 0; }` make `x` a member of `f`, not of the function expression (#22643)
Revert assertion addition (#22622)
Refactor declaration emitter into declaration transformer (#21930)
Better test to see when console clearing happens
Simplify some code in parseTestData (#22587)
Disable assertion for deferredUnusedIdentifierNodes (#22604)
Don't add external module completions in a pure commonjs file (#22583)
add spelling suggestion support for module
LEGO: check in for master to temporary branch.
Update user tests for new jsdoc fixes (#22582)
Signature#declaration can be undefined (#22515)
Simplify implementation of firstOrUndefined and lastOrUndefined (#22572)
Use type predicate for getFirstJSDocTag (#22573)
Improve unmatched jsdoc param error (#22577)
useNonAdjustedEndPosition when replacing import node (#22517)
Update circle config to build all branches
inferFromUsage: Handle being at an unexpected location (#22569)
No error on unmatchable `@param` tags (#22510)
Pass stack trace limit to parallel workers, and always convert to number (#22527)
LEGO: check in for master to temporary branch.
getJSDocParameterTags: Always return defined result (#22523)
Brackets and postfix= in `@param` add undefined (#22514)
Remove redundant call to `checkNodeDeferred` (#22516)
LEGO: check in for master to temporary branch.
Do not send first missing file event as well.
Simplify parseJsxChildren (#22511)
Do not use unguarded process in tsc.ts
Some Constructor's signature missing null type
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
fixUnusedIdentifier: Don't remove setter parameter (#22488)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Ensure our readonly emptyArray stays non modified.
Add js user tests (#22449)
Add submodule update step to circle (#22451)
accept baselines
Made watch mode always report summary
Port generated lib files
Enable the commented out test and convert folder entries to sorted list
Add comments and make some nit changes based on PR feedback
Disable test
update branch list
Reverted now-unused ProgramDiagnosticsAndEmit
Port generated lib files (#22437)
Port changes from #22172, provide a callback to fs.close (#22405)
Simplified error message counts; internalized reporting to createWatchCompilerHost
annotateWithTypeFromJSDoc: Do less special-casing for arrow functions (#22407)
FunctionLike = SignatureDeclaration (#22365)
Treat 'yield;' as 'yield undefined;' (#22297)
Factor out a getYieldedTypeOfYieldExpression helper (#22416)
Handle resolving and unknown symbols in getLiteralTypeFromPropertyName (#22406)
Call process.stdout._handle.setBlocking(true) (#22389)
Directly assign values for watchFile and watchDirectory in node System
annotateWithTypeFromJSDoc: Use changes.insertTypeAnnotation instead of replaceNode (#22404)
Import types in JS with `var x = require('./mod')` (#22161)
Improve error span:duplicate symbols cross-js/ts
Disallow JS/non-JS merge without crashing
Filter symbol property names out of index signature assignability checks (#22398)
Use getTextOfNode over getTextOfNodeFromSourceText(getSourceFileOfNode(node)) (#22387)
fixJSDocTypes: Use ChangeTracker (#22391)
Add 'isNamedDeclaration' helper to reduce casts (#22089)
Platform independent wildcard file include ordering (#22393)
Use single replacer for string escaping (#22335)
Accept user baseline changes
Address PR comments
When every import is unused, error on the entire import declaration (#22386)
Port generated lib files (#22381)
inferFromUsage: use ChangeTracker and typeToTypeNode (#22379)
Increase size of span for unused declaration (#22388)
Mark SymbolTracker as deprecated publicly (#22384)
Set circle timeout to 5 minutes (#22363)
Simplify suppressLeadingAndTrailingTrivia (#22356)
Add test for undefined action returned Test for #22343
isValidMethodAccess: Instantiate signature this type if necessary (#21722)
Convert annotateWithTypeFromJSDoc refactor to a codefix (#22336)
Apply 'no-unnecessary-initializer' lint rule (#22014)
Avoid cast by providing type predicate to isExternalModuleAugmentation (#22119)
Update symbol template test case with errors to include union types
Add test case for taggedTemplate with symbol param and number return
LEGO: check in for master to temporary branch.
update test for #20577 (#22310)
Remove TypeFacts.Discriminatable (#22346)
Use global NonNullable type for nonnull types (#22096)
For `<div a= >`, after `=`, do not try to parse an expression (#21373)
Make test timeout on travis huge (#22344)
Allow indexing generics with unique symbols (#22339)
Add inference priority for mapped type keys (#22246)
Convert use-default-import refactor to a codefix (#22334)
Update .npmignore (#22318)
Accept new baselines
Add tests
Properly check inferred constraints for 'infer X' type variables
Accept new baselines
Add regression test
Accept new baselines
Defer distributive conditional type when check type is generic
Remove parens from single parameter arrow functions
Much better comment preservation (#22141)
Change esnext.promise to es2018.promise (#22292)
Add tests when declaration emit for indirect alias usuage results in wrong error reporting Test for #22257
Make convertFunctionToEs6Class a codefix (#22241)
Update baselines for user tests (#22276)
Prefer 'return Debug.fail()' over 'throw Debug.fail()' (#22092)
add spelling suggestion support for module import (#22283)
Don't rename static 'this' when renaming class (#22235)
Reduce duplicate code for TextChange overlaps (#22278)
Accept new baselines
Add tests
Accept new baselines
Transform 'keyof (A & B)' to 'keyof A | keyof B'
Parenthesize computed names if not an assignment expression (#22280)
Debug assert on parent rebind, mitigate circularity in symbol access checking (#22282)
Don't propagate 'never' types in type inference
LEGO: check in for master to temporary branch.
Convert 'installTypesForPackge' refactor to a suggestion (#22267)
Apply 'no-unnecessary-qualifier' lint rule (#22009)
PropertyAssignment#initializer should be non-optional (#22209)
isControlFlowEndingStatement: don't try to enumerate all possible parent kinds (#22131)
Remove unnecessary length check in  `getSyntacticDocumentHighlights` (#22064)
support groups property (#22176)
findAllReferences: Make definition info independent of search location (#21748)
Added --preserveWatchOutput flag (#21303)
LEGO: check in for master to temporary branch.
mergeMapLikes: Improve type (#22237)
Simplify diagnostics fourslash tests (#22245)
update baselines
factory: replace Array parameters with ReadonlyArray
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Added an errors summary for --pretty --watch results
Check for symbol types in template expressions
Format unique symmbol string output with `unique symbol` and not `typeof` within checker (#22247)
Filter outer type parameters (similar to anonymous types)
Set syntheticLiteralTypeOrigin on synthetic `undefined`-type members (#22216)
Lookup JSX namespace within factory function (#22207)
Emit unqiue symbols with typeof if possible before issuing an error (#21403)
Stop binding type predicate types twice (#22210)
LEGO: check in for master to temporary branch.
Accept new baselines
Consistently propagate 'any' and 'never' types in type inference
Add 'info' diagnostics (#22204)
LEGO: check in for master to temporary branch.
Accept new baselines
Update tests
Distributive conditional type applied to 'never' produces 'never'
Added more tests for #22180
Infer parameter names and types when applying Delcare Method codefix (#22180)
Add semicolons to import helpers (#22212)
Accept baseline changes
Update test
Accept API baseline changes
LEGO: check in for master to temporary branch.
Propagate 'never' and the wildcard type in type inference
Remove assert for undeclared js-nested-exports
Simplify TextChanges#getChanges (#22157)
Support js nested namespace decls on exports
Add support for transpiling per-file jsx pragmas (#21218)
fourslash diagnostics tests: use objects instead of strings (#22193)
Accept new baselines
Update tests
Use '{}' instead of 'never' for no candidates in conditional inference
Ensure our readonly emptyArray stays non modified.
Accept API baseline changes
Disallow recursion
Increase rwc js verification timeout (#22191)
Remove excess comment ranges from initialized and property parameter emit (#22152)
Make some internal types @internal (#22190)
Improve error message for untyped import of scoped package (#22189)
Verify the output file paths for the json module emit
Report errors about correctness of the json file
error if import empty object form module not existed
Resolve the .json file only if module name contains the extension
Parse all json values at root
Need allowJs to be true to use the json module resolution
More tests and also do not add index signature for json module
Bind and resolve the module for json file
Replace usage of jsonObject on JsonSourceFile
Resolve Json file when module resolution strategy is node
Add test for scenario when script info being operated is pending on reload but has svc for the previous version Test for #20806
Update chrome-devtools baseline
LEGO: check in for master to temporary branch.
add support of codefix for Strict Class Initialization (#21528)
fix --pretty output when context is multi-line
Update category for TS4090 to Error
Organize imports within ambient module declarations
Factor worker method out of ts.OrganizeImports.organizeImports
Tidy isAmbientModule
organizeImports: Avoid using full FindAllReferences (#22102)
Use refcounts on the resolution so we arent going through failed lookup locations when resolutions are cached.
Allow characters in JsxText inside JsxFragment that would not normally scan
isDeclarationName: support ComputedPropertyName (#22123)
Simplify findContainingList (#22128)
Minor cleanup in getRenameInfoForNode (#22130)
Use the module cache to resolve non relative module name as well
Add tests for module resolution order and reuse
Simplify uses of getPossibleSymbolReferencePositions (#22099)
Simplify isJumpStatementTarget and isLabelOfLabeledStatement users using type predicates (#22100)
Mark getOccurrences as deprecated in protocol.ts like it is in services/types.ts (#22067)
Code cleanup
Incremental prototype+prototype assignment work
Trace should write messages to the logger
First draft of prototype assignment
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Separate isGlobalCompletion from CompletionKind (#22074)
Just map type variables to constraints at certain positions for narrowing so that we do not map primitives (#21384)
Make getTextOfIdentifierOrLiteral and getEscapedTextOfIdentifierOrLiteral only accept Identifier | StringLiteralLike | NumericLiteral (#22002)
Close the file watcher if present for the source file
Add test case when the deleted file's watch is not closed
fixClassDoesnotImplementInheritedAbstractMember: Don't perform fix for same class twice (#22073)
getSemanticDocumentHighlights: Use `toMultiMap` helper (#22059)
Update LKG (#22085)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Set up structure of prototype assignments
Cleanup new code in binder
Use 'append' in chunkObjectLiteralElements (#22068)
Filter FAR results to initial SourceFile
Support nested prototype declarations
Remove unneeded circleci branch in CircleCi config. (#22017)
Implement ts.OrganizeImports.removeUnusedImports
Better error message for excessive instantiation depth
Update user tests (#22056)
LEGO: check in for master to temporary branch.
Remove assert hit by chrome devtools+update baselines
replace element access if suggession is not a valid identifier
LEGO: check in for master to temporary branch.
Propagate wildcard type in union types
Accepted baselines.
Apply 'no-unnecessary-type-assertion' lint rule (#22005)
Add comment to isGlobalCompletion (#21973)
Supports more locations for completions contextual types (#21946)
Have Symbol#isReferenced check the SymbolFlags of the reference (#21996)
add template to jsdoc completion (#21978)
Port generated lib files (#22003)
Remove redundant null check
Use correct lowercase name
Make FAR handle non-existent imported symbols
typingsInstaller:Remove triple-slash references (#21982)
Group imports before sorting and coalescing
Address PR feedback
Separate OrganizeImports into its own namespace and file
Introduce an organizeImports command
getTextOfPropertyName: Assert input value is a PropertyName (#21981)
Document 'ExportAssignment' slightly.
Simplify getBraceMatchingAtPosition (#21979)
Accept new baselines
Support recursive conditional types
textChanges: Clean up handling of newLineCharacter (#21970)
textChanges: Simplify getChanges (#21971)
Simplify getOccurrencesAtPosition (#21977)
Simplify bindPropertyAssignment inner loop
Move skipParentheses to utilities
Add symbols for just-added test
Further cleanup
Cleanup in binder: rename and move
Handle non-preserved const enums in debug messages (#21945)
Naming and duplication cleanup
Clean up js decl code in checker+utilities
Add isStringLiteralLike helper (#21953)
Support @param tag on property declaration initializer (#21907)
Accept new baselines
Add regression tests
Instantiation of 'keyof T' for wildcard type produces wildcard type
fix typo in intellisense (#21914)
Clean up bindPropertyAssignment
Restrict declaration initializers too
Refactor binder and update baselines.
Support getting string literal completions based on a type argument constraint (#21168)
Correctly merge JS decls
Accept new baselines
Add tests
Add Required<T> to lib.d.ts
Accept baseline changes
Allow +/- to prefix 'readonly' and '?' modifiers in mapped types
Clean up findPrecedingToken and avoid returning whitespace-only jsx text token (#21903)
Changed "Duplicate Identifier" to "enum cannot be merged..." (#18579)
Repro scenario for finding no project of #20629
Refactoring project updates in openFile
Revert BOM emit change
Give MethodDeclaration and MethodSignature parent types (#21892)
Port generated lib files (#21889)
documentHighlights: Handle some invalid modifier locations (#21893)
Multiple telemetry debug assert failure fixes (#21886)
Accept new baselines
Add regression test
Wildcard instantiation of indexed access should be wildcard
add beautifier rule for space after close paren and destructure bracket (#21859)
PR template typo: labeled / labelled (#21854)
Add type infer formatting (#21850)
LEGO: check in for master to temporary branch.
Harden Extract Symbol against symbols without declarations
Handle class declarations without names in Extract Symbol
Handle variable declaration without initializer in Convert to ES6 Module
Call replaceNode rather than replaceRange
Update tests and baselines
Eliminate ChangeMultipleNodesOptions in favor of smart separators
Allow window. prefix in default-assignment JS decl
Handle empty declaration list in Convert to ES6 Module (#21843)
Accept new baselines
Update tests
Add Exclude, Extract, NonNullable, ReturnType, and InstanceType types
Add assertions for bad symbol declaration (#21837)
findAllReferences: Don't fail on broken re-export (#21841)
Accept new baselines
Add tests
Add higher order structural identity relations
Return baselines to original state
Support function/class in JS nested decls
Handle case where package.json and package-lock.json don't agree
Assert getExportEqualsLocalSymbol returns  a defined result (#21831)
Accept new baselines
Add tests
Properly detect identical conditional types in caching logic
4-nested object-literal assignment works in JS
Introduce *WithNodes paralleling textChanges.Replace*
Eliminate replaceWithSingle in favor of replaceRange
Change the meaning of useNonAdjustedStartPosition
Recursive object-literal-assignment declarations
In getSymbolAtLocation, return undefined instead of unknownSymbol (#21774)
Simplify TextSpan creation (#21306)
Add Scheduled Workflows/Cron.
Print deferred mapped symbols 1 level deep (#21311)
refactor: use union type in `DateConstructor` (#21757)
Refactor JS static property assignment binding
completions: Add assertions that symbols are defined (#21764)
Don't use `export function` for a function whose name differs from its exported name (#21739)
hasSameKeys: Simplify and optimize for identical maps (#21763)
Add `-dev` to version patch number in master (#21741)
Move insertSorted from server to core, use for diagnostic collections (#21401)
getSpecialPropertyAssignmentKind uses type guards
Update baselines
Improve contextual type skip in checkObjectLiteral
Try out CircleCI.
LEGO: check in for master to temporary branch.
Test:`o.x = o.x || {}` assignments in JS
Accept new baselines
Add regression test
Support `o.x = o.x || {}` assignments in JS
Don't check modifier legality, highlight anyway (#21335)
Avoid the class declaration not found assert when the new expression doesnt contain construct signature
Updated baseline
Simplify use of FindAllReferences in inferFromUsage (#20551)
Add test case when new expression target is not Class declaration
Removed internal on private property
fix: `matchedText` module resolution incorrect length (#21647)
Accept new baselines
Add regression tests
Use typeMaybeAssignableTo in definitely false check
Test:basic `var x = x || {}` support in JS
Support `var x = x || {}` declarations in JS
isValidPropertyAccessWithType: Simplify loop (#21725)
Get new line before writing log to log correct output
LEGO: check in for master to temporary branch.
Accept new baselines
Add test
Discard constraint inferences of the type parameter itself
LEGO: check in for master to temporary branch.
Accept new baselines
Add tests
Instantiate inferred type parameter constraints
Added backward compatibility and PR comments
Missing files are versions are stored as number
Accept baseline changes from code refactoring
Infer constraints for 'infer T' declarations nested in type references
Accept new baselines
Add regression test
Simplify string literal completions (#21415)
Handle all instantiable non-primitive types in homomorphic mapped types
Support incomplete identifier in JSX initializer completions (#21681)
Remove leading directory separator from path mapping completion (#21688)
Add top-level completion for path mapping (#21686)
Add test case for file change happening as part of file create and delete
fixInvalidImportSyntax: Preserve comment (#21684)
Escape quotes in bracketed completions (#21676)
remove GeneratorFunction global from lib.d.ts (#21615)
LEGO: check in for master to temporary branch.
Revert changes to unit tests
Revert changes to unit tests
LEGO: check in for master to temporary branch.
Refactored exceededTotalSizeLimitForNonTsFiles to return the last filename analyzed if the service language is going to be disabled
We fixed formik :D (#21660)
LEGO: check in for master to temporary branch.
Make the PollingInterval, PollingChunkSize, PollingUnchangedThresholds customisable
Rename switch `--emitDeclarationsOnly` to `--emitDeclarationOnly` (#21651)
EntityNameExpression doesn't need to include ParenthesizedExpression (#21588)
Support testing document highlights with "filesToSearch" (#21640)
Accept new baselines
Add regression test
Automatic semicolon insertion before 'extends' in conditional type
class Project: implement `log` and `error` from `LanguageServiceHost` (#21635)
Detect and prevent creation of bad Identifier (#21581)
Use helper functions more in documentHighlights (#21336)
Accept new baselines
Add tests
Use more permissive wildcard type in definitely false check
Accept new baselines
Add regression test
Properly classify output text in emitter
Accept new baselines
Add tests
Resolve to type in true branch for 'never extends never'
Only apply global augmentations before globals are available (#21563)
Accept new user test baselines (#21576)
Array.concat now takes ConcatArray, not ReadonlyArray (#21462)
Collect import helper needs during module info gathering (#21567)
Support exclamationToken in updateProperty and createProperty (#21577)
Assert `exportingModuleSymbol` is defined (#21340)
Leverage existing function for choosing spread validity (#21564)
Initialize more common properties in Symbol constructor
Optimize creation of union and intersection types
Enable CFA on this keyword unconditionally (#21490)
Create import helpers for named imports if they contain default imports (#21550)
Emit the symbol information for declaration names (could be string literals and more)
Add formik to the user suite (#21381)
Rework how default vs local name selection is done to be more correct (#21526)
Allow boolean literals to be generated from contextual types again (#21503)
Log more info about compilation
Improve debug failure for failed node cast (#21539)
Do not clear console in watch mode if --diagnostics or --extendedDiagnostics is specified
Don't treat class name contextToken as a completion list blocker if it is not the previousToken (#21534)
Removing the test added for cancellation during affected list since thats not possible anymore as the affected files would anyways be semantically checked This is just part missed during revert of 0b79f4a
Update new tests from master
Add FAR test
Accept new baselines
Add more error case checks
Accept new baselines
Always use strict rules for contravariant inferences
LEGO: check in for master to temporary branch.
Minor fixes
Added Ace and PDFKit to typesMap
Addressed PR comments
LEGO: check in for master to temporary branch.
Avoid crashing when a source file is attempted to merge with another declaration (#21494)
Do no path canonicalization during config parsing (#20311)
Handle trivia in code fix forgotten-this
Clean up build steps
Migrate core.ts
Use the full local file path as the id for a submodule (#21471)
Improved datatables regex
Improved datatables regex
Added datatables library to safelist
LEGO: check in for master to temporary branch.
Accept new baselines
Add tests
Update to use TypeFlags.Instantiable in instantiateSymbol
LEGO: check in for master to temporary branch.
Update authors
fixes tslint warning (#21469)
Add definitelyAssignableRelation
Log more info about platform for further diagnosis
PR Feedback
LEGO: check in for master to temporary branch.
Disable node6 build
Disable node6 build
Skip unnecessary type and symbol instantiations
Cache 'any' instantiations for faster conditional type resolution
Check for definitely false condition first
Move bug URLs into assert messages
Infer intersection types for multiple contravariant candidates
Add asserts upstream from #20809
Properly handle inferred type parameters in declaration emitter
Move createTextChange to services/utilities.ts (#21416)
Unused type parameters should be checked by --noUnusedParameters, not (#21167)
Implement fallback hashing algorithm when crypto module is not available (#19941)
--emitDeclarationsOnly flag to enable declarations only output (#20735)
Updated tests
Added NoEmit=true when jsconfig is present
When applying `// @ts-ignore` fix as a group, apply to a line only once. (#21413)
Check 'infer' declarations are in extends clause of conditional type
Change precedence of 'infer T' to match 'keyof T'
Accept new baselines
Remove pointless fourslash tests
Implement type inference in conditional types
Rename parseConfigFile to getParsedCommandLineOfConfigFile
Add watchFile option to use fsEvents on parent directory
At `<div x=/**/`, completion insertText should be wrapped in braces (#21372)
Improve assertion in computePositionOfLineAndCharacter (#21361)
LEGO: check in for master to temporary branch.
Test for (and fix) order of import fixes (#21398)
In fourslash.ts, remove unused exports and use '{}' instead of 'any' (#21377)
Handle missing ts versions in registry
Only conditional types that check naked type parameter distribute over unions
Remove incorrect assert
Add flag to skip qualification check when symbol is already in the process of being qualified (#21337)
Update version (#21319)
Make error span for wrong type arguments be just `<...>`,d not `f<...>(...)` (#21390)
Update build script
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Check syntax kind in isDeclarationNameOrImportPropertyName
LEGO: check in for master to temporary branch.
Handle extraction ranges including case clause expressions
Handle extracting case clause expression as constant
Add KeywordCompletionFilters.TypeKeywords (#21364)
Update build script
LEGO: check in for master to temporary branch.
In getSpecialPropertyExport, add debug failure when symbol parent is not a module (#21347)
LEGO: check in for master to temporary branch.
Add semicolon to unused class member list
Shared code path for getConditionalType and instantiateConditionalType
Remove unnecessary caching of substitution types
Cache substitution types and remove erasure that was too eager
Revise comments
Accept new baselines
Add tests
More consistent POSIX-like virtual file system.
add completion filter for function like body (#21257)
Make regexes instantiate only once
Add T is related to { [P in xxx]: T[P] } type relationship
Move assertion to realpath evaluation
Allow for undefined return from TypeCheckerHost.getSourceFile to correspond with implementation
Handle failure to properly resolve type reference directives
Make nonnull assertions and binding patterns apparent declared type locations (#20995)
For `{ type: "a" } | { type: "b" }`, find references for the union property (#21298)
configureNightly -> configurePrerelease
Create a 'configure-insiders' and 'publish-insiders' task.
Add createProgram on WatchCompilerHost
Disallow conditional type following 'extends'
Lint:document parameter name
Respond to CR
in goToDefinition, use array helpers and clean up code (#21304)
Support testing definition range of a reference gruop (#21302)
Handle `undefined` input to firstDefined (#21300)
Avoid spreading array (#21291)
LEGO: check in for master to temporary branch.
Accept new baselines
Add regression test
Properly handle contravariant inferences in inferReverseMappedType
Remove unused properties from interface Refactor (#21286)
LEGO: check in for master to temporary branch.
Test:Nested excess property checking w/discriminated unions
Nested excess property checks:discriminated unions
Separate code path for conditional type instantiation
Fold newline logic into getNewLineOrDefaultFromHost
External test runner updates (#21276)
Report more detailed info during script debug failure
Check if the file added is emitted file after validating extensions May fix #21274
Add grammar error for `const { ...a: b } = {};` (#21267)
fix #21252, add package-lock.json to npmignore (#21260)
Support parsing `@template {T}` in addition to `@template T` (#21270)
Add a TriviaKind type to allow more specific types (#21237)
computeIndentation: Simplify control flow (#21239)
Move getCurrentDirectory to builder program
LEGO: check in for master to temporary branch.
Infer:string literal->keyof creates any props not {}
LEGO: check in for master to temporary branch.
Expose createWatchCompilerHost as overload
Do not expose createWatchOfConfigFile and createWatchOfFilesAndCompilerOptions
Make SymbolContext a subtype of TextChangesContext
In formatter, get lineAction directly from applyRuleEdits (#21245)
Ensure getNewLineFromContext never returns undefined
Clean up TODOs for #18445
Update issue_template.md
Actually get the apparent type of intersection members when calculating intersection apparent types (#21133)
Update test baselines
Update issue_template.md
Stop explicitly storing newline in refactoring/code fix contexts
Add explanatory comment
Simplify test cases
Add more test coverage for unusedParameterInLambda
Special case arrow functions with only parameter unused
Minor cleanup in getDynamicIndentation (#21240)
Use packageId for suggestion to install `@types/packageName` (#21241)
Test assignability of indexed access types
Indexed access relation check object+index types
Update issue_template.md
Add watchDirectory to be using dynamic polling
Test case for watching using fs.watch recursively
Improve test to verify the count of callbacks for the watched directories through watchFile
Add tests for  #19989, #20023
Add support to test when watching directories through watchFile
Allow recursive directory watching on non supported file system
Add option to watch using fs.watch instead of watching through polling
Move the polling settings to sys instead of watch utilities
Add test to verify timeout queues
Watch based on dynamic polling priority frequency queue
Update watchFile to take priority (which is currently polling interval being passed to the host)
Create polling interval as non optional parameter
Simplify check output errors
Rename and restructure non polling watch file
Use toLowercase as utility function
Rearrange the code to have functions after executing code
Simplify and correct the fsWatchFile callback handling with the stats invoked
Make issue template more enthusiastic
Combine `repeatString` helper functions (#21235)
Add completions from the 'this' type (#21231)
Add example to command description
update authors
PR Feedback
Log packageId in --traceResolution (#21233)
Namespaces do not have the same 'var' scope
Add test for catch block without variable
Support labeled statement
Get packageId for relative import within a package (#21130)
Accept tsserverlibrary.d.ts and fix gulpfile
Add test for file path in tsconfig
Remove the colon from the message in tsconfig.json (#21174)
getStringLiteralCompletionEntries: switch on parent.type (#21169)
Update authors for release 2.7
Remove duplicate implementations
Revert path normalization in favor of checking for backslash
Optimize the sameMap function
Erase substitution types in type references and type alias instantiations
Allow functions to be printed structurally in declaration emit even when they have symbols (#21203)
Add overloads for forEach{Leading,Trailing}CommentRange (#21190)
Add test
Normalize triple slash reference paths at resolve time
Accept corrected baseline (#21201)
Fully deprecate the symbol display builder, reimplement in terms of node builder (#18860)
fix: formatting for chaining methods (#21027)
Properly handle 'any' and 'never' as conditional check type
Accept new baselines
Introduce substitution types to use for constrained type parameters
Accept new baselines
Remove 'T extends U' type constructor
Revert to extends check being part of conditional type
LEGO: check in for master to temporary branch.
Eagerly evaluate S extends T when S is definitely or definitely not assignable to T
LEGO: check in for master to temporary branch.
Enable substitution for object literal shorthand property assignments in the system transform (#21106)
Skip outer expressions when checking for super keyword in binder (#20164)
Rename through all projects with the same file symLink
Group intersection code in getSimplifiedIndexedAccessType
Use filter instead of unnecessary laziness
Remove mapped types to never from intersections
Handle jsconfig.json in fourslash tests (#16484)
Add a `getFullText()` helper method to `IScriptSnapshot` (#21155)
Add test case for symLink and rename
Accept new baselines
Add regression tests
Test Diff and Omit
Keep string index from intersections in base constraint of index type
Accept new baselines
Use contra-variant inferences when co-variant inferences yield 'never'
LEGO: check in for master to temporary branch.
Move createTypesRegistry so more accessible
Revert unnecessary harness changes
Remove timestamp checking and move registry check into jstyping
Update installed types if older than those listed in the registry
Update representation of timestamp file to prevent some extra install calls
Use existing map to hold representations of timestamp files
Allow for local timestamp files and style fixes
Respond to CR
Add test for timestamps write
Add tests
Refactor to avoid errors
Ensure proper JSON writing behavior of timestamps
[WIP] enable updating ATA files
Do not trigger the failed lookup location invalidation for creation of program emit files Handles #20934
Add test where emit of the file results in invalidating resolution and hence invoking recompile
Parse comment on @property tag and use as documentation comment (#21119)
Update baselines
push/popTypeResolution for circular base constraints
LEGO: check in for master to temporary branch.
Test:incorrect mapped type doesn't infinitely recur
getConstraintOfTypeParameter:check circularity in base constraint
Rename getPackageNameFromAtTypesDirectoryWithoutPrefix to getUnmangledNameForScopedPackage
Add regression test for de-dup'ing.
Refine explanatory comment
Rename simplifyIndexedAccessType->getSimplifiedIndexedAccessType
Handle indexed mapped types in transformIndexedAccessType
Add comment explaining test-only workaround
Add regression test
AsteriskToken should always have length 1 (#21126)
Ensure checkParameterInitializer always gets called
Add review suggestions
Print the correct type in the top level chain as the message indicates (#21127)
Use 'append' helper more (#21125)
Use 'append' helper (#21101)
Update initializerType when checking RHS of empty object destructure
Enforce strictNullChecks for RHS of empty destructuring assignment
Do not always instantiate jsx signatures (#21108)
add fixAwaitInSyncFunction code fix (#21069)
Issue implicit any errors for mapped types without annotations (#21104)
De-dup typing module completions
Unmangle package names from typings during completion
When sending typings request use project's current directory as project root path This ensures that we arent picking typings from folder different from the current directory for the project
Add test for failure to use correct current directory in inferred project Test for #21040
Tidy up code to make it harder to call incorrectly
Add refactoring to convert CommonJS module to ES6 module (#19916)
Include directories in completions for path mapping (#21103)
Clear jsDocCache for reused nodes (#21099)
For import fix, support path mapping value that begins in "./" or ends in ".ts" (#21035)
Offer per-member diagnostics for incorrectly implemented inherited members (#21036)
Delete redundant test (#21085)
Don't count self-reference in more cases (skip more nodes when setting lastNonBlockLocation) (#21095)
allow const enum in type query (#21083)
Support completions that require changing from dot to bracket access (#20547)
Ensure visitor visits the awaitModifier of a ForOfStatement (#21078)
Mark references to dynamically-named properties as used (#21010)
Synthesize namespace records for proper esm interop (#19675)
Add noDoubleSpaceRule to jakefile (#21077)
Add stricter parameter types for Object.values and Object.entries (#20553)
Update failing test
feat(es2018): add definitions for Array.prototype.flatten and Array.prototype.flatMap (#20431)
Port generated lib files (#21076)
Use substring instead of substr (#20578)
If declaration emit input is a module, output should be a module (#20626)
Use getInternalName not getLocalName (#20168)
Optimized annotation according to Spec (#19906)
Add Related section (#20151)
add support for insertSpaceBeforeTypeAnnotation (#20466)
imporve conditional operator if  missing colon token (#20498)
ignore Initial check if left of DestructuringAsignment (#20906)
fix narrowType check with template literals (#21024)
type-operator-spacing: Just check for presence of space, not double-space (#20817)
Move isObjectLiteralElement to public utilities (#20605)
Support all path mappings that end in "*" in completions (#21072)
Support timeouts in the parallel runner (#20631)
Use emptyObjectType for omitted members instead of unknownType (#20940)
Add helper functions to simplify getCompletionEntryDisplayNameForSymbol (#20552)
Have Set and Map constructors take ReadonlyArrays (#20606)
Support find-all-references starting from a `reference path` or `reference types` comment (#21007)
Remove unncessary existence check (#21029)
Remove 'indexOf' helper, use 'arr.indexOf()' (#20194)
Improve parse error for double comma somewhere inside a call expression (#20399)
Remove mutually-recursive functions (#20425)
Port generated lib files (#21071)
Start linting for double spaces (#20820)
Update CONTRIBUTING.md
LEGO: check in for master to temporary branch.
Add release-2.7 to covered branches
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
API: fix types to undefined union (#20909)
Stop limiting getEscapedNameForExportDefault to the first declaration
Convert test from JS to TS
Switch to block-bodied lambda
Better name for deferred mapped type:ReverseMapped
Slightly simplify getCodeActions
Make fixCannotFindModule return an empty array if there is no code action
Add regression tests for rename display name
In checkAndAggregateReturnExpressionTypes, treat MethodDeclaration in an object literal same as a FunctionExpression (#20052)
Improve comment
Return string completions for indexed access types
Check for unused getter/setter in classes (#21013)
Only replace `implements` with a comma if the heritage clauses are sensible
Refine extends-to-implements code fix
fix #20449, insert space between decorators (#20491)
findConfigFile can return undefined (#20556)
Allowed trailing commas in type parameter/argument lists (#20599)
Added localization instructions to CONTRIBUTING.md (#20451)
Simplify marker names
Switch the pretty output to use colons to separate file:line:char so that lines are clickable in terminals (#20736)
Add kindModifier to mark if a completion item is for an optional field (#20839)
Correct fullDisplayName returned from rename
Add explanatory comment to FAR call-site
Add regression tests
Handle different default export forms the same way in import code fixes
bug(esnext): add definition for promise.finally (#20511)
Log TS Server version and process args  (#20847)
Update fourslash baselines too
quick fix of indexed access type (#20956)
Print inferred mapped property types as any not {}
Use 'mapDefined' array helper (#21006)
Remove unnecessary existence check (#21005)
Improve find-all-references for redeclared property in a derived interface (#21002)
Add fourslash tests and update missed baselines
add more information to quickinfo for imported symbols
Do not redefine __asyncValues if it already exists (#20460)
Test:deferred mapped types
For `export default foo`, use 'foo' for the completion identifier name, not the module name (#20987)
Simplify DeferredMappedType construction
Add deferred mapped types
Support completions contextual types in more places (#20768)
Use inference for filling JSX attributes in getJsxElementInstanceType (#20973)
Propagate both TypeFlags and ObjectFlags in getSpreadType
In import fixes, use a ".js" extension if other imports do (#20624)
Call back into getTypeOfFuncClassEnumModule in getTypeOfVariableOrParameterOrProperty if valueDeclaration is irregular kind (#20939)
LEGO: check in for master to temporary branch.
Accepted baselines.
Check whether we have a class before testing whether we have a super-class.
Added tests.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Add method signature handler to getTypeOfVariableOrParameterOrProperty (#20825)
LEGO: check in for master to temporary branch.
Update test
Ensure spread attribute formatting options match jsxexpression
Simplify test and add explanatory assertion
LEGO: check in for master to temporary branch.
Add formatting tests
Update rules to match JSXElement
Add dynamic file open test
Allow dynamic files script info to be created when not opened by client
LEGO: check in for master to temporary branch.
fix #20018, allow skip constraint when merging interfaces
Accept new baselines
Add regression test
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Move recursion limiter to individual resolve* functions
User runner submodule improvements (#20868)
Reset partial memberlist on defered circularity to calculate the correct members (#20179)
Baseline
Load global plugins for inferred projects
Not all extended types have symbols (#20827)
Minor cleanup/comments
For import completion, use an existing namespace import (#20457)
LEGO: check in for master to temporary branch.
Update typemock
LEGO: check in for master to temporary branch.
Update build for node 6 to allow private package
Force case sensitive file names by default in tests, revert dd054e6
Show diff in baseline failure (temporary)
LanguageServiceShim.getCompletionEntryDetails: Support undefined options (#20810)
Accept new baselines
Add regression test
Work around private packages in Node 6
LEGO: check in for master to temporary branch.
Additional PR feedback and cleanup
Minor PR feedback
Revert more baselines, add jake task for typemock
Addressed the suggestions
Converted to enum; marked internal
Temporarily revert baselines
LEGO: check in for master to temporary branch.
Accept new baselines
Parse xxx? as JSDoc type when not followed by token that starts type
Don't treat class name as a completion list blocker if the position comes after it (#20762)
Accept baselines
Don't add completion for method if the `this` parameter doesn't match (#20616)
Adjust formatting rule priority: Never delete space after `case` (#20615)
Include static 'this' accesses in references of class (#20483)
Accept new baselines
Move JsxAttributes and MarkerType from TypeFlags to ObjectFlags
Accept new baselines
bug(esnext) add overloads for flatten
bug(esnext): add definitions for flatten and flatMap
Handle constraints for distributive conditional types
LEGO: check in for master to temporary branch.
Additional test case for contextual type check
Update fourslash baseline
Allow JSXAttributes types to be shortcut-spread into the spread type like normal objects (#19047)
Don't insert a blank line after extracted locals at the start of the file
Regression test for GH #20727
Annotate fewer extracted constants with types
Don't insert a blank line after extracted locals
Improved error messages for Union index signature params
Better error messages for aliased index types
Re-enable all tests
make jsx attributes mutable locations (#20710)
LEGO: check in for master to temporary branch.
Stop assuming code fix test changes are in the originating file
Removed colors devDependency (#20430)
Add more tests of deferred mapped types
Update spelling
LEGO: check in for master to temporary branch.
Simplify printing of deferred mapped types
Test:XMLHttpRequest inference to PartialDeep<T>
Get it working:
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
First attempt. Basically broken.
LEGO: check in for master to temporary branch.
Improve conditional type constraint checking
Get resolved module exports in symbol chain and not raw exports (#20661)
Allow multiple star-star globs in one pattern (#20639)
Code review
Handle arrays with properties in assert.deepEqual (#20674)
Simplify test case (#20675)
Remove TODO
Inference for conditional and extends type operators
Rename TypeVariable to InstantiableType
Introduce TypeFlags.Instatiable
 Revert merge pull request #20429 (removing chai) (#20654)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Use TypeFlags.UnionOrIntersection not TypeFlags.Union (#20662)
Clear the module resolution cache when new @types appear
LEGO: check in for master to temporary branch.
Make ChangeTracker#newLineCharacter public, to avoid having to pass newLineCharacter around as a parameter (#20574)
Remove unnecessary `getFirstChildOfKind` helper function (#20647)
Clean up isGenericXXXType functions
Add 'T extends U' type operator
LEGO: check in for master to temporary branch.
Update chrome devtools user test baseline (#20641)
Test:spread `object` retains lefthandside
`object` spreads to {}
Always check a return expression in a generator (#20621)
Unshallow submodule clones, update submodule ref (#20636)
Add type alias declarations to inclusion list docs
Revert "Loosen restrictions on jsdoc completion locations"
LEGO: check in for master to temporary branch.
Preserve literal types in contextual unions (#19966)
Reimplement #20320 differently to handle multiple check orders better (#20588)
Handle `!` following a keyword in isClassMemberStart (#20617)
LEGO: check in for master to temporary branch.
Update projects tests to use vfs
Ensure getRootSymbols always works recursively
Numeric separators (#20324)
LEGO: check in for master to temporary branch.
Remove unused internal function (#20582)
When user provided resolution is used, invalidate resolutions for all files In this case there is no way to tell if resolution has changed so resolution cache wont have answers
Add type relationships and distribute over union types
LEGO: check in for master to temporary branch.
Rename on WatchBuilderProgram
Api to get underlying program from builder
Create api to create Watch<BuilderProgram>
Change builder to BuilderProgram so it is similar to operating on program
Use builder state in the semantic/emit builder as well
LEGO: check in for master to temporary branch.
Bail at the correct point when containingFunction is undefined
Convert builder state to mutable data, so that later we can create builder Program out of this
From builder use the builderState containing references and file infos
Hack to allow concat to work even when an Array isn't assignable to ReadonlyArray (#20455)
Create builderState so that when FilesAffectedBy is only api needed, we arent tracking changed files
Narrowing of `in` handles string index signatures
Test:`in` doesn't narrow types with string indexers
Few renames
LEGO: check in for master to temporary branch.
test version request
update descriptions
Update the builder to take options aligning with the WatchCompilerHost
fix docs for Math.ceil and Math.floor (#16900)
Dedupe local types from ATA and reuse old programs correctly
For import fix, prefer symlink over a real path (#20395)
Minor cleanup for label completions (#20502)
Use InternalSymbolName.Default more (#20480)
add supports of completion label list (#20362)
Update the emitting file, reporting errors part of the watch api
Add new error message when class implements class #19793
Add getDefaultLibLocation and getDefaultLibFileName and remove system from WatchCompilerHost
Move the system.write to trace on WatchCompilerHost
Handle setTimeout, clearTimeout, clearScreen and report watch Diagnostics
Move internal functions in the watch to separate namespace
Move watchFile and watchDirectory to WatchCompilerHost
Update the WatchCompilerHost creation
More functions moved from system to WatchCompilerHost
Change isTypePresencePossible, accept baseline
Initial implementation of conditional type operator
Immediately respond to `applyCodeActionCommand` requests (#20448)
Change type narrowing for optional properties
Remove whitespace
Add initial support for 'in' typeguarding
Instead of using system as object on WatchHost, create WatchCompilerHost that combines the functionality
Add textChanges methods to insert nodes at the start of multiline bodies (#20445)
Lazily compute signature type predicates (#17600)
Unit test failure; clearHostScreen function
Re-added blue color, with corrected 94m code
Accept Iterable|ArrayLike union in Array.from, test
Update baseline
add status request
Make before and after program create callbacks optional
Update baselines
Rename WatchHost.moduleNameResolver to WatchHost.resolveModuleNames to align with compiler host
LEGO: check in for master to temporary branch.
Rename Watch.synchronizeProgram to getProgram and return the updated program as part of this api
Rename getProgram to getExistingProgram
Support exponentiation operator in const enums (#20424)
Use 'filter' array helper (#20452)
Fill "empty" structured type marker with early symbols
Update test that import code fix doesn't use node_modules global import if classic resolution is set (#20453)
Update user tests baselines
Remove 'debugger' statement from test (#20444)
Remove dependency on chai
Added console clearing with a message to --watch starts
LEGO: check in for master to temporary branch.
Prettified timestamps and error reports in --pretty
Comment typo fix in es2015.ts: "propety"
fix(es2018): add a target and an initial lib (#20385)
"tsc --watch should clear screen on new compilation" Two: Electric Boogaloo (#20389)
LEGO: check in for master to temporary branch.
Make sure autoArrayType is unique, even if no lib is available (#20344)
Always instantiate the extends clause, even in the presence of an error (#20232)
Accept new baselines
Add regression test
Check apparent type instead of function type in isUntypedFunctionCall
Remove periods from refactor/quickfix messages (#20237)
Test:Mutually recursive types do not recur infinitely
Limit recursive structured type resolution
Simplify mappedTypeStack cache key
mappedTypeStack uses a string based on symbols
Support a 'recommended' completion entry (#20020)
compileOnSaveAffectedFileList shouldn't return any files for noEmit projects
Don't mutate symbol flags after creation
Don't suggest import completions for /a/node_modules if we're in /b (#19928)
Accept new baselines
Update baselines with new SymbolFlags
Preserve literal types only when contextual type has literals of same kind
Add SymbolFlag for containers of JS special decls
Test:inference to self-referential mapped type
Miscellaneous fixes to avoid duplicate completions (#20349)
Cut off inference for recursive mapped types
LEGO: check in for master to temporary branch.
installTypesForPackage refactor: Trigger even if resolved to a ".js" file (#20353)
Update affected fourslash test
Don't offer to prepend an underscore to the name of an unused private property
Correct errorForUsingPropertyOfTypeAsType03
handle multiline jsx strings correctly, emit escapes in jsx attributes correctly (#20309)
Elide import namespace from which only const enums are used (#20320)
Add baselines for the current state of enum members
Handle all non-namespace types
fix noImplicitReturns check when strictNullChecks is false (#20326)
In navigation tree, don't merge static with non-static (#20347)
LEGO: check in for master to temporary branch.
prefix top-level describe clauses in tsserverProjectSystem
revert 0a6a568d and 0e4b8196
Make AccessorDeclaration.body optional (#20329)
Enable ban-types lint rule (#19586)
Test:js object literal assignment as declaration
JS Object literal assignments are declarations
Apply TS2713 to classes
Remove location of other declaration from "Subsequent x declarations must have same type" errors (#20206)
LEGO: check in for master to temporary branch.
Handle parentless nodes in nodeIsDecorated (#20314)
Accept baseline changes
Remove temporary error-avoidance hack
Update chrome devtools baseline
LEGO: check in for master to temporary branch.
JS static prop assignments don't need same type
Error when LHS of instanceof is Union of Primitives #18519 (#19063)
Disable import fix for method of 'export =' value (#20208)
Binder:clean up bindPropertyAssignment and friends
JS static properties:fix multi-file references+merging
Move utilities for getting type parameter constraints and defaults from public lazy members to services (#20162)
Handle shebang in import code fix (#20306)
Support parameter properties in `getRelatedSymbol` (#20202)
Support both baseUrl and relative paths when adding missing import (#19724)
Remove length limit on spelling suggestions; use levenshteinWithMax for performance (#19937)
LEGO: check in for master to temporary branch.
Allow possibly undefined destructuring in ambient parameter declarations (#20230)
LEGO: check in for master to temporary branch.
Deprecate virtualFileSystemWithWatch
Update chrome dev tools definitions
Update chrome-devtools baseline
Add empty 'module' declarations for chrome-devtools
Tests:more JS static property assignments
reindent
enable running all tsserverProjectSystem tests
Migrate tsserverProjectSystem to vfs
Always put assignments in locals.
replaced @parm typo with @param (#20277)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Switch to function spies
Handle emit only declaration file to always produce declaration file and skip the diagnostics check
To handle cancellation token, remove changed/affected files from the changeset only after getting the result
Port generated lib files (#20213)
Update test baseline
Offer global completions in all blocks
Update baselines
Binder-based prop-assignment decls: messy version
Set program as affected if emitting/diagnostics for whole program
Use the results from affected file enumerator apis as Affected File result
Make the builder state as internal and expose builder instead of builder state
Make the versions in the source file non zero when the source file is created
Add api to get the dependencies of the file
Allow watch host to specify module name resolver
Lint errors fix
Expose the watch and builder API in the typescript.d.ts
Use builder state to emit instead
Accept new baselines
Add regression test
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Removes redundant comments (#20214)
Migrate tscWatchMode to vfs
Make sure 'async' isn't treated as a parameter modifier
Catch illegal jsdoc tags on constructors (#20045)
Use stricter types for event bodies
Use {} instead of any to improve type checking
Update public API baseline
Update project on PackageInstalledResponse
Unswap arguments
LEGO: check in for master to temporary branch.
JS Property assignments create namespaces (hacky)
More tests and update baselines
JS:Treat type-annotated uninitialised vars as declarations
Add dt baseline folder to gitignore (#20205)
Support getJSDocCommentsAndTags for special property assignments (#20193)
Clean up outliningElementsCollector (#20143)
Update chrome-devtools baseline
Test:Type references to nested JS classes
JS:resolve nested static classes+on func/class exps
Always send a response to installTypings even if all types are cached
Correct project root path passed to Typings Installer
Check hasOwnProperty before copying property
Convert legacy safe list keys to lowercase on construction
Port generated lib files (#20177)
Clean up lexical classifier (#20123)
Allow curly around `@type` jsdoc to be optional (#20074)
Parallel runner shouldnt print nan and freeze on unestimatable tests when above batch count (#20176)
Exclude global types from devtools user test (#20172)
Accept new baselines
Add tests
Allow '!' only on variable declarations within variable statements
Cache result of isCheckJsEnabledForFile in getSemanticDiagnosticsForFile
Accept new baselines
Definite assignment assertion '!' on variable and property declarations
Accept new baselines
Add tests
Handle type variables in isTypeDerivedFrom
Accept new baselines
Add test
Add definite assignment checks for property accesses in constructor body
Simplify checkPropertyAccessExpressionOrQualifiedName
test overriding Session.event
Update editorServices.ts
LEGO: check in for master to temporary branch.
Moved minified file exclusion
For import completion, if multiple re-exports exist, choose the one with the shortest path (#20049)
Bundle fileName with CodeActionCommand (#19881)
Accept new baselines
Add test
Exclude abstract properties from strict initialization checks
Update chrome devtools baselines
Test:ts-ignore works on jsdoc syntax errors
Report jsdoc errors as semantic errors
Simplify documentHighlights (#20091)
Accept new baselines
Add tests
LEGO: check in for master to temporary branch.
Revise return control flow graph construction logic
Support semantic classification of alias (#20012)
In `getContextualTypeForBinaryOperand`, only need to look for `=` assignment operator, not e.g. `+=` (#20037)
lineAction: Use an enum instead of true | false | undefined (#20086)
LEGO: check in for master to temporary branch.
cleanup NodeTypingsInstaller
remove comments
type `event` callback correctly
update baselines
defer callback and remove handler object
Exclude static properties
Support arbitrary prototype property assignments in navigation bar (#19923)
Modified Kendo regex to include -ui folders and files without min
LEGO: check in for master to temporary branch.
Apply safelist exclusions even when include is not specified; recompute project contexts when installer reqs finish
Treat exhaustive switch as last statement in function #18882 (#20063)
Detect re-exports from "export *" in completions (#20043)
Strip "/index" from import fix module specifiers (#19962)
Accept new baselines
Add very error-ful test for chrome devtools js (#19992)
Update tests
Add --strictPropertyInitialization compiler option
Mark returnFlowNode property as internal
Add strict property initialization checks
Attach return control flow graph to contructor declaration nodes
Improve spread arity mismatch error messages
Update spread tests w/new excess arguments error
Error on excess spread arguments
Revert "Change "isThisless" predicates to "mayReferenceThis" predicates (#20036)" (#20054)
make eventSender required for TypingsInstaller
baseline accept
expose just eventSender
Move event into IoSession
Use correct base primitive type
Use correct base primitive type
PR feedback
LEGO: check in for master to temporary branch.
move socketSender to IOSession
Treat `...` in jsdoc type as creating a synthetic rest parameter -- not as an array type (#19483)
Change "isThisless" predicates to "mayReferenceThis" predicates (#20036)
smartIndenter: Don't indent after control-flow ending statements like `break;` (#20016)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
lint more
lint
use arrow to capture this
update baselines
expose event to overwrite in SessionOptions
Rename and inline functions
accept baseline
factor out socket-event-sending
Have CompletionEntryDetails source use a relative path (#19917)
Synchronize getEntityNameForDecoratorMetadata and serializeUnionOrIntersectionType (#19879)
Remove dead code that didn't get removed in #19979
Update JSX intrinsic element test to match babel’s (#19946)
Accept new baselines
LEGO: check in for master to temporary branch.
Always require '=' before parsing an initializer (#19979)
LEGO: check in for master to temporary branch.
react starter needs node ref, accept fixed leveldown (#19994)
Handle binding elements while looking for invalid `await` and `yield` (#19972)
Make BOM a constant
Treat `{}` in `T = {}` as `any` in JS files (#19977)
Improve lookahead for arrow functions to reduce speculative parsing
Also make clones/updates shallow
mark all submodule changes as ignored
Use UTF8 BOM in emit
Revert "Break out of speculative parsing on bad parameter initializer (#19158)" (#19975)
Accept new baselines
Update baseline
Add test
add types for escape and unescape methods #18813 (#19015)
Extract JSXChildren checking
Use TokenFlags.PrecedingJSDocComment to guide JSDoc comment processing
Break out of speculative parsing on bad parameter initializer (#19158)
LEGO: check in for master to temporary branch.
Migrate compileOnSave tests to vfs
Partial deprecation of non-vfs TestServerHost
Introduce TokenFlags enum
LEGO: check in for master to temporary branch.
Improve assert message
LEGO: check in for master to temporary branch.
Deprecate GeneratedFile
Simplify literal/unique symbol widening
Update baselines
Add test w/submodules for our starter kits
Deprecate CompilerResult
ExternalCompileRunner works with submodules
Add test
Make comparable relationship bidirectional for primitive types
Add 'scripthost' to 'lib' for the 'generate-spec' target.
Fail fast on synthetic nodes in services (#19894)
Use ts.stringContains instead of String.indexOf
Address PR comments
Simplify setting constEnumOnlyModule (#19735)
LEGO: check in for master to temporary branch.
Accept API baseline changes
Accept new baselines
Update test
Update tests
Give lowest priority to inferences made from empty array literals
 fix completions for string literal types with template string (#19162)
Add support for variations in module/target in compiler tests
Consider the commonjs module indicator as a module indicator (#18490)
Retire Harness.compileFiles
Update Harness.compileFiles to use vfs
LEGO: check in for master to temporary branch.
DefinitelyTypedRunner skips ExpectErrors
Remove commented tests
Allow applyCodeActionCommand to take an array (#19870)
For import completion of default import, convert module name to identifier (#19875)
Log more usefully when this test fails
Format + new regex
Remove testcases we don't like
If there is an `export default x;` alias declaration, disallow other default exports (#19872)
Mark all parameters as needed for metadata when one is decorated (#19849)
cleanup
accept baselines
send all events through common stream
Only ignored params need underscores
Handle synthetic nodes correctly as namespace identifiers in system transform (#19623)
fix completions protected members in recursive generic types (#19192) (#19242)
Add Symbol.species to ArrayConstructor, MapConstructor, SetConstructor, ArrayBufferConstructor. (#18652)
Use CRLF and emit test output for stdout/stderr
Revert "Add TupleBase with unusable mutating Array methods"
LEGO: check in for master to temporary branch.
Remove unnecessary wrapper classes in ts.formatting.Rule (#19744)
Remove positive baselines for user tests
Refactor user+dt runners into externalCompilerRunner
Remove trailing whitespace from unit tests (#19836)
processDiagnosticMessages.ts: linted, removed unused code (#18697)
Add a couple of test cases
Accept baselines
Changed error for setter when emitting declaration with private param type (#18593)
quickInfo: Display info for signature on a separate line from variable info (#18698)
Test:narrow properties from string index signatures
Narrow property access from string index signatures
Cache comparers
RWC:Handle lib entries in tsconfig
Improve asserts in getSuggestionForNonexistentSymbol
Cleanup after merge
Remove package-lock.json before `npm install`
Change runner name from 'definitely' to 'dt'
PascalCase -> camelCase
Handle other linebreak characters and add boundary checks
Use CharacterCode enum
DefinitelyRunner cleanup and speedup
Add hyphen in completionEntryDetails-full (#19808)
Move "space-before-function-paren" lint rule to list of rules waiting on a formatter (#19807)
Import fix add import require support (#19802)
Enable 'no-empty' tslint rule (#19769)
LEGO: check in for master to temporary branch.
Enable 'no-invalid-template-strings' lint rule (#19790)
LEGO: check in for master to temporary branch.
fix inconsistencies in import UMD code fixes adapting to module format (#19572)
LEGO: check in for master to temporary branch.
Consistently use "JSX Attribute" completion kind (#19781)
PR Feedback
Apply 'unified-signatures' tslint rule (#19738)
Update baselines after merge
Handle windows linebreaks in getSourceFileImportLocation
Apply 'object-literal-key-quotes' tslint rule (#19737)
Move "ban-comma-operator" to tslint rules that we won't use (#19780)
Use an enum for Msg (#19773)
PR Feedback
Remove last bits of strictTuples flag
Discriminate contextual types (#19733)
Update baselines
Eagerly fall back to TupleBase
Handle the folder create/delete in the configured project
Update Jakefile with definitelyRunner.ts
Add DefinitelyTyped test runner
LEGO: check in for master to temporary branch.
Add test case when inside wild card watched directory folder is renamed
Use documentation comments from inherited properties when @inheritDoc is present (#18804)
Update DOM iterable interfaces (#19752)
Enable 'no-unused-expression' tslint rule (#19734)
Remove test
Added empty constructors to TypedArrays from es2017 (#19680)
Make getContextualTypeOfApparentType mapType over unions (#17668)
Revised emit for computed property names, including with decorators (#19430)
Split runner selection from test selection (#19729)
Improvements to checkUnusedIdentifiers (#19607)
Add testcase for non existent file without absolute path when opened with/without projectRoot
Improve TupleBase docs and backward compatibility
Add TupleBase with unusable mutating Array methods
Port generated lib files (#19772)
Silence NPM warnings when installing typings (#19749)
Add regression test
Apply 'variable-name' tslint rule (#19743)
Test:spread removes readonly from index signatures
Remove readonly from index signatures of a spread
Add tests
Empty array literal has a non-inferrable element type
Add tests
Check combined modifiers in mappedTypeRelatedTo
Shave off ~100ms by extracting ExpandingFlags
Add localizable diagnostic for "Install '{0}'" (#19651)
Check for unused locals in commonjs modules (#19612)
Rename offsets in tests
For getCompletionsAtPosition, require a flag to provide completions with code actions (#19687)
Apply 'prefer-for-of' tslint rule (#19721)
Add CompletionDetailsFull request (#19689)
Enable 'only-arrow-functions' lint rule (#19717)
Enable 'no-implicit-dependencies' lint rule (#19716)
Minor cleanups in pathCompletions.ts (#19685)
Support path completions inside node_modules (#19692)
Accept new baselines
Add tests
Call on never type is not an untyped function call
Test where script info path and program path differ because of current directory
Respond to CR
Add a few tuple tests and update baselines
Loosen restrictions on jsdoc completion locations
LEGO: check in for master to temporary branch.
Add refactoring to use default import (#19659)
Use NodeFlags to detect nodes in ambient contexts instead of climbing ancestors (#17831)
Accept new baselines
Add regression tests
Apply 'interface-name' lint rule (#19695)
Enable 'no-this-assignment' lint rule (#19696)
Enable 'callable-types' tslint rule (#19654)
Accept new baselines
Properly handle intersection types in getUnmatchedProperty
Accept user test baselines
Split ArrayConstructor.from method into 2 overloads #19682 (#19693)
Port generated lib files (#19690)
Add regression test
Support quick info at `function` and `=>` locations (#19669)
Remove freshness from literal types in intersections
Remember to provide source for completionDetails from client.ts (#19664)
Ensure that we continue recursing into TS transforms (#19650)
Add undefined to return type
Revert "Update tests to expect empty doc comment template"
Revert "Return empty doc comment instead of undefined"
Remove strictTuple flag and Tuple.length readonly
Complete to single line jsdoc comment if no params
User code runner draft (#19539)
In typings installer, provide mandatory 'package.json' fields (#19663)
Move strict tuple test and add a couple of cases
Add "strictTuples" to list of strict flags
Use explicit undefined checkk
Switch from undefined guard to asserts
Test:this instantiation in type parameters
Properly handle Object and Function types
Check function type parameters for this references
Use a different RegEx
Log top 5 largest files when TS language service is disabling. (#19315)
Remove markers
Update test
Drop node 4, add node 8 for CI (#19617)
Refactor test and annotate object literal
fix completion module path (#19351)(#19367) (#19366)
Add JSXText indentation test
Indent all lines of single JsxText node
reduceRight is never used (#19605)
Cache some LS calls in fourslash (#19517)
Accept new baselines
Add type annotation
Nix getBestChoiceType, [] subtyping, nominal union reduction for classes
Remove case-insensitive UI comparisons for now
Assert arrays passed to relativeComplement are sorted
PR feedback
Remove duplicate type (#19593)
Extend from tslint:latest (#19309)
Rename "isPartOfExpression" (#18469)
LEGO: check in for master to temporary branch.
Use lowercased names for generated locale directories (#19581)
Parenthesize export assignments if needed (#19590)
Unify deduplication, fix deferred global diagnostics
The global "JSON" object should always exist (#19583)
Accept new baselines
Use nominal checks in union type subtype reduction
LEGO: check in for master to temporary branch.
Make getCompletionEntryDetails and getCompletionEntrySymbol parameters non-optional (#19507)
Add support for enums and property signatures
Add utility function to check for strict option flags (#19427)
Accept new baselines
Use nominal check in isTypeInstanceOf
Assert that enclosing declaration is not synthesized
Correct typo - pass correct argument
Add regression test for #19395
Add test
In quick info, show all jsdoc tags (#19357)
Use Harness.isDefaultLibraryFile to detect lib.d.ts
Accept new baselines
Add tests
Make generic mapped type relationship more inclusive
Added comment
PR Feedback, cleanup
Updated comments
PR Feedback
Undo unnecessary change
Accept new baselines
Redo subtype reduction with correct --noImplicitAny error reporting
convertToObject: handle negative numbers in JSON
Accept new baselines
Undo extra subtype reduction in getWidenedType
Improved logging
Update comments
Return doc comment template for interfaces and method signatures
Update tests to expect empty doc comment template
Return empty doc comment instead of undefined
Exclude legacy safelist files in external projects
LEGO: check in for master to temporary branch.
Improve regex for tsconfig test
Generate tsconfig in tsc-instrumented instead
Accept new baselines
Perform subtype reduction when widened union type contains {}
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Unify logic for getMembers/Exports of symbol
Reduce noise in PR, minor cleanup
Improve performance of deduplication of sorted arrays
Handle --debug-brk and --inspect-brk when launching TypingsInstaller
Ensure correct errors when emitting declarations
Only construct two rules providers in textChanges (#19502)
Overwrite assert.isFalse (#19506)
LEGO: check in for master to temporary branch.
Add tsconfig.json for RWC projects that lack them.
Add missing semicolon
Accept new baselines
Add tests
Ensure void return in forEachType
More repetitive but less complex widening logic for literals/symbols
Ensure explicit default locale before each test
Disable sourcemaps during cancellationToken test (#19505)
Cleanup, merge #19475
Disable error sourcemaps during session test (#19504)
Accept new baselines
Accept API changes
Memoize rule provider (#19501)
Use a single union type for all inferred object literal types
Further simplification
Support completion details for special JsDoc completions (#19494)
Support multiple completions with the same name but different source module (#19455)
Normalize nested object literals
Use minimal lib for projects tests (#19488)
Remove unnecessary comment
Remove unnecessary comment
Cleanup and reordering
Simplify comparers
Use a map for read file lookups (#19487)
Stop using expensive directoryExists in unit/rwc tests where it does not matter (#19486)
More control over which collator to use in each situation
Stop collecting type baselines for RWC tests (#19482)
Add test case to verify reload works without open project
Normalize object literals in widened union types
Added test for preventing fragment with jsxFactory
Error when using fragment with jsxFactory
Remove unnecessary type annotation
Removed double tests of gotoDefinition
Consistent naming
Revert change in navigateTo
Minor name change
Clean up existing equality comparisons
Added 'equateStrings' for string equality comparisons (rather than sorting)
Addressed PR comments.
Rollback spread operator changes
Revert use of Intl/localeCompare for CS comparisons
Store the projectRootPath the script info was opened with so that we can reuse it later to search/set file watches
Test to verify that projectRootPath is taken into account when there are changes to config file
Manually inline a few cases to reduce repeated 'ignoreCase' conditionals in loops
Added triple slash support
Clean up outdated string comparison logic
Missing properties in fresh object literals are known to be undefined
Respond to CR
Extract refineNode into its own function
Demote some extraction ranges to produce better results
Renamed a couple of methods, refactored code for reusability
Add the test case that fails and reports error for files not in root directory in watch mode Test case for #19327
Removed custom guard and added isArray
Skip symbol baselines for RWC tests (#19425)
PR cleanup
Use NodeFlags to detect nodes inside with statements instead of climbing ancestors (#17721)
For @types installing quickfix, only activate for implicit-any module (#19394)
Update issue_template to ts2.7 (#19422)
Port generated lib files
Add tests
Accept new baselines
Infer from base constraint signatures instead of erased signatures
accept baselines
Remove escaped names of well known symbols from string completions
Address PR feedback
Simplify property symbol logic in checkObjectLiteral
Revert some minor changes to clean up PR
Refactor widening
LEGO: check in for master to temporary branch.
Simplify getLateBoundSymbol
Check for `--strict` along with `--noImplicitAny` for code fix
Make it a noImplicitAny error to fail to provide type arguments to a superclass via @augments (#18778)
Subsequent variable declarations must have same type: Mention location of other declaration (#19356)
Minor cleanup
Minor cleanup
Cleanup, add watch capabilities
Use `light` test flag by default (#19362)
Do not include lib in extract symbol tests unless required (#19361)
More tests for getParameterSymbolFromJSDoc
Update version (#19353)
LEGO: check in for master to temporary branch.
Consolidate jsdoc node getters
Test:jsdoc @param errors on vardecls/assignments
LEGO: check in for master to temporary branch.
Remove some unnecessary `undefined` checks in extractSymbol (#19256)
Workaround for nonnull operator on indexed accesses (#19275)
Add regression test
Accept new baselines
Infer properties of type {} when argument of a mapped type is incorrect
Use Promise instead of PromiseLike (#19305)
Remove extra blank line in logs (#19307)
Updated an incredible amount of tests.
findAllRefs: Support anonymous default export (#19302)
Actually use cached semantic diagnostics
LEGO: check in for master to temporary branch.
make getCurrentDirectory required (#19303)
Addressed PR comments: added simplified/full version, changed design
Do not cache the semantic diagnostics when compiler options has --out since we would anyways get all fresh diagnostics
Simplify emit changed files further Also use source file version as the signature of declaration file instead of computing it from text
Modify api to emit affected files using callback instead of generating in memory output Also marking few apis introduced during watch improvements changes that are suppose to be internal for now
Use get files affected by internally and hence use file paths as input
Add failing testcase where when d.ts file is in program, the files get emitted multiple times with --out setting
Respond to CR
Move isJSDocIndexSignature to utilities
Add a better test for jsdoc index signatures.
Update annotateWithTypeFromJSDoc tests
Remove erroneous error for JSDoc object literals
Update API baselines
Set the scriptKind from the host configuration if present
Disambiguate same-named refactors using description (#19267)
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Respect newLine compiler option in language service output (#19279)
Update baselines
Collapse jsdoc annotation refactors to one
This wasnt required before... (#19262)
Add quickfix and refactoring to install @types packages (#19130)
Respond to CR
Added test for windows style paths watched directories
noUnusedLocals: Warn for recursive call to private method (#18920)
In tsserver, indent logged JSON (#19080)
Dont try to run unit tests with rwc tests again (#19240)
Add exported members of all project files in the global completion list (#19069)
Test excess property checks of spreads of unions.
Mark fresh spread objects w/ContainsObjectLiteral
Update API baselines
Add baselines
Update tests
Add support for JSX fragment syntax
LEGO: check in for master to temporary branch.
LEGO: check in for master to temporary branch.
Changed command designed based on review input
Add release-2.6 to covered branches
LEGO: check in for master to temporary branch.
Do not reduce subtypes of awaited union type
Test:type inference from strings to keyof T succeeds
Infer keyof from string literals + contravariantly
Add comments about why we need two methods that return compilerOptions
Support 'package.json' not in package root (#19133)
In convertFunctionToEs6Class.ts, share code for getting symbol (#19160)
Abstract property access error only on this access
Test:abstract prop access in non-declaring ctor
Check own-constructor in abstract prop access error
LEGO: check in for master to temporary branch.
fix super call from class that has no basetype but with same symbol interface (#19068)
Accept new baselines
Add tests
Mapped type { [P in any]: T } should yield { [x: string]: T }
LEGO: check in for master to temporary branch.
Properly handle mapped types with 'keyof any'
Update generated files (#19177)
Accepted baselines.
Create truly unique names for tagged template strings.
Added test case.
LEGO: check in for master to temporary branch.
In getContextuallyTypedParameterType, skip a `this` parameter when counting parameter index (#19155)
return more Debug.fails instead of undefined.
JSDoc->type refactor:Renames+improve never handling
LEGO: check in for master to temporary branch.
Create source files lazily in tests (#19143)
Added DefinitionAndBoundSpan command
Recreate old decorator metadata behavior (#19089)
Insert a line break before a function at EOF if needed
Update missed baseline
Transform nested dynamic imports (#18998)
Adding test case where opened file included in project is not added to ref count of configured project
Test refactor of JSDoc @template tag
Convert @template tag to type parameters in refactor
Introduce and consume suppressLeadingAndTrailingTrivia
Assert:checkTypeArguments isn't passed too many type arguments
Quick fix for no-implicit-any errors to add explicit type annotation (#14786)
Simplify checkTypeArguments based on PR comments
Add missing test coverage for jumps in finally blocks
Allow Extract Constant into enclosing scope in spite of RangeFacts.UsesThis
Update public api baseline
Add additional deep clone tests
Allow extraction of variable decls used outside the extracted range
Accept new baselines
Add additional test
Account for type queries in type literals
checkTypeParameters now always calls fillMissingTypeArguments
Don't clobber the position of cloned nodes
Make sure project root paths of inferred projects are canonical when comparing
Add ValueModule as a valid object literal type, as they are immutable (#19090)
Always log output of execSync (#19110)
Test:Incorrect number of type args during err reporting
Fill missing type arguments during error reporting
Update to use `help wanted` instead of `Accepting PRs` (#19105)
Add and update jsdoc annotation refactoring tests
Convert all JSDoc parameters and return types of functions
Updated error baseline
Accept new baselines
Add regression test
Don't check for callbacks in recursive call that resulted from callbacks
Update the comment on emit handler method
Add package-lock.json to repository (#19099)
In issue template, recommend to use `typescript@next` (#19098)
Ensure Async Modifier is maintained through ES6 Class Conversion (#19092)
Set flags on fresh object types from getSpreadType
Instead of counting events with name, verify each event to not equal event name
Verify errors more correctly in tsc-watch mode
Update comment on emit handler functions
Combine the event manager testing
Functioning parallel unittests (#18956)
Do not generate config file diagnostics event when the file opened doesnot belong to the configured project
Use filterMutate instead of removeWhere
Accept new baselines
Add regression test
Properly account for possibly referenced type parameters
Add regression test for #18668 (#19085)
Add comment about swallowing exception
Add utitlity for stringContains
Stop erroneous match of midfile sourceMappingUrl (#19084)
Function to clear the per directory resolution
Modify the changesAffectModuleResolution check
Updated vfs
Remove `removeWhere` (#19082)
Maintain Export Modifier when Refactoring to ES6 Class #18435 (#19070)
Do not rely on parent pointers in the binder (#19083)
Update Authors for TS 2.6
Optimize getSynthesizedDeepClone
Move getSynthesizedDeepClone to services/utilities.ts
Improve JSDoc @augments diagnostics (#19011)
Remove unnecessary uses of `any` in shims.ts (#19038)
baseline updates
Handle project close to release all the script infos held by the project
Swallow the directory watcher exceptions
Add deprecation warning to getSymbolDisplayBuilder (#18953)
Use the parent most node_modules directory for module resolution failed lookup locations
Assert if the script info that is attached to closed project is present Adds assertion to investigate #19003 and #18928
Improve Object.{values,entries} static methods (#18875)
Handle type guard predicates on `Array<T>.find` (#18160)
update baselines
In resolveNameHelper, use a lastNonBlockLocation (#18918)
Use ancestor walk to determine if property access is within constructor #9230
In getSuggestionForNonexistentSymbol, guard name against undefined
In @typedef tag, handle property with no type (#19013)
Error when accessing abstract property in constructor #9230
better error message
add error for multiple tags
A parameter not declared as a rest parameter is not one (#18825)
Have getNameOfDeclaration return `x` for `export default x`. (#18616)
accept baselines
Remove duplicate assignment (#18994)
Mark getSynthesizedDeepClone @internal
Add tests
Accept new baselines
Always use callback parameter code path, but stricter if necessary
Visit default export expressions (#18977)
Use deep cloning, rather than thunking for repeated substitution
Introduce getSynthesizedDeepClone
Handle undefined in getSynthesizedClone
Add test
Accept new baselines
Don't use callback parameter code path when strictly checking functions
Create fix for uninvoked decorators.
Added test.
Fine tune logging so that only triggers in watch are logged in normal logging vs verbose
Additional documentation
Update tests after the merge from master
Update baselines
Test:{} in union from spread gets implicit index signature
Set symbol on union of spreads
Support dynamic names on static members of class.
General tidying up and comments.
General tidying up and comments.
Additional tests
Switch to 'unique symbol'
Compile public api so that all the updates are ensured to be correct
Update baselines
Binding element with parent type any is any
Skip more lib checks, improve test execution time a bit more (#18952)
Increase maximum depth of outlining span search (#18704)
When emitting all files, emit the changed file first (#18930)
Add skip lib check to many tests (#18935)
Stop combining already-translated strings
Clean up code in getModifierOccurrences (#18948)
In getModifierOccurrences, support additional container kinds (#18947)
Support contextual type for property assignments in JS that are not declarations (#18820)
Call getLocaleSpecificMessage
Localize more Extract Function/Constant strings
Latest mocha uses fullPath instead of titlePath (#18933)
Wrap the cancellation token in throttled cancellation token from server
Stop extracting void and never constants
Include range markers in Extract Constant/Function baselines
Disallow constant extraction into expression-bodied arrow functions
PR Feedback and API baselines
Test:spread contextually typed by binding pattern
Binding pattern contextual type checks spread type
Stop inadvertently exempting expression statements from check
Refine extraction of expression statements
Keep comments in production tsserverlibrary builds (#18913)
Remove unnecessary *OrUndefined calls (#18889)
Accepted baselines.
Flatten the '__makeTemplateObject' helper to use less vertical screen real estate.
Accepted baselines.
Accept baselines (#18903)
Use 'getTextOfNode'.
Added a test for an 'any'-type decorator.
Improve error message for uncalled decorators.
Baseline public API (#18897)
Separate namespace declarations in builder of intenal and exported interfaces and functions
Include localized diagnostics (#18702)
Allow parsing a qualified type name containing a reserved word (#18888)
Ensure getResolvedSignature never returns `undefined` (#18883)
Handle repeated substitution of the same symbol during extraction
Refactor to reduce property duplication
Making APIs as internal so that we can enable them after we have figured out final details
Describe the innermost scope as "enclosing scope" for constants
Localize 'in' in extraction description
Add error elaboration test
Improve error elaboration for invariant generic types
Move first/last shortcuts closer to the end of the helper flags.
Emit .d.ts file in test
PR feedback
Update baselines
getSuggestionForNonexistentSymbol: Add comment (#18885)
Use idText in a few more places (#18842)
Enable "space-within-parens" lint rule (#18856)
Simplify RulesMap construction (#18858)
Update baselines
Accepted baselines.
Updated helper for marginally better minification.
Accepted baselines.
Added test for module & global examples.
Accepted baselines.
Added test and adjusted reporting logic.
Loosen restriction on usages in innermost scope
Reuse getSourceFileImportLocation
Addressed code review feedback.
Accepted baselines.
Accepted baselines.
Use a better check.
Addressing CR feedback
Improve insertion positions of extracted constants
Print list of available refactors when we can't find one (#18843)
Add helper functions for using `unescapeLeadingUnderscores` (#18793)
Accept new baselines
Eliminate special case for extracting from a binary operator chain
Accept new baselines
Only methods and constructors are bivariant in --strictFunctionTypes mode
Assert that Extract* baselines are syntactically valid
For any Extract* baseline that is valid JS, produce a JS baseline
Check JSDoc `@param` tag names (#18777)
Support accessing enum types from JSDoc (#18703)
Rename test baseline to be compatibile with windows (#18827)
Correctly transform jsdoc parameter types
Rename extractMethod tests to extractFunction for consistency
Addedn rangeContainsRange helper function
Remove unnecessary cast (#18822)
Remove unused arguments in program.ts.
Accepted baselines.
Give a more helpful error message when users try decorating using expressions that take no arguments.
Remove unused arguments.
Fall back to old behavior for tagged template emit in global files.
TODOs for repeated substitution
Accepted baselines.
Ensure that the import helper is checked for tagged templates, and update its name.
Use project root as the current directory whenever possible to create the project
Added tests for import helpers with & without a declared template object creator.
--pretty output: move context after the file/error
Remove console logs in fourslash (#18803)
Add additional TODO about insertion positions
Use resources, rather than string literals, in test baselines
Forbid extraction of constants to class scopes in JS
Split range tests and helpers out of extractFunctions.ts
Rename extractMethods.ts to extractFunctions.ts for consistency
Add simple tests for Extract Constant
Rename extractMethod.ts to extractSymbol.ts
Generalize extract method to handle constants as well
Revert all the changes except test case
PR feedback
Split rwc input files (#18772)
Improve testing of code fixes, and improve diagnostic messages (#18742)
Update LKG (#18774)
Remove redundant handler for JSDocComment in `checkSourceElement` (#18771)
Transform jsdoc types in the refactor, not emitter
Yes space after multiline comments
Renamed PartialSystem as DirectoryStructureHost and CachedPartialSystem as CachedDirectoryStructureHost
Rename watchedProgram.ts to watch.ts
Move filenames to match refactoring rename
Change refactoring name and description
type WriteFileCallback: make param sourceFiles required. (#18731)
Accept new baselines
Update tests
Strict function type checking only for certain function types
Add fix for crash in #18712 (#18751)
Handle @typedef tag with missing type (#18662)
Include nearest test name in uncaught errors, catch suite errors (#18694)
Span length is not optional (#18558)
Make it a parse error for an `@augments` jsdoc tag to not include a type (#18745)
Test:refactor JSDoc types to Typescript types
Refactor JSDoc types to Typescript types
Remove updateX functions for template parts (#18714)
Check for initializer before using it (#18708)
Add missing factory functions for template head, middle, tail, and no substituion template literal (#18709)
support @extends in jsdoc
Apply "array-type" lint rule (#18699)
Always collect type and symbol baselines (#18621)
Remove freshness, more comprehensive grammar checks and diagnostic messages
Keep a small reserve of tasks to not-batch, so all threads can have always have an initial task (#18696)
Minor cleanup to symbolWalker (#18549)
Make it a parse error for an `@type` jsdoc tag to not include a type (#18664)
Use JSDoc `@type` tag type cast as a contextual type (#18690)
Cleanups in formattingScanner.ts (#18599)
Unify duplicate `getNameOfSymbol` functions (#18618)
Avoid calling `indexOf` when checking array element types (#18619)
Remove unnecessary "@internal" (#18665)
Accepted baselines.
Just always print out modifiers for global augmentations.
Add tests
Always perform structural comparison when variance check fails
add error message test
Remove unnecessary 'tryParse' (#18663)
Accepted baselines.
Force 'declare' modifiers and correct global augmentation emit.
Added tests and accepted baselines.
Typo fix
PR comments
Update comment
Add custom formatter which has clickable links, reduce error duplication in gulp output (#18613)
Properly flag and structurally compare marker type references
Added test and accepted baselines.
Update baselines temporarily
getAdjustedStartPosition shouldn't skip to next line when on 1st line
JavaScript: handle lack of modifiers on extracted method
Revert dom.generated.d.ts and fix duplicate declarations
Remove batching on unittest thread, use historical data to inform batching (#18578)
Report external files in initial case
remove newline
Handle unixy paths in RWC tests (#18585)
Look at correct 'package.json' location for a scoped package (#18580)
add tests
Adds VarDate and SafeArray<T> as pseudonominal types to lib.d.ts (#18566)
Consider underscore for type parameters in unused-local checks (#18539)
Actually capture oldTranspile baselines (#18584)
explain changes and remove spurious assignment
revert method rename
Update tsconfig baselines
navigation tree / bar: Set span of anonymous function to span of VariableDeclaration containing it (#18575)
Use methods in dom.generated.d.ts to opt out of strict checks
Expand test to ensure property access on object literal has correct  behaviour
Accept new baselines
Handle special case of 'void' type arguments for covariant type parameters
Allow relative imports of '.js' files when `--noImplicitAny` is disabled (#18489)
Add comments
Use `find` array helper (#18557)
Stop requiring that the full range of a declaration fall within the selection
Handle contravariance in type inference
Accepted baselines.
Add quick path for computing array variance as it is already known
%s/getTemplateObject/makeTemplateObject
init progressbar dependencies within host start to avoid execution in a browser context (#18554)
Use dedicated marker types for variance determination
Removed duplicated JSDoc for TypedArrays and ArrayBuffer. (#18555)
TypedArrays: fixed find and findIndex callback param obj type. (#18493)
fix: Add missing opening quote (#18534)
Ensure that emitter calls callbacks for empty blocks (#18547)
Introduce --strictFunctionTypes mode
Remove extra OutliningSpan and simplify regex
Refactored out RegionRange
Revert spread-falsy-union/fix spread of primitive
Combine and simplify regex
Restructure handling to TI messages to enforce exhaustiveness
Conditional declaration (#18506)
Restore single-token tests
Move RegionRange to private scope
Re-enable extraction of single tokens
Remove mistakenly added test file
Update tests with improved spread-falsy-union rules
Refactor truthy-spread-union creation for performance
Make formatOptions optional in GetEditsForRefactorRequestArgs
Accepted baselines.
Remove freezing behavior from tagged template helper.
Let the RWC harness iterate over files instead of building one big file (#18416)
Only decrement activeRequestCount on SetTypings responses
Better-scheduled parallel tests (#18462)
Update assertion: symbol in union type may be a Function (#18483)
Explicit fall-through.
Add name to amd definition in umd module if present (#18479)
Accepted baselines.
Add a test case for conditional expressions just in case.
Accepted baselines.
Parenthesize new'd expressions based on the leftmost node (or the first node that is a call expression).
Accepted (incorrect) baselines.
Added printer test for 'new (f().x)'.
Handle undefined `symbol.declarations` in `cloneSymbol` (#18474)
Cleanup getDiagnosticsForProject (#18151)
Cleanup navTo (#18150)
For completions of union, exclude types with methods (#18124)
Allow to access `exports` from inside a commonjs module (#17745)
Simplify some code in `getSymbolAtLocation` (#18470)
Allow template string with no substitutions to be used as a string literal type (#18452)
Use removeDefinitelyFalsyTypes for building partial type
extractMethod: Don't try to extract an ExpressionStatement consisting of a single token (#18450)
Add error for using generalized expressions with export assignments in ambient contexts (#18444)
Don't normalize whitespace in fourslash tests (#18447)
In `isInPropertyInitializer`, don't bail out at a `PropertyAssignment` (#18449)
Add files as one batch to preserve errors
Support '// @ts-ignore' comments in .ts files
Properly report external filenames
Actually be able to run RWC tests in parallel (#18453)
Update tests and baselines
Improve naming of getPartialTypeFromFalsyUnion
Allow all possibly falsy types in spreads
Update spread tests for booleans in spread types
Allow booleans in spread types
Only introduce return properties at the top level
Stop preventing extraction when a type parameter wouldn't bind
Call getShorthandAssignmentValueSymbol rather than getSymbolAtLocation
Accept new baselines
Update test
Remove intersections of object and nullable types from union types
Make isJavascript parameters required
Use createMissingNode for sentinel node
Test:javascript signature instantiation w/insufficient type args
Don't count a write-only reference as a use (#17752)
extractMethod: Support renameLocation (#18050)
Add tests
Forbid extraction of empty spans
Simplify event sent on background project update since its anyways just to update the error list
Add missed baselines
Don't parse param init when = is required but missing
Fail spec parsing lambdas on parameter missing a =
Should not remove the reused resolutions in the file when file contents have not changed.
enclosingDeclaration can be undefined within getAccessibleSymbolChain (#18400)
Change typed array signatures (#18367)
fix #18225, fix error message on abstract class instance (#18368)
Test:contextual typing of arguments obj in JS files
assignContextualParameterTypes handles arguments object
Accept new baselines
Add tests
Higher order inference for mapped, index and lookup types
Care about esnext where we look for es2015 (#18331)
Remove bisect.cmd, remove reference to missing dts, update usage (#18353)
Add tests
Preserve intersections on the source side in type inference
Change wording of scope description (#18342)
In import code fix, don't treat a re-export as an import (#18341)
Do not create map just to store empty reference files. Also update file as changed if file text is same but it had invalidated resolution
Add simple baseline tests for insertion positions
Accept new baselines
Update test
Only track flow analysis stack depth
Add test case to verify correct resolution file is picked when current resolution file is not removed but higher precedence file is created
Remove trailing space from emitLeadingComment
Delete staticAssertNever in favor of assertTypeIsNever
Separate counters for stack depth and visited flow nodes
Add `never` helper function (#18287)
Improve insertion position of extracted methods
Rename visitedFlowXXX to sharedFlowXXX
Revert changes to other baselines
Limit the resolution invalidation to max number of files as invalidation for larger cache might take more time than to just recalculate resolutions
Update baselines
Inline variable to aid control flow
Remove unnecessary check in emitNodeList (#18327)
Report error on first token of excessively large function or module body
Update baselines
Test: parsing of two-line @typedef jsdoc
Revert "Make permittedJumps a parameter to eliminate save-restore pattern"
Correct copied comment
Simplify and correct PermittedJumps computation
Make permittedJumps a parameter to eliminate save-restore pattern
Correct permitted jumps check
Eliminate intersections of unit types in union types
Explicitly avoid canonicalizing paths during configuration handling (#18316)
Return configured project being closed by config file
Handle the combination of a write and a void return
When loading a module from node_modules, get packageId even in the `loadModuleFromFile` case (#18185)
Ensure that emitter calls callbacks (#18284)
Refactor parsePostfixTypeOrHigher
Update pretty baseline changed by #17675 (#18320)
Document assignment to aliasSymbol in getUnionTypeFromSortedList (#17434)
Allow trailing newline to have fake position (#18298)
Update README.md
Update README.md (#17714)
fix initialization of shouldCreateNewSourceFiles (#17686)
Test Literal-typed computed property names in obj literals
Object literals computed property names allow literal-typed expressions
Don't get typings for projects with disabled language services
Object.getOwnPropertyDescriptor() returns 'undefined' if property descriptor not found. (#18148)
Add typedef declaration space, unify typedef name gathering (#18172)
Adds comment
expose isExternalModuleNameRelative and moduleHasNonRelativeName (#17971)
Update the test cases for project changed event since it doesnt apply to the edits to open files
Add and fix some AST Node parent types (#18200)
ts.server.ProjectService.closeConfiguredProject returns true on success. (#18180)
Added only the source file (#18175)
Enable interface-over-type-literal lint rule (#17733)
Don't provide string literal completions for string enums (#18288)
Rename isStartOfType parameter used by isStartOfParameter
Support navTo for special assignment kinds (#18154)
extractMethod: Don't try to extract a single token (#18090)
Support find-all-references for `default` keyword (#17992)
getFormattingScanner: Ensure scanner is closed, and avoid global variables (#18293)
findAllReferences: Handle root symbols of binding element property symbol (#17738)
Get quickInfo from a contextual type if possible (#18119)
Support special JS property assignments in doc comment templates (#18193)
Allow undefined/null to override all parameters (#18058)
Do not consider UMD alias symbols as visible within external modules (#18049)
Emit comments on system export default expressions on the surrounding export call epxression instead (#17970)
Emit updated export declarations when transformed from export * (#18017)
Allow singleline string writer to be recursively used (#18297)
Accepted baselines.
Update emit for tagged templates to use a per-site cached template objects.
Invalidate resolution of the failed lookup only if its one of the default extension or is one of the failed lookup location without that default extension
Better log for update graph and delay operations
Test:disable lookahead in isStartOfParameter
Add explanatory comment
Add `debugName` property to `Rule` (#18289)
Allow quoted names in completions (#18162)
Reduce the file size for npm install test
Update how we get project/script info so that it doesnt start unnecessary update graph
Disable lookahead in isStartOfParameter/isStartOfType
Test new JSDoc surface area
Minor changes
Make getJSDocTags public too
Add files to change set instead of delay reloading project on "change" command
Resolution is valid unless it is invalidated
Limit the number of unanswered typings installer requests
Use canonicalized forms when comparing signatures
Document ThrottledOperations.schedule
Revert to use refcount to keep track of directory watchers for failed lookup
Add getJSDocTypeTag to get `@type` tag
Make top-level getJSDoc* functions public
Add test for #14574 (#18024)
Improve baseline of complexRecursiveCollections
Remove added type predicates
Add test
Disable control flow analysis in excessively large statement blocks
Accept new baselines
Optimize caching of type literals
Improved caching scheme for anonymous types
Test to verify calls to isProgramUptoDate return true when there is no change in compiler options
Add depth limit to recursive type reference id generation
Update tests
Simplify return type parsing (#18206)
Make getPostfixSyntaxKind easier to read
Expand type references recursively in cache key
Remove the configured project if on next open file if it has no open files instead of immediately when closing last open file
Reduce storage of maps/sets for failed lookups
Added logic to check for EOF when creating a missing node.
Update generated files (#18173)
Print number of files in the project when printing project
Update tests
Propagate isRestParameter through symbol instantiation (#18087)
Watch node_modules if possible
Watch for the automatic types that included as part of type resolution
Resolve only once in the given directory for name
Watch failed lookups recursively to reduce number of directory watches Also we dont need to watch type roots any more
Script infos while opening/closing shouldnt mark project as dirty if the contents dont change
Handle watches of missing directories and make project the module resolution host
Reduce number of watches for failed lookup locations as part of module resolution
Refactoring to watches and caching of system such that we minimize function expressions Also unified watcher info logging
Add regression test
Update Authors.md
Cache contextual type for || operator to avoid exponential compile time
Handle indexed access types in getSymbolAtLocation and findAllReferences (#18149)
Follow up on #16223 cleaning up Array declarations (#18116)
Remove `largeSource` argument to `convertMap.fromSource` (#18098)
Optimize array operations to reduce memory footprint
Add postfix [] ! ? type parsing tests
Parse postfix [] ! ? at the same precedence level
Allow cancellation during extract method's symbol walking
Don't crash when a JS file appears in an inferred context
Test jsdoc:... binds tighter than *n* postfix tokens
JSDoc:... binds tighter than *n* postfix jsdocs
Add an ExpandingFlags const enum (#17740)
Add perf comment
Test coupling of type parameters
Test different parameters on classes and methods
Test that the return type of the extracted method counts as usage
Test that type parameters used in constraints are passed along
Document failure to handle type parameter shadowing
Test that in-scope type parameters are not passed explicitly
Switch from .js to .ts so that baselines are syntactically valid
Delete unused baselines
Comment out headers in Extract Method baselines
Handle loose type parameters in Extract Method
Codefix jsdoc types for anything with a .type
Simplify isContextSensitive (#17722)
Use getPropertyOfObjectType to get a superclass property (#18113)
Avoid climbing ancestors in `getAnyImportSyntax` (#17832)
Inline checkLiteralExpression (#17720)
Revert "Handle indexed access types in getSymbolAtLocation and findAllReferences (#17787)" (#18111)
Don't issue a use-before-declared error for a property that exists in a superclass (#17910)
Accept new baselines
Check all properties are present before checking types in relationships
Handle indexed access types in getSymbolAtLocation and findAllReferences (#17787)
Test:jsdoc codefix for variable-like declarations
Provide jsdoc type code fixes for all variable-like decls
Generalise empty object literal property access fix to all object literals
Remove template strings in checker.ts (#18016)
Detect bad plugins and work around them
Simplify getAccessibleSymbolChain (#18053)
Explain boolean exception in getIndexedAccessType
Move lone test case into central test file
Always use case-insensitive fs operartions for RWC (#18046)
Test:T[keyof T] =/=> T[K] where K extends keyof T
Disallow T[K] = T[keyof T] where K extends keyof T
Move browser-resolve to devDependencies
Add test for #18071
Use visitNode (#18059)
Use isPartOfExpression in extractMethod, not isExpression (#18047)
`moduleAugmentations` may contain an `Identifier` (#18009)
Visit destructuring computed names (#18052)
Don't try to extract `import` to a method (#18025)
Test for action description of code actions, and simplify description for extracting method to file (#18030)
Add regression test
Accept new baselines
Perform indexed access type transformations consistently
Defer mapped type indexed access transformations
Call dynamic import transform on expression used by export equal statement (#18028)
Give mapped type properties a synthetic declaration name (#18023)
Escape \0 followed by a number as a hex escape to avoid printing an octal literal (#18026)
Added additional test
Test:string enum in element access
Allow string enums in element access
Switch to arrow for ts class wrapper IIFE
Simplify `isExpression` check (#17741)
Mark some arrays as readonly (#17725)
Allow ! and ... as start-of-type tokens
Test:allow more jsdoc types in type parameter lists
Add helper functions for adding an item to an array only if it's not already contained (#17833)
Update LKG (#17993)
Update generated files (#17995)
Test:jsdoc nullable syntax legal in type arguments
Parsing:Allow QuestionToken as start of type
Expose isSourceFileFromExternalLibrary (#16112)
Ports #17983 (#17986)
Comment getTypeReferenceId and getRelationKey
Update baselines
Test performance improvement:nested reference skip
Revert image label change (#17981)
Accepted baselines.
Add tests to verify project changed event sent
For JSX Attributes, map over unions of props for contextual types (#17790)
Edits from aozgaa review and simplify regex
Allow use before declaration for export= assignments (#17967)
Region now starts at beginning of comment, and reviewer edits
Reuse exiting getFirstIdentifier function
Retrieve type parameter constraint using getConstraintFromTypeParameter
Add support for walking IndexTypes, IndexedAccessTypes, and MappedTypes.
Update SymbolWalker tests
Use Maps to store visited types and symbols
Reshape SymbolWalker API
Make SymbolWalker internal
Rebase SymbolWalker change onto master
Add api in builder to get changed files and use it to send project changed event
Add test for #16955 which simulates npm install
Update the failed lookup watches without doing lookups. This helps in not having to deal with duplicate locations and checking if there exists watch Anyways the watches are refCount based so we would just addref and remove ref on the same watches
In Server when polling the file stat's do not send changed event in case the file doesnt exist.
Adding test for #16456 to verify watched directories in case-sensitive and non sensitive file system and fixing caching
Adding test for #16329 to verify the caching of file system when opening file
Update imaged with Java 8 and other patches (#17965)
Optimize relations for type references with unconstrained type arguments
export UsageEntry used by already exported functions 🌹 (#17853)
Add test for region spans
Ensure returned spans are ordered by start
Exclude region delimiters in multiline comments
Ensure region boundaries are entire line
Clean up unused functions
Add regex sweep implementation
Add support for custom outlining regions
More PR feedback work
Simplify resolveBaseTypesOfClass (#17918)
Ensure string enums are generated in protocol.d.ts (#17914)
add strictTuples flag giving tuples known length
Add regression test
Accept new baselines
Add comment
Accepted baselines.
Actually misspell the property name.
quickInfo: Don't check for `type === undefined`, check for `any` (#17815)
Clean up other statement to match style
Style changes and cleanup
Only give suggestions when the name is an identifier.
Add release-2.5 to covered branches
Add test that demonstrates bug
Test getConstraintOfIndexedAccess fixes and update baselines
When getting default project from session, get it only if the script info is not orphan Since the closed script info's that are orphan arent removed immediately but on next open request, treat the orphan script infos as if they are not present in the session
Update .npmignore (#17905)
Accepted baselines.
Try to provide a spelling suggestion when object literals have excess properties.
Ensure that property suggestions are correctly escaped.
Remove the unused function from the Project since builder has this logic now.
Made updates to not expose methods/types that arent needed.
Accepted baselines.
Added test for leading underscore property name suggestions.
Deduplicate inputfiles before running RWC tests (#17877)
Revert public API changes to logger (#17899)
Update based on feedback
Type parameters from class should not be in scope in base class expression
respond to comments
remove duplicate verify
Remove debug assertions due to invalid syntax in generators transform
Treat explicit imports from `node_modules` as external library imports (#16364)
Simplify mapped-type handling in computeBaseConstraint
Test getConstraintOfIndexedAccess fixes and update baselines
Remove duplicate function (#17807)
test if `onlyMultiLine` flag changes answer
cleanup
clarify `JsxText` handling
Use simpler indentation for comments
add tests
rename tests
update test
`JsxText` has no leading comments
Addressed code review feedback.
Updated version in 'src' as well.
Have `grammarErrorAtPos` take the source file of its argument (#17834)
Replace 'isSourceFileJavaScript(getSourceFileOfNode())' with 'NodeFlags.JavaScriptFile' (#17835)
Array arguments to `concat` should be `ReadonlyArray`s (#17806)
Ignore scripts for types packages
fix some copy-pasting error (#17766)
Bump version to 2.6.0.
Indexed-assignment readonly err is not unknownType
Remove unnecessary call to `getApparentType` (#17788)
Added host.useCaseSens..., memoized getDefaultLibFileName.
add test
Change function name to camelCase (#17751)
consolidate isInComment and getRangeOfEnclosingComment
dont compute preceding token twice
`findPrecedingToken` handles EOF child more gracefully
findPrevious changes
cleanup
Actual fix + test
Use checkExpression to resolve symbols
Filter + log undefined elements from the codeActions array
Remove unused `UseTypeAliasValue` flag (#17779)
In services, show the aliasSymbol for a type even if it's not accessible in the current scope (#17433)
Make the failedLookuplocations to be readonly array
export interfaces used by exported functions 🌹
export ScopeUsages 🌹
Update to PR feedback
Accepted baselines.
Just track the local names of identifiers instead of ever using symbols.
Changed check for default library by first checking hasNoDefaultLib, second library path and third name of file.
Excluded the default library from rename service.
Introduce the concept of a Dynamic File
Update based on feedback
More work based on feedback
Accept missing baseline updates for #13721
Updating according to feedback from PR
Simplified mutate map options
Add explanatory comments, consolidate main body
Make exportSymbol public (#17457)
simplify fix as suggested by @ahejlsberg
Add regression test
No contextual return type when type is circular
loosen number index check, fixes #15768
Add test case for nested object spread / methods
Add missing visitNode call to object literal members
Make compiler options which map to a flag case-insensitive again (#17755)
More work on PR feedback update
PR feedback
More work on feedback from PR
Comment update
Accepted baselines.
Added test.
Added tests, pr feedback
More updates per PR feedback
Add support to infer the quote style for import quick fixes
Cleans up and adds nested case to test
[Master] fix 16407 - LS in binding element of object binding pattern (#16534)
Add "preserveSymlinks" option (#16661)
Use `hasModifier` and `hasModifiers` helper functions (#17724)
PR Feedback
Use isReadonlyArray
Use the function stack!
Style fixes
Style fixups
Do not inline sourcemaps in jake - source-map-support can't handle it (#17732)
Generalize to nested arrays and refactor
Various fixes
Various fixes
More work on PR feedback
More updates based on PR feedback
fix end-of-file assert failure
Accepted baselines.
Added test for class/namespace merging with an ESNext target.
A function should be context-sensitive if its return expression is (#17697)
Treat NoSubstitutionTemplateLiteral same as a StringLiteral (#17704)
Add test for #16144 (#17712)
Test:property access respects readonly index signature
Lower RWC Harness Memory Overhead (#17692)
Add readonly check to property access of index signature
add fourslash test
Test:type predicate uses correct index to report errors
Add simple version of `chooseOverload` for common case of single non-generic signature (#17589)
For duplicate source files of the same package, make one redirect to the other (#16274)
Remove unused internal utilities (#17380)
Add a leading space on binary operator token trailing comments (#17691)
Don't check function expression grammar if this is SkipContextSensitive (#17698)
findAllReferences: Type parameter is not globally visible (#16419)
Session: don't return undefined if a response is required (#17165)
Inline childFromLineNumber and childFromCharOffset (#17018)
scriptVersionCache: Export less (#17202)
Retain comments inside return statements (#17557)
PR Feedback
TSLint now realizes when you attempt to use a rule which is not present (#17688)
Create synthetic default exports for dynamic imports (#17492)
Add parentheses:clarify evaluation order of &&/||
Feedback from the PR
Use isTypeAny instead of checking flags directly
Add test case from #14439 (#17627)
Remove unnecessary check that type is ObjectType (#17418)
Add a seperate cache for the all attributes version of the jsx attributes type (#17620)
Add tests for #15358 (#17664)
validateSpecs: Use array helpers (#17275)
Add specific weak type error for callable types
Simplify server logger (#17271)
Don't count self-reference when setting `isReferenced` (#17495)
tsserverProjectSystem.ts: Remove unnecessary 'export's (#17201)
Deduplicate unresolvedImports (#17248)
Convert two arrays to readonly (#17685)
MultistepOperation: Don't need 'completed', just use `requestId === undefined` (#17173)
Add lint rule to check that `Debug.assert` calls do not eagerly interpolate strings (#17125)
Simplify parameters to updateProjectStructure and updateErrorCheck (#17175)
fix #16567: better coloring on light theme terminal
fix lint errors
fix lint errors
Get semantic diagnostics for the program from builder so that it caches the errors of unchanged files
supressFormatOnKeyInComments
Address CR feedback
Implementation for invalidating source file containing possibly changed module resolution
Partial implementation for invalidating the program (instead of source file as that would involve more work) so the files are picked up
Implementation of watching the failed lookup locations
Add test that fails because we dont watch module resolutions failed paths
Test for the module resolution caching
Use cache for module resolution even in watch mode
Switch back to have tsc.ts the only file thats different in tsc.js generation now that api has tests
Refactoring so that instead of just using from tsc --watch the new api is accessible all the time
Add tests to verify emitted files
Modify the api in builder so that it tracks changed files
Emit tests
Add tests for the tsc --watch
Refactor watched system from tsserver tests so that tscLib watch can leverage it
Refactor out the tsc logic into another file so we can use that to test it out
Use builder to emit the files from the tsc.js
Move the builder to compiler directory
Refactor so that builder handles only source files and program
Initial refactoring so that watch from tsc follows the tsserver projects
Program cannot be reused if the missing file is now present Also dont update filesByName array just to update missing file paths
Make the host cache store the fileName instead of undefined for the missing host files
Do not update graph in builder if compile on save is not on
Refactoring of the builder
Update weakType test + baselines
Weak type errors for signature-only types too
Restrict parsing of literals and their expressions a _lot_ more (#17628)
Add regression test
Propagate type comparer function in contextual signature instantiation
Add tests
{ [P in K]: T } is related to { [x: string]: U } if T is related to U
Accepted baselines.
Made the first-declaration check conservative in the TypeScript transform.
Accepted baselines.
Added failing test for a before-transform that indirectly replaces a namespace declaration.
Accept JSDoc cast comment baseline
[Master] fix 12985 emit leading and trailing comment around binary operator (#16584)
Extract Method (squash)
implementation comment
exclude node_modules unless explicitly included
Use findAncestor in more places (#17601)
Adds support for inferred project isolation by projectRootPath
Test:infer from related types only
Only infer from members of object types if the types are possibly related
Amend comment about explicitly setting catch clause variables to 'undefined'.
Set a high stack trace limit in command-line and server scenarios (#17464)
Add tests
Accept new baselines
Typo
Properly handle constraints for types like (T & { [x: string]: D })[K]
Adds missing test cases
Addresses CR comment
Add regression test cases and rename test
isTypeAssignableToKind:Chain isTypeAssignableTo calls
Improve name:isTypeAssignableToKind+cleanup TODOs
Accept baseline
Move comparer types to public namespace (#17437)
Accept baselines
Addresses CR feedback
Update LKG (#17538)
Missing import codefix: Take scoped packages (@foo/bar) into consideration
Allow JSXAttribute to be IdentifierName (#17466)
Generate diagnostics without a leading comma, retain old spaces (#17534)
Accept new baselines
Add tests
Defer indexed access type resolution in more cases
adds test for try-catch-finally
remove debugger
Removes valid test cases from invalid test case file
Accept baselines
Add tests
Adds transformers for ignored catch parameter
Adds optional catch parameter into the compiler
Add diagnostics
Clean up
Forbid type assertions in '.js' files (#17503)
Replace a 'forEach' with 'find' (#17499)
Forbid non-null assertion in '.js' files (#17481)
Update the test
Added | undefined to properties for watching that can be undefined
dispose the watched wild card directories only if present
jsTyping: Better logging for addInferredTypings (#17249)
processDiagnosticMessages: Simplify code and emit (#17463)
Add check to ensure that property access suggestions are only performed on the accessed property.
Added failing test case.
Remove debugger;
Remove double 'if' (#17436)
Add gulpfile support
Types Map WIP
Remove unnecessary references in 'src/harness/tsconfig.json' - they're already referenced in 'src/harness/codefixes/fixes.ts'.
Updated baselines.
Added/augmented tests.
Add another use of the Comparer type (#17438)
Added codefix for replacing qualified names with indexed access types.
Add test case for code fixes on qualified names used instead of indexed access types.
processDiagnosticMessages: Simplify check for uniqueness of names (#17331)
Added assertion.
Accepted baselines.
Provide a more helpful error message when incorrectly using qualified names in the case of 'Type.propertyName'.
Accepted baselines.
Add some missing `| undefined` in parser.ts (#17407)
Added test case.
JsTyping: Remove "safeList" global variable (#17304)
createMissingNode: Only assign '.text' or '.escapedText' on nodes of the correct type (#17439)
Add regression tests
Add missing check in getIndexedAccessForMappedType
Accept new baselines
fold into one check
Make isTypeOfKind delegate to isTypeAssignableTo
Missing import code fix - include export assignment properties when looking for module exports  (#17376)
Escape string literal before looking it up in enum's symbol table (#17441)
Change isStartOfParameter to be more general (#17431)
Make safelist an instance field of ProjectService (#17307)
Tests for #17371 (#17373)
Update baselines
Address more PR comments
Add regression test
Only check excess properties on final types from inference
Add comment clarifying isNotNeededPackage (#17321)
Retain literal type for prefix plus on number literal
Use ReadonlyArray in utilities.ts (#17413)
Actually let you disable colors with jake (#17414)
Rename `symbol.name` to `escapedName` and make `name` unescaped (#17412)
Remove unnecessary `MapLike`s in commandLineParser (#17324)
Update baselines
Address PR comments from Andy
generateTSConfig: Remove unnecessary variable (#17330)
Add 'name' property to Identifier (#17329)
Revert #17074 (#17326)
Make the 'publish-nightly' target run tests in parallel.
Test:use type param constraints for computed prop types
Use type param constraints for computed prop types
Add SpaceBetweenOpenParens rule
getResolvedModule: Don't need to call hasResolvedModule (#16423)
Use scanner position instead of node members
Add repro
Accept new baselines
Add tests
Much simpler fix, rolls in really old fix, removed unused comment
Given T extends Foo, make Partial<T> related to Partial<Foo>
Indent list of open files (#17255)
Add current time to tsserver logs (#17268)
Tests covering the bug
`@param` parsing:const enum to improve readability
Test: jsdoc `@param` type literals
Update JSDocParsing unit test baselines
Parse jsdoc type literals in params
Convert Array to ReadonlyArray/Push in commandLineParser.ts (#17323)
Cleaner path splitting, refine file extension and case sensitivity handling
simplify isFileSystemCaseSensitive test (#17169)
Make many 'static' variables readonly (#17306)
Remove duplicate `emptyArray`s (#17305)
Added tests
Check the return type of type guard functions
Added explanation comment for excluding files.
Simplify use of array helpers (#17301)
Remove duplicate helper (#17296)
Bugs in missing import codefix
Binder: handle JS property assignment that comes after a method declaration with the same name (#16830)
MultiStepOperation: No need to create a 'NextStep' object, just use self as the NextStep (#17174)
Appropriately parenthesize keyof and typeof queries in array types (#17272)
Add 'clear' helper (#17209)
Make NodeArray readonly (#17213)
Introduce a ReadonlyMap interface and use it in core.ts (#17161)
getJSDocParameterTags: no need to handle JSDocFunctionType, just return undefined (#16837)
Add unknown property to test of contextual this type
ParameterDeclaration: `name` may be undefined (#17074)
Add jsdoc to getNullableType now that it's public
Update es5.d.ts
Use jsdoc casts (#17251)
Added node_modules path check on getTodoComments method.
Reduce the number of watched config files by watching the chain only in case of inferred root
Update name of `getIntendedTypeFromJSDocTypeReference`
Improve naming and style a little
JSDoc:Object<string, T> creates index signature
Contextually type this in object literals in JS
Make sure not to truncate the stringified type from typeToString
Issue template: Recommend to run `tsc` directly (#17246)
JSDoc codefix:getTypeFromTypeNode >>> typeToString
Update jsdoc codefix tests; test function(...) syntax
Reuse stored types for any[] and Promise<any> instead of creating new ones (#17179)
convertFunctionToEs6Class: Bail if this is not a JavaScript file (#17149)
Added another todo as now we are watching too many files
Minor cleanups in builder (#17208)
Codefix for ?! pre/postfix JSDoc types
Codefix for Array.<number> -> Array<number>
Transform trees rather than produce strings
Improve test of jsdoc literal type parsing
Combine the logic to find config file as well as the watch. This should speed up the file open scenarios where the file belongs to same configured project as we would use cache to answer those fileExists answers
Use map for configured project instead of the array
Instead of watching directories, watch tsconfig files of inferred project root
Refactor root files addition/update for non inferred project
Remove the duplcate error about no input files found
Some refactoring to combine files removal from inferred project
Logging of the watch add/remove/event
Add codefix for jsdoc types in Typescript
Add simple jsdoc code fix changes
`readFile` may return undefined
Parse more types in JSDoc function() syntax
Address more PR comments
Update baselines
Better JSDoc generic errors and faster isInJSDoc
Improve JSDoc function checking
Remove JSDocConstructor/ThisType and just use named parameters
Update baselines
use single instance of getCanonicalFileName
Add fourslash tests for function(new/this:T) syntax
Combine moduleHasNonRelativeName with isExternalModuleNameRelative (#16564)
Add missing word in error message
Remove unnecessary 'ts.' qualifications (#17163)
Update baselines
Test JSDoc parsing using TS parser
Allows the delayed update graph and project structure which helps in batching the updates when there are multiple files added/removed/changed
Parse JSDoc types using the normal TS parser
Use array helpers instead of 'reduce' (#17172)
Remove unneeded ExportType and ExportNamespace flags (#16766)
When adding completions for a module, don't get the type of the module if not necessary. (#16768)
displayPartWriter: Use try-finally to clear (#16807)
getSingleLineStringWriter: Use try-finally, and only one stringWriter (#16751)
getApplicableRefactors: Don't return undefined response (#16773)
Add logging to discoverTypings (#16652)
Clean up getJavaScriptCompletionEntries (#16750)
Add assertion to computePositionOfLineAndCharacter (#17121)
TODOs for the scheduling update graph and referesh projects
Remove the done TODO
Update baselines
Add test for export variable statement
Transform class member of export class declaration
Update tests
Add a bit more validation around comments
Indent filesToString (#17130)
Add assertion that module / type reference names are defined (#17124)
buildTreeFromBottom: Really simplify loop (#17105)
getSwitchClauseTypes: exit early if getTypeOfSwitchClause is undefined (#16865)
Use the cached file exists/directory exists for configured project since we watch the needed files
Cache the read directory results so that it doesnt end up reading it all the time
Convert most of core.ts to accept ReadonlyArray (#17092)
Use platform agnostic newline
Addressed feedback.
Remove incorrect comment
format error message with newlines
Rename SignatureFlags enum and improve its usage
Update types instantly when the type root changes.
Only update file list when there are changes in the watched directories
Make enum private and fix fillSignature predicate
Test:better error for wrong return token (: vs =>)
Better error for wrong return (: vs =>) in types
In getDeclarationSpaces, treat a type alias as a SymbolFlags.Type, not a SymbolFlags.Value (#16624)
Switch fillSignature boolean params to single enum
buildTreeFromBottom: simplify loop (#17091)
Use array helpers in more places (#17055)
Consistently use `isInJavaScriptFile` helper (#17075)
Completion for default export should be '.default' (#16742)
Correct FileWatcherEventKind in server polling method
Add tests and update baselines
Treat both  object and Object the same
Minor cleanups in scriptVersionCache (#17021)
Improvements to LineIndex.edit (#17056)
Handle the deleted file in update graph better, so that in next update it is possible to schedule the update graph of project
Declare 'sum' so that it doesn't require type arguments.
Code fix to remove unused import should preserve default import
More detailed error logging in Fourslash
Applying edits in Fourslash can cause caret to move off-range
Type-check `sum` (#16823)
Remove ILineInfo type (#17017)
Optimize wildcard watchers and config directory watching as now we have missing file watching as well We dont need to explicitly watch config file directory as it will be watched: - if there was no files specified, in wild card directories - if there were files specified as missing file (if the file wasnt present)
When config file is deleted, apart from removing the projecty, reload the configured projects for open files from that project to ensure to pick them by another config file that can be present in parent directory
Reload the configured project only once even though there are multiple files open from that project
Update the todo list
Remove the functions to trigger watch callbacks now that it is auto on reloading FS
Move the server file system to handle watches on file/folder create, update and delete This will ensure that the calling of watches doesnt rely on writing test correctly
Add project roots in the list of root files even if they arent present on the disk This helps in reporting errors as well as syncing of the configured/external project when the files are created
Restructure updating the configured project from disk and actual project update Also reload the projects when extra extension in the host change
When opening a file, if it is using existing project, there is no need to update the project by re-reading the config file This will improve the opening file perf for file opens from same config project
Improve performance of JSDoc tag utilities (#16836)
Remove `createFileMap` (#16810)
Remove EmptySafeList (#16647)
Allow to narrow the type of an import (#16658)
Allow visitors to return undefined
Cast identifier names to string in lint rule (#17027)
Add tests and update baselines
import keyword a left-hand-side expression
LineNode.add: return value never used (#17016)
Minor cleanups to ScriptVersionCache (#16983)
Use decodeSpan more (#16990)
Minor cleanups to EditWalker (#16980)
Minor cleanups to LineIndexSnapshot (#16981)
Inline `getDestructuringParameterName` (#16973)
Use Map<true> for sets (#16972)
Have `isObjectBindingPatternElementWithoutPropertyName` return the binding element (#16956)
Use 'push' and 'pop' methods instead of using array.length (#16979)
Clean up findChildIndex (#16984)
Never return undefined from `getExportsOfModule` (#17013)
Clean up creation of 'args' in client.ts (#17009)
Enable "object-literal-shorthand" lint rule (#16987)
Add missing docs for module: 'none' in tsc --init
gulp-typescript does handles config extension correctly now (#16992)
Use correct source root for tests (#16982)
Remove duplicate entries from tsconfig files (#16991)
Start using a union for FunctionLike things (#16988)
Created a branded type for identifier-escaped strings (#16915)
i++
non-default args
Add package lock to gitignore (#16770)
remove `fixCaretPosition`
#15214 Remove nonpublic members from destructuring completion lists
consolidate function call
update tests
update caret position based on edit range
remove BOM
Test:spelling suggestions for more types
spelling:getPropertiesOfType instead of objectType
Dedupe some utility code
respond ot comments
Update RWC runner
check error early and return null to indicate that everything is going well
Remove unused code in bindWorker
Spelling code fix:suggestions from apparent type
Add tests
Address PR feedback
only format open curly up to the open curly
Handle `depth` in all readDirectory implementations (#16646)
Add missing file unit tests
Watch files through the host
Confirm method is defined before calling
Clean up file watchers on project close
Track missing files
Update error case check
getSymbolOfEntityNameOrPropertyAccessExpression: combine common code from PropertyAccessExpression and QualifiedName cases (#16827)
Comments incorrectly read 'TypeFlags' instead of 'ObjectFlags' at some places
Add alwaysStrict option (#16562)
Clean up uses of ensureScriptKind (#16714)
respond to comment
Replace FileMap with Map where there is no keyMapper (#16724)
disable spaceBeforeOpenCurly if newline rule is enabled
Remove duplicate switch cases (#16721)
findAllRefs: Find string references inside of template strings (#16723)
only format opencurly if no intervening tokens
Provide better services for incomplete generic calls (#16535)
visit question token
remove unecessary check
Consistently use variable mangledScopedPackageSeparator instead of magic "__" string (#16713)
respond to comments
Add property comments as well
fix #16702: polish type predicate error message
Updated links to use https and avoid redirects
Add early bail out for token nodes
Code cleanup in jsTyping.ts (#16632)
#16300 #16301 Diagnostics for default export in namespace
Update symbols baselines from re-ordering of the signatures
Add tests and update baselines
Simplify forEachChild
Reorder promise.all signatures
clarify comment
fix and add test
Ignore jsdoc when inferring rest args in JavaScript
rename variables
Added test for unused typeparameters in a typealias declaration
Follow symbol through commonjs require for inferred class type
cleanup
add test
unspoof call expression start in iife
Short-circuit getTokenAtPositionWorker
Enquote undefineds.
More efficient recording of intermediate results in type relations
`hasProperty` doesn't need to be generic (#16650)
add and update tests
format space before single-line blocks
format on open curly
Add tests
Use custom error message in Debug.fail (#16625)
Emit class annotation comment on downlevel classes
rename test
update tests
apply formatting after parse error
Add missing newline in --pretty diagnostics formatter
Add semi-colon
Address comment: fix comment
Address PR
In TypeScript code, never bind JSDoc normally, just set parent pointers (#16555)
Allow running in strict mode (#16557)
Set the structureReused to be safemoudles when dynamic import change
Add tests
Wip-fix incremental parsing
Update the builder dependency graph only if it was created. This makes sure that we dont create this graph just because project was updated
Add comment to new code in hasExcessProperties
Add comment for deletion of orphan script infos in file open
Use first declaration, not valueDeclaration
Move the cleanup of script infos to next file open This helps in reusing script infos even if the project is closed but next open recreates the same project
Test:error span for spread prop in excess prop check
Improve excess property check for spread property
Remove undefined from optional spread properties
Switch to sameMap
combined logic in parseParameterOrPropertyTag (#16481)
Add tests and update baselines
Add "undefined" as return type
Remove unnecessary get type from JSDoc comment
Test:correct parens around keyof in decl emit
Add parentheses around keyof in declaration emit
Test:declaration emit of optional parameter props
Add isOptionalUninitializedParameterProperty
Simplify generic function call error reporting (#16439)
just update issue template
Use checker for decl emit:optional parameter props
Test @typedef in @typedef-only JS files
Add JSDoc to EOF token to catch missed @typedefs
Address PR
Update version
Cleanup script infos that are not part of any project when the project is closed or inferred projects are refreshed Also dispose some pointers so that the closures get disposed with project and script infos
respond to comments
getPossibleSymbolReferencePositions: Always use full start (#16420)
Simplify isDeclarationNameOrImportPropertyName (#16421)
Test: Allow ++ after non-null assertion
Checking references skips assertions+parentheses
Don't bind JSDoc namespace in a TS file (#16416)
Rename `isTypeParameter` to `isTypeParameterDeclaration` (#16422)
Update jsdoc of new function
Consolidate getting type parameter declarations
Cleanup getTypeParametersFromDeclaration et al
Returned generic function is instantiated correctly
Type params introduced by @template are in scope
Add test
Add --noStrictGenericChecks compiler option
Support completions in destructuring in for-of (#16454)
Add isForInOrOfStatement utility (#16455)
Document highlights for a JSX tag should just be the matching tag, not all references (#16453)
Add tests
Intersection with 'never' type always produces 'never'
Split import into var and type to avoid breaking backword compatability of tsserverlibrary (#16409)
fix offsetting and tests
Suppress brace completion of Quotes in Comments
Convert Extension to a string enum (#16425)
Update baseline
Dont create script snapshots for files that arent source files
request returns span
Add more excess property check tests for unions
Do not check excess properties for multi-discriminant unions
Don't bind JSDoc type parameter in a TS file (#16413)
make indent work with trailing comments
Add hash of project file location to project info telemetry (#16397)
Add fourslash rename, find-all-reference on imported property
Implement LS on string-literal of dynamic import
Correct excess property error on ambiguous discriminated unions
--isolatedModules: Still allow re-export of type in a declaration file (#16399)
rename tests
add tests
revert test changes
Only add underscore in * for-in * for-of * parameters
Support completions for qualified names in JSDoc (#16380)
indent block comments according to first line
Added comments for fresh/regular unique symbol types
comment typo
Improve contextual types and return type checking
Correct pluralization of 'Contain' to 'Contains', made the nodeflag internal.
Include dynamic import during pre-processing needed by VS
Add incremental tests
Remove unneccessary debug.fail as by defualt we will add commonJS module transformation step
Copy PossiblyContainDynamicImport from old source file to new one
Test synthetic properties w/hasExcessProperties
Adjust source map offsets for variables in downlevel async funcs and generators
hasExcessProperty only uses valueDeclaration if available
Test:Block-scoped definition of Promise works
Skip block scope check with no error location
Set typings cache location per TS version
Use --inspect-brk for test debugging
PR Feedback
Accept new baselines
Remove convoluted code that attempts to re-fix type parameters
Test:excess property checks--discriminated unions
Excess property checks for discriminated unions
Update tests and baselines
Always use getPropertyOfObjectType in isKnownProperty
Update authors for TS 2.4
Update generated files
Improve contextual types using jsdoc tags
isInMultiLineComment
Test weak type errors with primitives
Detect weak type errors with primitive sources
Accept new baselines
Infer generic type for lambda with generic contextual signature
PR Feedback
temp
Test returning an infinite type in an intersection
Delay instantiation of signature return type
Support completions for JSDoc @param tag names (#16299)
enforcing curly braces (#16315)
Update baselines
Add tests for JS-inferred rest parameters
Create js-inferred rest params in getSignatureOfDeclaration
Support find-all-references for `export =` of class expression (#16327)
Limit getTypeReferenceType to two passes
Better types from jsdoc param tags
Add support for external file references in source maps
Rename function
Reuse already-computed modification time
Tidy up
Handle missing body case
Enable debug info when running tests
prefix identifiers
Accept new baselines
Refactor refactor
Added tests and improve type of new expression
Remove redundant fourslash test
Ignore nullability in contextual signature instantiation
add tests for trivia
Test spread in unions of null/undefined
update existing tests
Filter nullables after lifting union over spread
add tests
Accept new baselines
Move spreadUnion* tests into conformance suite
Verify JS function is constructor
Add tests
Accept new baselines
Allow contextual signature to be generic
Encorporting feedback
fix #15447: `object` is empty object type (#16290)
Stricter type relationship checking of generic signatures
Wip-report error when sof happen while running in parallel
Undo change and go back to making a copy of leadingComments and trailingComments (#16273)
Add typingsInstaller unit test
Revert "Revert "[Master] wip-dynamic import" (#16264)"
Typos in test cases
JSX Closing tags get priority over other completion types (#15922)
Typeof can refer to a class in a previous file with --out (#16269)
discoverTypings should look at typingSafelist.json values
Make use of array helper functions (#16226)
random commit
Favour exact-match spelling suggestions
Revert "[Master] wip-dynamic import" (#16264)
Update command line
Update baselines from moving out of es2018
Rename test file with ES2018 to ESNext
Remove ES2018 folder
Use ESNext instead of ES2018
Array cleanup (#16223)
Sorted rules alphabetically (#16252)
Preserve type parameters in generic contextual pure function types
Include SymbolFlags.Function in couldContainTypeVariables check
Address minor error messages
program.getSourceFile[ByPath] can return undefined
Delete dead code resulting from 20c11b4f3dc2ee36fd46edbdd6801d5a4298f901
No weak type checks with comparable relation
Accept new baselines
Centralize weak type checking + improve error message
Add some new bind errors to a couple of the JS baselines
Add `@checkJs: true` to JS bind error tests
Make tokenToString return string|undefined (#16106)
Update name change of isSpreadExpression
Update baselines
Address PR: remove __resolved when emit for commonJs and just do Promise.resolve().then(...)
Address PR: error message, fix capitalization, only allow functionLikeDeclaration and ImportCall for create Promise, use fall through comment
Address PR: change order of grammar check
Address PR: don't early exit when there are grammar errors
#15943 #15981 Update special cases for await / yield parsing
Use emptyArray, rather than []
Use unix cache location on the major BSDs (#16187)
Add regression tests
Apply --checkJs to bind diagnostics as well as check diagnostics
respond to comment
Completion list in the type expression should show types
repond to feedback
suppress type annotations in js file
Remove trailing whitespace from tsconfig.json (#16197)
Allow JS constructor function to return non-void
Improve documentation and naming
remove comment
use length helper
rename fourslash method
Filter symbols based on the meaning at the location
Use factory for all fixes
Rename isWeak -> isWeakType
Test reexport of a missing alias
Combining unknown type+value symbol->unknownSymbol
Cleanup from bootstrap attempt
Get rid bootstrap, jquery and selector buttons
Add support across files and static, js methods
add tests
Apply codefixes across files
Guess 1: null check is missing; Guess 2: ternary does the appropriate check
Stop prepending file:// to sourcemap paths
Improve the look and usability of browser tests
Use `it` instead of `describe` for tests (#16172)
Update tests/baselines
Add tests
Get jsDoctype for property assignment
Stop spelling suggestions after 10 name errors
Make node type predicates public (#16121)
Update build scripts for npm5
PR feedback
Update fail symbol baselines
Test reporting jsdoc syntax errors
Report jsdoc syntax errors when checkJs is on
PR Feedback
Always return empty object when converting the json sourcefile into actual json object, allowing to continue compilation even if there are errors in the tsconfig files
Wrap npmLocation if needed
Add tests and baselines
Add support for diff3-style conflict
remove whitespace
Add fourslash tests
Update tests and baselines
Handle "object" as "Object" in JSDoc type expression
Update tests and baselines
"function" without followed by "(" should be considered as Global function type
Add tests and update baselines
Parse ts-style property tag
Add wrapper to emit statics/decorators inside es5 class
Rename parameterName to name
Make configFile on compiler options as non enumerable
Reorganized code to keep createBundle and updateBundle in factory.ts
Re-enable weak type check for intersection props
Update baselines
Rename test files to be more consistent and move them into jsdoc folder
Address CR feedback
Weak types must not have call or construct sigs
Support services for @typedef (#16087)
Add missing undefined type for createProperty initializer (#16095)
Allow configurable npmLocation for typingsInstaller (#16084)
Add tests and baselines
Support bracket for optional property
Add tests and baselines
Address PR
Add project telemetry (#16050)
Use tslint@latest (#16049)
Clean up instance variables
findAllRefs: Replace 'interface State' and 'createState' with just 'class State'
In findAllReferences, always return undefined (global) symbol scope for properties; also update baselines
Improve naming and refactor for readability
Take into account optional property in parameter
Accept new baselines
Add tests
Move return type inference to inferTypeArguments function
Improve comments in source and tests
Update baselines
InferenceContext is-a TypeMapper instead of has-a TypeMapper
added es2017.intl (#15369)
Use `orderedRemoveItem` instead of `remove` helper
Set '.declarations' on a property of a homomorphic mapped type
Add tests and update baselines
Update baselines
Return "Function for JSDocType {Function}
Report config file errors as part of syntactic diagnostic on the file
Update tests
Add type alias for TypeReferenceType and convert to use JSDoc
Object literal formatting (#16007)
fix #11463, null assertion block uninitialized error (#14020)
cleanup
Remove mistakenly commited auto-generated file
Allow export default interface. Related to issue 3792. (#16040)
rename helper
testing
Detect weak type correctly for intersection types
add missing method
Add missing emitter for NamespaceExportDeclaration (#16025)
add `createProgram` docs (#15697)
Add missing questionToken in emitMethod/PropertyDeclaration (#16020)
Update more return types to include undefined (#15903)
findAllReferences: Make "isWriteAccess" handle special declaration kinds
In path mapping module resolution, try loading from path as directory even if it has an extension
buildSymbolDisplay: Handle alias parentSymbol
Do not report weak type errors for intersections
Port lib changes 5 22 2017 (#16005)
Add missing undefined type (#15999)
Add more tests and update baselines
Accept new baselines
Clean up implementation
Add error for class exprs w/private properties
Initial implementation of return type inference
Make CommandTypes a const enum and use `allCommandTypes` for unit test
Convert  other namespace + type alias in protocol.ts to const enums
Also convert ClassificationTypeNames and CommandTypes/CommandNames
Address most PR comments
Remove dead code from binder
Revise type inference data structures
export type used by an exported function (#15965)
Make ScriptElementKind and HighlightSpanKind string enums
More fix+cleanup in getNameOfDeclaration
Remove incorrect code in getNameOfDeclaration
Add `undefined` to return of getNameOfDeclaration
Make getNameOfDeclaration public
Refactoring support (squash)
Unconditionally compute type arguments of class base type
Separate bind worker for JSDoc nodes, and only enter it if in a JS file
Debug.assert(false) -> Debug.fail()
Make {create/update}TypeAliasDeclaration API consistent (closes #15918)
Remove stale baselines
Test:retain undefined in spreads w/strictNullChecks
Retain undefined in spreads w/strictNullChecks
Finish botched merge from master
Test:decl emit for class expressions as type lits
Declaration-emit class expressions as type literals
Add flag to allow local plugin loading
Add `| undefined` to test
Accept new baselines
getAllPossiblePropertiesOfTypes: Skip primitives
Remove 'isDeclarationFile()' function, use '.isDeclarationFile'
Set @typedef parent pointer, but still do not bind a symbol
Expand tests that jsdoc does not affect typescript code
respond to comments
Services utilities: Combine `isInsideComment` with `isInComment`
Update return types of APIs (#15887)
Add target and lib references for tsc-instrumented
Replace unnecessary `let` with two `const`s
Update baselines
Clean up original errors
findAncestor: Add generic overload for use with type predicates
getDeclarationOfKind: Improve type safety
Address CR feedback + defer creation of visited map
Update baselines with new error numbers
Split error messages so they are localisable
break -> continue
no ascii escaping in param names
revert baselines
avoid ascii escaping literal text
Update baselines
Improve arity errors for all calls
Get configFiles as part of file names
Eliminate redundant exploration in type inference
Update baselines
Improve arity error messages
getTokenAtPositionWorker: Remove duplicate loop
Remove goToImplementation test, not supported for parameters
Support for JSDoc in services
update tests
Correct test argument in callwithSpread2
Clean up comments in tests
Inline function that is called once
Test:spread array after required params
parenthesization in factory
Allow spreading arrays after required parameters
findAllReferences: In `export default foo`, symbol name is `foo`
Accept baselines for const enum changes
Only report used before declaration errors on regular enums const enums don't generate code and the values are inlined so now error is necessary
temp
handle todo
respond to comments
Extract diagnostics formatter used by --pretty
Add insertSpaceAfterTypeAssertion to the server protocol
cleanup
Add the members of interfaces that need to be implemented to class element completion
Address PR
Don't goto aliased symbol with no declarations; and update tests
Clean up naming, add documentation, flatten (some) nested commas
Adds CommaList to avoid large deeply nested comma expressions
Add more tests and update baselines
getApparentType of the propsType
Remove unused flags
handle todo
use EmitFlags.SingleLine
move state to flags
cleanup
remove souceFile checks
Update baselines
Add tests and update lib tests file
getApparentType for each constituent of props type of the targetAttributesType
if a JSSpecialPropertyDeclaration has a JSDoc type, use it
goToDefinition: Skip default and `=` imports
Filter out existing members of the class from the completion list
Accept baselines and update test
Inline resolvedModuleFromResolved
Move Levenshtein distance out of public API
Handle escaped identifiers
findAllReferences: Clean up uses of `getWidth` and `getStart`
Add async to the list of class element completion keyword and refactoring according to feedback
Test:reference ambient block scoped vars in different file
Allow references to ambient block scoped variables
Simplifying the json conversion notifier
Switch map to be used as a set rather than a map
type arguments in qualified names
Fail on bad moduleResolution kind
Prevent Duplicate String Literal Completions
Adds definitions for the es2017 Atomics global object
Also make EnumMember have Type meaning
An enum should include a Namespace SemanticMeaning
isDeclarationName: Return false for LHS of `import { x as y }` and `export { x as y }`
Test: no declare in declaration tmp in namespace
Correctly emit expression in extends in namespace
In shims.ts resolveModuleName should only return resolved modules found in ts files (.ts, .d.ts, .tsx)
Support find-all-references for a module specifier
fix #15666: mark file as optional in Diagnostic
add typeArguments to identifier
fix typo
trailing comma
mapped type indent
Parenthesize function types
initializer issues
Unnamed nodes now extend Declaration, not NamedDeclaration
importTracker: Require calls are stored in `sourceFile.imports`, no need to search for them
getOwnPropertyDescriptor return should allow undefined
fix malformed nodes
Type Literal and Binding Name formatting
Update baaselines
Switch to Declaration/NamedDeclaration hierarchy
Revert "Convert `Declaration` to union, not type hierarchy"
Revert "Turn ClassElement and TypeElement into unions too"
Remove checks for `symbol.declarations`
Update tests and baselines
Do not error when spread generic type
findAllReferences: Given a synthetic property, find references for the original property.
Given `import *` of an `export =` module, raise an error but still return a symbol.
Parameter improvements
Clean up test a little
Remove old commented-out code from signatureHelp
`UseFullyQualifiedType`
Update test with trickier case from #15616
Simplify JS check in index constraint error reporting
In addStringLiteralCompletionsFromType, use getBaseConstraintOfType instead of getApparentType
Update baselines
Refactor "isKnownProperty" to be use outside of checkTypeScriptAssignable as JSX do excess property after
Turn ClassElement and TypeElement into unions too
Remove check for static from checkKindsOfPropertyMemberOrderrides, which is only called on instance side
Support @arg and @argument synonyms for @param JSDoc tag
Improve union type reduction for symbol()
Ensure we get the correct symbol for nodes, clean up
Better qualified name handling
Wip - remove freshness flag from jsx attributes
Address comments: simplify, dedupe and clean up
accessibility check
convert type format flags
emit type parameter's default
Use `symbolToName` instead of copying
Convert `Declaration` to union, not type hierarchy
fix inTypeAlias logic
Tune the completion list for static and private modifiers Do not show inherited members in completion for when writing private member Show only static inherited members when writing static member
Give the class element completion on typing keywords like public, private, readonly Also when name of the function is location, make sure we are actually looking at the same symbol before using the declaration to get signature to display
Completion list for a class extending another class should contain members from base class Handles #7158
parens and this param for function type
Add aliasing test
Emit dynamic names for object literal types
Updates tests and baselines
Remove some redundant code in createJsxAttributesTypeFromAttributesProperty
Add tests and baselines
Address PR
Add Log for When Typings Installer Finishes Updating the Types Registry
Update tests anad baselines
Allow excess property in spread attributes but also check if any explicitly specified attributes are correct
Update baselines
Address PR comments
Add freshness to unique symbol types
Update baselines
getNameOfDeclaration uniformly, including JS decls
Basic parens handling and stubbed TypeFormatFlags
Early support for unique symbol type
Wip-fixing spread type
Remove tests that depended on exact number of jsdoc tag names
Deduplicate jsDocTagNames and sort alphabetically
Update baselines
Add check for tslib __await helper
Symbol table for homomorphic mapped type: Don't needlessly create twice
Update tests
Only get apparent type when constraint includes nullable types
Test:index constraint check on js class expression
Add JS declaration to index constraint check error reporting
Reuse code from getTypeReferenceType
Remove @types/gulp-typescript dependency
Add tests
New behavior only for type variables with nullable constraints
Add tests and baselines
For React Component class, we fill in missing type parameter and instantiate the constructor signature with the new type arguments.
Obtain apparent type before narrowing type variables
Blacklist some built-ins and improve max cutoff
make internal
Include primitives in type-as-value error message
Add tests and update baselines
Update baseline
Don't stop checking other attributes even though we see spread type. This is so that things are correctly marked as reference and type-checked
respond to comments
revert core changes
restore `startsWith`
revert noop change
factor out helpers + cleanup `startsWith` and friends
Add isCallOrNewExpression helper
Lower allowed length difference for suggestions
Reduce max number of spelling suggestions to 10
Make TokenRange an interface and remove `ITokenAccess` delegation
Lower allowed levenshtein distance for suggestions
Mark type arguments as used even if used in an invalid way
fix symbol display for computed properties
handle @types and scoped @types
add tests
PR feedback
Accept baselines
Add declaration file output to tests
move import getCodeActions into named method
For completions of union type, get all possible properties
__asyncDelegator cleanup
Never elide an `export *` when `--isolatedModules` is set
Don't allow to re-export a type when '--isolatedModules' is set
Update baselines
Declare synthetic var for class extends expression
Re-use code from 'getTargetOfExportSpecifier'
Switch to __await sentinel, better support for return values
direct isInAmbientContext
respond to comments
Optimize signature relationship checks in instantiations of same type
assert length
reorder enum
Allow indexed access to empty property
npm install test
Simplify returns
Allow string for name when creating a TypeAliasDeclaration
Fill out remaining factory functions
Only 100 spelling corrections for unknown symbols
Add createTypeAliasDeclaration and updateTypeAliasDeclaration factories
clarifying comments
More thorough module reuse test
Update type signatures for {create|update}InterfaceDeclaration
Update baselines
Codefix:suggest spellings+update others w/new codes
Suggest spelling for unknown symbols + properties
Add {create|update}InterfaceDeclaration methods (closes #15497)
allow use of arguments on ambient context
A couple of small simplifications
Add isWriteAccess
Accept new baselines
no space after new on constructor signatures
Report errors from duplicate member names
Add new tests
Update old test
Update comment
Cache source and target flags in local variables
Accept new baselines
Enum literal type is assignable to regular literal type with same value
Accept new baselines
Treat enums with a single literal member as literal enums
Add support for declaration emit
Allow some dynamic names in types
Accept new baselines
Update test
Support string valued members in literal enums
Avoid double-resolving modified files
Add tests and update baselines
Add target ES5 emit
Address PR: 	don't use Promise.resolve, 	capture reject in AMD require callback, 	create helper for UMD 	don't use arrow function
Add missing space.
inline `createOldProgramState`
Accept new baselines
Classify literal enum members and NumberLiteral/StringLiteral etc.
 check ambient modules before reusing old state
Changes from CR feedback
Address minor PR comment
Update LKG
Update version
Store actual literal value in LiteralType instances
Move check for module kind is ES2015 into grammar check; Use checkNonNullExpression and add tests
Address minor PR comment
add unit test
expose transformers option to transpileModule
Accept new baselines
Clean up computeEnumMemberValues function
Do not rename references to class inside of the class body function
Allow plugins to provide a list of external files.
RulesProvider performance improvements
Test contextual type of object spread expressions
Contextually type object spread expressions
Reword message:more detail about declaration files
Test ES2015 transform of accessors w/captured this
ES2015 transforms accessors with captured `this`
Update baselines
Improve message for untyped module w/noImplicitAny
Declare iterable methods for Readonly collections.
fix mistake
add Symbol.iterator
Update tests
Allow exporting of consts even if `strictNullChecks` is on
Add regression test
Properly account for 'this' parameter in type predicate checks
consolidate program-structure reuse flags
test module reuse
add missing methods
Add missing compiler options
Add a source property on Diagnostic
make enum bitflag and add trace message
Update tests and baselines
Change how we look up children attribute from react.d.ts
fix #15243: add URLSearchParams to iterable
Change function name and clarify comment
Return Diagnostic.category from the server
Emit generated name for unnamed default exported class with decorated members
Handle rejection in async delegation
Revert changes to WeakSet defitions adding `object` constraint This reverts the changes to WeakSet done in https://github.com/Microsoft/TypeScript/pull/15124 to avoid breaks in existing @types packages like @types/lodash
check and emit fixes for async iteration
Support project root path for controlling config file searching depth (#15238)
fix issue 15275
fix issue 10452
typo
No space in empty type litereal
Readonly type literal members
Remove unused file
cleanup
Do not query for bind errors if skipLibCheck or skipDefaultLibCheck is set
Update logic for shouldSkipSemanticCheck to allow for quering semantic errors for JS files with @ts-check
Test:type alias merged w/interface-namespace errors
mergeSymbol error uses first decl not valueDecl
Add tests
Remove WIP comment
Reuse module resolutions in unmodified files
Test:Unknown properties are assignable to Object in union
Unknown properties are assignable to Object unions
findAncestor:single callback returns boolean|"quit"
export interfaces for exported members
Don't use 'yield' as an identifier
Check if container has locals before looking up properties
Remove TODO from test now that it's done
Test: typeof can refer to block-scoped var before declaration
Type query can refer to block-scoped vars before declaration
yield in async generator should implicitly unwrap operand
Make sure we have a node for the error in cases of special property assignment
Check for the file before getting line map
Update error message to use variable name for "children"
Update baselines and tests (2)
Update tests and baselines
Read "children" property from react DTS file
Remove a flag indicating the children is synthesized..We will give an error if you use children without specified such property
Updating PR as per feedback. OneType|null is again treated as object instead of simplifying it
Accept baseline
serializeTypeNode handles `object`
address code review feedback
Lint
Load global plugins even if no local ones exist
Avoid loading duplicate local+global plugins
Port generated lib files
Rename addPrologueDirectives->addStandardPrologue
Test:order of directives, initialisers, object spread destructuring
Split addPrologue into string + custom directives
accept new baselines
fix #15155: improve namespaceModule error message
Respond to PR comments
Add tests and update baselines
update baselines
Add tests
Expand spread property find-all-ref test
Update baselines
Address PR:fix find-all-refs and slim down code
wip-fixing consuming whitespace in children
Store scanning information whether JSXText is just an all whitespaces
Don't access `sys.newLine` inside unit tests
Remove unnecessary use of getOwnKeys
configurationExtension tests: Use objects instead of strings for readability
Tsconfig inheritance: Do not resolve included files in an inherited tsconfig
Remove `npm update`; add release-2.3 to branches
Format checker
Use JSX Attributes to contextually type children property
Consider whitespace that won't be emitted to be different kind so that we won't include in typ-checking
boolean-trivia lint rule: Enforce space between comment and argument
Use `object` type
Update tests
Allow callbacks unioned with null and/or undefined
Add tests, comments, and min.js exclusion
Add another test case
Accept new baselines
Check callback return values bi-variantly
Only trace if traceEnabled
Add tests
Accept new baselines
Treat callback parameters as strictly covariant
Remove tsserver command for loading different map
Remove bad merge + unused cmd name
Pass correct regex flag
Wip - type checking JSX children
Lint custom lint rules
boolean-trivia lint rule: Lint for null/undefined too
Test: object literal assignments->expanding arrays
Evolving array element ignores contextual type
Add regression tests
Add Kendo; fix Office
fix no-bom linting rule
Improve test and comments
Address PR: Remove duplication
Support @types module resolution from scoped packages
Remove special symbol for untyped modules
Update comment
Refactor how we (internally) expose JS module resolution
Unknown bases return baseConstructorType, not anyType
A few changes requested by review comments
Check TypeFlags.Any instead of anyType&unknownType
Include dom into default library files
Test that spread removes readonly from properties
Remove readonly from spread properties
Lint
Allow resetting so tests pass
Update tsserverProjectSystem.ts
Add tests and fix bugs
Update test comments to match property names
Address PR
remove TODO's
Update booleanTriviaRule.ts
Add tests
Accept new baselines
Remove {} from intersection types that already contain object types
Update baselines
Add `this` narrowing test and update previous test
Stop looking at control flow containers for `this`
Update test and baseline
Address PR: move the adding paren into factory function
Update booleanTriviaRule.ts
Update cachingInServerLSHost.ts
Update linting to avoid typechecking for booleanTriviaRule
Set numericLiteralFlags in factory to align with parser
enforce triple-equals
Add boolean flag to not walk the tree if there is no dynamic import
Add regression test
Test:static inits can refer to later static methods
Static prop. inits can refer to later static methods
Limit symbol instantiations to a maximum depth of 100
Update PR
Simplify parseTypeReference
Update Authors
Update authors
Emit parenthesis around propert/element access expression of casted object literal expression
Only bind JSDoc typedefs in JavaScript files
Rename local variable `arguments` to `args`
Enable jsdoc-format lint rule
Clean up literal emit
Accept new baselines
Add regression tests
Accept new baselines
Property tracking of recursive non-object types in checkTypeRelatedTo
Update utilities.ts
Support backticks in require calls
Test that super is tracked in control flow
Add super to control flow.
Test:props of class A are usable in prop initialisers of class B
Props of class A usable in prop initializer of class B
Basic functionality
Added additional test verification
Trim whitespace
Infer a rest parameter for javascript function that uses 'arguments'
Re-swap mistakenly swapped lines of code
Update baselines
Test: extending from any
Improve handling of any as a base type
Allow extending from any
Address code review of PR 14692
Add tests
Handle when namespace improt is malform and external module is undefined
fix failing test
Update baseline from merging with master
Update baselines from merging with master
Address PR: fix spelling
add single-line object destructuring test case
Update FormData methods with appropriate types
Update baselines
Update tests
Remove error with noImplicitAny
Call the cancellationToken once per SourceFile, instead of calling it at every possible position.
Handel empty intializer in system module emit
Add colon
fix formatting for multi-line object destructuring
add formatting tests for multi-line object destructuring
Lint for fallthrough in switch
getSpecialPropertyAssignmentKind: Always check for BinaryExpression *outside*, always check for JS file *inside*
Report semantic errors for JS files if checkJs is enabled
Cleanup
type predicate support
Lint
Respond to minor PR comments
getReferencesInContainer: Take sourceFile as parameter
Change comment to jsdoc
symbolDisplay comment fix: "experts" vs "exports"
Add regression test
Accept new baselines
Use immediate constraint, not base constraint, of indexed access
midway through response to ron's comments
essymbol and object
remove NodeBuilder
Add missing methods for FormData type
["Two small changes"]
use NodeBuilderContext
[object Generator]
Remove trailing WS
Update tests
Error when dynamic import has type arguments
dont check isPartOfTypeNode
rename helper
optional signature
Changes for Map implementation
Store diabled projects as 0
Don't add in size of disabled projects
Add unit test
Math
Store the size of the project properly
Make compatible with 2.1 maps
Apply the 20 MB non-TS source limit across all projects
Suppress semantic errors in JS only configured projects
Bug fix for issue #14696, things changed are; - Empty class type will now throw an error, - Trailing comma in class type will also throw an error, - Added tests for empty class type parameter, - Updated tests for class type parameters with trailing comma
Type parameter default is 'any' in js files
build builder
handle todo's
Split signature factory methods
Add declaration emit test and test to make sure we don't give dynamic import implicit "use strict"
Accept new baselines
Add regression test
move undefined handling to caller
error handling
Port updated dom files (#14805)
temp
Change ingore diagonstic comment to `// @ts-ignore`
Update tests
Move error report of incorrect grammar in dynamic import to checker
remove trivia
Enum and enum literal
Format else clauses
Respond to more comments
Show help if `--all` is specifided without `--help`
Remove BOM
Code review comments
Simply parse dynamic import as call-expression....
Add parent types to class elements
Also fix type of NewExpression#arguments
respond to comments
Replace "tsc @args.txt" to "tsc --project tsconfig.json"
small fix on indentation
Add tests
Report an error if dynamic import specifier is not assigable to type string
Add comment for comparable relationship
Don't need types to handle string literals
Report no implicit error when we return Promise<any>
Remove unused test files
finish remove unused yieldTypes
Address code review
Update baselines from merging with master
Address code review
Allow specifying location of typingSafeList.json
Issue error when use with ES2015
Use more specific types in a few cases
Use emitFlags to indicate that the subtree contains dynamic import
Add comment
Only emit "use strict" when users ask for or the file is external module
Do not report semantic diagnostics for infered and external projects with only .js files
Correctly bind import call expression
consolidate edits
Move comment to JSDoc
add tokenVisitor
Nope, need 'isInString'
move commas to end of line
Handle TODO's
Don't need isInString to be a property
Factor out FindAllReferences.Core and use Definition/Entry to allow findReferencedSymbols and getImplementationsAtPosition to return different results
Update the logo to the one which our website uses.
Remove duplicat es2018 tests
Update baselines from adding es2018 value into moduleKind
Allow exporting a binding before its declaration
make enclosingdeclaration arg required
add tests
Do not collect imports in parser as it makes it very hard for incremental parsing
remove test
some cleanup
some cleanup
consolidate SignatureParts
fix call
transformers tests
signatures, parameter, literals, anyonymous types
Add signatures test
abstract code in FindReferences from concrete way of creating result reference entry to seamlessly reuse the same code for gotoImplementation (#14637)
Add more missing quotes
Update baselines and add fourslash
Update resolveEntityName to check for non entity name in property access expression
Clean up code in parser
Mark occurence item in string with a special property (#14677)
more temp
wip-fix resolveEntityName with parenthesizedExpression
Normalize line endings when validating baselines
temp
Accept baselines
Remove `sourceMap:false` from default compiler optios now that we have all options generated
rename catogories, and reorder options
Print comments in a diffrent column
Remove compileOnSave from compiler option
Refactor checking for checkJs value in a common helper
Code review comments
initial revision of infrastructure to produce text changes that uses existing node factory, formatter and printer (#14441)
temp
swap entries and values
add tests to add and remove members in class
wip-system emit
changed forEach comment
Added comment for forEach
change NodeList to NodeListOf in NodeListOf.forEach
Change Node to TNode in NodeListOf
added comments
simplify rest param handling
add asserts for cases when containing list cannot be determined
change to forEach method
respect initial order of changes
test cleanup
don't add any typenode for signature return type
visit type literal and dotDotDottoken
add insertNodeInListAfter functionality
Emit import callExpression for UMD and AMD
Add more tests for emitting of es2018 module-kind
Various fixes
Allow export default abstract class. Related to issue 3792.
wip-Emit import call expression for commonjs
Change filename to indicate it uses module kind of es2018
Add disableJsDiagnostics codefixes to harnes
Support static properties
Add debugging utilities
some missed token bugs
added `keys`, `values`, ``forEach, `entries` to nodelist
Refactor
Add initial tests
removed white space
type parameters and basic object literals
added `keys`, `entries`, `values`, `forEach` on  NodeListOf
update visitor/factory
added entries foreach values and keys
Convert overloads to unions
Emit dynamic import when module kind is es2018
Add new value "es2018" for module kind
Rename importcall to importCallExpression
Add repro
Properly track method/property distinction for intersection members
always create new node array when assigning positions
Update issue template to use TS2.2
type literals, properties only
Unions and intersections
Use consistent quotes
Add  type parameters
get name for index info
Print new nodes in correct order
Simplify Ranges
snythesize methods in missing member fix
Infer class property declarations from assignments in nested arrow functions
missing member fixes use createTypeNode
basic end-to-end building type nodes
more temp
Revert "temp"
Wip-type check dynamic import
temp
Remove stray apostrophe.
Wip-type check dynamic import
Updated quick start & handbook links in README
Expose `forEachChild` as a method of Node
send error if obtaining of types-registry package failed (#14573)
Remove vestiges of WScript support (Issue #14414)
Parse import call and use collect its specifier
test(baseline): update references affected
Add comment
Add quick fix to disable error checking in a .js file
Correctly parse import()
allow passing --logFile and --logVerbosity parameter to tsserver (#14566)
Add repro
Accept new baselines
Use immediate constraint instead of base constraint in T[K] relations
Disable check diagnostics per line
Add es6 to buildProtocol
add es6 to buildProtocol
Add --lib es6 to @types/node dependent targets
Code review comments
test: adjust test case `completionEntryForUnionMethod`
test: add tests for this type in native-this-assignable methods
fix: add generic info for methods with thisArg of built-in classes
Wip-parsing import call expression
Use term UpdateExpression instead of IncrementExpression to keep it consistent with ECMA spec
code review comments
Make docComment template indent whitespace-only
Error if `--checkJs` is used without `--allowJs`
Change flag name to `checkJs`
cache semantic and declaration diagnostics in program (#14516)
Update baseline
Inline isFlowNarrowable
Update baselines
Move isFlowNarrowable call inside getFlowTypeOfReference
Remove only undefined, not null | undefined, from declared type
Accept new baselines
Add tests
Remove null and undefined from contextual 'this' type
FIX: #14507 Function parameter default value wrongly emmited by Printer
Allow @check directives to switch on/off checking in a file
Add --noEmit to tests
Add assignability tests for initialised parameters
Remove optionality from the initial type of default-valued parameters
Add tests
Add support for `//@check` directives
Add `--checkJsFiles`
Update baselines
Set inference result to `any` isntead of `{}` for .js files if generic type parameter inference found no candidates
Only emit ESModule marker when there is no export equal and the file is external module
Accept new baselines
Change 'tsc --init' to default to 'strict: true'
Update baseline from merging with master
Address PR comment
Go back to using tslint@next
Add tests.
Accept new tsconfig baselines
use ES6 library when building tslint rules (#14474)
Accept new baselines
Construct intersection types for type guards involving type parameters
Accept error baselines
Add failing repro
Add regression test
Accept new baselines
Use getTypeOfExpression when inferring variable type from initializer
initial revision of infrastructure to produce text changes that uses existing node factory, formatter and printer
Introduce --strict compiler option
Remove old commented-out code
Add more missing semicolons
Address PR comments
FIx minor stuffs
Add more tests
Address PR
Accept new baselines
Add ThisType<any> to Object.{create|defineProperty|defineProperties}
cleanup
more rigorous implements-clause check
Update tslint to `latest` (`next` is still on 4.3) and lint for BOM
Add parent type to ExpressionWithTypeArguments
Add insert...Braces Option to Server Protocol
Move code from 'Completions' to 'PathCompletions' namespace
Update another test
instantiate generic this param correctly
ignore request for codefixes with no error codes (#14215)
handle the case when conversion of tsconfig.json failed (#14160)
Update protocol.ts
Accept new baselines
Update tests
Enable new behavior only in --noImplicitThis mode
Remove unnecessary comment
Update fourslash tests
Return completions for JsDoc tagname even when there are no "@' sign prefix
Remove assertion
Accept new baselines
Update test
Introduce CheckMode enum and getContextualMapper() function
Respond to code review comments
Add check for undefined declarations
Error when used enum before declaration
Add tests
Update comment
Promise is a duplicate here - fails to build
Add more specific return type for `getTypeParameters()`
Baseline accept
Better check for right.text, more comments in test
Update baselines
Avoid failing TS2695 for eval.
Make server target depend on services inputs
Update test
Rename applyToContextualType to mapType and remove old mapType
Accept new baselines
Use contextual type of object literal as 'this' in methods
Update tests and baselines to declare class declaration before use
Wrapping LSHost's cancellationtoken with a throttle
Update baselines from issueing an error for class used before declaration
Issue an error when class is used before class declaration
Rename tests
Special prop assignment symbol applies only to lhs
Add new tests and baselines
Update baseline: emit prologue directives before anything else
Emit unique prologue directives at the top of bundle output file
Allow primitive types in JSDoc to start wtih uppercase letters
Add support for handeling .js file correctelly in fixAddMissingMember code fix
Emit first encounter shebang at the top of a output file
When making unit test only include non empty line. This is crucial because it will allow us to test shebang which has to be the first line
Infer class properties from methods and not just constructors
Update test
Accept new baselines
Contextually type 'this' in accessors of object literals
Removing throttling until tests prove it is required
cleanup tests
instantiate generic this param correctly
Return empty string instead to prevent exception downstream particularly in writeReferencePath
Updates from CR comments
a few fixed in printer/factory (#14239)
Addressing CR comments - Adding a throttle - Refactor - Navbar reset onCancel
isConstructorType checks base constraint for undefined
Update baselines
Add tests
Collect type from return statment in generator function
Add a string indexer to any for object literals on a .js file
fix #14187, forIn should allow non primitive object as right hand side
Add tests and update baaselines
Allow JSX attributes to be union types
ignore request for codefixes with no error codes (#14215)
Adding cancellation token checks for lower priority tasks
manually accept baselines
Get completion of JSX attributes type when tag name is a property access expression
handle the case when conversion of tsconfig.json failed (#14160)
Update protocol.ts
Add parent type for nodes where possible
Add CatchClause to VariableDeclaration.parent
update baselines
update unit tests
add periods
Add tests and baselines
Defer get JSX.Element type allow null to be returned in SFC
Contextual this in 'obj.xxx = function(...)' or 'obj[xxx] = function(...)'
Simplify helpers
Accept new baselines
Accept new baselines
Minor factory cleanup
Update tests
Minor fixes after merging from master
PR feedback
Detect this type for codefix
Add tests
Default contextual 'this' type is containing object literal
Introduce ThisType<T> marker interface
Better strictNullChecks support for TransformationContext
Simplify visitNode
Remove unnecessary else clause
Check `fullName` has value for typedefTag
Add tests and baselines
Check for conflict marker when trying to parse JSX child
clean up trailing whitespace
Support strictNullChecks mode in visitors
widen type, index signature, and add tests
fix typo
Handle undefined import name
Update factories to work with strictNullChecks
add release-2.2 (approved by @mhegazy)
call isValidSpreadType in createJsxAttributesTypeFromAttributesProperty
use separate process to probe if drive is safe to watch (#14098)
update gulp-typescript to 3.1.5
Better handle additional re-export cases
Refactor findAllReferences. Now supports renamed exports and imports.
Addressing CR comments
Bower_Components fix
cleanup
LKG update
Include Jake change
use getBaseTypeOfLiteralType
Preserve const enums for tsserver
Change prologue generation order; object rest back in prologue
ES5:Emit parameter initialiser before object rest destructuring
add tests
wip testing
Get Widened Type
wip
Update baseline adding of "__esModule"
Make 'extends' error message uniform.
Make unescapeIdentifier public
Address PR comment
Language service extensibility
Test error w/exported class extending intersection
Enable per-request cancellation (#12371)
Error on emit declaration of extends class w/o symbol
Add missing filename to tsx test
Use '__this__' property in contextual type to indicate type of 'this'
use deduplicate
Use `Promise` instead of `PromiseLike` in the library
Handle additional cases
Set ScriptElementKind for enum members to "enum member" instead of "const"
Accept baselines
Accept baseline recursivelly
accept baseline change
Consolidate bindProperty logic in one function
Remove extra overload
Update version
Offer missing abstract codefix once
Accept baselines
Update tests
Report a specialized error message for missing `Promise` constructor declaration when `Promise` type is available
Detect non-tag uses of `<` in TSX completions
inject pre-finally and after-finally edges into flow graph to possible ignore pre-finally during flow walk (#13845)
Accept baselines
fix build break (#14049)
Address PR comments
Address PR comments and fix lint
Address PR comments
Move interface Promise<T> declaration to es5.d.ts
switch FileExtensionInfo to always mean .js file and deduplicate entries in getSupportedExtensions (#14046)
When performing find-all-refs for a keyword, use the first result as the definition.
Improve discriminated union error messages
Update unittests
Emit "__esModule" before other statments
Emit "__esModule" before other statments
Always set allowNonTsExtensions for allowJs
Accept new baselines
Add tests
Properly handle private/protected properties in intersection types
Respond to code review comments
Widen after sub-type-reduction took place
Reduce stack depth due to substitution
Update comment
Add language service test when element type is a union type
Address code review
Add tests and baselines for union element type
correctly handle the case when attributes type is empty object
do secondary lookup only if module has non-relative name
Mark some more options as advanced
Update some tests because the original marker will be deleted
Make categories localizable
remove the new line after targeted line
Remove properties from tsconfig.json that defaults to false
Write comments for compiler options in `tsc --init` output
Add conformance tests for union element type
Correctly handle union of JSX element type
allow 'transform()' to transform arbitrary nodes.
Add for-of test case
Add test
Address code review: fix indentation
Make generateTSConfig return a string
use category in serializeCompilerOptions
Add deprecation notice for some options
Add simplified help view and full help view
Encorporated PR feedback
add projectUsesOutFile field to protocol.CompileOnSaveAffectedFileListSingleProject (#13915)
Address code review: move only expose emitLeadingCommentsOfPosition
Use `!!` to convert to boolean
Manually order options
Make sure all options have descriptions
Add test for #13925
use tsconfig.json files in jake (#13869)
Make visitor functions public
Guard public API surface of TypeChecker against synthesized nodes
Remove debugger statement
Make TransformationContext.getCompilerOptions public
Add assertions to verify user-exposed behavior.
disable fs watcher for UNC paths on Windows (#13937)
Expose transformations as public API
Allow export "__esModule" in system
Update baselines
Always emit "__esModule" unless there is export =
Emit leading comment before brace token
Clean up extraneous file
No subtype reduction in includeFalsyTypes
Address code review: update error message
Add test and baseline
Only report an error in non ambient context and with no noEmit flag
Add tests and update baselines
Emit missing trailing comment of an element in node list
Test property initialiser forward reference errors
Error on forward references for property initializers
Allow export declarations in ambient namespaces
Minor PR feedback
Treat function paramters in a .js file with no JSDoc as optional
Update sourcemap
Error when users define "__esModule"
Widen special JS property declarations to match regular property declarations
Object literal freshness errors with spreads
Clean up SymbolFlags, introduce CheckFlags in TransientSymbol
Update baselines (3)
Give a better name for the boolean variable; emit __esmodule for export import
Shortcut for class/namespace merge
Simplify checkTypeParameterListsIdentical
Address code review: fix comment
Add factory functions for rest of NodeEdgeTraversal
Remove pre-computation of minTypeArgumentCount
Identifier escaping/unescaping for unique names
Update baselines (2)
Address code review
Typos and other minor PR feedback
Inline isThenableType
Unify getIteratedTypeOf* functions
Update baselines
Check original variable statement node to check if it contains es6 export
routine lib files update
Address code review
merge getIteratedTypeOfIterableOrElementTypeOf*
Add test case for nested namespace
avoid removing comments when removing unused locals
Remove useless test file
Update AUTHORS for release-2.2
Make getOriginalNode/getParseTreeNode public
Make most current Node factory functions public
Emit __esModule when emitting ES6 Module
Added comments and a few Debug assertions
Update baselines from a-c
PR Feedback
rename arrayFromMap -> convertToArray
Accept new baselines
Add regression test
Accept baseline change for apparent type
Consider 'object' a valid base type + apparent type of 'object' is {}
Accept new baselines
Add regression test
Update baselines
Address PR comments
Skip type parameters.
Factor kind check to a separate function
Support string literal completion in case labels
Add string literal completion for equality expression
Create typeof's string literal union type once
Test duplicate identifier reporting in classes
Address PR: fix typo
Add arrayFromMap utility function
Add typeof test case and update baselines
typeof now has string literal union type
Change find-all-references tests to test for groups
Use "ts2.2" (or "ts2.3", etc.) NPM tag in typingsInstaller
Accept new baselines
Add tests
Empty object type assignable to mapped type with optional properties
Check for undefined symbols
Accept new baselines
Add regression test
Move non-local type parameter check to resolveName
Test removing undefined from initialized, annotated parameters
Remove undefined from initialized+annotated parameter type
Use length() throught checker
Move EmitTextWriter to types.ts
Printer API unit tests
support untyped imports in shims (#13758)
Import helpers skips __assign when target >= ES6
Embed comment emit inside of printer
Update baselines
Emit Object.assign for spread for targets >= ES6
ES6 target uses Object.assign for emitting spread
remove an odd new-line for catch clause
Accept new baselines
Add tests
Extract printer from emitter for reusability.
Revise intersection construct signature mixin algorithm
Support mixin classes
Update tests and baselines
Remove control flow-based undefined addition
Allow super to access method signatures
Property assignment is not an assignment target
Respond to comments
Update baselines from merging
isOptionalParameter says unused IIFE arguments are optional
property handle misspelled namepath in @typedef tag (#13702)
Replace `isSearchedFor` with directly passing `searchSymbols`
For goToDefinition, verify that tryGetSignatureDeclaration returns a signature declaration and not a FunctionType.
Always call `checkExpression` on JSX attribute values
handle cases when body of for-of statement is expanded after loop conversion (#13677)
Address comment: remove reducdant check
Add "workers" option in gulpfile.
Address code review: fix up comment
Allow package.json "main" to specify a directory
Use a single 'untypedModuleSymbol' for all untyped modules instead of creating a new one for each module.
fixes #13674
Change "getIsDefinedInLibraryFile" back to just "isDefinedInLibraryFile"
Undo change to test
Simplify code in 'rename'
More exhaustive needsDotDotForPropertyAccess
Update baselines
Revert noConstraintType name change
Support find-all-references on mapped types.
Use variable name for class and function expressions names
Handel defining properties on function and class expressions in .js files
basic support for declaring properties on funcitons
revert change to lib/protocol.d.ts
delete fourslash testcase for --jsx react-native
Remove circular default check
address code review
getFirstToken skips JSDoc
Support find-all-references for default exports
Clean up code in findAllReferences
Update the protocol to return file name in compiler diagnostics and project errors
Report option diagnostic in tsconfig.json if possible
Update comment about jsx react-native in es5.ts
add notifications and tests for jsx react-native es3
rename preserveWithJsExtension to react-native
Update comments
Report an error when can't infer but do not report an error for other failure to resolve signature cases
Add tests and update baselines
Handle inference of function expression/arrow functions attribute
Combine `forEachExpectedEmitFile` and `forEachEmittedFile`
Add test case for preserveWithJsExtension
Add option to output .js files while preserving jsx
Accept new baselines
Add regression test
Accept new baselines
Add tests
Add reference baseline
Add tests
Adds non-ambient context check
Defaults for type aliases
do not capture 'arguments' when property name 'arguments' is met (#13600)
Remove partial inference
Report error using type parameter from merged declaration
export the type `Log` that is used by exported functions
Diagnostic message punctuation
Avoid inference for fully-supplied type arguments
Clean up code for getting emitted files
getFirstToken returns jsdoc as single comment
Allow base constructor types to be intersections
Don't use nameTable for type keywords, and don't handle keyof.
Intersections as their own 'this' type
Always descend into loop, fix lint warnings
Accept new baselines
Allow object intersection types in class implements clauses
Improve efficiency of union/intersection resolved property caching
Add test for decorator referencing alias named Event
Allow object intersection types as class/interface base types
Remove unnecessary widening, more PR feedback
Flexible declaration merging
Addressing code review in previous PR. Combining below commits
Refactor getJsxAttributeSymbolsFromJsxOpeningLikeElement to createJsxAttributesTypeFromAttributesProperty
Address comment: stop widen type when checking for spread any; Address comment: using ternary operator, fix comments
Address comment: call getContextualType instead of accessing contextualType property directly
Update baselines
Update calling to getSpreadType and using set function when adding value to map
Add language service tests
Update conformance tests baselines
Cache react.d.ts library when running tests
Update react.d.ts used during tests
Add a test for contextual type in JSXAttributes
Add tests for generic stateless function component
Add tests for overload stateless function component
Add tests for using default attributes in JSX stateful component
Add tests for using spread attributes resolution in JSX stateful component
Update existed conformance tests
Add language service support for JSXAttributes
Update emitter to use JSXAttributes node instead of JSXAttribute node array
Use chooseOverload logic to pick JSX stateless function
Parse JSX attributes as its own unique AST node and bind the node
Simplify fourslash tests by adding some helpers
PR Feedback
Support find-all-references for type keywords
fix #13556: enable rest/spread on `object`
Move code out of closure in `getDocumentHighlights`, then again out of `getSemanticDocumentHighlights` and `getSyntacticDocumentHighlights`.
Remove added newline
Update document highlight tests: Use ranges to represent expected highlights
Add test for class from external module is used in union
Move `"types": []` to tsconfig-base
Move code out of closure in `getCompletionsAtPosition`
Accept new baselines
Add regression test
Allow T[N] where N is numeric and T has apparent numeric index signature
Emit 'object' type in declaration emitter
Added comments and additional circularity tests
Removing es6 method/property distinction. Adding tests with default export and anonymous class expressions.
Removing es6 method/property distinction. Adding tests with default export and anonymous class expressions.
adding 2 new lines to tsc --watch output
Updated Promise and PromiseLike to use defaults
Adds support for type parameter defaults
Accepted baselines.
Error on the return statement itself when checking against function return types.
Accept new baselines
Improved undefined/null handling for unary operators
Accept new baselines
Improved undefined/null handling for relational operators
Accept new baselines
Improved undefined/null handling for arithmetic operators
Support completions for string literal in rest parameter
Move code out of closure in `getReferencedSymbolsForNode`
Refactor to move code into checker
Removing automatic newline at EOF
Add dom declarations used by harness
Stop using "dom" types
Accept new baselines
Add tests
Improve type relationships for generic mapped types
Remove "noResolve"
Use tsconfig inheritance
Include properties of an `export =` value in import completions.
Accept new baselines
Add tests
Unconstrained type parameter not assignable to non-primitive object
Change the module specifier search order
Add regression test
Remove incorrect type relationship
Add `createMapFromTemplate` helper
Support import fix for missing namespace as well
Update the message
Change the remove unused local code fix message
Include "export" modifier on function assigned to an export (`export const x = () => 0;`).
Object rest skips only class methods
Test:object rest skips only class methods
Update based on feedback
Add regression test
Properly check T[K] constraints in type relationships
Move helper to services/utilities
goToDefinition: Use the name of a declaration (if possible) when creating DefinitionInfo.
Add regression test
Properly construct replacement mapper in mapped type instantiation
Test method removal of object spread
Omit class methods from spreads. Others stay.
String literal completions: Use call signature only if we are *immediately* in a call expression
Respond to PR comment
Add regression test
Property track mapped types in combined type mappers
update declaration file to use intrinsic object type
Add tests
Accept new baselines
Allow missing argument for IIFE parameter with no type annotation
Add additional regression test
Add regression tests
Accept new baselines
Update tests
Improve detection and handling of circular generic constraints
Update LKG
Add builder.ts to server sources
Add `| undefined` to all optional properties too
Update LKG
Simplify emit for syntactic 'extends null' case
Changes based on feedback.
Support path that specified index
Let fourslash tests support extended tsconfig
Incorporating changes to `checkClassForDuplicateDeclarations` in `checker.ts` as proposed by @sandersn
Add DefaultClause to BlockLike union
Support for an external exportStar helper
Cleanup emit helper checks
Reduce number of helpers
Emitting tsserverlibrary as an external module.
update baselines
address feedback
Accept new baselines
Add regression test
Rename and simplify 'iterationMode' option
Move async generators to esnext
Accepted baselines.
Check if the target types are equal instead of the types themselves.
Accepted baselines.
Added a test.
Incorporate changes proposed by @sandersn
Change the design to track addRoot and removeRoot
address cr feedback
Support quick fixes for UMD global (#12545)
Use inherited setCompilerOptions for inferred project
#13063 Optimization
Replace SparseArray<T> with T[]
Add `createMultiMap` to replace `multiMapAdd` and `multiMapRemove`
Rename and consolidate map iteration helpers
Inline `keysOfMap` and `valuesOfMap`.
Remove "sparseArray" constructor function and just use array literals
set the option when creating inferred projects
Aggregate flags for ExpressionWithTypeArguments
Do not report helper module errors in ambient contexts for Rest helper
do not report file lookups if containing folder is known to be missing (#13187)
Make `createMapLike` private and rename to `createDictionaryObject`
Add iterators to Map interface, and shim iterators
tsserver should use newline provided by the host (#13185)
Use sparse arrays for number-keyed maps
Ensure test input is unformatted
fix #11676 - lint test
fix #11676
mark 'failedLookupLocations' as internal (#13139)
Update upstream
Switch to getApparentType
Check trace enabled befoe tracing
Disallow old style octal literals in enums
fix issue #13114
format fourslash.ts
union
reposition defaultFormatOption
cancel getOption
merge conflict
add getOption
classify nonPrimitive type as narrowable rather than structured
update implementation to use intrinsic type
address CR feedback
add tests for generic type argument under strict null checks
accept new baselines
address code review feedback
add tests for non primitive type
fix error reporting
enable parsing
Format destructuring by brace format option
merge conflict
Remove old add-undefined code in getTypeOfParameter
PR Feedback
Test parameter initialisation narrowing rules
Change narrowing rules for parameter initialisers
isMinusPrefixUnaryExpression() -> isPrefixUnaryExpression() after code review
Improve diagnostic message for negative old style literals
Test case for metadata type of class from a module
Nit: Moving type aliases for serialized type nodes as per feedback
Update tests
Remove undefined when checking patterns in function declarations
cache results of module resolution for non-relative module names (#13047)
Test case when module member is object spread pattern
fix linter alert
do not insert space after function expressions
unindent dangling closing token
merge conflict
indent inside mapped type
format [P in keyof T]
format generic type alias
always give container
detach root files on project close if project language service is disabled (#13077)
Change function name
Add regression test
Guard against missing constraint in getModifiersTypeFromMappedType
Add InsertSpaceAfterConstructor option & additonal test cases
space-before-function-paren
Improve hierarchy fact tracking
Support union of non identifier serialized type node with null/undefined/never
cache per-folder module resolutions during construction of the program (#13030)
PR cleanup
next again
needless newline
inline length
Skip files from package.json "main" or "types" if they have an unsupported extension.
Disallow old style octal literal types
remove preferConstRule.ts
fix linting errors
Accept new baselines
Add tests
Mapped types assignable to objects with 'any' string index signature
More tests of initialised parameters adding undefined
Add `| undefined` in .d.ts for initialised params
JSDoc functions are now in scope for instantiation
Do not transform JSX tag names for ES3
lift multiple statements into block if necessary (#12965)
Update LKG
Add more files to .npmignore
Make line-endings LF only in the /lib dir
expose parseCommandLine (#12934)
Accept new baselines
remove debugger statement
Add tests
Map both declared properties and string index signatures
allow to compute change ranges only for snapshots from the same script version cache
Normalize line endings for lib files while building them
Indented and-ed expressions.
Accepted baselines.
Added a tests for super property accesses within super calls of derived classes.
Rename Tests
Cleanup
implicit any for synthesized signature
simplify and inline methods
More tests of parameter initialiser type
Add parameter initialisers to control flow
add tests
refactor fix
abstract class expr instantiation and abstract fix works with class expr
update
merge
resolve confilict
NavigateTo is not working correctly for declarations in IIFEs
Test:spreading any doesn't set flags on anyType
Set symbol/flags only on (fresh) object spreads
when language service is disabled - build program using only open files (#12809)
add a new line if after writing trailing comments (#12894)
Accepted baselines.
Don't replace the last statement if 'this' is used/captured within the constructor.
mark types used in decorator metadata as referenced (#12890)
More test cases and notes
Make some code in checker neater
elaborate check before converting fresh literal type to regular (#12595)
Added test for https://github.com/Microsoft/TypeScript/issues/12236
create new lexical environment for the body of converted loop (#12831)
guard against visiting the same symbol table multiple times (#12818)
Remove the "set" function and use `map.set` with multiple lines of code if necessary.
Remove `createObject`; use `Object.create` directly.
Produce an error for an augmentation of an untyped module even if `moduleNotFoundError` is not defined
Consolidate Tests
Synthetic signature uses existing parameter names
Accept new baselines
Add more tests
Additional tweak to mapped type property modifier propagation
Add test to verify use of Pick<T, K> with setState
Accept new baselines
Modify tests
Pick<T, K> and similar mapped types propagate modifiers from T
getSupportedExtensions optimization to reduce allocations
use localUse local updatedFileNames - this way we'll know that set of names is definitely cleared
mark containing project as dirty when file is closed (#12789)
Rename fileExtensionMap: fileExtensionMapItem[] to extraFileExtensions: FileExtensionInfo[]
Simplify index signature generation
Mark containing project as dirty when file is closed (Note: adding this until PR #12789 is merged in so that unit tests pass)
Test self-assignment w/array spread in loop
Use checkExpression in checkSpreadExpression
Simplify rest parameter handling
cleanup
Add tests and fix rest parameters
Revert changes to core.ts
Changes due to CR comments
Adds support for new.target
make index signature fix work with generics
add missing index signature support
do not use ScriptVersionCache for closed files (#12777)
Expose indexSignaturePrinting
Simplify es2015 visitor, replace function tracking with flags
Add tests when object spread is used in destructuring
More tests:default-valued parameter+strictNullChecks
removing unneccessary comments
Add comment
Clean up helpers
Simplify forEachKeyInMap and someKeyInMap
Add circularity tests
Use native maps when they're available
Property report circularity errors in indexed access types
address review comment
catch up
add test for computed literals
handle well-known computed property/method names
Allowing brace completion inside comments in JS and TS files
Reduced version from CR comments
Remove debug statement
Use "completionList" methods instead of "memberList" ones, since they're identical
Test:instanceof allows callable/constructable RHS
instanceof RHS must be any, callable/constructable or Function subtype
Provide better error message
Remove JSON.stringify shim
replacing let with const
Reuse code from convertJsonOptionOfCustomType
Add Support for multiple signatures
remove projects that were no present in the input list in openExternalProjects (#12699)
Accept new baselines
Add tests
Defer indexed access T[K] where T is generic and K is non-generic
Add empty `types` list to tsconfig.json
Add authors from https://github.com/Microsoft/TSJS-lib-generator/blob/master/AUTHORS.md
Update authors
Add baselines for new tests
More tests for binding elements referencing previous elements
Check binding initialisers in parameters as well
Binding initialisers can refer to previous elements
Updated baseline
Added more specific diagnostic message
Add error for super property before super
Test:destructuring array initialisers refer to previous elements
Add ReadonlyArray<T>.includes to es2016.array.include.d.ts
implement getters/setters as property
use XDG base directory compatible cache location (#12676)
Updated baselines
Improve SourceMap emit for down-level async functions
Sub-subclasses can access protected constructor
Test that sub-subclass can access protected ctor
Update baseline
Properly determine whether an augmentation is a ValueModule or NamespaceModule
Update tests and baselines
Add tests for property access w/string index sigs
Property access for string index signatures
fixes #9123
Accept new baselines
Add regression test
Indexed access any[K] has type any
Accept new baselines
Add tests
Property handle union/intersection types in type variable checks
Accept new baselines
Add tests
Classify mapped type inferences as secondary
address #12622
address feedback
change class inheritance code
Accept new baselines
Add tests
Accept new baselines
Treat indexed access types T[K] as type variables
Update cli --target description (es2016 and 2017)
Drop unmaintained versions of Node.js from package.json
Add test for the decorated method beginning with underscore
Update baselines
Rest of untyped binding pattern is back to str index sig
Add property access and --noImplicitAny tests
Rest of untyped binding pattern is back to any
Add Node.js 6 LTS to CI
Update baselines
Rest of untyped binding pattern is string-indexed type
Add tests
Accept new baselines
Improve handling of modifiers in mapped type inference
Reset the noEmitForJsFiles option when updating compiler options (#12570)
Simplify isValidSpreadType
Simplify logic
extract filterNullableTypes
Add more tests
fix test
abstract accessors can't have implementations
Test that rest of untyped binding pattern is any
Rest in an untyped binding pattern should be any
Update test
add missing semicolons
Add tests
Preserve modifiers in isomorphic mapped types
stubbing extra completions
Update test name
change test
Handel null and undefined in `__rest`
Handel null and undefined in object spread and rest
FIx typo in method stub.
Change name of the function
send begin/end notifications when installing types packages (#12551)
Sort matched files by include order
Allow union and intersection as targets for object spread and rest, and distribute spread&rest over unions
tsserver: get candidates from <K extends keyof Foo> (fix #12536)
expose getApparentType on TypeChecker interface
Make sure all overloads have comments
Revert https://github.com/Microsoft/TypeScript/pull/12207
move helpers under codefix dir
Add args to diagnostic message
add test for #12536
Use array instead of map
use getStart()
Add regression test
getRegularTypeOfLiteralType before exhaustive switch check
Add regression test
Deduplicate intersection types before distributing over union types
Update keyof tests to reflect #12425
Remove unused code in resolveMappedTypeMembers
Remove unused case in type inference
Add tests
Reorder type inference cases
Add regression test
Include mapped types in type inference infinite recursion check
Add regression test
Accept new baselines
remove extra files
Revert "remove extra files"
remove extra files
remove extra tests
fix linting error
doc(compiler/ts): fix documentation typo about __decorator code generation When __decorator applied to method, the last parameter (descriptor) is null, not undefined
Type inference for isomorphic mapped types
Add regression test
keyof T is a literal contextual type
Clean up api so that parsing returns JsonSourceFile
Handle typingOptions to typeAcquisition rename when converting parsed json node
respect casing when comparing names of config files (#12474)
Revert "Instead of creating clone of the jsxFactory's leaf node, create synthesized node"
Use `Function` instead of call and construct signatures
Handel call and construct signatures
Addressing CR feedback
add typings installer user agent for npm requests (#12446)
Add more tests
Accept new baselines
Update tests
Distribute isomorphic mapped types over union types
Re-add sourceFiles to program emit callback
report config errors when config file changed (#12372)
Support JSDoc @augments tag
Add function
Add special handeling for function and array in Object.freeze
Port lib changes
Maintain support for deprecated API typingOptions.enableAutoDiscovery
handel missing files gracefully
normalize path in harness
increase timeout
Update baseline-accept configuration
Add test case
Accept new baselines
Type of for-in variable is keyof T when object type is a type parameter
wrap subexpressions of conditional expressions in parens if necessary (#12420)
Accept new baselines
Update tests
Update Record<K, T> type
Make keyof T a string-like type
recompute character to column when comparing indentations (#12375)
Add locale options to tsserver (#12369)
Add test for proper tuple type handling
Add regression test
Accept new baselines
Add optimized getTypeOfExpression function
Add “|” and “&” to list of tokens that start a type
Accept new baselines
Add tests
Add tests and accept new baselines
Allow one leading ignored “|” or “&” in a type position
modify error message
update to tslint@next
Rename typingOptions.enableAutoDiscovery to typeAcquisition.enable
Tests for iterationMode=iterable
Revert diagnostic error number change
Added iterationMode switch, consolidate some tests, cleanup
tsconfig.json mixed content support
Add missed jsDoc rename in services' Node implementation
Address PR comments
Rename getJSDocComments -> getCommentsFromJSDoc
Improve readability of types and names
Always enable evolving types in Javascript files
Update baselines to have no evolving types
Disable evolving types with implicit any
use location of config file as initial location for automatic type reference inclusion if possible (#12341)
Add tests
Support apparent types for T[K] indexed access types
Update es2017 library and baseline
Use a symbol for untyped modules to distinguish from unknownSymbol
Make "exclude" default to empty if "include" is present.
Add new tests
Accept new baselines
Error on circular constraints in mapped types
ES5 tests for async generators
ES6 tests for async generators
Conformance tests for for-await-of
Added conformance tests for async generators
Type relations for generic mapped types
Keep the original api and add new api that handles the JsonNode Also handle the JsonNode when converting to parsedCommandLine
Clean cache code and streamline other code
pass project name as a constructor parameter (#12333)
Reorganize functions so commandline parser can include parser. This fixes build of typings installer
Parse json using our own parser
Clean up getJSDocParameterTag
Clean up getJSDocs
Clean up getJSDocTypeForVariableLikeDeclarationFromJSDocComment
Codegen: Do not subtract 0 in arguments to rest array loop
Revert "fix #11670, support type guards in NumberConstructor (#11722)"
Code fix for missing imports (#11768)
Updated baselines
Widen literal types of parameter properties
Test widen literal types of parameter properties
Add for-await-of, always use Symbol for iterables.
Add parameter type in function support comments for JS files
Check assignability: rest destructuring assignment
Test assignability checking of object rests
Update issue template
Improve diagnostic messages for imported helpers
Update baselines with new __assign emit
Improve __assign emit:remove getOwnPropertySymbols
PR Feedback
Accept new baselines
Add tests
Resolve upfront so recursive mapped types appear empty
Added missing places for visitParameterList
unexpose resolveStructuredTypeMembers
ports #12237, #12258 and #12259 into master (#12274)
remove fix
Aggregate changes before building result
Move transformFunctionBody back into es2015
Accept new baselines
Revise tests
Add predefined mapped types and revise Object.freeze
Properly handle identity relation for mapped types
Handle class expressions
Update baselines with fixed emit
Remove getSymbolOfNode from TypeChecker interface
Update baseline of newly merged test
Update baselines
Improve rest/spread emit for symbols
Use getTypeOfSymbolAtLocation
Test object rest parameter emit: methods/accessors
Object rest emit for method and accessor parameters
Address PR commennts
Make multiLine optional in convertToFunctionBody
Removed esnext dependency on convertForOf/transformFunctionBody in factory
Accept new baselines
Revert type predicates to not have instanceof special casing
Accept baselines
Add repro test
Moved the parenthesizing functions to make the diff easier to read
Update baselines, fix assignment check for object rest.
Update baselines
Add spread tests and update rest tests
Spread+rest fixes
Update comment
Update baselines
remove generated file from PR
enable syntactic features if project size exceeded the limit, send events when state of language service changes (#12190)
add 'installSuccess' flag to telemetry, cache misses if npm install fails (#12163) (#12240)
remove multiple implements TODO
Spell out names fully
Get Ancestor instead of manual walk
Remove Inner Loop
Clean up destructuring
add 'installSuccess' flag to telemetry, cache misses if npm install fails (#12163)
Initialize result to empy array
Add a test
tsconfig.json mixed content support
Make failedLookupLocations an array
Include no types in services
Filter JS files from resolutions sent to VS through shims
&& -> ||
Ignore optionality in the comparable relationship (#12202)
allow getting compiler options diagnostics when language service is disabled
Consolidate destructuring code paths
Test object spread+async emit & nested spread emit
fix #12137, correct ProxyHandler signatures (#12172)
Add comment explaining type alias instantiation strategy
remove tsd dependency (#12206)
switch to tslint@next (#12201)
Add regression test
Add early bail out for call expressions that are never type predicates
More precise Object.entries type declarations
Accepted baselines.
Avoid checking for optionality in comparability checks.
Accepted baselines.
Added tests.
Accept new baselines
Address CR feedback
Accepted baselines.
Move comments from super calls to their generated return statements.
Accepted baselines.
Added test.
enable syntactic features if project size exceeded the limit, send events when state of language service changes
WIP Clean up destructuring
Clean up jsdoc in utilities
Update baseline
Allow JS files
Add Push interface
When looking up modules in @types, only look for `index.d.ts` and `package.json`.
Accept new baselines
More tests
Test non-identifier rest in destructuring assignment
Error on non-identifier rest in destructuring assignment
Add tests
Improve type inference for types with same generic type alias
Add missing node visits in forEachChild
Added fix for missing 'this.' property accesses.
Added tests for missing 'this' property accesses.
Added diagnostic.
Update version (#12162)
Added emit helper checks for async generators
Add declaration emit support
Update baselines
Raise literal type to its base in a comparison
Exclude js files in non-configured projects compile-on-save emitting (#12118)
Retain space after first word in multiline jsdoc
Add ES2017 string padding (#12152)
synthesize complete import declaration for tslib (#12151)
Test error for import helpers with no __rest
Correctly check spread assignments in strict mode
Report errors for import helpers missing __rest
Check mapped type constraint is assignable to string | number
Accept new baselines
Use pull model to obtain type alias information for type nodes
Add test with a referenced dts file
Updated condition for more readability
Adds error message for incompatible assignment of identically named type
Defer resolution of mapped types to enable recursive definitions
Parse the jsxFactory again in the checker instead of using cached value in the program
Simplify Testing
Parse, check, and downlevel emit for for-await-of
Added emit transforms for async generators.
Add test cases for when jsxFactory cannot be resolved
Enabled test case for source map
Transpile unit test case
When emitting use jsx factory entity expression if provided
Update tests
Get one fix per interface
Resolve first identifier of the jsxFactory as part of type check
Updated baselines
type checking for pseudoiterable
Verify that jsxFactory is either identifier or qualified name
Add strictNullChecks test for object spread
Treat `| undefined` like optionality in spread type
Add support for taking in jsxFactory option and report errors for invalid combinations
Improve nested destructuring test for ESNext emit
Downlevel array destructuring to ES6 in object rest
Handle abstract and const modifiers
Properly implement type relationship for '[P in S]: X' and '[P in T]: Y'
Resolve symlinks for type reference directives too.
cleanup
Remove EmitHelperState, general helper cleanup.
(signature help) type parameter lists are never variadic (#12112)
use createHash from ServerHost instead of explicit require (#12043)
fix linter errors
Edit error handling tests
Don't include private/protected properties in keyof T
tests: edit expected type params
Use new engine for interface fixes
Better error message in fourslash
Use TypeChecker to Get Types, Print
Expose signatureToString, addSupressAnyReturn Flag
Add relations for keyof S / keyof T and [P in S]: X / [P in T]: X
rename tests
Make keyof T assignable to and subtype of string | number
Allow a path mapping to provide a file extension
Type inference for mapped types
Include declaration file emit
Update authors for release-2.1
reduce set of files being watched, increase polling interval (#12054) (#12092)
Port fix for https://github.com/Microsoft/TypeScript/issues/12069 (#12095)
Make test failure more readable
Expose More TypeChecker
Reuse subtree transform flags for incrementally parsed nodes (#12088)
property handle missing config files in external projects (#12094)
return empty file watcher in case if target directory does not exist (#12091)
Address more PR comments
Ports #12051 and #12032 into master (#12090)
Set spread type symbols in checkObjectLiteral
Create spread property types eagerly
Remove error-codes from fourslash tests
Add `realpath` implementation for lshost
Do not emit __rest for --target esnext
Rename variable in checkSwitchStatement per PR
Revert unneeded change and comments per PR
Improve sharing by re-instantiating top level type aliases
Add --target esnext tests and update baselines
Add --target esnext
Correct symbol display for type parameter of mapped type
Validate constraint type in mapped type
Add SpreadAssignment to visitors
Rename SpreadElementExpression -> SpreadAssignment
Add source maps and declarations to test
Accept new baselines
Revert incorrect logic from #11392
Handle recursion in mapped type display
Allowing `static arguments()` and `static caller()` for target `"es6"`. Disallow non-function properties `static arguments` and `static caller`, though.
Type checking for async iterables and async generators.
Add regression test
Properly instantiate aliasTypeArguments
Handle readonly and optional properties + index signatures
Relaxed ES2015 restrictions for generator type check
Accept new baselines
Cache generic signature instantiations
Introduce instantiateCached function
add missing bind calls to properly set parent on token nodes (#12057)
Attach symbols to mapped types
Add straggling Test
Still re-writing missing member grabber
Add tests and simplify existing ones
Spread any types to any
Introduce MappedType in type checker
Move transformFunctionBody to factory
Update improved baselines
Move convertForOf to factory for esnext and es2015
Address PR comments
Do not add undefined to parameter properties
Port #12027, #11980 and #11932 to master (#12037)
Ensure transformFlags are correct before visiting a node.
broken
Test adding undefined to default-valued parameters
Add undefined to default-valued parameters
Parse '[P in K]' part of mapped type as a type parameter declaration
Improve readability of ES next destructuring emit
Update objectRestAssignment test
Clean up
Handle most module cases
Add a `.d.ts` file to the test to ensure it is excluded from the calculation too
Emit for full down-level generators
Update objectRestAssignment test and baselines
Accept new baselines
Update tests
Correct assignability for keyof types and type parameters
Spread handles index signatures from singleton spreads
Remove spread type tests from spread tests
Lock tslint version to 4.0.0-dev.0, because 4.0.0-dev.1 complains about unnecessary semicolons following properties
Only resolve symlinks in `node_modules`
Leave files from `node_modules` out when calculating `getCommonSourceDirectory`
Parsing of mapped types
accept new baseline
migrate checkDelete to new property checking
add new tests and accept baselines
fix #11480, disallow delete operator on readonly property or index signature
Remove spread types, leaving spread syntax/emit
Update baselines
Add rest tests
Downlevel emit of rest elements
Parse, bind and check rest elements
fix jakefile1
module resolution: prefer locally defined ambient modules, reuse resolutions to ambient modules from the old program (#11999)
fix references to codefixes?
Rename and simplify fourslash interface
Test index [access] types inside spread types
Spread types handle nested index [access] types
Test case for property used in destructuring variable declaration
Remove unused
Adding tests
Minor fixes
Recognize modifiers
Removed unused, confusing cases
Add more testcases and simplify
Remove unused tests
Add test cases to report errors for decorators in js file
Improve unification by moving more logic to getIndexedAccessType
Add missed test update
Update baselines
Get literal type only once
Make `cachingInServerLSHost` tests work with `runtests-browser`
Accept additional baselines
Accept new baselines
Unify checking of indexed access expressions and indexed access types
Forbid augmentation of untyped module (#11962)
Cleanup Extends -> Interface Change
Move eitherIsNotLiteral check into switch and === checks
Update generated files (#11963)
Add helper function
Accept new baselines
Improve more error messages
Accept new baselines
Improved error messages for invalid assignments to properties
Accept new baselines
Improved error messages for invalid assignments to identifiers
cache type for empty type literal (#11934)
extends->implements w/ implements keyword present
Minor fixes
do not inline async IIFEs in control flow graph
update CFG to properly handle do statements
Add Failing Tests
Rename and Add a Test
enable non-ts extensions in inferred projects by default
Rename TransformFlags.Experimental -> ESNext
isAritySmaller runs later: getNonGenericSignature
Do not use contextual signatures with too few parameters
Updating test due to CR changes.  The order of the diagnostic messages has changed due to concatenation changes
Rename Most Tests
disable CoS for inferred projects (#11909)
Changes from CR feedback
Nerf Extends to implements For Now
Rename Experimental transform to ESNext
Ignore optionality when skipping overloads
Minor style improvements
Test skip overloads w/too-short function params
Skip overloads with too-short function parameters
Refactor getIndexedAccessType to be reusable from checkIndexedAccess
Respond to PR comments
Consider index signatures in type produced by 'keyof T'
Make `extension` property of `ResolvedModule` optional; introduce `ResolvedModuleFull` interface for when the extension is provided.
Change diagnostic message
Rename to zipWith
Simplify for loops in fourslash.ts
Allow untyped imports
Remove a comment about a parameter that no longer exists
Added RawExpression to move the UMD helper out of the emitter
Move emit helpers into related transformers
only emit /// types reference for a symbol in d.ts file if all declarations of a symbol come from type reference directives (#11872)
rewrite void-returning statements in constructors that capture result of super call (#11868)
more temp
Covnert to Doc Comment
Support parametric property access expressions + some renaming
temp
Move helper functions to core (fix build)
Don't require `resolvedTsFileName` and `resolvedJsFileName`, just `resolvedFileName` and `extension`. Also, change search order to do all TS searching before searching for JS.
For JavaScript files, we report semantic errors for using TypeScript-only constructs 
from within a JavaScript file as syntactic errors.
Clean up and consolidate destructuring transform
add a fallback logic for older versions of node that don't support 'homedir' (#11845)
Run tests on branch release-2.1
use unresolved imports as a source of used typings (#11828)
Rename Tests
Initial implementation of 'T[K]' property access types
Refactor Loop
Refactor classDeclarations
Support dotted name in @typedef tag (#11695)
report typings installer process id to parent process
Use symbol fully-qualified name instead of node text in error message (#11761)
remove whitespace
simplify regex
remove check on property assignment
only remove whitespace for expr assignment
Simplify isImplicitGlob test
Move most of resolveModuleNameForLsHost to lsHost
Introduce PropertyNameType
remove whitespace
Simplifying handling import cases
Move emit helpers into related transformers
Initial implementation of 'keyof T' type operator
treat ambient non-aliased 'require' as commonjs 'require'
Add test case for destructured unused parameter
Add more commentary to getSpreadType
Explain writeSpreadType a little better
Update baselines with new spread type index errors
Error for call/construct signatures in spread type
Respond to PR comments
Clean up and reorder getSpreadType body
Move multiple-spread handling out of getSpreadType
Remove unused case, and fix for..in
Move n-ary spread handling into separate function.
Rename TypeFlags.ObjectType to TypeFlags.Object
Update baselines with new index signature rules
Remove unused locals/parameters from webTestServer.ts
Add test for #11166
Add tests for different constructor parameter cases.
Major refactoring after PR feedback
Simplify expression in resolveObjectIntersection
Update and improve spread intersection tests
Resolve all-object intersections inside spreads
Refactoring a bit more
Revert baseline change due to stale output
Update baseline
Move ObjectLiteralPatternWithComputedProperties to ObjectFlags
Move System module transform to end.
update baselines
add test
Introduce EvolvingArrayType and associated ObjectFlag.EvolvingArray
Jenkins / .net CI support
Introduce ObjectFlags in object types
Add testcase for incorrect emit of jsx
Allow destructuring in catch clauses
Move setTimeout to sys (#11746)
Properly distinguish between Type, ObjectType, and StructuredType
Update spread w/intersection tests
Spread no longer distributes intersections
Just use notImplemented
Moved AMD/CJS/UMD transform to end
Update tests w/spread assignability+apparent type
Make spread assignability and apparent type stricter
Add noop, notImplemented, and notYetImplemented helpers
fix #11670, support type guards in NumberConstructor (#11722)
Update inference test for spread types
Remove type inference for spread types
Remove "ResolvedModuleFromHost" type and just make `resolvedTsFileName` and `resolvedJsFileName` optional properties
Adding testcases for reactnamespace
Don't need `libFilePath` parameter
Forbid unused locals/parameters anywhere
Respond to PR feedback
Add testcase when error is reported about unused react
Instead of getResolutionOrDiagnostic, use getResolutionDiagnostic and avoid using resolution.resolvedFileName if the diagnostic is defined.
Add tests
Simplify logic in checkTypeRelatedTo
Adding JSXExpression check for isGlobalCompletion and associated tests
Forbid unused locals/parameters in compiler
Allow number too
Accept new baselines
Normalize intersection and union types
check heritage clause for the presence of entry with Extends keyword (#11711)
Type arguments to formatStringFromArgs as strings instead of implicitly stringifying
Use single `concat` call instead of repeated calls
Use an ES5 target
Return both ts and js results from module resolution, and don't have moduleNameResolver responsible for omitting files based on compiler options
Add getSyntacticDiagnostics unit test
Update the resolveName symbol flags for 'require' resolution
Include the correct file by default (#11685)
Address CR feedback
address PR feedback
Remove baseline-accept warning from CONTRIBUTING
Add isSemantic check to getDiagnosticsWorker
Accepting new baseline. Format code to fit linter rules.
Don't use ternary operator
Add lib-concatting newlines to jakefile as well
Add fourslash test for contextually-typed `this`
Use collator when making comparison as it is more performance than String.prototype.localeCompare
Add partially annotated function tests
Remove unnecessary assert
Cleaned up emit of enum declaration
fix flow in finally blocks
Accept new baselines
Improve contextual typing of partially annotated signatures
Minor cleanup
Adds ES5 to ES3 transformer for reserved words
More tests
Updated comment
Add missing trigger file (#11641)
Cleanup ES2017 async tests
Restrict IsGlobalCompletion to: - SourceFile - Template Expression - Statements
JSX Text belongs with its other token friends
Update baselines
Push eitherIsNotLiteral check into isTypeEqualityComparableTo
Get rid of ES6 completely
Adds ES5 to ES3 transformer for reserved words
Update LKG
Port fix in https://github.com/Microsoft/TypeScript/pull/11293 to correct file
Update LKG
Add buildProtocol.js
Add error reporting for using `--noImplicitUseStrict` with `--options.alwaysStrict`
Add switch comparability test and update baselines
Use same literal comparison rules for switch/===
fix typo in type definition (#11346)
Avoid watching non-existing directories and fix null-exception (#11601)
Remove unused function
Accept new baselines
Update tests
Treat reference to empty evolving array as an implicit any[]
Address PR: remove locales and options; use accent as default
Update issue template
fix linter issues
Allow any type for spreads in JsxExpression
Add additional tests
Support 'unshift' and fix typo
Add spread syntax tests for JsxExpressions
Add spread syntax to JsxExpression.
Add tests
Accept new baselines
Properly narrow union types containing string and number
Favor use of ES2015 instead of ES6
Remove constant substitution from ES2017 transformer
Refactor createFunctionExpresson
Adjust some async conformance baselines
Make async/await an ES2017 feature only
Set maxNodeModuleJsDepth for inferred projects
Cleanup comments
Accepted baselines.
Change error message for referencing UMD globals from a module.
Only use localeCompare in CompareStrings
Narrow string and number types in equality checks and switch cases
Add es2017 async conformance
Move async/await into separate es2017 transformer
Move import/export elision to ts transform
Don't use es8. Add es2016 target. Rename es7 to es2016. Update getDefaultLibFileName for new targets.
Refactor getTypeFromTypeLiteral, from PR comments
Respond to PR comments
Remove trailing newline from baseline again
Reset baseline line number to the locally incorrect value
Update baselines with spread string's numeric indexers
Add numeric indexer to strings and remove lint
Remove space at end of line in baseline
Remove emacs-added newline at end of baseline
Use a single ShimMap class, and indicate that iteration always yields string keys (which it did before too)
Turn on skipLibCheck for js-only inferred project and external project (#11399)
Reverted test change
Remove duplicate interface
Revert lib.d.ts error message baseline (unrelated)
Update baselines
Test spread type inference+more index signature tests
Type inference for spread types
Codefixes for unused variables, properties etc.
Codefixes for implement interface and change extends to implements.
Guard localeCompare function
Respond to some PR comments
Remove cached resolvedModule result if the target file was deleted (#11460)
Support JSDoc for type alias
Accept new baselines
Add test
Support parentheses and comma operator with evolving arrays
Add "navtree" and "navtree-full" server commands
Resolve export= module members
Send config file diagnonstics event even when no errors were found (#11285)
update documentation in protocol.d.ts (#11501)
Implicitly consider an extensionless file in "includes" to be a recursive directory glob
Port fix from PR#11268
Add tests and update baselines.
Support unions/intersections in spread types
Accept new baselines
Add test
Add test case for narrowed const in object literal and class expression method
Deal with buildbreak
Codefixes in client for testing the server.
rename of the response body
PR feedback
Update baselines
Spread type:new assignability+simplification tests
Switch spread types to a binary representation.
Inline calculation of resolvedPath
Add `any` to allow us to cast a ModuleBlock to a Block
Respond to PR comments
Add additional test
Accept new baselines
Add tests
Accept new baselines
Change the memberTypes of an EnumType to a (possibly sparse, but probably not ) array.
Add heap performance markers
Remove more uses of 'get'
Use native maps when they're available
Introduce sameMap function
Use just the errorcode, without the TS prefix
Simplify async return type checking
Report missing global diagnostics
Handle case where this access is inside the supercall
Accept new baselines
Use control flow analysis for variables initialized with []
Adding test for #10073
Have classic module resolution use @types as a fallback
check lib command line option when deciding if program structure can be reused
Added test case for enums
ES8/ES2017 target tests
Add ES8/ES2017 target (#10768)
provide completions only in the correct bounds
update tests to reflect no completion filtering
do not run semantic classification on non-ts-or-tsx files
Remove filtering functionality
update baselines
Remove extraneous assignments
Don't show globals (e.g. snippets) in JSX positions
Removed debugger statement
Another test case
Adding test for emit of metadata for string literal union
Error span moved from constructor to this keyword.
Add additional test for brace matching
Add helper functions for detecting 'this' identifiers
Generate browserify bundle in correct location
Change fragment initialization
Eliminate allocation of filtered completions
Split up binary operators
PR feedback
Added missing binary operator In.
Implement codefixes in tsserver
do not apply subtype reduction if type set contains enum literals fro… (#11368)
merge master and add isGlobalCompletion flags to CompletionInfo
fix linter (#11366)
Actually fixed comments
Responding To billti's comments
Changes from CR feedback
Add test when require is just a function in external module
Addresses #11348: Could the tsserver add process.noAsar = true; (#11351) (#11360)
Removed isTemplateLiteralFragmentKind
Update browserify task for gulp-typescript 3.0
Lint whitespace around "="
remove redundant type assertion
Added literal kind properties for each node.
Add isGlobalCompletion to CompletionInfo for snippet injection
Just assign true inside an if where a boolean was just checked
getTypeFromObjectBindingPattern just returns Type again
Rename isObjectLiteralPatternWithComputedProperties
Minor style cleanup
Add more generic assignability cases
Update object spread scenarios test
guard against cases when current file name is already in uppercase
Remove trailing comment
Removed comments and fixed indentation
Rename labels in tests
do not reset current flow after processing finally block if it was unreachable (#11310)
Update tests and baselines
Add comments to tests
Use a `for-of` loop for a dense array instead of iterating over keys and then indexing
Add newlines between concatted files in lib.d.ts
Updated baselines
validate inferred typing names to be legal package names
add readDirectory to LSHost
Remove debug code.
linter
expose 'gotoImplementation' for VS
Visit vardecl initializer in converted loop
Do not emit extra var decls for merged enums/namespaces
replace hardcodes 'useCaseSensitiveFileNames=false' in services with actual value, use specialized map lookup methods instead of generic 'getOrCreate*'
Address PR
Question added
New Test
Pass linting
Rename Tests
Rename Tests
Use eval-less access to this for debugObjectHost
Accept new baselines
Add tests
Accept new baselines
Report error on both declaration and reference when CFA can't determine type
Accept new baselines
Control flow typing for variables with null or undefined initializer
Put TypeFlags.ObjectLiteral back
Make isObjectLiteral required
Accepted baselines.
Remove TypeFlags.ObjectLiteral, not Instantiated
Change the error message
Ensure that `checkGrammarModuleElementContext` reliably returns `true` when there is bad grammar.
Added overloads for 'map' on tuple types.
Accepted baselines.
Remove ConstantValue flag, comment cleanup.
factor and simplify rel path test
Factored out hidden path test
Add tests and baselines
Only emit inferred type-alias if it is fully instantiated
isDeclaredProperty: Use optional-boolean idiom
Improve Array.prototype.slice typing
Added test.
Turn 3 type flags into properties
revert versions
Consolidated 'super()' transformation logic into one function.
Add object spread scenario tests
Spreads w/a single type parameter assignable to that type parameter
Add regression tests
Properly handle partially discriminated unions
fixes: merge issue in test baselines, linter
Moved code around, fixed indent, reworded comment.
Removed pointlessish overloads.
Reuse the 'captureThisForNode' function.
Restore arrow function.
Accepted baselines.
update LKG
Collapse 'super()' capture/returns into a single return statement for generated 'super()' calls.
remove Comment
fix merge issues, restore tests
new test
Issue: Commit on enter isn't working correctly for JS completions in VS
update LKG, resolve merge issues
Updated LKG.
Remove usage of 'useCapturedThis'.
Test object spread index signatures
Union multiple spread index signatures
More comments
Test spread type index signatures
Make index signatures work on spread types
merge with origin/master
Moved constant value emit to ts transform.
update dom libs
Remove osx
Remove 0.10
Refactored emit pipeline.
Clean up SourceMapWriter and emitter.
comments
Add tests
Accept new baselines
String and numeric literal initializes in ambient const declarations
Change new file to use CRLF
Rename Spread[Element]Expression
Rename isObjectLiteralElement to isobjectLiteralElementLike
Address PR: use ObjectLiteralElement as an interface name and ObjectLitearlElementLike as a type alias
Extract emit-specific properties into EmitNode
Annotate directorySeparator
Object.assign uses spread types now
Address PR: Update comment and use JSDoc
Move interfaceSpread to correct location
Update baselines
Add spread tests
Update build files
Declaration emit spread types and downlevel spread
Parse, bind and check spread types and elements
add unit tests
Accept new baselines
Add tests
Change this capturing algorithm for converted loops
Accept new baselines
Lazily create fresh literal types
Accept new baselines
Emit widened literal type for const without type annotation
fix linting error
change error message
Convert to Doc Comment
Update baselines
Add tests
Address Github #11081 when we start paring "1" in type and keep going instead of terminate when see ")"
Accept new baselines
Only widen fresh literal types
Add spreadObjectLiteralAssignment. This is an AST node for spread in ObjectLiteralExpression.
Create base interface for ObjectLiteralExpression or future JSXAttributes to extend from. Create ObjectLiteralElementLike and make ObjectLiteralElement become union type of all possible type allow in PropertyDefinition
Track freshness of string and numeric literals
allow to replace content of script info with empty text (#11075)
Update LKG
Add gulp build tasks for cancellationToken and typingsInstaller
set allowSyntheticDefaultImports to true by default for jsconfig.json
Add cancellationToken and typingsInstaller to LKG command
Add fallback for npm location if not running under node.exe
added unittest for watching @types (#11027)
fix 9610 (#11042)
Accept new baselines
Update tests
Unify anyType and autoType when checking for identical declarations
Correctly remove stale .error.txt baselines
Use control flow analysis for let/var with no type annotation or initializer
remove extra files
add check if expected directory path is non-empty string
Add TODO
Lint
An elegant weapon for a more civilized age
fix typo
move throttling to runAsync
Accept new baselines
Improve handling of ++ and -- in control flow analysis
)
PR updates
Use explicit coercion
Initialize instead of letting the value be potentially undefined.
Accepted baselines.
Immediately return the result of super calls when they are the first & last statement in a constructor.
- Reorganize nodeTypingsInstaller and typingsInstaller for testing purposes - Add throttle tests - Add full npm path
Take a few changes.
Cleanup
Refactor
Always return []
Remove unused
Accept new baselines
Add regression test
Cleanup
Working version
do not adjust location being passed to the managed side (#10999)
Use silent never type in control flow loop analysis
Use TypeFlags.Never to check for 'never' type
Add back getSourceFile and mark it as deprecated
Handle msising tags for JsDoc nodes
Accepted baselines.
Always mark derived constructors as 'this'-capturing.
Accepted baselines.
Added test and comment.
Accepted baselines.
Pass the jake test
defer settings format options on file until it is explicitly requested (#10971)
Output the help message line by line.
fix linting error
change error message for assigning from object
change error message for assigning from object
Add throttle limit to typings installer requests
(lshost): run second module resolution pass if first pass yielded non-ts file (#10959)
Address PR: Update comment
PR feedback
Address PR
Update baselines
Serialize type alias when type alias symbol is not accessible
Add tests
correctly update external project if config file is added or removed
indenting
Removed constructor typings which can't be used
Update baselines
Make declaration emit test name consistent
update findIndex for es5 typed arrays
revert fix for generated files
revert tests
Remove require name collision check for ES6 modules and later
Update LKG
Update LKG
Add comment explaining a magic constant in parser
Allow type and NS references to UMD globals from modules
Allow type and NS references to UMD globals from modules
Add tests and baselines
Address CR feedback
More PR feedback
Update LKG
add release-2.0
Update LKG
Address PR
Update version
Add tests and update baselines
Emit declaration file which inferred type alias with its value
Add regression test
Accept new baselines
Add readonly typings for Set and Map
Match number and string literal types to number and string in inference
add test for issue 10843
Lint
Remove duplicate test
Rename function and use `directorySeparator` variables
Update other defintions of findIndex
Use diffrent error message for namespaces unexported members
More PR feedback
move to contribute header
Create folders for sys.writeFile if folder doesn't exist (#10848)
Support compile on save for inferred projects (#10847)
Removed Code of Conduct from contributing, since readme is more obvious
Add Code of Conduct
merge with origin/release-2.0.5
Resolve diagnostics conflict
Update baselines after cherry-pick to 2.0.5
Remove unnecessary parentheses
Update baselines
Computed enum assignability is semi-structural
Update baselines for updated enum assignability
Enum assignability:loosen numbers+tighten computed
Update baselines
More tests of enum assignability
Address PR comments
Test that enum literal is assignable to an enum in a union
Enum literal is assignable to enum, even inside union
Test that number is assignable to enum in a union
Number is assignable to enum, even inside union
Update baselines after cherry-pick to 2.0
Remove unnecessary parentheses
Update baselines
Computed enum assignability is semi-structural
Update baselines for updated enum assignability
Enum assignability:loosen numbers+tighten computed
Update baselines
More tests of enum assignability
Address PR comments
Test that enum literal is assignable to an enum in a union
Enum literal is assignable to enum, even inside union
Test that number is assignable to enum in a union
Number is assignable to enum, even inside union
Added comments for __generator, reduced overall size of helper
Add JSX to SEF exprs
Baseline update
Flip check, add SEF cases
Simplify quick-info tests
Wrap IO for import completions in try catch
Add stackTraceLimit; update harness/tsconfig.json
PR feedback and clean up.
Update LKG
Update baseline
Add regression test
Quick bail out when narrowing type any by equality
Remove unnecessary parentheses
Added test for scenario.
Also wrap getEffectiveTypeRoots in import completion code
Consume exceptions when checking for import completions
Get rid of BOM
Implement NavigateTo for single files, instead of the project.
Add test
Accept new baselines
No widening of inferred type when initializer has a type assertion
Disallow left comma operator operands which don't have side effects
Update baselines
Computed enum assignability is semi-structural
Update baselines for updated enum assignability
Enum assignability:loosen numbers+tighten computed
Update failing test baseline
Support export default for target=ES5/module=ES6.
Add regression test
Quick bail out when narrowing type any by equality
Update LKG
Add regression test
Preserve type parameter types in narrowing
PR feedback
Update baselines
More tests of enum assignability
Address PR comments
Update tests
Add tests
Handle const binding elements with initializers correctly
Accept new baselines
Add regression test
Preserve type parameter types in narrowing
Added a STRATEGY placeholder for the --moduleResolution option
Prevent duplicate entries from type references
Disallow comma operator when LHS is pure
Code cleanup and a few edge cases
minor changes from PR feedback
PR feedback
Simplify parameters of `quickInfoIs`: `expectedtext` must be present and `expectedDocumentation` must be a string or ommitted, never null.
lint: remove trailing whitespace in completions.ts
method stub throwing an error for SessionClient
Adding method stub for the LanguageServiceShimProxy implementation
Document `endOfChain`
Update LKG
Accept new baselines
Use 'true' and 'false' types when contextual type is 'boolean'
Accept new baselines
Use union type when binding element has initializer
Add regression tests
Assume outer variables are always initialized in control flow analysis
Don't try to unlink folders
Add regression tests
Assume outer variables are always initialized in control flow analysis
Surfacing function in services.ts
Surfacing method to get Completion Symbol instead of details for better extensibility
Handle `OmittedExpression` nodes in binding patterns
A shorthand ambient module should be considered as possibly exporting a value
Comment code and remember to add a space before the last part
Move code to a new module documentRegistry.ts
Add test with backslash
Added detection for case sensitive file systems
Make preProcessFile public again
Accept baselines after merge
Test that enum literal is assignable to an enum in a union
Enum literal is assignable to enum, even inside union
A shorthand ambient module should be considered as possibly exporting a value.
Use shorthand properties
Avoid circular references in core.ts (#10783)
Use baselines for quick info tests to ease updates
Test that number is assignable to enum in a union
Number is assignable to enum, even inside union
Revert "Remove failing fourslash tests (may need to be restored and fixed)"
Revert "Remove failing fourslash tests (may need to be restored and fixed)"
For JSX text, construct a single literal node `"foo bar"` instead of `"foo" + " " + "bar"`.
Yep, another unused function in preferConstRule
Remove another unused function in preferConstRule
Update preferConstRule to use getCombined*X*Flags
Use undefined, not null, to satisfy linter
Also decode entities when emitting attributes. Also, lexer should not process string escapes in jsx attributes.
When emitting react code, replace HTML numeric entities with their encoded characters
Only emit comment once for export enum declaration
Added missing semicolons.
Accepted baselines.
Only emit comment only once in module declaration with identifier path name
Force source-map-support to not have source maps
Correct strings based on linting rules
Move allocators.ts to services.ts, meaning.ts to utilities.ts, and transpile functions to a new file transpile.ts
Allow -Infinity as an enum property name
Add tests and baselines
Correct emit comment for decorated class declaration
Mark constructors as this-capturing if they are defined in a derived class.
Update Jakefile
Factor out getRenameInfo
Change travis to target release-2.0 instead of transforms
Expose getCombinedNodeFlags and getCombinedModifierFlags
Export type ModifiersArray
Simplify tracking of top-level type inferences
Optimize 'getSourceFile' to only get the source file once.
Break many functions out of services.ts and into their own modules.
Allow Infinity and NaN to be used as an Enum property identifier
Cleaning up InferenceContext
Accept new baselines
Using existing test for outDir and removing new ones
Remove failing fourslash tests (may need to be restored and fixed)
Updating method name that changed in master
Accept new baselines
Less widening of literal types in type inference
Handle multiple return statements that implement interface
PR feedback
Add a rule to toggle space after opening brace and before closing brace (#10447)
Adjust overloads to fix #10524.
Pass the right host to getEffectiveTyperoots
Accepted baselines.
Added test for '_this'.
Add repro from #10697
Introduce resolvingSignature to ensure caching works for anySignature
Add repro from #10697
Introduce resolvingSignature to ensure caching works for anySignature
Accepted baselines.
Don't emit a return statement at the end in most useful cases.
Accepted baselines.
Added a test for branched returns at the end of a constructor.
Accepted baselines.
Always perform `this` captures after default & rest parameters.
Accepted baselines.
Consolidate '_this' declaration and assignments for first statements in constructors.
Adding comment and removing unnecessary object creation
Adding typingsInstaller unit tests
remove unused code
Search for `node_modules` in parent directories when getting type roots.
Default type roots when host.directoryExists is not implemented should be node_modules/@types, not just node_modules
Add multiple overloads for `verify.goToDefinition`.
Accepted baselines.
Ensure prologue directives occur first.
Accepted baselines.
Factor public type definitions out of services.ts into services/types.ts
Removing old comment
Accept new baselines
Perform return type widening checks after union type is formed
Keep literal return types only when contextually typed by type containing literal types
Simplify go-to-definition tests
Readonly properties in classes are considered immutable locations
Restrict widening of literal types in type argument inference
Use a state enum to parse top-level jsdoc comments
Use undefined instead of empty array, and check for existence of "node_modules/@types" instead of just for "node_modules".
Add `multiMapRemove` helper
Search up for all node_modules directories available
Always tack on a return statement for '_this' in derived classes.
Accepted baselines for sourcemap test.
Accepted baselines for all tests apart from one with source map changes.
Transform other instances of 'this' to '_this' when in the constructor of a derived class.
Update baselines
Use getJsDocFromText to get trailing comments
Accepted baselines.
Undo scanner/emitter changes
Rebaseline tests to old emitter
Emit '_this' declaration for derived classes; initialize it when calling 'super(...)'.
fix recursive directory creation
Port 10404 : optimize emit default constructor for subclass (#10598)
Avoid returning type symbols for js configured projects (#10654)
Remove failing fourslash tests (may need to be restored and fixed)
Update version
Accept new baselines (huge!)
Update tests
Always keep literal types and widen when inferred as types for mutable locations
Add tests for export incorrectly emit twice for decorated class declaration (#8343) (#10651)
Add tests and Update baselines (#10616)
Respond to PR comments
Do not exclude outDir if exclude is given
Rename function
Respond to PR comments
switch to using npm ls -json instead npm install -json
Update test baselines: We no longer search in node_modules/@types if it does not exist.
Use enum for parser state instead of 2 booleans
Update/add baselines for jsdoc/emitter changes
Add more jsdoc tests
Search for `node_modules` in parent directories when getting type roots.
Replace services' jsdoc parser with parsers'
Remember to check for existence of `target.parent`
Always use literal types for literals
Accept new baselines
Union type instead of best common supertype for multiple return statements
fix issue
update runInstall
Cleaning up the completion code and tests
Recombining import completions and regular completion APIs
onSourceFileChanged return immediately when info is undefined
- invalidate typings fix - update gc timer
fix findArgument
Install packages separately
Split tests and fix issues with missing referenced files (#10599)
Improve tests
Remove useless inserts that used to be required to trigger checks
Climb past multiple property accesses if necessary
Support decorators and templates
add tsserver specific resolution pass that will load typings from cache locations if auto discovery is enabled
- Command line should use spaces between types instead of comma - if entry.typings is empty use entry.typings for default typings to install
Also check inheritance for union and intersection types
Remove handling for multiple inheritance for config files
Move invalidate typings cache to UpdateGraphWorker
Refine the search set instead of filtering to implementations
use ScriptKind instead of file extension
invalidate cached typings on add or remove file
merge with origin/release-2.0
Make goto-definition go to a signature declaration if possible
Treat variable declaration as top-level if it has an important child.
Add additional tests to unionPropertyExistence
Do not elaborate on primitive type unions
Add test for invalid property access in unions
Show elaboration for property not existing in union
Accept new baselines
Use 'true' and 'false' types when contextual type is 'boolean'
Accept new baselines
Use union type when binding element has initializer
Change error message which warn unexposed namespace member
Reuse effective type roots code in language service
Check for this symbol before getting display parts
fix typo of missing node.kind (#10569)
Changes from CR feedback
store project errors on project so they can be reported later
PR Feedback
Remove unused parameter
Don't use constructor symbol for search -- use class symbol and filter out only 'new C()' uses.
Update other tests and baselines
Parse untyped object type members separated by ','
Reuse code for tryGetClassExtendingIdentifier
Get the type of a constructor as the type of the class
Allow to find all references for constructors
First in UMD global wins
More PR feedback
Allow undefined from ProxyHandler<T>.getOwnPropertyDescriptor
Swap out TSD for Types 2.0
Update LKG 08/25
avoid creating syntax nodes for jsdoc comment tags (#10526)
Making language service host changes optional
[Release 2.0] fix10179: 2.0 emits optional class properties defined in constructors, which breaks compatibility  (#10212)
PR feedback
Get rid of absolute paths
[CoS] return results from all projects if not specified project file name (#10527)
Correct default compileOnSave value for different projects (#10528)
Clean up maxNodeModuleJsDepth test
Update LKG
strip comments when re-emitting tsconfig.json (#10529)
strip comments when re-emitting tsconfig.json (#10529)
Reduce nesting
Accept new baselines per refactor
Update error message + refactor
Adding display parts to definition items to support FindAllReferences
added more tests for cases when typingOptions are provided by external projects, set typing options after root files are added
Rename function and clean up code
Using for..of instead of forEach
remove merge artefacts
Add APIs for enabling CompileOnSave on tsserver (#9837)
add typingOptions to the protocol.ExternalProject
An import ending in "/" is always an import of a directory.
do not send events via stdout if eventPort is specified
Always output something at the end of walkSymbol
Accepted baselines.
Unify untyped call checking between decorators and template tags.
Accepted baselines.
Added test for decorators.
PR Feedback
types 2.0 WIP
change error message
Accepted baselines.
Added test for untyped tag.
Accepted baselines.
Added tests.
Update LKG on 08/22
Rename getContextuallyTypedThisParameter to getContextualThisParameter
allowSyntheticDefaultImports resolves to modules instead of variables
normalize slashes in names of external projects
Update parser comment with es7 grammar (#10459)
Contextually type this in getDeclFromSig, not checkThisExpr
Go to Implementation
added type installer test for inferred project
Allow "typings" in a package.json to be missing its extension (but also allow it to have an extension)
switch to using dedicated functions to create\throw errors
Add jsdoc nullable union test case to fourslash
Properly guard for undefined in getTypeReferenceArity
Add .types extension
Remove last external use of `unorderedRemoveFirstItemWhere`
Use unordered removal where possible
Accept new baselines
Add comments + minor changes
Implement tuple types as type references to synthesized generic types
Use TS parser to tolerate more errors in tsconfig.json
Add test for configFile error tolerance
Tolerate certain errors in tsconfig.json
Simplify implementation
Add test for jsdoc syntactic classification for function declaration
routine update of dom libs
fix some errors
Add more test for 10426
Update error code number
remove extra code
follow advise
fix linting error
Add error message
Update LKG on 08/19 (#10445)
merge with origin/master
Removing hasProperty check
Pass in baselineOpts into types baselines so that RWC baselines can be written to internal folder (#10443)
fix broken tests
Responding to PR feedback
CR feedback
move module resolution to core.ts
Refactor baseliners out of compiler runner (#10440)
Remove needless call to basename
Remove extraneous arguments from harness's runBaseline (#10419)
Check return code paths on getters (#10102)
merge with origin/master
fix linter issues
Update shim version to be 2.1 (#10424)
Add `multiMapAdd` helper
propagate debug/inspect flags to typingsInstaller process
remove compression
Treat special property access symbol differently ... when retriving documentation
add missing methods
Update LKG
Update version to 2.0.2
use localhost:<eventPort> to send notifications when typings are updated
Move supportedTypescriptExtensionsWithDtsFirst next to supportedTypeScriptExtensions and rename
Output test baselines to tests/baselines/local instead of root
Add more tests for `export = foo.bar`.
Return non-JsDocComment children ... to make syntactic classification work
Use the non-nullable type of the contextual type for object completions.
Added test.
make (no) space after type assertion user configurable
Restored comments to explain spreading 'arguments' into calls to 'super'.
introduce branded type for TypingsArray
added missing files
Update baselines in jsDocParsing unit tests
Use for..of instead
JSDoc supports null, undefined and never types
lint more files
merge with origin/master
Assign and instantiate contextual this type if not present
Add regression test
Update due to CR suggestion
Property handle imcomplete control flow types in nested loops
shutdown typing installer if parent process is exited
Correctly merge bindThisPropertyAssignment
Explain why we lower-case type reference directives
Removing resolvePath from language service host
Use rooted paths in the fourslash virtual file system
record projectName instead of projectRootPath
[WIP] file watching
Update error message for conflicting type definitions
Set isNewIdentifierLocation to true for JavaScript files
Remove old assertion about when we're allowed to use fileExists
Improve ReadonlyArray<T>.concat to match Array<T>
Revert some formatting changes.
Clean up/move some Map helper functions.
Adding more comments
Migrate additional MapLikes to Maps.
add logging to typings installer, read npm bin path to start globally installed binaries
Add tests
Parameters with no assignments implicitly considered const
Add ES2015 Date constructor signature that accepts another Date (#10353)
Migrated more MapLikes to Maps
Resolve aliases to preserve 'Cannot find name' errors for namespace imports
Use removal helpers in more places
Use `removeItem` instead of `copyListRemovingItem`
move global cache location to node typings installer
Rename to Accessor
Use an enum in checkClassForDuplicateDeclarations to aid readability
Aligned mark names with values used by ts-perf.
Parallel linting (#10313)
Rename 'find' functions
fix test
Treat ambient shorthand declarations as explicit uses of the `any` type
Use proper response codes in web tests
Use lowercase names for type reference directives
Preserve 'Cannot find namespace' errors
adjust typing directory
Accept baselines
More helpful error messaging when a type is used as a value
[WIP] home dir
fix linter
update tests
merge with origin/master
fix build issues on linux
accept new baselines
add tests
accept new baselines
Update instanceof conformance tests
narrow from 'any' in most situations
[WIP] initial version of tests
Use 'MapLike' instead of 'Map' in 'preferConstRule.ts'.
ensure tsd cache directory exists
[WIP] send\receive install typing requests
Simplifies performance API
remove unused dependencies to reduce the size of output file
[WIP] pass ITypingsInstaller to ProjectService
Collect timing information for commands running on travis (#10308)
Lint
add runTsd method
[WIP] typings discovery in tsserver
Allow an @types direcotry to have a package.json which specifies `"typings": null` to disclude it from automatically included typings.
Faster path for creating union types from filterType
Address CR comments + more optimizations
Optimize core filter function to only allocate when necessary
Add regression tests
Filter out nullable and primitive types in isDiscriminantProperty
Optimize getTypeWithFacts
Add shorthand types declaration for travis-fold (#10293)
fix linting
Update baseline
Optimize filterType to only call getUnionType if necessary
Address PR: add comment
Add folds to travis log (#10269)
Have travis take shallow clones of the repo (#10275)
Update API sample
Optimize performance of maps
avoid using the global name
Allow OSX to fail while we investigate (#10255)
Make ReadonlyArray iterable.
Optimize format of type list id strings used in maps
[Release 2.0] fix10076 : Destructing with "this" (#10209)
Add tests and baselines
Issues an error when there are more than one export default
Always use thisType when generating tuple id
Delay tuple type constraint resolution
Add regression test
Ignore null, undefined, void when checking for discriminant property
Add explanatory comment to resolveTupleTypeMembers
Use correct this in tuple type parameter constraints
Accept new baselines
Add test
Introduce isTypeInstanceOf function
Improve instanceof for structurally identical types
Remove use strict
use transpileModule
[Release 2.0] fix10179: 2.0 emits optional class properties defined in constructors, which breaks compatibility  (#10212)
Make baselines faster by not writing out unneeded files
Duh
Speed up fourslash tests
Reduce worker count to 3 (#10210)
Add tests and baselines
Call checkExpression eventhough there is no appropriate type from destructuring of array
Moving some utility functions around
Accept new baselines
Add more tests
Update comment
Improve naming and documentation from PR
Add regression test
Accept new baselines
Emit more efficient/concise "empty" ES6 ctor
Add tests
Stricter check for discriminant properties in type guards
Cleaning up test cases and adding a few more
Clean up
Fourslash support
Api Changes and simple superfixes
Surface noErrorTruncation option
Port PR#9867 to Release-2.0 (#10147)
Try using runtests-parallel for CI (#9970)
Port PR #10016 to Master (#10100)
Remove trailing slashes, remove mostly useless IO, fix script element kind for files
Add new test baseline and delete else in binder
addref in all configured projects that contain the file
Don't allow properties inherited from Object to be automatically included in TSX attributes
Support other (new) literal types in jsdoc
Add string-literal completion test for jsdoc
Remove unused reference files: these tests produce erros so they will not produce these files (#9233)
Add a helper function `getOrUpdateProperty` to prevent unprotected access to Maps.
Test that declares conflicting method first
Use {} type facts for unconstrained type params
release cached tree in compilation settings change
Renamed span to textSpan to better follow other language service APIs
Allow JS multiple declarations of ctor properties
Accept new baselines
Limit type guards as assertions to incomplete types in loops
Add a helper function `getOrUpdateProperty` to prevent unprotected access to Maps.
Don't allow ".d.ts" extension in an import either.
Refactoring API to remove duplicate spans
Narrowing type parameter intersects w/narrowed types
No more filtering results
[Release-2.0] fix 9802: fix language service for UMD module alias (#10016)
Rename function
Use recursion, and fix error for undefined node
Remove `SupportedExpressionWithTypeArguments` type; just check that the expression of each `ExpressionWithTypeArguments` is an `EntityNameExpression`.
Improve error message
set compilation settings of project as a part of sync process
Replacement spans for import completions
CR feedback
Refactoring import completions into their own api
allow to change settings for inferred projects
Provide `realpath` for module resolution in LSHost
Accept new baselines
Add test baselines
Add test
Provide `realpath` for module resolution in LSHost
Accept new baselines
Add additional tests
change error message for unused parameter property
allow to change configuration for inferred projects
jsx opening element formatting
Use "best choice type" for || and ?: operators
Correctly check for ambient class flag
Draft of configuration inheritance
use ExternalFile in ApplyChangesInOpenFiles
Have travis use a newer image for the OSX build (#10034)
Simplify some code
recreate program if baseUrl or paths changed in tsconfig
Lint tests helper files
Allow `export =` and `export default` to alias any EntityNameExpression, not just identifiers.
Introduce the `EntityNameExpression` type
Add regression test
Properly reset type guards in loops
add Array.prototype.filter signature with type guard
Use getDirectories and condition node modules resolution on moduleResolution flag
Remove [port] in usage message
Get rid of port parameter
resolve merge issues
Add completions for types triple slash directives
Adding import completions for typings
Use correct nullable terminology
null/undefined are allowed as index expressions
Accept new baselines
Display enum member types using qualified names
Update LastJSDoc[Tag]Node
Update baselines with new concat overload
Re-add concat overload to support inferring tuples
Update baseline source location
The optional this should be readonly too.
Add find and findIndex to ReadonlyArray
Update baselines to be current
JSDoc understands string literal types
Allow an abstract class to appear in a local scope
Unlock ts-node version (#9960)
Import completions with rootdirs compiler option
Remove hardcoded port, use the custom port
Unify nodeKind implementations for navigationBar and navigateTo
Support emitting static properties for classes with no name
merge with origin/master
use FileMap to store script info objects to avoid issues due to mismatched casing
Convert getErrorBaseline to use canonical diagnostic formatting (#9708)
Add support for including dotted and .min.js files explicitly in include
Limit travis build matrix (#9968)
Handling more compiler options and minor refactor
Add assertion whitespace lint rule (#9931)
Support emitting static properties for classes with no name
Add servicesSources to the list of prerequisites for running tests
Add lint enforcing line endings (#9942)
In ts.performance.now, bind window.performance.now
Some PR feedback
Lock ts-node to 1.1.0 while perf issue is investigated (#9933)
Allow `await await`
Optimize type inference
Use binary searching in union types to improve performance
Remove unnecessary subtype reduction operations
Change getUnionType to default to no subtype reduction
to run CI
throw error when paths option mapping empty array
Protected constructors now accessible everywhere in subclasses
Accept new baselines
Reduce unions of enum literal types when displaying types
do not sync program for brace matching
call updateGraph before getting language service
Change parser to use token() function for accessing current token
Enum type is also a union of the literal enum types it declares
Forbid `await await`
Add src to absolute paths in browserify task
Protected ctors are accessible in subclass static methods
Test that protected constructors are accessible
Respond to PR comments
More tests
Clarify code checking for UMD exports and eagerly return `undefined` rather than continuing on to the for loop.
Improve web tests
Use originalKeywordKind to detect this parameters
Test that emitter skips `this` with rest parameter
Skip `this` in emitter in 2 more places
Port PR 9745 to master (#9881)
Allow `await` in a simple unary expression
added tests
Add specific error message for unwanted '.ts' extension
Don't allow `.ts` to appear in an import
Remove dependency on tsd, Related to #9658 (#9724)
read ScriptKind\HasMixedContent when opening external project
introduce ExternalFile interface
merge with origin/master
Optimize checkTypeRelatedTo, part 2
Remove custom source map emit for modules.
Changed specialized emit for IdentifierName
Remove specialized source map emit for rest parameters
Accepted baselines.
Make TemplateStringsArray completely immutable.
Add more commonly used nodes, reduce less frequently used nodes.
Integrate feedback from @mihailik to performance framework (#9845)
Explicit handling for more nodes in reduceEachChild/visitEachChild
Optimize checkTypeRelatedTo
Add performance framework from transforms branch (#9536)
strip quotes from the log file name
Remove bizarre fourslash test
Expand top level of declared type in type alias declaration
Accept new baselines
Associate type alias names with union, intersection and literal types
Accept new baselines
Order union type constituents by type ID
remove node.d.ts
Updated comment
Accept baselines plus new linter warnings.
Update LKG
Port #9798
Accept new baselines
Unify 'boolean' and 'true | false'
Code review comments
remove unused method declaration
Accept new baselines
Include type parameter constrains in literal type context determination
Accept new baselines
No subtype reduction in createUnionOrIntersectionProperty for performance
Use reference types to reference node.d.ts (#9686)
Try removing the conflicting package before install/update
Use sorcery to merge sourcemaps between browserify and gulp-typescript (#9439)
Incorrectly included some unrelated files
Emit parens around type-asserted binary operators
remove extra semicolon
Add npm update call to install, lets see how it goes
use sys based host for formatting diagnostics
Test that contextually typed generic this parameters are instantiated
Instantiate contextual this parameters if needed
Harden compilerRunner vs rooted path names in tests (#9714)
Have travis fast_finish (#9718)
Accept new baselines
Performance optimizations
Tell travis to build on OSX in addition to Linux (#9717)
move endsWith to core.ts
fix absolute paths in baselines
merge with origin/master
use getNewLine from host rather than sys
use getNewLine from host rather than sys
Add formatDiagnostics utility
Use originalKeywordKind to detect this parameters
Remove extra semicolon
Test that emitter skips `this` with rest parameter
Skip `this` in emitter in 2 more places
Port #9621 to release-2.0
Include resolution trace
Add formatDiagnostics utility
More PR feedback
Remove duplicate startsWith and endsWith functions
Use regex
Handle JSX bodies in formatter
Treat "." and ".." as relative module names
use circular buffer instead of unbounded array
defer updates in project structure after file is edited
Responding to PR feedback
Handle JSX bodies in formatter
introduce methods that allow to get project without refreshing inferred projects
Change version to 2.1.0 (#9615)
move saveTo to ScriptInfo
use Logger directly
Move unittests into harness
Have tsconfig for harness
Add node flag check
Make setting properties explicit instead of using parameter properties
Remove another use of `this`, in program.ts
use indentation from ts.formattting
Update conflicting baseline.
Update conflicting baseline.
fix the issue that @property types are not recoganized
Provide a symbol for salsa-inferred class types
Test for multiple salsa assignment-declarations
[Transforms] Merging Master to Transforms on 06/21 (#9294)
Avoid using `this` in object literals where possible
Add __tokentag to Token
Make sure the order of setting pos, end, flags, parent, kind is consistent among nodes, tokens and identifiers
Add --pretty to tsconfigs
merge with origin/master
Add more default options to gulpfile
Removed duplicate logic
Added missing test files
fixed lint error
Updated test with relative import
Removed duplicate logic
Added missing test files
fixed lint error
Updated test with relative import
Update .mailmap
Accepted baselines.
set max size for uncompressed messages
move max uncompressed message size out of the session
Compile with --noImplicitThis
Provide a symbol for salsa-inferred class types
fix linter
Add test for parsed @typedef tag node shape
Test for multiple salsa assignment-declarations
Update harness getDirectories implementation for shims
Parse the result of getDirectories call
Update harness getDirectories implementation for shims
Update LKG
Parse the result of getDirectories call
Avoid putting children tags in jsdoccomment
Update LKG
Make TemplateStringsArray completely immutable.
Update comment to reflect new dependency
Remove the unused text buffer from ScriptInfo
Swap q from a reference to an import
Accepting new baselines
Adding new tests
Adding selected tests from #6196
Narrowing doesn't require switch expression to be unit type
report compression time
Update LKG
make compressed data wrapper over the real data
Removing forEach reference
Set default flags on all nodes
Remove the unused text buffer from ScriptInfo
Update script to pass more than one argument
Update AUTHORS.md for release-2.0
Add authors script to generate authors from repo
Add .mailmap file
initial support for compressing responses
use server side format code options matching arguments is omitted
Removing startsWith reference and fixing linter error
Refactoring node_modules enumeration code
renames
Update language in comment
Update LKG
more tests
more tests
Add support for including dotted and .min.js files explicitly in include
more tests
Identifier constructor
Create tokens using different constructor
more tests
Add regression test
Exclude FlowSwitchClause from flow graph for case expressions
Accept new baselines
All types can be null/undefined and thus falsy in regular type checking mode
Detect always truthy and always falsy types with &&, ||, ! operators
fix linter
add new method getEmitOutputObject to return result of the emit as object with properties instead of json string
Handle relative paths in tsconfig exclude and include globs
Improve names of whitespace functions
Handle relative paths in tsconfig exclude and include globs
Increase timeout from running RWC. As UWDWeb takes slightly longer now (#9454)
Accept new baselines
Ensure const enum members with same value have same type identity
change variable name for strict mode
Removed one error to avoid full path issues
Renamed API
Dont load JavaScript if types packages are present
Don't emit source files found under node_modules
Removed one error to avoid full path issues
Handel Swtich statements check for locals on for statments only mark private properties
Port 9426 to release 2.0
more tests
more tests
handel private properties correctelly
PR feedback
initialize setImmediate\clearImmediate
Better name for test
Respond to PR comments
Parse `export default async function` as a declaration
Show "<unknown>" if the name of a declaration is unavailable
Only mark symbols found in a local symbol table
Code review comments
add tests
Consolidate refernce marking in resolveName to allow marking aliases correctelly
Do not report unused errors for module augmentations
more tests
more tests
added tests
Use checkExpression, not checkExpressionCached
move setImmediate to host
Renamed API
Dont load JavaScript if types packages are present
fix path normalization
Add test
remove commented code
Add tests
Handel type aliases
Consolidate type reference marking in getTypeFromTypeReference
Add tests
Do not check ambients, and overloads
Report unused identifiers in for statements
runtests-parallel skips empty buckets
introduce ThrottledOperations
use isParameterPropertyDeclaration to test for paramter propoerties
push checks to checkUnusedIdentifiersDeferred
Use a deferred list to check for unused identifiers
Add nullcheck when calculating indentations for implort clause
Destructuring assignment removes undefined from type when default value is given
Don't emit source files found under node_modules
Do not scan nodes preceding formatted region, just skip over them
Defere checking unsed identifier checks
merge with origin/master
Consider null, undefined, and void to be unit types in type guards
remove multiple collections for open files
Remove unused functions
Accept new baselines
Narrow unions of literal types by equality and truthiness
getVarDate should be on the Date interface
Add This type to lib
Port 9396 to release 2.0
Add nullchecks for typeRoots, remove getCurrentDirectory from ServerHost as it is always the installation location
Add getCurrentDirectory to ServerHost
VarDate interface and relevant Date.prototype members
new options should be optional for compatibility
Update issue_template.md
Additional comments per PR feedback.
Added es5 conformance tests for async arrow functions, add error for referencing 'arguments' in a generator.
Added additional es5 conformance tests, better emit for functions returning global promise, pass this to __generator
Marked new method internal
Added emitHost method to return source from node modules
Update LKG
remove commented code, added optionality to properties
Remove unused compiler option (#9381)
fix linter
Added es5 conformance tests for awaiting a call
added tests
Added es5 conformance tests for async function declarations. Add ability to treat some statements as if they were prologue directives.
Remove upper boilerplate from issue template
fix merge issue
add support for single inferred project
merge with origin/master
Added es5 conformance tests for await in binary.
Move 'use strict' directive out of generator for async function.
Update version to 2.0.0
Removed extranous original parameter.
Remove extraneous comments.
es6 test conformance cleanup
Import completions for require calls
merge with origin/master
make rules optional
Removed old TODO comment
Added project tests for node_modules JavaScript searches
Remove extra baselines
format jsx expression
do not format comma/closeparen in jsxelement
Make boolean assignable to union types containing both true and false
fix casing
added server bits to jake file
fix logger access issue
[in progress] project system work - fixes in tests 2
Unused identifiers compiler code (#9200)
[in progress] project system work - fixes in tests
Minor fix
Adding completions for import and reference directives
[in progress] project system work - major code reorg
Add fourslash tests & address CR comments
Accept new baselines
Correct handling of falsy types ("" | 0 | false)
extract expression into function
Remove unnecessary parameter
Add new APIs to protocol
Allow space in exec cmds
Correct the api string name
Clean before LKG in Gulpfile
Update LKG
Add matchFiles test to Gulpfile
Check for exactly one space
1. pass subshell args 2. fix build order in services
Add new lint rule
Respond to PR comments
Add failing test
Change reference tests to verify actual ranges referenced and not just their count
Add Gulpfile lint to jake, fix lints
Remove Signature#thisType and use Signature#thisParameter everywhere
[in progress] project system work - path normalization
[in progress] project system work - versions
Make use of module compiler option explicit, add strip internal to tsconfigs
Add node_modules cache to travis
Remove tsd scripts task from gulpfile
Change test comment and accept baseline
Do copyright without gulp-if and lazypipe
[in progress] project system work
Port the sync version diagnostics API from tsserverVS-WIP branch to 2.0
Lint
Accept binding pattern properties error baselines
Change binding pattern parameter property error
Accept rest parameter properties error baselines
For optionality, check question token before JSDoc
Remove stale baselines
Don't crash when JS class property is self-referential.
Adding Code of Conduct notice
Updated tests
Changed implementation to use closure
Signatures use JSDoc to determine optionality
Use document registry to get sourceFiles in SyntaxTreeCache to share trees between semantic and syntaxtic oprations
Add error message for rest parameter properties
Add new error for rest parameters
Make goto-definition work for `this` parameter
Accept new baselines
Literal types for const enum members
export interface used by other exported functions
Lazypipes and better services stream management
merge with origin/master
ported PR #9073
browser tests now also loads sourcemaps from disk
Working non-inline sourcemaps for runtests
Add watch task
Use merge2, gulp-if, gulp-newer, and more projects
merge with origin/master
Use getCanonicalFileName
Accept new baselines
Introduce literal type locations
Accept new baselines
Use implicit boolean casts; it doesn't hurt performance
renameLocations
Adding more matchFiles test cases
getRenameInfo
linter
Classify `this` in parameter position as a keyword
Allow to find all references of the 'this 'keyword
Accept webworker baselines
findReferences
navto
breakpointStatement
nameOrDottedSpan
brace completion
syntactic/compiler options diagnostics
docCommentTemplate
navbar
linter
brace matching
added indentation
Add missing worker types
Add libcheck tests
Add conditional index signature for Canvas2DContextAttributes (https://github.com/Microsoft/TypeScript/issues/9244)
Numeric and boolean literal types
added todo comments
added outlining spans
Responding to PR feedback
Array#map -> ts.map.
Updating readDirectory for tsserverProjectSystem unit tests
[Transforms] merging "master" on 06/15/2016 (#9218)
added cleanup message
introduce EditorSettings/FormatCodeSettings interfaces
routine dom update
Adding base indentation for script block formatting and smart indent
Refactor navigation bar
address code style
add new tests for extends interface
use resolveEntityName to find interface
fix linter
formatting
Using baselines for transpile unittests (#9195)
add tests & add branches for module interface
ignore casing when converting a source file path to relative path
added missing check
set default project on script info when it is queried from project
enable semantic classification
Updates type definitions for Promise and PromiseLike, fixes issues in async functions due to introduction of never type.
Refactor code to make if statements cheaper
normalize file name before lookup
do getDirectoryPath after normalization
Add support for external helpers module, cleanup, and accept new baselines.
getSemanticDiagnostics
Do not use Object.assing in test
Short-circut when reporting errors for helpers.
Update baselines and fix failure when merged with master (#9172)
Remove old test
Allow property declarations in .js files
Accept new baselines
Add regression test
Remove String, Number, and Boolean from TypeFlags.Falsy
Use helper functions to simplify range tests
accept baselines
improve error message for extending interface
Accepted baselines.
Clear out unused compiler options when transpiling
Always check type assertion types.
Accepted baselines.
Added tests.
Updated baselines.
merge with origin/master
Make builtLocalCompiler depend on the local servicesFile
Added tests and fixed related emit issues.
fix tests issues
Accept new LKG (LKGd via gulp)
Alter LKG task to let more be done in parallel
Add needsUpdate check to lib tasks
add cancellation support
Change symbol meaning for __extends resolution to be consistent with other helpers
Resolve external helpers module and report errors for missing module/exports
Calculate readonly? on union/intersection creation
Add --types to pass an empty array to types to disable @types in Jakefile
Accepted baselines.
Correct package.json indentation
Give Jakefile its ending newline back
Add local patch for gulp-typescript types
Add back in Jakefile for transitional period
Gulfile runs tests and compiles like a champ
PR feedback
Test readonly intersection and union properties
Unions/intersections of readonly props are readonly
Working on gulpifying things
Check tuple types when getting the type node's type.
fixup! Remove compileFile and exec browserify - use gulp-typescript instead
Remove compileFile and exec browserify - use gulp-typescript instead
Accepted baselines.
Added tests.
No Need to store dot token when parsing property access expression
Use `isLiteralComputedPropertyDeclarationName`
Add more isDefinition tests and fix computed property bug
Add tests
Narrow non-union types to ensure consistent results
Make isDefinition required.
Unescape identifiers used in code completion
Respond to PR comment
Emit 'Promise' decorator metadata return type for async methods
Accepted baselines.
Emit 'exports.' if the shorthand is a general export.
Accepted baselines.
Added tests.
enable document highlighting"
No implicit returns following exhaustive switch statements
added gotodef
added sighelp
lint
Add unit test
Refactor
Narrow type in case/default sections in switch on discriminant property
Absolute-ify paths in both places
[WIP] completions
Add option to bail out of `jake runtests` when one test fails
Test isDefinition
Add isDefinition to ReferenceEntry
Cleanup, fix linter errors, follow hoisted declarations.
Adds progress indicators to the runtests-parallel build task.
Cleanup, only support generators for async functions, added emit helper.
Add test for jsdoc in navigation bar
added logging to stderr, add command for full quickinfo
CR changes
Baseline fix, CR comments, lint
Use camel-case instead of snake-case (#9134)
minor fix: add missing return clause
Formatting.
Adds support for importing external helpers.
Only inlineSourceMap when debugging through jake-browser (#9080)
WIP - quickinfo
Type guards using discriminant properties of string literal types
Implicit type inclusion changes
fix version related issues
Remove trailing whitespace
Remove single-comma empty array form
Allow empty lists on command line
Recommend runtests-parallel in CONTRIBUTING
Test adding members to JS variables whose initialisers are functions
Salsa: get members of variables whose initialisers are functions
fix baselines
check the declaration and use order if both are not in module file
Quick fix for runtests-parallel
Add tests
add test and spit commandLineParser changes to another PR
Add gulpfile with same tasks as Jakefile
Update LKG
Update more diagnostic messages ES6->2015
Refactoring
Code review comments
Allow null/undefined guard with null/undefined on left
Resolve function-this in parameter initialisers when explicitly provided
switch to use explicit list of open files
Add tests for more kinds of import/export
this in parameter initializers resolves to class
Improve tests
Improve perf
Undo change
Remove stale files
Contextually type return statement in async function
reduce max used values for flags to prevent smi overflows
Update tests
Use proper method of not resolving alias
Add test for out-of-range error
fix typo
adjust check when content should be used
Adds progress indicators to the runtests-parallel build task.
Add more tests
Accept baseline
addExportToArgumentListKind
[WIP] fix typo, make response mandatory
Add more tests for target=es5 module=es6
Add handleing for classes
Primitive type guards are now order independent
Allow primitive type guards with typeof on right
Remove Long-Done TODO
Return trace when exception happens
Add test case
Add comments
WIP
Recognize relative path using in outDir property (#9025)
Remove comments
Add tests
Accept new baselines
Remove TODO comments
Split commentsFunction test into expr/decl
Create intersection types in type guards for unrelated types
Improve order of parameter's merged jsdoc
added openExternalProjects method
Add tests
Allow nested assignments in type guards
added message handlers
more tests for module resolution change and exclude
check if moduleResolution when verifying that program can be reused
group members based on accessibility
Replace legacy emitter with tree transforming emitter.
Remove incorrectly added tests
Allow case comparison to undefined and null in strict null checking mode
add tests for tsserver project system
Respond to PR comments
Add additional tests
Use inclusive flag, as originally done, but include almost everything
Move to a conformance test
factor out isJsxOrTsxExtension
Add another test
Make `jake runtests-browser` support test regexes with spaces
Remove trailing whitespace in jakefile
Support using string values in enums for CompilerOptions in transpile methods
Remove trailing whitespace
Add "implicit any" warning for shorthand ambient modules
change type definition for Object.create
Remove restriction on --target es5 and --module es6
Adding regression test
Consider property declarations to be control flow containers
added delta computation
Add regression test
Remove unnecessary restrictions in property access narrowing
renames, introduce projectKind
PR Feedback
[Transforms] Update transforms with recent master (#8960)
Include indent in navigation bar protocol
Update tests
Use a function `stringify` to simplify calls to `JSON.stringify(xyz, undefined, 2)`
Add merging tests
Respond to PR comments
Respond to PR comments
added close method
move root file to a map, release documents on project close
Add test
Improve typing of && operator with --strictNullChecks
remove project options from project
reuse the fixupParentReferences function
Support shorthand ambient module declarations
Add null check and CR feedback
[Transforms] Update baselines from merging with master round 2 (#8926)
Remove unused variable
Add tests
Allow trailing commas in function parameter and argument lists
Add regression test
Create separate control flows for property declarations with initializers
Add non-widening forms of null and undefined
Allow wildcard ("*") patterns in ambient module declarations
initial revision of unit test support for project system in tsserver
Run fixupParentReferences when parsing isolated jsDocComment
Removes the excludeTransformFlags property from Node
Updated comments for iterateCommentRanges
[Transforms] Update baselines from merging with master (#8898)
Revert to old tryLoad implementation
Actually merge from master
delete redundant fields
drop Timestamped, create separate classes for different project types
annotate class fields
move script version bits into the separate file
isolate responsibilities of LSHost
Simplify disabling comments recursively, cleanup unused flags.
Remove unused parameter
move some methods to scriptinfo
Correct emit never-type (#8903)
drop unused code
Address CR feedback
avoid eating all preceding empty lines
Pulls transformation out of printFile to reduce number of closures. Also some additional cleanup.
Respond to more PR comments
Added profiler event for triggering heap snapshots when using ts-perf
Respond to PR comments
Only check if the extensions match (#8870)
Improve loadModuleFromFile code
Remove redundant parameter to `writeTestConfigFile`
Passing regular expressions to native hosts
Allow an import of "foo.js" to be matched by a file "foo.ts"
Add navigationTo test for jsdoc typedef
cr feedback
More critical path optimization in binder
Optimize critical code paths in binder
Update test
Track return statements in IIFE using a flow label
Reduce allocations/gc by avoiding the creation of some CommentRange objects.
Remove unused types.
check that default clause is non-empty in reachability checks
Performance API cleanup, pre-init with common values.
Moved code around to fix compile errors in processDiagnosticMessages script.
Add tests for private and readonly parameter properties in navbar
update signature of finishWorker
Use a JSON.stringify replacer function instead of changing the value beforehand
Performance improvements in comment emit.
Clean up parallel test runs in runtests-file
Simplified performance timers
Mark diagnostics, and skipDefaultLibCheck as internal
Reorder options alphabetically
PR feedback, removed now-redundant getUniqueClone
Add new tests
Include outer function expressions in control flow analysis
Change how typedef tag is parsed
Symbol for property assignments in Salsa/ES6 constructors
Include type aliases as childItems in navigation bar
Moved responsibility for consuming comment ranges.
Revert previous commit
Change tests to use the full JSON output of the navigation bar. This reduces the confusion of verify.navigationBarCount() counting duplicate items.
Always include a root node in the navigation bar. This lets us change the navigation bar counting algorithm to traverse from the root only, so it never has duplicate nodes.
Removed most needs to traverse original nodes for emit flags, comments, and source maps.
Added parallel support for runtests-file
Isolate polymorfic code to individual functions to speed up inlining decisions in node.
Bringing back excludes error and fixing faulty test
Address PR comments
Accept baselines
merge with origin/master, address PR feedback
Remove many uses of 'null' in harness. Remaining uses should be commented.
Update LKG
add a extra check to avoid rescans
Update LKG
Adds streamlined child visitors for frequently visited nodes.
Remove uses of `null` in services
Correct tests and update baselines.
Add test
Improve intersection type inference
Add test case for excess checking of numeric properties
Remove comment
Only allow excess numeric properties w/numeric indexers
run linter once after last worker is finished in case if there are no errors
Show indent and childItems when debugging the navigation bar
Include modules as childItems in navigation bar
Include interfaces as childItems in navigation bar
Include classes as childItems in navigation bar
Lint all servicesSources
do not swallow test execution errors
Transient node properties for transformations.
do not emit double assigment of class expressions.
unconditionnaly use linter for non-parallel run
Avoid linting files twice
Cache most recent values for node emit flags and custom ranges
Added 'extendedDiagnostics' option for comments/sourcemap measurements.
Instantiate this-type in super property access
Recognize '-?' / '--?' in tsc
isNameOfExportedDeclarationInNonES6Module
Adds a NodeFlag to indicate a synthetic node.
Added metrics for printing
Add getDirectories to shims
Remove intentionally unused variables
Remove duplicate linting of client.ts
Lint unit tests via harnessSources in Jakefile.js
Allow duplicate identifiers as long as their declarations span multiple blocks
Include enums in childItems in navigation bar
Updated test
Don't lose host 'this'
Only return dirs from getdirectories
Apparent members for type params constrained by any
run tests in parallel by equally dividing them between workers
Lint
Handles ES3 default as identifier name
Add test case
Improve doc comment
Factor out the behaviour and handles x++ and ++x
Refactor
Add test for composite assignment
Factor out assignment op check
One more cleanup item from PR comments
Address PR comments
Accept new baselines
Add tests
Only infer 'never' return type in function expressions and lambdas
Lint src\server\client.ts
Add comma
[Transforms] Accept .js baselines when there are compiler's errors (#8744)
Make fourslash tests actually test parentName for navbar items
add SharedArrayBuffer
Don't include imports in navigateTo if the imported declaration is also in the items and has the same name
Lint src\harness\instrumenter.ts
Expand tests
chore comments to jsdoc
Detects assignment to internal module export clause, fixes #8738
Sort baseline reference identifier by name
Add failing test for #8738
Add --skipLibCheck compiler option
Add "tsserverlibrary.d.ts" to LKG
Update LKG
Accept new baselines
Add regression test
Accepting new baselines
Adding regression test
Ignore optionality when determining binding element parent type
runtests-parallel does not fail when a single bucket fails
Make sure to instantiate merged type parameters
Improve readability
Clean up tests a bit
Rename test output to match test name
Allow assignment to readonly parameter property within the constructor
Rebuilt lib
Modified all other findIndex() definitions
add unit tests
avoid using `sys` in editorServices.ts
exclude outDir and add more default excludes
Remove use of ts.sys in editor services
Code review comments
PR Feedback
Change name of the output file
lint fixes
Add lssl to LKG build
Remove dependncy on NodeJs from editor services
Mark IIFE signature with `anySignature` during contextual typing
Simplify and split + and - test
Remove target-following code when erasing signatures
Test assignability of inherited generic default constructor
Simplify the checker, no recursive checking for signature is needed anymore.
Add test for #8657
Handles resolving JSX type for union typed element class
Undo formatting edits
Tweak UMD semantics
Removed nodeEmitOptions to reduce GC overhead
Respond to code review comments
Requires the construct/call signature for each type in the union instead of whole.
Recursively check union type of react components for constructor/call
Lint
Get rid of disk-based paths in baselines
Baseline accept and reorder program logic so common source dir is right
Lint
Update test harness
Add option to lint only specific files
Lint navigationBar.ts
merge branch 'transforms-fixMoreSourceMaps' into transforms-transformer-es6-generators
Conditionally enable performance metrics
Wrap performance metrics in object to reduce deoptimizations on ts namespace.
Update error message
Add error message if module is not specified and a file contains a module indicator
Automatically consume /types
Adding tests
Add additional error checking
Unescape only string literal type nodes.
Unescape string literal types starting with double underscore.
Add type aliases to navigation bar
Accepting new baselines
Make 'never' an intrinsic type
Add test that infers 'number' from pattern
Add printNavigationBar declaration
Rename "getScriptLexicalStructureList" to "navigationBar" in fourslash test helpers and remove unnecessary duplicate helpers
Add test for #7301
Handle 'never' in return type inference
Introduce 'never' type
Extra test for #8364 - non-breaking of one-liners
Issue an error when a derived class precedes its base class
Use binding pattern for type inference result `{}`
PR Feedback
Adding more tests
Accepting new baselines
Emit '?' for optional parameter property in declaration file
Add optionality to properties declared with '?' and initializer
Add option to turn off linting during `jake runtests`
Refactor get(Regular|Widened)TypeOfObjectLiteral.
Improve test: nested object literal with intersection
Adding test
Remove nullability from function types in language service
Search for triple slash comments before getting a source node
Remove broken test
Test expressions with no name
Change other uses of getTouchingPropertyName to check for node === sourceFile instead of undefined.
Accepting new baselines
Properly display optional methods in language service
Allow class properties and methods to be declared optional using '?'
Test nested object literal assignability to intersection type
Make getRegularTypeOfObjectLiteral recursive
Improve test
Look for declaration expressions in nested expressions
Include declaration expressions (class expressions and function expressions) in named declarations
Minor cleanup of getFlowTypeOfReference parameters
Use NodeFlags.ParameterPropertyModifier rather than NodeFLags.AccessibilityModifier to detect parameter properties. This is a continuation of #8555.
Add test for lambda parameter named 'readonly'
Remove duplicate check for misplaced parameter properties (taken care of by checkParameter)
Don't report error twice for readonly in method
Add declaration emit tests for readonly parameter property
Additional source map fixes for initializers and arrow functions.
Adding test
Include 'delete' operator in control flow analysis
Adding test
Stop analyzing loop branches when declared type is seen
fixes source map emit for export= in commonjs
Change name from ConstructorParameterModifier to ParameterPropertyModifier
Adding test
Revert to declared type when '!' postfix operator would produce 'nothing'
expose code path that will use Path type to avoid redundant string conversions
fixes source map emit for export= in amd
Minor fixes and new baselines for destructuring source maps.
Add test
Adding test
Accepting new baselines
Renaming emptyUnionType to nothingType
Revert to declared type when narrowing produces the nothing type
resolve target of alias when getting member from the module
guard agains cases when local value in initializer shadows function parameter with the same name
Code review comments
Remove additional error message generated while emitting output
Update tests and baselines.
Add string literal union type overload for String.normalize parameter.
{Array, TypedArray}.{copyWithin, fill, sort} return `this`.
{Map, WeakMap}.set and {Set, WeakSet}.add return `this`.
Tolerate non-existing files specified
disallow references to local variables of the function from parameter initializers
Add test for explicitly added dotted files
CR Feedback
Add the entire tsconfig as a raw property to the parsed config.
Simplified check for indentation difference
Only contextually type expressions of calls
getSymbolAtLocation now returns symbol for external modules
Allow async as parameter in arrowfunction (#8488)
Address PR comments
Remove stale baselines
Add unit tests for tsconfig file list parsing
Formatting space vs tabs tests added
Check that token is AsyncKeyword before calling lookAhead (#8477)
remove unused code
use CompilerHost.realpath to resolve actual location for symlinks
ignore dotted files and folders
Contextually type IIFE params by their arguments
Improve control flow loop analysis logic
CR Feedback
Adding regression test
Accepting new baselines
Cache visited nodes and types in shared arrays to reduce object allocation
Skip simple conditional flows in control flow graph
Add propertybag to parsed tsconfig.json file.
accept emit baselines
Accept symbol baselines
Correctly copy annotated this getter -> setter
Local caching of types of shared flow nodes
Refactor from FlowKind to FlowFlags
Add tests+baselines for accessor this parameters
Allow this parameters for accessors
Enable find all refs and rename for computed property names with literal expressions
Adding tests
Equality comparisons for null/undefined in strict null checking mode
Code review comments
Polyfill String.prototyp.fill
reset symbol count in binder
Use shorthand properties
Formatting changes
Use const instead of let
Accepting new baselines
Include accessors in control flow type analysis
Reorg Jakefile.js
Adds issue_template.md and pull_request_template.md to .npmignore
Remove unused check
Add support for completion in string literals
Refactor signatureHelp to expose helper functions
Rewrite isInStringLiteral to accomodate for unterminated strings
Initial type of variable is union of declared type and undefined
[Transforms] Remove the assertion as the assumption is not correct (#8341)
check usage before declaration for computed properties in destructuring inside for-of variable declaration
Add a contextual type in test case
Adding regression test
Quicker bail out for type analysis in nested loops
Accepted baselines.
Applied suggested change.
Include sourcefiles in the WriteFileCallback for .d.ts emit
Add start target to package.json
Remove name length limit in navigation bar service for function expression
Code review comments
Add --noImplicitThis test for object literals
Removing comments from test
Adding regression test
Reset dotted name narrowed types when type guards affect base name
Make `this` in object literal always of type `any`
Adding regression test
Correct handling of destructuring parameters in control flow analysis
Update looseThisTypeInFunctions baselines
Type 'this' in object literal function properties
Wipe out the cached script content if failed to read it
Support module.exports.name = expr format
Contextual signatures without thisType return anyType
Address PR comments.
`this` in object literals intersects contextual type and literal type
Remove incorrectly added extra test
Revert Function.bind/apply/call this-overloads
Accepts a number of baselines.
Exclude the files in the .vs folder
Move the dir watcher to parseConfigFile
Accepting new baselines
Display the name 'nothing' for the empty union type
Routine update of dom lib files
Adding fourslash test
Properly display narrowed types when hovering in IDE
add dirWatcher for "watch" option in tsconfig.json
Add config file diag related types to protocol
Adjusts source map emit for members
Don't error when 'reserved' names appear in ambient contexts.
Error baselines
Add test
Add event for reporting tsconfig errors
Filter library text from RWC output (#8297)
Add test for narrowing to unions of string literals
Missed a defaultable in comments
Defaultable -> NotNarrowable to align with use
Reconcile fix with CFA work
string literal case test
Remove check narrowing only certain types, add test showing issues with this
Adding regression test
[Transforms] Add test from fixing 8256 into transforms branch (#8294)
Variable of type any has initial type any in control flow analysis
Remove hard-coded new line character option
Comments
Adding regression test
Cache control flow types only at loop-back junctions
Format JOSN in failed error messages
Add configured projects to the list of projects when searching
Added more control over sourcemap/comment emit and fixed a number of source map emit issues.
resolve build error
refactor
Adjusts source maps and comment emit for decorators
Adds source maps for captured this, skips source map for synthetic return token in arrow.
Adjusts source map emit for classes and down-level rest parameters
Add env to allow switch to non-polling if really wants to
PR Feedback
Handle the scenario when let [a=undefined]=[]
Accepting new baselines
Revert previous change
Only narrow to {} in getNarrowedType when types are completely unrelated
Update fourslash test
Correct issue with exported variables in code flow analysis
Provide server response when reload is done
Allow keywords in jsdoc comments parsing
Removing unused logic
Adding test
Support assignments in truthiness type guards
Add test case for #8229
Accepting new baselines
Add regression test
Improve consistency of instanceof and user defined type guards
treat TS only keywords as identifiers in jsdoc comments
Adding testcase for function with rest param defined in jsDoc comment Test case for #7749
Add emacs temp files to gitignore
Test case when --out is specified for compiling module but --module isnt specified
Report error if user specified --out and we are defaulting to commonjs emit
Remove temperary file (#8221)
Removing unused logic
Address PR comments
Accepting new baselines
Adding test
Support comma operator in type guards
[Transforms] fix8155 : Hoist exported enum in system output (#8177)
Adds transforms for NonNullExpression
Mark 'this' parameters in the binder.
Addressed CR feedback (which fixed 'tests/cases/conformance/es6/modules/exportsAndImports3-amd.ts').
do not validate module names in augmentations defined in ambient context
Adding testcase for function with rest param defined in jsDoc comment Test case for #7749
Use string literal type for script kind names
Skip emit of this parameters
So we are back to polling.
Add missing semicolon
fix formatting for lines that start with continuation of multiline comments
Updated appropriate baselines.
Use the '__assign' helper in transforms.
Adjusts some source map locations. Updates baselines.
Filter library text from RWC output
Variables from different module declarations default to their declared type
Variables from different source files default to their declared type
Update baselines after merge
fix 8117
typeof x === "function" type guards include Function interface
Cleanup and accepting some baselines.
Accepting new baselines
Only evaluate assigned type when declared type is a union type
remove extra deduplicate
Adding another test case to handle more generic scenarios
Accepting new baselines
Update baselines
Adding tests
Improve expression type caching to ensure consistent results
Add the test case for #8105
References decorated classes in static functions using rename entity (#8150)
Array.prototype.filter.not.forcing.boolean (#7779)
Update baselines: remove parenthesis around comma expression in for loop headers with destructuring assignments
Accept project test baselines when --out is specified with commonjs as the output is not generated for module bundle
Bump TS services version to 0.5.
O -> Of
Removing unused properties
Accepted symbol baselines.
Added another fourslash test.
Use an element access when displaying literal members.
Accepting new baselines
Adding tests
Improved handing of evolving types in iteration statements
Added tests for quick-info on string-named enum members.
Accepts new baselines to fix #8076
Addesses a number of comment/sourcemap related issues
Correct export assignments for when the variable declaration has an export modifier.
use existing 'isSuperCallExpression' function
Script side implementation for Brace Completion. (#7587)
revert back fix for implicit exports of imports
allow top level 'import x = identifier | qname' in module augmentations
permit global augmentations to introduce new names
code clean up
Added an assertion to ensure export assignments for expression statements are only emitted for decorated clases.
Emit 'exports.foo' assignments for bindings that are exported in specifiers.
Check for class expressions when finding related symbols in base types
Add calls to unescapeIdentifier for destructured identifiers
Improve comment explaining ContainsLexicalThisInComputedPropertyName
[Transforms] fix `_this = this` capture emitted before `"use strict"` directives in AMD module output  (#7953)
[Transforms] fix8038 and 8047 (#8071)
[Transforms] fix Not correctly emitting local name for exported class (#8048)
fix typo in message
added validation of paths option
Add tests for renaming and incremental parsing. Changed how the AST was hydrated with jsdocComment nodes.
Add explanatory comment when adding ContainsLexicalThisInComputedPropertyName
Capture `this` in computed property names in arrow functions
emit 'export *' for es6 only if module exports some value
Update the entry point to return property symbol of destructuring assignment
[Transforms] updatebaseline (#8067)
switch to use addPrologueDirectives function
Set the end position of variable statement as -1 so the trailing comments are not emitted
Revert changes from  5e308b9
Set LocalName flag for exported local then skip it
Remove commas from nodeEdgeTraversalMap manually for now
Review comments
Return undefined instead of createNotEmittedStatement
PR Feedback, also removes cloneEntityName.
Commend rewording per PR feedback
Improving error reporting as suggested in code review
Remove custom no-null rule, use tslint builtin no null rule
PR feedback
Accepted baselines.
Include exported name in error message.
Accept baselines
Accept baselines: better comment output
Accept baselines: extra parens
Accept baselines: output formatting changes
Accept baselines: using dots consistenlly for numeric literals
Accept baseline: Static properties after export
Accept baselines: syntactically invalid input
Accept baseline: use strict in an empty module
Use double quotes consistently for module names
Move helpers to factory.ts
elide exports with no value side
Do not emit "from" if import clause is missing in import declaration
don't generate temp variables for computed property names in enums
Accepting new baselines
Adding regression test
Reorder host in jakefile so TYPESCRIPT_HOST is checked before localhost
Emit module names when --out is specified for system and amd modules
Remove parentheses and accept baselines
addressed PR feedback: added more tests
fix emit for super calls that has preceding prologue directives
Update es5 module internal imports test and related baselines
A few cosmetic changes
Do not emit ES6 import/export inside namespaces
include type reference directives in .d.ts. files
Some restructuring according to PR feedback
Removed debugger; statement
Helper rename as per PR feedback
[Transform]: fix emit __extends within system.registry (#7973)
Rename of getPropertySymbolIfObjectBindingPatternWithoutPropertyName to getPropertySymbolOfObjectBindingPatternWithoutPropertyName
Test case for failing scenario of wrongly reporting error of parameter of private method when no implicit any is speicified
PR feedback
PR feedback
Test cases for functions with same name present in the outerscope
PR feedback - Cacheing the script target - Added missing return - Reworded error messages
Accepting existing baselines
Adding test cases for errors resulting because class/modules are strict
Report error for block scope function declaration in ES5
Bind the function declarations in block scope in strict mode
Add test cases for function declarations in block scope
Update LKG
fix issue with optionality of CompilerHost
Accepting new baselines
Prefer ChakraHost when available to node and WScript
Accepting new baselines
Adding test
Accepting new baselines
Support destructuring declarations in control flow analysis
Update baselines (#7981)
handle export default
Disable sourcemap text tests for now to limit noise
Make project tests run in the server
JS style changes
Cleans up a few things and fixes #7868.
Accepting new baselines
Handle shorthand property assignments
merge with origin/master
Only emit rest param code for identifiers.
emit export star only if export will yield anything with value side
Another test case for rename in destructuring assignment
Rename function
Correct destructuring assignment to empty object
Rename the `forEachProject` function to something sane
Accepted baselines.
Changed emit to use 'Object.prototype.hasOwnProperty'.
Report implicit any errors on destructuring parameter declarations Handles #6935
Accept correct baseline (#7967)
Accepted baselines.
Handle the rename locations for default import Handles #7024
Accepting new baselines
Flow analysis of &&, ||, and destructuring assignments
Remove unnecessary 'null'/'undefined' check, removed temp for args length.
Add API support for LS host to specify script kind of a file to open
Accepted baselines.
Use an emit helper for JSX Spread Attributes.
Makes transforms the default
Adds IO mappings for tryEnableSourceMapsForHost
Remove message from 'help'
Add a source mapping to the closing `}` for functions, and wire in positions for class transfomtaion
remove trailing commas
use temp variable for current dir.
Test case for nested binding element's rename
Handles when property is renamed and is also part of destructuring assignment Handles destructuring assignment part of #6312
Ensure the listed files have absolute paths.
record temp variable introduced in spread calls
CR Feedback
Changed getDeclarationName to allow comments if requested
refactor cr
elide unused imports in ES6 emit
Emits class name with comments.
Test cases when var is renamed and used in destructuring
Test cases for destructuring declarations in "for" and "for of" loops
emit missing initializers for shorthand property assignments
Add contextual typing test with `this` specified
Accepted baselines.
Ensure that the entire contents are simply 'use strict'.
Accepted baselines.
Added test.
Ensure that the entire contents of the prologue are simply 'use strict'.
Accepted baselines.
Ensure that the entire contents are simply 'use strict'.
Accepted baselines.
Added test.
emit unqualified enum members as qualified
Sync with TSJS repo
Export the respective let binding when a decorated class is exported.
Support the case with variable name as @typedef type name
Accept baselines for invalid module +target combination. Closes #7876
Enums with numeric names not emitted as string
accept extra parens
better output for **= operator
Remove empty comma expressions
use dots in all number accesses
`export=` in ES6 modules, accept latest
invalid export in blocks.
formatting
Do not emit rest param if not the last.
invalid output in both cases, picking the latest
better output, previouslly block scoped variable was not renamed.
Formatting system module output
Function declaration with string template, syntactically incorect.
Invalid input, this in static property intializer. output is worng in both cases.
emit `*` in generators downlevel
Emit imports as const declarations.
Only emit the module specifier on an export if it is present.
treat classes as block scoped entities
enable generated names for block-scoped binding in for-of
fix scope tracking when converting loops
Add a newline after emitting shebangs.
Include the target symbol in search if location is propertyName or the import or export specifier dont specify "as" clause Handles #7708
added supports for 'types' compiler option
Whitespace fix
Add option to list the emitted as part of the compiler output.
Additional fixes for React emit.
Support the case with @property and @type
remove compilationRoot parameter, use typesRoot/config file location as a root when computing primary locations
Adress PR: add nullability to signature
Not use toPath in tsc when dealing with file watching
Accepted valid baselines
Add nullability into signature
addressed PR feedback
Move PropertyKey from es5 to es2015.core
Update baselines
update baselines in unittests, fix linter issues
Adjustmodularize lib
Accepted baselines.
addressed PR feedback
Use isWatchSet to test for options.watch
accept baselines
Test cases for when default temp var is inserted for export default in the declaration file
Code review comments
PR Feedback
Simple case and scoping
removed unused type assertions in harness
Forbid ConstructType as part of 'no this in constructors'
added tests
expose type reference resolution for external consumption
Address CR
Support reference library directives
Prepend 'the' to a couple of ambiguous messages.
Separate error messages for 'null', 'undefined', or both.
Improve error messages and always return any from newed functions
Improve error messages and code style
PR Feedback
Support unknown types (host object names) in typeof type guards
Test that signature help doesn't show 'this'
Updated a few baselines
Adjusts emit for templates
Address PR comments
Error on all uses of this that are implicitly any
Address PR: Put --lip options into one line
Address PR: use getDefaultLibLocation to get directory
Address PR: merge two functions to get-default-library-file
Undo comment override from merge.
Address PR: merge two functions to get-default-library-file
Delete removeNullableKind, use getTypeWithFacts instead
Accepting new baselines
Remove unnecessary cast
Use type {} for vacuous type guards / New getTypeWithFacts function
Review comments
Address PR: add comment
addressed PR feedback
Address PR: remove debugger statement
Update baselines affected by modularize library PR
Address PR: give default value for getDefaultLibrarySourceFile and use debug assert
Update the baselines for modularize library
Clean up library files
Address PR: use getDefaultLibLocation? insteadof getUserDefinedLibFileName
Addres PR: change lib filenames from es6 to es2015 and es7 to es2016
Add compiler-baseline tests and associated baselines for --lib flag
change error message
Update fourslash tests
Update unittest for --lib
Implement --lib flag in the compiler and harness
Modularize ES6 and ES7 library files
fix comment
do not treat class declarations as nodes that start lexical environment
Update baselines after merging from master
Throw error when tsconfig.json has excludes without exclude property
fix emit for unary operators on exported variables in system modules
Normalize `tsconfig.json` path before searching
Accepting new baselines
Addresses CR feedback
accepted baselines
added support for captured block scoped bindings
Accepting new baselines
Add --noImplicitThis flag
Remove --strictThisChecks
Changed emit for decorator metadata
Add control flow tests
Remove incorrect type predicate (could be true even when result is false)
Handle assignment of union types in getAssignmentReducedType
Elides functions with invalid bodies.
refactor
Explicitly exclude . and .. for fs.readdirSync
Do not always add sourceURL for browser tests
Adding a few optimizations
Revert change to Object.assign
Use fileName instead of Path when dealing with file systems directly
Modified createIdentifier to track originalKeywordKind
RegExp.compile() actually returns `this`, per ES6 annex B.
Add nullability annotations to core.d.ts and es6.d.ts
fix issues in emit of System modules
Minor update to source map emit and fix for positions
Minor cleanup of ts transformations.
Accepting new baselines
Add type annotations to suppress circularity errors
Initial implementation of control flow based type analysis
Always consider ambient variables assigned
Adds implicit "use strict" for amd modules and fixes issues with variable names and classes.
Accepting new baselines
added API sample to tests
drop inference limit
Routine update of dom-related lib.d.ts
Updated baseline
Added environment variable support to tests
Added environment variable to force experimental transformations.
Update tests
Handle JSDoc tags on 'this' properties
Support this.prop = expr; assignments as declarations for ES6 JS classes
Accepted baselines.
Don't elaborate errors when trying to relate a primitive to a union.
revert changes in the signature of 'convertCompilerOptionsFromJson'
partially revert #7583
PR Feedback
Updated baselines
rename LanguageService.getSourceFile to LanguageService.getNonBoundSourceFile and mark it as internal
check if import collides with exported local name
Make language service optional for a project
Addressed PR feedback
show completion in destructured parameter if containing function was contextually typed
addressed PR feedback
Speed up file searching
emit top level classes as class expressions when target=ES6 and module=System
fix comments
use downlevel destructuring for exported variables for target=ES6 if module kind is not ES6
Address PR
Address PR
Remove unused error message
Remove trailing whitespace
Remove unused error message
Remove --lib
Unify error message for custom-type compiler option
Update symbol baselines
Remove members from getAccessibleSymbolChain walk
Using ts.filter instead of just .filter
Handle default compiler-options and typing-options
Adding sourceFiles to the Program emit callback
RWC runner fixes for reading json files
Add unittest for testing convert compiler-options and typing-options
Add a new unittest for command line parsing for --lib
Port NavBar for JS improvements
Don't count current opened client file if it's TS file
online and offline CR feedback
Remove 'T?' notation from type-to-string conversion
Add unittest for parsing --lib in tsconfig
Add correct options for --lib
Chagne specifies -> specify
Add support for list types
Removing 'T?' type notation (use 'T | null | undefined' instead)
CR feedback / Change upper limit / Add disableSizeLimit compiler option
revert
find module augmentations in preprocessor
don't check that return statement has expression in constructors
add missing conditional check
Add comments
Add upper limit for the program size, fix readDirectory for the symlink files
Rename --strictThis to --strictThisChecks
Remove 'undefined' from type of binding element with non-undefined default value
Add 'undefined' to type of parameter with default value in signature
AllowJS files in tsserver when no project is given
cleaned up assertions and removed flattenNodes.
Removed NodeArrayNode in favor of arrays
Add support for array return values from visitors
Removed ModifiersArray
Accepting new baselines
Support 'this' in type guards
Moved modifier related flags to separate enum
Add `export = class` scenario
correctly recognize captured loop variables in destructuring assignment
Better error message + fix assignment analysis of 'switch' statement
Addressed feedback
Updated binding for module.exports
Revert "add part of test baselines"
add part of test baselines
Add test for function export
Reuse existing var
Add tests for each variant of UMD augmentation
After merge, update error numbers in baselines
Add missed update of thisInObjectLiterals baseline
Update baselines: 'this' in object literal methods
Check this expressions in object literal methods
Always run lint, even for runtests-parallel
Adding comment to test
unwrap promised typed in async function before doing 'noImplicitReturns' check
Adding tests
Use existing function to resolve export= declarations
Support module augmentation
Support UMD when targeted module uses `export = `
Lint
Move checks from checker to binder
Address CR feedback
UMD support
Add three tests
Skip unnecessary instatiation of anonymous types
System doesn't have direct identifier access in TS's generated code.
Handel module augmentation with export= var + uninstantiated module
Union this-types of unioned call signatures
Accepting new baselines
Adding another check for undefined
General fixes and cleanup
Make 'undefined' assignable to 'void'
Improve type relationship error reporting for nullable types
Check return type includes 'undefined' in function with implicit return
Treat 'return' as 'return undefined' for type checking purposes
Proper handling of 'null' and 'undefined' in equals and not equals guards
Keep linter happy with fix in reduceLeft/reduceRight
Remove unused variable
Include 'undefined' in return type for implicit or expressionless returns
Add only 'undefined' to optional parameter types
Accepting new baselines
Introduce comparable (a.k.a. possibly assignable) relation
Removing unused functions
Expose ts.isExternalModule as public API.
Extract and lift nullability over best common supertype
Code review comments
Consider for-in and for-of variables to be definitely assigned
Accepting new baselines
No widening of 'null' and 'undefined' types in --strictNullChecks mode
Reinstate separate type kinds for 'null' and 'undefined'
Removing cachePath from discoverTypings and DiscoverTypingsInfo. With the move to using the packageNameToLocation map it is no longer required.
in noImplicitReturns mode, also disallow "return;"
Accepting new baselines
Allow 'null' and 'undefined' as type names
set the maximum depth to explore during type inference
Update with master
Concat declaration error so we report them
Assigned-before-use checking for non-nullable variables
Add tests
Switched to onEmitNode
Enable navigateTo on all projects for a file
Switched to onEmitNode
Switched to onEmitNode
Enable findReferences on all projects for a file
fix(build) `TypingResolutionHost` interface is used by exported function `discoverTypings`
Switch from onBefore/onAfterEmitNode to onEmitNode
Enable rename on all projects for a file
Added new diagnostics message to clarify error for type guards
ES6 cleanup
- Adding new lines after { for single-line if statements - Renaming DiscoverTypingsSettings to DiscoverTypingsInfo to match host
- Removing filesToWatch from getTypingNamesFromNodeModuleFolder. These modules are already installed and are not expected to change
- Adding DiscoverTypingsSettings - Remove all references to Tsd. Instead pass a map of package names to cached typing locations
Update the format span end position for formatOnEnter
allow fallthrough from the last case of the switch
flip sides source and target when we check signature relations
PR Feedback
Don't crash
Show aliases (e.g. imports) in JSX tag completion positions
Update to push types through as well
- replacing TryParseJson with existing readConfig - push error for invalid enableAutoDiscovery option - adding interfaces for jsons - removing updateNotFoundTypings - node_modules normalize file names before using - adding safeListPath to discoverTypings
Changed how parserContextFlags are handled in tests
Add JavaScriptFile to ContextFlags
Support JSDoc on class / obj. literal getters
Don't crash if there's no JSX.Element during SFC resolution
PR Feedback
Avoid removing indentation on a new line as trailing white spaces
Minor tweaks to naming
PR Feedback
Remove mistakenly added webTestServer files
Remove transformCompatibleEmit flag and make it the default.
PR Feedback and defer makeUniqueName/getGeneratedNameForNode to printer.
Support string literals+computed property names
Use single-quoted strings in certain places.
Allow single quoted strings when double quotes would otherwise need to be escaped.
Early support for generators.
Update baselines after merging with master
Add test cases and baselines.
Contextually type initializers of binding elements
- Removing ts. from jsTyping.js - Adding ".json" file extension filter when retrieving json files from host and removoing filter - simplify isTypingEnabled check
Accepted baselines.
Instantiate type parameters with themselves as their 'this' type when relating.
Accepted baselines.
Added tests.
do not emit explicit 'continue' in converted loops
Accepting new baselines
Support dotted names ("x.y.z") in type guards
Adding optionalDependencies and peerDependencies to the list typings to merge in if present.
Move `checkClassPropertyAccess` call to `checkVariableLikeDeclaration`
CR feedback
Unify the use of "filter", "map" and "Object.keys" functions
Use errorNode everywhere in `checkClassPropertyAccess`
Tests for Stop destructuring assignment of private properties
`checkClassPropertyAccess` in `getTypeForBindingElement`
Revert "spelling fixes for src" on generated dom lib.
merge conflicts
emit temp declarations after export equals
properly set reachable state after protected try\finally block
Code review comments
- renaming resolveTypeDefinitions to discoverTypings for consistency with jsTypings - simplifying typingOptions parsing after associated managed host changes
spelling fixes for src
Add test and baseline
Defer-check function/method nodes even when context-sensitive.
address PR feedback: add comments
avoid multiple passes over the program when computing diagnostics for the bundled emit
Code review comments
Do not add extra space for ommited expressions.
Add test
Correctelly serialize types with signatures containing binding patterns
Accepted baselines.
Never elaborate errors when relating from intersections.
Accepted baselines.
Added tests.
Reverted change to emitter to force use of printFiles
Updated lift behavior
Removed unused liftNode function
PR feedback
Reenabled transforms.
Make declarationDir invalid alongside out or outFile
Added additional auto-parenthesizing to visitor.
Appease linter.
Accepted baselines.
Don't elaborate errors for relations from intersections to object types.
Using removeComments from commandLineParser. This is more robust as it removes both single and multiline comments
PR Feedback
Accepted baselines.
Added tests.
Update LKG
Update baselines to make declarationDir invalid alongside out or outFile
Added temporary compat flag to control emit output to fix tests
Consolidate watch checks in one place
Adding devDependencies to the list of typings to merge
Switch let -> const from lint validation
Addressing CR comments - Adding check to ensure TypingOptions 'include' and 'exclude' arrays are composed of strings - Allow leading whitespace when removing comments from json
Address PR feedback: expand ternary return into if block, add check to ensure proper options usage
PR Feedback.
PR feedback
Added initial SystemJS transformer.
Error messages consistently use non- prefix
Update error message as requested in PR comments
Add abstract property tests and rebaseline.
Add abstract properties and accessors
Salsa: JS support for discovering and acquiring d.ts files (Mostly isolating VS host changes from PR#6448)
Added more tests and accept baselines
Addressed PR
Adds navigation bar items on methods and constructors
Add declarationDir option
Accept baselines
Add testcases
Add sample files for testcases
Accepted baselines.
Added tests for ASI and element access with 'let'.
merge with origin/master
fix linter issues
do not make inferences with the same source\target pair multiple times
Added CommonJS/AMD/UMD module transformer
Adds ES6 transformer
Enables source maps for exceptions thrown in the compiler (when available)
Suport both x != null and x != undefined in non-null type guards
Change to getScriptKindFromFileName to avoid unnecessary array allocation in split
Rebaseline tests with improved error message
Address review comments
Rebaseline messages in existing tests
Add cases and baselines from #6211 and #6210
Accepting new baselines
Support x == null and x != null in non-null guards. Also, allow == and != in type guards.
Switch test encoding from UTF16 to iso-8859
indent 'from' again
merge conflicts
Applying getScriptKindFRomFileName to HostFileInformation before we set the ScriptKind. If the host returns ScriptKind 'Unknown' or 'undefined' we attempt to get the correct ScriptKind based on the file name. If this cannot be determined we return the default ScriptKind 'TS'
Add fourslash test
removing some culturally senstive words
super's containing class doesn't require base node
format jsx
Firefox has Object.prototype.watch
parser and services changes due to CR comments - Adding assert to ensure script kinds are not modified for registered docs - setting script kind in parseSourceFile and consuming it initialize state and getLanguageVariant
Rever change to EmitOutput.diagnostics
Correct && operator to produce nullable values
Addressing CR comments - Adding ScriptKind to SourceFile - Only update ScriptKind on creation, on update use the SourceFile's scriptKind - If scriptKind is unknown, default to ScriptKind.Ts - Replacing try-catch with in this.shimHost
Accepting new baselines
Disallow line breaks between operand and '!' non-null assertion operator
Add '!' non-null assertion postfix operator
Accept baselines
Added tests
Allow private and protected class members to be accessible in nested classes
Modify version format
Add version examples
Add issue and PR templates
correctly check exported type aliases merged with overloads
Removing trailing whitespace from services.ts
Port #7106 to master
Added initial ES7 transformer
Adds initial jsx transformer
Salsa: adding ScriptKind to ensure script blocks (.html, .aspx, .ascx, etc) are processed as JS
PR feedback, switched to getEmitScriptTarget/getEmitModuleKind
PR Feedback
Address more comments and remove temp test.
Add missing semicolon
Add truthy/falsey guards for nullable types
Exclude undefined/null from flags propagation within union types
Make types of optional parameters and properties nullable
Ensure empty array literal is assignable to array of non-null type in strict null mode
Support nullable types with expression operators
Don't widen undefined types in unions
Display support for nullable types
Introduce nullable types in checker
Accepting new baselines
Make undefined and null assignable to each other
Use TypeFlags.Undefined for both undefined and null types
Parsing of nullable types
Introduce -strictNullChecks compiler option
Included previously ignored baseline .js file and slight refactoring
Updated tests
Added tests
Load JS from node_modules
Updated tests
Set experimentalDecorators warning for JavaScript
Allow decorators in JavaScript files
Updated tests and accepted baseline
Addressed PR
Updates to TransformationContext and transformer.ts
PR feedback and cleanup
Added the accidentally-ignored js files.
Remove the 'module' option from 'tsconfig.json' files.
Ignore using the correct glob.
Remove unnecessary option from harness
added misssing files
Added tests and accept baselines
Allow extending and instantiating a private or protected class within itself
classic resolution: don't perform folder walk if module name is relative
Accepted baselines.
Added tests for declaration emit.
Addressed CR feedback.
Removed trailing whitespace for linter.
Actually, it makes more sense to error on the predicate annotation than anything else.
Added tests.
Minor rename.
Error on nodes which should not have type predicates.
Move type predicates back onto signatures, remove narrowing for property/get type guards.
Add test
PR Feedback
Some cleanup and reorganization
Accepted baselines.
Use names of accessors instead of their entire spans.
Address PR
Adds the TypeScript transformer
Ignore JS files under tests/cases/*
address PR feedback
fix 'fileExists' check by using stat directly
Remove incorrect commment resulting from merging
fix falling tests and linter issues
Added module: none baseline
Added module: none as an option
Dont default to CommonJS modules for ES6 target
Added back errors for module kind none
Remove duplicate function from merging
Do not add minified JavaScript files on file crawl
Removed errors for missing module specifier
Changed further defaults to CommonJS
Changed node_modules and module defaults
Port PR#6860 lexically check calling super before this
:heart: linter
Don't ever use resolveEntityName here
Correctly resolve qualfied JSX tag names
Add failing test
Removing unused function
Accepting new baselines
Infer index signatures when object literals contain computed properties
spelling fixes for src/compiler
Simplify indexTypesRelatedTo function
Reorganize related functions
split declaration and initialization of writer variable
spelling fixes for src/compiler/binder.ts src/compiler/parser.ts
Move suppress option to appropriate place
Check in other places too
:heart: linter
Add undefined checks for malformed type tags
Adding test
fix source maps for in-browser tests
Revert hash object caching
Refine implementation
Accepting new baselines
Include index signatures in object literal types only when computed properties are present
Adds destructuring logic and placeholders for each transformer.
Accepting new baselines
Implicit index signatures for object literal types
Added printer
Moved LexicalEnvironment to types.ts, minor fixes
Moved TreansformFlags assertions after markers
PR Feedback
spelling fixes for checker.ts, declarationEmitter.ts, types.ts
Create createHash and getModifiedTime under sys, and refactor implementation into compiler host
Add 'wiki' and 'handbook' directories to the docs folder with READMEs.
Revert unioning of this argument types
Improve error reporting
Moved createNode back to parser, added local createNode to factory
Add missing tests from portfix6901
Improve display and contextual typing of `this`
Updated comment
Go to defininition should not go to named import
Accepting new baselines
Adding test
Rename allConstituentTypesHaveKind/someConstituentTypeHasKind to isTypeOfKind/maybeTypeOfKind
Correct handling of intersection types in allConstituentTypesHaveKind
Avoid writing files that are not changed while compiling incrementally.
change flag name
Get contextual type of this parameter correctly
Do not contextually type object callee arguments
spelling fixes for services.ts
Addressed PR
Port fix6901 from release-1.8 to master
Refactorings from review comments
Adds the transformFiles API
Cleanup and reorganization of node tests
Add specific error messages for out-of-place this
First round of review comments addressed.
Added ArrayKind, moved createNode, changed JSDocParsing tests to use baselines.
Accept baselines
Addressed PR. Diagnostic messages
fix test baselines
Refactored visibility text on modifier grammar check
Accept baselines
Addressed PR feedback.
addressed PR feedback
Rename flag
Adds transform flags aggregation to binder and visitor
Update baselines
Added constructor visibility in the declaration emitter
Add more complex test scenarios
propagate back assignments to block scoped binding from the loop body
added tests
removed unused function
Added visitor API
Added and updated tests for constructor visibility
Added private and protected modifiers to constructors
Add flag to emit modules in loose mode
Update README.md
Use different syntax kind here
Addressing CR feedback
Capture `node.parent`
Recognize object literal method JSDoc comments
Recognize `=` as equivalent to `?` in JSDoc signatures
Update README.md
Update README.md
fix error message with public class inside namespace
Remove unused error message
Update error numbers in new tests after merge
Undo strictThis-clean changes
emit import declarations without import clause in .d.ts files
Make this-type of bind's return explicit
Accepting new baselines
Adding test
Properly parse function/constructor types with destructuring parameters
Delete mention of nonexistent watcherPath param
:heart: linter
Allow parsing TS-style generics in JSDoc
Always show file tokens in JS completion lists
do not error if typings for external library is empty .d.ts file
Update test files.
Add missing semicolon when emitting return statement.
Add malformed parameter test
Add some tests
Treat multiple prototype property assignments as union property declarations
Add more tests and baselines
Remove old baselines
Rename test cases so they are consistent with the rest
Update baselines
update baselines
fix linter issues
don't do 'directoryExists' check in classic resolution scheme
Accepted that other baseline.
Accepted baselines.
Only error on 'export =' declarations.
Added tests.
properly classify dotted tag names in jsx
suppress validation of output paths in transpile scenarios
Adding /*@internal*/ directives
Remove parserContextFlags from Node type
properly dotted namespace names in System modules
Renaming parsing context flags to NodeFlags.xxxContext
Routine update of lib.d.ts 20160131
Removing MultiLine, Synthetic, DeclarationFile, and OctalLiteral flags
properly handle merged declarations across files
addressed PR feedback
remove uncommented lines
Typo fixes in CONTRIBUTING.md
unpin mocha version
allow augmentation for entities exported via 'export='
Update baselines
Add tests and baselines for this-function types.
Add overloads for Function.apply/call/bind
Add services support for this types.
Make compiler strictThis clean.
Add new error message and strictThis flag
Skip emit of this types as first parameter.
Check this type in functions.
Parse this type using parameter syntax
fix access check issues when declaration is in multiple files
set __moduleName from context.id argument
fix tslint
single iteration through children array without any array allocation
Add explicit `return undefined;`
Don't crash when return type jsdoc tag is malformed
PR feedback
Don't show the currently-completing thing at the cursor in JS files
fix linter issues
add extra argument to 'isRequireCall' to check if argument is string literal
Accepting new baselines
Adding more test cases
Emit readonly in declaration file for get-only accessors in classes
Use union types in the return type of functions in the error case
Add more tests and comments
Recognize the RHS of assignments as the JSDoc target expression
Adding test
Emit readonly in declaration files
Update authors for release 1.8
Cleaned up variable names and conditions in checkIdentifier
Creates a class body scoped alias to the class to avoid class name double binding.
strip quotes from module names during deduplication
Updated test baselines
Parse JSDoc comments for ES6 class constructors and methods
Allow multiple 'this' property assignments in Salsa
add tests
merge with origin/master
Renumbering NodeFlags to start at 1 << 0
pin mocha version to 2.3.4
pretty output for react jsx
addressed PR feedback
Comments and messages
Update baselines
Simplify giving error message and remove unnecessary error
Updated baselines
Update Array.concat type signature to fix #6594
Added comments for new flags in types.ts
Added error when return type is not the global Promise
Moved isSuperPropertyOrElementAccess to utilities
break on 'this' type in hasConstraintReferenceTo
PR feedback
Update version
Lint
baseline-accept
update implementation based on the results of design meeting
Accepting new baselines
Adding tests
Error for Promise redeclaration in module with async
use a local string rather than a function
extract a helper method
a better way since languageVersion is a number
Accepting new baselines
Adding const/readonly to core.d.ts and es6.d.ts
Accepting new baselines
Include readonly in type equality checks + Treat more symbols as readonly
use `const` rather than `var` when emitting external import declaration and the target is es6
Accepting new baselines
No readonly checks in type relationships + No assignments through namespace imports
Remove `clear` method in `WeakSet` and `WeakMap`
Remove unrelated changes
Consolidate branches
Remove obsoleted test
Remove value-side JSDoc type lookup fallback
Remove unreachable code
Rename getTypeParametersFromJSDocTemplate
Remove incorrect changes from server.ts
Accepting new baselines
Disallow assigments to exported variables from external modules
Add Array.prototype.includes
Address PR
set default module to commonjs for jsconfig.json
Update LKG
handle undefined entry as export specifier
Treat .js as JSX
Add support for jsconfig in shims
Updated failing test
Accepting new baselines
revert breaking changes
Make get only accessor compatible with writable property in type relationships
Updated nodeIsDecorated
handle block scoped binding in nested blocks
update lib from TSJS 20160119
Add support for jsconfig.json in language service
Consider ReadonlyArray<T> an array-like type
Add ReadonlyArray<T> to core.d.ts
Addressed PR feedback: refactored away helper function, generated spec from docx
Accepting new baselines
Chaning "read-write" to "writable" in error messages
Accepting new baselines
Updating error messages
Allow 'readonly' only on property and index signature declarations
Allow assignments to readonly properties in constructors
Accepting new baselines
Support readonly indexers + include readonly modifier in typeToString
Refactor to introduce IndexInfo type
Removing unused function
Go back to depending on nightly builds of TypeScript.
Accepting new baselines
Check readonly in assignments and type relations
Removed trailing whitespace
Allow missing return for unions containing any or void
Added test case
address CR feedback: use typeof check instead of checking undefined and null value
Add failing test
Updated version of __awaiter.
do not crash if initializer in For-statement is missing
Removed unneeded language version check.
Accepted baselines.
Look up static members from instance methods.
Accepted baselines.
Added tests.
address PR feedback
merge with origin/master
Back to booleans.
Update CONTRIBUTING.md
Documented the 'ReportErrors' enum.
addressed PR feedback
Just check if the original type is a primitive instead of checking the apparent type.
Temporarily use an older nightly so builds can succeed.
Print the names of files being linted.
not casting relative filenames in 'tsc watch' to Path
Added missing semicolon.
Accepted baselines.
Don't report structural errors on primitive apparent types.
Propagate forced re-elaboration through relation functions.
Accepting new baselines
Allow modifies on type members + introduce "readonly" modifier
Address PR
changed messages text in checkAndReportErrorForMissingPrefix
Address PR
Use gender-neutral language
Update utilities.ts
cr feedback: simplify the removeFile function
changed name of checkForMissingPrefix to checkAndReportErrorForMissingPrefix
address PR feedback
Update the watchedFileSet to use Path instead of string for file names
fixed unqualifiedCallToClassStatic1 test
fixed scopeCheckExtendedClassInsideStaticMethod1 test
fixed scopeCheckExtendedClassInsidePublicMethod2 test
fixed recursiveClassReferenceTest test
fixed scannertest1 test
fixed parserindenter test
fixed parserharness test
fixed YieldExpression11_es6 test
fixed initializerReferencingConstructorParameters test
added check for missing prefix
added two new more specific messages
Make `parseTypeOrTypePredicate` terser.
Remove duplicated functions
merge with origin/master
fix linter issues
accept baselines
merge with origin/master
add no-default-lib tag to core libraries
report errors when re-exporting globals
Tidy up unused comments / code
Don't rely on truthiness.
Separate directory watching and file watching again to reduce logic complexity, because reference counting is a lot easier in this case
Reverse order of Promise.all overloads.
Address PR
update baseline from merging
fix linter issues
added jsx classification support to fourslash and tests
Simplify JSDoc scanner loop
classify jsx text and jsx attribute values
recognize Jsx attribute in syntactic classifier
Update LKG.
Address PR feedback
Add tests
add more spaces on test
do not add space between comma and close bracket
spell our dir to directory
Bump version to '1.8'.
Enable linting on 'shims.ts'.
scanJsIdentifier -> parseJSDocIdentifier
JSDoc identifiers must start with an identifier start
Add check for reactNamespace value
Add new helper to check for valid identifiers
Add tests
Rename jsxNamespace to reactNamespace
Add test for renaming accorss modules using export=
Code review comments
Accepting new baselines
Check for numeric index signature instead of array-like type Better error message when object with numeric index signature is indexed with a string
remove unneeded comment
thinner arrows
const everywhere
enclose entryName
resolve conflicts
Updating tests
Support for-in both with and without variable declaration
Remove unrelated changes
merge with origin/master
Properly cache JSX element types for SFC expressions
Clean up unrelated changes
add optional 'directoryExists' method to hosts to reduce amount of disk probings that are known to fail
Better name for checkTypePredicate helper function
Accepting new baselines
Adding new tests
Updating existing tests
Change for-in iteration variable type from any to string
Add new test for import..require
Accepted baselines.
Updated a test and added a new test for assignability betewen typed arrays.
Use string literals for '[Symbol.toStringTag]' properties.
Added '[Symbol.toStringTag]' properties to type arrays.
Added '[Symbol.toStringTag]' property to 'GeneratorFunction'.
Change logic in identifying SFCs
Accepted baselines.
Added tests for LHS expressions.
Accepted baselines.
Contextually type the RHS of logical 'and' and comma expressions.
Added 'noImplicitAny' to tests.
Accepted baselines.
Added tests.
added tests for tsx formatting
merge with origin/master
Minor formatting fixes
Comment cleanup
accept baseline
Updating language specification
Update lint message to not mention element access.
Add test for non-used React import
update dom.generated.d.ts with latest version in TSJS repo
Issue correct errors for missing JSX closing tags
Add test to verify no error when 'React' is not in scope
Tag the 'react' import as used even under --jsx preserve
Make linter happy
Escape quotes when they appear as HTML entities in JSX text
Lint 'patternMatcher.ts'.
Allow tagged boolean arguments to be followed with a colon.
enable more than one callbacks for a watched file
Flattened 'ts.OutliningElementsCollector' to a single declaration.
Lint 'navigateTo.ts'.
Lint 'outliningElementsCollector.ts'.
Accepted baselines.
Added test from #6278.
Accepted baselines.
Updated tests.
Accepted baselines.
Don't skip over specialized signatures when checking for assignability.
Accepted baselines.
Removed checks for specialized signature compatibility and always perform the same checking on specialized and non-specialized signatures.
Accepted baselines.
Added tests.
use 'declare global' to define augmentations for the global scope
lets and template strings
remove "this should be removed ..." codes
Accepted baselines.
Simplified JSX contextual typing code and added support for contextually typing string literal attribute initializers.
Accepted baselines.
Added test.
address PR feedback
fix crashing when get documentHighlighting
Add documenthightlight tests
Add find-all-references tests
Add rename tests
Add tests for find-all-references
Add test cases for breakpoint validation in for of statement with object literal destructuring assignment
Remove new lint from services.ts
Tighten no ++/-- rule
Test cases for object binding pattern destructuring assignment
Add test cases for array pattern destructurting assignment in 'for of'
Reuse watchers between 'watchDirectory' and 'watchFile'
Test cases for array pattern destructuring assignment in for initializer
Implement breakpoint spans of array destructuring pattern of destructuring assignment
initial revision of external module augmentations
Remove unused error for this-type predicates.
InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces
report pre-emit diagnostics that blocked emit
Address PR
Add type alias for filewatching callbacks
Add tests
Test cases for breakpoints in assingment statement with destructuring
Add tests
Accepted baselines.
Added positive test case suggested in #6129.
Test cases for destructuring in For Of statement
Test cases for breakpoint in destructuring of For Initializers
Implement breakpoints in paramters with destructuring binding pattern
Addressing CR feedback
filelist -> fileList
Made 'expression' non-optional in 'CaseClause'.
only '++' and '--' unary operators can change exports
fix trailing whitespace
Initial check in - Support other JSX factories Issue #3788
Addressed CR feedback.
merge with origin/master
Removed unused declarations from 'services.ts'.
Address feedback
Remove unused variable
Use hidden text in Word document for markdown image links
Address feedback
Address PR feed back
Update assert msg
Accepted regressive baselines.
Update baseline from merging master
Have 'signatureRelatedTo' just use 'compareSignaturesRelated'.
Refactored most of 'isSignatureAssignableTo' to a more general function based on 'signatureRelatedTo'.
Added missing require for 'session' tests that relied on 'harness.ts'.
Test cases for parameter destructuring pattern
Adjusting indentation
Remove missed unused declaration from 'harness.ts'.
Property show images in Language Specification markdown
Test cases for breakpoint span in array binding pattern of variable statement
Support for breakpoint spans in object binding pattern
Get type of target enum outside the lookup loop
Add assertion to check that ranges-array is not empty so it doesn't silently fail
Get rid of list and map abstractions to reduce GC pressure
Removed unused declarations in 'harness/fourslash.ts'.
Removed unused declarations in 'server.ts'.
Removed unused declarations in 'session.ts'.
Removed unused declarations in 'editorServices.ts'.
Removed unused declarations in 'loggedIO.ts'.
Removed unused declarations in 'compilerRunner.ts'.
Removed unused declarations in 'harnessLanguageService.ts'.
Removed unused declarations in 'harness.ts'.
Removed unused declarations in 'emitter.ts'.
Removed unused declarations in 'sourcemap.ts'.
Removed unused declarations in 'parser.ts'.
Removed unused declarations in 'checker.ts'.
Removed unused declarations from 'declarationEmitter.ts'.
Removed unused declarations from 'core.ts'.
Removed unused declarations from 'sys.ts'.
Add 'no-unused-variable' to 'tslint.json'.
Add test cases for variable statements with destructuring breakpoint validation
Make changes to baselining breakpoint validation of current file to use default baseline name
Added README.md to 'doc' folder.
Improve decorator on overload error message (fixes #6064)
Address comments
Add debug fail when getting parameter-property declaration
Detailed comments for regular expressions and renamed some files.
Minor update to shims.ts for forthcoming VS support for globs.
more tests
addressed PR feedback
Add enum/module merge test
Use a comparison function instead of creating a new type for each signature.
Removing unused function
Simplify abstract constructor type assignability checking
Use nicer flag collection method
Revert linting services
Use FileMap instead of string array
Properly handle multiply-declared optional properties in JSX attr. type
Heavily revised implementation that relies on an updated 'readDirectory' API.
Accepted baselines.
Added tests.
update System.register baseline with __moduleName output
Check for function flag on class symbol
add __moduleName to System.register
Adding regression test
Mark anonymous type as resolved before resolving call signatures
addressed PR feedback
Add tests for binding pattern in parameter property declaration
Accepting new baselines
Simplify deferred checking of function, class, and accessor bodies.
Update tests
Add tests
Initial fix for rename for parameter property declaration
allow usage of 'super' in object literal expressions
trailing whitespace
accept baseline
make ChakraHost more generally usefull
whitespace
Do some caching so that we don't repeat the same work for the implementation signature for every overload.
Reversed order of checks, since the implementation will typically be more general than the overload.
Accepted baselines.
Specifically test for 'void' to permit implementations to return more than what was guaranteed.
Accepted baselines.
Added tests for 'void' return type compatibilty on overloads and implementations.
Test cases for destructuring with default values in "for"
Accepted baselines.
Test cases for destructuring with default values in "for of"
Update tests
Test cases for destructuring with default values in parameter position
Test case for array binding pattern destructuring assignment with default values
Test case for variable destructuring statement with array binding pattern and with default values
Addressing CR feedback
Test case for variable destructuring statement with object binding pattern and with default values
Filter for enum members only.
Rollback to polling file watching
split tests by completions/quick info
add feedback from PR
Remove includeGlobalSymbol boolean
fix linter errors
revert back to polling watching for approaching release
Update testcases
Adding regression test
Defer checks of accessor bodies in object literals
Removed some unnecessary changes and added comments
Use typeof enum to resolve members.
Accepting existing test cases baseline after verification
If the destructuring assignment is synthetic use the left side as source map This helps in scenarios like below where the assignment is created synthetically for ({a} of {a: string}) { }
Tests for source map of variable declarations with binding pattern in differnt order in the declaration list
Add merged enum test
Handle merged enums
Adding tests
test for and fix #6043
Adding test
Add tests from review
Address review comments
Add language service tests for this predicates
Add support for modifying last encoded source map's source location With this, we can just highlight the bindingElement when the temp variable for it is assigned. Note there are few scenarios like below which would still highlight let part but thats because of how default value source mapping is currently which is next in pipeline to support binding element with default values for (let {name: nameA, skill: skillA } of robots) {     console.log(nameA); } or for (let [numberA2, nameA2, skillA2] of robots) {     console.log(nameA2); }
Include fresh type parameters in type parameter mapper function
Rename parameter
Add test case and accept baseline
Compare enums semi-structurally.
whitespaces
getCurrentLeadingTrivia
applying three feedbacks
accept baselines
reorder if
destructuring applied
most pr feedback
Simplify the array binding pattern element to determine what to highlight
Update existing baselines
Test case for sourcemap of "For of" that initializes vars using object literal binding pattern
Make sourcemap of "For" that initializes vars using object literal binding pattern better
Test case for "For" that initializes vars using object literal binding pattern
Test case for "For" that initializes vars using array binding pattern
Test case for "For of" that initializes vars using array binding pattern
Make the destructuring array literal assignment better with sourcemap
Test case for assignment expression with Array destructuring pattern
Test case for "For" statement with array binding pattern
Test case for "For" statement with object binding pattern
Test case for For Of statement with array binding pattern
Make the source map of "for of" destructuring - object binding pattern better
Test case for ForOf statement with object binding pattern
Test cases for nested array binding pattern destructuring in parameters
Test case for parameter array binding pattern
Better the destructuring of nested array binding pattern
Test case for nested array binding pattern
Better the sourcemap for array binding pattern
Test cases for variable statement with array binding pattern
Test cases for nested object binding pattern in parameter declaration
Tests for parameter object binding pattern
Make nested object literal destructuring pattern better
Test case for nested object binding pattern in variable statement
Better sourcemaps for destructuring
Test case for destructuring of variable statement
One more
Address CR feedback
crlf 2
crlf
resolve conflicts
remove whitespace
move blocker to nodeWillIndentChild
merge conflicts
Update baseline from returning with unknownSymbol
Don't include completion in opening tag, include name of opening in closing tag
Update tests
Accepted project baselines over and over until I hit a fixed point where everything passes.
Accepted baselines.
accept new baseline
Added test for immediately invoked class expression.
Accepted project baselines.
Accepted baselines for non-project tests.
Updated unit test.
Moved a paren.
preserve some old behavior at @DanielRosenwassers request
Improve comment
Accepted baselines.
Removed misleading comment from test.
grand unified theory of predicate types
Use different relation for overload compatibility.
Use logic for win
Accepted baselines.
Added some tests for overload compatibility.
fix generic instantiation, nested this guards now work
Remove empty test.
Accepted baselines.
Address comments
Add full path to spec md file in generate-spec target
merge with master
Address comments
Changed name of 'reduce' method added to FileSet
Disallow modifiers in object literal property assignment
Parse JSX attributes as AssignmentExpressions
Accept baselines
Move type predicate checking to checkTypePredicate
Add tests and accept baselines
Parse type predicates only in return types.
space around arrow
directly expose nodeWillIndentChild
Revert change to abstract-method-with-body error location
baseline accept
improvements based on comments
add tests for the issue
update lib.d.ts from TSJS repo
Improve 'Cannot compile modules unless the '--module' flag is provided.' message
Added stubs to ChakraHost interface for readDirectoryNames/readFileNames
Added caching, more tests
Remove unnecessary I2 from test case
Actually include the fix....
Support 'this' in inferred method bodies
merge with origin/master, add trace message with type of 'typings' field is not 'string'
Identify JSX closing tags as identifiers so they emit correctly
Explicitly list tuple overloads for `Promise.all`.
Limit error reporting for methods to the method name
Gracefully handle errors where 'typings' is not a string (fixes #4828)
Addressing CR feedback
Accepting new baselines
Adding a bit more text to comments
Adding test
add baselines
break down tests, make more clear whats doing done, remove specific logic from mergeSymbolTable
Simplified JS prototype class inference
JS Prototypes WIP
check for presence of array
fix typo, reduce nesting, defer array allocation until needed
parse module specifier as string (old logic is kept for better error recovery)
remove lint
Accept new baseline
Simplify check for constructors
Add test and accept baselines
Inherit construct signature for extended interface
Improved error messages for property declarations
first pass at this type predicate members
Only infer *to* type references that have explicit type arguments
remove unneeded cast
utilize type guard on type guard logic more
feedback from pr
Check for lenght of declaration instead
Update CONTRIBUTING.md
Update README.md
Update README.md
Initial support for globs in tsconfig.json
clarify documentation
fix instructions for contributing to lib.d.ts
use typeof to check for presence of `JSON` global
fix esmodule big, unify export emit between es6/pre-es6
Add tests, remove internal annotation form enum
first pass at this type predicates
Adding test to demonstrate limits of signature identity checking
Removing comment from test
Add comment for use of isPrimitiveApparentType
Remove apparent type of primitives from errors
Strict mode errors
remove line and unused code
Add more tests
All tests for using let
Check grammar for let/const declaration for all targets
Reachability errors
Strict mode errors
Multiple default exports error.
Duplicate symbol error
Simplified after CR feedback.
Adding regression test
Ensure that different type parameters are never considered identical
Propagate 'this' type in constraint checking
merge with master
dont canonicalize the filename when generating names, just use the absolute path
add tests
cr feedback
respect root dir/common src dir when generating module names
tweak rules
rule text fix
add new rule
Add support for Chakra Host in sys.
Accepting new baselines
Allow type parameters in constraints
lint rule forbidding the in keyword binary expression
lint all filed before a failure
trio of missed style nits
Additional tests
Style nits for the style nit god
Support for assignment/destructuring using super in an async method
Baseline update
Simplifying the pre ES6 async/await change
Alternate approach to fix super calls in async methods.
do not error on 'super' property access in ES6
Enable await in ES6 and ES2015 script mode
Change "object type literal" to "type literal"
fix merge issues
var rename as per PR feedback
Add test case for reporting file preprocessing error in javascript file
Report bind diagnostics, program diagnostics and file pre processing diagnostics in javascript file Handles #5785
Do not emit files if noEmit is specified Handles #5799
rename tests, add another test, reoslve symbols for comparison
Sync the dom.generated.d.ts files from TSJS repo
Update baseline with new error message number and fix space and comment
Update baseline for new message
Address PR feedback
Add tests
Update baselines
Add tests
Add basic check for use super before this
fix typo in comment
use const
ignore all trivia except singleline comments when processing tripleslash references
fix lint errors
do not report 'noImplicitReturns' error if inferred return type of the function is void/any
Revert baseline changes to the objectTypeLiteralSyntax2 test
Add comment
Move initializer checks into checkGrammarProperty
Report property errors in the checker instead of the parser
fix module record nonambiguous case, add test for it
accept baseline
accept new baselines
accept baselines
Include debug assert
update description
accept projects tests baselines
addressed PR feedback
Test case for binder errors in .js file
Change variable naming
Simpler inline cycle check for stringify
Add tests for #5173
Missed linter error.
PR feedback
check for null
Improve variable naming
Improve error message
Only report errors from the first failure
Renamed functions, fixed signature, removed TODO.
Add fourslash tests
Removed isArray branch in checkCycles as it was unnecessary
removed typeof check for isArray
Minor stringify cleanup, added cycle detection for AssertionLevel.Aggresive only.
addressed PR feedback
minor tweak to null handling in stringify
merge with master
only emit use strict if a use strict prologue isnt found
Accept baselines
Elaborate interface signature errors
removing filename requirement
Extract source map generation logic out of the emitter.
accpet new baseline
Add comments, change error message
ending the pain and suffering of the projects tests
projects tests are maddening
projects teeests
accept new projects baselines
fix transpile unit tests
Accept so many baselines
add strict mdoe directive to all nones6 module emits
fix lint errors
Accepting new baselines
Adding regression test
new tests
Update relation cache after we decide to elaborate an error
do not treat modules with '!' in names any specially
change enum emit
fix whitespace
fix ES6 emit for namespaces to only emit one export binding
Correct comments, use destructuring
addressed PR feedback
address PR feedback - fixed typo in comment
correctly capture 'this' when converting loops into functions
apply tslint rule to scripts\tslint
apply tslint rule to scripts\tslint
Accpet new baselines
Clarify comment
WIP
apply 'noImplicitReturns' check for functions that don't have type annotations
Minor comment update
Modified cloneNode to ignore own properties of clone.
Accepting new baselines
Adding tests
Reduce union and intersection types before inference
Implement #5173
verbose module resolution
merge with master
Minor change to getStringLiteralType
Adds a generic algorithm to create a shallow, memberwise clone of a node.
Adds StringLiteralType to SyntaxKind to disambiguate string literals in a type position.
Decorators node array should have pos at token @ instead of actual decorator expression
Breakpoints on the node with decorator should start at actual syntax and not from decorators
Setting breakpoint inside decorator expression results in setting breakpoint on all the decorators On resolution, this would be call to __decorate
Test cases for breakpoints with decorators
When the node contains decorators the actual start of the node is after skipping trivia from decorators end
Comment cleanup.
invert the conditional I was asked to invert
factor for loop into filter, minor style changes
I forgot to commit the baselines. T.T
Adds minimal support for 'this' types in decorator metadata, emitting 'Object' for now.
initial implementation of path mapping based module resolution
add a new test
Refactor getCommonSourceDirectory into a closure function
Update test baselines
Dont emit names index mapping into the sourcemap Since sourcemap spec is not very clear about symbol translation and use of nameIndex of the mapping, dont emit it
remove comment
Add a test which uses common src dir in a different way
only make common dir on call
PR feedback
Remove unnecessary 'else' block.
Small refactorings.
Simplify simplify simplify.
const
disallow references to function locals from return type annotations
update test with pr feedback
do not resolve parameters/type parameters if it is requested from restricted locations
only check against default flag
use getCanonicalFileName on path fragments as in other utility methods
Clean up unnecessary comment annotations
Adds ThisType to SyntaxKind, to distinguish between a 'this' expression and a 'this' type. Needed for transforms
addressed PR feedback
clean residual state in binder and emitter, clean test data in version cache test
addressed PR feedback
switch fourslash to use local test state
Change the api for node name resolver to take compiler options instead of supportedExtensions
remove Tao generation
use normalized absolute file names when doing consistency check
added default chrome path for Mac OS X
cleanup harness code
do not crash when variable and function declarations collide
fix many lints
and somehow all that caused was a lint error
:S
get projects dts back
handle things more rightly
in declaration emit, handle = require (again)
fix typo
accept corrected projects baselines
Always compute a common source directory for a program
Load only typescript files if resolving from node modules
do not crash if overloads cannot be merged under one symbol
use common source directory for module paths
accept baselines for new test
ignore undefined type guards
exhaustive tests
cleanup test harness code
test, first pass at a fix
accept baselines for new tests
fix handling of decorated default exports on es6 with nones6 modules
add decorator flag to tests
handful more tests
Add a handful of tests
Go all the way back to the original solution
use relative path from current directory
When excluding same base name file from compilation, check for all supported javascript extensions instead of just .js
Test case for multiline spanning without return statement
go go go
Simplify regex a bit
Simplified logic of getting files if files werent suppplied in tscconfig.json Since we dont support arbitary list of extensions to treat as .js, it becomes easier to simplify code based on the assumptions
Missed some errors
Update react.d.ts from DefinitelyTyped
Removed the TODO as created bug for it
Remove debugger statement from test
Adding test and comments. Override file content even if already opened.
Use https for badges
Quote only names that need to be quoted, not the reverse
always check statements in case clause
Encoding bug
Update authors for release 1.7
added missing check if file is specified
PR feedback
add condition to bail at containing level
loosen walk up containers, add extra test
this should work better than dedupe
because it needs to work with npm 2 as well
use tslint@next
Test cases to verify --inlineSourceMap with --sourcemap --mapRoot and --sourceRoot Note that --sourceRoot fails with crash
Test cases for --sourceMap --inlineSources option
Use string literal types in the command line parser.
Updated LKG.
Added test.
remove whitespace
Use 'getContextualType' for 'getContextualType'.
Remove now-unused function
cr feedback
Move export default check before module merge one
Added to comment.
Accepted baselines.
Only get the apparent type when necessary.
Use printVersion instead
CR feedback
accept new baselines
fix lints
extract method
Missed some baseline files; address CR feedback
Added tests for string literal types used as generic constraints.
Add file content as a parameter for the tsserver open command
Cleanup of types
use canonical filename function
Handle when using -p and config file not found
Change back from jsdoc comment.
Support to tests for absolute paths, add common src dir edgecase tests
Improve comment
Accepted baselines.
Test cleanup
Added other tests for string literal types.
Cleanup
merge with master
Add handling for json parse errors
Add case sensitivity-check, only error on failure when outDir is specified and resource based paths are found
Added test for parenthesized string literals.
Add test case and accept baseline
Prevent resolveName from ignoring default exports
Improve efficiency and naming
tsx : support tags in language service semantic tokenizer
JSX SFC WIP
Add test case
use typeof
Address comments
Accepted baselines.
Get rid of the concept of 'isDefaultLib'.
Add command line flag to allow synthetic default exports
Removed no-default-lib comment from test case.
addressed PR feedback
use modulekind to check if initializer for shorthand property assignment should be emitted
Accepted baselines.
WIP
fix lints
Added tests for template strings with string literal types.
fix merge issue
More test cases and accept baselines
apply captured type parameters to returned classes
Use ts.indexOf instead of Array.prototype.indexOf
Use ts.indexOf instead of Array.prototype.indexOf
do not report 'excess property error' if object literal pattern contains computed properties
remove nodeConstructors array, replace it with single local
make emitter singleton, replace reading file properties with local access, use one constructor function for all nodes
Const.
Don't look for .js files when resolving node modules
Accepted baselines.
Add getCurrentDirectory to call to createDocumentRegistry
Rename `isTsx` for clarity
Accepted baselines.
Added specific checks for comparing stringlike types.
Accepting new baselines
Updating existing test
Adding test
Instantiate type parameter constraints with type parameter as 'this'
PR feedback
Addressing CR feedback
Accepted baselines.
Changed type assertion error message.
merge with master
merge with master
for..of loops
Reword predicate to be more readable
Have travis build against node 5
allow computed properties in destructuring, treat computed properties with literal expressions similar to literal named properties
I love fixing lints on my linter code
fix lint: prefer const
Add prefer const rule
Accepted baselines.
'with' to 'to'
Style.
Update default configurations
do not report 'unreachable code' on empty statements
Appease the almighty linter.
Accepted baselines.
Updated error message.
Improve test case and add working comparison
const all the things
Use relative file name when reporting errors
SFCs for JSX WIP
Skip files with no-default-lib when '--skipDefaultLibCheck' and '--noLib' are used.
Support '/dev/stdout' as a valid '--out' parameter
Added 'lib/README.md' to .npmignore.
Update CONTRIBUTING.md
Update CONTRIBUTING.md
shorten function
Added 'README.md' files to 'lib' and 'src/lib'.
feedback from CR
Use '--pretty' in builds.
Updated LKG.
;
Update baselines
Forget about tty detection. It won't work in build tools.
Just name the option 'pretty' for now.
Added colors to diagnostic types, addressed some CR feedback.
dont mutate
fix nits
Add a variable of type `this` in constructor body
Add initial test
Preserve copyright comments when generating d.ts files
Use regex for repacing comments content. Use space for indents
New commit using TS scanner.
Switch to `isNodeDescendantOf`
Accepted baselines.
Moved test.
prevent absolutre paths from leaking through error baselines
Accepted baselines.
Always generate an identifier in a for-of loop.
Use of FileMap instead of Map as per PR feedback
accept new baselines postmerge
Accepted baselines.
Added failing test.
Take pr feedback into account
Simplifty declaration emitter logic by using forEachExpectedEmitFile
feedback form pr, new baselines
Accept baselines
Add tests based on #5449
Forbid 'this' as constructor parameter type
Simplify logic to get declaration diagnostis
Simplify verification of emit file paths using utility to iterate over each emit file This also makes sure we dont emit --out or --outFile if there are no files that can go in that file(non module and non declaration files)
Create a utility to iterate over each emitFileName and use it in emitter TODO: declaration emitter to use this utility TODO: emit file name compiler option verification to use this utility
Human-readable fourslash debug output for completion lists / quickinfo
Inference from JavaScript `prototype` property assignments
Some refactoring as per PR feedback
Since js extensions are not user specified, no need to check if source map file will overwrite input file
Update the error messages as per PR feedback
Report error if --allowJs option is used along with --declaration
Do not emit declarations for javascript files
addressed PR feedback: renamed 'toRelativePath' to 'convertToRelativePath'
Accept baselines
Add more detailed error message
that feling when you ctrl-z 1 too many times
More correctness
feedback from pr, new tests
Update CONTRIBUTING.md
remove 'path' suffix from FileMap methods
Accepted baselines.
Renamed test directory.
Renamed the relationship back to "comparable".
introduce Path as branded string type, switch FileMap to use Path
Update documentation for fixing lib issues
Use CharactersCodes and isLineBreak in conditions
Adding test
Correct partial signature matching
FileMap now internally stores absolute normalized file names
use resolvedFileName as is when calling methods on host
merge with master
Allow comments in tsconfig.json issue #4987
Accepted baselines.
Matchable should have no effect on intersections.
Added tests on intersection types.
Accepted baselines.
update error
Tests update after declaration file emit revert
Revert the change to block declaration emit in case of syntax or semantic errors
Treat the .jsx and .tsx files as jsx when parsing and .js files are parsed in standard mode
restore any narrowing
Since there arent any user given extensions, have extensions start with "." like before
Improve type narrowing algorithm with typeof
lint node.d.ts
Remove extensions doesnt need to depend on compiler options any more
lint server
Remove the logic for parsing compilation of comma seperated list of strings on command line Also removed logic to accept multiple values for the option
Test baseline update because .map cannot be a valid js file anymore
Test update for using allowJs instead of --jsExtensions
Instead of --jsExtensions support --allowJs with .js and .jsx as supported extensions
naive change and new tests
Linter errors
Update LKG
Some tests to cover transpilation of different syntax
Test cases to verify that declaration file is not emitted if any of the declaration file in program has error
Some test cases to verify that declaration file overwrite is reported correctly
Populate if emit was skipped correctly as part of emit result
Check source map files are being overwritten
Do not emit declarations file if we reported error about inaccessible This type
Tests update for emitting declarations if no errors
Dont emit declaration file if there are errors in the source file
Refactoring to fix build issues
Update LKG
Remove async from builtGeneratedDiagnosticMessagesJSON task
Add warning message empty THEN clause
Rename the relationship to "matchable by".
Avoid a redundant stricter check when using the new relation.
Check for partial satisfiability when using the comparable relationship.
Added "comparability" relation. It's currently equivalent to assignability.
Accepted baselines.
Added tests.
JS class members as methods
accept api test baslines
Add diagnosticMessages.generated.json to gitignore
Include the built into local task
const enum fixing in postprocess step
addressed PR feedback (change command line flag description), added tests
Error on redeclarations of undefined
Copy generated diagnostic messages json from src/compiler to built/local
merge with master
merge with master
treat local classes as block scoped variables
Accept baseline
Add compiler test
Accepted baselines.
Updated LKG.
addressed PR feedback
use process.stdout.write on server
JavaScript class inference from prototype property assignment
Added tests for operations that use assignable to/from.
allow other files except .d.ts as external library packages
Make runtests and runtests-parallel share code
Rename, default to 'min' and fix Projects case
fix i4177 and sync with the TSJS repo
Add tests for nested destructuring
Do not type non-identifier binding name
Added grammar change to the comments.
accepted baselines
Added TypeAliasDeclaration to exceptions for required top level declare modifier
First draft of test parallelisation
Add test of issue
ignore names when checking type parameter equality
Use emptyArray instead of [] for no base types.
Add tests and accept baselines
addressed PR feedback
CR feedback.
add normalizePath to to fix slashes
Accepted baselines.
Style changes
CR feedback
Added test.
accept new baselines
remove es6 check form system module
do not look into nested es6 exports / imports when collecting external modules
Accept baselines
Update diagnostic text to use ES2015, not ES6.
move 'fileExists' caching to tsc
cache results of fileExists check in default compiler host
Remove extra semicolon (the irony)
Add rule to check spaces around intersection/union type operators
Improve mergedInheritedClassInterface test case
Root class merged with interface can be extended
defer allocation of error message text in binder
make binder singleton, inline bindWithReachabilityChecks
Accept new baselines
change triple-slash ref emit critaera, add a new tests and accept new baselines
merge with master
pick default chrome location based on platform
Improve naming of test members
remove assertion
Accept baselines
Add JS breakpoint into Debug.assert failure
Move the changes to sys.write to server.ts
Tests for interfaces merged w/classes
`getBaseTypes` handles interfaces merged w/classes
fix lint
bit more cleanup
cleanup a bit, think toward the future
initialize fields from constructor parameters
feedback form pr
pre-initialize node fields in constructor
Change writeSync to async
do not indent token if its start line matches end line of previous token\trivia
rename variable
feedback form pr
feedback form pr
Adding test
Tests
CR feedback
fix typo
Just say all compiler options are supported.
fix linter issues
addressed PR feedback
LKG update
CR feedback
addressed PR feedback
Minor fixups.
Change ArrayBuffer.isView declaration to type guard for ArrayBufferView.
Updated test options in 'CONTRIBUTING.md'.
Add missing newline after runtests/debug
Add debug=true option also
extract 'convertCompilerOptionsFromJson' to separate function
Add instructions on how to debug tests
Remove obsolute AMD logic from reference preprocessing in services
Address CR feedback
Better error recovery for adjacent JSX elements in expression positions
Updated the LKG.
Bumped version to 1.8.0.
Add sortBeforeComparison option back to arrayIsEqualTo
merge with master/address PR feedback
Do not report errors for classes and interfaces merging
use absolute path as key to store files, correctly handle scenarios when file names differ only in casing
Accepted baselines.
Always use a string literal type if contextually typed by any string literal types.
CR feedback
Add linebreaks for readability
Add ES2015 as a synonym to ES6
Test cases for let declaration and its use order
Shorten the key we use for the loc message.
Add test case, correct existing test case
Use ts.indexOf instead of Array.indexOf method
Add tests and accept baselines
Primitives are not assignable to any-type indexers
Address code review at 5127
Address CR from 5127
JavaScript LS scaffolding + JS module inference
Re-read file content upon closing
Address build errors
Add timer for batch processing directory changes
CR feedback
Tests now correctly include a constructor
Make constructor use merged parent symbol
Add test case
revert enum related changes
Use `memberListCount`
suppress reachability errors in remaining tests
partially suppress reachability errors in tests
addressed PR feedback, updated tests to suppress reachability errors where they are not needed
accepted baselines
use isBlockScopedNameDeclaredBeforeUse for block scoped variables and enums
addressed PR feedback
Add testcase - generating declaration file results in more errors in ts file
allow forward references to block scoped variables from functions
Added scenario when duplicate function implementation is reported
Adding test case for scenario in which error reported depends on order of files
Lint: remove trailing whitespace
Address PR feedback
Emit enabled for JS files
Remove --experimentalAsyncFunctions from tests
Remove --experimentalAsyncFunctions
Assert that ambient classes merge with interfaces
Do not mark class members as ambient or export.
merge with master
Verify if one or more files are emitting into same output file we provide error
Verify that when emit blocking error occurs rest of the emit occurs as expected
fix linter failure
Remove prototype from NodeFilter static type
Update baseline after merge conflict
addressed PR feedback: added tests for let declarations
check initialization of exported block scoped variables
add rule to insert space between async keyword and open paren
check functions in class expressions
Improved non-namespace overriding
merge with master
support block scoped vars captured in closures inside loops
last line whitespace test
trim the whole last line when it has whitespaces only
Non-namespace merges override `valueDeclaration`
Add "A module cannot have multiple default exports." message for multiple "default" exports
Fall back to valueDeclaration
addressed PR feedback
Typo
restore fall-through indentation
trimTrailingWhitespacesForRemainingRange
Address PR feedback, add comment
Address PR feedback, remove scriptTarget ES7
Address PR feedback. Always emit parentheses around emit capturing
Check for ClassDeclaration in getBaseTypeNodeOfClass
Add test case
Linting.
Semicolon.
Accepted baselines.
Only show the opening tag name when completing a close tag
Implement not.greaterThan for completion list
use a map, backticks
Return the string literal type itself instead of the union type.
Accepted post-merge baselines.
Address PR feedback
Added fourslash test.
Address code review. Accept baselines.
Use compilation options to get extensions to remove to get module name
Don't issue completion in JSX text
Remove extension for emitting output should remove any of supported extensions + js/jsx to get the dts file
Accepted baselines.
Escape quotes when emitting React
Adding tests
Emit export assignments when target is ES6 and module kind is not ES6
Accept baselines.
Resolve const enum value in index access.
Add comment
Added more tests.
address PR feedback
Address comment to increment emitCount in separate line
Address feedback on diagnostic message
fix issue 4942
PR Feedback, add enums to exceptions
trimWhitespacesInEmptyLineTrivia
transpile text as tsx if jsx option is specified
forbid duplicate var exports
Handle export * reexport errors smartly
Taken feedback into account and simplified the getFileNames logic to handle extensions by priority
Removed unnecessary check
Update test to parse typeAssertion as simpleUnaryExpression
Parse typeAssertion expression as simpleUnaryExpression
Add comment and address PR on comment
more test fixes
remove unused function from the EmitResolver
trial of change
Lint fixes and test fixes
Re-enable failing fourslash tests
Adds tests
Just make the compiler option internal.
Only use colors if we are certain we are using a pseudoterminal.
Moved JSX diagnostics to a more sensical spot.
Added '--diagnosticStyle' compiler argument with options 'simple' and 'pretty'.
parenthesized exponentiation with template string
Address PR and add new with exponentiation
Invalid usage of exponentiation
Add baselines when having early syntax error in exponentiation
Add baselines for using exponentiation in template string
Add baselines for downlevel emit exponentiation and ES7 emit of exponentiation
Update baselines for exponentiation compound operator with indexing and property assignment
Add and update tests
Update test harness to pick up new ScriptTarget of ES7
Update parse to use new grammar
Don't show lib.d.ts line numbers in symbol baselines
Incorporating changes from #3780
Removing console logs that were for debugging
Add new test cases
Remove the failing testcases
Update .travis.yml
Temp change to investigate test failure
Create new tscconfig files for the failing testcases
Remove tsconfig files of failing testcases
parse/check/emit shorthand property assignment in destructuring
Update comments
update comment
m'lint
Use fs.watch for all directory watchers and some bug fixes
Correct output, accept new baselines
add internal to nmpignore
merge with master
concatenated type emit
update npmignore file
Add directory watcher to tsc
Changes in harness to emit expected and actual to figure out baseline error thats reported only on travis run tests
Change prologue emit location to inside module IIFEs
Update parser with new grammar
Redesigned directory watchers
fix linter issues
do not emit exportsStar function if module does not expose any values
Format template internal spaces
Accepting new baselines
Adding tests
Defer instantiation of members of instantiated anonymous types
updated command line options, accepted baselines
Update grammar to error on none-parenthesis
Address PR on fixing tempalte tests
Add tests
Downlevel emit
removed umd as allowed, accepted new baselines
cusotm tests, forbid umd
Accept baselines
Remove obsoleted comment
Add compiler error for incompatible module formats
Accepted baselines.
Jake hates deps
Accepted baselines.
Separated the concept of apparent types from contextual types for string literal types.
Accepted baselines.
Capture compatible contextual types for unions containing string literals.
Accepted baselines.
Amended fourslash tests to expect double quotes.
tslint had a new release and added this rule, theirs was a little stricter
Use normalized text for text on string literal types.
Automatic semicolon insertion for class modifiers
new baselines for sourcemaps tests (given that modules can now get emitted into single out)
linter runs after tests via jake
temp save
merge with master, fix linter issues
sourcemap correctness
CI Against Node 4.1
Accepted baselines.
Added test for string types in tuples.
Accepted baselines.
Make string literals valid types in type lists.
Accepted baselines.
bug fixes
Make string literals valid constituent types nodes in the parser.
Accepted baselines.
unify the node filewatcher in sys.ts and server.ts
Added test for string literal types in type arguments.
Change fileWatcher in sys for node 4
merge with master
Concatenated module emit fixes up all included paths
naive change
Add msapp content back, only remove the internal content
Remove MS specific types from lib.d.ts
change the references to the error message
Make test actually fail on lint fail
Error message should be fixed for ambient module inside namespace
Add lint to the test command so travis picks it up
This is what zero linter errors feels like
lint harness, disablow control flow analysis because buggy
Handle indirect imports of JSX elements from external modules
Accepted baselines.
Account for interface extends clauses.
Added failing test.
Add comments to bool params
Remove debugger statement
Added one more test.
Accepted baselines.
Use appropriate resolution meaning.
Added failing test.
Accept symbol baselines
JSX Spread Attributes are expression parents
Adding contextual typing test
Accepting new baselines
Error when emitted type in declaration file references inaccessible 'this'
collect imports and exports in ambient external modules
Update tests
Issue correct completions in 'as' operator
Show date and time when using `--watch` flag
Move cheaper check earlier in condition
indent expressions
remove parens
getEffectiveDelta
Fail
Correctly emit 'as' operator left operand as expression
Offer correct completion when between a boolean JSX attr and the close tag
Allow /* comments between < and JSX element name
cr feedback
Update CONTRIBUTING.md
Add .vscode to npmignore
Update emitter.ts
Remove extra empty lines
Add tests
Avoid deleting trailing whitespaces for tempmlates
harden the implementation of Program.getSourceFile to handle all relative file names correctly
Add tuple type test
Make tuple type itself the 'this' type of base array type
record resolution for relative file name if file was found via absolute name
Adding test for declaration files
Adding tests
Proper handling of "this" in getSymbolAtLocation
Accepting new baselines
Properly classify "this" and "await" in isExpression
Added tests.
:%s/apst/apt
Put AMD dependency list inline with define call in UMD modules
Try to grab parameters for single-declaration variable statements.
Modified/added tests.
Rewrite inaccessible "this" to containing class/interface in declaration files
Write "this" as "any" when "this" reference would be an error
Removing a few "this" containers
Address PR
Add additional "this" containers
Properly emit "this" type in declaration files
Amended comments.
Switched parameter name to array binding pattern.
Yeah.
Add descriptive comment
Remove postinstall, make it manual, make sure jakefile is in gitignore
Better messages.
Run linking script only if present
Ensure that doc comments don't appear between dotted names.
Added tests for dotted namespace declarations, object literal methods.
intentation is powerful
We can go simpler
fix hook
Add git hooks
Add JSDoc to methods, constructors, classes, and namespace/module declarations.
Amended tests.
Use a loop because reduce is unreadable.
Adding repro from #4818 to test
Added tests for JSDoc comment templates on other declarations/statements.
Adding tests
Properly propagate contextual types into parameter destructuring elements
align behavior of constant expressions in initializers of ambient enum members with spec
Check if binding element already has been assigned a contextual type
use formatting scanner with languageVariant=JSX for .tsx files
Adding comments and addressing CR feedback
Update the type assertion errors to jsx syntax error as we are treating js files as jsx files
Parse all the javascript files with JSX grammer
Syntax changes if the extensions to treat as javascript change
\. instead of .
update regex for filename
format/existence check
slight condition change for getDelta
no null
merge with master
disambiguate: 'implements' starts heritage clause vs 'implements' is a class name
removed duplicate function implementation
merge with master
Delete generated file, add to gitignore
remove unnecessary union
Commenting out broken fourslash tests
Update baselines to include new tests
Add and update tests for exponentiation
extend the list of extensions for module file names in node_modules folder
Update existed baselines that are affected by ES7 UnaryExpression
Downlevel emit for **=
Parse ES7 UnaryExpression and IncrementExpression
Add option --jsExtensions to handle extensions to treat as javascript - Command line now takes --jsExtension multiple times or comma separated list of extensions - tsconfig accepts array of extension strings
Accepting new baselines
Polymorphic "this" type
fixing lints in a pr about linting
Update LKG
Conflicts should cause errors instead of warnings.
Accepted baselines.
Add funcitonality to warn on duplicate codes.
support tsconfig full path
Utilities typos + missing reference
Basic parsing for the UnaryExpression:  IncrementExpression[?Yield]**UnaryExpression[?Yield]
Initial operator. Need to fix the grammar for unaryExpression
Add tests for exponentiation
Added missing predicate for contextual types of parameters.
Use custom type guard.
Added failing fourslash test.
Accepted baselines, issue not apparent in compiler tests.
s/var/let
whitespace!
Rework lint to use tslint-as-a-lib
Next-line rule was too strict
es3 -> es5.
Add a jake task, .gitignore entry, and add tsd as a dev dependency.
Final touches on the script.
Improved command line interaction for 'importDefinitelyTypedTests' script.
forEach -> for-of, and other changes.
accept baselines
Use intersection types in Object.assing defintion
Feedback from PR, remove unused identifiers
Feedback from PR
reverts 60a120f, reexposes es6 option
style nits
Added tests.
Use explicit types, var -> let/const, misspellings, style.
Added 'tsconfig.json' for 'importDefinitelyTypedTests' script.
Added tsd.json file with 'node.d.ts'.
When targeting ES3 emit default alias as indexer
Moved importDefinitelyTypedTests.ts to its own folder.
failing test
Report error when emitting declarations if the reference is to .js file
Corrected scenario names in the test cases
When tsconfig file doesnt contain file names, consume .js files of directory only if specified in the options
Test case when one of the input file is output file name
Do not emit javascript files
Tests when the .ts and .js files are mixed in compilation with tscconfig file doesnt specifying any names
merge with master
Tests when the .ts and .js files are mixed in compilation with tscconfig file specifying them
addressed PR feedback
When folder contains .d.ts as well as .js of same name and tsconfig doesnt contain any name
When same named .d.ts and .js files are present and tscconfig contains .d.ts file
Verify and fix scenario when .js and .ts files with same name are present and tsconfig doesnt specify any filenames
Add tests when same named .ts and .js file exist with tsconfig file specifying .ts file
remove es6 as option from command line
fix types : export the base as children are exported
more code review comments
Project testcase to run tsconfig file
Pair of new tests for the new flag
Add es6 module kind, stop using script version to infer it
Update LKG.
handeles -> handles
Bump version back to 1.7.0.
merge with master
Respond to code review comments
code review comments
Update tests to use "removeComments" instead of "comments"
Breaking changes from node resolution changes. ambient module declarations do not take precedance any longer.
Update node resolution tests
addressed PR feedback
Cleanup of options of project runner
report error if module name is empty
initial revision of reachability checks in binder
use resolvePath to handel relative references correctelly
Handel compiler options correctelly
Also ignore .vscode from .npmignore
Update Visual Studio Code ignores
re-fix token indentation
use undefined instead of null
make getDelta call suppressor
add support for tsconfig files in the rwc instrumenter/replay
update error message text
apply suppression to tokens
Add wrapSystem function
use sting templates
nodeWillIndentChild from #4609
Update LKG
Updated baselines
emit export specifiers in system modules only if export has a value side
emit export specifiers in system modules only if export has a value side
making comment more specific
resolve merge conflicts, update tests
addressed PR feedback
Resolving a conflict with #4711
Check if imported file is a proper external module
nodeWillIndentChild
reattach file diagnostics for modified files when reusing program structure
Adding "." to error message
resolve merge conflicts, update tests
addressed PR feedback
Accepting new baselines
Allow decorators in ES3
Revising test
Error when binding element has no value in initializer and no default
rename .settings to .vscode
Check if imported file is a proper external module
Update LKG
Let tsconfig to pick up js files
Encode the conditional presence of 'error' in the type system.
Verify syntax error in js file are reported
Added error for bad argument, fixed diagnostic for '--help' message.
Update version to 1.6.2
Test for rest parameters(copied from language service tests)
Test cases for different typescript syntax not supported errors during js files compilation
Let harness to name file even when single unit data specified  but there is filename tag
Assert condition to track root cause of issue.
Address CR
Keep parentheses for all numeric literals with property access expression
addressed PR feedback
do not emit '=' in jsx attribute if initializer is missing
Simple fix for #4721
Javascript files will emit declarations too so get declaration diagnostics
Add test cases for simple js file compilations
reattach file diagnostics for modified files when reusing program structure
Report error if output file is among the input files
Allow the js files to emit output
Baseline updates
Emit the diagnostics for javascript file instead of doing semantic check
Add .js as supported extension
rename isIndentationPrevented
Actually cache regular version of fresh object literal type
update isCompletedNode
Accepted baselines.
Added tests for parameter initializers.
Add some comments to isIndentationPrevented
revert newlines
Consider export/import specifier as binary op context
Move housekeeping part to new PR #4711
remove type operation rules, add types instead
Housekeeping part from #4609
Resolving conflicts with #4646
allow to use keywords as jsx identifiers
do not emit '=' in jsx attribute if initializer is missing
Change typescript.d.ts to be an external module instead of an ambient external module declaration
Accepting new baselines
Adding test
Correct propagation of includePatternInType flag
simplified code flow
Adding test for excess/missing properties
Accepting new baselines
Modifying tests
Check for excess properties
Accepting new baselines
Store binding pattern in contextual type
remove hasBraceShell and add namedBindings check
#4396 fix error message typo
Add debug option to runtests
Accepted baselines.
Ensure that zero-element binding patterns don't try to reuse assigned identifiers.
fix additional places where class expression should be queried
Check for class expressions as well as class declarations
Else on the next line
handle jsx identifiers correctly, indent content of JsxSelfClosingElement
Accepted baselines.
Added more test cases.
handle jsx identifiers correctly, indent content of JsxSelfClosingElement
Add tests for issue #4603
move declaration into the block
add tests for comments
fix comment indentation
Manual merge
Manual merge
make the test more specific
sample
Do not add symbol if it is undefined
fix 'findPrecedingToken' for jsxText
format class expression indentation
fix test
format intersection type
allow backslashes in fileName argument of the transpile function
allow backslashes in fileName argument of the transpile function
fix test
format intersection type
format class expression indentation
add tests
disable indentation when in brace shell
format open brace in export/import decl
remove 'experimental' from 'moduleResolution' command line argument
Added toLocaleTimeString variations
Accepted baselines.
Added tests.
Accepted baselines.
Added declaration option to empty destructuring tests.
Accepting new baselines
Adding tests
Adding a few comments
fix 'findPrecedingToken' for jsxText
More flexible rules when destructuring have literal initializers
remove 'experimental' from 'moduleResolution' command line argument
address PR
Added comment, inlined function.
Style.
Accepted baselines.
Improve error message spans when object literals have excess properties.
Added comment, inlined function.
Add parameters to toLocaleDateString
Style.
Accepted baselines.
Improve error message spans when object literals have excess properties.
Only obtain regular type of fresh object literal type if necessary
pseudo-block indentation
Update LKG
Addressing CR feedback
Accepting new baselines
Restoring union type subtype reduction
Addressing CR feedback
Reformat some code.
Accepting new baselines
Restoring union type subtype reduction
Use synthetic identifier during emit instead
CR feedback
Added tests for getOccurrences on `this` in class expressions
remove spaces
Do not replace but do extend
add rules and indents to named export/import
merge with master
pass IO when getting default library instead of reading it to prevent memory leaks, do not count errors in library files twice
Toss the System out
Update LKG
Toss the option out the window
Accepting new baselines
Adding tests
No deduplication in union of tuple element types
Revert "Update version to 1.7 in 'master'."
Revert "Update version to 1.7"
fix error message for forward references in enums
Update version to 1.7
Update LKG
Adds a "typings" property to package.json
Added test
Adding test
Adds a "typings" property to package.json
Update LKG
Add tests
Add class expression if existed to classifiable-name map
Revert change to the harness that break the unittest
Added test
Add tests
Add class expression if existed to classifiable-name map
Property check expressions in class extends clause
Add optional argument to readConfigFile
Add comment
Propagate namespace flag to namespaces nested with dot syntax
change some template literal tests
adding tests
adding constructor/parenthesized type
union type rules
Move RWC runner to use Harness.IO
Revert "Read default lib from the local file system instead of log-array when do Not use custom library file"
Revert "Address CR"
Accepting new baselines
Adding test
Adding test harness support
Adding -suppressExcessPropertyErrors compiler option
Don't assume the class declaration will occur first, and that it is *only* a class declaration.
Added tests.
Don't assume the class declaration will occur first, and that it is *only* a class declaration.
Remove unused field
Use synthetic identifier during emit instead
Added tests.
CR feedback
Simplify it a bit
Give up on real typechecking, just check literals
Correctly emit imported 'React' references in JSX.
fix error message for forward references in enums
Address CR
Read default lib from the local file system instead of log-array when do Not use custom library file
CR feedback
fix MessageEvent and ProgressEvent constructors
Boolean trivia rule
adding rules, ParenthesizedType not yet
Accepting new baselines
Adding tests
Add cache of anonymous object type instantiations to TypeMapper
compile vs tslints services dts, null check lint
Add tslint rules for #3994
change variable name
Only set files if we have one
use toLowerCase and remove unused property
Move handeling to a diffrent function, and remove specialized serialization
Add test and address PR
Update error message
Make new exported functions internal
Update version to 1.7 in 'master'.
Update testcase only preserve pinned comment at the top of the file
Optimize removing comment when removeComment flag is true
fixing function type formatting
remove isIndentPreventedChildNode
Removes project init test
Removes jsonWithComments
Addresses CR feedback
Added test for transpilation with emitting of metadata and decorator
Used let instead of var
When emitting metadata about type, Use object type if the type cant be resolved This could be true if expression cannot be resolved resulting in error
Write synthesized node's text property instead of getting text from source file This fixes issue of not being able to emit qualified expression correctly
Tests for #4239
revert 060828c
partially move getIndentationToken into new function
use commandlineParser's optionDeclarations to parse compiler options instead of doing it explicitlly
git fix wrong merge
Move getElementsByClassName from HTMLElement to Element
Rename setCompilerOptionsFromSetting to setCompilerOptionsFromHarnessSetting
Update LKG
:rage1: `debugger;`
Correctly identify JSX Expressions as Expression parent nodes
use buffer in harness only when running outside of the browser
parse jsdoc param tag even without a param name
use \r\n as default new line in transpile
adding JSX closing tag/attribute/expression test
fixing autoformat not working with empty JsxText
use \r\n as new line in harness
simplify module resolution tests
addressed PR feedback: added comment
use Harness.IO instead of sys in harness
Make TypeCheckerHost internal
Add --outFile and revert change make --out relative in tsconfig.json
Add comments
Add comments
Add test to make sure /// is preserved when removeComments is false
address PR feedback
Consolidate option error messages into two
replacing let with const
Add test in case of remove /// on node that will not be emitted when removeComment is true
Only preseve pinned comment at the top of file
Add message in protocol.d.ts and rename "rebuildProjects" to "reloadProjects"
Updating the internal toolsVersion from 1.5 -> 1.6 in shims.ts
add command for rebuild all project structure
Use same parsing function for fourslash tests
Delay creating inferred projects
Handle non-entities as well
Add comments
Convert HTML entities to strings (#4125)
Update tests file for /// and detached comments
Don't emit detached comment if removeComment is true
Address code review
fix(scanner) try a trivia scan only if pos === 0
remove unused createNewInstance support
change to use map instead of flag, value tuple.
consolidate toLower call
Handel additional properties
Export setCompilerOptionForSetting
remove unused flag aliases
remove unused list of supported switchs
Emit tsx files correctelly in getEmitOutput calls
Added null checks
Accepted baselines.
Added overloads for typed array constructors to take an 'Iterable<number>'.
Remove /// comment when removeComment is true
Update tests to remove /// if removeComment is true
CR feedback
Updated 'Reflect.construct' to add third 'newTarget' argument.
added tests
Added overload for 'String#split' to take objects with '[Symbol.split]' method.
Added overload for 'String#search' to take objects with '[Symbol.search]' method.
Added overload for 'String#replace' to take objects with '[Symbol.replace]' method.
Remove duplicated code
Added overload for 'String#match' to take objects with '[Symbol.match]' method.
Move back the constructor signature with Uint8ClampedArray
update baseline
update baselines
Remove extra files
Add quick info test for type parameter in type alias
Write out type parameter in type alias in quick-info
Stylize gutter.
Handle root file removal and addition in configured projects
always process imported modules in 'createProgram' to record module resolutions
adding tests for JSX attributes/closing bracket
CR feedback and logic rewrite
Added tests for commonjs safe import behavior.
Emits safe value for import.
Accepted baselines.
Removed inappropriate methods from the 'RegExp' interface.
Added the '[Symbol.unscopables]' method to the 'Array<T>' interface.
Added the '[Symbol.species]' method to the 'RegExpConstructor' interface.
Added the '[Symbol.split]' method to the 'RegExp' interface.
Added the '[Symbol.search]' method to the 'RegExp' interface.
Added the '[Symbol.replace]' method to the 'RegExp' interface.
addressed PR feedback
Add Uint8ClampedArray to core.d.ts, and split call signature of method "from"
Added the '[Symbol.match]' method to the 'RegExp' interface.
added tests
Added the '[Symbol.toPrimitive]' method to the 'Date' interface.
Added the '[Symbol.hasInstance]' method to the 'Function' interface.
Removed 'Function.toMethod'.
Limit errors to 5 lines, fixed some other issues.
remove commented test
Add comment and prevent completion in type paramter of class expression
Add test for completion in type parater of type alias
Apply suggested fixes to `arguments` PR
initial implementation of module resolution for node/requirejs
Add `arguments` to completion list #4249
CR feedback. Add more tests.
merge with master
Do not show completions in type parameter of type alias
addressed PR feedback
fix jsxelement formatting
make 'require is defined' a precondition for Node-based sys
update baseline for compiler tests
Remove the extension.d.ts and move the content to core.d.ts
Further fixes
allow transpiler to provide alternative names for dependencies
Added missing dictionaries also
Add missing types in webworker.generated.ts
add 'browser' section to suppress import discovery for webpack/browserify
Addresses PR comments
CR feedback
adjust check for node env to handle webpack\browserify
Make parameter littleEndian in DataView methods optional
handel merge conflict, use refPos instead of start
Add Spacing for Nonempty Brackets Formatting Option
fix class expression + expressionWithTypeArgument
CR feedback
Remove asterisks
Add asterisks
Test cases that address https://github.com/Microsoft/TypeScript/issues/4288
mismatch order of arguments
Add test
Enable intellisense in jsDoc tag @type brackets
Add JsDoc intellisense for JavaScript files
Make createScanner external (fixes #4057)
keep only document highlights from the original file
fix generics/type-assertion formatting
addressed PR feedback
Add baseline for error baseline
Add comments to do clean-up
Rename parameter
Remove silly function
S p a c e s
save files changed in refactoring
move helper and add capture of this
added a clarifying comment
Accepting new baselines
Adding new test
Making partial signature matching more inclusive
Adds columns and rows properties to process.stdout
fixed null de-reference
Update baselines
Updated baselines
Add tests for preserving comments
Added test
Preserve comment in arguments of call expression and object literal
Addressing CR feedback
added missing test assets
deduplicate module dependencies
Use template string to shorten code.
delete entry from the cache when referenced file is removed, added tests
merge with master
Updated baselines
simplified docParams
Accepting new baselines
Adding/fixing tests
Allow partial matches in union type signatures
simplified a conditional
Use combinesPath.
Add filesToSearch to documentHighlights request.
change '*' to '-' in lists
emit export declarations for system modules as a part of 'execute' method
Address PR feedback.
Make 'predicate' optional and DRY
Always indent PropertyAccessExpression.
addressed CR feedback: merged getDefaultModuleResolver and resolveModuleName into one function, added comments
Add tests and fix spelling
Addressing CR feedback
addressed PR feedback, added more tests
Updating language specification
Use different relation for `instanceof` type guards
Addressing CR feedback
emit space before the dot for property/element access expressions if expression part is integer const enum
addressed PR feedback
merge with master
remove asserts
Address feedback.
removed extra whitespaces, added commments
resolveModuleName => resolvedModuleNames, added tests
Conform lint of the future, unify quotations
Adding test case
Add explicit handling of tuple-to-tuple type inference
changed containsSuperCall to check if super call is computed property name
Expose document highlighting to server.
CR feedback
fixed logging
respond to cyrus
rename feature
reverted a hard-coded '\r\n'
added helper
test(shebang) error case
added baselines
added tests
fix issue https://github.com/Microsoft/TypeScript/issues/3991
always set NodeCheckFlags when checking super expression
emit shebang
test(shebang) desired outcome
scanner for trivia + accept baselines
Run builds, tests, etc. without global jake
Adding new test
Also fix the case where we are to the right of a spread expr
Accepting new baselines
Support assignability with non-object type constraints
Remove 'debugger' statement
refactoring
Adding testcase for extends helper emit when generating system module Testcase for #3655
Use one call to 'reportDiagnostics'.
Double quotes.
merged with master
Implements #4105 - a string indexer in 'props' disables errors due to surplus attributes
merge with master
Accepted baselines.
Style and rename test.
Existing baselines updates
Adding tests for source map with comments (#4003)
Adding numeric index signature to test
Parameterize 's' to remove implicit 'any'.
Don't emit when compilation fails.
Address comments.
fix formatting
merge with master
Including numeric index signatures
return ambient external modules as a results of preprocessing
do not try to resolve modules that has '!' in the name, put .tsx extension to the end of the list
Add a source map test for JSX preserve
Correctly emit source maps when emitting JSX text under --jsx preserve
Use arrow functions instead of .bind
Accepting new baselines
Don't require index signature when target index signature type is any
Added section on Names
Adds success message for tsconfig.json init
Removes trailing comma logic and fixes default values
Bind console log method so it works in the browser
Error if 'files' property is not an array
Update test baseline
Don't forget about spread attributes
Address code review
Make declaration emitter call resolver.isOptionalParameter
Correctly identify JSX expressions as identifier parents
Raise error if mixing tsconfig.json and directives.
updated baselines
merge with master
Remove debugger;
Allow tsconfig.json to be added to fourslash test.
cleanup
Use Debug.assert instead of Debug.fail; preserve 'any' variants
Accepted baselines.
Added a test.
Simplify code a bit.
space -> spaces
Addressed CR feedback.
Accepted baselines.
Added test.
Moved LKG folder to lib
tsserver: set +x
Defaults to no files property
Adds project init
Adds project init tests
Adds JSON with comments and trailing comma tests
SourceFile.fileWatcher should be optional
Address CR
More formatting glitches
Update word2md tool to support hyperlinks
Updated language specification
Added tests for issue #3932
Invert null-check in emitSerializedTypeNode
added an annotation
fixed a test
add newline if we directly precede the declaration
Added a regex test
Simplified Tests
Simplfied Return Values
Add file watcher for tsconfig.json
Add tests
Accept baselines and fix test comments
Adjust notion of minArgumentCount to account for required parameters with default initializers
Remove error for parameter with default initializer before a required parameter
Use 'process.stdout.write' to ensure colors get displayed correctly on Windows.
Add nightly info to README.md
Added period.
Update README.md
Update README.md
Add `jake lint` to README
Add Tests
Check if inside the declaration
Adds space
Semicolons.
Remove exit test
More linting from PR
Publish to TypeScript itself, create a task to preview changes.
Feedback from PR, lint fixes
fixed a typo
Update tslint.json for latest versions of tslint
Remove preferGlobal flag
Update AUTHORS.md for release 1.6
Add AUTHORS.md
Add getBaseTypes on TypeObject in services
Address CR
Add comments
Add tests
Accept baseline
Don't add an inference candidate if it contains the anyFunctionType
Accepted baselines.
add transpileModule function that can return emitted source map
Baseline update
Remove check about ctors returning object types -- it isn't useful
Qualification
Move message after guide
Accepted baselines.
Add suggestion to error message.
Accepted baselines.
Take default export spaces into account when checking merged declarations.
Accepted baselines.
Added another test.
fix error code
better error message when using forward references in initializers of const enums
fixed some warts
Narrow exported session API, Unit tests for session API
hoist top level import equals declarations in System modules
fixed a reference in a test
Move declarations to top of tests\cases\fourslash.ts
make RunnerBase abstract
A test
Add test harnesses
Remove debugger statement
Correctly identify identifiers inside JSX exprs as expression identifiers
Accepting new baselines
Adding comma in error message
Add tests
Clean up some code
Add tests and baselines
System: use bulk exports
treat modules that are merged with values as non-const-enum
Adjust carat after insertion
Address PR feedback
Update tests and baselines
Only remove triple-slash if it is not at top of file
Accepting new baselines
Better error message
Accepting new baselines
Preserve order in union types
Add includes method to String interface, and remove contains
Clean up the language service aliases to check functions
Clean up pushTypeResolution
Instantiate signatures if there is an overload resolution error but type arguments present
Only consider a type resolution sequence a cycle if none of the items in the sequence have types
Remove resolveLocation
added comments
Added Comments and assertions
Get Scaffolding
Remove Garbage
cr feedback
fix issue 3884
fixed indent issue, changed "for" loop to "for of" loop
Addressed Daniel's Comments
fixed strictModeInConstructor.error.txt baseline
fixed issue #3859
fixed a comment
remove for-loops
refactored isInComment, isInString
Don't expand tabs; just use a space.
Add tests
Accept baselines
Don't fall back to any when typing tuples
refactored isInComment, isInString
Renamed/accepted baselines.
Renamed tests.
Accepted baselines.
Only emit the RHS in an empty assignment pattern.
Accepted baselines.
Added tests.
Accepted baselines.
Add Comments
Tabs to spaces.
Added tests.
Update updateErrorCheck function
Accepting new baselines
Getting rid of subtype reduction for union types
Add tests and baseline
Add check for super when extending null
Accepted baselines.
Added single quotes around the declaration name in an error.
Doc notes.
Accepting new baselines
Updating fourslash tests
Deduplication of tuple types in unions
Minor cleanup.
Removed baselines Ryan forgot to remove.
Accepted baselines.
Added tests.
Move startIndex declaration to the top
Make tests intentionally expect wrong results until we do "smarter" things for object binding elements.
Update LKG
Updated baselines.
Enable retrieving the type of a binding property name when an initializer/type annotation is present.
Use type predicate for 'isVariableLike'.
Add tests.
Add downlevel emit tests
Add more tests and update baselines
Add tests
Allow super element access
CoreServicesShimHost and CoreServicesShimHostAdapter changes to support TSConfig exclude from the language service
Use 'exec'.
Make JSON.stringify's 'space' parameter have type 'string | number'.
addressed PR feedback: added comments
dispose snapshot only if new file differs from the old file
dispose script snapshots from the old source file
Added a 'publish-nightly' task to to the Jakefile.
Only remove triple-slash when compilerOptions.removecomments is true
Add tests
introduce ModuleResolutionHost interface
New deduplication algorithm for union types
PR feedback
Formatted a comment
Update LKG
Minor fixes
Add configureNightly script.
var->let and a few misc other fixes
Bump version number.
Update linting task to include harness sources
Add test for occurrences in ClassExpressions
Clean up and address CR feedback
Update ErrorEventHandler type in worker
Accept baselines
Add new tests
Allow tuples to be widened
added comment
fixed strictModeInConstructor baseline reference
fixed issue #3454
Setup shim and stubbed out functions
Changed order of parameters.
Just use 'filter'
Addressed CR feedback.
Update shim tests.
Update tests.
Classify Identifiers as 'Identifier', not 'Text'.
Added more test cases for highlighting abstract keyword
incorporate changes in master
Remove unnecessary checking
PR feedback for abstract keyword occurrences
Added test for occurrences on abstract keyword
Highlight abstract keywords on classes and members
Remove log statements
Don't fall through to the modifier check for get/set keywords
Accepting new baselines
Ignore freshness in subtype reduction / Treat Object as {}
Update LKG
Addressing CR feedback
Support union and intersection types in checks
PR feedback
Accepting new baselines
Switch to assignability check and fix compiler bugs found by check
Add tests
Take the apparent type of the source in type argument inference
Use new mocha-fivemat-progress-reporter by default instead of dot reporter
Pick your poition.
Actually move check outside the loop
Add analogous export test.
Account for export/import specifier renames and namespace import names in completion.
Added test for completion in namespace imports.
Remove broken badges
Clarify function name.
Updated baselines.
Added error recovery for missing 'from' keyword in an export declaration.
Accepted baselines.
Added tests.
Handle export declarations with module specifiers as well.
Newline.
Added type serialization for intersection types
Updated Baselines
separated tests for readability
Move assignability test outside inner loop
PR feedback
Made check more readable
Updated Baselines
Updated Error Message
Add a comment for isInferentialContext
Make update-sublime depend on local task
Add test for using unicode escape as function name
Baselines for weak types
Implementation for weak types
Don't filter out JSX attributes.
Added failing test.
Spacing.
Don't filter out the current item.
Added failing test.
merge master
Final CR feedback fixes
Create top level describe block for runners so status is reported at runner level
Use getDecalredName in service layer instead of symbol.getName
Added tests for completion lists in export clauses.
Add className property in SVGElement
for...in not for...of
Add jake task for linting the compiler sources
Address code review
Readd className to SVGStylable for compatibility
clean old program to prevent it from being captured into the closure
Add API for project level GetErr
CR feedback
More tests
addressed PR feedback
addressed PR feedback: added comments
Add a test
Infer types to statics in a class expression
dispose snapshot only if new file differs from the old file
dispose script snapshots from the old source file
fixed issue https://github.com/Microsoft/TypeScript/issues/3486
fixed indent issues
Accepts baselines
Adds type predicate signature display and addresses CR feedback
Accepts baselines
Object literals can only have properties that exist in contextual type
Turn off a few rules and more cleanup post merge
Add hopefully helpful comments
Don't bother doing inference from the function parameter if you are about to fix the type parameter
Add tests for type parameter fixing
Accept baselines
Address code review
Don't call push.apply, it can stack overflow with large arrays.
Add missed file
Move className and id from HTMLElement to Element
Only check if method declaration has modifier when method is declared in object literal expression
Actually fix the bug this time.
Remove file that shouldn't have been in this branch
Use symbol.getName for classExpression and functionExpression since it now correctly represent declared-name.
Correct "NodeList" to "NodeListOf"
Cleanup
Changed the return type of several well-known functions to NodeList<Element>
Improved fix from @JsonFreeman
Add window.URL
Add tests
Remove check if node is a block
Delete some files that shouldn't have existed
Whitespace
Addressed CR feedback.
Mark 'React' symbol as used and error if it doesn't exist
Add testcase for #3764
Update tests
Bind classExpression and functionExpression to its name if the expression is declared with name
Address code review, handle type parameter in completion list inside class expression
Removed unnecessary check.
Adding comments.
Added original test case.
Remove builder from import clauses.
Refactor completion code for object literals/bindings and import clauses.
Verify builders.
Use a more accurate test name.
Remove shim cancellation test.
Address code review
Throttle how often we call into the host side to check for cancellation.
Avoid unnecessary contextToken checking, addressed CR feedback.
previousToken -> contextToken
Added test for JSX spread properties.
Properly parse keyword-like identifiers in JSX
Updated test.
updated baselines
New Test
Changing comment per CR feedback
Don't show completion with dots not part of property accesses and qualified names.
Added test.
Add tests
Disallow modifiers on rest parameters
Remove unnecessary check.
Add tests for inferential typing
Accept baselines
Always take the apparent type when you retrieve a contextual type
Changed tabs to spaces and reformatted file
updated baselines
Check abstractness via constructor return types
Change default node pos/end to -1
Add builder in computed properties and index signatures.
Added tests for index signature completion builders.
update baselines
Update test
merged with master
updated baselines
Added conformance test
Prevent extra checks once abstract new-call detected
Address code review
removed a comment
Filter out would-be-duplicate names from JSX attribute completion
Appeasing Jason lite
Revert "Appeasing Jason"
Appeasing Jason
Address code review
removed a prototype
updated baselines
added tests
fixed union-type determination, moved abstract implementation test, and reformatted a line
Update verification function to be able to test that the only symbol with certain kind, document, and text is the completion list
Added more test cases for object binding patterns.
Clean up stripQuote and add comments
merged with master
moved initialization and changed a comment
Documentative and conservative checking.
Don't show a builder in object binding pattern completions.
Added checks for new identifier location in tests.
Address CR: Use getDeclaredName and getDeclarationOfKind
Add comment to clarify why we don't use copySymbol
Add test case for completion when destructuring from a union type.
fexed comment and initialization
Bring back 'reportDiagnostics'.
Make output reliant on whether stdout redirects to a terminal; use forEach.
Give the new reporter a more reasonable name.
Just squiggle the entire line for middle lines (sans trailing space).
Got "prettier" error printing working.
Add support to tell whether output directs to a terminal emulator.
Adds additional logic to determine how to emit a type reference for decorator metadata
Addressing CR feedback
Moves type serialization to the emitter.
fixed an erroneous assertion
updated baselines on classAbstract tests
Revert isRelatedFlags changes
Adding test for inference with intersection type as target
Support intersection types as target in type inference
Accepting new baselines
Node System host write - need to loop since writeSync might not write all bytes
Rule changes
Responding to Jason
fixed a comment
merged with contextSensitiveRelatedTo
fixed a conflict
merged in master
added flag as argument to checkTypeRelatedTo
Delete some files
Add module setting + test files
Add spaces between if and (
Correct flag JSX elements as being used for the purposes of module imports
Missed a file in merge; use Tristate.True in arrow fn check
Don't use ES5 array APIs
Update for style :tophat:
Use full display name in tests.
Addressed CR feedback.
Added tests.
Move token scan to inside `if`
CR feedback
PR feedback
Add todo comment to use getDeclaredName
use double quotes
Adding test
Preserve order in intersection types
Improve commandline help for --jsx
PR feedback - comments and whitespace adjustments
Conflict with Object.prototype.watch in FireFox/Gecko
Adding a few more tests
Assignment compatibility fix / contextual intersection types
Change var -> let and use destructuring
Support completion in named class expression and named function expression
Add test for completion in class expression
Add test for completion in function expression
Add name of function expression into completion list
var -> let
Basic tslint rules, non-final list
CR feedback
Error check script
Remove unreferenced errors
merged master
Accepted new baselines.
Check for definedness on the pattern's type.
Added one more test.
Allow semantic operations to be performed on property names.
Just use ranges, don't bother iwth renameInfoSucceeded.
added context flag
Added test for formatting on default keyword
Add two new tests to test for regression.
Don't error on JSX elements when JSX.Element isn't present
Drafting constructor assignability restrictions
Renamed test.
Accepted baselines.
Added failing tests for when RHS is a destructuring.
No more 'scriptLexicalStructure'.
Underscore typings.
externam -> external
Added failing tests.
addressed PR feedback
Adding tests
Accepting new baselines
addressed PR feedback
Implement intersection types
Remove unused variables
fix formatting in parser
merge with master
Renamed function.
Revert changes to the parser and augment check to the emitter to handel '1..toString' case
Added test for formatting on protected modifier
Added tests.
Spreaded anys should satisfy all required properties
revert unintentional change
cleaner loop
added Program.structureIsReused property, disallow reuse if target module kind differs in old and new programs, move setting of resolvedModules cache to the program, added tests
Update LKG
consolidated looping through class members into one loop
Rename functions and variables, also a small refactoring.
Renamed tests.
Use 'propertyName' when available in a BindingPattern.
Added more tests.
Add the services sources as dependencies to tsserver.
Got filtering working in object binding patterns.
Basic completion in object destructuring working.
Don't print in the middle of tests.
Changed ordering of verifications.
Accept baselines (missing files).
Accept baselines
Don't report an error for 1.toString(), just emit a space for JS compat.
Remove space and s
Changed symbolflag
Accept baselines
Another change suggested in CR
Adding extra test per CR
Generalize logic for upcoming work on object binding completion.
Add test case for when in the middle/at the end of the word.
Clean up 'getContainingObjectLiteralApplicableForCompletion'.
Added tests.
Updated baselines.
Preserve initializer.
PR feedback
updated comment in test and baseline
Update LKG
accepted baselines
do not try to classify missing nodes
Re-fixed error message.
Added check to test
use existing information about module resolutions
Changed error message
Moved tests to classAbstractKeyword folder
Add Jake task to update the Sublime plugin
reuse structure of the program if changes in files don't affect imports/references, remove module resolution from the checker
Accepted baselines.
Added tests where parameters have initializers.
Accepted baselines.
Tabs -> Spaces
Accepted baselines.
Check for number of binding elements in parameter patterns.
added baselines for new tests
new tests
updated baselines for new error messages
changed error messages and fixed comments
It's no longer safe to store JSX elem. attr. type in nodelinks.resolvedType
Accepted baselines.
Added tests.
p -> parameter
More cleanup
responded to some of Daniel's comments
moved comment
moved abstract-method-inheritance test to checkKindsOfPropertyMemberOverrides, changed error message
Unrelated baseline noise
Treat </ as a token in TSX files
Misc cleanup
Update LKG.
do not use `Object.defineProperty` in es3 target
improve  module loading interoperability for babel
Moved async functions for ES6 behind experimental flag
fixed some indentation quirks, comments
update LKG
updated baseline for new __extends impl
accepted baselines
moved tests, added a test
Simplified checkClassPropertyAccess -- fixed bug in super access
Don't log by default.
Factor switch staement into a map and create a method to add members to it
added tests
declarations of abstract methods must be consecutive
Added shortcut in checkAwaitedType for isolatedModules
Add tests.
Adding a few tests
write to declaration file
removed comment
removed premature parser check
wrap host.getCanonicalFileName in arrow function
Missed a few files in baseline-accept
Minor function rename
Add support for awaiting union types with mixed promise and non-promise constituents.
constructor cannot have modifier 'abstract'
Generate names of form class_N for anonymous classes
Baseline-accept
Conformance tests for JSX
Conformance tests for 'as' operator
Fourslash tests for JSX and As
Test support for TSX files
Formatting and LS for JSX and As
Emitter for JSX
Checker work for JSX + As
JSX/as support in tsc.js + error messages
Scanner / parser for JSX and As
Utilities + types setup for JSX and As
Accepting new baselines
Defer checking of class expression bodies
fixed comment, spacing
updated baselines
check for inheriting abstract member functions
PR feedback.
Update comment.
Cleaned up async return type check
PR feedback.
Make type-checking cancellable.
Actually check types in checkClassExpression
Don't access diagnostics directly.  Use the supported Program API for them.
Make it so all our diagnostics APIs return an independent set of diagnostics.
Don't use spread operator when pushing arrays onto other arrays.
Make classification cancellable.
PR feedback.
Accepts baselines
support modules as well as namespaces in external module conversion
Accept baselines
Add a non-generic construct signature to Map, Set, and WeakMap
CoreServicesShimHost and CoreServicesShimHostAdapter changes to support TSConfig exclude from the language service
Add a unit test
feedback from pr #3542
Emit declarations of namespaces correctelly
Adding SyntaxKind.ClassExpression in a bunch of places
Cleaned up diagnostics
Changed createPromiseType to return emptyObjectType
Removed unneeded capture for lexical this
Moved getContainingFunction call in checkIdentifier
Inlined checks for NodeFlags.Async in parser
Removed unused getContainingParameter function
merged master
forbid calling abstract member foo() via super.foo()
Accepting new baselines after master merge
Addressing more CR feedback
Accepting new baselines
Addressing CR feedback
Feedback form pr #3513
Squueze perf in syntactic classification.
Make resolveName ignore export specifiers without calling getSymbol
Scan less during classification.
changes that are non-breaking
changed to '==' to '===', '!=' to '!=='
Re-number enum.
merge with extendsExpressions
Remove generatorParameter and asyncParameter contexts.
Accepting new baselines
Accepting new baselines
Use Object.create(null) in __extends when base is null
Accepting new baselines after merge
Adding another comment
Adding comments and doing a bit of renaming
forbid abstract methods from having an implementation
Accepting new baselines
Workaround to match previous type writer output
PR feedback.
External modules are always in strict mode in ES6
Modules are always in strict mode in ES6.
Check namespaces for strict mode.
Remove 'strict mode' from parsing and checking, and make it purely something purely checked at bind time.
Abstract keyword: Added parsing and some checks
Parse class member with a missing identifier in the presence of a modifier
Accepting new baselines
Adding basic tests
Accepting new baselines
Check that base constructor return types are identical Treat class extends clause as expression position in services.ts
Decouple ts.sys from the editorServices where possible
Export server & session without any node specifics
Updated baselines
Accepting new baselines
Use instantiated signatures in super calls
Adding SyntaxKind.BindingElement case
Removed TypeCheckerHost extension.
Just explicitly use Harness.lightMode.
Style.
Updated baselines.
Use reference comments again.
Accepting new baselines
Consolidating strict mode reserved identifier checking in single method in binder
Allow expressions in extends clause of class
rename 'FileMap.delete' to 'FileMap.remove'
address PR feedback
introduce FileMap to store mappings with filenames as keys
Updated comment.
Accepted baselines.
Never mess with the file list in tests.
Spelling.
Remove unused 'assertInvariants' parameter.
Clarify 'emitAll'.
Accepted baselines.
Put the no-default-lib ref comment back in the 1.0 lib test.
Change depth limit from 10 to 5 in isDeeplyNestedGeneric
Don't log by default.
PR feedback.
PR feedback.
Define Array.isArray using a type predicate
use namespaces instead of modules in the codebase
do not report extra error if file was already found without extension
Spelling.
Remove BOM.
Add explanatory comment
Don't bother trying to semantically classify names that could never be typenames.
Use full spans in the classifier.  Non-full spans are very expensive to compute.
Added test case for invalid generic type constraints
Add comments
Change checkGrammarModuleElementContext to return true if it gives an error
Unite ParsingContext.ModuleElements and ParsingContext.BlockStatements
Remove unused 'assertInvariants' parameter.
Clarify 'emitAll'.
added more tests
Remove the ModuleElement type in favor of Statement
Add fourslash test for in scope completion
Update affected baselines
Improve error recovery after a dot
Give a name when binding an errant export declaration
Some cleanup and renaming
Update baselines for emit change
Add test cases
Accept baselines
Disallow module elements in a non-module context
Convert StatementFlags to a boolean
Removed more 'debugger' statements from tests.
Removed 'debugger' statements from tests.
Encode compiler files as UTF8.
Emit awaiter arguments on new line
Retype the text instead of removing the bad character
Remove bad character in checker
fix merge conflicts with master
Add test
Unravel some conditions
Move inferFromTypes to use isDeeplyNestedGeneric
Don't consume 'is' keyword if there is a preceding line terminator
Addressing CR feedback
added missing semicolon
move temp declarations out of object literal
move temp declarations out of object literal
Addresses CR feedback
Updated baselines for 1.0 lib test.
Put the no-default-lib ref comment back in the 1.0 lib test.
Adding a few comments per CR feedback
filename -> fileName
Added 'filename' metadata tag to 'CONTRIBUTING.md'.
Addresses CR feedback
Addresses CR feedback
Modifying test a bit
Adding test as suggested in CR feedback
Addressing CR feedback
Removing lib.dom.es6.d.ts line
Adding simple tests
Accepting new baselines
Support generic type aliases
Users don't need to turn core.autocrlf off anymore.
wrap host.getCanonicalFileName in arrow function
adding iterators to DOM interfaces
Adds error for non-return positioned type predicates and changed parse type predicate logic
added tests
emit module name for system modules, add moduleName argument to 'transpile' function
added tests
Moved lookahead logic into 'getDeclarationFlags'.
Accepted baselines.
Added test regarding 'declare' keyword as beginning of statement expression.
Update LKG
Amended comment.
Add missing overloads for texImage2D and texSubImage2D
Accepted new baselines.
Account for interfaces.
Accepted baselines.
Added tests for interfaces and tagged templates.
Expose skipDefaultLibCheck as a commandline option
PR feedback.
added missing semicolon after calling exporter function
PR feedback.
Updated emit to align with current proposal for ES7 async functions
rename 'FileMap.delete' to 'FileMap.remove'
New Test and Baseline
merge with master
added missing semicolon after calling exporter function
Accepting new baselines
Add back void annotation
Change name from data to info
Refactor to-string functions
Removing getGeneratedNameForNode from type serializers
Changed name from method to buildDisplay
Removes old type predicate functions
Adds PR feedback and removed references to typeguard (class) methods
Speed up tests by not type-checking lib.d.ts unless the test asks for that.
Update LKG after merging release-1.5
Reverted back to using the 'assertInvariants' parameter.
Use a separate variable to track for if no-default-lib tag was encountered.
Don't use innerExpression in parenthesizeForAccess
Accept baselines for parenthesized type assertions
Add tests for parenthesized type assertions
Don't try to strip parentheses when emitting synthesized parenthesized expressions
Removed comment.
Add other overloads for texImage2D and texSubImage2D
Remove HarnessDiagnostics.  Just use the normal ts Diagnostic instead.
new baselines
Check for ambient context instead of ambient flag
Remove last read reference of TypeFlags.Any
address PR feedback
Don't check if *all* constituent types are 'any'.
Check for 'any' only by using the flag, not by checking for instance equality.
emit module name for system modules, add moduleName argument to 'transpile' function
new baselines got mergeClassInterfaceAndModule
New test
updated baselines to reflect new error message
Updated error message
Addressing CR feedback
simplified check
Don't access the anyType directly.  Encapsulate all access to it behind a helper.
Renamed functions, removed the duplicates found from renaming.
introduce FileMap to store mappings with filenames as keys
Added an explanation for the lookahead.
Remove the DocumentEvent itself from createEvent overload.
Update LKG after commit 34a5514fef25125b56dfff49fb0357aee2d1bb90
Rename new test
Add test for object literal methods
Add hopefully helpful comment
Return expressions always need to be type checked
a deer, a female deer -> does
Limit scope of function expressions to themselves.
Added test for find all refs of function expressions.
Add rename tests for function expressions.
Adjust expectations.
Find the references themselves.
Spit out JSON when expected =/= actual.
Verify references count.
Renamed tests.
Adjust tests.
Error smarter.
Removed unused code, use valueDeclaration for symbol.
Added rename tests.
Added tests.
Nodes -> Node
Accepted baselines.
Moving logic around in getReferencedImportDeclaration
fixed a grammatical issue
clean hostCache to avoid extending lifetime of script snapshots
merged with master
Make index types optional in ResolvedType
Unified logic for renamed block scoped locals and other generated names
Addresses PR feedback
Adds type guard methods
Adds tests
Adds custom type guard
Update LKG.
Dom lib file bug fix
Rename new test
Add test for object literal methods
Respond to code review comments
Add hopefully helpful comment
Simplify code.
fixed loops, merged baseline
Return expressions always need to be type checked
Accepted more baselines.
Added more tests.
Simple changes to the compiler to make the jsDoc work easier.
fixed merge conflict.
Update LKG
Added baselines.
Added tests.
removed extra newlines
fixed merge conflict
updated baselines
CR feedback
Updated tests
deleted redundant tests
merge compatiblity now performed in checker.ts
Adding tests.
PR feedback.
Added test where one trailing flag exists.
Use declared variables to confirm completion.
Accepted baselines.
Added another test.
Accepted baselines.
Block completion when in trailing flags of a regex.
Don't use 'Value' or 'Type' as they have overlap. Instead test for the precise meaning.
Only resolve 'arguments' and function/class expression names if the meaning permits it.
Accepted baselines for the only test that was expected to pass.
Added tests.
Added tests.
Added leading digit.
Remove checking in declareSymbol
removed comma
cleaner hasNonAmbientClass
Remove EmitResolver.getExpressionNameSubstitution Add EmitResolver.getReferencedExportContainer Add EmitResolver.getReferencedImportDeclaration Clean up getGeneratedNameForNode in emitter.ts Switch isNotExpressionIdentifier to isExpressionIdentifier in emitter.ts Revise emitExpressionIdentifier in emitter.ts
fixed style, added comment
exclude closeparen/propertyaccess tokens
Add tests for projectinfo command
Update LKG
fixed indentation
New Baselines for class-interface merging
added conformance tests
clean hostCache to avoid extending lifetime of script snapshots
Updated LKG
Added experimentalDecorators flag
Added merged declarations for ambient class/interfaces
Revert "classInterface: changed excludes flags"
Follow symlinks when enumerating files in a directory
Never normalize end-of-lines on clone/commit.
Adding regression test
Remove old (and insufficient) instantiation caching
Addressing CR feedback
Use symbols instead of types in infinite instantiation detection
Accepting new baselines
Removing unnecessary logic
New test and baselines
Display nested generic types as f<A>.g<B>.C<X, Y>
CR feedback
Add APIs to provide project info for a given file
Update symbol baselines because of things in lib.d.ts moving around
Address PR feedback for generators
Accepted baselines.
Added the iterator symbol to 'IArguments'.
Added tests.
Moved call for getSpreadArgumentIndex in hasCorrectArity
Addressing more CR feedback
Remove unnecessary code.
Removing unnecessary code.
Remove uneeded code.
Add syntactic classification for doc comments.
Add tests for jsdoccomments.
Parsing support for jsDocComments.
Accepted baselines.
Added another test.
classInterface: changed excludes flags
Accepted baselines.
Don't use 'Value' or 'Type' as they have overlap. Instead test for the precice meaning.
Only resolve 'arguments' and function/class expression names if the meaning permits it.
Accepted baselines for the only test that was expected to pass.
Added tests.
fix constructors for DateTimeFormat, NumberFormat
Respond to code review comments
PR feedback and minor refactoring
Adding a few more comments
Addressing CR feedback
remove space after close bracket only if next token does not start block in function declaration context
Adding tests
Local types not in scope in parameter lists and return types
Adding comments
Accepting new baselines
Support local generic types within generic classes and functions
getLineIndentation for others
Validate that only module level declarations have modifiers
Allow local interface, type alias, and enum declarations
Consistent formatting of optional argument comments
Single function to parse statements and module elements
fixing some types
PR Feedback
Added Gitter badge
Migrated decorator checks to call resolution
emitWithStatement should emit a WithStatement
Changing type mapping cache to be a dictionary
Initial PR feedback
Adding regression test
Add cache to instantiateType function to break cycles
update LKG
Updated LKG
Added tests
Added tests
Update version to 1.5.3 for the VS 2015 release
Some cleanup and additional comments following PR feedback
use textSpanEnd instead of handrolled version
addressed PR feedback
during file update request only changed portion of the text from the host
add optional 'getProjectVersion' method to perform fast up-to-date checks
program should store file names with normalized slashes
Adjusted spacing in tasks.json
do not hoist ambient declarations
addressed PR feedback
correct typos
system: fix emit for exports of non-top level entities, fix emit for enums
addressed PR feedback
handle triple slashes in url schema 'file' correctly
update license attribute
Accepting new baselines
Optimize spread to not generate x.slice() when x is an array literal
Accepting new baselines
Emit [...a] as a.slice() to ensure a is copied
rename tests
Change flag --singleCompilation to --isolatedModules
Add tests
Update baselines
Remove check for declare modifier on interface
Combining else blocks
Support "exclude" property in tsconfig.json
take the function out
getLineIndentation
Updated baselines.
use textSpanEnd instead of handrolled version
Added change to omit comments for variable statements when appropriate.
addressed PR feedback
during file update request only changed portion of the text from the host
Update LKG
Addressing CR feedback
block form indentation
Saved
addressed PR feedback
Renamed alwaysCopy to needsUniqueCopy
Adds alwaysCopy argument
Adds an always emit of pair of parens in spread syntax in new expression in ES5
Changes to emitCallTarget
Corrects old tests.
Adds spread syntax in new expression in ES5
Adds tests
Adds an ignore on projectOutput
Address code review
Add a comment in getTypeOfAlias
Only call getTypeOfSymbol recursively if it's a value
Accepting new baselines
Removing stack from removeSubtypes method
Update the test to actually test what we intended
Adding regression tests
Added parseModifiersForArrowFunction
Add circularity check to getReducedTypeOfUnionType
Added comment for Daniel
alligned comments
Additional cases added for creating new variables.
Added tasks.json to easily use VSCode with TypeScript sources
Update baseline
use CRLF by default
Cleaned up checker, added comments to parser based on PR feedback.
Added comments for emitAsyncSignatureAndBodyForES6
Simplified parenthesis check for await as yield.
Better name for bitmask in ParserContextFlags
handle triple slashes in url schema 'file' correctly
Adds tests
Adds non emit on non-initialized export
Accepting new baselines
Optimize spread to not generate x.slice() when x is an array literal
:memo: document autocrlf needs to be off
Accepting new baselines
Emit [...a] as a.slice() to ensure a is copied
Update help description for noEmitOnError
add optional 'getProjectVersion' method to perform fast up-to-date checks
use canonical file name when asking the host if file exists
Clarify error message
Disallow yield expressions inside a class
Accepted baselines.
sourcemap -> sourceMap
addressed PR feedback
program should store file names with normalized slashes
Remove nextTokenCanFollowContextualModifier
correct typos
system: fix emit for exports of non-top level entities, fix emit for enums
do not hoist ambient declarations
PR feedback
Additional clean up of diagnostic messages
Cleaned up diagnostic messages
Add testcases
Address code review
Updated declaration and symbol baselines
Cleanup and PR feedback
Accept baselines after merge
Type check all files when emitting a file under -out
Make boolean compiler options in harness true only if they say 'true'
Type check all files when emitting a file under -out
Make boolean compiler options in harness true only if they say 'true'
Prevent infinite loop when classifying.
Prevent infinite loop when classifying.
Don't wrap an array of errors in an additional array.
Revert "Format on type deletes valid text"
Format on type deletes valid text
Updated baselines
PR feedback and another test
remove duplicate case labels
Make removeSubtypes resilient to reentry
Add new line
Bug fixes and baselines
Update LKG
Update version
Add a regression test
Update test
refactor narrowTypeByInstanceof
Added emit for async functions in ES6
Updated LKG
Removed Object.defineProperty for function name
Clean up 'collateOutputs'.
Modified test, updated baselines.
The caller can now specify whether to observe light mode in 'createSourceFileAndAssertInvariants'.
Clean up unused files in the harness.
use canonical file name when asking the host if file exists
Removed runnerServer.ts
Remove getUnionTypeOfSubtypeConstituents
Initial PR feedback
Always call getReturnTypeOfSignature on a generator from checkFunctionLikeDeclaration
Update LKG
PR feedback
show more clearly error message when found missing module name
PR feedback
Remove 'assertInvariants', only do invariant-checking outside of light mode.
Added types, scan, parse, and check for async functions
Accepted baselines.
'/// <reference no-default-lib="true"/>' -> '// @noLib: true'
Accepted baselines.
Update tests to use '@noLib: true'.
Always include 'lib.d.ts' last in tests unless '@noLib' is specified.
Update comment
Add tests for duplicate identifier in parameter declaration
update baselines
Check that bindingElement is in parameter declaration and pass in correct symbol exclusion flag
ProjectService passing incorrect object to parseConfigFile()
Remove isParameterDeclaration to utilities
Update LKG
Remove unnecessary LineEndingSensitive option from BaselineOptions
Delete emitter.js
Add missing overload to XMLHttpRequest.send
Adding regression test
fix code styling
Addressing CR feedback
PR feedback
Update error message
unify file extension resolution logic
use only 'separateCompilation' flag when checking of file should be emitted
Rebaseline tests
Make the harness report a failure if the line endings differ from the baselines
Removed 'fileMetadataNames'.
Remove Generator interface from ES6 lib. We may need to add a better typing later
Add tests for generators
Formatting for yield and yield* expressions
Cache element types of iterable and iterator
Adjust symbol baselines after rebase
Remove error for having return expressions in a generator
Add implicit any error for generator with no type annotation and no yield operands
Improve error for void generator
Accept baselines
Infer return types from yield and yield* expressions
Contextual typing for yield expressions
Assignability checking for yield and yield* expressions
Disallow return expressions in a generator
Rebaseline error codes
Yield and yield* have type any
Check that generator return type is assignable from its IterableIterator type
Simplify global generic type instantiation constructors
Move getIteratedType out of checkIteratedType
Formatting for generators
Disallow * token on overload signatures
Disallow generators in an ambient context
Allow yield expressions, and allow generators only in ES6 and higher
Add some tests for yield*
Improve yield context error message
Make expression optional in YieldExpression
Update description message and variable names
emit input non .ts files as separate files when 'allowNonTsExtensions' and 'separateCompilation' flags are specified (used in 'transpile' related scenarios)
Update baselines
fix formatting
Removing 'resolvingType' special type
Rename parameter static -> isStatic, fixes 'static is a reserved identifier' error when running in strict mode (#3006)
Compiler flag to specify line ending #1693 unit test adjustments
Compiler flag to specify line ending #1693 unit test adjustments
Compiler flag to specify line ending #1693 unit test adjustments
Compiler flag to specify line ending #1693 unit tests
Compiler flag to specify line ending #1693 code review adjustments
Compiler flag to specify line ending #1693 code review adjustments
Compiler flag to specify line ending #1693 code review adjustments
Compiler flag to specify line ending #1693 fix whitespace
Compiler flag to specify line ending #1693
Adding test
Accepting new baselines
Improved circularity detection for types
addressed PR feedback, split conditional expression into multiple lines
support instantiate signature, it has type parameters.
fix formatting for chained callbacks
Whoops.
Use 'lastOrUndefined' where appropriate in the services layer.
Use 'lastOrUndefined' where appropriate in the compiler.
Moved gargantuan arrow function that obstructed the actual logic of the method.
Moved 'lightMode' flag to Harness.
Updated LKG
Updated type name
Updated ES6 declarations for Promise, updated baselines
Updated LKG
Document/rename flag used in compiler.
Add tests for __metadata and __param
Do not emit __extends if --noEmitHelpers is set
confused, in typescript a type decl needs the ( ) for a lambda
Update command name
Updated type name
Update LKG
Remove erronious change to shims.ts in previous commit
Accepting new baselines
Modifying test
Respond to code review comments
Error when variable is circularly referenced in type annotation
This seems to work today, not sure what I was seeing yesterday.
cf feedback
Update names.
Log when the lexical classifier fails.  not the perf of each line.
Unify more classification code.
Add a common, dense, format for classification operations to lower cost of processing on the host side.
Faster getClassifications
Updated ES6 declarations for Promise, updated baselines
Update names.
CR feedback
Log when the lexical classifier fails.  not the perf of each line.
this fixes No builder in right-hand side of object binding pattern element #2693  and adds tests
Unify more classification code.
Update LKG
Add a common, dense, format for classification operations to lower cost of processing on the host side.
Added missing createEvent overloads
Made parameter mandatory, check type baselines again even in light mode.
Accepted baselines
Added test for abstract-classes
Output abstract keyword in declaration files (for classes)
Error on creating a new instance of an abstract class
Accept baseline changes
Parse abstract keyword
type narrowing by constructor signiture of interface
Add getTypeDefinitionAtPosition to tsserver
Add test to shims
Add implementation for getTypeDefinitionAtPosition
Refactor getDefinition code
Add support for --noEmitHelpers flag
Use no-default-lib for the '--noLibCheck' flag.
Restore checker simplification that was reverted due to a bad merge.
Rename HeritageClauseElement to ExpressionWithTypeArguments + related methods.
addressed PR feedback
Add a light=true mode for running tests faster.
exclude 'default' from star exports
extract emitExportStar in separate function
allow module to reserve slots for names that they export
merge with master
Run all checks in it blocks
Cache the emit of 'fourslash.ts'.
Accept baselines
Accepting new baselines
removed redundant check
generate local storage for all exported names to avoid overwriting them via star exports
Remove 'reverse' option.
Remove global.runners.
Jakefile -> Jakefile.js
added tests
always emit files as modules when separateCompilation flag is specified
Update LKG.
wrap project runner tests in 'it'
Accepting new baselines
Adjusting error messages
Accepting new baselines
Modify fourslash tests
Support 'namespace' declarations for internal modules
tsconfig.json added missing file references and fixed the order
Add script to create a benchmark test using the compiler
addressed PR feedback
merge with master
Added test.
Accepted baselines.
Added test.
Added tests for 1.0 lib and missing decorator type
Lazy resolution of global decorator types
Updated LKG
Corrected call.
Updated LKG
Added test.
Accepted baselines.
Update LKG
Update toolsVersion
Added test.
Use 'emitVerbatimDeclarationName' instead of using a default flag in emitBareNode.
Faster getClassifications
Don't double wrap exceptions.
emitJavaScriptWorker -> emitBareNode; emitNodeWithoutSourceMap -> emitWithoutSourceMap
Added tests for 1.0 lib and missing decorator type
Lazy resolution of global decorator types
update error messages
Add more tests
correct the slashes for a new line.
fixed formatting for equals token in type aliases
More refactoring
Minor clean up to make it more readable.
Added comments for 'emitNodeWorker'.
Moved function used in declaration emitter to the declaration emitter to break dependency loop.
Removed vestigial code.
Comment the new core functions.
emitSourceMap -> shouldEmitSourceMap
Accepted baselines.
Emit comments for function declarations in a more uniform way.
Improve error message when encountering an invalid tsconfig.json file.
Add error handling.
Undo the change to return
Rename iterator property of ForStatement to incrementor
Add support for UMD-like module export format
addressed PR feedback
Addressing CR feedback
Produce type and symbol baseslines when running tests.
Blocks with locals should be added to the container chain so we can detect name collisions in them.
Add SVG version of logo as per #1375
Updated LKG
Updated LKG
Updated emit for __decorator and __metadata helpers
emitDeclarationName -> emitNameOfDeclaration
Accepted baselines.
Cleaned up flow of binder, fixed ordering for comments/sourcemap tracking.
Added tests from original issue.
Updated emit for __decorator and __metadata helpers
expose the config file processing throught the LS and add a callback to enumerate files in a directory
CR feedback.
CR feedback.
Accepting new baselines
Adding tests
Defer resolution of declared members in classes and interfaces
do not hoist non-top level block scoped variables
added comments, fixed typo
Clean up comment.
Clean up comment.
Clean up comment more.
Remove unnecessary returns.
Clean up comment.
Clean up comment.
Add explicit return to indicate the end of flow of a method.'
Add explanatory comments.
CR feedback.
Add explanatory comments.
Split out the concerns of the binder even more.
Add --inlineSources option
fixed indentation in comments
added comments, updated test baselines
Update LKG
Respond to code review commmetns
skip 'import ...' nodes when creating variable statement for imports
merge with master
rename local variable
Add clarifying comments to the binder.
Add clarifying comments to binder.
Remove unnecessary check.  Classes always have exports.
Move code for creating a prototype out of the common declareSymbol codepath.
CR feedback.
Use SymbolFlags.None in the binder.
Inline binder method.
Move all symbol table initialization into the same method.
Clean up comments.
Simplify code in the binder.
Remove unncessary postbind for function/constructor types.
Remove post bind step for modules.
Remove code to post bind parameters.
Rename methods.
Extract any complicated code in top level bind function to individual helpers.
Simplify recursion in the binder.
Add a 'None' member to SymbolFlags enum.
Explicitly type 'bind' as being a void function.
Add explanatory comments to the binder.
Simplify concerns in the binder.
Rename locals to more clearly indicate they are flags and not kinds.
ConstructorType's name should be __call not __constructor.
Always recurse into children in the binder in a uniform manner.
Update LKG
Update version
Accept symbol baseline
Change TypeMapper to only take a type parameter, and fix combineTypeMappers to comply with that rule
Update LKG
numberic.
word -> Word
Removed unnecessary check since ShorthandPropertyAssignment's name is always an Identifier.
Accept baselines
Address PR feedback
Accept symbol baselines
Support passing a start/length when creating a scanner.
CR feedback.
`exports.default` in ES5 vs `exports["default"]` in ES3
update comments
update baselines from merging master
update baselines from merging master
Additional API cleanup.
Make StringLiterals and HeritageClauses into TypeNodes.  It makes the checker much simpler and nicer.
Address code review
Add conformance tests for arugment expression, getSetAccessor, arrayLiteralExpression
Changed the type for TypeTrack.Mode
Updated overloads that only differ in return type
Update baselines from merging master
Add spec description
Clean up some repeated calls to getBaseTypes
Add tests for not depending on base types
Lazily compute base types
Add comment
Move amd-dependency erlier in the list
Respond to code review comments
Accepted baselines.
Expect a colon if the property was a reserved word.
Respond to code review comments
Accepted baselines.
Update baselines from merge master
update baselines from merge master
Added baselines.
Update baselines from merge master
Add spec description into tests
Added tests.
Added tests.
wire module lookcups for default import in ambient module declarations
Move error test cases into separate files
Adding test
Add spec description to the test file and move tests that generate errors to separate file
Alignment.
Include property in union type only if all underlying properties are public
Move tests with errors to separate file
Update tests files with more conformance from section 6.4
Added symbols files.
Only error in <ES6.
Add/rename baselines.
Added tests from 'captureArguments' branch.
Removed properties of es6 only types from extensions.d.ts
Updated the interface definitions in extensions
Organize test files and add spec description in the comment
Add conformance test for ambient enum declaration
Update baseline after merge again
Add conformance tests for const enum
Don't run typewriter tests on the APISamples.  It's too noisy.
Update baseline after merge
Add additional tests for typeguard for class or object property
Split symbol baselines from type baselines.
CR feedback.  Use a module instead.
Update diagnostics.
Improve error message for type parameter extending union
Source type parameter extending union works even when target is a type parameter
Check assignability recursively when source is type parameter with union constraint
Destructuring assignment and variable declaration
PR Feedback and updated baselines
Update LKG
respond to code review commment
Add source maps to rootdir tests
Accept baselines
Add rootDir tests
Add rootDir option
Update according to comments
The element/iterated type of any is any
Add test for askeyword
Move asKeyword into correct section
Move commonSourceDirectory computation to its own function
Addressing CR feedback
Accepting new baselines
Update test filenames
Change file name to be more consistent
Change file name to be more consistent
Conformance test for update incontextual type in function expression
Addressing CR feedback
publish exported postfix operators as 'E("", ++x) - 1' and 'E("", --x) + 1'
Eliminate HUGE (>10X) performance regression on session.ts dispatch that was causing major lag for Sublime plug-in.  Backs out destructuring dispatch change in session.ts
Update baselines after rebase
Change parenthesizeForAccess to check isLeftHandSideExpression
Simplify handling of rest parameters with binding patterns in the checker
Properly emit nested destructuring in rest elements (fixes #2587)
Some cleanup in emitDestructuring
Remove unnecessary parameter to emitDestructuring
Disallow initializers in assignment rest elements
Assignment rest element pretends to get the contextual element type
Rest assignment element allows nested destructuring (fixes #2156)
Disallow binding patterns in rest parameters
Disallow binding patterns in binding rest elements (fixes #2519)
Conformance test for update in section 4.6
Insert @internal when we generate diagnostic messages.
Elide var when emitting a module merged with an ES6 class
Include symbol information in the typewriter baselines.
export imported aliases
Add destructuring parameter with generic
Simplify typewriter code.
Formatting
move check outside switch statement
add missing closing paren in emitted code
code cleanup
More newlines
Ebynerator, VBArray
Use const.
Removed local gitignore change
Updated dom files and removed some IE only types
Conformance test for 3.8.2.2 and 6.4
Use a singleton parser as well.
Use a single scanner for all parsing tasks.
Update LKG
expose text span helpers
Expose getDefaultLibFileName
Adding test
Accepting new baselines
Consistently reduce union types in property access
Address code review
Organize test cases for strict mode
Address code review
added tests
do not emit original variable statement if it was hoisted and all variable declarations are non-initialized
hoist source level module declarations
hoist source level class declarations, fix error message
emit publish of exported values in destructuring
emit publish of exported values in prefix/postfix unary expressions
emit publish of exported values in assignment expressions
formattingOnChainedCallbacks (passing)
Address CR
Address CR
Update LKG
use @internal comment consistenlly
Allow IdentifierName in memberExpression
Added baselines
Update tests cases
Address issue with propertyAccessExpression and QualifiedName in TypeReference
Don't report errors for empty generator functions with type annotations.
emit publish of exported values in variable declarations
added system module kind to harness
initial support for system module
Update baselines due to changes in master
Simpler lookahead, let the tryParse do the hard work
formattingOnChainedCallbacks
Emit generator functions and yield expressions in ES6.
Rename type.
Comment cleanup
Simplified lookahead and added ES6 test cases
merging
Merging
Ragga fragga newlines.
Check for inlineSoruceMaps first
update property in Identifier
Emit temp var declaration for 'export default <expression>' in declaration emit
Revert "Support an optional type annotation on export default statement"
Don't emit '_this' declaration in ES6 or later.
Added test for super method calls in ES6 classes.
merging with master
Add more tests
Better recovery when running into modifier
Remove incorrect check of module declartion
sort the old dom files
Use modules with const members.
Address code review; better error recovering
Add the 'none' kind.
Address code review
accept new test baselines
Distinguish written vs read references.
Updated baselines.
Update LKG
Remove _internal.d.ts files from LKG
Expose parseCommandLine
Make version const
Mark non-public API surface with the /* @internal */ comment
Remove step to build typeScript_internal.d.ts
Replace uses of 'Symbol.isRegExp' with 'Symbol.toPrimitive'.
Added 'flags' to RegExp.prototype.
Remove 'isRegExp'.
support URI patterns
Add comment
Update error code
CR feedback.
Allow the host to indicate which files it would like highlighting spans for.
Use the fileName that is in scope.
No need to tweak spans in syntactic highlights.
Get semantic document highlights as well through the new API.
Check for import, import equal, module
Add more test for import, import equal, module
Remove old tests
Completely remove check strict mode from parser
Add more test to cover strict mode code
Update tests
Move strict mode check into TypeChecker
Extract code for getting syntactic document highlights into its own function.
Add support for parsing destructuring patterns in arrow function parameter lists
PR feedback and baseline updates
Destructure arguments at dispatched calls.
Update baselines for preserving newlines
Changed isExpression logic related to decorators
Apparently our server tests can't handle negative tests.
*Actually dispatched* on the logic.
Actually implemented the session-side logic.
Add inlineSourceMap option
Added occurrences tests.
Rename tests.
Added support for getOccurrences to the server.
Add convertToBase64 method
Tests and baselines
Additional rule for spacing between decorator on same line as its declaration
Added rules for spacing around decorators, computing the undecorated start line of a node
Add tests
Update baselines
Rename test case
Check for omitted expressions when checking const and let declaration names
Add null check when querying for exports from a module
Addressing PR comments and adding unit tests (removing extra new lines and debugging statements)
Addressing PR comments and adding unit tests
Get sighelp for arbitrary functions working in .js files.
Use sys.newLine in transpile when possibel
add comment
Updated baselines
PR feedback
adding unit tests fot block comments outlining
Address code review
Update baseline
Rename variables to be consistent.
Don't cache the typechecker at the LS level.  Just get it when needed from the program.
Produce a map of named declarations instead of a flat list.
updating tests
updating tests
updating tests
updating test 2
updating test 1
removing extra reference header
Add decorator test for a decorator on a class expression.
Add additional tests.
Add support for emitting static properties in class expressions in ES6.
Address code review: have more explicit error
Break out acquisition of class properties vs. emitting them.
Remove typescript.d.ts from baslines of APISample tests
outlinging comments v0.2
Update APISample tests for 1.5-alpha release
PR feedback
PR feedback.
PR feedback.
outlining Comments v0.1 4/2
Update test and baseliens from parsing classLikeDeclaration in strict mode
Remove checking for scriptTarget before setting parsing context for classLikeDeclaration
Updated baseline
Add an exit message for the server.
Added __param helper for parameter decorators and cleaned up __decorate and __metadata
Produce a name for anonymous class expressions when we perform downlevel emit.
Support classes without names in our AST.  Report any issues with this at 'check' time.
Class declarations should be block scoped.
Update CONTRIBUTING.md
Cleanup emit for type metadata for #2577
Minor emit cleanup
Updated baselines
Minor emit cleanup
Updated baselines
Type serialization for decorators
Update test.
Update LKG
Update version
Update LKG
mend
Respond to code review remarks
Respond to code review comments
Update test.
Moved arrow function to function declaration.
CR feedback.
Adding a couple of class tests.
Keep comments in debug builds.
Remove unnecessary code.
Rename method.
revert fix for #2456 'Import namespace exports should be immutable'
Add to build
Wire stress tests
CR feedback.
CR feedback.
Add file that was errantly removed.
wire tst tests
Add explanatory comment.
Remove blank line.
Add support for semicolons in class bodies
Add support for parsing and emitting class expressions.
added tests for import\export elision
Update test names
Cleanup
Consolidate test logic in one helper function
use descript and it to run tests
Add contents for editTest
Introduce a new HeritageClauseElment type.
Remove commented code
Use assert
initial checkin
Expose readConfigFile and parseConfigFile
Nre TextStreamWriter interface with JSDoc and additional members (ITextWriter is being used by the compiler and cannot be safely modified)..
Missing ;
JSDoc for WScript members
Added properties/methods for WScript - https://msdn.microsoft.com/en-us/library/2795740w(v=vs.84).aspx per #2540
Remove unsed options
added initial set of unit tests for separate compilation mode
disallow ambient const enums in 'separate compilation' mode
do not include declaration files in 'is external module' check
Ensure export= is emitted correctelly in declaration files
addressed CR feedback
addressed CR feedback
Handel export default declaration completions
addressed CR feedback, accepted baselines
Allows extending ActiveXObject with with specialized overloads returning string types, per https://github.com/Microsoft/TypeScript/issues/2541.
Ensure we find export default declaration targets if we search for them by name
Add test for emit destructuring invariable declaration with omitted expression
Update baselines from merging with master
Emit ommittedExpression in binding pattern
fix typos in comments
Accepting new baselines
Accepting new baselines
Emit generated name for unnamed default function in down-level code
Remove experimental flag to cache for-of length checks.
Address code review
Update LKG
Remove empty line
Ignore projectoutput folder since this will be deleted by jake command
Ignore projectoutput folder since this will be deleted by jake command
Allow RWC runner to use default library instead of the one in json file
Use a function declaration vs a function expression to help deal with a reported Atom+IO.js issue.
doc: fix typo BankAccount and regenerate language specification
Addressing CR feedback
Add clarifying comment about checkExpressionCached
Always preserve new lines for array and object literals and additional constructs like blocks.
Accepting new baselines
Simplify temporary name generation logic
update version in program
fixes #2507 - bad formatting for formatonkey if convertTabsToSpaces === false
added relaxed emit rules for separate compilation
doc: fix typo 'BankAccount'
Make elaborateErrors persist throughout type relation checks
Got rid of 'getExportsOfImportDeclaration'.
Optimize direct Iterable reference in getIteratedType
Minor emit cleanup
Updated API baselines.
Add tests for array destructuring of iterables
Adjust getTypeFromArrayBindingPattern to return an array if inside a rest parameter
Wrap elementType in createArrayType for rest element in checkArrayLiteralAssignment
Use iterated type in checkArrayLiteralAssignment
Type of an array binding element is the iterated type of its parent in ES6
Refactor iterable or array checks into checkIteratedTypeOrElementType
getTypeFromArrayBindingPattern returns an iterable in ES6
Add createIterableType
Add tests for iterator spread in call
Add tests for iterator spread in an array literal
Support iterators in spread element
Refactor checkSpreadElementExpression to get the element type internally
Add spread to typeWriter
Change error message to be more general
Subsume 'getExportsOfImportDeclaration' with 'getExportsOfModule'.
Use 'symbolsToArray' to avoid filtering.
Updated baselines
Type serialization for decorators
Adjust the context token if the previous token is a word, not just if it's an identifier.
Added tests related to completions with keywords.
Emit decorators when --target ES3
Adjust 'position' to beginning of identifier when 'contextToken' has been readjusted.
More tests.
Added test.
Integrated pull request feedback
Move es6 alias name handeling to getAliasNameSubstitution to match getExportNameSubstitution
In ES6 use "export var x" for internal modules and enums instead of an after the fact "export {x};"
Make isReferencedAliasDeclaration check children
Disallow export declarations in internal modules
use the correct check for import and export specifiers
Rename isES6ModuleMemberDeclaration to isES6ExportedDeclaration.
Cleanup of duplicate code due to merge
Added tests.
Updates to emit and updated baselines
PR feedback.
PR feedback.
Don't bother with a predicate. It doesn't provide enough of a perf savings.
return undefined if we are not renaming to ensure we get the correct text
Back to .js
Updated typecheck for property, method, and parameter decorators
Changed emit for decorators
back to tsjs
Moved findConfigFile to program.ts.  Addressed pull request comments.
Disallow decorators on multiple get/set accessors of the same name
PR feedback.
addressed PR feedback
Update test cases
addressed PR feedback
Don't lose the this reference for compilerHost methods.
Mark new interfaces with export
Add SignatureHelp support to Typescript server
PR feedback.
CR feedback.
CR feedback.
Use an output format for quickinfo that more closely matches the original source.
fix typo in function name
disallow assignments to imported exports
CR feedback.
Remove the active completion session.
Use the same logic for completion entry details that we do for getting completion entries.
Break out completion symbol collection into its own function.
Comments and cleanup
Address code review
Change test files name
Make completion prefix matching case insensitive.
Accepting new baselines
revised name generation
Revert "Emit, even in the presence of declaration errors and noEmitOnError."
Updated check and emit, updated baselines
Treat .js files as javascript in the LS.
Some emit cleanup for ES6 classes, comments.
Accept baseline changes
Ellide uninstantiated exports in ES6
Simplified check for decorators.
Correctly emit bidning pattern with initializer and rest
Check for instantiation on export default in ES6
Consistently error on more than one 'export default'
Renamed variables for clarity
Removed the (now unused) lineBreakBetween
removed unused functions
Emit, even in the presence of declaration errors and noEmitOnError.
Adding a few comments
Deleting unused code
Accepting new baselines
Adding basic tests
Add support for exporting imported symbols
Emit and use '__export' helper for 'export *' declarations
Simplify collection of external module info in emitter
Accepting new baselines
Separate 'export default' and 'export ='
Added gc of configured projects to handle case in which file is opened in directory configured by tsconfig.json, but file not part of the configured project.
Added support in the server for tsconfig.json.  When a host opens a file F, the server will check whether F is configured by a tsconfig.json file.  If so, the project specified by the tsconfig.json file becomes the LS context for F.
Simplified grammar check for decorators.
Refactored checkDecoratorSignature and renamed getAnnotationTypeForDecoratorType
Improve display of symbol definitions.
Treat 0x0085 as whitespace, not as a line terminator.  This matches ES5 and ES6.
Add a new findReferences API that buckets results with the definition they matched against.
Minor cleanup of resolveName for decorators
PR feedback
Don't actually emit declarations when we just want the diagnostics for them.
No emit should happen if there are declaration errors and noEmitOnErrors is specified.
Allow destructuring in ambient context
Emit destructuring in parameter
Further simplification
Clean up getCompletions code.
Add libraryTargets to prereqs of instrumenter
extract declaration emitter to separate file
Extended test.
addressed PR feedback
Added tests.
Expose setParentNodes on createCompilerHost
Added tests for const modifiers.
Remove space.
Added test for completions at beginning of file.
Addressed CR feedback.
PR comment, sourcemap test
Add handling of hard tabs in server buffers.  Change message protocol to pass locations as line/offset pairs instead of line/column pairs, where offset is a 1-based character offset from the beginning of the line. Offset will be equal to column if the line contains no tabs.  If the line contains tabs, offset will be less than or equal to column, depending on how many tabs are before the offset.  Also added tab size and indent size to file open message.
Simplify comment emit.
Simplify flow control.
Add test for pinned comments.
Simplify code for emitting comments.
merge with master, accept baselines
Added sourcemap tests
do not emit non-exported import declarations that don't have import clause
merge with master, accepted baselines
Add additional tests.
drop interned indentation prefixes if format options has changed
Add additional tests.
We only need the 2 most significant digits.
Add tests for javascript semantic dianostics.
fix typo
Add specialized semantic diagnostics for JavaScript files.
Add toolsversion to shim so we can read it from VS.
Updated baselines
Updated baselines
Updated baselines
Updated formatting for decorators
Emit for decorators, updated to ES6 classes.
Checker updates for decorators
Parser updates for decorators
Scanner updates for decorators
Diagnostics for decorators
Utilities for decorators
Types for decorators
use type annotation when emitting declarations
Added tests.
Line endings.
Add comments
Start handling element access expressions.
Start using nodeIsMissing.
Delete extra comma
More cases and tests for them.
Remove CodeClimate stuff
Add .gitattributes to override GitHub Linguist language classification for the repo
Add clarifying comment
Account for typeof expressions, added test.
Added index signature case.
Introduce NodeFlags.ExportContext
Added completion check for prefix-unary, binary, and conditional expressions.
Removed negations from test.
Moved logic from smart indenter; use 'scope nodes' for completions.
Added tests for #1410.
Added tests.
Added tests for completions before a new scope.
Added accumulated tests.
Always indent on tuple type literals.
Moved construct signature down appropriately, fixed logic for function-like constructs.
Account for call signatures properly.
Rename tests.
Indentation within binding patterns.
Handel export name bindings in internal modules in ES6
A more complete isCompletedNode.
Export classes defined wihtin internal modules correctelly
Do not emit "export" for classes within modules, and do not write the name of an export default class
correctly merge const enum only and instantiated modules
Respond to code review comments
initial version of declaration emit for default export
Add a check to make sure we have results.
Add assert to make sure getOccurences at position only returns results for the file we request the occurences for.
Address code review; Use for..of and use if-statement
Address code review
Address code review
Address code review
Add use of host-configured format options to additional code site.
More PR feedback
Added configuration message.  Added logic to expand tabs to spaces using host-configured tab size.
Address code review. Use-before-def check will be added to separate work item
Update Baselines
addressed PR feedback
use 'allowGeneratedIdentifiers' to explicitly tell when identifier can be renamed
Address PR feedback
Update baselines
Update baselines for symbol
Update baselines
Add tests
Update baselines
Upate error message
enable navbar for export defaults
Address code review: do not emit default constructor
addressed PR feedback
Share SourceFile with other grammar checker that needs it
Address code review
Make sure arrow function grammar rules can deal with type annotations
Restore earlier behaviour when parsing non-simple arrow function bodies
Parse arrow function body as identifier if missing => or {
Address slew of review comments
Check that arrow is on same line as parameters
Add additional test-cases for arrow function grammar
Perform error reporting in checker
Disallow line terminator after arrow function parameters, before =>
Add tests for type parameter fixing
Get rid of inferenceFailureType, just set the failedTypeParameterIndex directly
Optimize the clearing of inferredTypes
Add assert in reportNoCommonSupertypeError
merge with master
Preserve newlines in our own compiler.  This aids debugging as it keeps lines at a reasonable length and more closely matches the original source.
Do not include experimental options in the public API.
Update LKG.
Update LKG.
Reserve _i and _n as names we often want to generate
Use the new option to cache .length access
Add experimental option to cache the .length access in downlevel for-of emit.
accepted baselines
Use 'let' in the compiler layer.
Update LKG
Use 'let' in the compiler layer.
Use 'let' in the compiler layer.
Use 'let' in the compiler layer.
Use 'let' in the ompiler layer.
Use 'let' in the services layer.
Removing unused function from emitter
Clean up diagnostic timers and -diagnostic output
merge with master
consider binding elements as always initialized with doing shadow check
Use 'let' in the services layer.
Use 'let' in the services layer.
Use 'let' in the services layer.
Use 'let' in the services layer.
Use 'let' in the services layer.
Update baselines.
Use 'let' in the services code.
Use 'let' in the emitter.
Use 'let' in the checker.
addressed PR feedback: fixed typo in function name
use Value meaning as a filter when resolving names to prevent skipping other value in favor of block-scoped variables
Use 'let' in the binder.
Use 'let' in the parser.
Use 'let' in the scanner.
Use 'let' in core.ts.
Use for-of in more places.
Use for-of in more places.
Use more for-of
use for-of in more places.
More usage of for-of
use for-of in more places.
Use for-of in the checker.
Use for-of in the checker
Use for-of in emitter.ts
Use for-of in core.ts
Use for-of in the parser.
Support an optional type annotation on export default statement
merge with master
Update error message
Emit export default in ES6
Emit Super as super
Update LKG
Clean up redundant tests
Parse classDeclaration in strict mode code for ES6
Address PR feedback
Adjust baselines after merge
addressed PR feedback
Export * and export { names } emit in es6 format
correctly parse destructuring in let outside of strict mode
Emit export internal import equals declaration in es6 format
Emit export class declaration in es6 format. Note since we havent yet changed the emitting of class declaration to es6 format, we are just exporting the constructor function
Add additional asserts to ensure we don't create diagnostics with bogus positions.
Emit export function declaration in es6 format
Emit ES6 module enum declaration
Disallow refering to static property in computed property name
Emit es6 export ModuleDeclaration
Es6 module emit for export VarDeclaration, export LexicalDeclaration
Do not rewrite substitute named import reference when generating es6 modules
Remove references with exports.id as es6 module doesnt have exports.id
Simplify module kind selection
Support for emitting import declaration in es6 format
addressed PR feedback
Emit in ES6 module if script target is es6 or higher
Add tests
Report error if module gen target is specified in es6
Handel isDeclaration visible for imports
Add tests
Report error on export assignment with es6 and above target
ES6 doesnt support import id = require("mod") syntax
Rebaseline tests that will be affected by #2308
disallow recursive references for block-scoped bindings
Emit class with export and export default
Add tests for downlevel for-of type checking
Remove unhelpful comment
Change a test to be more interesting
Introduce checkElementTypeOfArrayOrString for downlevel for..of type checking
Remove error for using 'for...of' in ES3/ES5
Emit class declaration with static property assignment
Add explanatory comments.
Remove unnecessary code.
Compute consistent argument indices and counts for signature help.
Add failing test.
added for* statements to isCompletedNode
Add tests for extension, type arguments, overload
introduce emitCaseBlock function
introduce CaseBlock as a block-scoped container for switch statements
test cases for constructor overload, non-static property assignment, getter/setter, method, static method,
emit get/set member function
Emit non-getter/setter member function
Remove redundant sourcemap span and comment. Differentiate between emit for below ES6 and above ES6
Move comment and refer to tuple type literal syntax rather than TupleType interface
Basic emit for class constructor without static property assignment
Add note about use of isTupleType()
Add tests for tuple type compatibility
Improve message for array destructuring error
Address PR feedback
CR feedback.
made seal, freeze and preventExtensions generic
Add specialized codepath for emitting without comments.
Remove deubgger statement
rename emitNode to emitNodeWithoutSourceMap
Hold at most 4 snapshots per file in the server.  This is about 1K per file.
Renames and comments as requested by feedback.
Further simplification.
Simplify indentation code in the emitter.
Move variable closer to where it is used.
tests for newline preservation.
Make the preservation of formatting an optional experimental compiler flag.
Accepted baselines
Added valueOf definitions for String and Number
Addressed comments on code style and organization.
Added description to version exports
Added new logger methods to test harness.
Changed TypeScript server logging to use an environment variable TSS_LOG as follows.  If TSS_LOG is not set, no logging will occur.  If TSS_LOG is set to any value, logging will occur as before this change (log file will be in directory of tsserver.js with name .logPID where PID is the process id of the server process; log will contain the pre-change messages).  If TSS_LOG is set to a string that has the form "-file fileName", the log file will be in the tsserver.js directory with name 'fileName'.  If TSS_LOG is set to a string that has the form "-level levelName", then the level of logging will be set to 'levelName'. Currently the two levels are 'normal' and 'verbose'.  The TSS_LOG string can contain zero, one or both of its options as in "-file LOG -level verbose".  At the verbose level, the server will log every request, response and event, and will also give elapsed time for message processing.
Added additional cases for format on enter.  These cases fix bugs in the orginal format on enter (which wasn't distinguishing whether there was existing whitespace to start some types of lines).
Update LKG
Update LKG
Preserve newlines for conditional expressions
Simplify code to emit indent code.
Preserve newlines on either side of a binary expression.
Address omitted return keyword.
CR feedback.
When emitting an arrow function, parenthesize the body if it could be interpreted as a block instead of an object literal.
CR feedback.
Add an 'isVariableLike' helper function.
Made the 'version' string an exported property
fix check to allow for empty argument list
Document procedure for digital CLA signature in CONTRIBUTING.md
Add diagnostics for signaturehelp crash
Added tests for let/const variable declarations in catch clause (with the same name)
Use hasProperty instead
Error on redeclaring a variable with let/const already defined as catch parameter
Add new diagnostics message for let/const declarations in a catch clause
Minor baseline adjustment
Preserve newlines for property access expressions on multiple lines.
Accept error baselines and API breaks
Add tests for destructuring 'for...of'
Do not create a temp for RHS if it's an identifier
Revert change to createTempVariable
Accept baselines
Support destructuring in 'for...of' loops
Emit 'for...of' statements with let/const initializers
Emit for...of when LHS is expression
Remove tempCount
Accept baselines
Add tests for 'for...of' emit when LHS is a var
Make createTempVariable call into generateUniqueNameForLocation
Emit 'for...of' loop when LHS is a var
CR feedback.
Never use the entire span of a function declaration or function expression when reporting a checker error.
Excluding "default" member from "export *" per ES6 specification
Adding test to ensure comment before block is conserved
Accepting new baselines
Renaming SymbolFlags.Import to SymbolFlags.Alias
enum cleanup: apply constant folding to all enum initializers, inline accesses only for const enums
More comments
addressed PR feedback
Revert "Run jake in interactive mode so output isn't lost."
look through the entire chain of name scopes to ensure that name is unique
Another comment
Adding some comments
Added guards for end of file edits.
Support emit of unnamed export default function/class
Accepting new baselines
Changing emit(...) to emitNode(...) in several places
Accepting new baselines
Parsing, binding, checking of export default with function/class
Words.
Addressed CR feedback, also properly accounted for template literals.
merge
Added logic to handle requests for changes past the end of the buffer.
Harden against trees without parent pointers for emitting literals; fix lookahead in text for numeric literal indicators.
Use CRLF not LF.
Use CRLF for line endings.
Use CRLF, not LF.
Make fields internal.
Updating fourslash tests
Add one more test
merge with master
Accepting new baselines
Unifying ES6 and TypeScript external modules Export assignments are now equivalent to export of member named "default" Export assignments and exports defaults collected by binder Export * declarations collected by binder Simplified logic for marking import symbols as referenced Removed "location" parameter from resolveEntityName Improved error position reporting in resolveEntityName
update baselines
Changes to crlf
Adds editorconfig file
Add tests for scoping
Address feedback
Expose a way to get the name table from the LS.
Don't intern all strings and numbers.  Just the ones used as declaration names.
Addressed some CR feedback.
addressed PR feedback
Add tests.
Add registry tests.
Adding npm related badges to the readme
Removed unused variable.
Respond to code review comments
Only add an extended Unicode escape when it is entirely valid.
Whenever a document is acquired, make sure it returns a source that corresponds to the version requested.
merge with master
Update comment.
Emit all strings with extended escapes using the same scheme as templates.
Respond to PR feedback
Made unicode escapes use uppercase hex codes.
Emit non-ASCII characters with unicode escape sequences.
merge with master
merge with master
Disallow destructuring in 'for...in'
Add a few more tests
Support assignment patterns in 'for...of' statements
Delete bad baseline
Update comment
Add tests for for-of destructuring
In ES6, an Iterable should contextually type an array literal
Move assert
Add tests for circular references in for...of loops
Check for assignability to the relevant iteratable type
More tests
Iterator tests
Check iterable structure of the right hand side of 'for...of' statement
Tests and baselines for 'for...of' variables
Get type of 'for...of' variables
Add tests and accept correct baselines
Basic iterator support in for..of statement
Basic tests
Basic for...of checking
Remove error disallowing for...of loops
Adding test.
CR feedback.
Add test for catch variables with initializers.
Rename method.
added comments
Simplify how catch clauses are represented in our AST.
added tests
Add ArrowFunction and sort cases.
do not treat property names in binding elements as block scoped variables
Make isDeclaration return 'true' on FunctionExpressions.
Produce better wrapping for object literal emit with computed property names.
Print times in a manner more consistent with the 1.3 compiler.
Added scanning support for extended escapes.
Added tests and updated baselines.
Make the vsDevMode script more explicit and support lib file override
added SyntaxKind.ModuleDeclaration to list of block scope containers
added 'nodeIsSynthesized' function, use createSynthesizedNode in emitter to build synthetic nodes
Update baselines
'from' is a contextual keyword, and should only be recognized as by the parser as such.
do not report error on non-initialized const bindings in for-in\for-of statements
Added tests for testing escapes.
do not emit default initializer for let\const in for-in\for-of statements
Ensure that the cost for typechecking is not billed to the emit portion of the compiler.
Accepting new baselines
Support for 'export default' with expressions
CR feedback.
CR feedback.
Simplified scanHexDigits by just wrapping the intended functionality in separate functions.
Added tests for escapes in strings, regexes, and templates.
Add support for new import syntax in preprocessFile
Avoid unnecessary allocations in binary expression emit.
Check if the module exist before extracting exports from it
Avoid allocation during binary expression emit when unnecessary.
Avoid allocation during binary expression emit when unnecessary.
Avoid allocation during binary expression emit when unnecessary.
Remove optimization of eliding the preamble code for functions without statements.
merge with destructuringDts
merge with master, fix emit for omitted expressions
moved name generation logic to utilities
merge with master
addressed CR feedback
added missing return, accepted test baselines
dropped extra newlines
added tests
added missing declaration kinds to getMeaningForDeclaration
added completion for exports in named imports section
Update LKG
Add tsserver.js to the LKG drop
delete unused files
breakpoint support for new import/export syntax
replace -1 in SmartIndenter with const enum
Support navigateTo for new import/export syntax
Support navigation bar for new import/export syntax
Wrap getDefaultLibFileName API changes in a try/catch until TypeScript 1.5 has shipped.
Support find references on the new import/export syntax
Remove debugger statement
Added comments for updateProjectStructure.
Update project structure after change.  After each change a timer is started.  If timer finishes before another change takes place, project structure will be updated to reflect any changes in reference comments or import statements.
addressed CR feedback
operator -> operatorToken.kind
Rename callback to literalEmitter
Removed tree rewriting code
Stop using rewrites for object literal downlevel emit.
Add a comment
accept baselines
Add support for printing colors to the command line when running mocha!
Support GetDefinitionLocation on module names and aliases for new import/export syntax
CR feedback.
use character instead of column when formatting multiline comments with tabs
[Symbol.iterator] of a Generator is a Generator
Be more conservative on when we'll emit a function in a single line.
Add missed file from addNavtoLimit branch.
Addressing CR feedback
Changed no content action for completions from exception to error message.
Added update of project structure on idle following change (if no changes in last s seconds (where s is currently 1.5), then check project structure to account for references that may have changed.  Turned this off pending fix for getScriptFileNames returning only the root names. Added event handler for deleted file, so that session can update error messages upon deletion of a file from a project.
Update LKG.
Update LKG.
renamed QMark to QuestionMark
CR feedback
Move NavigateTo over to using the new pattern matcher.
CR feedback.
added missing test
insert space after '?' only in conditional operator
Emit parameter initializers unless we are certain they don't have any side effects.
include binding element with initializer to current formatting rule for binary operator, adjust existing SpaceBeforeOpenBraceInFunction rule to recognize blocks
added rule to insert space after let\const in variable declaration context
do not include constructor parameters with binding patterns as names when collecting nav bar items
Update baselines after merging master
Use createAndRecordTempVariable
Respond to code review
Add maxResultCount optional field to NavtoRequestArgs.  Change session.ts to use this field.  Remove sort of nav items from getNavigateToItems in sesion.ts because LS now does the sort.  Removed no content throw in quick info as this happens frequently with Sublime (every cursor move calls quick info, and quick info is only available on symbols).  Added mechanism for other commands to avoid throwing and instead return a specific error message, so that we don't make the log unreadable (as it was with hundreds of quick info stack traces).
Addressing CR feedback
Emit arrow functions with expression bodies 'as is' when targetting ES6 or higher.
Preserve newlines between object literal members.
Update tests.
CR feedback.
Adding test
Add tests for tagged templates
Sort navigate to items by name, after sorting by kind.
Preserve newlines and indentation for binary expressions when possible.
Include the binary expression's operator in the AST.
Extracted out RHS patching property logic to function.
Addressed CR comments.
Make IterableIterator deeply iterable
This is why we need an IO type constructor.
Address code review feedback.
Removed unused text-concatenating emit.
Rewrite the tree instead of hacking text together for downlevel object literals with computed properties.
CR feedback.
More tests
Formatting around 'of' keyword
CR feedback.
Add a PatternMatcher API (similar to the one in Roslyn) for more advanced matching with features like NavigateTo.
added regression test for formatting multiline template literals
Add a test
Don't emit accessors multiple times.
Accept baselines
Make LastToken point to OfKeyword
CR feedback to use template strings.
Code review
Split Iterator into Iterator and IterableIterator in es6.d.ts
Add support for limiting the number of NavigateTo results that you get back.
Increase RWC timeout
Made the initial object literal properties indented.
Wrap all commands in exec()
Style fixes.
If there's a callback, make it its responsibility to call complete()
Perfsys no longer used
Tabs to spaces.
Split completions req/response pair into two messages "completions" and "completionEntryDetails".   This mirrors the function of the LS API and increases performance of completion in large projects.
Address feedback
Created a combined 'createAndRecordTempVariable' function.
Addressed CR feedback.
Temporarily disallow for-of statements
Disallow type annotation on a for-of variable
Disallow initializers in for-in and for-of loops
More resilient error recovery when declaration in for-of is empty
Fork grammar message into two messages
Accept baselines for added tests
Add tests for for-of
Parity sweep for for-in & for-of
Accept API baseline changes
added ForOfStatement to forEachChild
initial version of parsing 'for-of'
Removed deleteLen from change request; added endLine, endCol that mark the end of the deleted Range (inclusive).  DeleteLen was not always accurate because editors normalize \r\n to \n in some cases, affecting the length of ranges.  In Diagnostic response items, changed len field to end to address the same range length issue.  Flattened MessageDiagnosticChains in diagnostic message text, since clients expect string there.  Renamed ts.server.protocol to simply protocol in session.ts and client.ts since module name prefix is clear.
added tests, accepted baselines
added missing files
accepted baselines
merge with master
accepted baselines
Adding getCanonicalFileName to ensure case-sensitive systems do not have issues
Dts for export * from "mod" and export { a, b as c,...} [from "mod"]
Change rename response to return the rename info + nested location information: one array of location information per file.  Add interface definition for rename response body.
Removed file mapping compression technique due to brittleness of approach.  As necessary, will substitute grouping or paging approaches.
Remove 'ZeroBased' from all APIs, now that all APIs are zero based.
Remove the one based APIs.
Move typewriter over to using zero based math.
Use the zero based methods in the harness.
Move formating over to zero based math.
Use zero based math in hte services layer.
Stop using one based math in fourslash.
Remove usages of computeOneBasedLineAndCharacterOfPosition
Simplify helper function.
Move the smart indenter over to zero based math.
Make code more clearly state that it is one based.
Remove one-based helper function.
Move the emitter over to using zero based indexing.
Address feedback
Move the emitter over to use zero based indexing.
name more line/char functions more clearly.  Use zero based indexing in breakpoints.
Make method more clearly indicate that it is one based.
Expose zero-based helpers that code will be able to call.
Update baselines.
Rename our one-based methods to more clearly indicate that that's what base they use.
Made the actual implementation of the lexical classifier be non-optional.
Rebaseline after merge
explicitly initialize let binding in generated code to default value
Accept baselines
Move 4000-coded type check errors to 2000s where they belong
Make 'syntacticClassifierAbsent' non-optional.
Accept APISamples baselines
Update tests
Error for naming an interface 'symbol'
Remove unused code and only expose needed types/classes
remove unused cancellationToken class
Comment formatting
Change ServerProtocol module to ts.server.protocol
Remove unused code
rename output file to tsserver.js
renmae protodef.d.ts to protocol.d.ts and protocol.ts to session.ts
Include globals in check for existing identifiers
show error if block scoped variable declared in the loop is captured in closure
Remove debugging statemetns
Add test for completionEntryDetails
use EncodedFile everywhere in responses
Make method names inline with matching LS function names
Add navbar test
Accepting new baselines
Support for 'export *' declarations
Add test for rename
Add test for quickInfo
Add test for find references
Add a new definition test
Add test for completions
Move fileWatching logic to the server to allow for testing on non-node systems
Get details for member completions as well as completions matching prefix
use ts.getDefaultLibFileName to get the default library file name
drop locals in block-scope container nodes during binding
Always default to using JSON and do not format it
Recover from git corruption
try only names generated in current scope with testing if name is unique
initial revision of downlevel compilation for let/const bindings
Re-exported symbols should not be in scope
Added baselines.
pass missing argument to error message
adjust error message text based on PR feedback
Addressed CR feedback.
switch to using host.getDefaultLibFileName(options)
Accepting new baselines
Static checking for export declarations
Allow multiple (renaming) exports for same entity
addressed PR feedback
Emit parens for tag of tagged template if necessary
Added script to easily enable VS dev mode
Accepting new baselines
Support for ES6 export declarations (except export default and export *)
Address feedback
Don't check invariants when running RWC tests. It adds too much running time.
Added API baseline changes.
update comment text
added check that var and let\const cannot share scope, added check that var is not shadowed by the let\const from the inner scope
Add test for goto def
Added comment for 'syntacticClassifierAbsent'.
Added tests, fixed order of emptying templateStack, unconditionally perform template classification.
classifyKeywordsInGenerics -> syntacticClassifierAbsent
Addressed CR feedback.
Rudimentary, but imperfect, lexical classification for templates.
Add test for format on key
Support brace matching
Test cases to verify the privacy error reporting is done on correct node
Declaration emit fixes for binding pattern in variable statements Handles #2023
Use commmandNames module
Wire navto tests
Supportt abbreviation
Remove redundant type definitions
Simplify host logic in client
Update LKG
accept baseline changes
wire package.json command for the server
Add type annotations
Add fomratting tests
Wire tests to use the new server
Wire the build for the server code
Initial checkin for server code
Add indexer on the Formatting options interface
Add support for stat and modified time on sys
Accepting new baselines
Small fix to recording of generated names
Addressing CR feedback
improved equality checks in AMD module sorting function
Baseline accept after merging
Set the declarations of export assignment visible on demand through dts emit Emit those new declarations asynchronously since they are otherwise not visible
Add test cases for dts generation without export tag
Test cases for export import syntax
Test case for emitting partial part of import syntax
Enable test cases when import binding is used in export assignment directly or indirectly
Emit the import declaration in d.ts file only if it is visible
Address feedback from @yuit
Declaration for default bindings of the import syntax
Declaration emit for NamedImport syntax
Accepting new baselines
Rewrite named imports to reference properties on module instance
Enable declaration emit for import * as ns from "mod" syntax
Enable declaration emit for import "mod" syntax
disallow let to be used as name in let\const in ES6
moved AMD module sorting to emitter, updated test case
Classify newlines as whitespace in the classifier.
Add assert that clients do not try to call updateSourceFile multiple times on a source file.
Prevent index out of bounds exception.
Be more conservative about reusing parameters.
Remove code duplication in isModuleElement.
Add additional asserts, and make code more unified.
Add additional asserts.
Don't use dynamic type checks while incrementally parsing.
Replace endsWith() with isDefaultLib()
Accepting new baselines
Remove hostCache.getChangeRange
Remove getCurrentSourceFile and use syntaxTreeCache.getCurrentSourceFile instead
consolidate the use of normalizeSlashes in lookup helpers
Remove host cache uses in syntactic features
Check that default import references a default export symbol
Respond to code review comments
previous AMD ordering was not correct
Added AMD dependency reordering, so import order matches with provided names
Add additional incremental assert.
Rename a few members and clean up comments.
Check the text change range before and after we expand it.
Accepting new baselines
Checking of ES6 import declarations
Move assertions into the parsing layer.
Make sure positions of child elements are consistent.
Add additional aggressive checks during incremental parsing.
Formatting fixes
Accepting new baselines
AMD emit for ES6 import declarations
Accepting new baselines
CommonJS emit for ES6 import declarations
Update baselines
Accept baselines after rebase
Uncomment symbol properties in es6.d.ts
Disable symbol indexer
Navigation bar support for symbols
Declaration emit for symbol properties
Check that Symbol properties are proper, and support downlevel type checking
Refactor part of getPropertyNameForIndexedAccess into checkSymbolNameIsProperSymbolReference
Support indexing with known symbols
symbols in type guards
Make Symbol the apparent type of symbol
Add test for new Symbol()
Don't pass prop.name directly for error reporting
Change Symbol to symbol in error messages
Rename references in es6.d.ts from Symbol to symbol
Change isTypeOfKind calls to pass symbol TypeFlag when needed
Update tests to use new symbol keyword
Add symbol keyword
Accept correct baselines for symbol property tests
Add tests for symbol properties
Add tests for operators with symbol operand
Change certain hasDynamicName checks to check the SyntaxKind instead
Create global Symbol type
Change computed property error message to mention Symbols
Add named property symbol for known Symbol properties
Update hasDynamicName to take well known symbols into account
Move hasDynamicName to utilities.ts
Syntactically allow computed properties everywhere if the name looks like a built in Symbol
Change computed property error messages to be about symbols
Allow Symbol indexer in ES6
Preserve newlines appropriately between elements of an object literal or array literal when emitting.
Emit functions on a singline line if they were originally written on a single line.
Provide specialized functions for emitting the body of a function depending on if that body is an expression or a block.
Update test baseline.
Preserve single line blocks when emitting.
Have better error recovery for whne a user uses semicolons instead of commas to delimit an object literal.
Update LKG
Allow commas as a separator between object/interface type members.
Check source file invariants after creating/updating them in our tests.
Correctly set position of import declaration nodes
Always bind children of import clause
add comment
Shim API changes to enable existing installations of VS to use the latest master builds
Cleaning up a few things
Resolve missed merge conflict
Addressing CR feedback
Resolve ES6 imports in type checker
Support ES6 imports in binder
Process ES6 imports when creating program
Adding new import nodes to forEachChild
Remove "debugger;" calls.
Remove getEnumMemberValue, it is now subsumed into getConstantValue.
Extract common function.
CR feedback.
Put curly on the right line.
addressing CR comments
Simplify the API for emitting and reporting exit statuses to callers.
All options should be optional
Move code for emitting above helper functions.
Emit both javascript and declarations in the presence of errors (*unless* -noEmitOnError is specified).
Add newline before closing paren in multiline object literals.
Remove unnecessary diagnostics split on SourceFile.
Disallow rename for elements that are defined in the standard TypeScript library.
Remove what looks like copy/paste errors in the parser.
updated code style, added tests, fixed regex bug, merged to latest branch
Simplify code for getting diagnostics in the Program.
Change the API for getting diagnostics so that all calls go through a Program instance.
Remove dependency from the typechecker to the compiler host.
Simplify the code for actually compiling within tsc.
rename type
Track performance statistics in the ts module.
Emit computed properties in ES3/ES5 properly.
Use a diagnostics collection inside the program instance.
Update comment.
Remove 'isEmitBlocked' from the program API.
Simplify the createProgram API.
Simplify the API for emitting code from the Program instance.
Added templates, assignement and arrays + tests.
Do not publicly expose a way on a Program instance to get typecheckers with differing behavior.
Adding tests
Add new tests for shims
Stop erroring on computed properties for ES3/ES5 emit.
Hide the diagnostic producing methods from TypeChecker.
Add builder support for variable declarations + test cases.
Support spread operator in call expressions
Rename semanticDiagnostics to bindDiagnotics.
Make more diagnostic features internal so they're not exposed in our DTS.
Introduce an object to store and manage diagnostics for different compiler components.
remove new line
Remove the implementation of TypeScriptLS
Add 'jake tsc' to only build the compiler for quick testing.
Parameter destructuring + tests
Added ES5 tests for computed properties.
Update fourslash tests to use the new adaptors
Move unit tests to use the new adaptors
Add new Adaptor layer on top of Harness Language Service
Rename the isBuilder property to something more meaningful.
Explicitly specify ES6 target in computed property test file names.
Update API baselines
Make more sourcefile data internal.
Update API sample tests.
Support for destructuring + test case.
Remove certain lazyily initialized fields from the public DTS.
Address code review
Provide an experimental flag that allows us to emit declarations except for nodes marked with '@internal'.
Move the code to actually emit higher up in the function.
Add reference to base runner
Add missing definition to shims
Added comments and some additional cases
updated tests
merge with master
[format on keystroke]added comment to the verification of preceding token
ensure that autoformat is triggered by token characters
Add a new scriptSnapshot and use the shim as a wrapper
Remove unused NonCachingDocumentRegistry
Change the default LS target to ES5 from ES6
Rename function.
Baseline updates now that we emit in the presence of parse errors.
Emit even in the presence of parse errors.
Baseline updates now that we no longer have early errors.
Remove the concept of early errors from the compiler.
accept updated baseline reference following addition of test for const enum comment suppression
declare variable type inenum test
Address pull request
Adding more tests
Updating array literals with spread elements
Rename the main node package filename to match the package name
Updating grammar appendix
Language Specification update
Amend baselines.
Ensure that all LS requests are to an exiting soruceFile, and if we fail throw an exception
fix crash in getReturnTypeFromFunctionBody if function declaration is incomplete and does not have body
Remove tabs in json
Address code review
Update an error
Update LKG.
Adding test
Addressing CR feedback
Address codereview
New Import declaration syntax makes the source file external module
Change the name of defaultBinding to name and make ImportClause as Declaration This helps binder to use it directly to bind the default binding
Do not create Name of the importSpecifier if it isnt identifier, to avoid creating missing symbols Missing symbols are defined when the declaration doesnt have name, so if we created node for missing identifier it would end up binding symbol with name (Missing)
Address code review
Tabs to spaces in package.json.
Bump version to 1.5.
Update path to test262 and rwc tests files in the runners
Supress const enum member value comment from emitted javascript in presence of --removeComments (revised)
Accepting new baselines
Clean up the checking of position
Rename ImportStatement to ImportDeclaration
Remove flag and compare position
test case for TS generated comments const enum to show that they are supressed by removeComments flag
Address CR feedback
More test cases for incorrect named modules specification
Supress const enum member value comment from emitted javascript in presence of --removeComments
Deeper type inference in context sensitive arguments
Tests for more combination of import specifier list
Some refactoring of how import specifiers are parsed as per code review feedback
Code review feedback
Correctly copy assumptions back into the relational cache
Rename bindings to namedBindings in ImportClause
Update test failing by previous commit
Update gitignore to ignore internal test folders
Add API sample tests
Shorten library to lib in getDefaultLibFilePath for consistency
Change tab to space
Address code review
Update ServicesVersion
Address code review
Add testcases
Address the issue that arrow function doesn't have arguments objects
Add documentation to DocumentRegistry
Remove unused IScriptSnapshot.getLineStartPositions
make documentRegistry optional argument to createLanguageService
Expose underlying program from the LS
Allow the LS API to resolve referenced files
Added Jason's example for contextually typing parameters.
remove unused file
CR feedback .
Parsing for default binding import syntax
Parsing for NamedImports
Parsing for import * as ImportedBinding
Parse import ModuleSpecifier;
Types for the new es6 style import statement parsing
Removed superfluous type assertion.
Perform checking, document function.
Added more tests.
Rename existing import declaration to ImportEqualsDeclaration
Update tests baseline from merging with master
Addressed Jason's pedantic correction over the wording of a comment.
Updated comments and formatting as per review feedback.
Address code review; preserve users non-parenthesis
Contextually type parameters in super calls using type arguments on the base class.
Use transient symbols when computing the indexers for object literals
Addressing CR feedback
Respond to code review comments
Addressing CR feedback
Addressing CR feedback
Modifying test
Allow union types containing primtives as first argument in instanceof
Adding tests
Correct support for type guards with unions containing enums
more changes based on CR feedback
Accepting new baselines
Improved subtype compatibility for types of object literals
add binding elements from variable declaration into script lexical structure
Update baseline and fix white space
Update emitter due to merge with master
handle binding patterns correctly when getting script lexical structure
Update type checking for lexical binding due to merge with master
fixed typo in test name
add 'find all references' test
make sure that enum values are computed before the emit
Rename emitParenthesized to emitParenthesizedIf
Respond to CR
Address CR feedback
use nameTable - services layer storage of identifiers in the file
handle union properties in when doing getOccurences\findAllReferences
Emit comments in a lot more places.
Adding more tests
Adding regression test
Add missing optional properties only when not inferentially typing
Simplify enum emit.
Clean up after code review, white space etc.
White space fixes
resolve merge conflicts
moved all methods of SourceFile to the part exposed on the services layer
Accepting new baselines
Include missing optional properties in contextually typed object literal
Builder implementation for properties and parameters inlcuding tests.
Make isNumericComputedName call checkComputedPropertyName
Use isTypeOfKind in computed property checks
Removing unused variable
Modifying and adding tests
Consistent handling of string-like and number-like values in expressions
Type alias declaration is type only declaration and doesnt make module instantiated Handles #1724
Missed a file
Update the assert for valid line number when getting character position
Skip computed properties on declaration emit
Move subroutine function to the bottom of checkIndexConstraints
Check computed properties against indexers in classes
Adding src/compiler/tsconfig.json and src/services/tsconfig.json
test cases for builder in constructor
Builder in constructor aruguments + tests.
Simplified cache logic + better error message when JSON not supported
drop trailing trivia prior to rescanning it
Elaborate relational errors at least once when reporting them
Delete old modules completion list test.
fixed smart indentation\formatting in template literals
Remove old commit
Support for builder in modules + tests
Address code review
fixing error in last checkin
revert serviceVersion change as the API is still compatible
update unit test contents
Ignore symbolic links when enumerating directories
Address CR feedback; refactor out tsc invocation
Update servicesVersion
Disallow computed properties referencing type parameters from containing type
First try at getting logic in for showing the builder.
Clean up
Fourslash support for the  builder property on completion lists.
Adding comments and a missing undefined check
Disallow super and fix this capturing for computed properties
Consolidate getSuperContainer
Disallow this in computed properties in classes
Adjust error numbers
Indexers in object literals include computed property types
Contextual typing for computed properties
Remove some unnecessary TODOs
Add tests for classes, methods, accessors with computed properties
Update baselines
Move computed property checks so that they will be checked in classes and interfaces
Add tests for object literals with computed properties
Add type checking for computed properties in object literals
Create symbols for computed properties
Switch checkObjectLiteral to iterate over element declarations
Enable computed properties
Automatic bisecting script
Modifying logic to watch files at all times in -watch mode
Allow union types in indexing expressions.
Re-add debug assert & fix indent
Change tagged template emit to new style
Remove statement from binder
Remove binding of tagged templates
Remove properties from types.ts
Expose optional getNewLine for language service hosts
Watch for changes to tsconfig.json in -watch mode
Gracefully handel getChangeRange in Scriptsnapshot.fromString
Remove isOpen from souceFile and LanugageServiceHost interfaces
addressed CR feedback: renamed update to updateSourceFile
moved update function out of SourceFile
Change sys to ts.sys in instrumenter
move getSyntacticDiagnostics out of SourceFile
move line map related function out of SourceFile
Adding reference to core.ts in sys.ts
Accepting baselines for corrected error messages
Default to all files only when none are specified in tsconfig.json
Address code review
'may not' -> 'cannot'
Adding missing @module to several fourslash tests
Hardening compiler to accept empty CompilerOptions object
Support for tsconfig.json files in command-line compiler
Address code review
Disallow optional destructured parameters in implementation signatures.
Inline the return of createCompilerHost
Remove getDefaultLibFilename from the LS host interface as its result is never honored by the LS.
Make logger methods optional on the language service host
Added tests.
Pass information of rwc's currentDirectory to the compiler host in the Harness
Disallow binding patterns in parameter properties.
Renamed tests.
Add getDefaultLibraryFilePath to retrive the default lib file path for node package consumers
Removed services/compiler/emitter.ts This one is replaced by src/compiler/emitter.ts
Removed services/compiler/optionsParser.ts Code is also defined here:  src\compiler\tsc.ts
Remove now unused diagnostics keys
compiler\tsc.ts isn't used DiagnosticCode.Specify_module_code_generation_0_or_1 doesn't even exist and it doesn't understand es6
Remove src\services\compiler\diagnostics.ts It contains the Logger interface but src\services\services.ts is the one which is used (also has more methods)
do not apply format on enter for the first line
Add test case for completionlist when adding properties to a class.
Minor changes.
Updated parser lookahead for modifiers to anticipate object literals.
Added tests.
save token when scanning binary\octal literals
when formatting lists check if end list token still belongs to the parent node
remove unnecessary call sourceFile.getSourceFile()
Update LKG
Manual port of fixe for #1593 from release-1.4
Improved handing of union types in type guards
Remove unused timer.ts file
addressed CR feedback
disallow incorrect literal property names in indexed access for const enums
more cr feedback: rename undefined flags param to None
Address code review comments from @JsonFreeman
Added commandLineParser.ts to the generated node module, and added the type information for commandLineParser.ts to typescript_internal.d.ts.
Show --noImplicitAny as an option to throw errors, not warnings
Removed probably-unnecessary statement from test.
Add testcases
Contextually type parenthesized expressions.
This fixes #1505 by not showing completionlist when defining a property.
Clarified comment in test.
Emit var in front of statement with tagged template
infrastructure for builder item in completion list
Adding comment
Renaming helpers and cleaning up logic
Optimizing forEachChild function to not create closures
Added tests for contextual typing on parenthesized expressions, added case for tagged templates.
Type guard narrows type any in a primitive type check
changed logic based on CR feedback to not get fully qualified for typeparemeters even if typeformatflag is present
Moved EmitHost to utilities.ts
Emit this binding natively in es6
Emit Arrow function natively in ES6
Add default target in compiler option of project runner
consider type parameters always visible
Update tests and baselines.
Don't emit an empty template head literal if there's a template span with a non-empty literal.
Update tests and baselines.
Give MinusToken the same precedence as PlusToken for template expressions.
Remove unnecessary it block in generated .d.ts compilation in harness
Use getSourceFile instead of getSourceFiles in compileDeclarationFiles
Add tests covering emitting rest parameters natively in ES6
Add tests covering emitting default parameters natively in ES6
Move code to separate functions
added parameter names to 'copymap' call site
Emit parens when an argument is a comma operator
made some changes based cr feedback
Emit tagged templates when targeting ES3 or 5
Remove tagged templates error when targeting ES3 or 5
extract map copying logic to a separate function
rewrote the fix to use a new type format flag and fixed the baselines I broke
Also add travis.yml to npmignore file
Add scripts to .npmignore
removed errant text
remove commented out code
updating baseines
added baselines for new test case
fixed checker and added a test case
CR feedback.
Enable incremental parsing by default.
Put specialized signatures at the top of the list of call candidates
Removed newline.
Moved EmitHost to types.ts so that utilities can be edited as a standalone file through dependency resolution.
Undid comment change that made things more misleading.
Update conflict marker formatting test.  We now no longer format the second branch of hte merge.
Remove unused constants.
Classify the '=' sign in variable/parameter/property as if it was an operator.
Provide better error recovery when we encounter merge markers in the source.
Add test demonstrating the problem with conflict markers.
Added tests/baselines.
Remove unnecessary capture of the diagnostics type checker.
Added test, modified test, updated baselines.
Only error on non-ambient instantiated modules preceding clodules.
Added test from original issue.
Added test for goToDef on union types.
Use 'definitionCountIs' in union property tests.
Rename file.
Added test using code from original issue.
Added goToDef count verification in fourslash facilities.
Normalize a few fourslash line endings.
Made 'location' non-optional in 'getSymbolKind'.
Moved helpers to bottom of 'getDefinitionAtPosition'.
Add module emit test
Disable incremental by default before merging into master.
CR feedback.
Accepting new baselines
Update LKG
Update LKG.
Remove 'grammarDiagnostics' from SourceFile.
Update LKG
Don't allow -noEmit with -declaration
Don't allow -noEmit with -out or -outDir
Don't emit outputs when -noEmit is specified.
Add -noEmit compiler flag.
Remove last vestiges of the grammar checker from the parser now that it has been entirely moved to the TypeChecker.
Address code review
Address code review
COMPLETE migrating grammar checking; No more errors
Cleaning up migrating grammar checking
Provide a stronger type for the parent of a variable declaration.
Rename method to be clearer.
Change TextChangeRange to be a record type as well.
Change 'TextSpan' to be a simple record type with free floating functions.
Complete grammar checking migration; there are still errors which will be fixed once pull master into the branch
Use constant in another place.
Add explanatory comments.
Rename method to be clearer, and add comments to explain the semantics.
CR feedback.
CR feedback.
CR feedback.
Sort diagnostics in our baseline output.
Adding comment
Remove obsolete comment.
Fail the surrounding Jake task if exec'd tool has non-zero exit code.
Don't expose EmitHost.  it is only used by a non-exposed function.
Clean things up so the services layer can easily emit without having to contort compiler hosts.
Remove the dependency that TypeChecker and Emitter have on Program.
Make the emitter no longer depend on the Program.
Move grammar checking: interfaceDeclaration-remove it from checkModifiers in parser; there are still errors from incomplete grammar migration
Move grammar checking: propertyDeclaration, propertySignature; there are still errors from incomplete grammar migration
Move grammar checking: moduleDeclaration; there are still errors from incomplete grammar migration
Rename typechecker parameter related to whether or not we produce diagnostics.
Layer the compiler so that every layer only depends on hte layers below it.
Move grammar checking: methodDeclaration; there are still erros from incomplete grammar migration
Add internal definitions to a diffrent .d.ts files
Move grammar checking: setAccessor, getAccessor; there are still erros from incomplete grammar migration
Adding incremental test.
Change the order of switch statements instead of converting to if-else
Add helper method to reduce so many double negatives in the code.
Don't check container invariants.  They don't hold true in incremental scenarios.
Reduce unnecessary arrow function allocations.
Don't store variable statement flags on its variable declaration children.
harden 'get import declaration' logic
Move grammar checking: functionDeclaration; there are still errors from incomplet grammar migration
Update LKG
Do not pass context flags downward while parsing binding elements.
Add internal definitions to a diffrent .d.ts files
Change check cadence.
Move grammar checking: forStatement
Move grammar checking: forInStatement; there are still errors from incomplete migration
Move grammar checking: variableDeclaration, variableStatements; there are still erros from incomplete grammar migration
Do not use the file name in errors unless it exists
Address code review
Address code review
Changed tests to error when actual contextual typing is broken.
Address code review
Move grammar checking: constructorDeclaration; there are still errors from incomplete grammar migration
Added tests for erroneous function expressions in both tagged/untagged template expressions.
Split contextual typing test for substitution expressions into two tests.
Move grammar checking: enumDeclaration; there are still erros from incomplete grammar migration
Addressing CR feedback + Run fourslash tests with ES5 emit
Move grammar checking: breakStatement, continueStatement; there are still errors from incomplete grammar migration
Separated fourslash test to two files.
Move grammar checking: declare keyword in checkGrammarModifier; there are still erros from incomplete grammar migration
Address code review
Simplify how we set container.nextContainer now that we don't double recurse.
Address code review
Removed unnecessary case; substitution expressions only occur in TemplateSpans.
Simplify the binder so it does not need to double recurse down constructor parameter nodes.
Move grammar checking: yieldExpression; there are still error from incomplete grammar migration.
Move grammar checking: wihtStatement; there are still errors from incomplete grammar migration
Movev grammar checking: typeReference; there are still errors from incomplet grammar migration
Up timeout to 20 seconds.
Update timeout to 6 seconds.
Formatting.
Move grammar check: throwStatement; there are still errors from incomplete grammar migration
Check tree invariants during fourslash tests.
Move grammar checking: taggedTemplateExpression
Move grammar checking: switchStatement; there are still errors from incomplete grammar migration
Move grammar checking: shorthandPropertyAssignment; Add more parser test; there are still errors from incomplete migration
Move grammar checking: returnStatement; there are still error from incomplet grammar migration
Enable incremental parsing by default.
Add incremental parsing LS test.
Remove calls to "debugger;" in our fourslash tests.
Ensure the 'hasParseErrors' bit is the same between trees.
Always run all fourslash tests in high fidelity typing mode.
Move grammar checking: prefixUnaryExpression; There are still error from incomplete migration
Check post edit invariants after every edit.
Don't convert the tree to JSON before checking it.  Just check it directly.
Move grammar checking: postfixUnaryExpression
Move test helpers into the harness Utils module.
Accepting new baselines.
Support -target ES6 emit for destructuring, spread, and rest.
Move grammar checking: parameter; there are still errors from incomplete grammar migration
Move garmmar checking: numericLiteral; there are still error from incomplete migration
Move grammar checking: objectLiteralExpression; there are still error from incomplete grammar migration
Switch parsePrimaryExpression to if-else style
Move grammar checking: propertyAssignment; there are still errors from incomplete grammar migration
Move grammar checking: labelStatement
Preserve const enums in typeScriptServices.js
Move grammar check: InterfaceDeclaration, HeritageClause
Make utility mehtod names clearer.
Address code review; check class heritage clause into its own function
Move grammar checking: functionExpression
Adding new tests
Simplify 262 baselines.
Update LKG.
Move grammar checking: externalModuleReferences; there are still errors from incomplete grammar checking migration
Avoid lookahead when parsing a statement.
Move grammar checking: exportAssignment; there are still errors from incomplete grammar migration
In Fourslash: Compare ASTs for files produced incrementally versus files produced with a full parse.
Move type checking: elementAccessExpression; there are still errors from not moving other grammar checking into type checker
Rename some locals.
Move grammar check: deleteExpression
Don't emit error flags in the 262 baselines unless the node actually had an error.
Resurrect the post edit invariants checking for fourslash.
defer decision whether import used on the right side of import declaration should be considered referenced
Properly emit 'void 0' when emitting destructuring assignments.
Adding tests and accepting new baselines
Implied type of binding pattern with rest element is always an array type
Don't quote the word 'generators' in error messages
Disable computed properties in TypeScript 1.4
Address code review
do not indent leading comments that attached to tokens with errors
added test for inherited indentation
conditionals are now introduce indentation scope
Actually fail the surrounding jake task on errors in compileFile()
Correct type for rest element in destructuring declaration
Parse function and variable declarations uniformly, whether they're at teh top level, or inside a method.
Change the error-bit to be a node-flag and not a parser context flag.
Don't consume nodes during calls to isListElement.
Update the source file positions as well.
Properly adjust nodes while walking down the tree.
Provide a way for tests to try out incremental parsing.
Move functions from 'types.ts' to 'utilities.ts'.
Add assert.
Add the syntax cursor.  We will use this to retrieve nodes from the previous source tree.
Move grammar checking : computedPropertyName; there is still error from grammar check on ambient context and generator
Just temporarily removing the tests until we can get back into a good state.
Add explanatory comments to explain how node moving works.
Don't incrementally parse when teh old tree had no source module elements.
Rest element support in array destructuring declarations
Nodes are not resuable if the parser has a outstanding, unattached, parse error.
remove trailing comma
For 262 tests, emit a bit in the baseline stating if the node had an error or not.
remove trailing comma
Rest element support in array literal destructuring assignment
CR feedback.
Don't quote the word 'generators' in error messages
respond to code review commments
Respond to code review comments
Remove compiletionSettings handeling from shims
Adding classification test.
Make the compiler resilient to encountering merge conflict markers in a source code file.
Disable computed properties in TypeScript 1.4
Re-add baselines.
Remove baselines.
Move grammar checking: classDeclaration; there are still errors from checking declare keyword and grammar checking of moduleDeclaration
Check and emit of spread elements in array literals
Move checkGrammarCatchClause into checkTryStatement
Address code review
Move grammar checking: catchCaluse
Remove TryBlock and FinallyBlock.
Move grammar checking: bindingElement
Responded to CR feedback.
Moved createCompilerHost into parser.ts
Move grammar checking: binaryExpression
Address code review: move checkGrammarAnySignature into checkSignatureDeclaration
Add tests for public declarations
Moved non-exposed functions to utilities; fix up emitted .d.ts in Jakefile.
Explicit default target for fourslash tests in the harness.
Remove unused parameter to getCompletionsAtPosition
Make getLocalizedDiagnosticMessages and getCancellationToken optional
move OutliningSpan definitions to services to ensure it is visible in definitions file
Removed tokenSpan.ts.
move formatting.ts and smartIndernter.ts into formatting folder to match thier namespace
remove unused file
Move Map to types to ensure it is visible in definition files
use ts.System for tests
move text defintions to services.ts
Put 'sys' into the 'ts' module.
Use __filename for 'getExecutingFilePath'.
Allow typescript to be importable in node.
Address code review: move checkGrammarAnySignature into checkSignatureDeclaration
Move grammar checking: callExpression, newExpression
Move grammar checking: callExpression, newExpression
Address code review
Unify accessor declaration parsing.
Add additional incremental tests.
Support modifiers on object literal methods and accessors, and question tokens on object literal methods.
added test for inherited indentation
Move grammar checking: Arrow function
Move grammar checking: Arrow function
Support modifiers on index signatures in an object type.
Address code review
More incremental parser tests.
Incremental parser tests should verify the same set of diagnostics are produced.
Understand and handle modifiers on function declarations and variable statements within blocks.
Move grammar checking: callSignature, constructorType, ConstructSignature, FunctionType, IndexSignature
Add isEarly flag into error from grammar checking
Rename method.
Respond to code review commments
Initial stubs for the incremental parser logic.
respond to code review commments
Responded to CR feedback.
Moved createCompilerHost into parser.ts
Sweep and mark nodes before going and performing incremental parsing.
Add tests for public declarations
Moved non-exposed functions to utilities; fix up emitted .d.ts in Jakefile.
When updating the text for a source file, extrend the changed range.
Make initial inferences from parameterless function expressions (#1186)
Addres code review
add missing property to harnessLS
addressed CR feedback: rename getApiVersion to getServicesVersion
removed dummy parameter from getApiVersion method
added getApiVersion method to TypeScriptServicesFactory
do not indent leading comments that attached to tokens with errors
Explicit default target for fourslash tests in the harness.
Remove unused parameter to getCompletionsAtPosition
Make getLocalizedDiagnosticMessages and getCancellationToken optional
add missing property to harnessLS
move OutliningSpan definitions to services to ensure it is visible in definitions file
Removed tokenSpan.ts.
Addressing CR feedback
move formatting.ts and smartIndernter.ts into formatting folder to match thier namespace
remove unused file
Move Map to types to ensure it is visible in definition files
Adding test case
use ts.System for tests
Type guards do no affect values of type any
move text defintions to services.ts
Put 'sys' into the 'ts' module.
Use __filename for 'getExecutingFilePath'.
Allow typescript to be importable in node.
Move textSpan and textChangeRange impls to the compiler layer.
Addressing CR feedback
conditionals are now introduce indentation scope
Move TextSpan into the compiler layer.
Don't call into the incremental parser for now.
Respond to code review comments
Move grammar checking: tuple type
Respond to code review comments
Update comment.
Initial entrypoint in SourceFile for the LS to call to peform incremental parsing.
Address code review for moving grammar check of typeParameter
Adding test case
Type guards do no affect values of type any
Only set parents for parse trees in the LS for the syntactic trees.
Remove compiletionSettings handeling from shims
Parsing of spread element expressions
Use chai asserts.
Add incremental test.
Add incremental test.
Add incremental test.
Address code review for moving grammar check of typeParameter
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Move grammar checking: type parameters
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Add incremental test.
Move grammar checking: type parameters
Add incremental test.
Remove unnecessary switch case.
Initial test harness for incremental parser tests.
Move grammar checking: type parameters
Remove 'isOpen' and 'version' from teh compiler's SourceFile type.
Commandline definitions use a property "paramType" to specify the name of thier type e.g. File, Version, etc.., that was changed in the defintion to paramName, without changing the use site, changing it back to paramType.
Add new compiler flag to suppress noImplicitAny errors for object access
inherit delta from nodes on the same line
inherit delta from nodes on the same line
Remove unused type.
Put the actual parsing logic at the top of createSourceFile instead of the bottom.
Prevent json recursion overflow in 262 tests.
Update version to 1.4
Also split out .PropertyDeclaration and .PropertySignature from .Property.
Remove the 'Method' syntaxkind and introduce MethodSignature and MethodDeclaration instead.
Update and add test cases
merge
Update and add test cases
Better error recovery when encountering an errant comma in a semicolon delimited list.
fix formatting to add space after comma between arguments when arguments starts with open paren
Add tree invariant checking to the test262 runner.
Improve test 262 baselines.
Add new method on interface Boolean to ensure it is not assignable from other types
addressed CR feedback: rename getApiVersion to getServicesVersion
removed dummy parameter from getApiVersion method
added getApiVersion method to TypeScriptServicesFactory
add error\trace message that should be exposed by the host
Addressing a bit more CR feedback
Addressing CR feedback: New SyntaxKind.BindingElement Introduced new VariableLikeDeclaration and BindingElement types Cleaned up VariableDeclaration, ParameterDeclaration, PropertyDeclaration types Node kind of binding element is always SyntaxKind.BindingElement Changed CheckVariableDeclaration to CheckVariableLikeDeclaration Reorganized CheckVariableLikeDeclaration
Removed property access
Check if the symbol exists before checking its visibility.
Move code responsible for determining node resuability (in incremental scenarios) to a single location.
add classification for type aliases
fetch actual parameter name of indexer when printing literal type
Move over all changes from my private branch.
Remove setting of parents in the factory.
Remove restriction that you cannot reuse nodes/tokens during incremental parsing while doing speculatively operations.
Rename _skippedTokens to skippedTokens.
Simplify parser API.
Move syntax cursor into its own file.
Missing reference for getModuleInstanceState()
Use callbacks for speculative parsing.
Accepting new baselines
Addressing CR feedback
"let" should only be considered a keyword in strict mode, or when it starts an actual construct Handles #1301

Don't return the last falsy value when forEach'ing over an array.
Don't return the last falsy element in forEachChild.
Some renaming and added comments as per feedback
CR feedback.
drop redundant initialization code
Code Review
Provide utility function to report back if a node contained a parse error anywhere inside of it.
Track if the parser encountered any errors as a bit in the next node that is produced.
Inline method.
Add invariant assert in the parser.
Remove function expression allocation when speculatively parsing or looking ahead.
Improve the flexibility of speculative parsing.
Simplify scanner by removing need for a 'onComment' callback.
more baselines.  revert unintentional change to harness.ts.
Add more coverage tests.
Add grammar walker test coverage cases.
Improve naming of checker methods.
Improve names for functions in the checker.
More CR feedback.
CR feedback.
Added tests.
parenetName -> parentName
Normalized line endings for test.
Add test cases for external module reference of the alias
Remove BOM from es6.d.ts
Print out methods in the types of object literals as if they were methods, not function typed properties.
Emit FunctionPropertyAssignments in their native form when emitting in ES6 mode.
Remove baseline-hacks from the typewriter.
Don't rewrite function property assignments in the AST.
Remove the 'FunctionBlock' ast kind.
Update the name of 'PropertyAssignment' to 'LonghandPropertyAssignment'.
Handel unsuported modiefiers in getModifierOccurrences
Simplify arrow function expression parsing.
Update test262 runner to serialize flags
Adding rudimentary tests
Add a dedicated 'EndOfFile' token to a SourceFile.
Removing fourslash test that no longer applies
Support exported destructuring variable declarations Support .d.ts generation for functions with destructuring parameters
Added comment.
fix crash in signature help
Extract reference comments out into their own diagnostics array.
Address codereview
Address codereview
Find imported external modules that start with double underscores.
Add failing test.
Moved position increment in scanner; removed confusing comment.
Add explanatory comment.
Added multiline tests.
Emit for destructuring parameter declarations
Baseline changes from updating rest parameter emit to use new temporary names
Emit for destructuring assignments
baseline change conflict not caught during github merge
Reduce arrow function allocations in the parser.
Handel modifier const in getOccurrances
Remove arrow allocations from the parser in a few places.
Make 'CatchClause' have-a block, instead of be-a block.
Ensure getEmitOutput only check the file requested
Simplify parsing code.
Simplify code.
Use helper function.
Simplifying the signature parsing code.
Put semantically relevant tokens in the tree.
Traverse into all nodes when walking the tree.
Put semantically relevant tokens in the tree.
Provide greater type safety in the ast system.
addressed CR feedback
fix crash in getCompletionEntryDetails
Augment escapeString to fix downlevel template literal emit.
handle cases when new expression is used with no arguments
add missing prototype definitions
Make sure we have an appropriate error for heritage clause lists.
Don't set kinds after the fact.
handel serializing diagnostics
Don't use the parsing error path for reporting ///reference errors.
Remove unnecessary diagnostic flag.
Remove 'missing' syntax kind.
Get rid of emitted empty module.
added comments
Emit services as an external module.
Don't explicitly create a missing node when parsing arrow expressions.
Remove unused function.
Don't create a missing node for "foo[]".
Replace unnecessary case in switch with assert.
Treat 'const' as a modifier if followed by 'enum'.
take token kind from the tree in case if token kind from scanner is different
Use a single member to represent a module reference.
Add test for getters and setters
Add baseline
Add missing prototype properties
Simplify the code for parseDeclaration.
Don't explicitly call 'error' when parsing a type.
Don't parse nodes, only to not include them in the tree.  This will break incremental parsing scenarios.
Extract out common code from the list parsers.
Don't directly create errors when parsing expressions.
Don't create errors directly when parsing template spans.
Don't report errors directly when parsing throw statements or try/finally statements.
Don't report an error directly when parsing a function body.
Tests for external alias
tests for internal alias
Don't directly produce errors while parsing 'try' statements.
Tests for external modules
Make fewer direct calls to 'error' and 'errorAtPos' in the parser.
Handle TypeReference nodes
Tests for modules
Tests for const
Tests and fix symbol display for let
Tests for var
Simplify ASI parsing.
Code review feedback.
Better error recover when there is an unterminated expression before a declaration.
Address issue where we were having to double cast between FunctionLikeDeclaration and Expression types.
Simplify the emitter.
Simplify emitter.
Change function names.
Simplify code.
Tighten the bounds on an 'await' expression.
Rename MemberAccess to PropertyAccess.
Rename some kinds to match new parser.
Tighten types in the expression AST.
CR feedback.
Remove unnecessary tokens from the AST.
Support arbitrary numbers of implements and extends clauses (with arbitrary numbers of types) for classes and interfaces.
Use brands for Class Elements.
Provide brands for Declarations.
Provide brands for statements.
Handel TypeLiterals, ParenTypes, UnionTypes, and ArrayTypes
Handel assert for missing node kind in isDeclarationVisible for functionType and constructorType
Allow assignment expressions as destructuring assignment target
Change the names for property access and qualified names to match their types.
Make the distinction between PropertyAccessExpressions and QualifiedNames more explicit.
Add check and testcases for invalid binary digits and octal digits
Add a comment explaining what Brands are used for.
Add greater typesafety in the expression portion of the syntax system.
Add check and testcases for invalid binary digits and octal digits
Updating syntax kind names.
Renaming syntax elements.
Rename syntax properties to match Roslyn/Fidelity naming.
Rename 'CastExpression' to 'TypeAssertionExpression'.
Simplify the parser by removing the need for the 'force' parameter.
Simplify parser.
Add a lot of clarifying comments in the parser.
Provide unique nodes for void/typeof/delete expressions.
Add clarifying comments to parsing binary expressions.
Rename method, also remove unnecessary loop when parsing conditional expressions.
Accepting new baselines
Removing unused diagnostics related to '_i' variable name
Emit of rest parameter for loop uses unique temporary variable name
Add parser tests for let/const.
Remove IndexMemberDeclaration, we can just use IndexSignature instead.
Simplify how type members are represented in the tree.
Update name of variable declaration member.
Add support for parsing 'let' and 'const' declarations.
Support parsing const enums.
Add support for parsing type aliases.
Removing duplication in the parser.
Don't use bitwise operations on this nmber.  It may be more than 32 bits.
Remove fidelity tests.
Use a const enum for the syntax kind.
Rewriting and emit for destructuring declarations
Accepting new baselines
new lines that were added\removed by rules must always be honores even if they doesn't trigger recomputation of indentation
Add the test262 helper file
Move collateOutputs to harness
Add tree serializer to test262
Accept type baselines (will verify when computed properties are typechecked)
Address feedback
Tests for terminated/unterminated template strings.
Confused count with index.
tokenUnterminated -> tokenIsUnterminated
Update LKG.
Update LKG.
Emit modules that contain only const enums, if the preserveConstEnum flag is provided.
handle regexes correctly in formatting
Simplify syntaxtree.
Add appropriate switch case.
Allow modifiers on an Export Assignment node.
Simplify parsing.
Simplify parsing.
Rename SimplePropertyAssignment to PropertyAssignment.
Remove redundant syntax type.
Be more lenient with computed property names.
Inline method.
Rename some functions.
Only allow 'async' as a modifier if it is not followed by newline.
Keep track of unterminated literal expressions.
Add support for parsing async/await in fidelity.
Skip computed properties in the nav bar
Checker refactor for FunctionLike and VariableOrProperty
Update error codes
Syntax error for computed properties on method overloads
Emit tests for computed properties
Emit for computed properties
Add parser tests for computed properties
Add grammar errors for computed property names
Parse computed property names
Report error on asterisk token.
Refactoring emitter for emit ES6 features natively
Report errors for using yield/generators right now.
Refactoring emitter for emit ES6 features natively
Change the name invokeEmitter back to emitFiles
address code review
Improve comments for both parsers and bring more in sync.
Add clarifying comments.
Have a node flag to indicate if a yield expression has a *.
Simplify fidelity implementation of context flags.
Mark generator functions with an appropriate nodeflag.
Rename parser context flags.
Don't use underscores in names.
An asterisk is not a legal start of an enum member.
Rename methods as per CR feedback.
Initialize enum in a way that makes it clearer that it is a Flags-enum.
Don't store both boolean context flags and a unified flags value.
Add an _es6 suffix to prevent name collisions.
Add test baselines.
Parser tests for generators and yield expressions.
Add support for parsing generator functions and yield expressions.
Add the context mutation operators.
Extract context flags into their own enum.
Update fidelity to match names.
Use a separate field on a node to specify parser context flags.
Address code review
Addressed CR feedback.
Reduce lambda allocations in the parser.
Address code review
Move 'disallowIn' into being an ambient parser context flag.
Rename context flag.
Add comment
Add test cases
Remove empty file
Don't report a diagnostic explicitly.
Don't explicitly make diagnostics in the parser.
Added to comment.
Fine tuning array and tuple type checks in destructuring
Rename 'block' to 'body'.
Make parser more lenient with what it allows as the body of a function.
Allow string or numeric literal as property name of object binding Require RHS of array destructuring to be an actual array type (i.e. assignable to any[]) Tighten test for tuple type (previously just required a "0" property)
Move parser error to the grammar checker.
Move parser error to grammar check phase.
More parser consistency.
Adding definitions to build output
More parser simplification.
Simplify parser.
Make node creation more consistent in the parser.
Initial work on making all node construction in the parser consistent.
remove unneeded enum from the parser.
Tests for type parameter of function
Type Parameters in interface
Binary and octal integer literal support
Tests for type parameters in class
drop unused variables
Propagate node kind in variable/parameter destructuring declarations
Simplify rewind points.
Remove unused asserts.
Make 'kind' non-enumerable.
Speed up incremental parser.
Simplify incremental parser.
Slightly speed up marking by avoiding calling fullStart on so many nodes and tokens.
Always mark nodes and tokens that cross the edited range.
Simplify incremental code.
Simplify parser initializer.
Simplify incremental parsing by moving old source tree nodes before doing anything.
Support for destructuring assignments
Test cases for arrow function expression
Tests for arrow function expression
Tests for function expression
Tests for local function
Tests for function display parts
Test for parmaeters
Test cases for enum and enum members
Rename functions as per code review feedback
Amended comment.
Added test.
Addressed some CR feedback.
Write constructor type and function type annotation to adapt to new SyntaxKind introduced
Remove unnecessary 'do nothing' implementations in SourceFileObject.
Have the parser give real positions for empty tokens.
Remove the --noResolve check when finding the file. --noResolve is only for ///reference and import file resolution to resolve files from disk but the file identity is always determined before creating duplicate source file for same file paths
Adding SyntaxKind.FunctionType/ConstructorType to isAnyFunction
Update LKG.
Better spans for import/export errors.
Remove SourceFileInternal.
Simplify grammar check pass.
Check node for errors before recursing.
Destructuring of tuple type cannot specify extra variables
save token in scanner after scaning hex literal
Revert changes to resources.
Respond to code review comments
Code review feedback.
Added more tests.
Catch modifiers in sourcefiles.
Simplify code.
Remove unnecessary state from the parser.
Addressed CR feedback.
Inline some checker logic.
Simplify checker.
Simplify grammar checker.
Simplify grammar checker.
use a normal for loop instead of a forEach
merge
move checking modifiers out of parser
Remove forEach call in the grammar checker.
Move indexer modifier checks to the grammar checker.
Move optional method/property checking to the grammar checker.
Move errors about "new Foo[]" to the grammar checker.
Move property initializer checks to the grammar checker.

Move missing argument checks to the grammar walker.
Move parser error to the grammar checker.
Move away from a grammar error when a real parse error occurs.

Don't report a grammar error for a real parse error.
Move type parameter error handling code to the grammar checker.
Move module name checks to the grammar checker.
Move octal checks to the grammar checker.
Move export assignment checks to the grammar checker.
Move return checks to the grammar checker.
Updated test case and added comment
Move optional property checking to the grammar checker.
Destructuring parameter declarations
Move tuple checks to the grammar checker.
Expose parse errors and grammar errors off the source file.
move break\continue checks out of parser
Move with checks to the grammar checker.
Added test case for quickinfo on import statement.
Move ambient function block checks to the grammar checker.
Move heritage checks to the grammar checker.
Move ambient statement checks to the grammar checker.
Enable baseline check and declaration emit for --noResolve case of files
Renamed the tests files to more generic names
MOve switch checks to the grammar checker.
Address code review
Proper spans for empty type arg/param lists.
Removed tests from fourslash_old that were duplicates.
getCallLikeInvoker -> getInvokedExpression
Paramter -> Parameter
Address code review
Move type argument tests to the grammar checker.
Move declaration list checking to the grammar checks.
Move grammar checking on a trailing comma to the grammar checker.

Move all strict checks to the grammar checker.

Move strict check for binary expressions to grammar checker.
Move type parameter checks to the grammar checker.
Move catch block checks to the grammar checker.
Move variable statement checks to the grammar checker.
Move module grammar checks to the grammar checker.
Move contructor grammar checks into the grammar walker.
Move variable grammar checks to the grammar checker.
Move enum checks to the grammar checker.
Move postfix/prefix checks to the grammar check.
Move template version checks to the grammar walk.
Move object literal checks to the grammar checker.
Move accessor grammar errors to the grammar checker.
Rename and simplify code.
fix getContainingList to use rangeContainsStartEnd function
Update LKG
Skip error checks on node if any children produced errors.
Use the entire indexer node for grammar error reporting.
Remove unused getImplementorAtPosition
Move parameter grammar checks to the grammar pass.
Added tests for overloads.
Move parameter name 'strict' checking to the grammar walker.
Address code review
Improve error messages
Initial refactoring to support doing grammar checks as a separate pass of the tree.
Refactoring language service to use short-hand
Tests for signature help on tagged templates with no overloads.
Update LKG.
Refactoring test framework to use short-hand
Refactoring main-compiler (tsc) to use short-hand
Refactoring compiler utility-related files to use short-hand
Refactoring emitter using short-hand
Refactoring parser/scanner using short-hand
Refactor using short-hand
LKG short-hand property
Added an error condition for multiple AMD module name assignments.
Address code review
Address code review
Update the new scanner to follow the new regex scanning rules.
Fail on tests with errors; reinstated noResolve; corrected tests that were not actually compiling.
Simplify how regexs are incrementally parsed.
eliminate usage of TypeScript module from services layer
cut usage of the old tree from the services layer
Refactored code, adjusted for residing out of bounds of the template.
go-to-definition with test cases
remove extra call to getSourceFile
Add some more jsdoc comments and ensure everything has a constructor type when possible
minor fixes
Add dom to es6 lib
Addressing CR feedback
Add ArrayBufferView definition to ES6 lib
Move the Internationalization API to its own file and include it in ES6 typings
Add TypedArray tests
respond to code review comment
Add test262 test runner
allow non ts files to be passed in to the compiler
Respond to code review comments
Add a test for quick-info
Accepting new baselines.
Improve caching in recursive type comparisons (fixes #1170)
Update baseline
scan starting from the beginning of target span
Add Promise typing support
Got sig help working in tagged no-sub templates.
update comment.
Got sig help working in the template head.
CR feedback.
Type checker symbols must be transient.
More CR feedback.
cr feedback.
Update comment.
Function and constructor types in the syntax tree.
added more tests
Add test cases and rename test files
formatting: handle templates spans
Addressing CR feedback
code cleanup: added comments
Modifying tests and accepting new baselines
Add comment and clean up implementation on findAllReferences
Added tests for defining TemplateStringsArray in certain contexts.
Address code review
Added a compiler test for named AMD modules.
Added a few tests.
Account for variable statements, as they are not declarations.
Look through constructor parameters if acc. modifier.
Added 'Constructor' to 'isDeclaration' predicate.
When entering a type context, 'yield' should be allowed (as long as you're not in strict mode).
Code review feedback
Add support for [GeneratorParameter] grammar parameter.
Update context names.
Baselines, using 'unknown' as a default type.
Remove the Obsolete api getSignatureAtPosition
Removed lookup of TemplateStringsArray for non-ES6 targets.
Stylistic changes/comment fixups.
Added comment.
Code review feedback
Corrected token start position calculation & nodeHasTokens predicate.
Quickinfo and completion entry should display const enum enumName if enum is constant Handles #1084
Add test cases for typeof x == s and typeof x != s form of typeguard which has no effect on narrowing type
Add test case for instance of type guard with interface with prototype property
Moving error reporting to getWidenedTypeForVariableDeclaration
Adding destructuring variable declaration error messages
Initial support for named AMD modules.
Adding testcase for the incorrect eliding of the import declarations
Add tests to cover scenarios for relative path reference resolution
Add clarifying comments.
Add support for parsing yield expressions.
Function property assignments can also be generators.
Add support for parsing generator declarations.
Update comment
Provide more consistent behavior in how parseFunctionBlock works.
Spec conformance for function blocks versus statement blocks.
Clean up function names.
Initial signature help work for tagged templates.
Add support for typed arrays
Asserting myself more.
if preceding token cannot be found - scan from the beginning of enclosing node
Cleanup Proxy definition
code cleanup: moved captured locals to parameters
Asserting myself.
code cleanup: move code from lambda into separate functon
Removed the debugger statement from test case
Add conformance tests
Move short-hand property tests to conformace folder
Find all reference for short-hand property assignment
Make Map.prototype.set second paramter optional
Parser errors for destructuring declarations
Make WeakMap.prototype.set second parameter optional
Use PropertyKey instead of string when appropriate

CR feedback.
Use the correct name for interface Math
Add additional property to mapfn for Array.from
export ReferencePathMatchResult interface as it is used by other exported functions
Keep track of 'disallowIn' as an ambient parser flag instead of having to pass it along everywhere.
add comments, update fourslash tests
Show error for visibility only on the identifier resulting the error
Test case for visibility error in the type literal
Remove unnecessary privacy errors for heritage and constraint type annotation
Test cases for type alias declaration emit and privacy check. Also removed the unnecessary error messages for type alias privacy check
Test cases for type annotation visibility errors
remove unused arguments for getCompiler
merge with master
code cleanup: add more comments, rename methods
Test cases for type literal annotation
Test case for string literal overload type annotation
Test case for paren type annotation
Test cases for union type annotation
Type annotation of tuple type emit in the declaration file
Test cases for array type annotation
Test cases for type query
Tests for type reference annotation
Tests for built in type name reference in type annotation
Show error about entity name visibility on entity name resulting in the error
Update the baselines
Emit the type annotation as it is in the declaration file if we have it
make smart indenter respect actual start line of the list
Consolidated normalizing slashes to use from typescript core in services
Rudimentary support in language service
set the correct range for paramters in signature help
Basic implementation for finding all references
Consolidate normalizing slashes and use it from typescript core.ts
Updating the gitignore file now that we build debug version of js files
code cleanup: removed unused code
addressed CR feedback, added comments, dropped unused code
End-to-end support for destructuring in variable declarations
Body is optional.
Use union types to make For/ForIn statements simpler.
Simplify API for nodes that have both a block and an expression.
Simplify API for nodes htat have both a block and a semicolon token.
Simplify module name parsing.
Simplified parsing.
Tiny perf tweaks to scanning.
merge with master
code cleanup: added comments
code cleanup: remove commented code
code cleanup: move functions to the outer scope
Rename method.
Move to a syntax model where we only have leading trivia.
move SyntaxTrivia.kind over to a property.
Update test.
Attach skipped tokens to the following token, not the preceding one.
drop duplicated code
added tests for formatting in try blocks, add startEndOverlapsWithStartEnd
removed old formatting implementation
harness cleanup
More unused variables in services.ts
Removed some unused private functions
Removed some unused variables
do not descend into child nodes if child does not overlap with target span
code cleanup: removed redundant check
code cleanup: fix typo in formatting scanner, removed explicit indentation for comments, invert conditions to reduce nesting
A few touch-ups to the code.
Support getOccurrences for modifier keywords.
code cleanup: simplify DynamicIndentation interface
Added baselines.
code cleanup: inline functions
code cleanup: split function into three
Corrected isExpression for templates.
Test now covers completion entry at name of the import when there is no name and there is name
Simplified while loop as per code review feedback
Adding binding patterns to declaration names
adjust delta when recomputing parent indentation
Block completion list on import declaration name and fix the crash in symbol display name when import declaration is incomplete
code cleanup: remove unused arguments
Use the new beta build env on Travis
code cleanup: inline functions
Addressed CR feedback.
removed duplicate code
simplify formatting scanner
Breakpoint validation for Let and cost
Type aliases cannot have breakpoints
Verify breakpoints in type alias syntax
change folder structure, move all new formatting related bits to 'format' folder
Basic typechecking and emitting for short hand property assignment
Rework tracking and error reporting related to widening of types
Update some documentation as per code review feedback
Store scanner position before create PropertyDeclaration node
Typeguards of form !expr •	A type guard of the form !expr o	when true, narrows the type of x by expr when false, or o	when false, narrows the type of x by expr when true.
Typeguards of form expr1 || expr2 •	A type guard of the form expr1 || expr2 o	when true, narrows the type of x to T1 | T2, where T1 is the type of x narrowed by expr1 when true, and T2 is the type of x narrowed by expr1 when false and then by expr2 when true, or o	when false, narrows the type of x by expr1 when false and then by expr2 when false.
TypeGuard of for expr1 && expr2 •	A type guard of the form expr1 && expr2 o	when true, narrows the type of x by expr1 when true and then by expr2 when true, or o	when false, narrows the type of x to T1 | T2, where T1 is the type of x narrowed by expr1 when false, and T2 is the type of x narrowed by expr1 when true and then by expr2 when false.
Test cases for typeguards of form typeof x === s and typeof x !== s •	A type guard of the form typeof x === s, where s is a string literal with the value ‘string’, ‘number’, or ‘boolean’, o	when true, narrows the type of x to the given primitive type, or o	when false, removes the primitive type from the type of x. •	A type guard of the form typeof x === s, where s is a string literal with any value but ‘string’, ‘number’, or ‘boolean’, o	when true, removes the primitive types string, number, and boolean from the type of x, or o	when false, has no effect on the type of x. •	A type guard of the form typeof x !== s, where s is a string literal, o	when true, narrows the type of x by typeof x === s when false, or o	when false, narrows the type of x by typeof x === s when true.
Test typeguard of form instance of •	A type guard of the form x instanceof C, where C is of a subtype of the global type ‘Function’ and C has a property named ‘prototype’ o	when true, narrows the type of x to the type of the ‘prototype’ property in C provided it is a subtype of the type of x, or o	when false, has no effect on the type of x.
Tests for typeguards allowed on variables and parameters only From spec: Note that type guards affect types of variables and parameters only and have no effect on members of objects such as properties
Type guards in || operator •	In the right operand of a || operation, the type of a variable or parameter is narrowed by any type guard in the left operand when false, provided the right operand contains no assignments to the variable or parameter.
TypeGuards in right operand of && operation •	In the right operand of a && operation, the type of a variable or parameter is narrowed by any type guard in the left operand when true, provided the right operand contains no assignments to the variable or parameter.
Tests for conditional expression typeguards •	In the true expression of a conditional expression, the type of a variable or parameter is narrowed by any type guard in the condition when true, provided the expression contains no assignments to the variable or parameter. •	In the false expression of a conditional expression, the type of a variable or parameter is narrowed by any type guard in the condition when false, provided the expression contains no assignments to the variable or parameter.
Test cases for typeguards are scoped at function /module block
Test cases to make sure typeguard is defeated in case of function calls From spec: Also note that it is possible to defeat a type guard by calling a function that changes the type of the guarded variable.
TypeGuards narrow types in if statement works per spec:
Address feedback
code cleanup: replace nulls with undefined
code cleanup, removed unused files
return last scanned token if possible
add child delta for all nodes
Corrected comment.
Proper type arg inference with apppropriate overload res tests.
Make certain types of FunctionLike require block bodies
Refactor Declaration.name into Identifier | ComputedPropertyName
merge with master
track effective parent indentation for list items
fix indentation for nested items
do not indent tokens with errors
fix indentations in functions
Removed duplicate diagnostic.
Initial parser support for destructuring patterns
Simplify code.
Add support for parsing computed property names.
Add the IPropertyNameSyntax.
Add support for parsing shorthand property assignments.
Remove unnecessary brand.
Add an IAccessorSyntax interface.
Add missing brands to the syntax interfaces.
Specialize computeData for arrays.
remove file.
Move from an array of function pointers to actual methods.
Classify keywords in type args in the absence of syntactic classification.
Test cases of function infering return type of functions if f is a contextually typed function expression (section 4.9.3), the inferred return type is the union type (section 3.3.4) of the types of the return statement expressions in the function body, ignoring return statements with no expressions. Otherwise, the inferred return type is the first of the types of the return statement expressions in the function body that is a supertype (section 3.8.3) of each of the others, ignoring return statements with no expressions. A compile-time error occurs if no return statement expression has a type that is a supertype of each of the others.
Array literal produces union type if the it is not contextually typed
Tests for contextual index signature of union type Let S be the set of types in U that has a string index signature. If S is not empty, U has a string index signature of a union type of the types of the string index signatures from each type in S. Let S be the set of types in U that has a numeric index signature. If S is not empty, U has a numeric index signature of a union type of the types of the numeric index signatures from each type in S.
Initial work on overload resolution with tagged templates.
Test cases for contextual typing of union type members
Identity of union type
Tests for union type literals A union type literal is written as a sequence of types separated by vertical bars. UnionType: PrimaryOrUnionType   |   PrimaryType A union typle literal references a union type. When function or constructor types are included in union types they must be enclosed in parentheses
Tests for Conditional operator can generate union type
Results of || operation produces union type
Tests for union of index signatures: •	If each type in U has a string index signature, U has a string index signature of a union type of the types of the string index signatures from each type in U. •	If each type in U has a numeric index signature, U has a numeric index signature of a union type of the types of the numeric index signatures from each type in U.
Tests for union of construct signatures
Tests for union of call signatures If each type in U has call signatures and the sets of call signatures are identical ignoring return types, U has the same set of call signatures, but with return types that are unions of the return types of the respective call signatures from each type in U.
Tests for union members: If each type in U has a property P, U has a property P of a union type of the types of P from each type in U.
Tests for assignment compatibility of union types •	A union type U is assignable to a type T if each type in U is assignable to T. •	A type T is assignable to a union type U if T is assignable to any type in U.
Tests for checking if type S is subtype of union type T is a union type and S is a subtype of at least one constituent type of T
Tests for source (S) of subtype is union type (U) A union type U is a subtype of a type T if each type in U is a subtype of T
Tests to check equivalency of union types A union type encompasses an unordered set of unrelated types (that is, types that aren’t subtypes of each other). The following rules govern union types: •	A | B is equivalent to A if B is a subtype of A. •	A | B is equivalent to B | A. •	AB | C is equivalent to A | BC, where AB is A | B and BC is B | C.
Conformance tests for array element type of tuple is union type of tuple element types
use debug mode by defauls in local builds
add test for const enum that is initialized with enum member defined above
add 'emitReverseMapping' task to jakefile
update LKG, always emit value as initializer for const enums when 'preserveConstEnums' is specified
Update syntax nodes.
Specialize findToken walk.
Micro optimize scanning
Use an array for getting the right childAt function.
Small micro optimizations to incremental parsing.
Specialize update method for both nodes and tokens.
Faster fixedWidthTokenLength function.
Change 'kind' into a property from a method.
use const enums in compiler
update LKG
Make ISyntaxElement.parent non-optional
Update test.
Emit case clause statements on the same line if that's how they were written in source.
Encode child counts as an array, not as a switch.
Treat getTodoComments as a semantic operation since it will be called on every file in the project.
Accepting new baselines
Addressing CR feedback
Declaration file emit for private method overloads (#1018)
addressed CR feedback: adjusted text of error messages, added description to 'preserveConstEnums' command line argument
Remove SyntaxNode.ts file
Simplifying node constructors
Use functions instead of classes
Remove accept method from syntax nodes
Remove childCount and childAt from ISyntaxElement.
Remove shared arrays.
Remove SyntaxNode class
Speed up incremental parsing
Remove unused code.
Speeding up parsing and incremental parsing.
Speed up findToken
Speed up incremental parsing by caching child tokens instead of walking the tree for them.
fixed typo
Accepting new baselines
added basic set of tests for type aliases
merge with master
Adding tests
Improved type inferences involving union types
Type alias cannot have reserved type name (#1030)
Add support for parsing template expressions.
initial version of spec conformance tests for type aliases
inline enum constant values for indexed access when index is string literal
Remove abstract syntax tree generation support from fidelity.
Use a flat list for separated syntax lists.
Minor updates to Type Aliases section
Accepting updated baselines
Remove restriction on type aliases for object type literals
Allow type aliases for object type literals
merge with master
add test for 'preserveConstEnums' command line argument
do not treat module that contains only const enums as instantiated
Speed up separatedListChildCount
When augmenting Array.prototype, make the functions non-enumerable by default so as to not affect clients that call for-in
Move back to how we used to walk trees for incremental parsing perf.
Addressed CR feedback.
update test baselines
Addressing feedback and adding regression tests
make getSourceFile use getCurrentSourceFile
Accepting new baselines
Improved type relation caching to fix #1002
set 'earlyError' bit to 'non-constant expression in constant enum initializer' error
added .d.ts generation tests
drop wasNewLine if previous token has no trailing trivia
indent argument lists if they are on different line with parent
Removing unused code.
Address code review
Move away from separate syntax kinds for binary and unary expressions.
process start and end tokens in list as part of list, indent return statements
Removing commented out code.
Improve walking speed in Fidelity.
preparation to process list terminator tokens with lists - 5 falling tests
Adding type aliases to language specification
Adding support in fidelity for parsing union and parenthesized types
addressed CR feedback
allow arithmetic operations in constant expressions, handle infinity\NaN results
Remove nulls from the syntax layer.
Added test for noEmitOnError
Address code review
Remove old commit and debugger flag
use .pop() on an array instead of setting the length directly.  The latter causes v8 to stop optimizing the method.
Add fourslash support and tests cases
Add fourslash support and tests cases
Remove while true guard
indentation for export assignments
Update LKG
Export DisplayPartsSymbolWriter as it is already used in exported types
Add reflect definition
const enums, iteration 1: const enums can be used in imports, const enums can be merged only with const enums.
Load the es6 lib if target is es6
First draft of es6 typings
merge with master
Allow static side of native types to be extended
Remove syntaxTree from SourceFileObject
Disabled completion list entries in template literal parts for the LS.
Omit empty template tail literals.
Missed a use when fixing Debug.assert
Renamed certain functions in the parser to more accurately reflect behavior.
Changed Debug.assert's first parameter to a boolean.
Addressed CR feedback.
Comment examples of when findListItemInfo can return undefined
initial version of list item formatting
Move Convert FileReference to the shim
chainedMessage -> headMessage
Revert "Introduce .gitattributes file"
Revert "Introduce .editorconfig file"
Updating LKG compiler to get type alias support
addressed feedback
Use of union types and type aliases in compiler
Respond to code review comments
Removed colons from diagnostic messages.
'const enum' iteration 0. TODO: allow and track const enums in imports, add more tests
merge with master
Expose getSourceFile on the LanguageService interface
Add tests case for invalid syntax in import statement and triple slash reference
Remove diagnostic from pre-processing of files
Update LKG
Making it an error to alias an object type literal
More PR feedback
correctly propagate child indentation
Address code review comments
Make chainedMessage, terminalMessage, and containingMessageChain optional
Address PR feedback
Changed name to noEmitOnError
dropped redundand type assertion, added mising check
move code around to consolidate checks in one place
addressed CR feedback, added support for indexed access
added folding for references to enum members in enum member initializers, added tests
implemented treat warning as errors commandline option (warnaserror).
handle non-qualified names, add 'propagateEnumConstants' command line option
initial implementation of constant folding
Support for type aliases in .d.ts generation
Introduce .gitattributes file
Introduce .editorconfig file
distinguish parse errors so non-parse errors can be ignored during formatting
Added syntactic classification for templates; also made 'spans' a NodeArray.
Update baselines
Add unittests for preProcessFile
Refactoring getFileReferenceFromReferencePath for both parser and language service
merge with master
initial rev of using error information in formatting
Report type argument inference errors on specific candidates
Use type alias names in aliased recursive type literals
Update CONTRIBUTING.md
Only check for collisions with variabels and not properties
Ensure let and const declarations in labels are parsed correctelly
Tests for tagged templates.
Added tests for tagged templates. Some should fail when we do typechecking.
Better test coverage for templates in object literals.
Added support for tagged template strings, updated baselines.
Have inferArgumentTypes return the InferenceContext
Added tests and baselines for templates.
Update LKG
Rudimentary template support, excluding tagging.
Implementation of Type Aliases in compiler core
Move helpers to the bottom of the function
Actually removed reference to the diagnostics file.
Cleanup completion list logic: - Do not walk the tree multiple times for the same session, instead pass along the previous token - Use current token if the this is not after a dot to avoid running into scoping issues - Also, add some documentation about different steps
Add test for bug #807
Added another test case (#948)
Add test for issue#903
Disallow completion in interface declarations
switch formatter to use 1-based lines
Add comment
Move switchToForwardSlashes from pathUtils to utilities
Refactoring preProcessFile to use new scanner
remove call to getSourceUnit
Split completionListAtIdentifierDefinitionLocation into multiple tests to ease debugging
move completion list position detection to the new tree
Accepting new baselines
use apply line adjustment when calling SmartIndenter
Addressed CR feedback.
recompute indentation if line is added
Specify error message for type argument inference failing
Revert the stuffing of instantiated signatures back into the candidates array
Give different errors for different overload resolution issues
Begin refactoring overload resolution to collect more info
Move overload resolution logic into chooseOverload function
Renaming getApparentPropertyOfType to getPropertyOfType
Code review feedback update
Union type fixes and optimizations
Exported variables can have breakpoint even if they do not have initializer
Refactoring functions related to processImport
Addressed CR feedback.
Removed Diagnostics from sys.ts in order to avoid cyclical build dependency.
Span on whole method/accessors if they are of class declaration
Span on whole function if the function is exported
handle indentation in function arguments
Breakpoint span on class and its name is set on whole declaration
Breakpoint span on module and its name is set on whole declaration if it is instantiated
Some reorganizing
Set breakpoint on whole enum declaration if set on the enum name of enum keyword
move code around
Breakpoint validation in interfaces
Update LKG
Implement getNameOrDottedNameSpan for new compiler
Do not set breakpoints on the blank line or comment only line
Breakpoints in expressions
Breakpoints in classes
Breakpoints in module declaration
Breakpoints in enum declaration
Breakpoints in import declaration
Breakpoint validation for export assignment
Breakpoint spans in try,catch,finally blocks and throw statement
Breakpoints in the switch statement
Breakpoints in the for in statement
Breakpoints in for statement
Breakpoints in break/continue statements
Breakpoints in labeled statements
Breakpoints for if else construct
Breakpoint span in the debugger statement
Breakpoint span in the doStatement
Breakpoints for while statement
Breakpointspan implementation for function declaration, expression statements and return statements
Changed the namespace from ts.Breakpoints to ts.BreakpointResolver
Remove the old implementation of the breakpoint resolver
Breakpoint span in variable declarations in new language service Also updates the fourslash breakpoints baseline to be more readable
respect parent indentation
respond to code review comments
Create a new flag for diagnostics 'isEarly' and disable emit if this flag is set. Set the flag by default on all let and const errors to ensure we are not emitting invalid JS code.
adjust formatting scanner implementation
allow let and const declarations in module bodies under labels
Simplify the binder logic for managing blockScopeContainer
Address code review
Update error messages
Address code review
use getCanonicalFileName in the language service when searching for files
Address PR feedback
Adding missing blank
Accepting new baselines
Require optional properties to be present in subtypes Remove unused getBestCommonType method (unrelated change)
Adding tests
Formatting fixes
Removing doc\header.md from jakefile, fixing formatting
Updating Language Specification
initial rev
Addressing CR feedback
Produce SignatureHelpParameters from type parameters for generic help
Signature Help relies on display building routines in checker
Remove OmittedType
Split genericParameterHelp test into multiple tests
Parser changes to parse omitted types correctly
Reenable some basic generics tests
Move getChildListThatStartsWithOpenerToken inside getSignatureHelpItems
Changing type-to-string conversions to use parentheses
rescan '>' and '/' if necessary
Treat blockScoped variable declarations as a separate category when it comes to symbol flags, instead of compining BlockScoped and Variable
Allow const and let declarations to be exported in modules. Also ensure that const module elements are not used as references.
Accepting new baselines
Parentheses in type literals
multiline comments support
Respond to code review comments
Adding tests
import ior utilites
Addressing CR feedback and fixing issue with document title
Changing word2md tool to map Windows-1252 characters to Unicode
Address PR feedback for displayBuilder
IOR is a simple script for dealing with IO Replay files
disable source map record validation in RWC runner
Straight quotes in Language Specification
Union types in contextual signature instantiations
Add language service support for const
Adjust rules to handle interfaces correctly - 19 failing tests
update baseline
More comments.
Switched syntactic classifier to use new tree.
Update CONTRIBUTING.md
fix a few issues in rules
Adding documents with revision marks
Adding PDF document
Further refactoring the rwc tests
Get rid of getRootSymbol and include target's flags in transient symbol's flags
Formatting fixes
Adding union types to language specification
Removed some unused var statements
Add after block to the describe blocks of project runner and rwc runner
Do not allow let and const declarations to be exported from a module
temporary disable smart indentation for type literals, fix computation for end line position
Allow const in for statements
Extract the write methods into a display builder in the checker
Added test case for semantic classification with union types.
do not check Missing
Flag const declarations shodowed by var redeclarations
Flag assignments to a const
fix issues in formattingContext - 35 failing tests so far
Removed unnecessary boolean coercion.
Report duplicate identifier errors on all locations for merged declarations to align with local declarations
Ensure duplicate let/const declarations accross files are reported
initial revision of formatting
Addres code review
Comment examples of when findListItemInfo can return undefined
Do not allow use of block-scoped variable before its definition
Add binder support for block scoped variable declarations
Added facilities for using positions on classification tests.
Test case for interface members
Test case for interface display parts
Test cases for constructor quickInfo display parts kind
Test cases and fix for symbol display part kind of class accessors
Test cases for class methods
Test cases for class property display parts
Enable infrastructure to test the symbol display parts returned by quickInfo
Address code review
Removed the debugger statement
Added test case, renamed test cases.
Add test case to make sure that we only report an error from target file
Explain what is happening in 'isNumericName'.
Update language service to use getDeclarationDiagnostics instead of emitFile to get declaration errors
Move symbolDisplayPartKind to services side
Refactoring parameters formatting
Addressing CR feedback
Accepting new baselines
Correct contextual typing with union types
Disallow let and const declarations outside blocks
Add basic parsing support for let and const
Add es6 target
Add a temporary fix to quick info
Handle union properties completions on apparant types
Accepting new baselines
Less aggressive subtype reduction in union types
Refactoring emitDeclaration, separate emitDeclaration from emitFiles
ensure unionProperty symbols have declarations set at creation time
Removed incorrect check of symbolKind determination of undefined symbol
Show call and construct signatures when using aliases
Show better alias information in completion entry and quickInfo
Do not use internal aliasing when getting symbol full name to show in quickInfo or completion list
Test updates from union changes
Make things more conformant with 9.8.1 of EC-262 spec.
respond to code review remarks
Adding some badges
Re-added semantic colorization fix for colliding types colliding in value and namespace space, added a test.
Add isDeclarationFile and update similar all usage
Quick edit to comment.
Addressed CR feedback.
Undid changes where contextual semantics are taken into account.
Ensure that numeric names are in their printed form.
Add baseline
removed old comment
removed hidden tabs + moved check into isNumericName
Moved the error check from parser to checker & updated baselines
Handle numeric signs in 'isNumericName'.
Use getRootSymbols for all union property needs
Support find all refs on union properties
Add more test cases
Respond to code review comments
fixed error message and updated necessary baselines
Use our own scanner for 'isNumericName'.
Try to pick a good signature, if no signature matches
CR feedback on the checker
Accepting new baselines after merge with master
Add baseline
Add test file
Improved type argument inference with union types
Use string to marshal in SymbolDisplayPartKind instead of enum
Accepting new baselines
Make 'getSymbolKind' semantically sensitive to the location of requests.
Compiler test case for usage of contextual rest parameter
Code Review feedback: Quick info will show type of undefined as undefined instead of any
Code review feedback - Show the type as any even inside the with block
Address code review
Addressing CR feedback
Add support for union properties in goto def
add test for quick info
Support symbol kind for union properties
Dix throwing exception from emitting file
add declaration target to generate declarations for compiler and services
Code review feedback
Code Review feedback
Sshow signature information if possible (even though signature resolution fails) in given location
Outlining spans for a standalone block shouldn't have the span of their parent.
Enable proto test case
Properly use a bit test instead of equality, due to intersecting meanings.
Don't merge nav bar items that are at different indent levels
Use local meaning for variables in quick info.
Narrowing of variable types using typeof/instanceof type guards
Add assserts to help diagnose signature help crash #832
Properly marshall diagnostic codes to the managed layer
Address code review
Do not write anonymous function name in type parameter details
Enabling more test cases
Add fourslash tests to cover external module case
Update compiler version to 1.3
Removed Numeric members from a bunch of tests
Enable test cases for augmented types
Reverted code back to original location since these functions no longer need to be exported.
Use 'getMeaningFromDeclaration' to classify identifiers.
Get symbolKind as part of display part determination itself
Better symbol information for lambda variable types at the call site
Handle findAllRefs/getOccurrences for properties inherited from aliased types.
Added test cases for --outDir option
Added test case for rename of enum member using rename api
Remove duplicate file
Remove duplicate fil
Don't show locals as children of functions.
Added a message & a check for numerics in the parser
Update tests.
Tweak how we populate NavBarItems.
fixed spelling mistake
Made fixes based on CR feedback
Initial implementation of Union Types
specific type for function param
Updated baselines
Tuple conformance
Cleaning up the new rename-comments/strings code.
Cover all top-level items in 'getIndent'.
Moved 'basicChildItem' to 'createChildItem' and renamed it 'createItem'.
Replaced 'getModuleNameFromFilename' with 'removeFileExtension'.
Renamed 'getScriptLexicalItemsWalkerSuperCala[...].ts' to 'navigationBar.ts'.
Adding tests.
CodeReview feedback, and some tests.
Renamed assertionMessage to messageAtLastKnownMarker in fourslash
Finished up "overload collapsing" for navigate-to.
Show the type information in places where there is no symbol associated
Adding rename tests.
Enable tests for the case sensitive and non case sensitive path resolution during soucemap path calculation
CodeReview feedback.
Support rename in comments and strings.
refactored checker again
Add test case to verify the definition name and container name Rename dialog will use this name and scope name returned
rewrote changes to the checker
Add some heuristics in the lexical classifier to make it play better with the syntactic classifier when classifying expressions involving generics.
Update compiler localized messages with those provided by the language service.
Specify which outlining spans should auto-collapse if the user choose "collapse to definitions".
First changes to checker for this fix
Only show first overload in a series of consecutive overload signatures for navigateTo
support goto def on /// references with absolute path
handle absolute path in /// references
Update Baselines
Formatting fixes
addressed CR feedback
Update baselines
Parse OmittedExpression for missing arguments followed by commas
Add test for empty arguments and arity filtering
Remove getCurrentArgumentState
Record trailing comma even for incorrectly terminated lists
Format typeparameters information
Enabling more quickInfo tests
Alias name formatting
Get the doc comments for dotted module declarations with docComments going to inner most module declaration Enable module declaration comments and type name formatting tests
Enable test cases for comments/type name format validation
Enable signature help docComment testing
Overload formatting in the symbol displaying
Determine if the function/var is local to function block
Qualify properties methods of the instantiated symbol correctly.
Anonymous typeliteral is not used in qualification
Move the symbol classification and display parts writing to the Services and format the newlines correctly
Use SymbolDisplayParts api
Get the JSDoc comments for the symbols This also fixed type formatting for single function signatures in the types
Do not use a while loop, as an aliased symbol is always one level deap
Get exported symbols off aliases in getCompletions
Tweak classification so it does not classify things as keywords that could not actually be keywords according to the grammar.
set the kind on alias completions
Add aliases in completion list
Minor naming/comment changes.
Minor cleanup, added getScriptLexicalStructureWalker.ts Jakefile.
Adding tuple types to language specification
do not consider positions that fall to leading trivia in brace matching
Propery walk all declarations to find doc comments for a symbol.
addressed CR feedback
Simply use source text from now on.
Respond to CR feedback.
Add support for protected glyphs on the script side.
getOccurrences for 'get' and 'set' keywords.
rename getTokenAtPosition to getTouchingToken, add a few helpers for common tasks
Changed "ownership" relation of try blocks on throw statements.
Moved logic to another location where host was in scope so we could call getCanonicalFileName
outlining support for switch blocks\array literals
Support getOccurrencesAtPosition for 'throw' keywords.
Adding word2md.js to .gitignore file
Show marker names in fourslash test failures
Filter protected members from the completion list
Add jake task for generating Markdown language spec
Adjust sig help implementation to match the new simpler sig help API.
still trying to get the indenting correct
Limited identifying identifiers after dots to keywords.
fixing baseline
Prevent non-TypeScript (HTML/JSON/...) files from being added to test suite.
Escaping of '<' characters in Word to Markdown conversions
rename getExactTokenAtPosition to getTokenAtPosition
Provide helpers for creating symbol display parts.
renamed getNodeAtPosition to getExactTokenAtPosition, added predicate parameter that will determine if token with end === position should be returned
Remove debugger statement.
Address code review
enusre that child items is always set
Update README.md
set applicaple span correctelly
Addressing CR feedback
Properly support string-literal property names and escape external module names.
fixing formatting again...
respond to code review comments
Formatting fix
Remove default setting of noResolve flag
Removing script tool copyright message
Language Specification in Markdown format
Added error checking for references that reference the same file along with 3 tests,
fixed some tabbing issues
Added error checking for references that reference the same file along with 3 tests,
Switch signature help over to using display parts.  This allows for classified sig help on the editor side.
Update comment text
remove empty lines
shim getSignatureAtPosition using the new signature help interfaces
Respond to code review remarks
Address code review : add test case for inside ambient module declaration and single quote
Do not use 'foo' in tsc help message
spelling: Collistion -> Collision
remove unused file
Switch comments to jsdoc
Address PR feedback for trailing commas
move ClassificationTypeNames around
switch textChange to interface
switch RenameInfo to interface
Switch public types to interfaces
do not report cascading errors in instanceof operator
use operator token when checking unary expressions in strict mode
Change NodeArray to have a hasTrailingComma property instead of an OmittedExpression
More cleanup and PR feedback
Patch up signature help after the bug in getTokenAtPosition
Address code review
Remove debugger flag
Update comments
remove external module from showing up on completion list
More PR feedback
Code review feedback.
Respond to PR comments
Changed wording for unit tests.
Added test cases for multiline comments in line classification.
Added unit test for property access colorization.
No longer create an entire scanner when performing line classification.
Simplify writing code.
Process unterminated multiline comments the same way we handle multiline strings.
fix comment text
Code review feedback.
Use the 'skipTrivia' scanner flag for lexical classification.
Update README.md
Update README.md
Update README.md
Added protected conformance tests
Added test case for adjacent braces.
Use push.apply to push multiple elements.
Inlined 'getMatchSpans'.
Add undefined check for tokenPrecedingSpanStart
Add test for nested calls
Replace native division with integer division
Throw when cancellation is requested
Enable parameter help tests
Don't return list index when looking for the argument list
Refactor signature help into separate file
Initial draft of getSignatureHelpCurrentArgumentState
Minor fixes in getSignatureHelpItems
Disable failing tests for generics and overloads
Refactor collectCandidates and add type parameters to signature display
Fill out more of the SignatureHelpItem and SignatureHelpParameter structures
Further changes to parser for OmittedExpressions, and make checker resilient to them
Add an OmittedExpression for trailing commas in calls
Create SignatureHelpParameters
Add applicableSpan to SignatureHelpItems
Revert to old behavior for forEach
Remove TrailingCommaBehavior in favor of two boolean parameters
Begin packaging of signature help items
Extract findListItem from smart indenter
Move findPrecedingToken to ServicesSyntaxUtilities
Start testing signature counts and adjust some syntactic computations
Semantic filtering of candidate signatures
Signature help present with completed signatures
Enable fourslash signature help tests
Update LKG
Update LKG
Moved brace matching code into services.ts
Condition the custom serialization on the existance of JSON
respond to code review comments
Addressed code review feedback.
Properly escape strings when serializing source maps
Addressed CR feedback.
Moved old fourslash test for brace matching over from fourslash_old.
Moved to new tree for brace matching.
Address code review
Show documentation comments in quick info.
Add support for getting the doc comment from a symbol.
Rename Comment->CommentRange.
Include the values of constant enums in quick-info.
Provide capability to ask the checker what the constant value of an enum member is.
Remove unnecessary indent.
Updated test baselines.
Updating baselines.
Update quickinfo formatting.
Tweak the appearance to match the old managed LS behavior.
More quick info work.
Address code reviews
Update names.
condition the use of locale on the exitance of JSON
Hook up quick info shims.
Flash out QuickInfo implementation.
Return exit code
remove commented out code
add explict serialization logic for source maps to avoid using JSON
Support getting symbolDisplayParts for types as well as symbols.
More tests for protected members
External module items now display their base file name in quotes.
Place symbolToString above symbolToDisplayParts.
Clean up symbol writing API.
Initial work on classified quick info.
Minor edit to test.
handle cases where we have a node with width 0 when reporting grammar errors
Accepting new baselines
Improved error messages for private and protected member access
Removed duplicate 'getNodeModifiers'.
Port fidelity changes to github.
Adding protected members to Language Specification
Clarify comments
respond to code review comments
Address code-review comments
Add fourslash testcases
Added helper function for creating child items.
Remove unused third party tools
add 'skipTrivia' parameter to scanner
fix documentation for {Ui,I}nt{8,16,32}Array
Finally using new tree.
Changed order of count check.
Amended test for quoted module names.
Renamed file.
Added fourslash tests.
respond to code review comments
respond to code review comments
Addressing CR feedback
Re-added tests.
Adding rename tests.
Address CR feedback.
Moved nav bar functionality into more 'functional' style.
move helper functions inside the scope of the main function
move getTodoComments to the new tree
Update LKG
Remove some unused variables
Switch to createCompilerDiagnostic for an invalid root file
Support for protected members in classes
respond to code review comments
Minor fix on checking getEmitOutputWriter
Change getEmitOutputBaseline
Update checking for semanticErrors and fix spelling
Implement the getRenameInfo language service entrypoint.
Respond to code review comments
respond to code review comments
Add getCurrentDirectory and getDefaultLibFilename into interface for host
resolve merge conflicts
merge with master
use NodeFlags.AccessibilityModifier in places where we need NodeFlags.Private | NodeFlags.Public
Add implementation of getNavigateToItems based on the new compiler
Remove concatenation of syntacticErrors instead return immediately if encountering any error
CR feedback.
split 'find' function into 'find' and 'findRightmostChildNodeWithTokens'
Classification tests.
Adding classification tests.
address CR feedback: renames, handle smart indentation in type argument lists in type references
Spelling corrections.
fix typo
disable tests that are dependent on QuickInfo and Signature help work
Update tests to remove other type paramters from constraints
Allow built in types to show up in the completion list as keywords instead of types
remove debug statements from tests
Do not colorize a keyword following an identifier.<newLine> as it is likely an error scenario as the user is typing
Add better error recovery logic for cases with line ending with "id." followed by a declaration e.g. "class id"
Change test untill we have filtering on location
Short-circuit semantic operations within with blocks
add basic support for contextual object literal completions
Use scanner APIs to identify if a display name is valid completion entry
Support enum and module completions
Filter private mebemers in class completions
expose getAncestor method
do not consider keywords tokens for compleation reasons, to allow completion on this and super
handel completion on missing symbols correctelly
Get correct kind for generic symbol completion entries
Enable completion on expressions
Enable completion fourslash tests
addressed CR feedback: use isDeclaration from parser, drop 'useTabs' check
Add a test to make sure types are being checked for privates
Check that private properties originate in the same declaration
address CR feedback
Adding semantic classification.
Add support for syntactic classification.
update JakeFile
when looking for a start node consider only nodes that can contribute to indentation
minor code cleanup
Adding baseline that was missed from previous merge.
Added error 'prologue' to each error baseline.
remove singleTokenIndenter.ts
Add getEmitOutput baselines
Addressed CR feedback.
Improved error messages
Report circular type inference errors with -noImplicitAny
use actual indentation if possible
added support for smart indentation in the middle of list items, updated test baselines
added support for smart indentation in the middle of list items, updated test baselines
added handling for smart indentation in the beginning of list items, updated test baselines. TODO: smart indentation in the middle of list items (2 failing tests)
Harness now prints category and code when running tests.
Added tests.
Build the declaration files generated in the rwc run to make sure there arent any errors
update test baselines
Update package.json
Update LKG
Simple fixes for the tests
initial revision of SmartIndenter (TODO: indentation in list items)
added optional 'sourceFile' argument to methods of Node to avoid unnecesary tree walk
Simplified ownership code for continue/break statements.
Minor CR feedback addressed.
Add asserts for bounds on diagnostics
Remove getCurrentDirectory and getDefaultLibFilename from LanguageServiceShimHost
Remove getDirectory from LanguageServiceShimHost
Change getCurrentDirectory and getDefaultLibname from passing around function to its final value
Minor spelling and spacing fix
Add getEmitOutput and update call to getCurrentDirectory
Adding a comment
Modified tests and added a test for labeled continues in a switch block.
Check for repeating meta-data flag.
Update testcases to use baseline
Chage test framework from manual comparing the result to using baseline; Add compilerOptions into fourslash
Update getEmitOutput test files to use new meta-data flag
Add meta-data flag name to modify compilationSettings
Move checking semantic diagnostics into emitFiles function rather than getEmitOutput
Change getCurrentDirectory and getDefaultLibname from passing around function to its final value
Add check if the compilationSetting object hasOwnProperty before add the property to TypeScriptLS object
Remove enableSingleOutputFile boolean and use singleOutputFilename to check if singleOutputFile is specified
Expose function shouldEmitToOwnFile to be called in services.ts
Minor spelling and spacing fix
Add getEmitOutput test files
Update fourslash for getEmitOutput
Add getEmitOutput and update call to getCurrentDirectory
Add old test files that use getEmitOutput
Make getCurrentDirectory and getDefaultLibFilename invocation in management side
Extracted 'break'/'continue' aggregation into common helper function.
Accepting new baselines
Implemented getOccurrences for 'constructor' keywords.
Changed logic for break/continue search in switch statements and loops.
Implemented getOccurrences for for/for-in/while/do-while loops and their breaks/continues.
Addressed CR feedback.
Separated 'super'/'this' keyword searching to simplify logic.
remove unused file
Update LKG
Adding noErrorTruncation compiler option
add constructor paramters to Blob
Disabled findAllRefs for 'this'/'super'.
Truncate long types in error messages
Added tests for getOccurrences on super.
Basic implementation without tests for findAllRefs/getOccs for 'super' keywords.
Updating Language Specification
Corrected some spelling/grammar issues.
fix typo
Corrected codegen to support shadowed module names.
Conformance coverage for spec change #589
Properly report errors for failed type assertions
move getWidenedType* functions inside the getWidenedType function scope
respond to code review remarks
Addressed CR feedback.
respond to code review remarks and reverted tryResolveScriptReference to resolveScriptReference
Accepting new baselines.
Deferred type checking of function expressions to support circular definitions.
Add numeric indexer to HTMLElementCollection
Made a getThisContainer function.
Use double quotes in declaration file's reference path generation so that quotes in file name wouldnt affect reference resolution
add negative test for invalid references and declaration emit
Do not show noImplictAny errors when widening for a cast expression
Added fourslash tests for 'this' keyword findOccs/findRefs.
getRefs/getOccs support for 'this' keyword.
Do not emit references in generated declaration files if the --noresolve flag was set. This fixes a crash in the compiler when generating declarations with /// reference and noResolve
Negative test cases for collision of export and require declaration names
Addressed more CR feedback.
Addressed CR feedback.
Address CR feedback
Cache unsuccessful file lookups for improved performance.
Update .gitignore
Speed up RWC IO playback by removing unfound files from resolution candidates
Correctly handle zero-length test inputs
Language Specification updated to version 1.1
increase the timeout for RWC tests
Import Definitlly typed unit tests into the RWC suite
Return undefined instead of null.
Corrected linepos assignment
Handle missing files more gracefully; big perf gains in loggedIO
Add timestamp to capture files for better tracking
Correctly handle async calls; fix formatting
Add jake task for making instrumented tsc
Report error if exports or require is used for declaration name in external module
Handles all the line breaks in calculation of line-character position         lineFeed = 0x0A,              // \n         carriageReturn = 0x0D,        // \r         lineSeparator = 0x2028,         paragraphSeparator = 0x2029,         nextLine = 0x0085,
Utilize getContainingFunction in services.
Added tests for getOccs on return keywords.
Added getOccs support for return keywords.
Use isWhitespace in getIfElseOccurrences.
Update LKG
Added missing break statement.
Added test case for broken if-elses.
Addressed CR feedback, no longer highlighting elseifs with comments between.
ensure that sys is not used outside tsc.ts
Update baselines
Added getOccs support for if/else keywords, and some tests.
remove unused file
Revert condition inside shouldWriteTypeOfFunctionSymbol
Don't use UseTypeOfFunction in typeWriter
Print Array as T[]
Print pure namespaces as unknown
Print type of super
Update LKG
Removed assertion.
What's in a name anyhow?
Update type baselines
Addressed CR feedback.
Made 'isAnyFunction' more exhaustive as it should be.
Update baselines
Replaced ES5 functions with analogous core.ts ones.
Better coverage against function boundaries.
Moved null-guards to appropriate places, added helpers.
Addressing CR feedback.
Handled function boundaries.
Update baselines
Deferred resolution of object literal members to support recursive types.
Support for switch/case/default/break in getOccs
Added tests.
Made getOccs more resilient.
Implemented getOccsAtPos for try-catch-finally.
Beginning special casing for getOccurrencesAtPosition.
add new unit test for used and unused imports
add new unit test for getScriptLexicalStructure
Removed unused method.
Re-added fourslash tests, corrected failures.
Added trivial syntax case.
Initial work on getOccurrencesAtPosition.
Adjust baselines after rebase
More type baseline changes
Baseline and harness changes
use Identifiers list from the parser to filter getReferences instead of bloomFilters
remove bloom filters
Ensure range for string literal references are within the quotes to ensure rename is successful
Support external module names correctelly
Implement getScope
Emit pinned/tripleslash reference comments of elided module declaration
Emit pinned/tripleslash reference comments of ambient declarations
Emit pinned/tripleslash reference comments of interfaces
Emit pinned/tripleslash reference comments of signatures
Updated error reporting within harness to match that of tsc.
Correct the declaration emit for overload implementation if there is single overload signature
Made diagnostic lowercase.
Turned redeclaration into a string append.
Emit leading comments for '}' of the constructor block
Emit leading comments for '}' of the function block
Emit error codes when reporting diagnostics.
Enable test case for declaration emit for multiple file emit scenario
Emit new lines between source files emit so that the file contents always start on new line
use isDeclarationOrFunctionExpressionOrCatchVariableName instead of isDeclarationIdentifier in the language service and remove unused functions
Support getReferences on rightside of export assignment and import statements
Remove some unused variables
update getSymbolInfo
respond to code review comments
Update LKG.
Some minor changes as per code review feedback
Compiler test case for commit 0636a06
Baseline sourcemap record from rwc runner
Emit the error file contents and highlight it to show errors for rwc errors
Simplify rwc runner to use the common functionality to get errors, js files etc as part of harness compilation
Use new tree to get Bloom filters
Use local source file text to record source map span start
Emit declarations and sourcemaps in rwc test runner
Emit the line, col information into the rwc runner error baselines
Update reference from tc.js to tsc.js
Support resolution of any part of the RHS of an import
Emit detached comments for constructor body
Emit detached comments for function body
Emit copyright headers before anything else in the sourceFile
Include previous token trailing comments for parameters and type parameters as part of leading comments of them
spelling fix
Add bits in tokens to mark if they contain leading/trailing trivia.
Temporary fix for import case in getTypeOfNode
Address PR feedback
Update LKG.
Update LKG
Reassigned diagnostic codes.
Accept new typeWriter baseline
Clean up local state after the describe callback for each compiler test
Accept recent changes in typeWriter baselines
Baselines update after comment formatting pull request (#455) was merged
Updates after merge from master
Support filtering references based on meaning
include inherited properties from base classes and interfaces in getReference results
add new test for getReferences on enums
support getReferences on properties and index access wiht numeric and string values
Support getReferences on contextually typed object literal properties
support getReferences on object literals
add support for getReferences on property string index access
Handel getRefrences for labels
add some debug methods
Add basic getReferences implementation
disable resolution for now
Enable some more tests
enable reference tests
expose utility functions
enbale getReferencesAtPosition
extract helpers
Indentation.
Rename certain parameters.
Remove unnecessary LS code.
Contextual typing of array literals is now based on the presence or absence of numerically named properties and doesn't directly test for tuple types.
Accepting new baselines after merge.
baseline for typechecking --declaration
fix --declaration typechecking (complex case)
Normalized path for localized diagnostics message map.
Simplify comment alignment logic
add rename localization messages.
Makes sure leading comments are emitting only once
Emit comments for expression statements
Emit comments for if statement
Emit leading/trailing comments of ifStatement
Emit leading/trailing comments for return statement Note the detachedComments and copyright headers comment emitting is not part of this change
Change marshalling form for indentation.
Add todo comment tests.
Stop referencing 'this' in functions.
Accept type baselines
Remove problematic test (should be added back after issue #463 is fixed)
Only give to typeWriter files that were part of compiled program
Add logic in checker for getting type of export assignments and imports
Adjust TypeChecker to have separate method for getApparentType
Print types for arbitrary expressions in typeWriter
Change getTypeOfNode to take an apparentType flag
Handle type declaration nodes
Add getTypeOfNode function to checker API
TypeWriter logic for identifiers
Make the harness invoke typeWriter
Modified the emitComment logic to handle emitting leading or trailing spaces depending on flags Leading comments have trailing separator while trailing comments have leading space This removes the extra trailing space in the trailing comments
Emit the new line before leading declaration comments in the declaration file if source code had it
Test cases for trailing comments for import declaration
create instance of the checker prior to making any types
Test cases for trailing comments for modules
Test case for trailing comment of enum
Test cases for trailing comments for class and constructor
Test cases for trailing comments for properties
Test cases for trailing comments for functions and methods
Test cases for trailing comments of accessors
Test cases for trailing comments of object literal
Trailing comment tests for parameters, fixes the trailing // comments and parameter indentation
Tailing Comments for var declarations
Start leading comments on new line if the comment starts on different line as node
merge with mastr
Removed lookahead for simple arrow function expressions.
defer creation of fullTypeCheckChecker
Initial port of the new language service work.
Emit space before emitting trailing comments
Some refactoring as suggested in code review feedback
Align the multiline comments in the generated outputs by retaining its position relative to the first line in the comment
Making sys.getMemoryUsage optional.
Include memory usage in -diagnostics report
Emit trailing comments
Declaration comments for parameters in .d.ts file
Declaration comments for call, constructo and index signatures in .d.ts
Declaration comments for function declarations in .d.ts
Declaration comments for accessors in .d.ts
Declaration comments for the variable declaration in .d.ts
Declaration comments for the property declaration in .d.ts
Declaration comments for the interface declaration in .d.ts
Declaration comments for the class declaration in .d.ts
Declaration comments for the type parameter declaration in .d.ts
Declaration comments for the enum member declaration in .d.ts
Declaration comments for the enum declaration in .d.ts
Declaration comments for the module declaration in .d.ts
Write JsDoc comments for ImportDeclaration in .d.ts file
Comments for import declaration
Comments for module declaration
Emit commens for enum and enum members
Emit comments for class and constructor
Emit comments for properties
Emit comments for function and method declarations
Emit comments for accessors
Emit the property assignment comments of the object literal
Emit leading and trailing comments for parameter
Emit comments in the javascript code if --removecomments is not specified
Remove unnecessary sort call in alias declarations that get written
added comment to fullTypeCheck parameter
Accepting new baselines.
added fullTypeCheckFlag to TypeChecker
Add coverage folder to gitignore file
Adding error message for empty tuple types.
Addressing CR feedback.
update test
Disable test as it needs resolution which the test harness does not support yet
remove fullTypeCheck flag as it may lead to missing errors if we make any requests with fullTypeCheck=false and we cache any result
Port over changes to the ScriptSnapshot API from the languageService-v2 branch.
support outlining for arbitrary blocks
Removed duplicate diagnostic.
Addressed CR feedback, removed NoPrefix messages.
baseline update
Make sure fourslash tests are running
Ensure scriptsnapshot is set when creating a source file
Update LKG.
use writeSync instead of stdout.write to make sure that stream is flushed
Rearranging members of Array<T> to improve error reporting.
switch to getStart
adressed CR feedback: use pos instead of full start
added tests for <reference path="" static='' />
Consolidate logic to use the lib in one location in the tests
switch to using OutliningSpan instead of TextSpan to better support language service
Addressing CR feedback, adding baselines.
Make changes to report error if the type used from external module cannot be named Adds test cases too
enable outlining atop of new compiler
Adding support for tuple types (e.g. [number, string])
fix: /// <reference path="..." static='true' />
fix typo: sourcemap -> sourceMap
Add optional index and output to String.match
RegExpExecArray should extends Array<string>
During qualification if we are looking in value space, the left qualifier meaning is also value
Removing unused variable.
clean up tests
revert changes to classify a keyword as an identifier if the last token is keyword
Adding getLeadingComments and getTrailingComments methods to scanner.
Use typeof function in the declaration emitter instead of unwinding first level
Simplifying createArrayType recursion check. I made these changes during some unrelated experiments but I'd like to keep them.
Report error if the entityname reference in the import declaration is using private module
Check for the accessible symbol from exported import
Add some huristic optimization to not colorize a keyword if precceded by a dot or a keyword. this should handel cases for "a.var" or "module string { }"
add unterminated multiline comment classification tests
Enable unit tests for DocumentRegistry
remove unused folders from unitest runner
move formatting unit tests to a diffrent folder
delete unused tests
Enable clorizer unit tests
remove unused property
wire classifier to use new compiler implementation
consistentlly compute the length of an unterminated multiline comment
Update the project runner to emit errors in more readable way
Enable project runner to compile generated .d.ts files Uncovered bug in quoted .d.ts compilation
Recovered deleted, renumbered existing, reworded some.
Removed more unused diagnostics.
Removed unused diagnostics.
Removed duplicate messages from diagnosticMessages.json.
Removing bug numbers from the testcases which are fixed and adding declaration generation in few testcases
Simplify checking for octal literals in parser
Emit the declarations for the chained import usage in the export assignment
Added missing semicolons
Address feedback
fix comment
adjust perftc to match the most recent implementation of createSourceFile
Handle sys.exit in perftc
rename tc.js to tsc.js
fixed build breaks in perftc
Report privacy errors for accessors
Add test for octal literals in es3 strict mode
Error on octal literals in ES5 and strict mode
Add es5 directive on scanner es5 tests
Scan octal literals
Report privacy errors on return types
Report privacy errors on parameter types
Test case for the privacy check of variables and properties during declaration emit
Ambient module declarations (exception import declaration) are visible
rename test
Style and comments.
change name of the flag to emitBOM
do not reorder signatures from derived and base types
Addressed code review feedback.
Test baselines after asynchronous alias declaration writing
Emit unexported aliases that need to be emitted to .d.ts to make correct result
Test baselines because of change
make the BOM visible in the test output
Add tests for generateBOM switch
add generateBOM switch
Added more comments and todos as per code review feedback
Remove ByteOrderMark
Rename lib.scripthost.d.ts to lib.scriptHost.d.ts
Perform an explicit return just in case sys.exit fails.
Explicitly supply generic argument for 'compareValues'.
Addressed code review feedback.
Wire cleanupSemanticCache
respond to code review comments
Add uptodate checks for program object to avoid recomputation if not needed
Update check for syntax tree existance
add missing semicolons
fix misplaced brackets
fixed check for call\construct signatures in interfaces
Change variabel names: * documentsByName to sourceFilesByName * getSymbolOfIdentifierLikeNode to getSymbolInfo
Code style: Missing semicolons
Revert "remove documentsByName"
Consistently record contextual types in function expressions. Removing check that would guard against recording contextual type. The NodeFlags.ContextChecked flag already protects against assigning more than once.
adapt to changes after merge
undo moving unknownSymbol to global
Got rid of that cscript-breaking comma.
remove documentsByName
Style and comments.
rename values named document to sourceFile
Consolidate Document and SoruceFile
Addressing CR feedback.
Removing trailing comma that breaks cscript.exe.
Addressing CR feedback. checkImplicitAny now returns void.
Minor edits, no longer release 'program'
Changed messages, got rid of 'oldProgram'.
Update LKG
Implemented --help.
update test to add true and false values
Add new go to def test
Make goto def jump to labels across function boundries
move identifier-like node handleing (e.g. super, this, string property access etc..) to the checker
Adding test output file.
Adding regression test for #325
support goto def on object literal properties
Add timeout for CI server and switch to min reporter since dots are mostly useless there
Use compiler directly in fourslash runner so we can avoid repeated compile overhead
Add new GotoDefinition tests
move exportAssignSymbol to symbolLinks
Add support for goto def on external module name
Remove debugger statements from fourslash tests
Update getSymbolOfIdentifier to ensure we are gettting the alas symbol in both type and value positions
emit this capturing as a first action in the constructor
Introduced fullTypeCheck flag. checkFunctionExpression only type checks function body if fullTypeCheck is true.
Added ArrayBuffer.slice() to extensions.d.ts
Changed watchFile callback behavior.
Addressed code review feedback.
Wire getDefinitionAtPosition using the new compiler implementation
More changes to address code review comments
Accepting new baselines. Previous commit fixes overly aggressive -noImplictAny reporting. In the test case the source of the error is the 'getAndSet' property that implicitly gets type any. The fact that the setter then gets type any isn't actually an error.
Restructuring and cleanup. Changed binder to record catch clause instead of catch variable as symbol declaration. Restructuring of getTypeOfVariableDeclaration and getTypeOfVariableOrParameterOrProperty methods. Restructuring of checkFunctionExpression method.
Support the '--watch' compiler flag.
added test for skipped node case
addressed CR feedback: changed error message
update LKG
disallow statements between overloads
Respond to code review comments: * Change comment to say "noresolve=false" in shims.ts https://github.com/Microsoft/TypeScript/commit/05eeba5bc95f9a39ceb9c17b5674ed7135d74aed * Switch newline to "\r\n" https://github.com/Microsoft/TypeScript/commit/9395eeaedbb4279480c306f88e7916fa9694de31 * Use hasOwnProperty for Map types https://github.com/Microsoft/TypeScript/commit/212c18460281cac5b5be5239d45f7d04212f62d8 * Switch "s" to "S" in typescriptServices.ts filename https://github.com/Microsoft/TypeScript/commit/9061e58dffbeaf3f72cee1c6ca6d8fc0b98b1ea5 * Change method names in Node to be more detailed
Pull model for contextual types. New baselines reflect a couple of unrelated bug fixes.
Moved error checking for command line options around.
Accept object literal commas in ES3, preserve in ES5.
update error positions after rebase
Use correct casing for file references
Print version number for --version.
react to changes after rebase
remove unused interface
enable fourslash tests by default
Enable passing fourslash tests
enbale fourslash tests
enable formatting tests
delete unused file
move failing tests to old
move todoComment tests to old for now
remove unused methods
Change services output file name to typescriptservices.js
Add missing getNewLine method to test implementations of CompilerHost
remove unneded ts. qualifiers
switch document to an interface
move DocumentRegistry to an interface
remove _ prefix when applicable
merge completion helpers in services.ts
merge keyword completions in services.ts
Move updated code to the ts namespace
remove the I prefix from interface name
Add Logger definition to services.ts
move logInternalError to where it is used
Switch classes to interfaces
reorganize definitions
remove some more unused files
consolidate all services in one file: services.ts
clean up coreServices
Switch classifer to a function
remove unused diagnostics interfaces
Clean up code and types in typeScriptServices.ts
remove the 'I' prefix from interface names
only expose needed types
move TypeScriptServicesFactory to shims.ts
some more cleanup
switch some more classes to interfaces
Remove the "I" prefix from interface names
Switch LanguageService from a class to a function
Remove unused type
Delete unused files
Move ByteOrderMark to services
remove unused files
use Map instead of IIndexable
remove dependency on settings
Switch some more classes to interfaces
use Map instead of StringHashTable
wire in getCompletions
Ensure SimpleArrowFunctionExpression has a NodeArray as its paramter as ForEachChild expexts that
wire quick info
Do not use noResolve with the LS
add module to defaults, and cleanup document management
Change classes into interfaces
cleanup
push newline to compilerhost instead of using sys directelly. This allows the language service to set it, as sys is not defined in language service scenarios
initial change
Update LKG
No longer emit trailing comma on object literals.
Simplified error recovery by just using 'parseTryStatement'.
Added tests for missing 'try' parsing
Gracefully handle 'catch' and 'finally' blocks without a preceding 'try' block.
comments updated
Increase test timeout to try to prevent occasional spurious Travis-CI failures
added comments
localize special case (globalArrayType === undefined) in getTypeFromArrayTypeNode
Disallow modifiers on export assignments (fix #164)
Remove isSemicolon (fix #200)
Update error message to be more consistent with others
Gracefully handle accessor declarations in ambient classes.
Improve the error in a 'for in' statement
Typo fixed in CONTRIBUTION.
use symbol links to access global array type
use getEffectiveDeclarationFlags to get Export flag
Properly set exit code for process. Supercedes #246. Includes provisions for buggy behavior of WScript.Quit.
Merging with master. Accepting new baselines (not sure why this wasn't already done).
update comments
Addressing CR feedback.
Addressed code review feedback.
Address feedback
merged with upstream
Trying different after_script command for code climate
augment check for colliding declaration spaces
check groups of local symbols
Use dot reporter for code coverage so it doesn't overflow Travis-CI's log limit
Turn on Code Climate integration
updated test baselines
added comments
update check for object literal properties according to ECMA spec
enabled strict mode
Add interface LabelledStatementInfo
added comments
Add tracking for labelled statements, and errors on labelled jumps
fix node_module path in Jakefile (mac too)
missing semicolon fix
Make sure we delete projects tests baselines on errors in jake
Add error handler to better debug issues when jake launches external processes like mocha
More cleanup
Cleanup
update check for object literal properties according to ECMA spec
Add consumption points and error reporting for labelled statement errors
enabled strict mode
Remove inModuleBody
Improved "certainty" when parsing arrow-function-lookin' expressions.
Add errors for break and continue statements
Track control flow contexts in the parser, and give errors for break, continue, return
Covered more cases for arrow functions omitting arrows.
do not propagate property name as name for function expression
Addressing CR feedback. Making allowReservedWords parameter of parseEntityName non-optional.
Be less clever, just use \r\n for newlines by default, tests can opt into different newlines, fix one more file casing test
Make a test that explicitly sets newline type
Trying to fix newlines in sourcemap baselines for *nix
Renames of existing baselines with casing to match the test files
Delete some baselines so we can rename them with different casing for Linux
Removed parentheses around arrow function parameters.
Improved lookahead for arrow functions.
Type check the expression of the 'with' statement
Initial work to enable Travis-CI support
check groups of local symbols
Addressing CR feedback. Adding comment to explain source type instantiation. Adding a test case.
Give a semantic error on with statements
Changed error message for annotated functions lacking return statements.
Changed check on annotated functions/getters to only look for return statements.
Minor renaming.
Removed TODO relating to the task I just fixed.
Complain when a non-void/any function lacks a return expresson.
Changed error spans for duplicate default clauses, added tests for it.
Added checking for switch statements with multiple default clauses.
Addressing CR feedback.
Accepting baselines.
Improving code and addressing code review feedback. Binder now builds more generally useful linked list of all container declarations. Emitter uses original spelling when creating unique local container names.
Improving code and addressing code review feedback. Binder now builds more generally useful linked list of all container declarations. Emitter uses original spelling when creating unique local container names.
Update README.md
Update README.md
Condense all error spans to just the name for variable, class, interface, module, enum and enum member
Address PR feedback
Update baselines for not emitting when module flag is not specified
Remove error about missing module flag from checker
Add error about missing module flag to createProgram
fixed typo in comment
Checker and emitter changes to report errors on inaccessibility of symbols when writing types in declaration file
Make the symbol writing api on the text writer
emit 'use strict' at the beginning of the function
Addressed code review feedback.
Better error recovery for when an arrow function is missing a curly brace.
added collision check for '_this'
Updating with code review feedback
fix typo in function name
Pulled out the d.ts compilation into separate it block
Issue# 144: Do not emit the name of the rest paramter in constructors
added new strict mode test
Report global errors and re-enable assert for the number of errors reported
Enable compiler runner to report the errors from compiling generated declaration files
emit prologue directives as first lines in file
Add some new shortcuts for tests options
relax the restrictions to reference comment shape
do not propagate function name in property accessors
renamed isEmitToOwnFile to shouldEmitToOwnFile as per feedback
Cleanup temporary project output after running tests
Support automatic semicolon insertion in class member declarations.
Update README.md
Update README.md
Renamed emitToOwnOutputFile to isEmitToOwnOutputFile
Add more text to the README.md
do not check inherited properties if interface has one item in heritage list
New baselines.
Update README.md
Addressing code review feedback.
Update tsc
Update package.json
Update .gitignore
Update .npmignore
Moved the emit functionality into emitFiles
Remove assert
Removed unnecessary check for commas in 'parseDelimitedList'.
Better error recovery when errant semicolon found in a class.
Incorporating code review feedback
When importing, only check for reserved type names when importing a type.
Error for more than one enum omitting an initial initializer
Remove SymbolLinks.typeChecked
Update CONTRIBUTING.md
add code review comments
Incorporating code review feedback.
Use the isDeclarationVisible in checker to determine if the declaration needs to be emitted This would help in unifying logic of when to check if the type is visible
Check if accessible symbol needs futher qualification
Check if there is alias symbol in the scope corresponding to the symbol whose name we are trying to get in the symbol table
Start emitting qualified path if the current symbol is not visible in enclosing declaration Note that this doesnt handle aliases yet.
More I/O fixes Support for --charset command line option File read and write errors are propagated into compiler diagnostics emitFiles returns diagnostics in EmitResult
add new lines
remove some more smart quotes
add contribution guidlines
add contribution guidlines
fixed references in perftc
Do not emit arrow style call signatures when writing T of T[]
Emit the types in declaration file
Report error on unclosed multiline comment.
Do not emit the signature for implementation of overload in the declaration file
Correct the external module check to determine if declaration is part of export assignment
Correct the condition for variable statement emit in the declaraiton file
Emit alias declaration if its name is used as identifier of export assignment
Emit declaration if its identifier is used in export assignment of external module
Emit global context declarations into the declaration file
Responding to CR feedback
Updating some tests for resolved bugs
add prefixes for getCanonicalName
moved getCanonicalName to 'core'
Preserve trailing commas on array- and object-literals.
Support emit for trailing comma in array literals.
Syntax error for nonambient module with a quoted name
Remove unnecessary isAmbientContext function
derive value of 'useCaseSensitiveFileNames' from underlying platform for node base implementation of 'sys'
Update the readme with links to docs, fixed
Update the readme with links to docs
Add snapshot of compiler sources
Initial commit
