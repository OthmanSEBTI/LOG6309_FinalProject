test: Split overly large util_tests.cpp file
test: Don't pass add_to_wallet option to walletcreatefundedpsbt
test: Avoid collision with valid path names in `getarg_tests/logargs`
test: add missing bech32m / BIP86 test-cases to wallet_descriptor.py
univalue: string_view test
log: mempool: log removal reason in validation interface
test: fix intermittent failure in p2p_sendtxrcncl.py
rpc: doc: add missing option "bech32m" for `change_type` parameters
.python-version: bump patch version to 3.6.15
doc: mention BIP86 in doc/bips.md
test: remove unused `CHANGE_{XPRV,XPUB}` constants
refactor: move url.h/cpp from lib util to lib common
build: add missing event cflags to libbitcoin_util
doc: correct deriveaddresses RPC name
scripted-diff: wallet: rename AvailableCoinsParams members to snake_case
wallet: group AvailableCoins filtering parameters in a single struct
RPC: listunspent, add "include immature coinbase" flag
tests: Test Taproot PSBT signing with keys in other descriptor
tests: Use new wallets for each test in wallet_taproot.py
psbt: Include output pubkey in additional pubkeys to sign
sign: Fill in taproot pubkey info for all script path sigs
test: fix intermittent failure in feature_index_prune.py
test: fix intermittent failure in rpc_getblockfrompeer.py
refactor: Silence GCC Wmissing-field-initializers in ChainstateManagerOpts
Exclude rand from debug log
net: Avoid SetTxRelay for feeler connections
bench: benchmark transaction creation process
wallet: SelectCoins, return early if target is covered by preset-inputs
wallet: simplify preset inputs selection target check
wallet: remove fetch pre-selected-inputs responsibility from SelectCoins
wallet: encapsulate pre-selected-inputs lookup into its own function
wallet: skip manually selected coins from 'AvailableCoins' result
wallet: skip available coins fetch if "other inputs" are disallowed
rpc: add missing lock around chainman.ActiveTip()
[net processing] Simplify use of IsContinuationOfLowWorkHeadersSync in TryLowWorkHeaderSync
rpc: make `address` field optional
test: add test for fast rescan using block filters (top-up detection)
rpc: doc: mention rescan speedup using `blockfilterindex=1` in affected wallet RPCs
wallet: fast rescan: show log message for every non-skipped block
wallet: take use of `FastWalletRescanFilter`
wallet: add `FastWalletRescanFilter` class for speeding up rescans
wallet: add method for retrieving the end range for a ScriptPubKeyMan
wallet: support fetching scriptPubKeys with minimum descriptor range index
add chain interface methods for using BIP 157 block filters
ci: Use `macos-ventura-xcode:14.1` image for "macOS native" task
test: Check debug log as well in p2p_sendtxrcncl.py
test: Check correct disconnect reason in p2p_sendtxrcncl.py
ci: Make `getopt` path architecture agnostic
Faster -reindex by initially deserializing only headers
util: add CBufferedFile::SkipTo() to move ahead in the stream
Add LoadExternalBlockFile() benchmark
test: Make `system_tests/run_command` locale agnostic
Update minisketch subtree to latest upstream
Squashed 'src/minisketch/' changes from 47f0a2d26f..a571ba20f9
build, msvc: Drop no longer required macro definitions for leveldb
[net processing] Handle IsContinuationOfLowWorkHeadersSync return value correctly when new headers sync is started
build: remove threadinterrupt from libbitcoinkernel
doc: Rearrange some lines in the dependency graph of libraries
doc: add `scanblocks` to list of descriptor RPCs
test: Test for out of bounds vout in sendall
wallet: Check utxo prevout index out of bounds in sendall
test: Test that sendall works with watchonly spending specific utxos
build: only run high priority benchmarks in 'make check'
bench: surround main() execution with try/catch
bench: explicitly make all current benchmarks "high" priority
bench: add "priority level" to the benchmark framework
test: Test year 2106 block timestamps
test: check for false-positives in rpc_scanblocks.py
test: add compact block filter (BIP158) helper routines
test: add SipHash implementation for generic data in Python
wallet: Correctly check ismine for sendall
Revert "test: check importing wallets when blocks are pruned throw an error"
gui: update peers window "Transaction Relay" label and tooltip
test: Use C++11 member initializers for TestMemPoolEntryHelper
iwyu: Add missing includes
Remove g_parallel_script_checks
Move ::fCheckBlockIndex into ChainstateManager
Move ::fCheckpointsEnabled into ChainstateManager
Move ::nMinimumChainWork into ChainstateManager
Move ::hashAssumeValid into ChainstateManager
Move ::nMaxTipAge into ChainstateManager
test: Remove unused txmempool include from tests
Add test for PSBT input verification
Verify PSBT inputs rather than check for fields being empty
test: Add functional tests for sendtxrcncl message from outbound
test: Add functional tests for sendtxrcncl from inbound
test: Add unit tests for reconciliation negotiation
p2p: clear txreconciliation state for non-wtxid peers
p2p: Finish negotiating reconciliation support
Add helper to see if a peer is registered for reconciliations
p2p: Forget peer's reconciliation state on disconnect
p2p: Announce reconciliation support
log: Add tx reconciliation log category
Adjust `.tx/config` for new Transifex CLI
add 0xb10c builder key
doc: fix typo in doc/libraries.md
doc: remove library commentary from src/Makefile.am
test: use MiniWallet for rpc_scanblocks.py
add lock annotation for FeeFilterRounder::round()
refactor: Use type-safe time point for CWallet::m_next_resend
ci: Use Multi-ToolTask in "Win64 native" task
ci: Use all available CPUs for functional tests in "Win64 native" task
test: move SyncWithValidationInterfaceQueue() before Stop() in txindex_tests
test: silence TSAN false positive in coinstatsindex_initial_sync
Adjust RPCTypeCheckObj error string
refactor: Replace m_params with chainman.GetParams()
iwyu: Add zmq source files
sync: rename AnnotatedMixin::UniqueLock to AnnotatedMixin::unique_lock
sync: remove DebugLock alias template
sync: avoid confusing name overlap (Mutex)
wallet: have prune error take precedence over assumedvalid
docs: fix m_children to be a member of CTxMemPoolEntry
rpc: Return coinbase flag in scantxoutset
test: Remove confusing DUMMY_P2WPKH_SCRIPT
test: update feature_config_args.py
util: warn if reindex is used in conf
util: disallow setting conf in bitcoin.conf
tests: Test that PSBT_OUT_TAP_TREE is included correctly
psbt: Only include m_tap_tree if it has scripts
psbt: Change m_tap_tree to store just the tuples
tests: Test that PSBT_OUT_TAP_TREE is combined correctly
test: Prevent UB in `minisketch_tests.cpp`
rpc: add non-regression test about deriveaddresses crash when index is 2147483647
rpc: fix crash in deriveaddresses when derivation index is 2147483647
Validate `port` options
Validate port value in `SplitHostPort`
index: Improve BaseIndex::BlockUntilSyncedToCurrentChain reliability
Remove unused CDataStream::rdbuf method
gui: use fallback value for Version and User Agent during peer connection
docs: improve docs where MemPoolLimits is used
test: use NoLimits() in MempoolIndexingTest
refactor: mempool: use CTxMempool::Limits
refactor: mempool: add MemPoolLimits::NoLimits()
test: Use dedicated mempool in TestBasicMining
test: Use dedicated mempool in TestPackageSelection
test: Use dedicated mempool in TestPrioritisedMining
test: Pass mempool reference to AssemblerForTest
Remove clang-format from lint task
refactor: move run_command from util to common
refactor: Make 64-bit shift explicit
fuzz: pass max fee into ConsumeTxMemPoolEntry
fuzz: add util/mempool/h.cpp
fuzz: add scanblocks as safe for fuzzing
test: rpc: add scanblocks functional test
rpc: add scanblocks - scan for relevant blocks with descriptors
rpc: move-only: consolidate blockchain scan args
ci: Workaround Windows filesystem executable bit loss
net: Set relay in version msg to peers with relay permission
kernel: move RunCommandParseJSON to its own file
build, msvc: Enable C4834 warning
test: Remove unused fCheckpointsEnabled from miner_tests
ci: Allow PIP_PACKAGES on centos
ci: Remove unused package
ci: Use same `merge_script` implementation for Windows as for all
ci: Move `git config` commands into script where they are used
kernel: remove util/bytevectorhash.cpp
refactor: move DEFAULT_BLOCKFILTERINDEX from val to blockfilterindex
refactor: move DEFAULT_COINSTATSINDEX from validation to coinstatsindex
refactor: move DEFAULT_TXINDEX from validation to txindex
refactor: Drop `owns_lock()` call
doc: bump bips.md up-to-date version to v24.0
ci: Run `bench_bitcoin.exe --sanity-check` in "Win64 native" task
test: Use proper Boost macros instead of assertions
test: Check external coin effective value is used in CoinSelection
wallet: Use correct effective value when checking target
refactor: move Boost datetime usage to wallet
fuzz: Limit outpoints.size in txorphan target to avoid OOM
refactor: revert m_next_resend to not be std::atomic
wallet: only update m_next_resend when actually resending
refactor: carve out tx resend timer logic into ShouldResend
ci: Bump vcpkg to the latest version `2022.09.27`
test: add functional test for -discover
test: check importing wallets when blocks are pruned throw an error
refactor: remove unused locks for ResubmitWalletTransactions
wallet: fix capitalization in docstring
Update leveldb-subtree subtree to latest upstream
Squashed 'src/leveldb/' changes from 22f1e4a02f..e2f10b4e47
ci: Use remote pull/merge ref instead of local git merge
signet/miner: reduce default interblock interval limit to 30min
bench: place benchmark implementation inside benchmark namespace
ci: Use git2.34 for lint task
Use `PACKAGE_NAME` in messages rather than hardcoding "Bitcoin Core"
refactor: Do not discard `try_lock()` return value
doc, rpc: mention that `listdescriptors` result is sorted by string representation
build: split ARM crc & crypto extension checks
bench: Add missed `ECCVerifyHandle` instance
p2p: ProcessHeadersMessage(): fix received_new_header
build: remove unused MSVC defines
build: remove stdlib.h from header checks
refactor: use <cstdlib> over stdlib.h
test: check that `listdescriptors` descriptor strings are sorted
Improve getpeerinfo pingtime, minping, and pingwait help docs
Update getpeerinfo/-netinfo/TxRelay#m_relay_txs relaytxes docs (for v24 backport)
Always return getpeerinfo "minfeefilter" field (for v24 backport)
Make getpeerinfo field order consistent with its help (for v24 backport)
build: set D_WIN32_WINNT=0x0601 for mingw miniupnpc
build: fix cflags passing for mingw miniupnpc
build: remove stdio.h from header checks
refactor: use <cstdio> over stdio.h
Correct sanity-checking script_size calculation
test: wait for the expected basic block filter index in `interface_rest`
test: Avoid race in disconnect_nodes helper
build: remove strings.h from header checks
doc: add historical 0.21.2 release notes
doc: add historical 0.20.2 release notes
log: log RPC port on startup
Bugfix: Wallet: Lock cs_wallet for SignMessage
test: check that bumping tx with already spent coin fails
docs: Add 371 to bips.md
build: Bump version to 24.99
rpc: make addpeeraddress work with cjdns addresses
init: Abort if i2p/cjdns are chosen via -onlynet but unreachable
doc: Move -permitbaremultisig to the relay help category
test: Test watchonly imports with passphrase-locked wallet
Use steady clock for bench logging
scripted-diff: Rename time symbols
rpc: Allow importmulti watchonly imports with locked wallet
wallet: AvailableCoins, simplify output script type acquisition
Make miniscript string parsing account for exact script size as bound
Permit delaying duplicate key check in miniscript::Node construction
Bugfix: Wallet: Return util::Error rather than non-error nullptr when CreateWallet/LoadWallet/RestoreWallet fail
Bugfix: Wallet: Wrap RestoreWallet content in a try block to ensure exceptions become returned errors and incomplete wallet directory is removed
contrib: remove outdated comment from symbol-check script
contrib: remove 32bit linux code from release scripts
Use ReadLE64 in uint256::GetUint64() instead of duplicating logic
doc: consolidate & remove release-note fragments
rpc: remove unneeded RPCTypeCheckArgument checks
rpc: treat univalue type check error as RPC_TYPE_ERROR, not RPC_MISC_ERROR
Bump codespell version to 2.2.1
net_processing: add thread safety annotation for m_highest_fast_announce
net_processing: add thread safety annotations for PeerManagerImpl members accessed only via the msgproc thread
net_processing: add thread safety annotations for Peer members accessed only via the msgproc thread
wallet: fix sendall creates tx that fails tx-size check
build: remove duplicate / unneeded libs from bench_bitcoin
build: remove unused libevent cppflags
build: remove unused natpmp / upnp cppflags
test: Add missing syncwithvalidationinterfacequeue
net: drop cs_sendProcessing
net: add NetEventsInterface::g_msgproc_mutex
test: add coverage for 'add_inputs' dynamic default value
qt: Update translation source file for string freeze (round 2)
Revert "doc: note that brew installed qt is not supported"
test/doc: Remove unused syncwithvalidationinterfacequeue
sync: remove unused template parameter from ::UniqueLock
sync: simplify MaybeCheckNotHeld() definitions by using a template
fs: fully initialize _OVERLAPPED for win32
scripted-diff: rename pszThread to thread_name
build: prune BOOST_CPPFLAGS from libbitcoin_zmq
build: remove BOOST_CPPFLAGS usage from bitcoin-tx
sendall: check if the maxtxfee has been exceeded
RPC: bugfix, 'add_inputs' default value is true unless 'inputs' are provided
refactor: use std::string for index names
refactor: use std::string for thread names
doc: add note about snapshot chainstate init
test: add testcases for snapshot initialization
test: move-only-ish: factor out LoadVerifyActivateChainstate()
test: allow on-disk coins and block tree dbs in tests
test: add reset_chainstate parameter for snapshot unittests
validation: add ResetChainstates()
move-only: test: make snapshot chainstate setup reusable
blockmanager: avoid undefined behavior during FlushBlockFile
validation: remove snapshot datadirs upon validation failure
add utilities for deleting on-disk leveldb data
init: add utxo snapshot detection
validation: rename snapshot chainstate dir
db: add StoragePath to CDBWrapper/CCoinsViewDB
rpc: Set RPCArg options with designated initializers
build: extract $(BOOST_CPPFLAGS) from $(BITCOIN_INCLUDES)
build: quiet warnings in system headers installed from homebrew
RPC: unify arg type error message
util: improve bitcoin-wallet exit codes
i2p: use the same destination type for transient and persistent addresses
Revert "guix: Build depends/qt with our platform definition"
guix: Drop perl package
build: Add `-no-mimetype-database` option to qt package in depends
wallet: coverage for loading an unknown descriptor
wallet: bugfix, load wallet with an unknown descriptor cause fatal error
test: verify best blockhash after invalidating an unknown block
scripted-diff: rename CChainState -> Chainstate
[mempool] replace update_descendant_state with lambda
doc: comment "add only reachable addresses to addrman"
test: invalidating an unknown block throws an error
[test] only run feature_rbf.py once
test: Display skipped tests reason
guix: use git-minimal over git
gui: update the screen after loading wallet
qt: Prevent wrong handling of `%2` token by Transifex
qt: Cleanup translation comment
p2p: Don't query DNS seeds when both IPv4 and IPv6 are unreachable
p2p: add only reachable addresses to addrman
fuzz: Remove no-op call to get()
guix: consistently use -ffile-prefix-map
init: allow startup with -onlynet=onion -listenonion=1
fuzz: Avoid timeout in bitdeque fuzz target
RPC: fix sendall docs
univalue: Avoid std::string copies
test: remove Boost Test from libtest util
message-capture-parser: fix AssertionError on parsing `headers` message
build: fix configuring with --without-experimental-kernel-lib
build: sync ax_boost_base from upstream
test: apply fixed feerate to avoid variable dynamic fees
Revert "build: Use Homebrew's sqlite package if it is available"
Prevent data race for `pathHandlers`
test: fix non-determinism in p2p_headers_sync_with_minchainwork.py
QA: rpc_blockchain: Test output of getblock verbosity 0, False, and True
Move blockstorage option logging to LoadChainstate()
scripted-diff: net: rename permissionFlags to permission_flags
net: make CNode::m_prefer_evict const
net: make CNode::m_permissionFlags const
net: add CNodeOptions for optional CNode constructor params
qt: Update translation source file for string freeze
refactor: add LIFETIMEBOUND to blockfilter where needed
CBlockLocator: performance-move-const-arg Clang tidy fixups
Update chainparams for 24.0 release
guix: use --build={arch}-guix-linux-gnu in cross toolchain
rpc: sort listdescriptors result
test: simplify splitment with `sendall` in wallet_basic
Bypass headers anti-DoS checks for NoBan peers
Move headerssync logging to BCLog::NET
tidy: enable bugprone-use-after-move
test: work around bugprone-use-after-move warnings in util tests
test: use `sendall` when emptying wallet
doc: Release notes and other docs for migration
Test migratewallet
descriptors: addr() and raw() should return false for ToPrivateString
Add migratewallet RPC
Implement MigrateLegacyToDescriptor
Implement MigrateToSQLite
test: Test that an unconfirmed not-in-mempool chain is rebroadcast
wallet: Deduplicate Resend and ReacceptWalletTransactions
net: note CNode members that are treated as const
net: mark CNode unique_ptr members as const
net: mark TransportSerializer/m_serializer as const
net/net_processing: add missing thread safety annotations
ui: show header pre-synchronization progress
Emit NotifyHeaderTip signals for pre-synchronization progress
Make validation interface capable of signalling header presync
Test large reorgs with headerssync logic
Track headers presync progress and log it
Expose HeadersSyncState::m_current_height in getpeerinfo()
Test headers sync using minchainwork threshold
Add unit test for HeadersSyncState
Reduce spurious messages during headers sync
Require callers of AcceptBlockHeader() to perform anti-dos checks
Utilize anti-DoS headers download strategy
Move validation option logging to LoadChainstate()
contrib: update testnet torv3 hardcoded seeds
wallet: Refactor SetupDescSPKMs to take CExtKey
Implement LegacyScriptPubKeyMan::DeleteRecords
Implement LegacyScriptPubKeyMan::MigrateToDescriptor
scriptpubkeyman: Implement GetScriptPubKeys in Legacy
Apply label to all scriptPubKeys of imported combo()
Wallet::SetMinVersion - Log the new minversion
test: fix typo for MaybeResendWalletTxs
wallet: trigger MaybeResendWalletTxs() every minute
ci: Increase `windows_container` resources
ci: Force `ccache` package version for MSVC build
doc: add `{import,list}descriptors` to list of descriptor RPCs
scripted-diff: rpc: fix rescan RPC name (s/rescanwallet/rescanblockchain/)
build: prune compat event headers
depends: libnatpmp 07004b97cf691774efebe70404cf22201e4d330d
Use new Join() helper for ListBlockFilterTypes()
Make Join() util work with any container type
net: update hardcoded mainnet seeds for 24.x
contrib: make-seeds updates for 24.x
net: update manual hardcoded mainnet seeds for 24.x
doc: Add my key to SECURITY.md
test: add coverage for invalid parameters for `rescanblockchain`
Add functions to construct locators without CChain
Add bitdeque, an std::deque<bool> analogue that does bit packing.
Add function to validate difficulty changes
refactor: Move ChainstateManager options into m_options struct
fixups for BIP125 doc cleanup
net: remove useless call to IsReachable() from CConnman::Bind()
test: remove unused `norm_prv` parameter
init: avoid unsetting service bits from `nLocalServices`
refactor: use `strprintf` for creating unknown-service-flag string
Update debug logging section in the developer notes
Update -debug and -debugexclude help docs for severity level logging
Create BCLog::Level::Trace log severity level
Unit test coverage for -loglevel configuration option
Create -loglevel configuration option
Unit test coverage for log severity levels
Create BCLog::Logger::LogLevelsString() helper function
Update LogAcceptCategory() and unit tests with log severity levels
Add BCLog::Logger::SetLogLevel()/SetCategoryLogLevel() for string inputs
Add BCLog::Logger::m_category_log_levels data member and getter/setter
Add BCLog::Logger::m_log_level data member and getter/setter
Security config warning
wallet, tests: Test bumpfee's max input weight calculation
Make DUMMY_CHECKER availble outside of script/sign.cpp
test, bumpfee: Check that psbtbumpfee can bump txs with external inputs
tests: Use mocktime for wallet encryption timeout
Remove Join() helper only used in tests
bumpfee: be able to bump fee of a tx with external inputs
bumpfee: Clear scriptSigs and scriptWitnesses before calculated max size
bumpfee: extract weights of external inputs when bumping fee
bumpfee: Calculate fee by looking up UTXOs
depends: Boost 1.80.0
fs: work around u8path deprecated-declaration warnings with libc++
wallet: remove UNKNOWN type from OUTPUT_TYPES array
tests: Test that external inputs of txs in wallet is handled correctly
wallet: Try estimating input size with external data if wallet fails
wallet: SelectExternal actually external inputs
Simplify BCLog::Level enum class and LogLevelToStr() function
test: speedup wallet tests by whitelisting peers (immediate tx relay)
descriptor: check if `rawtr` has only one key.
wallet: Add CWallet::IsMine(COutPoint)
doc: add release note about `/rest/deploymentinfo`
doc: add `/deploymentinfo` in REST-interface
test: add coverage for `/rest/deploymentinfo`
rest: add `/deploymentinfo`
doc: add releases notes for 25504 (listsinceblock updates)
rpc: add an include_change parameter to listsinceblock
refactor: Add lock annotations to Active* methods
Add ChainstateManager::GetMutex(), an alias for ::cs_main
i2p: log "SAM session" instead of "session"
doc: add release notes about the I2P transient addresses
doc: document I2P transient addresses usage in doc/i2p.md
test: add a test that -i2pacceptincoming=0 creates a transient session
net: use transient I2P session for outbound if -i2pacceptincoming=0
net: store an optional I2P session in CNode
build: add example bitcoin conf to win installer
build: include share/rpcauth in tarball & installer
doc: minor updates to guix README
build: reorder cxxflags in intrinsic checks
doc: Remove my key from SECURITY.md
refactor: Remove not needed empty RPC doc std::string
qt: Update source translations for string freeze
wallet: use GetChange() when computing waste
wallet: use GetChange() in tx building
wallet: add SelectionResult::GetChange
wallet: calculate and store min_viable_change
wallet: account for preselected inputs in target
wallet: accurate SelectionResult::m_target
wallet: ensure m_min_change_target always covers change fee
build, qt: Use `mkspecs/bitcoin-linux-g++` for all Linux hosts
build: Add objcopy host tool
doc: Remove no longer needed comments
Update crc32c subtree to latest upstream master
Squashed 'src/crc32c/' changes from 0d624261ef..0bac72c455
build: Adjust `qt/guix_cross_lib_path.patch`
Add functional test for block announcements during initial headers sync
Reduce bandwidth during initial headers sync when a block is found
GUI: remove now unneeded 'm_balances' field from overviewpage
GUI: 'getAvailableBalance', use cached balance if the user did not select UTXO manually
GUI: use cached balance in overviewpage and sendcoinsdialog
GUI: add getter for WalletModel::m_cached_balances field
GUI: sendCoinsDialog, remove duplicate wallet().getBalances() call
wallet: remove duplicate descriptor type check in GetNewDestination
build: optimise arm64 darwin qt build using -O1
wallet: remove unused `nAccountingEntryNumber` field
wallet: avoid double TopUp() calls on descriptor wallets
refactor: Remove trailing semicolon from LOCK2
i2p: add support for creating transient sessions
test: add tests for `datacarrier` and `datacarriersize` options
[coin selection] consolidate m_change_target and m_min_change_target
script/sign: remove needless IsSolvable() utility
[test] make tx6 child of tx5, not tx3, in rbf_tests
psbt: Avoid unsigned int overflow in PSBT_IN_TAP_BIP32_DERIVATION
msvc: Drop `_SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING`
validation tests: Use existing {Chainstate,Block}Man
wallet: Return `util::Result` from WalletLoader methods
refactor: improve readability for AttemptSelection
test: only run test for descriptor wallets
test: add missing BOOST_ASSERT
wallet: switch to new shuffle, erase, push_back
scripted-diff: Uppercase function names
refactor: add new helper methods
net: simplify GetLocalAddress()
build: move raw rule into Makefile.am
refactor: add UNKNOWN OutputType
RPC/Mining: Clean out pre-Segwit miner compatibility code
doc: test: suggest multi-line imports in functional test style guide
test: refactor: deduplicate `DEFAULT_{ANCESTOR,DESCENDANT}_LIMIT` constants
scripted-diff: test: rename `MAX_{ANCESTORS,DESCENDANTS}` to `DEFAULT_{ANCESTOR,DESCENDANT}_LIMIT`
build: package test_bitcoin in Windows installer
build: remove entire docs dir from Windows installer
qt: Update translation source file
qt: Bump Transifex slug for 24.x
refactor: Drop `boost/algorithm/string/replace.hpp` dependency
test: Add test case for `ReplaceAll()` function
outputtype: remove redundant check for uncompressed keys in AddAndGetDestinationForScript
build: fix cleanup of test logs
test: don't rely on usdt block_conn event order
wallet: improve `{LoadActive,Deactivate}ScriptPubKeyMan` log
guix: patch NSIS to remove .reloc sections from install stubs
refactor: wallet: return util::Result from `GetReservedDestination` methods
rest: clean-up for `mempool` endpoints
Make adjusted time type safe
Add time helpers
bench: Add a benchmark for descriptor expansion
test: check that `verifymessage` RPC fails for non-P2PKH addresses
Bugfix: Wallet: Document expectations for AddWalletFlags (now InitWalletFlags) correctly
rpc/wallet: add simulaterawtransaction RPC
[doc] remove non-signaling mentions of BIP125
guix: ignore additional failing certvalidator test
extended keys: fail to derive too large depth instead of wrapping around
descriptor: don't assert success of extended key derivation
(pubk)key: mark Derive() as nodiscard
descriptor: never ignore the return value when deriving an extended key
Change mapWallet to be a std::unordered_map
Change getWalletTxs to return a set instead of a vector
Change mapTxSpends to be a std::unordered_multimap
wallet: Cache SigningProviders
validationcaches: Use size_t for sizes
validationcaches: Add and use ValidationCacheSizes
cuckoocache: Check for uint32 overflow in setup_bytes
validationcaches: Abolish arbitrary limit
cuckoocache: Return approximate memory size
tests: Reduce calls to InitS*Cache()
tidy: Enable two clang-tidy checks
scripted-diff: remove mention of BIP125 from non-signaling var names
refactor: Replace BResult with util::Result
test: Target exact weight in MiniWallet _bulk_tx
test: Add missing static to IsStandardTx helper
Remove unused SetTip(nullptr) code
sort after scripted-diff
scripted-diff: Move mempool_args to src/node
Remove ::g_max_datacarrier_bytes global
Pass datacarrier setting into IsStandard
Combine datacarrier globals into one
Remove ::GetVirtualTransactionSize() alias
Remove ::fIsBareMultisigStd global
Remove ::dustRelayFee
Remove ::IsStandardTx(tx, reason) alias
test: Remove unused cs_main
Remove ::incrementalRelayFee and ::minRelayTxFee globals
Remove ::fRequireStandard global
Return optional error from ApplyArgsManOptions
refactor: Add LIFETIMEBOUND / -Wdangling-gsl to Assert()
test: add support for Decimal to assert_approx
test: MiniWallet: add `send_self_transfer_chain` to create chain of txns
test: use MiniWallet to simplify mempool_package_limits.py tests
test: negative/unknown `rpcserialversion` should throw an init error
bdb: disable Werror for format-security
qt: use patch over sed for guix CROSS_LIBRARY_PATH change
build: Bump Qt to 5.15.5 in depends
addrman: Use system time instead of adjusted network time
Use steady clock for all millis bench logging
doc: empty REVIEWERS file
refactor: remove unneeded temporaries in node/interfaces, simplify code
refactor: make all NodeImpl/ChainImpl/ExternalSignerImpl members public
tidy: run clang-tidy in quiet mode
wallet: Use CalculateMaximumSignedInputSize to indicate solvability
Squashed 'src/leveldb/' changes from 330dd6235f..22f1e4a02f
Update leveldb-subtree subtree to latest upstream
univalue: Remove unused and confusing set*() return value
libxcb: use a patch instead of sed
depends: don't restrict --enable-lto to non-guix cctools
cctools: fixup building with LTO
guix: enable hardening options in GCC Build
guix: pass enable-bind-now to glibc
guix: enable SSP for RISC-V glibc (2.27)
[unit tests] individual RBF Rules in isolation
refactor: log `nEvicted` message in `LimitOrphans` then return void
test: Drop unused boost workaround
refactor: Make const refs vars where applicable
build: Do not export `PKG_CONFIG_{PATH|LIBDIR}` variables
script: actually trigger the optimization in BuildScript
depends: re-enable using -flto when building expat
depends: expat 2.4.8
tidy: enable readability-redundant-string-init
refactor: remove unnecessary string initializations
refactor: Use type-safe std::chrono for addrman time
Add type-safe AdjustedTime() getter to timedata
Add ChronoFormatter to serialize
util: Add HoursDouble
scripted-diff: Rename addrman time symbols
refactor: Remove not needed std::max
depends: always use correct ar for win qt
fix comment spellings from the codespell lint
scripted-diff: Replace NullUniValue with UniValue::VNULL
fuzz: refactor: Replace NullUniValue with UniValue{}
refactor: Make CTransaction constructor explicit
test: remove unused if statements
RPC: Document "asm" and "hex" fields for scripts
Bugfix: RPC/blockchain: Correct type of "value" in getblock docs; add missing "desc"
fuzz: Remove no-op SetMempoolConstraints
test: check that combining PSBTs with different txs fails
test: support passing PSBTMaps directly to PSBT ctor
refactor: make active_chain_tip a reference
refactor: move CBlockIndex#ToString() from header to implementation
CDiskBlockIndex: rename GetBlockHash() to ConstructBlockHash()
CDiskBlockIndex: remove unused ToString() class member
CBlockIndex: ensure phashBlock is not nullptr before dereferencing
doc: BaseIndex sync behavior with empty datadir
ci: remove hardcoded tag list from ci scripts
tracing: do not use `coin` after move in `CCoinsViewCache::AddCoin`
contrib: remove unneeded valgrind suppressions
ci: better pin to dwarf4 in valgrind job
net: convert standalone SetSocketNonBlocking() to Sock::SetNonBlocking()
moveonly: move SetSocketNonBlocking() from netbase to util/sock
net: convert standalone IsSelectableSocket() to Sock::IsSelectable()
moveonly: move IsSelectableSocket() from compat.h to sock.{h,cpp}
doc: update test/README.md
script: default to necessary tags in get_previous_releases.py
Use HashWriter where possible
Add HashWriter without ser-type and ser-version
compat: document redefining ssize_t when using MSVC
compat: document error-code mapping
compat: document sockopt_arg_type definition
compat: document S_I* defines when building for Windows
compat: extract and document MAX_PATH
compat: remove unused WSA* definitions
compat: document FD_SETSIZE redefinition for WIN32
refactor: move compat.h into compat/
refactor: Pass reference to LookUpStats
Add wallet tests for spending rawtr()
If P2TR tweaked key is available, sign with it
Add rawtr() descriptor for P2TR with unknown tweak
ci: Enable IWYU in src/kernel directory
refactor: Reduce number of SanityChecks return values
refactor: Reduce number of LoadChainstate return values
refactor: Reduce number of LoadChainstate parameters
test: add unit test for AvailableCoins
test: functional test for new coin selection logic
wallet: run coin selection by `OutputType`
test: add test for decoding PSBT with per-input preimage types
refactor: move helper `random_bytes` to util library
test: add constants for PSBT key types (BIP 174)
refactor: move PSBT(Map) helpers from signet miner to test framework
refactor: move `from_binary` helper from signet miner to test framework
scripted-diff: rename `FromBinary` helper to `from_binary` (signet miner)
refactor: use CoinsResult struct in SelectCoins
refactor: store by OutputType in CoinsResult
Remove unused includes in rpc/fees.cpp
Remove unused includes from dbwrapper.h
Add missing includes
Add missing includes to node/chainstate
rpc: output parent wallet descriptors for coins in listunspent
rpc: output wallet descriptors for received entries in listsinceblock
spkman: don't ignore the return value when deriving an extended key
guix: Drop repetition of option's default value
refactor: Use chainman() helper consistently in ChainImpl
indexes, refactor: Remove CChainState use in index CommitInternal method
indexes, refactor: Remove CBlockIndex* uses in index Rewind methods
indexes, refactor: Remove CBlockIndex* uses in index WriteBlock methods
indexes, refactor: Remove CBlockIndex* uses in index Init methods
indexes, refactor: Remove CBlockIndex* uses in coinstatsindex LookUpOne function
indexes, refactor: Pass Chain interface instead of CChainState class to indexes
interfaces, refactor: Add more block information to block connected notifications
refactor: Make mapBlocksUnknownParent local, and rename it
tidy: use misc-unused-using-decls
refactor: remove unused using directives
validation: remove unused using directives
depends: default to using GCC tool wrappers (with GCC)
test: add coverage for wallet inconsistent state during sync
build: Check for std::atomic::exchange rather than std::atomic_exchange
wallet: guard and alert about a wallet invalid state during chain sync
Add symlinks for hardcoded Makefiles in out of tree builds
univalue: Return more detailed type check error messages
move-only: Move UniValue::getInt definition to keep class with definitions only
refactor: remove BOOST_*_TEST_ macros
refactor: integrate no_nul into univalue unitester
doc: remove references to downstream
build: Use Link Time Optimization for Qt code on Linux
build: pass -fno-lto when building expat
Move {Load,Dump}Mempool to kernel namespace
Move DEFAULT_PERSIST_MEMPOOL out of libbitcoinkernel
LoadMempool: Pass in load_path, stop using gArgs
test/fuzz: Invoke LoadMempool via CChainState
Move FopenFn to fsbridge namespace
doc: Release notes for default RBF
rpc: Default rbf enabled
Disallow encryption of watchonly wallets
mempool: Use NodeClock+friends for LoadMempool
mempool: Improve comments for [GS]etLoadTried
scripted-diff: Rename m_is_loaded -> m_load_tried
DumpMempool: Pass in dump_path, stop using gArgs
DumpMempool: Use std::chrono instead of weird int64_t arthmetics
Release notes for Miniscript support in P2WSH descriptors
wallet: allow to fetch the wallet descriptors for a given Script
fix gettxout help text
[net processing] Remove CNode::nLocalServices
[net] Return CService from GetLocalAddrForPeer and GetLocalAddress
[net processing] Remove CNode::nServices
[net processing] Replace fHaveWitness with CanServeWitnesses()
[net processing] Remove fClient and m_limited_node
[tests] Connect peer in outbound_slow_chain_eviction by sending p2p messages
[net processing] Add m_our_services and m_their_services to Peer
Use designated initializers for ChainstateManager::Options
Move ChainstateManagerOpts into kernel:: namespace
univalue: Avoid narrowing and verbose int constructors
qa: functional test Miniscript watchonly support
Miniscript support in output descriptors
qa: better error reporting on descriptor parsing error
miniscript: add a helper to find the first insane sub with no child
miniscript: don't check for top level validity at parsing time
rpc: Select int-UniValue constructor for enum value in upgradewallet RPC
wallet: Enable -walletrbf by default
univalue: Throw exception on invalid pushes over silent ignore
refactor: Default options in walletcreatefundedpsbt to VOBJ instead of VNULL
refactor: Make FEELER_SLEEP_WINDOW type safe (std::chrono)
Expose underlying clock in CThreadInterrupt
depends: update urls for dmg tools
test/mempool_persist: Test manual savemempool when -persistmempool=0
test: remove unnecessary parens
Remove atomic for m_last_getheaders_timestamp
refactor: Return BResult from restoreWallet
Prepare BResult for non-copyable types
test: Remove duplicate MAX_BIP125_RBF_SEQUENCE constant
scripted-diff: [test] Rename BIP125_SEQUENCE_NUMBER to MAX_BIP125_RBF_SEQUENCE
wallet: change `ScanForWalletTransactions` to use `Ticks()`
[test] persist prioritisation of transactions not in mempool
move-only: InitializeNode to handshake helper
move-only: Version handshake to libtest_util
Address comments remaining from #25353
wallet: Precompute Txdata after setting PSBT inputs' UTXOs
test: speedup wallet_coinbase_category.py
doc: update the URLs to thread functions in developer-notes
test: refactor: pass absolute fee in `create_lots_of_big_transactions` helper
ci: run USDT interface test in a VM
wallet: refactor GetNewDestination, use BResult
send: refactor CreateTransaction flow to return a BResult<CTransactionRef>
wallet: refactor, include 'FeeCalculation' inside 'CreatedTransactionResult'
Introduce generic 'Result' class
refactor: add most of src/util to iwyu
Remove my key from trusted-keys
refactor: Drop no longer needed `util/designator.h`
build: Increase MS Visual Studio minimum version
rpc, refactor: Add `decodepsbt_outputs`
rpc, refactor: Add `decodepsbt_inputs`
rpc, refactor: Add `getblock_prevout`
doc: list the I2P accept thread in developer-notes
test: add tests for negative waste during coin selection
doc: update for NetBSD 9.2, add GUI Build Instructions
Mention `mempoolfullrbf` in policy/mempool-replacements.md
Update getmempoolinfo RPC with `mempoolfullrbf`
Introduce `mempoolfullrbf` node setting.
guix: patch gcc 10 with pthreads to remap guix store paths
wallet: clean AllInputsMine code, use InputIsMine internally
[net] Move eviction logic to its own file
[net] Move ConnectionType to its own file
fuzz: add low-level target for txorphanage
add glozow builder key
test: Remove -acceptnonstdtxn=1 from feature_rbf.py
Bugfix: Check for readlink buffer overflow and handle gracefully
doc: remove note on arm cross-compilation from build-unix.md
wallet: don't iter twice when getting the cached debit/credit amount
wallet: clean InputIsMine code, use GetWalletTx
wallet: unify CachedTxGetImmatureCredit and CachedTxGetImmatureWatchOnlyCredit
wallet: remove always true 'fUseCache' arg from CachedTxGetAvailableCredit
wallet: remove always false 'recalculate' arg from GetCachableAmount
wallet: remove always true 'fUseCache' from CachedTxGetImmatureWatchOnlyCredit
wallet: remove always true 'fUseCache' from CachedTxGetImmatureCredit
[ci] apply cache size limit and print ccache statistics in "ARM64 Android APK"
[net] Add connection type to NodeEvictionCandidate
[net] Add NoBan status to NodeEvictionCandidate
test, wallet: Add mempool rescan test for import RPCs
rpc, wallet: Document mempool rescan after importdescriptor, importwallet
rpc, wallet: Document mempool scan after importmulti
rpc, wallet: Document mempool scan after importpubkey
rpc, wallet: Document and test mempool scan after importprivkey
rpc, wallet: Document and test mempool scan after importaddress
wallet: Rescan mempool for transactions as well
contrib: dedup `get_witness_script` helper in signet miner
test: pass `dustrelayfee=0` option for tests using dust (instead of `acceptnonstdtxn=1`)
test: adopt USDT utxocache interface tests
test: hook into PID in tracing tests
test: remove wallet dependency  from mempool_updatefromblock.py
doc: Add a release note about the "restore wallet" menu item
add glozow to trusted-keys
Replace GetTime() with NodeClock in MaybeSendGetHeaders()
test: Make the scriptPubKey of MiniWallet created txs mutable
test: Allow setting sequence per input in MiniWallet create_self_transfer_multi
test: Allow amount_per_output in MiniWallet create_self_transfer_multi
test: Allow absolute fee in MiniWallet create_self_transfer
Remove outdated comment
psbt: Check Taproot tree depth and leaf versions
test: refactor rpc_signrawtransaction.py
test: passing a non-positive integer value to `-peertimeout` should throw an error
guix: use elfesteem 2eb1e5384ff7a220fd1afacd4a0170acff54fe56
rephrase error for invalid timeout
wallet: don't add change fee to target if subtracting fees from output
qt: apply translator comments to reset options confirmation dialog
test: pass `datacarriersize` option for tests using large outputs (instead of `acceptnonstdtxn`)
test: let `gen_return_txouts` create a single large OP_RETURN output
Squashed 'src/minisketch/' changes from 7eeb778fef..47f0a2d26f
Update minisketch subtree to latest master
test: assert serialized txouts size of `gen_return_txouts` helper
util: remove MSVC warning pragmas
Use AutoFile where possible
streams: Add AutoFile without ser-type and ser-version
wallet: more accurate tx_noinputs_size
rpc: Disallow gettxoutsetinfo queries for a specific block with use_index=false
build: Clean up `build_msvc/libsecp256k1_config.h`
Revert "bnb: exit selection when best_waste is 0"
fees: Pass in a filepath instead of referencing gArgs
init: Remove redundant -*mempool*, -limit* queries
Don't send getheaders message when another request is outstanding
Cleanup received_new_header calculation to use WITH_LOCK
Move peer state updates from headers message into separate function
Move headers direct fetch to end of ProcessHeadersMessage
Move headers-direct-fetch logic into own function
Move additional headers fetching to own function
Add helper function for checking header continuity
Move handling of unconnecting headers into own function
mempool: Use m_limit for UpdateTransactionsFromBlock
node/ifaces: Use existing MemPoolLimits
mempoolaccept: Use limits from mempool in constructor
mempool: Introduce (still-unused) MemPoolLimits
scripted-diff: Rename anc/desc size limit vars to indicate SI unit
scripted-diff: Rename DEFAULT_MEMPOOL_EXPIRY to indicate time unit
mempool: Pass in -mempoolexpiry instead of referencing gArgs
init: Only determine maxmempool once
mempool: Make GetMinFee() with custom size protected
mempool: Pass in -maxmempool instead of referencing gArgs
pool: Add and use MemPoolOptions, ApplyArgsManOptions
wallet: add taproot support to external signer
gui: reset options, notify user about the backup creation
guix: Remove guix store paths from glibc
guix: Map all guix store prefixes to /usr
wallet: use CCoinControl to estimate signature size
wallet: replace GetTxSpendSize with CalculateMaximumSignedInputSize
test: Test signing psbts without explicitly having scripts
wallet: also search taproot pubkeys in FillPSBT
sign: Use sigdata taproot spenddata when signing
psbt: Implement merge for Taproot fields
psbt, test: Check for taproot fields in taproot psbt test
taproot: Use pre-existing signatures if available
tests: Test taproot fields for PSBT
psbt: Remove non_witness_utxo for segwit v1+
Implement decodepsbt for Taproot fields
Fill PSBT Taproot output data to/from SignatureData
Assert that TaprootBuilder is Finalized during GetSpendData
Store TaprootBuilder in SigningProviders instead of TaprootSpendData
Fetch key origins for Taproot keys
Fill PSBT Taproot input data to/from SignatureData
Implement de/ser of PSBT's Taproot fields
Add serialization methods to XOnlyPubKey
Add TaprootBuilder::GetTreeTuples
Move individual KeyOriginInfo de/ser to separate function
fuzz/rbf: Add missing TestingSetup
test: fix failing test interface_usdt_utxocache.py
rpc: use enum instead of string for filter type
gui: Add Wallet Restore in the GUI
Revert "ci: Increase CPU number for "Win64 native" task"
rpc: add RPCTypeCheck for getblockfrompeer inputs
test: Remove unused call to generate in rpc_mempool_info
test: Sync MiniWallet utxo state after each generate call
test: Drop spent utxos in MiniWallet scan_tx
test: Return new_utxos from create_self_transfer_multi in MiniWallet
test: Return new_utxo from create_self_transfer in MiniWallet
Replace CountSecondsDouble with Ticks<SecondsDouble>
test: Remove unnecessary block mining from importdescriptors test
build: Bump default `PlatformToolset` for Visual Studio 2022
doc: Make Windows build docs match the CI task
ci: Increase CPU number for "Win64 native" task
ci: Bump vcpkg to the latest version
ci: Limit ccache cache size properly on "Win64 native" task
ci: Update Windows task image up to visualstudio2022
guix: patch LIEF to fix PPC64 NX default
guix: use LIEF 0.12.1
guix: remove usage of -Wl,-z,noexecstack for PPC64 HOST
remove unused functions
test: remove wallet dependency from feature_nulldummy.py
wallet test: Add unit test for wallet scan save_progress option
wallet: Save wallet scan progress
build: use BOOST_NO_CXX98_FUNCTION_BASE to suppress warnings
build: suppress array-bounds errors in libxkbcommon
[functional test] submitrawpackage RPC
[rpc] add new submitpackage RPC
Use more specific path when including `memenv.h` header
rpc: Use steady_clock for getrpcinfo durations
refactor: remove unused method `CDBWrapper::CompactRange`
guix: parallelize LIEF build
scripted-diff: Rename DEFAULT_MAX_MEMPOOL_SIZE to indicate SI unit
ArgsMan: Add Get*Arg functions returning optional
test: `-whitebind` and `-bind`  with `-listen=0` should throw an error
test: add coverage for 'listreceivedbyaddress' no change addrs return
refactor: 'ListReceived' use optional for filtered address
refactor: RPC 'ListReceived', encapsulate m_address_book access
refactor: RPC 'listlabels', encapsulate 'CWallet::ListAddrBookLabels' functionality
[net processing] Set CNode::m_relays_txs=true when receiving BIP37 filters
ci: Improve naming related to "macOS 12 native x86_64" task
ci, refactor: Add `MACOS_NATIVE_TASK_TEMPLATE`
Remove LOCKTIME_MEDIAN_TIME_PAST constant
refactor: Replace feeDelta by m_modified_fee
net: rename Sock::Reset() to Sock::Close() and make it private
test: Fail if connect_nodes fails
build: Remove negated --enable-fuzz checks from build system
Update Arch Linux build example
test, qt: Add tests for `GUIUtil::extractFirstSuffixFromFilter`
qt: Replace `QRegExp` with `QRegularExpression`
qt: Add a function that extracts the suffix from a filter
rpc: Return incrementalrelayfee in getmempoolinfo
Use consistent wording in log
refactor: remove unused methods `{CDBIterator,CCoinsViewDBCursor}::GetValueSize()`
refactor: use 'ForEachAddrBookEntry' in RPC 'getaddressesbylabel'
refactor: use ForEachAddrBookEntry in interfaces::getAddresses
wallet: implement ForEachAddrBookEntry method
refactor: implement general 'ListAddrBookAddresses' for addressbook destinations lookup
qt6: Do not use deprecated high DPI attributes in Qt 6
qt6: Do not use deprecated `QLibraryInfo::path` in Qt 6
test: Remove from_node from create_self_transfer* MiniWallet helpers
test: refactor: save MiniWallet mode explicitly
guix: remove explicit glibc stack protector disabling
wallet: avoid extra wtx lookup in AddToSpends
net: remove CloseSocket()
net: remove now unused Sock::Release()
net: change GetBindAddress() to take Sock argument
net: add new method Sock::GetSockName() that wraps getsockname()
build: globally define NOMINMAX
refactor: move DEFAULT_*_LIMIT assertions from validation to policy
refactor: move EXTRA_DESCENDANT_TX_SIZE_LIMIT to policy/policy.h
refactor: use braced initialization in policy/policy.h
scripted-diff: use static constexpr in policy/policy.h
refactor: Move DEFAULT_DESCENDANT_SIZE_LIMIT to policy/policy.h
refactor: Move DEFAULT_DESCENDANT_LIMIT to policy/policy.h
refactor: Move DEFAULT_ANCESTOR_SIZE_LIMIT to policy/policy.h
refactor: Move DEFAULT_ANCESTOR_LIMIT to policy/policy.h
scripted-diff: rename fAllowOtherInputs -> m_allow_other_inputs
refactor: use GetWalletTx in SelectCoins instead of access mapWallet
wallet: move "use-only coinControl inputs" below the selected inputs lookup
wallet: unify “allow/block other inputs“ concept
doc: typo fix
wallet: fix warning: "argument name 'feerate' in comment does not match parameter name"
p2p, doc: Use MAX_BLOCKS_TO_ANNOUNCE consistently
build: add *_STANDARD vars to depends gen_id
walletdb: fix last client version update
build: add and use CXX_STANDARD in depends
build: add and use C_STANDARD in depends
wallet: don't read db every time that a new WalletBatch is created
scripts: remove no-longer-needed ignored exports
doc: update configure ar doc to mention libtool 2.4.7
guix: use libtool 2.4.7
bench/rpc_mempool: Create ChainTestingSetup, use its CTxMemPool
bench: Use existing CTxMemPool in TestingSetup
scripted-diff: test: Use CTxMemPool in TestingSetup
test/policyestimator: Use ChainTestingSetup's CTxMemPool
rest/getutxos: Don't construct empty mempool
[doc] RBF feerate rule
If -prune=0 is set, Uncheck Prune on Intro page
refactor: cleanups post unsubtree'ing univalue
refactor: un-subtree univalue
build: sqlite 3380500 in depends
test: remove unused `create_confirmed_utxos` helper
doc: Update importaddress mention incompatibility with descriptor wallet
test: check for `getblocktxn` request with out-of-bounds tx index
qt, refactor: Add `transactionoverviewwidget.cpp` source file
refactor: getAddress don't access m_address_book, use FindAddressEntry function
message-capture-parser: fix out of bounds error for empty vectors
test: implement 'bech32m' mode for `getnewdestination()` helper
test: add helpers for creating P2TR scripts/addresses from output key
build: support LTO in depends
scripted-diff: Avoid incompatibility with CMake AUTOUIC feature
refactor: Introduce PeerManagerImpl::RejectIncomingTxs
test: Remove MiniWallet mempool_valid option
doc: add distcc to productivity notes
RPC/blockchain: Reorder result documentation for scantxoutset
scripted-diff: RPC/blockchain: Lowercase "when" in scantxoutset documentation
RPC/blockchain: Elaborate on scantxoutset documentation
build: systemtap 4.7
test: passing a value below 5 MB to -maxmempool should throw an error
qt, refactor: Convert `SendCoinsEntry` to a sub-`QWidget`
Update secp256k1 subtree to latest upstream master
Squashed 'src/secp256k1/' changes from 8746600ee..44c2452fd
compat: Consolidate mingw-w64 ASLR workaround for upstream libsecp changes
p2p: always set nTime for self-advertisements
util: modify Win32LockedPageAllocator to query windows for limit
build: test for timingsafe_bcmp
GetExternalSigner(): fail if multiple signers are found
net: use Sock::WaitMany() instead of CConnman::SocketEvents()
build: Specify native binaries explicitly when building `capnp` package
net: introduce Sock::WaitMany()
doc: add `desig` to ignore-words
net: also wait for exceptional events in Sock::Wait()
[test_framework] Set PortSeed.n directly after initialising params
wallet: GetAvailableBalance, remove double walk-through every available coin
wallet: add 'only_spendable' filter to AvailableCoins
wallet: remove unused IsSpentKey(hash, index) method
wallet: avoid extra IsSpentKey -> GetWalletTx lookups
wallet: decouple IsSpentKey(scriptPubKey) from IsSpentKey(hash, n)
wallet: IsSpent, 'COutPoint' arg instead of (hash, index)
wallet: IsLockedCoin, 'COutPoint' arg instead of (hash, index)
wallet: AvailableCoins, don't call 'wtx.tx->vout[i]' multiple times
wallet: return 'CoinsResult' struct in `AvailableCoins`
doc: fix typo in kernel/context.h
logging: use LogPrintfCategory rather than a manual category
logging: add LogPrintfCategory to log unconditionally with category
Remove redundant nLastTry check
guix: re-revert riscv execstack workaround
Remove redundant nTime checks
doc: Correct comment describing value of MAX_FILE_SIZE_PSBT as in MiB
doc: Correct nPruneTarget misidentifying units of variable
Add LogPrintLevel to lint-format-strings, drop LogPrint-vs-LogPrintf section in dev notes
test: clean up all-lint.py
test: rename lint-all.py to all-lint.py
miner: Make mempool optional for BlockAssembler
test: ensure createmultisig and addmultisigaddress are not returning any warning for expected cases
rpc: fix inappropriate warning for address type p2sh-segwit in createmultisig and addmultisigaddress
scripted-diff: remove duplicate categories from LogPrint output
test: Add test for getblockfrompeer on syncing pruned nodes
rpc: Pruned nodes can not fetch unsynced blocks
Bugfix: configure: Define default for use_libevent
build: Remove unused `LIBBITCOIN_KERNEL` variable
qt: Drop no longer supported Android architecture
Bugfix: RPC/blockchain: pruneblockchain: Return the height of the actual last pruned block
[test] Test addr cache for multiple onion binds
[net] Seed addr cache randomizer with port from binding address
qt, refactor: add translator comments in `TransactionDesc::FormatTxStatus()`
kernel: SanityChecks: Return an error struct
qt: Remove unnecessary wallet includes from rpcconsole.cpp
Move init::SanityCheck to kernel::SanityCheck
init: Initialize globals with kernel::Context's life
kernel: pass params to BlockManager rather than using a global
logging: fix logging empty threadname
test: add BIP-125 rule 5 testcase with default mempool
test: check `replaceable` mismatch error in `createrawtransaction` RPC
Use designated initializers
test: Set maxfeerate=0 in MiniWallet sendrawtransaction()
contrib: Update makeseeds to asmap-nextgen
test: check pre-segwit peer error in `getblockfrompeer` RPC
kernel: Introduce empty and unused kernel::Context
test: Use Set/UnsetGlobals in BasicTestingSetup
ci: Reuse some configure options in "ARM64 Android APK" task
ci, android: Update NDK up to r23c
ci, android: Update Command-line Tools from 2.1 up to 7.0
ci: Drop unneeded packages in "ARM64 Android APK" task
Move minRelayTxFee to policy/settings
test: add coverage for non-hex value to -minimumchainwork
contrib: add seeds progress indicator and remove asmap one in makeseeds script
contrib: Use asmap for ASN lookup in makeseeds
Revert "build: more robustly check for fcf-protection support"
build: pass bdb cppflags only where needed
use testing setup mempool in ComplexMemPool bench
create and use mempool transactions using real coins in MempoolCheck
[test util] to populate mempool with random transactions/packages
[test util] use -checkmempool for TestingSetup mempool check ratio
[test util] add chain name to TestChain100Setup ctor
qt, refactor: Drop unused `QFrame`s in `SendCoinsEntry`
Bump univalue subtree
Squashed 'src/univalue/' changes from 6c19d050a9..de4f73ddca
refactor: Replace get_int by getInt<int> alias
refactor: Explicitly convert atomic<int> to int
test: Use MiniWallet in rpc_rawtransaction.py
MOVEONLY: Move signrawtransactionwithwallet test
miniscript: rename IsSane and IsSaneSubexpression to prevent misuse
miniscript: nit: don't return after assert(false)
miniscript: explicit the threshold size computation in multi()
miniscript: add an OpCode typedef for readability
miniscript: mark nodes with duplicate keys as insane
Remove no-op TIME_INIT on deser
wallet: CommitTransaction, remove extra wtx lookup and add exception for a possible db write error.
qt, wallet, refactor: Drop unused `WalletModel::PaymentRequestExpired`
qt, wallet, refactor: Make `WalletModel::sendCoins()` return `void`
rpc: Capture potentially large UniValue by ref for rpcdoccheck
ci: Install documented packages for "Win64" CI task
compat: remove glibcxx sanity checks
miner: Make UpdatePackagesForAdded static
miner: Absorb SkipMapTxEntry into addPackageTxs
test: allow passing sequence through create_self_transfer_multi
doc: add release note about removal of `deprecatedrpc=fees` flag
rpc: remove deprecated fee fields from mempool entries
Pass Peer& to Misbehaving()
Reset settings.json when GUI options are reset
Add release notes about unified bitcoin-qt and bitcoind persistent settings
Migrate -lang setting from QSettings to settings.json
Migrate -prune setting from QSettings to settings.json
Migrate -proxy and -onion settings from QSettings to settings.json
Migrate -listen and -server settings from QSettings to settings.json
Migrate -upnp and -natpmp settings from QSettings to settings.json
Migrate -spendzeroconfchange and -signer settings from QSettings to settings.json
Migrate -par setting from QSettings to settings.json
Migrate -dbcache setting from QSettings to settings.json
scripts and tools: update lint-logs.py to detect LogPrintLevel()
multiprocess build cleanup: comment on manual dependencies
tree-wide: clang-format CTxMemPool references
Add BIP-341 specified constraints to `ComputeTaprootMerkleRoot`
fuzz: coinselection, add missing fee rate.
multiprocess build fix: ipc/capnp/init.capnp.h: No such file or directory
doc: remove misleading AreInputsStandard() comment
refactor: Change LogPrintLevel order to category, severity
leveldb: Log messages from leveldb with category and debug level
http: Use severity-based logging for messages from libevent
logging: Unconditionally log levels >= WARN
Get time less often in AddrManImpl::ResolveCollisions_()
windeploy: Renewed windows code signing certificate
contrib: Remove keys that are no longer used for merging
doc: Explain squashing with merge commits
test: add coverage for unknown -blockfilterindex
coinstats: Move GetUTXOStats to rpc/blockchain
kernel: Use ComputeUTXOStats in validation
style-only: Rearrange using decls after scripted-diff
scripted-diff: Move src/kernel/coinstats to kernel::
Use only kernel/coinstats.h in index/coinstatsindex.h
coinstats: Split node/coinstats.h to kernel/coinstats.h
coinstats: Move hasher codepath to kernel/coinstats
Move logic from LookupUTXOStatsWithIndex to CoinStatsIndex::LookUpStats
coinstats: Separate hasher/index lookup codepaths
coinstats: Return purely out-param CCoinsStats
test: Use permissions from git in `lint-files.py`
Update GCSFilter benchmarks
Add GCSFilterDecodeSkipCheck benchmark
Add GCSFilterDecode and GCSBlockFilterGetHash benchmarks.
refactor: Remove defunct attributes.h includes
qt: Use `QRegularExpression` in `AddressBookSortFilterProxyModel` class
qt, test: Add tests for searching in `AddressBookPage` dialog
Set effective_value when initializing a COutput
qt: Replace `QCoreApplication::quit()` with `QCoreApplication::exit(0)`
doc: add release notes about `getreceivedbylabel` returning an error if the label is not in the address book.
coinstats: Extract index_requested in-member to in-param
coinstats: Extract hash_type in-member to in-param
includes: Remove rpc/util.h -> node/coinstats.h
fuzz: Remove useless GetUTXOStats fuzz case
kernel: Remove unnecessary blockfilter{index,}.cpp
rpc: getreceivedbylabel, don't loop over the entire wallet txs map if no destinations were found for the input label.
validation: Have ChainstateManager own m_chainparams
Add ChainstateManager::m_adjusted_time_callback
Add ChainstateManagerOpts, using as ::Options
doc: Update developer notes
sync.h: Imply negative assertions when calling LOCK
scripted-diff: Convert global Mutexes to GlobalMutexes
sync.h: Add GlobalMutex type
qt/clientmodel: thread safety annotation for m_cached_tip_mutex
net_processing: thread safety annotation for m_tx_relay_mutex
Rename NetinfoRequestHandler::is_block_relay data member to is_tx_relay
doc: remove passing `--disable-external-signer` in OpenBSD build guide
refactor: Remove redundant scope in `BanMan::SweepBanned()`
refactor: Add thread safety annotation to `BanMan::SweepBanned()`
refactor: Move code from ctor into private `BanMan::LoadBanlist()`
refactor: Propagate negative `!m_tx_relay_mutex` capability
refactor: Propagate negative `!m_most_recent_block_mutex` capability
doc: update developer notes wrt --enable-debug and DEBUG_LOCKCONTENTION
ci: add DEBUG_LOCKCONTENTION to CI task containing DEBUG_LOCKORDER
build: add DEBUG_LOCKCONTENTION to --enable-debug configuration
test: add coverage for unknown network in -onlynet
test: use MiniWallet for feature_dbcrash.py
settings: Add resetSettings() method
refactor: Pass interfaces::Node references to OptionsModel constructor
refactor: Add OptionsModel getOption/setOption methods
init: Remove Shutdown() node.args reset
settings: Add update/getPersistent/isIgnored methods
doc: add release notes about removal of the `deprecatedrpc=exclude_coinbase`
rpc: wallet: remove `-deprecatedrpc=exclude_coinbase` logic
 logging: Add log severity level to net.cpp
logging: Add severity level to logs.
index: Don't commit a best block before indexing it during sync
build: use BOOST_MULTI_INDEX_ENABLE_SAFE_MODE when debugging
build: Enable RPC_DOC_CHECK on --enable-debug
rpc: Put undocumented JSON failure mode behind a runtime flag
scripted-diff: Use getInt<T> over get_int/get_int64
Add mockable clock type and TicksSinceEpoch helper
Do not call global Params() when chainman is in scope
Do not pass CChainParams& to PeerManager::make
Do not pass CChainParams& to BlockAssembler constructor
Do not pass Consensus::Params& to Chainstate helpers
Do not pass time getter to Chainstate helpers
[net processing] Don't initialize TxRelay for non-tx-relay peers.
[net processing] Add m_tx_relay_mutex to protect m_tx_relay ptr
[net processing] Comment all TxRelay members
[net processing] [refactor] Move m_next_send_feefilter and m_fee_filter_sent
net: add new method Sock::Listen() that wraps listen()
net: add new method Sock::Bind() that wraps bind()
Add link to NetBSD release
[test] Remove segwit argument from build_block_on_tip()
test: fundrawtransaction preset input weight calculation
wallet: do not count wallet utxos as external
test: use sendall in wallet_taproot.py tests
tidy: use modernize-use-default-member-init
refactor: use C++11 default initializers
Use steady_clock in ConnectAndCallRPC and inline time call in loop conditional
tracing: fix `coin_selection:aps_create_tx_internal` calling logic
Add functional test for block sync from inbound peers
Sync chain more readily from inbound peers during IBD
Remove fUseWTXID parameter from CBlockHeaderAndShortTxIDs constructor
bench: Make all arguments -kebab-case
bench: Add `--sanity-check` flag, use it in `make check`
Add more proper thread safety annotations
Add proper thread safety annotation to `CWallet::GetTxConflicts()`
Add proper thread safety annotation to `CachedTxGetAvailableCredit()`
wallet: CreateTransaction(): return out-params as (optional) struct
wallet: CreateTransactionInternal(): return out-params as (optional) struct
refactor: replace RecursiveMutex `m_most_recent_block_mutex` with Mutex
refactor: reduce scope of lock `m_most_recent_block_mutex`
[net processing] Remove redundant nodestate->m_sendcmpct check in MaybeSetPeerAsAnnouncingHeaderAndIDs()
[net processing] Only relay blocks by cmpctblock and cache for fast relay if segwit is enabled
[net processing] Rename CNodeState compact block members
[net processing] Tidy up `sendcmpct` processing
[net processing] fPreferHeaderAndIDs implies fProvidesHeaderAndIDs
[net processing] Remove fWantsCmpctWitness
[net processing] Remove fSupportsDesiredCmpctVersion
[net processing] Simplify `sendcmpct` processing
[net processing] Only accept `sendcmpct` with version=2
[net processing] Only advertise support for version 2 compact blocks
[net] Stop testing version 1 compact blocks.
Sanitize port in `addpeeraddress()`
test: make BIP157 messages default-constructible (MESSAGEMAP compatibility)
test: Slim down versionbits_tests.cpp
test: p2p: add missing BIP157 message types to MESSAGEMAP
doc: add release notes about removal of the `deprecatedrpc=softforks` flag
rpc: remove deprecated "softforks" field from getblockchaininfo
test: compare `/mempool/info` response with `getmempoolinfo` RPC
refactor: move StartExtraBlockRelayPeers from header to implementation
test: Check msg type in msg capture is followed by zeros
scripted-diff: replace non-standard fixed width integer types (`u_int`...` -> `uint`...)
Bump univalue subtree
Squashed 'src/univalue/' changes from a44caf65fe..6c19d050a9
guix: native GCC 10 toolchain for Linux builds
guix: use -fcommon when building glibc 2.24
guix: fix glibc 2.27 multiple definition warnings with GCC 10
guix: adjust RISC-V __has_include() patch to work with GCC 10
guix: compile glibc without -werror
sync.h: strengthen AssertLockNotHeld assertion
Increase threadsafety annotation coverage
Remove unused GetTimeSeconds
rpc: check `fopen` return code in dumptxoutset
wallet: Change log interval to use `steady_clock`
bench: Enable loading benchmarks depending on what's compiled
bench: Use mock wallet database for wallet loading benchmark
sqlite: Use in-memory db instead of temp for mockdb
walletdb: Create a mock database of specific type
Add clang lifetimebound section to developer notes
Add C++ functions and methods section to developer notes
Switch scheduler to steady_clock
doc: Explain Bitcoin Core in README.md
validation: move g_versionbitscache into ChainstateManager
test/versionbits: make versionbitscache a parameter
deploymentstatus: make versionbitscache a parameter
refactor: use chainman instead of chainParams for DeploymentActive*
deploymentstatus: allow chainman in place of consensusParams
validation: move UpdateUncommittedBlockStructures and GenerateCoinbaseCommitment into ChainstateManager
validation: replace ::Params() calls with chainstate/chainman member
validation: remove redundant CChainParams params from ChainstateManager methods
validation: add CChainParams to ChainstateManager
guix: bump time-machine to 998eda3067c7d21e0d9bb3310d2f5a14b8f1c681
scripted-diff: Rename MainSignalsInstance() class to MainSignalsImpl()
refactor: remove unused forward declarations in validationinterface.h
refactor: make MainSignalsInstance() a class
[net] Use ConnectedThroughNetwork() instead of GetNetwork() to seed addr cache randomizer
Link in developer notes style to internal interface exception
Prefer Python for scripts in developer notes
test: Remove extended lint (cppcheck)
Wallet: Ensure m_attaching_chain is set before registering for signals
random: Add FastRandomContext::rand_uniform_delay
Add time helpers for std::chrono::steady_clock
index, refactor: Change sync variables to use `std::chrono::steady_clock`
reindex, log, test: fixes #21379
parsing external signer master fingerprint string as bytes instead of caring for lower/upper case in ExternalSigner::SignTransaction
Remove obsolete BDB ENABLE_WALLET section in developer notes
doc: Shorten explanation of "maintainers"
test: previous releases: add v23.0
Wrap boost::replace_all
contrib: fix dirname on `verify-commits`
Sanity assert GetAncestor() != nullptr where appropriate
test: port 'lint-shell.sh' to python
Add RPC to get mempool txs spending outputs
build: Drop redundant checks for ranlib and strip tools
Unroll the ChaCha20 inner loop for performance
doc: update init.cpp -conf help text
doc: update devtools, release-process readmes
build: include bitcoin.conf in build outputs
refactor: Change * to & in MutableTransactionSignatureCreator
fuzz: SplitString with multiple separators
http: replace boost::split with SplitString
core_read: Replace boost::split with SplitString
Extend Split to work with multiple separators
blockstorage: add LIFETIMEBOUND to GetFirstStoredBlock()::start_time
test: add coverage for invalid requests for `blockfilterheaders`
scripted-diff: Rename rpc/misc.cpp to rpc/node.cpp
rpc: Move output script RPCs to separate file
Guard `#include <config/bitcoin-config.h>`
doc: update bitcoin-conf.md
script: add script to generate example bitcoin.conf
doc: replace bitcoin.conf with placeholder file
Make sanity check in GCSFilter constructor optional
Bugfix: configure: Define defaults for enable_arm_{crc,shani}
tidy: add readability-redundant-declaration
Reject invalid rpcauth formats
ci: Clone iwyu only if missing
Pass lifetimebound reference to SingleThreadedSchedulerClient
test: stop node before calling assert_start_raises_init_error
rpc: Move fee estimation RPCs to separate file
test: Remove boost::split from getarg_tests.cpp
test: Remove boost::split from rpc_tests.cpp
test: Split MempoolAncestryTests into two
rpc: use GetBlockTime() for getblockchaininfo#time
blockstorage, refactor: pass GetFirstStoredBlock() start_block by reference
blockstorage, refactor: make GetFirstStoredBlock() a member of BlockManager
test, bench: make prevector and checkqueue swap member functions noexcept
validation: make CScriptCheck and prevector swap member functions noexcept
fuzz: add a Miniscript target for string representation roundtripping
fuzz: rename and improve the Miniscript Script roundtrip target
miniscript: tiny doc fixups
miniscript: split ValidSatisfactions from IsSane
miniscript: introduce a CheckTimeLocksMix helper
miniscript: use optional instead of bool/outarg
miniscript: make equality operator non-recursive
scripted-diff: miniscript: rename 'nodetype' variables to 'fragment'
miniscript: remove a workaround for a GCC 4.8 bug
test: Don't use shell=True in `lint-files.py`
rpc: Move signmessage RPC util to new file
Remove cs_main from verifymessage
doc: add minimum required kernel version to dependencies.md
guix: consolidate kernel headers to 5.15
test: Add `strerror` to locale-dependence linter
util: Increase buffer size to 1024 in SysErrorString
util: Refactor SysErrorString logic
util: Use strerror_s for SysErrorString on Windows
util: Replace non-threadsafe strerror
gui: Load Base64 PSBT string from file
test, contrib, refactor: use `with` when opening a file
build: Remove LIBTOOL_APP_LDFLAGS for bitcoin-chainstate
docs: Add libbitcoinkernel_la_SOURCES explanation
ci: Build libbitcoinkernel
build: Extract the libbitcoinkernel library
tests: Do not always create a descriptor wallet in wallet_createwallet
refactor: Use Span of std::byte in CExtKey::SetSeed
util: Add ParseHex<std::byte>() helper
test: Add test for embedded null in hex string
Crash debug builds on PCKG_MEMPOOL_ERROR
validation: Prune UnloadBlockIndex and callees
validation: No mempool clearing in UnloadBlockIndex
Clear {versionbits,warning}cache in ~Chainstatemanager
style-only: Use std::clamp for check_ratio, rename
style-only: Use for instead of when loading Chainstate
init: Reset mempool and chainman via reconstruction
scripted-diff: Rename ValidAsCString to ContainsNoNUL
Use std::string_view throughout util strencodings/string
Make DecodeBase{32,64} take string_view arguments
Generalize ConvertBits to permit transforming the input
Make DecodeBase{32,64} return optional instead of taking bool*
Make DecodeBase{32,64} always return vector, not string
Reject incorrect base64 in HTTP auth
Make SanitizeString use string_view
Make IsHexNumber use string_view
Make IsHex use string_view
Make ParseHex use string_view
Call CHECK_NONFATAL only once where needed
validation: default initialize and guard chainman members
refactor: Convert warningcache to std::array
b-cs: Define G_TRANSLATION_FUN in bitcoinkernel.cpp
build: Separate lib_LTLIBRARIES initialization
build: Create .la library for bitcoincrypto
build: Create .la library for leveldb
build: Create .la library for crc32c
init: Allow -proxy="" setting values
tidy: enable modernize-use-nullptr
Don't use zero as null pointer constant (-Wzero-as-null-pointer-constant)
Converting `lint-all.sh` to `lint-all.py`.
scripted-diff: Rename PeerManagerImpl members
[net processing] Move nHighestFastAnnounce into PeerManagerImpl
scripted-diff: rename BytePtr to AsBytePtr
wallet: ignore chainStateFlushed notifications while attaching chain
lint: Mention NONFATAL_UNREACHABLE in lint-assertions.py
scripted-diff: replace deprecated Q_OS_MAC with Q_OS_MACOS
move-only: Rename index + pruning functional test
test: Update test for indices on pruned nodes
Index: Allow coinstatsindex with pruning enabled
Index: Use prune locks for blockfilterindex
blockstorage: Add prune locks to BlockManager
refactor: Introduce GetFirstStoredBlock helper function
Precomputed hashes are note #16 in BIP341
doc: Add 23.0 release notes
rpc: Explain active and internal in listdescriptors
[netgroup] Use nStartByte as offset for the last byte of the group
Remove not needed clang-format off comments
[tests] Move TxOrphange tests to orphange_tests.cpp
init: disallow reindex-chainstate with optional indexes
prevector: only allow trivially copyable types
guix: Improve error message about missed macOS SDK
qt, test: Add tests for `tableView` in `AddressBookPage` dialog
qt: No need to force Qt::QueuedConnection for NotifyAddressBookChanged
qt, refactor: Declare `WalletModel` member functions with `const`
Delete UpdatePackagesForAdded at beginning of addPackageTxs.
contrib: macdeploy: fix permissions typo in gen-sdk script
refactor: make GetRand a template, remove GetRandInt
test: MiniWallet: skip mempool check if `mempool_valid=False`
test: MiniWallet: always rehash after signing (P2PK mode)
Porting lint-assertions.sh to lint-assertions.py
test: add getblockfrompeer coverage of invalid inputs
add 3 new test cases for SelectCoins()
p2p: replace RecursiveMutex `m_total_bytes_sent_mutex` with Mutex
p2p: add assertions and negative TS annotations for `m_total_bytes_sent_mutex`
tests: Use descriptor that requires both legacy and segwit
lint: Convert lint-python-utf8-encoding.sh to Python
lint: Make known violations more specific in lint-locale-dependence
lint: Convert lint-locale-dependence.sh to Python
Disallow more unsafe string->path conversions allowed by path append operators
test: Add test for coinselection tracepoints
doc: document coin selection tracepoints
test: Remove previous release check
Do not pass `WalletModel*` to queued connection
refactor: Make `RPCExecutor*` a member of the `RPCConsole` class
test: compare `/mempool/contents` response with `getrawmempool` RPC
util, refactor: Drop explicit conversion to fs::path
util, refactor: Use GetPathArg to read "-rpccookiefile" value
util, refactor: Use GetPathArg to read "-conf" value
build: No longer need to hack the `PATH` variable in `config.site`
build: Let the depends build system define a path to `dsymutil` tool
build: Pass missed darwin-specific tools via `config.site`
build: No need to provide defaults for darwin-specific tools
scripted-diff: Rename INSTALLNAMETOOL -> INSTALL_NAME_TOOL
build: Pass missed `strip` tool via `config.site`
doc: add reference to `getrawmempool` RPC in `/mempool/contents` REST doc
lint: Convert lint-circular-dependencies.sh to Python
bench: reduce the number of txs in wallet for wallet loading bench
bench: Add transactions directly instead of mining blocks
bench: reduce number of epochs for wallet loading benchmark
bench: use unsafesqlitesync in wallet loading benchmark
refactor: Guard `RPCConsole::{add,remove}Wallet()` with `ENABLE_WALLET`
lint: convert shell locale linter test to Python
Convert lint-include-guards.sh to python
[netgroupman] Remove NetGroupManager::GetAsmap()
[netgroupman] Move asmap checksum calculation to NetGroupManager
[netgroupman] Move GetMappedAS() and GetGroup() logic to NetGroupManager
[net] Only use public CNetAddr functions and data in GetMappedAS() and GetGroup()
[netgroupman] Add GetMappedAS() and GetGroup()
[net] Move asmap into NetGroupManager
 doc: add more info to dependencies.md
tidy: Add include-what-you-use
refactor: fix includes in src/init
refactor: fix includes in src/compat
[net processing] Move block cache state into PeerManagerImpl
[net processing] Inline and simplify UpdatePreferredDownload
[net processing] Move nPreferredDownload into PeerManagerImpl
[net processing] Move mapNodeState into PeerManagerImpl
[net processing] Move CNodeState declaration above PeerManagerImpl
lint: convert submodule linter test to Python
Clarify in release process how to update defaultAssumeValid/nMinimumChainWork
scripted-diff: Rename pindexBestHeader, fHavePruned
Clear fHavePruned in BlockManager::Unload()
move-mostly: Make fHavePruned a BlockMan member
Clear pindexBestHeader in ChainstateManager::Unload()
style-only: Miscellaneous whitespace changes
move-mostly: Make pindexBestHeader a ChainMan member
Release process: use 4096 blocks and getbestblockhash for getchaintxstats
Specify in release process which chains need to be updated
Reorganize release process chainparams section to reduce repetition
Clarify release process overhead note to be more actionable
Release process: exclude huge files for mainnet m_assumed_blockchain_size
Release process: specify blockchain/chain_state units, reduce repetition
Add missing references to signet in the release process
bench: Remove minEpochIterations from wallet loading benchmark
test: Remove unused taproot node from wallet_taproot.py
Make BlockManager::LoadBlockIndex private
[init] Add netgroupman to node.context
[build] Add netgroup.cpp|h
lint: Convert lint-includes.sh to Python
doc: cleanups to mempool rest endpoints
docs: update `/rest/chaininfo` doc referring to RPC help
bench: Add a benchmark for wallet loading
scripted-diff: rename cs_totalBytesSent -> m_total_bytes_sent_mutex
miniscript: the 'd:' wrapper must not be 'u'
style: rename variables to match coding style
fees: make FeeFilterRounder::feeset const
fees: make the class FeeFilterRounder thread-safe
lint: Convert Python linter to Python
test: use MiniWallet for p2p_segwit.py
util: optimizes HexStr
bench: Adds a benchmark for HexStr
test: Adds a test for HexStr that checks all 256 bytes
test: refactor: use `create_lots_of_big_transactions` to dedup where possible
test: use MiniWallet for mining_prioritisetransaction.py
Revert "qt: Add ObjectInvoke template function"
qt: Replace `GUIUtil::ObjectInvoke()` with `QMetaObject::invokeMethod()`
qt, doc: Remove unneeded comments
qt: Revamp ClientModel code to handle {Block|Header}Tip core signals
qt: Revamp ClientModel code to handle BannedListChanged core signal
qt: Revamp ClientModel code to handle AlertChanged core signal
lint: Convert lint-whitespace.sh to Python
lint: Convert lint-git-commit-check.sh to Python
util/check: Add CHECK_NONFATAL identity function, NONFATAL_UNREACHABLE AND UNREACHABLE macros
refactor: rename command -> message type in comments in the src/net* files
Simplify GetTime
test: Add a test that creates a wallet with invalid parameters
test: fix connman UB by calling derived constructor
Converted lint-tests.sh to python
contrib: Remove suspicious hosts list from makeseeds
net: use Sock::SetSockOpt() instead of standalone SetSocketNoDelay()
net: use Sock::SetSockOpt() instead of setsockopt()
net: add new method Sock::SetSockOpt() that wraps setsockopt()
Change wallet validation order
improve clarity and up max ipv6 ASNs
test: Test for disabling wallet flags
rpc, wallet: setwalletflags warnings are optional
wallet: Add some tracepoints for coin selection
Remove not needed ArithToUint256 roundtrips in tests
Remove duplicate static_asserts
wallet: compute waste for SelectionResults of preset inputs
wallet: track which coin selection algorithm produced a SelectionResult
init: limit bip30 exceptions to coinbase txs
ci: Make log verbose in error case only
depends: Add file-based logging for individual packages
Ignore problematic blocks in DisconnectBlock
test: add test for signet miner script
lint: convert format strings linter test to python
Revert "build: Specify `zeromq` port explicitly for MSVC builds"
ci: Bump vcpkg to the latest version
ci: Make Qt configure option change invalidate "msvc_qt_built_cache"
qt: Do not use `QKeyEvent` copy constructor
qt: Do not assume `qDBusRegisterMetaType` return type
qt, refactor: Use member initializers in TransactionStatus
qt, refactor: remove unused field `qint64 TransactionStatus::open_for`
guix: fix GCC 10.3.0 + mingw-w64 setjmp/longjmp issues
validation: Load pindexBestHeader in ChainMan
init: Prevent -noproxy and -proxy=0 settings from interacting with other settings
build: Remove vestigial LIBLEVELDB_SSE42
build: Don't add unrelated libs to LIBTEST_*
fuzz: add `SplitString` fuzz target
test: add unit tests for `SplitString` helper
refactor: introduce single-separator split helper `SplitString`
test: add `is_bitcoin_util_compiled` helper
test: determine path to `bitcoin-util` in test framework
builder-keys: Add will8clark
build: don't compress macOS DMG
qt: Revamp ClientModel code to handle NetworkActiveChanged core signal
qt: Revamp ClientModel code to handle NumConnectionsChanged core signal
qt: Revamp ClientModel code to handle ShowProgress core signal
test: use MiniWallet for feature_fee_estimation.py
qt: Remove `QApplication::globalStrut()` call
qt: Update deprecated enum value
qt: Use `|` instead of `+` for key modifiers
Converted lint-python-mutable-default-parameters.sh to python
print `(none)` if no warnings in -getinfo
Update RPC argument and field naming guideline in developer notes
RPC: Switch getblockfrompeer back to standard param name blockhash
key: use secp256k1_schnorrsig_sign32 over deprecated secp256k1_schnorrsig_sign
build: remove some no-longer-needed var unexporting from configure
build: remove --enable-experimental from libsecp256k1 configure
build: fix MSVC build after subtree update
changes color of skipped functional tests
Add test case mimicking issue 24765
scripted-diff: Rename message command to message type
refactor: fixup named args in txpackage tests
lint: mypy 0.942
lint: flake8 4.0.1
lint: codespell 2.1.0
gui, refactor: rename fInvalid to num_test_failures in test_main.cpp
gui: count test failures in test runner summary
gui: add test runner summary
test: compare `/chaininfo` response with `getblockchaininfo` RPC
Squashed 'src/secp256k1/' changes from 0559fc6e41..8746600eec
Update secp256k1 subtree to latest upstream master
lint: remove qt SIGNAL/SLOT lint
doc: Add gpg key import instructions for Windows
scripted-diff: Regenerate key_io data deterministically
doc: Add note that -reindex will rebuild optional indexes
contrib: make gen_key_io_test_vectors deterministic
doc: Convert remaining comments to clang-tidy format
lint: remove boost::bind linter
refactor: Remove deduplication of data in rollingbloom bench
ci: Build all optional tools in tidy task
build: Do not define `PROVIDE_FUZZ_MAIN_FUNCTION` macro unconditionally
lint: Convert Python dead code linter to Python
[validation] don't package validate if not policy or missing inputs
[unit test] package feerate and package cpfp
[validation] try individual validation before package validation
[packages/policy] use package feerate in package validation
doc: Update lint test docs
lint: convert spell check lint test to python
test: throw `ValueError` for invalid base58 checksum
contrib: testgen: use base58 methods from test framework
scripted-diff: rename `chars` to `b58chars` in test_framework.address
contrib: testgen: import OP_* constants from test framework
contrib: testgen: avoid need for manually setting PYTHONPATH
Add release notes
Update /<count>/ endpoints to use a '?count=' query parameter instead
build: Do not modify `common.init.vcxproj` directly
build, refactor: Add set_properties() to msvc-autogen.py
Replace uint256 specific implementations of base_uint::GetHex() and base_uint::SetHex() with proper ones that don't depend on uint256 and replace template methods instantiations of base_uint with template class instantiation
build: perform /Applications symlink generation in macdeployqtplus
build: perform all .tiff copying in macdeployqtplus
refactor: Use [[maybe_unused]] attribute
refactor: Drop unneeded workarounds aimed to silence unused warning
Remove gui-only syscalls
init: Disable syscall sandbox in the bitcoin-qt process
Remove nHeightEnd and nHeight in generateBlocks helper
Add DEBUG_LOCKCONTENTION documentation to the developer notes
Put lock logging behind DEBUG_LOCKCONTENTION preprocessor directive
consensus/params: set default values for BIP9Deployment
lint: Convert lint-logs.sh to Python
lint: Start to use py lint scripts
Move lint script and data file to avoid lint- prefix
test: use MiniWallet for mempool_unbroadcast.py
ci: Add clang-tidy task
supp: remove Boost Valgrind suppression
ci: use DWARF-4 for Valgrind CI job
build: specify cmake build dir for multiprocess depends build
refactor: fix clang-tidy named args usage
build: stop overriding user CXXFLAGS
build: stop overriding user LDFLAGS
build: stop overriding user CPPFLAGS
refactor: remove macOS MAP_ANONYMOUS work around
doc: explain why we clear CXXFLAGS with enable-debug
refactor: Remove outdated libevent logging code
build: don't use Boost multi_index serialization
[docs] package feerate
build, qt: use one patch per line in depends/packages/qt.mk
build, qt: drop fix_no_printer.patch
build, qt: bump Qt5 version to 5.15.3
Add and improve informational links in doc/cjdns.md
Add concrete steps in doc/cjdns.md to easily find a friend
refactor: add missing std:: includes to threadnames.cpp
doc: remove incorrect mention of PR_GET_NAME
guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64
build: remove faketime unsetting and comments from configure.ac
Remove buggy and confusing IncrementExtraNonce
test: add regression test for bitcoin-core/gui/issues/567
util/check: avoid unused parameter warnings
build: patch around qt duplicate symbol issue
test: fix incorrect named args in txpackage tests
options: add a comment for -listenonion and dedup a long expression
doc: Use DecodeTxDoc helper
wallet: Postpone NotifyWalletLoaded() for encrypted wallets
refactor: add stdd:: includes to core_write
refactor: use named args when ScriptToUniv or TxToUniv are invoked
refactor: prefer snake case, TxToUniv arg hashBlock renamed block_hash
refactor: merge ScriptPubKeyToUniv & ScriptToUniv into one function
doc: minor improvements in getutxos REST endpoint synopsis
fuzz: add target for coinselection
util/check: stop using lambda for Assert/Assume
refactor: account for requiring libevent 2.1.8+
build, refactor: Replace tabs with spaces
ci: Use clang-12 and libcxx-12 for msan
wallet: move Assert() check into constructor
doc: Speed up functional test runs using ramdisk
add tests for no recipient and using send_max while inputs are specified
Add sendall RPC née sweep
wallet, refactor: Add wallet::NotifyWalletLoaded() function
[fuzz] Assert that Peer.m_tx_relay.m_relay_txs has been set correctly
[net processing] PushNodeVersion() takes a const Peer&
ci: Avoid boost test warnings
ci: note why BDB is disabled for MSAN jobs
ci: remove explicit --enable-wallet from msan job
compat: remove strnlen back-compat code
test: -peerblockfilters without -blockfilterindex raises an error
doc: update OpenBSD build docs for 7.0
ci: Use monterey-xcode-13.3
builder-keys: Add dunxen
test: remove lief install from multiprocess job
contrib: use LIEF 0.12.0 for symbol and security checks
net_processing: move CNode data access out of lock
util: Add inotify_rm_watch to syscall sandbox (AllowFileSystem)
test: invalid -i2psam will raise an init error
build: Bump libevent minimum version up to 2.1.8
wallet: Prevent wallet unload on GetWalletForJSONRPCRequest
test: fix incorrect named args in wallet tests
test: fix incorrect named args in coin_selection tests
bench: fix incorrect named args in coin_selection bench
[wallet] don't create long chains by default
doc: update release-process.md
refactor: remove unused boost header include in bitcoin-util.cpp
Extract FinishTransaction from send()
Extract interpretation of fee estimation arguments
Elaborate error messages for outdated options
Extract prevention of outdated option names
init: add missing cs_main lock
[doc] release notes for random change target
[wallet] remove MIN_CHANGE
[wallet] randomly generate change targets
refactor coin selection for parameterizable change target
test: move-only: Move all generate* tests to a single file
ci: Compile fuzz binary in periodic task
Clarify that COutput is a struct, not a class
addrman: fix incorrect named args
doc: Document clang-tidy in dev notes
doc, init: add links to doc/cjdns.md
tests: Calculate input weight more accurately
test: Add diamond-shape prioritisetransaction test
test: Rework create_self_transfer_multi
rpc: Fail to return undocumented or misdocumented JSON
rpc: Add m_skip_type_check to RPCResult
init: disallow reindex-chainstate when pruning
util: add linkat to syscall sandbox (AllowFileSystem)
doc: mention that BDB is for the legacy wallet in build-netbsd.md
build: Add --enable-c++20 option
Add CSerializedNetMsg::Copy() helper
Make fs.h C++20 compliant
scheduler: Capture ‘this’ explicitly in lambda
[move only] remove `is_wallet_compiled` checks
test: use MiniWallet in `interfaces_zmq`
Move mempool RPCs to rpc/mempool
style: Add static keyword where possible in rpc/mempool
refactor: use Span in random.*
coinselection: Remove COutput operators == and !=
coinselection: Remove CInputCoin
coinselection: Use COutput instead of CInputCoin
coinselection: Add effective value and fees to COutput
moveonly: move COutput to coinselection.h
wallet: Remove CWallet and CWalletTx from COutput's constructor
wallet: Replace CWalletTx in COutput with COutPoint and CTxOut
wallet: Provide input bytes to COutput
doc: mention that BDB is for the legacy wallet in build-freebsd.md
build: require libtool 2.4.2
options: flip listenonion to false if not listening
rpc: Exclude descriptor when address is excluded
doc: remove unneeded documentation on basic package management on FreeBSD
test: check localaddresses in getnetworkinfo for nodes with proxy
test: use MiniWallet for mempool_package_onemore.py
test: MiniWallet: add helper methods `{send,create}_self_transfer_multi`
Bugfix: configure: Only avoid -isystem for exact /usr/include path
Bugfix: RPC/blockchain: Correct description of getblockchaininfo's pruneheight result
guix: Drop code for the unsupported `i686-linux-gnu` host
doc: update i2p.md with cjdns, improve local addresses section
doc: update tor.md with cjdns and getnodeaddresses, fix tor grep,
doc: create initial doc/cjdns.md for cjdns how-to documentation
qt: Avoid potential -Wdeprecated-enum-enum-conversion warning
test: use MiniWallet for rpc_createmultisig.py
qt: Use human-readable strings in preference to hard-coded integers
test: Run non-wallet tests only once
Bugfix: configure: Quote SUPPRESS_WARNINGS sufficiently to preserve brackets
test: Limit scope of id global which is shared between subtests
Use CAmount for fee delta and modified fee
Replace struct update_fee_delta with lambda
add ci/scratch dir to gitignore
scripted-diff: rename TxRelay members
[net processing] Move tx relay data to Peer
Clarify in -maxtimeadjustment that only outbound peers influence time data
[net processing] Move m_wtxid_relay to Peer
[net] Add CNode.m_relays_txs and CNode.m_bloom_filter_loaded
build: remove unused QMAKE_* VARs
doc: clarify that BDB is only required for the legacy wallet
Use MiniWallet in feature_coinstatsindex
test: Refactor MiniWallet get_utxo helper
wallet: Store whether a COutput is from the wallet
wallet: Store tx time in COutput
wallet: Remove use_max_sig default value
scripted-diff: Rename COutput member variables
wallet: cleanup COutput constructor
doc: Add template for empty release notes
build: fix copypasta in OpenBSD C{XX} flags
fuzz: add a fuzz target for Miniscript decoding from Script
Miniscript: ops limit and stack size computation
Miniscript: conversion from script
Miniscript: type system, script creation, text notation, tests
script: expose getter for CScriptNum, add a BuildScript helper
script: move CheckMinimalPush from interpreter to script.h
script: make IsPushdataOp non-static
macdeploy: remove unused detached-sig-apply
guix: point to latest upstream commit
doc, guix: Include arm64-apple-darwin into codesigned archs
Move txoutproof RPCs to txoutproof.cpp
fuzz: execute each file in dir without fuzz engine
doc: Delete old line of code that was commented out
doc: Drop a note about Intel-based Macs
doc: s/Compiler/Dependency in dependencies.md
doc: cleanup wallet docs in build-osx.md
Update signapple for platform identifier fix
guix: Use "win64" for Windows artifacts consistently
doc: rework dependencies.md
gui: restore Send for external signer
refactor: helper function signWithExternalSigner()
gui: peersWidget - ResizeToContents Age and IP/Netmask columns
gui: add Age column to peers tab
gui: add FormatPeerAge() utility helper
Replace use of `ArgsManager` with `DatabaseOptions`
guix: Drop "-signed" suffix for signed macOS .dmg files
Add and use BlockManager::GetAllBlockIndices
Add and use CBlockIndexHeightOnlyComparator
move-only: Move CBlockIndexWorkComparator to blockstorage
Only load BlockMan in BlockMan member functions
style-only: No need for std::pair for vSortedByHeight
Add RegisterMempoolRPCCommands helper
test: Actually print TSan tracebacks
ci: Temporarily use clang-13 to work around clang-14 TSan bug
guix: make it possible to override gpg binary
torcontrol: Query Tor for correct -onion configuration
[unit test] prioritisation in mining
[miner] bug fix: update for parent inclusion using modified fee
MOVEONLY: group miner tests into MinerTestingSetup functions
Clarify that CheckSequenceLocksAtTip is a validation function
Remove unused feebumper code
wallet: Pass FastRandomContext& to coin selection
doc: Revise comments and whitespace to clarify
refactor: Rename i to curr_try in SelectCoinsBnB
refactor: Track BnB selection by index
wallet: Pass FastRandomContext& to DiscourageFeeSniping
contrib: fix signet miner (sighash mismatch)
Add tests for addr destination rotation
Use std::chrono for salting when randomizing ADDR destination
guix: Use $HOST instead of generic osx{64} for macOS artifacts
contrib: macdeploy: monkey-patch gen-sdk to be deterministic
contrib: macdeploy: make gen-sdk deterministic
ci: Integrate ccache into MSVC build
refactor: Avoid int64_t -> size_t -> int64_t conversion
rpc: Move mempool RPCs to new file
test: use MiniWallet for feature_maxuploadtarget.py
[wallet] assert BnB internally calculated waste is the same as GetSelectionWaste()
rpc: rename getdeploymentinfo status-next to status_next
test: set segwit height back to 0 on regtest
build: don't install deprecated libevent headers
doc: remove Boost LDFLAGS from netBSD build docs
ci: remove compiled-but-unused BDB from MSAN job
wallet: Add a deprecation warning for newly created legacy wallets
Remove utxo db upgrade code
qt: Remove network detection based on address in BIP21
doc: update multisig-tutorial.md to default wallet type
guix: only check for the macOS SDK once
Add GetQueryParameter helper function
Handle query string when parsing data format
scripted-diff: rename RetFormat to RESTResponseFormat
Refactoring: move declarations to rest.h
build: Drop `double-conversion` from MSVC dependencies
ci: Invalidate vcpkg binary cache if dependencies changed
build: Specify `zeromq` port explicitly for MSVC builds
style-only: Various blockstorage.cpp cleanups
refactor: more const annotations for uses of CBlockIndex*
build, mac: Include arch in codesignature tarball
guix: use latest signapple
test: check for importprunedfunds RPC errors
doc: Add `guix` prefix for changes to reproducible builds
guix: Drop unneeded openssl dependency for signapple
bitcoin-chainstate: Lock cs_main to UnloadBlockIndex
guix: use latest upstream signapple
guix: use latest upstream python-certvalidator
qt: Avoid crash on startup if int specified in settings.json
test: Add tests for GetArg methods / settings.json type coercion
test: refactor: use `random.sample` for choosing random keys in wallet_taproot.py
guix: only use native GCC 7 toolchain for Linux builds
contrib: fix implicit function decleration in win symbol check
tests: Ensure sorted/multi_a descriptors always generate different addrs
build: Move guix time machine to prelude
ci: Bump vcpkg to the latest version
wallet: refactor: dedup sqlite blob binding
gui: improve "Addresses Rate-Limited" translator comments and tooltip in peers tab
gui: improve "Addresses Processed" translator comments and tooltip in peers tab
gui: improve "Address Relay" translator comments and tooltip in peers tab
guix: use same commit for codesigning time-machine
Revert "Avoid the use of P0083R3 std::set::merge"
ci/doc: Set minimum required clang/libc++ version to 8.0
test: Correctly decode UTF-8 literal string paths
doc: Clean out release notes
build: Bump version to 23.99
For descriptor pubkey parse errors, include context information
init, doc: improve -onlynet help and tor/i2p documentation
test: passing -onlynet=onion with -onion=0/-noonion raises expected init error
test: passing -onlynet=onion without -proxy/-onion raises expected init error
test: passing invalid -onion raises expected init error
test: passing invalid -proxy raises expected init error
net: only assume all local addresses if listening on any
net: fix GetListenPort() to derive the proper port
net: pass Span by value to CaptureMessage()
net: make CaptureMessage() mockable
timedata: rename variables to match the coding style
timedata: make it possible to reset the state
build: Minor leveldb subtree update
Squashed 'src/leveldb/' changes from f8ae182c1e..330dd6235f
build: update ax_cxx_compile_stdcxx to serial 14
Use GetPathArg where possible
util, refactor: Use GetPathArg to read "-settings" value
util: Add GetPathArg default path argument
test: hoist proxy out of 2 network loops in feature_proxy.py
test: add CJDNS to LimitedAndReachable_Network unit tests
net, init: assert each network reachability is true by default
doc: Use human-friendly DefaultHint for change_address/changeAddress in wallet RPC help
Bugfix: doc: Correct type of change_address/changeAddress in wallet RPC help (STR, not STR_HEX)
qt: Pre-branch translation updates for 23.x
fuzz: FuzzedFileProvider::write should not return negative value
Add coinstatsindex_unclean_shutdown test
fuzz: Limit script_format to 100kB
addrman: Log too low compat value
doc: update maintainer list in REVIEWERS
Avoid implicit-integer-sign-change in bech32.cpp
test: Remove no longer needed suppressions
p2p: Avoid InitError when downgrading peers.dat
qt, refactor: remove unused parameters in `TransactionDesc::FormatTxStatus()`
scripted-diff: rename nDepth -> depth
qt, refactor: remove redundant scope in `TransactionDesc::FormatTxStatus()`
Update nMinimumChainWork, defaultAssumeValid for 23.x
Update chainTxData for 23.x
Update m_assumed_* chain parameters for 23.x
doc: Explain that feedback needs to be addressed
move-only: helper function to present PSBT
qt: English (source) translations update
Add missed word to error message
doc: Move peer-review paragraph to right section
doc: Add link to release-process.md in CONTRIBUTING.md
[miner] always assume we can create witness blocks
refactor: Release cs_main before MaybeSendFeefilter
Remove confusing P1008R1 violation in ATMPArgs
Revert "qt: Do not use QObject::tr plural syntax for numbers with a unit symbol"
qt/wallettests: sort includes
qt: Skip displayUnitChanged signal if unit is not actually changed
qt, refactor: Remove default cases for scoped enum
qt, refactor: Remove BitcoinUnits::valid function
qt, refactor: Make BitcoinUnits::Unit a scoped enum
qt: Use QVariant instead of int for BitcoinUnit in QSettings
tests: Tests for inactive HD chains
tests: Test upgrading wallet with privkeys disabled
doc: Mention missing BIP157 in bips.md
refactor: Rewrite AddToBlockIndex with try_emplace
style: Modernize range-based loops over m_block_index
style-only: Use using instead of typedef for BlockMap
refactor: Rewrite InsertBlockIndex with try_emplace
tests: Remove now-unnecessary manual Unload's
blockstorage: Make m_block_index own CBlockIndex's
Add test for getheaders behavior
Respond to getheaders if we have sufficient chainwork
doc: Update bips.md for 23.x
build: upgrade depends Boost to 1.77.0
lint: remove no-longer used exceptions from lint-format-strings.py
build: pass win32-dll to LT_INIT()
contrib: address gen-manpages feedback from #24263
Output license info when binaries are passed -version
refactor: shift CopyrightHolders() and LicenseInfo() to clientversion.cpp
net: Update hardcoded seeds for 23.x
contrib: make-seeds updates for 23.x
doc: Avoid ADL for function calls
ci: Force `--enable-external-signer` to prevent future regressions
qt: Update translation source file
Replace "can not" with "cannot" in docs, user messages, and tests
index: Commit DB_MUHASH and DB_BEST_BLOCK to disk together
util: Add SaturatingAdd helper
cli: describe quality/recency filtering in -addrinfo
rpc: describe quality/recency filtering in getnodeaddresses
Use `GetAllOutputTypes` in `getblock` RPC function
doc: Rework generate* doc
Avoid implicit-integer-sign-change in VerifyLoadedChainstate
wallet: Add external-signer-support specific error message
build, refactor: Replace tabs with spaces
test: validation:block_connected tracepoint test
test: utxocache:* tracepoint tests
test: net:in/out_message tracepoint tests
test: checks for tracepoint tests
test: Remove suppression no longer needed with headers-only Boost.Test
ci: use Ubuntu Jammy for Windows CI
tracing: misc follow-ups to 22902
build: remove boost dep from libmultiprocess
test: Run symlink regression tests on Windows
ci: add missing sqlite_cflags to MSAN fuzz job
ci: remove boost_cxxflags from MSAN CIs
Do not use `LocalTestingSetup` in getarg_tests test file.
Rename wallet-tool to bitcoin-wallet in code comment
Mention -signet in bitcoin-wallet help output
contrib: refactor: replace `hex_switchEndian` in linearize scripts
contrib: refactor: simplify block header string routine in linearize-data.py
bench: Avoid deprecated use of volatile +=
util: Add missing rseq to syscall sandbox
build, qt: (Re-)sign package
build, qt: Align frameworks with macOS codesign tool requirements
User-facing content fixups from transifex translator feedback
test: Add functional test for symlinked blocks directory
test: Add fs_tests/create_directories unit test
util: Work around libstdc++ create_directories issue
wallet: Don't generate keys when privkeys disabled when upgrading
refactor: remove duplicate code from BlockAssembler
index: check muhash is in sync on coinstatsindex launch
index: remove txindex references from base index
Improve -netinfo help based on feedback from users and devs
tests: add tests for cross-chain wallet use prevention
wallet: ensure wallet files are not reused across chains
util, refactor: Add UNIQUE_NAME helper macro
wallet: avoid rescans if under the snapshot
Add tr() descriptor unit tests
Bugfix: make ToPrivateString work with x-only keys
Add doc/design/libraries.md
build: Point Guix to recent commit on the master branch
Primitives: Correct CTransaction deserialization docstring
fuzz: Split script formatting from script fuzz target
gui, refactor: use std::chrono for formatDurationStr() helper
Bugfix: set x-only flag when inferring pk() inside tr()
Release process: fix broken link to Guix building docs
test: remove `import socket` in test_ipv6_local
Remove outdated comment on CFeeRate
ci: Build bitcoin-chainstate
build: Add example bitcoin-chainstate executable
build: Add Boost.Process usage check
build: correct depends FreeBSD C{XX}FLAGS
build: add NetBSD support to depends
util: Add missing unlinkat to syscall sandbox
test: Add fs_tests/rename unit test
util: Revert back MoveFileExW call for MinGW-w64
build: remove -f from clang cp invocation
build: remove unused include dir from clang package
Move `GetAllOutputTypes` function from `rpc/rawtransaction.cpp` to `rpc/util.{h|cpp}`
test: refactor: remove unneeded bytes<->hex conversions in `byte_to_base58`
[doc] package deduplication
[doc] clarify inaccurate comment about replacements paying higher feerate
[validation] look up transaction by txid
Print enable_fuzz_binary in configure
build: remove native B2 package
build: header-only Boost
build: use header-only Boost unit test
improved getcoins.py
release-process: Specify remote name in "git fetch"
scripted-diff: Rename ShowModalDialogAndDeleteOnClose
qt: Revert 7fa91e831227e556bd8a7ae3da64bd59d4f30d5f partially
qt: Delay shutdown while a modal dialog is active
qt: Disable tray icon menu when a modal dialog is active
qt, refactor: Use local QAction instances for the tray icon menu
qt: Override BitcoinApplication::event() to handle QEvent::Quit
refactor: Avoid unsigned integer overflow in core_write
net: remove unused CNetAddr::GetHash()
net: include the port when deciding a relay destination
net: add CServiceHash constructor so the caller can provide the salts
net: open p2p connections to nodes that listen on non-default ports
ci: Follow Cirrus CI docs
doc: cleanup doc on need of Developer Account to obtain macOS SDK
build: add support for OpenBSD to depends
build: add a default build tar in depends
Test that OP_1-OP_16 (but not lower/higher) start witness programs
util: use stronger-guarantee rename method
RPC: Return external_signer in getwalletinfo
doc: include wtxid in TransactionDescriptionString
doc: add wtxid info in release-notes
test: Remove unused integer sanitizer suppressions
Add missing thread safety lock assertions in validation.h
Add missing thread safety lock assertions in validation.cpp
util: Drop no longer needed StripRedundantLastElementsOfPath() function
Use ArgsManager::GetPathArg() for "-walletdir" option
Use ArgsManager::GetPathArg() for "-blocksdir" option
Use ArgsManager::GetPathArg() for "-datadir" option
util: Add ArgsManager::GetPathArg() function
validation, refactoring: remove ChainstateManager::Reset()
scripted-diff: Rename nReadPos to m_read_pos in streams.h
Make CDataStream work properly on 64-bit systems
validation: replace lock with annotation in UnloadBlockIndex()
fuzz: Avoid unsigned integer overflow in FormatParagraph
Update doc to match new default wallet type
ci: Bump fuzz tasks to jammy
Revert "ci: Run fuzzer task for the master branch only"
qt, refactor: Drop BitcoinGUI::{send,receive}CoinsMenuAction members
qt: Make show_hide_action dependent on the main window actual state
qt: Drop BitcoinGUI::toggleHideAction member
qt, refactor: Fill up trayIconMenu before connections
qt, refactor: Replace BitcoinGUI::trayIconActivated with a lambda
qt, refactor: Replace BitcoinGUI::macosDockIconActivated with a lambda
build, refactor: Drop redundant `$(package)_download_file` assignments
test: Call ceildiv helper with integer
build, refactor: Drop useless `call` Make function
docs: Move explanation of hardened key syntax closer to KEY section
build, refactor: Reuse expat package version in its download path
build, refactor: Use conventional version notation for boost package
build: Bump minimum Qt version to 5.11.3
ci: Switch from bionic to buster
util: Avoid buggy std::filesystem:::create_directories() call
Add bitcoin_config.h to build_msvc/.gitignore
doc: Swap gen-manpages and update RC steps in release process
test: Remove unused valgrind suppressions
test: Exclude broken feature_init for now
test: Properly skip feature_syscall_sandbox in valgrind
Squashed 'src/minisketch/' changes from 89629eb2c7..7eeb778fef
Update minisketch subtree to latest upstream
bench: Represents paths with fs::path instead of std::string
Re-enable walletinit_verify_walletdir_no_trailing2 test disabled in #20744
Re-enable util_datadir check disabled in #20744
rpc/blockchain: rename getdeploymentinfo tip/active_chain_tip to blockindex
Remove broken and unused CDataStream methods
test: Create fresh CDataStream each time
test: Inline expected_xor
qt: Update source translations
init: Remove confusing '(possible integer overflow?)' from error message
qt: Update transifex resource blob to 23.0
build: remove Boost::system usage
build: remove boost::filesystem usage
refactor: replace boost::filesystem with std::filesystem
build: add support for std::filesystem
depends: fix capnp's descriptor for make download
doc: Install only "-posix" MinGW compiler when possible
ci: Drop no longer needed `update-alternatives`
build, qt: Specify QMAKE_CXX explicitly
build: remove unneeded getentropy detection (HAVE_GETENTROPY)
random: use arc4random on OpenBSD
test: Avoid testing negative block heights
validation: use stronger EXCLUSIVE_LOCKS_REQUIRED()
wallet: Add sanity checks to AntiFeeSnipe
test: add wtxid in expected_fields for wallet_basic
wallet: add wtxid in WalletTxToJSON
wallet: add GetWitnessHash()
validation: improve connect bench logging
ci: Use dash when building depends in centos build
scripted-diff: Rename DOCKER_EXEC to CI_EXEC
ci: Bump CentOS 8 image
build: Replace `which` command with `command -v`
test: speedup interface_rest.py by whitelisting peers (immediate tx relay)
test: use MiniWallet for rest_interface.py
test: activate all index types in feature_init.py
index: Don't commit without valid m_best_block_index
test: Remove random line number feature from feature_init.py
refactor: Make MessageBoxFlags enum underlying type unsigned
Clear vTxHashes when mapTx is cleared
lint: add creat and ba into ignore-words for lint-spelling
Enforce Taproot script flags whenever WITNESS is set
Replace lock with thread safety annotation in CBlockTreeDB::LoadBlockIndexGuts()
Avoid calling BanMan::SweepBanned() twice in a row
Prevent possible concurrent CBanDB::Write() calls
test: Repair failfast option for test runner
Add optimized sha256d64_arm_shani::Transform_2way
Implement sha256_arm_shani::Transform
Add sha256_arm_shani to build system
Rename SHANI to X86_SHANI to allow future implementation of ARM_SHANI
rpc/blockchain: a constant craving
trivial: comment tweaks
rpc documentation improvements
doc: getdeploymentinfo release notes tweaks
doc: fix wording of alertnotify
style: wrap long lines in CNode creation and add some comments
scripted-diff: rename CNode::cs_hSocket to CNode::m_sock_mutex
net: use Sock in CNode
fuzz: Speed up script fuzz target
scripted-diff: Clarify CheckFinalTxAtTip name
policy: Remove unused locktime flags
doc: Add pre-splitoff translation update to release-process.md
Extract CTxIn::MAX_SEQUENCE_NONFINAL constant
fs: consistently use fsbridge for fopen()
fs: add missing <cassert> include
fs: consistently use fsbridge for {i,o}fstream
p2p, contrib: update i2p hardcoded seeds
p2p, contrib: add cjdns hardcoded seeds
test: add combined CJDNS/I2P/localhost/onion eviction protection tests
test: add tests for inbound eviction protection of CJDNS peers
test: fix off-by-one logic in an eviction protection test
doc: add arm macOS depends platform triplet
guix: add arm64-apple-darwin triplet
guix: use autoconf 2.71
contrib: support arm64 darwin in security checks
build: use macOS 11 SDK (Xcode 12.2)
p2p: extend inbound eviction protection by network to CJDNS peers
p2p: Serialize cmpctblock at most once in NewPoWValidBlock
transaction decoding infer output descriptors
Guard CBlockIndex::nStatus/nFile/nDataPos/nUndoPos by cs_main
Remove/inline ReadRawBlockFromDisk(block_data, pindex, message_start)
Require IsBlockPruned() to hold mutex cs_main
Require CBlockIndex::IsValid() to hold cs_main
Require CBlockIndex::RaiseValidity() to hold cs_main
Require CBlockIndex::IsAssumedValid() to hold cs_main
Require CBlockIndex::GetUndoPos() to hold mutex cs_main
Require WriteUndoDataForBlock() to hold mutex cs_main
Require CBlockIndex::GetBlockPos() to hold mutex cs_main
test: add functional test for `-maxtipage` parameter
test: remove unused sanitizer suppressions
build: Disable valgrind when building zeromq package in depends
build: Disable libbsd when building zeromq package in depends
build: Update netbsd_kevent_void.patch
Avoid integer sanitizer warnings in chain.o
Remove unused checkFinalTx
wallet: Avoid dropping confirmed coins
tests: Test specifying input weights
rpc, wallet: Allow users to specify input weights
wallet: Allow user specified input size to override
wallet: add input weights to CCoinControl
refactor: replace RecursiveMutex m_chainstate_mutex with Mutex
refactor: add negative TS annotations for `m_chainstate_mutex`
Avoid unsigned integer overflow in bitcoin-tx
doc: add info about status code 404 for some rest endpoints
gui: use available space to display "Last Transaction" in peer details
gui: add "Addresses Rate-Limited" (m_addr_rate_limited) to peer details
gui: add "Addresses Processed" (m_addr_processed) to peer details
gui: add "Address Relay" (m_addr_relay_enabled) to peer details
doc: Update the used Qt version
script: redirecting stderr to stdout before pipelining into grep
refactor: replace RecursiveMutex `m_addr_local_mutex` with Mutex
p2p: add assertions and negative TS annotations for m_addr_local_mutex
test, bugfix: fix intermittent failure in getrawtransaction_tests
refactor tests to fix ubsan suppressions
build: force CRCCheck in Windows installer
test: add more wallet conflicts assertions
scripted-diff: rename cs_addrLocal -> m_addr_local_mutex
guix: ignore additioanl failing certvalidator test
build: point to latest commit on the master branch
Optimize CHECKSIGADD Script Validation
fs: Make compatible with boost 1.78
scripted-diff: rename m_cs_chainstate -> m_chainstate_mutex
Run coin.IsSpent only once in a row
build: add FreeBSD support to depends
refactor: replace RecursiveMutex g_maplocalhost_mutex with Mutex
scripted-diff: rename cs_mapLocalHost -> g_maplocalhost_mutex
qt,refactor: Use std::chrono in TrafficGraphWidget class
Replace `struct update_lock_points` with lambda
document and clean up MaybeUpdateMempoolForReorg
build: specify hosts for qrencode package
[unit test] package parents are a mix
[validation] better handle errors in SubmitPackage
AcceptPackage fixups
[unit test] different witness in package submission
[doc] more detailed explanation for deduplication
[packages] return DIFFERENT_WITNESS for same-txid-different-witness tx
Revert "Add to spends only transcations from me"
refactor: replace RecursiveMutex `m_subver_mutex` with Mutex
scripted-diff: rename `cs_SubVer` -> `m_subver_mutex`
net, refactor: Drop tautological local variables
scripted-diff: Rename CNetMessage::m_command with CNetMessage::m_type
build: disable external signer on Windows
wallet: Refactor TopUp to be able to top up inactive chains too
Release notes for getdeploymentinfo rpc
rpc: getdeploymentinfo: include signalling info
rpc: getdeploymentinfo: include block hash/height
rpc: getdeploymentinfo: change stats to always refer to current period
rpc: getdeploymentinfo: allow specifying a blockhash other than tip
rpc: move softfork info from getblockchaininfo to getdeploymentinfo
refactor: replace RecursiveMutex `m_callbacks_mutex` with Mutex
scripted-diff: rename `m_cs_callbacks_pending` -> `m_callbacks_mutex`
doc: Rework 14707 release notes
doc: move-only release note snippets
interfaces: Remove unused is_final
qt: Treat unconfirmed txs as unconfirmed
test: rest /tx with an invalid/unknown txid
test: use MiniWallet for mempool_accept.py
[net processing] Rename PoissonNextSendInbound to NextInvToInbounds
[net processing] Move PoissonNextSendInbound to PeerManager
scripted-diff: replace PoissonNextSend with GetExponentialRand
[refactor] Use uint64_t and std namespace in PoissonNextSend
[move] Move PoissonNextSend to src/random and update comment
Bugfix: configure: bitcoin-{cli,tx,util} don't need UPnP, NAT-PMP, or ZMQ
block_connected: re-use previous GetTimeMicros
block_connected: don't serialize block hash twice
Add (sorted)multi_a descriptors to doc/descriptors.md
Simplify wallet_taproot.py functional test
Add tests for (sorted)multi_a derivation/signing
Add signing support for (sorted)multi_a scripts
Add multi_a descriptor inference
Add (sorted)multi_a descriptor and script derivation
build: Improve error message when pkg-config is not installed
refactor, qt: Use std::chrono for input_filter_delay constant
util: Restore GetIntArg saturating behavior
build: Point Guix to the current top of the "version-1.4.0" branch
[bugfix] prevent UnicodeDecodeError errors when opening log file in feature_init.py
scripted-diff: Rename functions to drop mention of boost
test: MiniWallet: support default `from_node` for creating txs
test: create txs with current `nVersion` (2) by default
test: refactor: add constant for sequence number `SEQUENCE_FINAL`
log: Remove GetAdjustedTime from IBD header progress estimation
fuzz: non-addrman fuzz tests: override-able check ratio
fuzz: addrman fuzz tests: override-able check ratio
test: non-addrman unit tests: override-able check ratio
test: addrman unit tests: override-able check ratio
bench: put addrman check ratio in a variable
fuzz: parse the command line arguments in fuzz tests
test: parse the command line arguments in unit tests
Remove cs_main lock annotation from ChainstateManager.m_blockman
Change type of `backup_file` parameter in RestoreWallet/restoreWallet
refactor: Block unsafe std::string fs::path conversion copy_file calls
fuzz: Limit fuzzed time to years 2000-2100
refactor, qt: Add SHUTDOWN_POLLING_DELAY constant
refactor, qt: Use std::chrono for non-zero arguments in QTimer methods
refactor, qt: Use std::chrono in ConfirmMessage parameter
refactor, qt: Use std::chrono for MODEL_UPDATE_DELAY constant
Add FastRange32 function and use it throughout the codebase
refactor: add thread safety lock assertion to WriteBlockIndexDB()
Move CBlockFileInfo::ToString method where class is declared
Add src/wallet/* code to wallet:: namespace
Add src/node/* code to node:: namespace
test: set ban after mocking time
scripted-diff: rename MapIntoRange to FastRange64
[moveonly] Move MapIntoRange() to separate util/fastrange.h
ci: Clone entire bitcoin-core/qa-assets repo only when run fuzzing
build: rename --enable-ebpf to --enable-usdt
fuzz: move FuzzedSock earlier in src/test/fuzz/util.h
reviewers: add tracing
scripted-diff: Rename touched member variables
Make blockstorage globals private members of BlockManager
doc: Clarify nPruneAfterHeight for signet
test: Load genesis block to allow flush
Move blockstorage-related unload to BlockManager::Unload
move-only: Create WriteBlockIndexDB helper
Move functions to BlockManager
guix: use upstream python-requests (2.26.0)
build: use python-asn1crypto from upstream
guix: use uptream nsis-x86_64
guix: use GCC 10 (over GCC 8) to build releases
test: wait rather than assert presence of file in startupnotify test
test: use MiniWallet for mining_basic.py
doc: Mark proprietary array optional
refactor: Remove pointless and confusing shift in RelayAddress
scripts: add CONTROL_FLOW to ELF security checks
build: build x86_64 Linux Boost with -fcf-protection=full
script rename control flow check to MACHO specific
test: Bundle all integer sanitizer suppressions of dependencies
build: add systemtap's sys/sdt.h as depends
Refactor: Uses c++ init convention for time variables
Refactor: Changes remaining time variable type from int to chrono
build: patch depends zeromq to fix building on NetBSD Current
Update test/sanitizer_suppressions/lsan
test: Cover eviction by timeout in addrman_evictionworks
test: Add test for multiplicity in addrman new tables
test: run feature_pruning.py without wallet compiled
ci: Update Cirrus CI task name
scripts: make security checks architecture independent
doc: remove CC_FOR_BUILD from OpenBSD build doc
build, qt: No need to set inapplicable QPA backend for Android
zeromq 4.3.4
build: use host_os instead of TARGET_OS in configure output
doc: Update license year range to 2022
Move BlockManager to node/blockstorage
Remove unused char serialize
Use spans of std::byte in serialize
span: Add BytePtr helper
rpc: Use EnsureAnyArgsman in rpc/blockchain
rpc: Add EnsureArgsman helper
build: use a static .tiff for macOS .dmg over generating
doc: fix undo data filename (s/undo???.dat/rev???.dat/)
Change 'Show' icon
rpc: Quote user supplied descriptor in error msg
scripted-diff: Insert missed copyright headers
scripted-diff: Bump copyright headers
tracing: correctly scope utxocache:flush tracepoint
ci: Enable the gui in the TSan build
build: Drop redundant AC_SUBST macros
build: Drop redundant check of PKG_CHECK_MODULES presence
test: check that bitcoin-tx detects missing input amount for segwit transactions
Require that input amount is provided for bitcoin-tx witness transactions
test: enable txindex in feature_init
test: feature_init: retain debug.log and improve detection
test: feature_init: tweak all .ldb files of a certain type
test: add TestNode.wait_for_debug_log
test: introduce TestNode.debug_log_bytes
test: Add test for updating addrman entries
test: introduce utility function to retrieve an addrman
test: Remove unused AddrManTest class
test: Remove tests for internal helper functions
test: use AddrMan instead of AddrManTest where possible
test: Inline SimConnFail function
test: delete unused GetBucketAndEntry function
test: Update addrman_serialization unit test to use AddrMan's interface
addrman: Introduce a test-only function to lookup addresses
Include patches for Guix
doc: Remove outdated scriptChange TODO comment
doc: Remove fixed TODO from wallet/feebumper
doc: testnet3 was not reset and is doing BIP30 checks again
doc: Remove TODO from block fuzz test
doc: Remove TODO comment in tx_verify
test: check ban_duration and time_remaining after setting ban
test: use MiniWallet for p2p_compactblocks.py
wallettool: Check that the dumpfile checksum is the correct size
test: use MiniWallet for rpc_scantxoutset.py
test: introduce `address_to_scriptpubkey` helper
test: introduce `getnewdestination` helper for generating various address types
build, qt: Hardcode last modified timestamp in Qt RCC
doc: Drop outdated note
rpc: use peer_id, block_hash for FetchBlock
rpc: more detailed errors for getblockfrompeer
rpc: turn already downloaded into error in getblockfrompeer
rpc: clarify getblockfrompeer behavior when called multiple times
refactor: drop redundant hash argument from FetchBlock
rpc: allow empty JSON object result
test: Add missing suppressions for crypto_diff_fuzz_chacha20.cpp
test: add functional test for -startupnotify
init: Use clang-tidy named args syntax
style-only: Rename *Chainstate return values
docs: Make LoadChainstate comment more accurate
node/chainstate: Use MAX_FUTURE_BLOCK_TIME
util: move MapIntoRange() for reuse in fuzz tests
ci: use GCC 8 when building packages in native_qt5 CI
[test] compare filter and header with the result of the getblockfilter RPC
[rest] drop superfluous rpc serializations flags for block filters
[rest] add a more verbose error message for invalid header counts
[refactor] various style fix-ups
test: check for invalid listtransactions RPC parameters
scripted-diff: Rename interfaces::WalletClient to interfaces::WalletLoader
gui: address type dropdown, add bech32m
wallet: add taprootEnabled() to interface
scripted-diff: Rename libbitcoin_server.a to libbitcoin_node.a
Change time variable type to std::chrono::seconds in src/net_processing.cpp
ci: Use Cirrus "greedy" flag to use idle CPU time when available
ci: Use system sqlite in native macOS task
ci: Bump the macOS image to the latest Monterey
test: fix intermittent timeouts in p2p_timeouts.py
scripts: match on exe type over str in symbol-check.py
scripts: match on exe type over str in security-check.py
Refactor the chacha20 differential fuzz test
ci: Disable s390x gui tests for now
refactor: Avoid integer overflow in ApplyStats when activating snapshot
Move AdditionOverflow to util, Add CheckedAdd with unit tests
Add dev doc to CCoinsStats::m_hash_type and make it const
style: Remove unused whitespace
wallet: Strictly match tx change type to improve privacy
Let test_runner.py start multiple jobs per timeslot
contrib: add achow101 to trusted keys
[doc] CPFP carve out and single-conflict RBF exemption
[doc] clarify RBF difference from BIP125
[doc] current rbf policy
refactor: Remove implicit-integer-sign-change suppressions in validation.cpp
test: check that pruneblockchain RPC fails for future block or timestamp
test: Combine addr generation helper functions
test: previous releases: add v22.0
test: bump sandbox argument minimum version
test: previous releases: add v0.21.0
test: v0.20.1 backwards compatibility
test: backwards compatibility: misc fixes
test: Remove i686 from test/get_previous_releases.py
refactor: remove the wallet folder if the restore fails
refactor: Move restorewallet() RPC logic to the wallet section
Move pindexBestInvalid to ChainstateManager
Move m_failed_blocks to ChainstateManager
Move AcceptBlockHeader to ChainstateManager
Move FindForkInGlobalIndex from BlockManager to CChainState
test: re-organized array according to order of logs and included 2 more interruption events
Remove unnecessary cast in CKey::SignSchnorr
Remove --disable-openssl-tests for libsecp256k1 configure
Squashed 'src/secp256k1/' changes from be8d9c262f..0559fc6e41
Update secp256k1 subtree to latest upstream master
bench: Sort bench_bench_bitcoin_SOURCES
bench: Add logging benchmark
test: include two more interruptions points
refactor: addrman_select test
refactor: addrman_evictionworks test
refactor: addrman_noevict test
refactor: addrman_selecttriedcollisions test
test: Improve "invalid_command" subtest in system_tests for Windows
doc: add explanations for assert in index and magic numbers in test
refactor: Implement restorewallet() logic in the wallet section
qt: prevent negative values of progressPerHour
net: Drop only invalid entries when reading banlist.json
tests: Add missing assert_equal import to p2p_add_connections.py
p2p: Always serialize local timestamp for version msg
refactor: remove dependence on AddrManTest
refactor: check Good() in tried_collisions test
refactor: make AddrMan::Good return bool
style: Use 4 spaces for indendation, not 5
Disallow copies of CChain
refactor: remove unneeded calls to strprintf()
test: add tests for LoadBlockIndex when using multiple chainstates
validation: have LoadBlockIndex account for snapshot use
validation: don't modify genesis during snapshot load
build, qt: use static QAndroidPlatformIntegrationPlugin
rpc: Quote user supplied strings in error messages
test: call VerifyLoadedChainstate during ChainTestingSetup
wallet: Replace Assume with Assert where needed in coinselection
build: use __SIZEOF_INT128__ for checking __int128 availability
scripted-diff: Rename touched member variables
Use mockable time for peer connection time
refactor: Use type-safe std::chrono in net
Reduce size of strencodings decode tables
Add multisig tutorial
build: Use config_opts instead of passing a compiler flag directly
build, qt: Drop unused CROSS_COMPILE variable for Android builds
build, refactor: Re-use `qt_lib_suffix` variable
rpcwallet: mention labels are deactivated for ranged descriptors
rpc: Add warning to user about newkeypool command
rpc: output all hash preimages in 'decodepsbt'
psbt: implement hash preimages fields
validation, doc: remove TODO comment
build, qt: Drop support for `i686-linux-android` host
[fuzz] Add fuzzing harness to compare both implementations of ChaCha20
[fuzz] Add D. J. Bernstein's implementation of ChaCha20
test: fix test failures in test/functional/p2p_timeouts.py
validation, log: improve logging in FlushSnapshotToDisk()
validation, log: extract FlushSnapshotToDisk() function
doc: Remove TODO 'exclude peers with download permission'
test: Use byte unit 'M' for -maxuploadtarget functional test
Add global xpub test vectors from BIP
Add global_xpubs to decodepsbt
Implement serializations for PSBT_GLOBAL_XPUB
Implement operator< for KeyOriginInfo and CExtPubKey
Separate individual HD Keypath serialization into separate functions
Store version bytes and be able to serialize them in CExtPubKey
moveonly: Move (Un)Serialize(To/From)Vector, (De)SerializeHDKeypaths to psbt module
Test for proprietary field
Output proprietary type info in decodepsbt
Implement PSBT proprietary type
Output psbt version in decodepsbt
Add GetVersion helper to PSBT
Implement PSBT versions
Types are compact size uints
fuzz: Move ISO8601 to one place
build: Include native_X.mk before X.mk
Use the imperative mood in example subject line
test: add feature_coinstatsindex.py --descriptors to test_runner.py
test: fix test feature_coinstatsindex.py for descriptor wallets
qa: replace assert with test framework assertion helpers in fee estimation test
qa: fee estimation with RBF test cleanups
qa: don't mine non standard txs in fee estimation test
qa: pass scriptsig directly to txins constructor in fee estimation test
qa: split coins in a single tx in fee estimation test
qa: use a single p2sh script in fee estimation test
test: Replace hashlib.new with named constructor
qa: remove a redundant condition in fee estimation test
qa: test descriptors with mixed xpubs and const pubkeys
Check descriptors returned by external signers
test: fancier Python for getblockfrompeer
Mempool Update Cut-Through Optimization
[TESTS] Increase limitancestorcount in tournament RPC test to showcase improved algorithm
Swap out hashlib.ripemd160 for own implementation
Add pure Python RIPEMD-160
test: feature_rbf.py: check specified wallet type availability
doc: Normalize RPC description whitespace
rpc: avoid expensive `IsMine` calls in `GetReceived` tally
rpc: avoid scriptPubKey<->CTxDestination conversions in `GetReceived` tally
test: interface_bitcoin_cli.py: check specified wallet type availability
wallet: Properly set hd chain counters when loading
wallet: Parse hdKeypath if key_origin is not available
Add size check on meta.key_origin.path
rpc: Document that DEFAULT is for Taproot, ALL for everything else
psbt: Actually use SIGHASH_DEFAULT
psbt: Make sighash_type std::optional<int>
scripted-diff: Use named args in RPC docs
doc: Add missing optional to getblockfrompeer
Add createmultisig and addmultisigaddress warnings release note
Add warnings field to addmultisigaddress to warn about uncompressed keys
Add warnings field to createmultisig to warn about uncompressed keys
MOVEONLY: Move abortrescan from backup.cpp to transactions.cpp
Remove unused imports from rpc/wallet and reorder RPCs
MOVEONLY: Move rpcwallet to rpc/wallet
MOVEONLY: Move spending RPCs to spend.cpp
MOVEONLY: Move balance and utxo RPCs to coins.cpp
MOVEONLY: Move address related functions from rpcwallet to addresses.cpp
MOVEONLY: Move transaction related wallet RPCs to transactions.cpp
Remove CTxMemPool params from ATMP
style-only: Remove redundant scope in *Chainstate
Collapse the 2 cs_main locks in LoadChainstate
Remove all #include // for * comments
test/setup: Use LoadChainstate
node/chainstate: Add options for in-memory DBs
node/caches: Remove intermediate variables
node/caches: Extract cache calculation logic
validation: VerifyDB only needs Consensus::Params
node/chainstate: Decouple from ShutdownRequested
node/chainstate: Decouple from GetTime
init: Delay RPC block notif until warmup finished
Necessary improvements to make configure work without libevent installed
Coinbase receivedby rpcs release notes
Test including coinbase transactions in receivedby wallet rpcs
doc: Add missing optional to MempoolEntryDescription
mining, refactor: add m_mempool.cs thread safety lock assertions
p2p, refactor: drop unused DNSLookupFn param in LookupSubnet()
p2p, refactor: tidy up LookupSubNet()
build: Bump AX_PTHREAD macro to the latest version
test: remove unneeded sync_all() calls in wallet_listtransactions.py
Move -checkblocks LogPrintf to AppInitMain
node/chainstate: Reduce coupling of LogPrintf
node/chainstate: Decouple from concept of uiInterface
Remove unused (and broken) functionality in SpanReader
Split off VerifyLoadedChainstate
node/chainstate: Remove do/while loop
Move init logistics message for BAD_GENESIS_BLOCK to init.cpp
Move mempool nullptr Assert out of LoadChainstate
node/chainstate: Decouple from concept of NodeContext
node/chainstate: Decouple from ArgsManager
node/chainstate: Decouple from stringy errors
node/chainstate: Decouple from GetTimeMillis
node: Extract chainstate loading sequence
test: add interface_bitcoin_cli.py --descriptors to test_runner.py
test: fix test interface_bitcoin_cli.py for descriptor wallets
Include coinbase transactions in receivedby wallet rpcs
doc: Improve ZMQ documentation
[bugfix] update lockpoints correctly during reorg
MOVEONLY: update_lock_points to txmempool.h
ci: Make macOS native task sqlite only
p2p: Make timeout mockable and type safe, speed up test
rpc: Only allow specific types to be P2(W)SH wrapped in decodescript
Make Bech32 LocateErrors return error list rather than using out-arg
test: Remove false coinstatsindex test
tests: Add data-driven testcases to rpc_decodescript.py
Use SelectionResult in SelectCoins
Use SelectionResult in AttemptSelection
Use SelectionResult for waste calculation
Make an OutputGroup for preset inputs
Return SelectionResult from SelectCoinsSRD
Return SelectionResult from KnapsackSolver
Return SelectionResult from SelectCoinsBnB
Make member variables of SelectionResult private
scripted-diff: Use SelectionResult in coin selector tests
Introduce SelectionResult struct
build, qt: Use Android NDK r23 LTS
correct rpc address_type helptext
build: Bump Fonconfig version up to 2.12.6
cover DisconnectBlock with lock annotation
build: remove x-prefix comparisons
rpc: Add missing BlockUntilSyncedToCurrentChain to wallet RPCs
ci: Bump Qt to 5.15.2 in the native Windows task
doc: Update `build_msvc/README.md` for Qt 5.15.2
build: qt 5.15.2
build: add libxcb_util_wm 0.4.1
build: add libxcb_util_image 0.4.0
build: add libxcb_util_keysyms 0.4.0
build: add libxcb_util_render 0.3.9
build: add libxcb_util 0.4.0
build: libxcb 1.14
build: freetype 2.11.0
build: expat 2.4.1
build: xcb_proto 1.14.1
build: libXau 1.0.9
build: xproto 7.0.31
MOVEONLY: Move LoadWalletHelper to wallet/rpc/util
MOVEONLY: Move wallet encryption RPCs to encrypt.cpp
MOVEONLY: Move backupwallet and restorewallet to rpc/backup.cpp
MOVEONLY: Move rpcdump.cpp to wallet/rpc/backup.cpp
qt: Handle Android back key in the Node window
qt, android: Add GUIUtil::IsEscapeOrBack helper
test: fix: remove outdated TestNode.generate calls
contrib: add check for wget command in install_db4.sh
Generalize/simplify VectorReader into SpanReader
doc: Document optional result fields in validateaddress
fuzz: Rework rpc fuzz target
doc: Document optional result fields in getpeerinfo
Remove GetSpendHeight
clean up txmempool includes
change TestLockPointValidity to take a const reference
rpc: add missing scantxoutset examples
remove unnecessary casts and use braced initialization
rpc: getblockfrompeer
rpc: move Ensure* helpers to server_util.h
wallet: Replace confusing getAdjustedTime() with GetTime()
net: change CreateNodeFromAcceptedSocket() to take Sock
net: use Sock in CConnman::ListenSocket
net: add new method Sock::Accept() that wraps accept()
Remove calls to global Params() in tx_pool test
Remove AcceptToMemoryPoolWithTime
doc: use BIP125-replaceable
doc: Extract CreateTxDoc in rawtransaction
rpc: remove info about mallocinfo needing glibc 2.10+
fuzz: Rework FillNode
refactor: Set fSuccessfullyConnected in FillNode
fuzz: Avoid negative NodeId in ConsumeNode
refactor: Call type-solver earlier in decodescript
style: Remove whitespace
miner: Remove uncompiled MTP code
style: Add {} to if-bodies in node/miner
Remove nullptr check in GetBlockScriptFlags
refactor: Pass const reference instead of pointer to GetBlockScriptFlags
MOVEONLY: Move utility functions from rpcwallet to wallet/rpc/util
Introduce wallet/rpc/util
Use std::iota instead of manually pushing range
Use bounds-checked array lookups in Bech32 error detection code
Simplify encoding of e in GF(1024) tables to (1,0)
Replace GF1024 tables and syndrome constants with compile-time generated constexprs.
test: Bump shellcheck version to 0.8.0
Remove GetAdjustedTime from init.cpp
rpc: various fixups for dumptxoutset
Replace addrman.h include with forward decl in net.h
Break validation <-> txmempool circular dependency
[mempool] always assert coin spent
[refactor] put finality and maturity checking into a lambda
[mempool] only update lockpoints for non-removed entries
MOVEONLY: TestLockPointValidity to txmempool
Add RPC help for getblock verbosity level 3
Update release note for bech32 error detection
More Span simplifications
Replace MakeSpan helper with Span deduction guide
[unit test] package submission
[validation] de-duplicate package transactions already in mempool
[packages] add sanity checks for package vs mempool limits
p2p: Don't use timestamps from inbound peers
[validation] full package accept + mempool submission
[policy] require submitted packages to be child-with-unconfirmed-parents
[packages/doc] define and document package rules
test: Add test for block relay only eviction
[unit test] context-free package checks
[packages] add static IsChildWithParents function
build, qt: Ditch `no_sdk_version_check.patch`
test: Make more shell scripts verifiable by the `shellcheck` tool
[tracing] tracepoints to utxocache add, spent and uncache
[tracing] tracepoint for utxocache flushes
test: add feature_rbf.py --descriptors to test_runner.py
test: always rescan after importing private keys in `init_wallet` helper
test: Add edge case of pruning up to index height
wallet: Split signmessage from rpcwallet
net: don't check if the listening socket is valid
doc: Tidy up nMinDiskSpace comment
contrib: Specify wb mode when creating mac sdk
ci: Always run merge_base_script first for consistency
ci: Revamp Android SDK cache, and update it timely
ci: Make macOS SDK cache independent, and update it timely
 test: add wallet_transactiontime_rescan.py --descriptors to test_runner.py
test: fix test wallet_transactiontime_rescan.py for descriptor wallets
test: refactor: use `set_node_times` helper in wallet_transactiontime_rescan.py
refactor: Use underlying type of isminetype for isminefilter
build: don't set PORT=no in config.site
Crash debug builds when mempool ConsensusScriptChecks fails
Revert "doc: Install Rosetta on M1-macOS for qt in depends"
build, qt, macOS: Don't pass -device-option when building natively
build, qt, macOS: Don't hard-code x86_64 as the arch when using qmake
scripted-diff: Drop Darwin version for better maintainability
refactor: replace RecursiveMutex m_added_nodes_mutex with Mutex
refactor: replace RecursiveMutex m_addr_fetches_mutex with Mutex
scripted-diff: rename node vector/mutex members in CConnman
refactor: remove RecursiveMutex cs_totalBytesRecv, use std::atomic instead
scripted-diff: rename `proxyType` to `Proxy`
net: respect -onlynet= when making outbound connections
build: patch qt to explicitly define previously implicit header include
script install_db4.sh added check for patch command
Report encoding type in bech32 error message
Improve Bech32 boost tests
Address review comments for Bech32 error validation
refactor: cast bool to int to silence compiler warning
qt: monospaced output in Console on macOS
wallet: Call load handlers without cs_wallet locked
Follow Transifex docs to prepare XLIFF source
build: don't check for deprecated qt5 package
build: don't check for deprecated berkeley-db4 package
script: preventing non-compatible sed binary.
test: run rpc-generateblock.py even with wallet disabled
configure.ac: remove Bashism
util: Add missing fstatfs to syscall sandbox
test: Remove sanitizer suppression implicit-signed-integer-truncation:netaddress.cpp
scripted-diff: Use clang-tidy syntax for C++ named arguments
doc: Use clang-tidy comments in crypto_tests
Bugfix: RPC/mining: Fail properly in estimatesmartfee if smart fee data is unavailable
Remove strtol in torcontrol
test: add check_node_connections in util
net: split CConnman::SocketHandler()
style: remove unnecessary braces
net: keep reference to each node during socket wait
net: dedup and RAII-fy the creation of a copy of CConnman::vNodes
test: add decodescript RPC test for P2TR output type
test: check for decodescript RPC 'type' results
test: add logging to rpc_decodescript.py
test: refactor: replace OP_1/OP_TRUE magic numbers by constants
test: refactor: take use of `create_block` txlist parameter
test: refactor: take use of `create_block` version parameter (or use default)
util: ParseByteUnits - Parse a string with suffix unit [k|K|m|M|g|G|t|T]
scripts: test for PE control flow instrumentation
build: use -fcf-protection=full when building Windows Boost in depends
scripted-diff: Rename m_last_send and m_last_recv
fuzz: Add minisketch fuzz test
Extract Taproot internal keyid with GetKeyFromDestination
Mention bech32m in -addresstype and -changetype help
Create a tr() descriptor bech32m DescriptorScriptPubKeyMan by default
doc: Pick better named args for MutableTransactionSignatureCreator
ci: Rework ci task names
refactor: Replace validation.h include with forward-decl in miner.h
style: Sort file list after rename
scripted-diff: Move miner to src/node
policy: Treat taproot as always active
Store pubkeys in TRDescriptor::MakeScripts
build: add `--enable-lto` configuration option
build: remove D__STDC_FORMAT_MACROS from CPPFLAGS
build: require glibc 2.18+ for release builds
Improve fs::PathToString documentation
refactor: Make CWalletTx sync state type-safe
test: Force --nosandbox when --valgrind
test: Return the largest utxo in MiniWallet.get_utxo
ci: Drop --failfast in functional tests on native Windows CI task
build_msvc/bitcoin_config.h is generated using build_msvc/msvc-autogen.py
build: Drop unneeded dependencies for bitcoin-wallet tool
depends, wallet: fix typos
test: Enable SC2046 shellcheck rule
test: Enable SC2086 shellcheck rule
ci: Replace soon EOL hirsute with jammy
test: refactor: simplify `block_submit` in feature_nulldummy.py
test: refactor: rename NULLDUMMY-invalidation helper
test: simplify and document NULLDUMMY-invalidation helper
multiprocess: Add interfaces::Node::broadCastTransaction method
fuzz: replace every fuzzer-controlled loop with a LIMITED_WHILE loop
test: remove unnecessary block rehashing prior to solving
tests: implement BIP341 test vectors
tests: BIP341 test vector generation
tests: add deterministic signing mode to ECDSA
tests: abstract out precomputed BIP341 signature hash elements
tests: give feature_taproot access to sighash preimages
tests: add more fields to TaprootInfo
Make signing follow BIP340 exactly w.r.t. aux randomness
build: remove duplicate -fvisibility=hidden from Boost build
build: don't install Boost cmake config files
Use c++17 in clang-format
style: Use 4 spaces for indentation, not 5
test: Remove unused CDataStream copy
Sort file list after rename
scripted-diff: Move minisketchwrapper to src/node
build: consistently quote AC_CHECK_LIB() arguments
build: consistently quote AC_MSG_* arguments
build: consistently quote AC_CHECK_PROG() arguments
build: consistently quote arguments in AC_ARG_VAR()
build: consistently quote arguments in AM_CONDITIONAL()
build: consistently quote AC_DEFINE() arguments
build: consistently quote AC_MSG_CHECKING() arguments
build: consistently quote AC_PATH_TOOL arguments
build: AC_PATH_PROG(S) consistently quote arguments
build: cleanup AX_CHECK_PREPROC_FLAG() usage
build: AX_CHECK_PREPROC_FLAG() serial 6
build: cleanup AX_CHECK_COMPILE_FLAG() usage
build: AX_CHECK_COMPILE_FLAG() serial 6
build: cleanup AX_CHECK_LINK_FLAG() usage
build: AX_CHECK_LINK_FLAG serial 6
cli: hoist networks class data members to a constant
cli: add cjdns network to -addrinfo and -netinfo
test: Correct MyPy typing for subtest decorator
Add a brief overview of fuzzing/Bitcoin Core fuzzing
doc: Add minimum supported Android NDK version
doc: Move Android dependencies guide into `build-android.md`
build: Switch to llvm buinutils for Android builds
refactor: use `CWallet` const shared pointers in dump{privkey,wallet} RPCs
refactor: use const `LegacyScriptPubKeyMan` references in dump{privkey,wallet} RPCs
refactor: avoid multiple key->metadata lookups in dumpwallet RPC
scripted-diff: Bump copyright headers
scripted-diff: Remove redundant sync_all and sync_blocks
test: Properly set sync_fun in NodeNetworkLimitedTest
test: Use 4 spaces for indentation
[addrman] [tests] Remove AddrManUncorrupted subclass
[addrman] [tests] Remove AddrManCorrupted subclass
[addrman] [tests] Tidy up unused arguments in addrman test functions
[addrman] [tests] Remove deterministic argument and member from AddrManTest
[addrman] Remove AddrMan friends
span: Add std::byte helpers
refactor: Use ignore helper when unserializing an invalid pubkey
Use value_type in CDataStream where possible
Add file validation to savemempool RPC test
Add filename to savemempool RPC result
fix `XOnlyPubKey::IsFullyValid` comment reference
test: MiniWallet: add P2TR support and use it per default
test: generate blocks to MiniWallet address in rpc_blockchain.py
test: Add txindex migration test
Remove `gArgs` from `wallet.h` and `wallet.cpp`
doc: remove redundant optionals from build-unix.md
doc: remove Boost build note from build-unix.md
doc: Suggest `keys.openpgp.org` as keyserver in SECURITY.md
ci: Enable ccache for "ARM64 Android APK" job
doc: remove mention of system univalue
ci: Do not print `git log` for empty COMMIT_RANGE
Remove the build_msvc/testconsensus project
doc: update SECURITY.md inline with recent changes to bitcoincore.org
doc: Mention that BerkeleyDB is for legacy wallet in build-unix
[test] call CheckPackage for package sanitization checks
MOVEONLY: move package unit tests to their own file
MOVEONLY: mempool checks to their own functions
scripted-diff: clean up MemPoolAccept aliases
Open streams_test_tmp file in temporary folder
document workspace members
[validation] cache iterators to mempool conflicts
[validation] Always call mempool.check() after processing a new transaction
[refactor] Don't call AcceptToMemoryPool() from outside validation.cpp
[validation] Add CChainState::ProcessTransaction()
[logging/documentation] Remove reference to AcceptToMemoryPool from error string
[validation] Remove comment about AcceptToMemoryPool()
contrib: recognize CJDNS seeds as such
net: take the first 4 random bits from CJDNS addresses in GetGroup()
net: relay CJDNS addresses even if we are not connected to CJDNS
net: don't skip CJDNS from GetNetworkNames()
net: take CJDNS into account in CNetAddr::GetReachabilityFrom()
test: extend feature_proxy.py to test CJDNS
test: remove default argument of feature_proxy.py:node_test()
net: recognize CJDNS addresses as such
net: don't skip CJDNS from GetNetworksInfo()
net: introduce a new config option to enable CJDNS
net: recognize CJDNS from ParseNetwork()
net: use -proxy for connecting to the CJDNS network
net: make it possible to connect to CJDNS addresses
[test] Don't set bypass_limits to true in txvalidation_tests.cpp
[test] Don't set bypass_limits to true in txvalidationcache_tests.cpp
Exit early for an empty vChecks in CCheckQueue::Add
Avoid excessive lock contention in CCheckQueue::Add
wallet: Make GetOldestKeyPoolTime return nullopt for blank wallets
wallet, refactor: Make GetOldestKeyPoolTime return type std::optional
Adds verification step to Schnorr and ECDSA signing
doc: Remove fee delta TODO from txmempool.cpp
rpc: move fees object to match help
doc: add release note for fee field deprecation
test: add functional test for deprecatedrpc=fees
rpc: deprecate fee fields from mempool entries
doc: Add output script descriptors BIPs 380..386
refactor: Take Span in SetSeed
fuzz: Rework ConsumeScript
test: Avoid excessive locking of `cs_wallet`
util, refactor: Improve headers for bitcoin-wallet tool
refactor: get wallet path relative to wallet_dir
test: Implicitly sync after generate*, unless opted out
[test] tx processing before and after ibd
[net_processing] ignore all transactions during ibd
[validation/rpc] cache + use vsize calculated in PreChecks
[validation] re-introduce bool for whether a transaction is RBF
[validation/refactor] store precomputed txdata in workspace
[validation] case-based constructors for ATMPArgs
[MOVEONLY] reorder functions in addrman_impl.h and addrman.cpp
[addrman] Add Add_() inner function, fix Add() return semantics
ci: Build fuzz with libsqlite3-dev
[addrman] Rename Add_() to AddSingle()
[addrman] Add doxygen comment to AddrMan::Add()
test: MiniWallet: more deterministic coin selection for coinbase UTXOs (oldest first)
test: Add ios_base::width tsan suppression
test: add stress tests for initialization
test: add script_util helper for creating bare multisig scripts
Introduce new V4 format addrman
scripted-diff: disable unimplemented ArgsManager BOOL/INT/STRING flags
refactor: Add explicit DISALLOW_NEGATION ArgsManager flag to clarify flag usage
refactor: Split InterpretOption into Interpret{Key,Value} functions
refactor: use CWallet const shared pointers when possible
refactor: const shared_ptrs
util: Use FEATURE_LATEST for wallets created with bitcoin-wallet
walletdb: Use SQLiteDatabase for mock wallet databases
tests: Place into mapWallet in coinselector_tests
Make AddrMan support multiple ports per IP
ci: Add vcpkg tools cache
fuzz: Add wallet fuzz test
refactor: Use local args instead of global gArgs in CWallet::Create
Make GenTxid boolean constructor private
remove unused CTxMemPool::info(const uint256& txid)
refactor: include a missing <limits> header in fs.cpp
[mempool] delete exists(uint256) function
create explicit GenTxid::{Txid, Wtxid} ctors
wallet: fix segfault by avoiding invalid default-ctored `external_spk_managers` entry
build: Inline FUZZ_SUITE_LDFLAGS_COMMON
test: Replace log with assert_equal in wallet_abandonconflict
ubsan: add minisketch exceptions
Add thin Minisketch wrapper to pick best implementation
Add basic minisketch tests
Add minisketch dependency
Add MSVC build configuration for libminisketch
build: add minisketch build file and include it
build: add configure checks for minisketch
Squashed 'src/minisketch/' content from commit 89629eb2c7
refactor: remove references to deprecated values under std::allocator
ci: Improve vcpkg binary cache settings
ci, refactor: Rename VCPKG_TAG variable and vcpkg_cache script
ci: Disable syscall sandbox in valgrind functional tests
wallet: Use PACKAGE_NAME to mention our software
doc: Add note on deleting past-EOL release branches
test: add node.chain_path and node.debug_log_path
netinfo: print peer counts for all reachable networks
Address review comments from #22918
build: explicitly disable libsecp256k1 openssl based tests
build: fix python detection post #23182
Make explicit the node param in init_wallet()
tests: Add feature_segwit.py --descriptors to test_runner.py
tests: restrict feature_segwit legacy wallet import tests
tests: Use descriptors for feature_segwit multisig setup
ci: Bump vcpkg release tag
Add missing gettimeofday to syscall sandbox
test: Remove unused node from mining_prioritisetransaction
log: improve addrman logging
tracing: drop block_connected hash.toString() arg
build: Remove unneeded share/man directory from libXau package
build: Remove unneeded share/man directory from freetype package
build: Remove empty var/cache/fontconfig directory from fontconfig
build: Remove unneeded share/doc directory from expat package
build: Drop non-existent share/pkgconfig directory
test: get and decode tx with a single `gettransaction` RPC call
Update REST docs with new accessors
Expose block filters over REST.
Add comment to COIN constant.
lint: enable mypy checking for missing imports
lint mypy 0.910
lint: install pyzmq (22.3.0) into linter environment
doc: remove pointlessly duplicated linter version / install info
tests: Use Descriptor wallets for generic wallet tests
tests: Use legacy change type in subtract fee from outputs test
tests: Use descriptors in psbt_wallet_tests
tests: Use DescriptorScriptPubKeyMan in coinselector_tests
tests, gui: Use DescriptorScriptPubKeyMan in GUI tests
bench: Use DescriptorScriptPubKeyMan for wallet things
bench: remove global testWallet from CoinSelection benchmark
tests: Remove global vCoins and testWallet from coinselector_tests
ci, refactor: Disable binaries for Android task explicitly
doc: update release notes for 22539
Unit tests for IsWitnessProgram and IsP2WSH.
build: remove build stubs for external leveldb
test: check that bumpfee RPC fails for txs with descendants in mempool
Use absolute FQDN for DNS seed domains
test: Add check that newkeypool flushes change addresses too
scripted-diff: Prefix makefile variables with QT_
qt: Use only Qt translation primitives in GUI code
symbol-check: Check requested ELF interpreter
build: Drop -Wno-unused-local-typedef
build: remove -Wunused-variable
build: remove -Wswitch
build: use loop-analysis over range-loop-analysis
build: remove -Wsign-compare
test: bip125-replaceable in listsinceblock
bitcoin-tx: Reject non-integral and out of range multisig numbers
bitcoin-tx: Reject non-integral and out of range sequence ids
test: Check that bitcoin-tx accepts whitespace around sequence id and multisig numbers
rest: Return error when header count is not integral
scripts: remove pixie.py
scripts: only parse the binary once in security-check.py
scripts: use LIEF for ELF checks in security-check.py
scripts: only parse the binary once in symbol-check.py
scripts: use LIEF for ELF checks in symbol-check.py
test-*-check: Pass in *FLAGS and compile with them
Modify copyright header on Bech32 code
Add lots of comments to Bech32
Add release notes for validateaddress Bech32 error detection
Refactor and add more tests for validateaddress
Add boost tests for bech32 error detection
Add error_locations to validateaddress RPC
Add Bech32 error location function
More detailed error checking for base58 addresses
tests: Calculate fees more similarly to CFeeRate::GetFee
util: Add mincore and clone3 to syscall sandbox
Integrate univalue into our buildsystem
Squashed 'src/univalue/' changes from 98fadc0909..a44caf65fe
Update univalue subtree to latest upstream
validation: put coins cache write log into bench debug log
blockstorage: use debug log category
validation: move header validation error logging to VALIDATION debug category
validation: include block hash when reporting prev block not found errors
bitcoin-tx: Avoid treating overflow as OP_0
tests: Test for assertion when feerate is rounded down
fees: Always round up fee calculated from a feerate
qt: hide Create Unsigned button behind an expert mode option
refactor: Use C++11 range based for loop in ParseScript
Disable lock contention logging in checkqueue_tests
qt: Add Create Unsigned button to SendConfirmationDialog
GUI/Options: Restore "S" accelerator for "Start on system login" option
qt: Add helper to load font
ci: Reduce Windows memory for faster scheduling
p2p: Use mocktime for ping timeout
Replace stoul with ToIntegral in dbwrapper
refactor: move `update_*` structs from txmempool.h to .cpp file
refactor: use const reference for parents in `CTxMemPool::UpdateAncestorsOf`
test: Add ParseMoney and ParseScript tests
test: Replace satoshi_round with int() or Decimal()
test: Avoid RPC roundtrip in MiniWallet get_descriptor()
util: Add mremap syscall to AllowAddressSpaceAccess
test: Delete generate* calls from TestNode
test: Use generate* node RPC, not wallet RPC
test: Use generate* from TestFramework, not TestNode
test: listtranscations with externally generated addresses
Add to spends only transcations from me
Automatically add labels to detected receiving addresses
Return used destinations from ScriptPubKeyMan::MarkUnusedAddresses
Add CWallet::IsInternalScriptPubKeyMan
Use self.generate not node.generate throughout tests
External input fund support cleanups
refactor: use `{Read,Write}BE32` helpers for BIP32 nChild (de)serialization
qt: never disable HD status icon
util: Conditionalize some syscalls in syscall name table
util: Add __NR_copy_file_range syscall constant for sandbox
p2p: improve checkaddrman logging with duration in milliseconds
[fuzz] Update comment in FillAddrman()
[fuzz] Make Fill() a free function in fuzz/addrman.cpp
[fuzz] Make RandAddr() a free function in fuzz/addrman.cpp
Make CAddrman::Select_ select buckets, not positions, first
[fuzz] Pass FuzzedDataProvider& into Fill() in addrman fuzz tests
[fuzz] Create a FastRandomContext in addrman fuzz tests
log, timer: add LOG_TIME_MILLIS_WITH_CATEGORY_MSG_ONCE macro
log, timer: allow not repeating log message on completion
multiprocess: add interfaces::ExternalSigner class
refactor: Block unsafe fs::path std::string conversion calls
refactor: Add fs::PathToString, fs::PathFromString, u8string, u8path functions
util: Make sure syscall numbers used in profile are defined
RPCConsole: Throw when overflowing size_t type for array indices
style: Sort
scripted-diff: Move bloom to src/common
refactor: Remove unused MakeUCharSpan
core_write: Rename calculate_fee to have_undo for clarity
release-notes: Add release note about getblock verbosity level 3.
rest: Add test for prevout fields in getblock
rpc: Add test for level 3 verbosity getblock rpc call.
rpc: Add level 3 verbosity to getblock RPC call.
rpc: Replace boolean argument for tx details with enum class.
wallet: resolve ambiguity of two ScriptPubKey managers providing same script
util: Define SECCOMP_RET_KILL_PROCESS if not provided by the headers
build: add python3.10 alias to AC_PATH_PROGS call in configure
build: no-longer fail default configure if BDB isn't available
sandbox: add copy_file_range to allowed filesystem syscalls
sandbox: add newfstatat to allowed filesystem syscalls
doc: add assumeutxo notes
[refactor] pass coinsview and height to check()
[mempool] simplify some check() logic
[validation/mempool] use Spend/AddCoin instead of UpdateCoins
MOVEONLY: remove single-use helper func CheckInputsAndUpdateCoins
[mempool] remove now-unnecessary code
[mempool] speed up check() by using coins cache and iterating in topo order
[bench] Benchmark CTxMemPool::check()
doc: Extract FundTxDoc
Remove unused ParseDouble and ParsePrechecks
Add an argparse abbreviated mode to --failfast
allow send rpc take external inputs and solving data
Tests for funding with external inputs
allow fundtx rpcs to work with external inputs
Test transactions conflicted by double spend in listtransactions
contrib: Ask for captcha in signet getcoins.py
refactor: Remove unused ParsePrechecks from ParseIntegral
[refactor/bench] make mempool_stress bench reusable and parameterizable
Add syscall sandboxing (seccomp-bpf)
test: check abandoned tx in listsinceblock
doc: Combine 23.0 release notes
build: make --enable-werror just -Werror
scripted-diff: rename DBErrors::RESCAN_REQUIRED to NEED_RESCAN
test: update assert_fee_amount() in test_framework/util.py
Replace use of locale dependent atoi(…) with locale-independent std::from_chars(…) (C++17)
Return false on corrupt tx rather than asserting
doc: Suggest using jom instead of nmake
doc: Replace a link to Qt precompiled binaries with compile instructions
consensus: use <cstdint> over <stdint.h> in amount.h
consensus: make COIN & MAX_MONEY constexpr
[MOVEONLY] consensus: move amount.h into consensus
Add rescan removal release note
Remove -rescan startup parameter
Corrupt wallet tx shouldn't trigger rescan of all wallets
Allow Coin Selection be able to take external inputs
Allow CInputCoin to also be constructed with COutPoint and CTxOut
rpc: improve TransactionDescriptionString() "generated" help
test: add listtransactions/listsinceblock "trusted" coverage
rpc: fix "trusted" description in TransactionDescriptionString
qt: Do not show unused widgets at startup
log: Adjust coin selection log string
log: Avoid broken DEBUG_LOCKORDER log
Add release notes for fee est with replacement txs
qa: test fee estimation with replacement transactions
qa: split run_test into smaller parts
test: use miniwallet in test_rpc() function in feature_rbf.py
Re-include RBF replacement txs in fee estimation
qt, refactor: Drop intermediate BitcoinApplication::shutdownResult slot
qt: Do not exit and re-enter main event loop during shutdown
Update crc32c subtree
test: introduce script_util helper for creating P2PK scripts
Squashed 'src/crc32c/' changes from b5ef9be675..0d624261ef
test: * -> &
Revert "doc: Remove outdated comments"
doc: update developer docs for subtree renaming
Remove outdated dummy wallet -salvagewallet arg
[style] Run changed files through clang formatter.
scripted-diff: Rename CAddrInfo to AddrInfo
scripted-diff: Rename CAddrMan to AddrMan
bloom: cleanup includes
bloom: use constexpr where appropriate
bloom: use Span instead of std::vector for `insert` and `contains`
psbt: sign without finalizing
[doc] Update comments
[refactor] Update GetAddr_() function signature
[move-only] Move constants to test-only header
[addrman] Change CAddrInfo access
[move-only] Move CAddrInfo to test-only header file
[net, addrman] Remove external dependencies on CAddrInfo objects
[addrman] Introduce CAddrMan::Impl to encapsulate addrman implementation.
[move-only] Match ordering of CAddrMan declarations and definitions
Include vout when copying transaction ID from coin selection
[test] Test that -blocksonly nodes still serve compact blocks.
[test] Test that getdata(CMPCT) is still sent on regular low bandwidth connections.
[test] Test that -blocksonly nodes do not send getdata(CMPCT) on a low bandwidth connection.
[test] Test that -blocksonly nodes do not request high bandwidth mode.
[net processing] Dont request compact blocks in blocks-only mode
doc: update doxygen documention of ComputeTimeSmart() and AddToWalletIfInvolvingMe() regarding rescanning_old_block parameter
test: add functional test to check transaction time determination during block rescanning
wallet: fix ComputeTimeSmart algorithm to use blocktime during old block rescanning
[move-only] Move CAddrMan function definitions to cpp
doc: Remove un-actionable TODO from chainparams.cpp
ci: Enable extended tests on native Windows
test: pep-8 touched test
test: Remove unused and confusing main parameter from script_util
update estimatesmartfee rpc to return max of estimateSmartFee, mempoolMinFee and minRelayTxFee.
test: pep-8
test: Use assert_equal over assert for easier debugging
build: Add ability to build qt in depends with -stdlib=libc++
GUI: Ask user to unlock wallet before signing psbt
Add test that walletprocesspsbt requires unlocked wallet when signing
wallet: enable SQLite extended result codes
ci: Enable feature_asmap.py test on native Windows
Ensure wallet is unlocked before signing in walletprocesspsbt
qt: Keep InitExecutor in main gui thread
test: use MiniWallet for p2p_filter.py
test: introduce helper to create random P2WPKH scriptPubKeys
test: MiniWallet: add `send_to` method to create arbitrary txouts
log: Avoid broken SELECTCOINS log
scripted-diff: Rename overloaded int GetArg to GetIntArg
test: Add missing re.escape() to feature_addrman test
qt: hyphenate usage of third-party modifier
Add release notes for keypool flush changes
Add test for flushing keypool with newkeypool
Make legacy wallet upgrades from non-HD to HD always flush the keypool
Add newkeypool RPC to flush the keypool
Run functional tests with all possible flags
gui: Paste button in Open URI dialog
Make GUI UTXO lock/unlock persistent
Add release note for lockunspent change
Update lockunspent tests for lock persistence
Allow lockunspent to store the lock in the wallet DB
Allow locked UTXOs to be store in the wallet database
doc: Remove outdated comments
doc: Add 23061 release notes
test: Remove Windows workaround in authproxy
test: avoid non-determinism in asmap-addrman test
doc: add release notes for removal of the -deprecatedrpc=addresses flag
refactor: minor styling, prefer snake case and same line if
refactor: share logic between ScriptPubKeyToUniv and ScriptToUniv
rpc: remove deprecated addresses and reqSigs from rpc outputs
ci: Add more functional tests to the native Windows task
ci: Increase the dynamic port range to the maximum on native Windows
test: check for block reject reasons in p2p_segwit.py [2/2]
test: check for block reject reasons in p2p_segwit.py [1/2]
test: fix reference to block processing test in p2p_segwit.py
test: Add -testactivationheight tests to rpc_blockchain
test: Add remaining scenarios of 0 waste
build: remove support for weak linking getauxval()
build: remove arm includes from getauxval() check
qt: ensure seperator when adding third-party transaction links
qt: improve text for open third-party tx url action
span, doc: provide span.h context and explain lifetimebound definition
net, doc: provide context for UnserializeV1Array()
log: Remove unnecessary timing logs for Callbacks bench
qt, refactor: simplify third-party tx url action through overload
log: call LogPrint only once with time data samples
[net processing] Do not request transaction relay from feeler connections
[test] Add testing for outbound feeler connections
ci: update minimum compiler requirements for std::filesystem
doc: update minimum compiler requirements for std::filesystem
fuzz: Cleanup muhash fuzz target
Revert "test: Add missing suppression signed-integer-overflow:addrman.cpp"
qt: connection type translator comments
Add BECH32_INVALID_VERSION test
skip test_getaddressinfo() if wallet is disabled
Use C++11 member initializer in CTxMemPoolEntry
bench: fixed ubsan implicit conversion
bench: various args improvements
bench: clean up includes
bench: add usage description and documentation
bench: introduce -min_time argument
bench: make EvictionProtection.* work with any number of iterations
bench: change AddrManGood to AddrManAddThenGood
build: Restrict check for CRC32C intrinsic to aarch64
bench: remove unnecessary & incorrect  multiplication in MuHashDiv
bench: update nanobench from 4.3.4 to 4.3.6
fuzz: Move all addrman fuzz targets to one file
addrman: Replace assert with throw on corrupt data
Refactor: Turn the internal addrman check helper into a forced check
move-only: Move CAddrMan::Check to cpp file
test: Check other fields are loaded correctly as well
test: Remove unused self.connect_nodes
test: pep8
test: Use MiniWallet in mempool_persist
test: Add MiniWallet get_descriptor function
add missing includes in policy/rbf
make MAX_BIP125_RBF_SEQUENCE constexpr
cli: Display all proxies in -getinfo
refactor: Remove unused validation includes
ci: Set --nocleanup for Windows functional tests
net: Avoid logging AlreadyHaveTx when disconnecting misbehaving peer
test: Add addrman deserialization error tests
test: Replace MiniWallet scan_blocks with rescan_utxos
test: fix confusing off-by-one nValue in feature_coinstatsindex.py
test: use test_framework.p2p P2P_SERVICES in functional tests
util: Introduce ToIntegral<T>(const std::string&) for locale independent parsing using std::from_chars(…) (C++17)
net: switch to signet DNS seed
wallet: Default new wallets to descriptor wallets
ci: Update valgrind config
ci: Update s390x config
doc: remove WSL install instructions and point to upstream
doc: test: unittest segfault gdb
Enable TLS in links in documentation
rpc, wallet: Descriptor wallets are no longer experimental
doc/release-notes: Add new listunspent fields
QA: Add tests for listunspent ancestor{count,size,fees} to mempool_packages
RPC: Add ancestor{count,size,fees} to listunspent output
multiprocess: Delay wallet client construction
multiprocess: Add new bitcoin-gui, bitcoin-qt, bitcoin-wallet init implementations
multiprocess: Make interfaces::Chain::isTaprootActive non-const
test: Activate all regtest softforks at height 1, unless overridden
Introduce -testactivationheight=name@height setting
test: Add extra_args argument to TestChain100Setup constructor
test: Remove version argument from build_next_block in p2p_segwit test
test: Remove unused ~TestChain100Setup
test: use MiniWallet for make_utxo helper in feature_rbf.py
test: scale amounts in test_doublespend_tree down by factor 10
test: scale amounts in test_doublespend_chain down by factor 10
doc: Remove stale comment for CPrivKey
build: set OSX_MIN_VERSION to 10.15
gui: add RPC setting
ci: use Debian Bullseye in ARM CI
fuzz: allow lower number of sources
fuzz: Use public interface to fill addrman tried tables
addrman: Improve performance of Good
test: validation: add unittest for UpdateTip behavior
test: refactor: separate CreateBlock in TestChain100Setup
test: refactor: declare NoMalleation const auto
move-only: unittest: add test/util/chainstate.h
validation: fix CheckBlockIndex for multiple chainstates
validation: insert assumed-valid block index entries into candidates
validation: set BLOCK_ASSUMED_VALID during snapshot load
chain: add BLOCK_ASSUMED_VALID for use with assumeutxo
validation: change UpdateTip for multiple chainstates
doc: add comment for g_best_block
ci: Enable more functional tests on Windows MSVC task
Add test for addrman consistency check on restart with asmap
Add test for rpc addpeeraddress with "tried" argument
Allow passing "tried" to rpc addpeeraddress to call CAddrMan::Good()
refactor: net: avoid duplicate map lookups to `mapLocalHost`
test: fix misleading fee unit in mempool_limit.py
doc: Add historical release notes for 22.0
doc: Update snap release process for new versioning scheme
fix typos in logging messages
replace: self.nodes[0] with node
test: use MiniWallet in mempool_limit.py
qt: fix bitcoin-qt app categorization on apple silicon
test: Set peertimeout in write_config
qt: add missing tooltips to options menu settings
qt: ensure translator comments end in full stop
wallet: refactor: avoid duplicate lookup on `mapValue["timesmart"]`
wallet: refactor: inline function WriteOrderPos()
p2p: Rename fBlocksOnly, Add test
test: Simplify p2p_blocksonly test with new miniwallet rescan_utxos method
Cleanup headers after #20788
wallet: refactor: inline function ReadOrderPos()
qt: Add cancel button to configuration options popup
[doc] improve RBF documentation
[policy/refactor] pass in relay fee instead of using global
doc: add glibc to dependencies.md
compat: remove glibc_compat.cpp
build: remove glibc-back-compat from build system
remove --enable-glibc-back-compat from CI and docs
build: improve check for ::(w)system
qt, wallet: Drop no longer used WalletController::getOpenWallets()
qt, wallet: Add LoadWalletsActivity class
qt, wallet, refactor: Move connection to QObject::deleteLater to ctor
qt, wallet: Move activity progress dialog from data member to local
doc: Added hyperlink for doc/build
util: remove libevent <= 2.0.18 back-compat code
test: pep-8 whitespace
test: Avoid intermittent test failure in feature_csv_activation.py
Raise InitError when peers.dat is invalid or corrupted
Inline ReadPeerAddresses
Move LoadAddrman from init to addrdb
doc: Set PYTHONUTF8=1 for functional tests on Windows
cirrus: Enable tests on windows
ci: Switch multiprocess to i686 build
test: Add missing suppression signed-integer-overflow:addrman.cpp
build_msvc: Drop 32-bit build configurations
build_msvc: Make bitcoin-util ProjectGuid unique
doc: add missing copyright header to getuniquepath.cpp
build: Make <QtBaseDir> default name Qt and VS versions agnostic
Make unexpected time type in BCLog::LogMsg() a compile-time error
Add util/types.h with ALWAYS_FALSE template
[net] Remove asmap argument from CNode::CopyStats()
[asmap] Make DecodeAsmap() a utility function
ci: Build and cache static Qt instead of downloading a pre-built one
[asmap] Remove SanityCheckASMap() from netaddress
ci: Add missed comments and test_bitcoin.exe command line option
[net] Remove CConnman::Options.m_asmap
Remove confusing CAddrDB
Move addrman includes from .h to .cpp
Enable clang-tidy bugprone-argument-comment and fix violations
qt, refactor: Allocate SendConfirmationDialog instances on heap
qt, refactor: Keep HelpMessageDialog in the main event loop
qt, refactor: Keep PSBTOperationsDialog in the main event loop
qt, refactor: Keep AskPassphraseDialog in the main event loop
qt, refactor: Keep EditAddressDialog in the main event loop
qt, refactor: Keep CoinControlDialog in the main event loop
qt, refactor: Keep OptionsDialog in the main event loop
qt: Add GUIUtil::ShowModalDialogAndDeleteOnClose
ci: Drop AppVeyor CI integration
ci: Add Windows task to Cirrus CI
log, timer: improve BCLog::LogMsg()
sync: inline lock contention logging macro to fix time duration
qt: Add "Copy address" item to the context menu in the Peers table
doc: Clarify that change_cost cannot be negative in GetSelectionWaste
consensus: don't call GetBlockPos in ReadBlockFromDisk without lock
netinfo: clarify client and server versions in header
build: Update default platform toolset in msvc-autogen.py
doc: add disclaimer highlighting shortcomings of the basic multisig example
test, doc: basic M-of-N multisig minor cleanup and clarifications
wallet: AddWalletDescriptor requires cs_wallet lock
wallet: GetLabelAddresses requires cs_wallet lock
test: Remove useless overwrite
Add LIFETIMEBOUND to InitializeChainstate
Add LIFETIMEBOUND to CScript where needed
Use SelectCoinsSRD if it has less waste
Add SelectCoinsSRD function
tests: wallet_basic lock needed unspents
tests: wallet_txn explicilty specify inputs
tests: rpc_fundrawtx better test for UTXO inclusion with include_unsafe
tests: rpc_fundrawtx use specific inputs for unavailable change test
tests: rpc_fundrawtx lock to UTXO types
MOVEONLY: Expose BanMapToJson / BanMapFromJson
test: Add test for erase orphan tx conflicted by block
test: Add test for erase orphan tx included by block
test: Add test for erase orphan tx from peer
qt, refactor: Replace WalletFrame::addWallet with WalletFrame::addView
whitespace fixups after move and scripted-diff
scripted-diff: rename variables in policy/rbf
MOVEONLY: fee checks (Rules 3 and 4) to policy/rbf
MOVEONLY: check that fees > direct conflicts to policy/rbf
MOVEONLY: check for disjoint conflicts and ancestors to policy/rbf
MOVEONLY: BIP125 Rule 2 to policy/rbf
Make GetEntriesForConflicts return std::optional
policy: document we intentionally don't lower the dust threshold for Taproot
test: Rename bitcoin-util-test.py to util/test_runner.py
scripted-diff: Use generate* from TestFramework
test: Update test README and lint script
test: Always clear reject reason in IsStandard tx test
tests: Add TrimString(...) tests
Replace use of boost::trim_right with locale-independent TrimString
Replace use of boost::trim use with locale-independent TrimString
msvc: update bitcoin_config.h defines
sync: remove DEBUG_LOCKCONTENTION preprocessor directives
log, sync: improve lock contention logging and add time duration
log, timer: add timing macro in usec LOG_TIME_MICROS_WITH_CATEGORY
fuzz: Remove addrdb fuzz target
refactor: Detach wallet transaction methods (followup for move-only)
test, refactor: rpc_rawtransaction PEP8
refactor: separate the rpc_rawtransaction tests into functions
move-only: regroup similar rpc_rawtransaction tests together
test: remove no longer needed (ASCII art) comments
test: add and harmonize getrawtransaction logging
test: run 2nd getrawtransaction section with/without -txindex
refactor: txid to constant in rpc_rawtransaction to isolate tests
refactor: dedup/reorg createrawtransaction sequence number tests
Test src/node/transaction::GetTransaction() without -txindex
Remove CBanEntry::SetNull
Remove unused SERIALIZE_METHODS for CBanEntry
guix/prelude: Override VERSION with FORCE_VERSION
policy: unit test Segwit dust thresholds
ci: Fuzz with -ftrivial-auto-var-init=pattern
builder-keys: add kristapsk
build: fix unoptimized libraries in depends
release: remove gitian
doc: mention bech32m/BIP350 in doc/descriptors.md
Stricter BIP32 decoding and test vector 5
test: Check that non-signaling BIP125 tx can be replaced via parent
refactor: remove RecursiveMutex cs_nBlockSequenceId
Use waste metric for deciding which selection to use
tests: Test GetSelectionWaste
Add waste metric calculation function
scripted-diff: tests: Use KnapsackSolver directly
tests: Add KnapsackGroupOutputs helper function
tests: Use SelectCoinsBnB directly instead of AttemptSelection
Allow the long term feerate to be configured, default of 10 sat/vb
[fuzz] Add ConsumeAsmap() function
[addrman] Make m_asmap private
[net] Rename the copyStats arg from m_asmap to asmap
[addrman] Set m_asmap in CAddrMan initializer list
test: Avoid race after connect_nodes
[refactor] [addrman] Update constant comments
[move-only] Extract constants from addrman .h to .cpp
[addrman] Change addrman #define constants to be constexprs
[addrman] Move CAddrMan::Unserialize to cpp file
[addrman] Move CAddrMan::Serialize to cpp file
[test] checks descendants limtis for second generation Package descendants
qt: Add copy IP/Netmask action for banned peer
qt, refactor: Declare getWalletModel with const and noexcept qualifiers
qt, refactor: Drop redundant checks of walletModel
qt, refactor: Pass WalletModel object to WalletView constructor
ci: Re-enable verify-commits.py check
ci: Unconditionally set the global git author name in cirrys.yml
Set regtest.BIP65Height = 111 to speed up tests
Remove GetAddrName
Remove unused RecursiveMutex cs_addrName
test, doc: refer to the correct variable names in p2p_invalid_tx.py
Use `context.args` in `src/wallet/load.cpp`.
[net] Remove CConnMan::SetAsmap()
[init] Read/decode asmap before constructing addrman
Remove unused MaybeSetAddrName
MOVEONLY: getting mempool conflicts to policy/rbf
[validation] quit RBF logic earlier and separate loops
call SignalsOptInRBF instead of checking all inputs
[validation] default conflicting fees and size to 0
MOVEONLY: BIP125 max conflicts limit to policy/rbf.h
external_signer: improve fingerprint matching logic (stop on first match)
refactor: replace QDateTime::toTime_t with QDateTime::toSecsSinceEpoch
refactor: replace QDateTime::fromTime_t with QDateTime::fromSecsSinceEpoch
Use `context.args` in `CWallet::Create` instead of `gArgs`.
Consolidate XOnlyPubKey lookup hack
qt: Add missing mnemonics in menu bar options
doc: Remove incorrect INIT_PROTO_VERSION from nTime comment
test: fix failure in feature_nulldummy.py on single-core machines
test: refactor: use named args for block_submit in feature_nulldummy.py
test: add aarch64-apple-darwin platform entry to get_previous_releases
doc: remove outdated comment
refactor: Remove unused KeyIDHasher
script: Add commits signed with sipas expired key to allow-revsig-commits
the result of CWallet::IsHDEnabled() was initialized with true.
Drop us=... message in net debug for sending version message
refactor: move CAddress-without-nTime logic to net_processing
qt: Handle new added plurals in bitcoin_en.ts
doc: add info for debugging with relative paths
fuzz: Use LIMITED_WHILE instead of limit_max_ops
Add references for the generator/constant used in Bech32(m)
Avoid temporary vectors/uint256s in VerifyTaprootCommitment
Assert that IsComplete() in GetSpendData()
Remove default nHashTypeIn arguments to MutableTransactionSignatureCreator
Simplify SignTransaction precomputation loop
Improve comments in taproot signing logic
Remove txindex migration code
Add missing includes and forward declarations, remove unused ones
fuzz: Avoid timeout in blockfilter fuzz target
ci: Make git available for all merge commits
scripted-diff: Rename template to avoid CI configuration parsing warning
doc: Mention the flat directory structure for uploads
ci: Run arm task on arm64 hardware
doc: Update GitHub documentation links
[net] Replace GetID() with id in TransportDeserializer constructor
[net] Don't return an optional from TransportDeserializer::GetMessage()
Use generate* from TestFramework
Add I2P network SetReachable/IsReachable unit test assertions
Improve doc/i2p.md regarding I2P router options/versions
test: Add generate* calls to test framework
[addrman] Clean up ctor
[addrman] inline Clear() into CAddrMan ctor
[addrman] Remove all public uses of CAddrMan.Clear() from the tests
test: fix bug in 22686
doc: link to managing-wallets from doc readme
guix: Don't include directory name in SHA256SUMS
log, sync: add LOCK logging category, apply it to lock contention
ci: Run fuzzer task for the master branch only
ci: Invalidate depends caches when sources have been changed
[tests] Remove CAddrMan.Clear() call from CAddrDB::Read()
[addrman] Don't call Clear() if parsing peers.dat fails
[addrman] Move peers.dat parsing to init.cpp
scripted-diff: replace clientInterface with m_client_interface in net
net: use clientInterface rather than uiInterface
test: use f-strings in mining_*.py tests
test: use f-strings in interface_*.py tests
test: use f-strings in feature_proxy.py
test: use f-strings in feature_segwit.py
test: use f-strings in feature_versionbits_warning.py
test: use f-strings in feature_settings.py
test: use f-strings in feature_pruning.py
test: use f-strings in feature_notifications.py
test: use f-strings in feature_minchainwork.py
test: use f-strings in feature_logging.py
test: use f-strings in feature_loadblock.py
test: use f-strings in feature_help.py
test: use f-strings in feature_filelock.py
test: use f-strings in feature_fee_estimation.py
test: use f-strings in feature_dersig.py
test: use f-strings in feature_dbcrash.py
test: use f-strings in feature_csv_activation.py
test: use f-strings in feature_config_args.py
test: use f-strings in feature_cltv.py
test: use f-strings in feature_blocksdir.py
test: use f-strings in feature_backwards_compatibility.py
test: use f-strings in feature_asmap.py
[MOVEONLY] [tests] Move addrman ser/deser tests to addrman_tests.cpp
windres: use PACKAGE_VERSION rather than building more version numbers
Start using init makeNode, makeChain, etc methods
refactor: remove ::vpwallets and related global variables
contrib: use hkps://keys.openpgp.org to retrieve builder keys
refactor: replace remaining binascii method calls
doc: Add missing PR 16333 release note
test: check for invalid `-prune` parameters
test: only use verbose for getrawmempool when necessary in functional tests
test: use getmempoolentry instead of getrawmempool in functional tests when appropriate
test: improve mempool_updatefrom efficiency by using getmempoolentry for specific txns
ci: Reorder scripts to make git available before depends_sources_cache
wallet: use PACKAGE_NAME instead of "Bitcoin" in rpcdump
wallet: use FormatFullVersion instead of CLIENT_BUILD in rpcdump
doc: add another signing flow for multisig with descriptor wallets and PSBTs
doc: M-of-N multisig using descriptor wallets and PSBTs, as well as a signing flow
test: add functional test for multisig flow with descriptor wallets and PSBTs
Document about wallet backup and restoration
qt, refactor: Replace `if` check with `assert`
qt, refactor: Drop redundant signalling in WalletView::setWalletModel
qt, refactor: Emit WalletView::encryptionStatusChanged signal directly
qt: Add WalletFrame::currentWalletSet signal
builder-keys: Add dongcarl
p2p: log addrman consistency checks
Display peers in -netinfo that we don't relay addresses to
Display peers in -netinfo that request we not relay transactions
test: Test for ApproximateBestSubset edge case with too little fees
wallet: Assert that enough was selected to cover the fees
wallet: Use GetSelectionAmount for target value calculations
builder-keys: add jamesob
test: added test for disabled wallet
[addrman] Make addrman consistency checks a runtime option
clientversion: No suffix #if CLIENT_VERSION_IS_RELEASE
qt: Add Load PSBT functionaliy with nowallet
qt: Add SubFeeFromAmount option
Change the wallet_backup.py test to use the restorewallet RPC command instead of restoring wallets manually.
Add a new RPC command: restorewallet
Simplify a few conditionals in -netinfo
Add addr_processed and addr_rate_limited stats to -netinfo
scripts: prevent GCC optimising test symbols in test-symbol-check
Specifies how to set the value of TORGROUP
contrib: return non-zero status if getcoins.py errors
contrib: catch bitcoin-cli RPC call errors in getcoins.py
contrib: refactor: introduce bitcoin-cli RPC call helper in getcoins.py
fuzz: Re-enable assert in banman again
Update i2p.md and tor.md regarding -onlynet config option
refactor: Reuse MakeUnorderedList where possible
refactor: Move MakeUnorderedList into util/string.h to make it reusable
scripted-diff: Rename JoinErrors in more general MakeUnorderedList
fuzz: add guide to fuzzing with Eclipser v1.x
fuzz: Avoid OOM in system fuzz target
[test] mempool package ancestor/descendant limits
[test] parameterizable fee for make_chain and create_child_with_parents
[test] helper function to increase transaction weight
extract/rename helper functions from rpc_packages.py
[policy] ancestor/descendant limits for packages
gui: ensure external signer option remains disabled without signers
guix-verify: Non-zero exit code when anything fails
release: Release with separate SHA256SUMS and sig files
[tests] Make deterministic addrman use nKey = 1
[addrman] Add deterministic argument to CAddrMan ctor
Add missing const to CAddrMan::Check_()
[mempool] check ancestor/descendant limits for packages
[refactor] pass size/count instead of entry to CalculateAncestorsAndCheckLimits
MOVEONLY: add helper function for calculating ancestors and checking limits
misc package validation doc improvements
test: Set regtest.BIP66Height = 102 to speed up tests
doc: Add packages that provide Qt Wayland plugin for Linux
test: Add missing include
Add cleaner errors for unsuccessful faucet transactions
[script] Update signet getcoins.py for custom network
[net_processing] Provide debug error if code assumptions change.
[docs] Add release notes for #21528
test: refactor: remove binascii from test_framework
p2p, rpc, test: address rate-limiting follow-ups
fuzz: check that ser+unser produces the same AddrMan
test: Check if specified config file cannot be opened
util: check MoneyRange() inside ParseMoney()
util: make ParseMoney return a std::optional<CAmount>
make ParseOutputType return a std::optional<OutputType>
util: Check if specified config file cannot be opened
p2p, rpc: address relay fixups
doc: update -addrinfo in release-notes.md and tor.md
Improve mempool_accept_wtxid.py
doc: Correct description of CAddrMan::Create()
doc: Update high-level addrman description
cli: Add progress bar for -getinfo
[GetTransaction] remove unneeded `cs_main` lock acquire
doc: Add release notes for 22570 (ignore banlist.dat)
consensus/params: simplify ValidDeployment check to avoid gcc warning
fuzz: move init code to the CAddrManDeterministic constructor
Expose ancestorsize and ancestorfees via getTransactionAncestry
test: refactor: remove `hex_str_to_bytes` helper
error if settings.json exists, but is unreadable
Close minor startup race between main and scheduler threads
[style] Small style improvements to DNS parameters
[test] Test the delay before querying DNS seeds
[test] Test the interactions between -forcednsseed and -dnsseed
[init] Disallow starting up with conflicting paramters for -dnsseed and -forcednsseed
[test] Test -forcednsseed causes querying DNS seeds
[test] Test the interactions between -connect and -dnsseed
[test] Test logic to query DNS seeds with block-relay-only connections
[test] Introduce test logic to query DNS seeds
Remove unused CSubNet serialize code
doc: add info to i2p.md about IBD time and multiple networks
Ignore banlist.dat
contrib, p2p: update I2P hardcoded seeds
[test] Use the new endpoint to improve tests
[RPC] Add field to getpeerinfo to indicate if addr relay is enabled
[test] Test that we intentionally select addr relay peers.
[net_processing] Remove RelayAddrsWithPeer function
[net_processing] Introduce new field to indicate if addr relay is enabled
[net_processing] Defer initializing m_addr_known
[test] Update p2p_addr_relay test to prepare
[net_processing] Introduce SetupAddressRelay
test: Add temporary sanitizer suppression implicit-signed-integer-truncation:netaddress.cpp
macdeploy: alternative info to download the macOS SDK
Document faster throughput configuration
guix: Ensure EPOCH_SOURCE_DATE does not include GPG information
guix: Remove extra \r from all.SHA256SUMS line ending
guix, doc: Add a note that codesigners need to rebuild after tagging
test: use MiniWallet for simple doublespend test in feature_rbf.py
test: add addr-fetch timeout connection coverage in p2p_addrfetch.py
test: add assert_getpeerinfo method and coverage in p2p_addrfetch.py
test: assert logging categories are sorted in rpc and help
test: feature_rbf.py: make MiniWallet instance available for all sub-tests
tracing: Tracepoint for connected blocks
tracing: Tracepoints for in- and outbound P2P msgs
doc: document systemtap dependency
doc: Add initial USDT documentation
fuzz: silence a compiler warning about unused CBanEntry comparator
test: add type annotations to util.get_rpc_proxy
test: use constants for CSV/CLTV activation heights in rpc_signrawtransaction
test: introduce `generate_to_height` helper, use in rpc_signrawtransaction
test: Disable automatic connections by default
p2p: refactor: tidy up `PeerManagerImpl::Misbehaving(...)`
test: check that CSV/CLTV are active in rpc_signrawtransaction
coinstats: Add comments for new coinstatsindex values
Index: Improve logging in coinstatsindex
rpc: Block until synced if coinstatsindex is used in gettxoutsetinfo
rpc: Add missing gettxoutsetinfo help docs
cli -addrinfo: drop torv2, torv3 becomes onion per GetNetworkName()
script, doc: guix touchups
Updated Readme, Corrected the codesign typo
Add missing GUARDED_BY to CAddrMan::insecure_rand
guix: Allow changing the base manifest in guix-verify
guix: Make all.SHA256SUMS rather than codesigned.SHA256SUMS
guix/build: Remove vestigial SKIPATTEST.TAG
guix/INSTALL: Misc fixups
log, refactor: use guard clause in LogCategoriesList()
log: sort LogCategoriesList and LogCategoriesString alphabetically
doc: GetTransaction()/getrawtransaction follow-ups to #22383
test: verify number of categories returned by logging RPC
refactor: move `GetTransaction(...)` to node/transaction.cpp
contrib: use newer config.guess & config.sub in install_db4.sh
depends: use latest config.guess and config.sub for sqlite
depends: use latest config.guess and config.sub for cctools
depends: use latest config.guess and config.sub for libevent
test: update logging and docstring in rpc_blockchain.py
test: replace magic values by constants in rpc_blockchain.py
test: assert on mediantime in getblockheader and getblockchaininfo
test: assert on the value of getblockchaininfo#time
fuzz: Actually use const addrman
refactor: Mark CAddrMan::GetAddr const
refactor: Mark CAddrMan::Select const
fuzz: Temporarily disable failing assert in banman fuzz test
cli: Implement human readable -getinfo.
doc: clean out release notes post branch-off
guix: Silence getent(1) invocation
test: check for RPC error 'Transaction already in block chain' (-27)
doc: Adjust commit message template for the guix.sigs repo
[addrman] Remove unused test_before_evict argument from Good()
build: Bump master version to 22.99.0
[net processing] Default initialize m_recent_confirmed_transactions
scripted-diff: Rename recentRejects
[net processing] Default initialize recentRejects
[net processing] Default initialize m_stale_tip_check_time
[net processing] Add Orphanage empty consistency check
mempool: apply rule of 5 to epochguard.h, fix compiler warnings
[addrman] Remove RemoveInvalid()
rpc: Return block time in getblockchaininfo
util: improves error messages on get_previous_releases script
doc/release-process: Add torrent creation details
guix/INSTALL: Guix installs init scripts in libdir
guix/INSTALL: Add coreutils/inotify-dir-recreate troubleshooting
guix: Adapt release-process.md to new Guix process
guix-attest: Produce and sign normalized documents
guix: Overhaul README
scripted-diff: Revert "fuzz: Add Temporary debug assert for oss-fuzz issue"
tests: Test for dumpwallet lock order issue
Reorder dumpwallet so that cs_main functions go first
fuzz: Extend addrman fuzz test with deserialize
Update assumed chain params
scripted-diff: remove ResetI2PPorts() (revert e0a2b390c14)
Replace $(AT) with .SILENCE.
[Refactor] Rename scriptPubKey -> exec_script
ci: Bump Android NDK to r22 which supports std::filesystem
build: Add support for Android NDK r22+
Test that descriptor wallet upgrade does nothing
refactor: remove unused assumeutxo methods
validation: add chainman ref to CChainState
guix: Bump to version-1.3.0 from upstream
guix: Pin kernel header version
Make IsSegWitOutput return true for taproot outputs
Improve tests using statistics
test: add logging to wallet_listtransactions
test: remove unneeded/redundant code in wallet_listtransactions
test: speedup wallet_listtransactions by whitelisting peers (immediate tx relay)
bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp
Add logging and addr rate limiting statistics
Functional tests for addr rate limiting
Randomize the order of addr processing
Rate limit the processing of incoming addr messages
test: remove unneeded initialization code in feature_rbf.py
Change ScriptPubKeyMan::Upgrade to default to return true
Move pblocktree global to BlockManager
Move LoadBlockIndexDB to BlockManager
addrman: detect on-disk corrupted nNew and nTried during unserialization
fuzz: Limit max ops in tx_pool fuzz targets
fuzz: Use ConsumeUInt256 helper to simplify rolling_bloom_filter fuzz test
fuzz: Speed up rolling_bloom_filter fuzz test
Update secp256k1 subtree to latest upstream + adapt API
qt, refactor: Move InitExecutor class into its own module
scripted-diff: Rename BitcoinCore class to InitExecutor
qt: Add BitcoinCore::m_thread member
Squashed 'src/secp256k1/' changes from efad3506a8..be8d9c262f
test: move rpc_rawtransaction tests to < 30s group
test: whitelist rpc_rawtransaction peers to speed up tests
Move implementations of non-template fuzz helpers
fuzz: Speed up prevector fuzz target
doc: update enum naming in developer notes
refactor: move UpdateTip into CChainState
refactor: no mempool arg to GetCoinsCacheSizeState
refactor: move UpdateMempoolForReorg into CChainState
validation: make CChainState::m_mempool optional
build: use aarch64 Clang if cross-compiling for darwin on aarch64
init: remove straggling boost thread_group code
fix incorrect testmempoolaccept doc
test: Add functional test for AddrFetch connections
net, rpc: Enable AddrFetch connections for functional testing
test: fix segwit terminology (s/witness_program/witness_script/)
wallet, rpc: add listdescriptors private option
[style] Clean up BroadcastTransaction()
[test] Allow rebroadcast for same-txid-different-wtxid transactions
[mempool] Allow rebroadcast for same-txid-different-wtxid transactions
[test] Test transactions are not re-added to unbroadcast set
[mempool] Only add a transaction to the unbroadcast set when it's added to the mempool
doc: mention that we enforce port=0 in I2P
addrman: reset I2P ports to 0 when loading from disk
test: ensure I2P ports are handled as expected
net: do not connect to I2P hosts on port!=0
net: distinguish default port per network
net: change I2P seeds' ports to 0
net: change assumed I2P port to 0
gui: Prompt to reset settings when settings.json cannot be read
tree-wide: Rename gitian-keys to builder-keys
guix: Update various check_tools lists
guix: Check for a sane services database
p2p: earlier continuation when no remaining eviction candidates
p2p: process more candidates per protection iteration
p2p: iterate eviction protection only on networks having candidates
bench: add peer eviction protection benchmarks
[test] submit same txid different wtxid as mempool tx
[validation] distinguish same txid different wtxid in mempool
[validation] Always include merkle root in coinbase commitment
[validation] Set witness script flag with p2sh for blocks
[p2p] remove redundant NODE_WITNESS checks
[p2p] remove unused segwitheight=-1 option
[test] remove or move tests using `-segwitheight=-1`
net: don't bind on 0.0.0.0 if binds are restricted to Tor
guix: Test security-check sanity before performing them
scripts: adjust test-symbol-check for guix release environment
scripts: more robustly test macOS symbol checks
build: Use and test PE binutils with --reloc-section
guix: Patch binutils to add security-related disable flags
devtools: Improve *-check.py tool detection
ci: skip running the Linux test-security-check target for now
lint: Run mypy with --show-error-codes
Avoid GCC 7.1 ABI change warning in guix build
refactor: move GetRandomNodeEvictionCandidates() to test utilities
doc: added info to bitcoin.conf doc
script: remove gitian reference from symbol-check.py
guix: add additional documentation to patches
lint: exclude Guix patches from spell-checking
guix: no-longer pass --enable-glibc-back-compat to Guix
build: remove glibc backcompat requirement for Linux symbol checks
configure: keep relative paths in debug info
test: add `bad-txns-prevout-null` test to mempool_accept.py
test: add `bad-txns-prevout-null` test case to invalid_txs.py
test: use script_util helpers for creating P2W{PKH,SH} scripts
test: use script_util helpers for creating P2SH scripts
build: remove --enable-determinism configure option
doc: Install Rosetta on M1-macOS for qt in depends
build: Add -Werror=implicit-fallthrough compile flag
Use C++17 [[fallthrough]] attribute, and drop -Wno-implicit-fallthrough
fuzz: Move CTxDestination fuzzing to script fuzz target
fuzz: Simplify CTxDestination fuzzing in the script target
fuzz: Improve ConsumeTxDestination
fuzz: Move ConsumeTxDestination to cpp file
doc: Remove unnecessary steps from translations update process
doc: Add steps for transifex to release process
test: remove confusing `MAX_BLOCK_BASE_SIZE`
prefer to use txindex if available for GetTransaction
guix: Also sort SHA256SUMS.part
system: skip trying to set the locale on NetBSD
ci: use Ubuntu 20.04 as the default Docker container
guix: Build depends/qt with our platform definition
guix: Rebase toolchain on glibc 2.24 (2.27 for riscv64)
Use DeploymentEnabled to hide VB deployments
doc: Move buried deployment doc to the enum that enumerates them
Change SignTransaction's input_errors to use bilingual_str
Use bilingual_str for address fetching functions
Add bilingual_str::clear()
Translations update
wallet: Properly set fInMempool in mempool notifications
wallet: erase spkmans rather than setting to nullptr
test: introduce `get_weight()` helper for CBlock
test: introduce `get_weight()` helper for CTransaction
test: Add test for replacement relay fee check
qt: allow prompt icon to be colorized
Do not clone qa-assets git repository if not necessary
refactor: remove m_internal from DescriptorSPKman
tests: remove ComputeBlockVersion shortcut from versionbits tests
[refactor] Move ComputeBlockVersion into VersionBitsCache
[move-only] Move ComputeBlockVersion from validation to versionbits
[refactor] versionbits: make VersionBitsCache a full class
[refactor] rpc/blockchain.cpp: SoftForkPushBack
deploymentinfo: Add DeploymentName()
[move-only] Rename versionbitsinfo to deploymentinfo
scripted-diff: rename versionbitscache
[refactor] Add versionbits deployments to deploymentstatus.h
[refactor] Add deploymentstatus.h
versionbits: Use dedicated lock instead of cs_main
versionbits: correct doxygen comments
wallet: do not spam about non-existent spk managers
wallet: deactivate descriptor
test: wallet importdescriptors update existing
wallet: maintain SPK consistency on internal flag change
wallet: don't mute exceptions in importdescriptors
wallet: allow to import same descriptor twice
test: use script_util helpers for creating P2PKH scripts
test: wallet util: fix multisig P2SH-P2WSH script creation
qt: Emit dataChanged signal to dynamically re-sort Peers table
refactor: Make httpserver work queue a unique_ptr
doc: Remove unused section from release process
qt: Draw "eye" sign at the beginning of watch-only addresses
qt: Do not extend recent transaction width to address/label string
Remove unused wallet pointer from NotifyAddressBookChanged
Remove unused wallet pointer from NotifyTransactionChanged signal
ci: Upgrading pip version in macos environment
doc: Document minimum required libc++ version
doc: doc/README.md IRC updates
torcontrol: Resolve Tor control plane address
Avoid the use of P0083R3 std::set::merge
Mark print-% target as phony.
wallet, rpc: listdescriptors does not need unlocked
Pass in DescriptorCache to ToNormalizedString
Change DescriptorImpl::ToStringHelper to use an enum
Remove priv option for ToNormalizedString
wallet: Upgrade existing descriptor caches
wallet: Store last hardened xpub cache
descriptors: Cache last hardened xpub
Move DescriptorCache writing to WalletBatch
Refactor Cache merging and writing
Revert "Cache parent xpub inside of BIP32PubkeyProvider"
fuzz: Check banman roundtrip
doc: recommend `--disable-external-signer` in OpenBSD build guide
doc: update doc/benchmarking.md
bench: bench_bitcoin.cpp help fixups
bench: bench.h fixes and improvements
cli: Avoid truncating -rpcwaittimeout
script, doc: spelling update
doc: sort entries in doc/README.md#Miscellaneous alphabetically
doc: add basic I2P documentation
Highlight DNS request part
build: remove check for Boost Process header
build: remove workaround for Boost and std::atomic
build: set minimum required Boost to 1.64.0
wallet: Add error message to GetReservedDestination
Disallow bech32m addresses for legacy wallet things
Use BECH32M for tr() desc, WitV1Taproot, and WitUnknown CTxDests
Opportunistically use bech32m change addresses if available
Add OutputType::BECH32M
Limit LegacyScriptPubKeyMan address types
GUI: Always call parent changeEvent handler
GUI: Enable palette change adaptation on all platforms
test: Add missing sync_all to feature_coinstatsindex
test: Add missing syncwithvalidationinterfacequeue
test: Misc cleanup
test: Run pep-8
scripted-diff: Renames
add missing atomic include
Revert "test: Add temporary logging to debug #20975"
wallet: Add missing BlockUntilSyncedToCurrentChain
[test] Prevent intermittent issue
[test] Remove GetAddrStore class
[test] Update GetAddrStore callers to use AddrReceiver
[test] Add functionality to AddrReceiver
[test] Allow AddrReceiver to be used more generally
add dummy file param to fix jupyter
doc: Final merge of release notes snippets
style: remove () from assert in rpc_setban.py
doc: fix grammar in doc/files.md
test: ensure banlist can be read from disk after restart
banman: save the banlist in a JSON format on disk
test: doc: improve doc for `from_hex` helper (mention `to_hex` alternative)
scripted-diff: test: rename `FromHex` to `from_hex`
test: remove `ToHex` helper, use .serialize().hex() instead
test: introduce `tx_from_hex` helper for tx deserialization
doc: Add IPv6 address to zmq example
test: Add IPv6 test to zmq
zmq: Enable IPv6 on listening socket
fuzz: add missing ECCVerifyHandle to base_encode_decode
test: Set BIP34Height = 2 for regtest
Taproot descriptor inference
Report address as solvable based on inferred descriptor
consensus refactor: extract ComputeTapleafHash, ComputeTaprootMerkleRoot
doc: add comment about CCoinsViewDBCursor constructor
move-only(ish): don't expose CCoinsViewDBCursor
refactor: Pass grind args vector as const reference
Remove gArgs from AppInitUtil
Remove unused OptionsCategory arg from AddCommand
Remove unused includes from bitcoin-util
test: Add bitcoin-util tests
build_msvc: Add bitcoin-util.exe
test: Create all blocks with version 4 or higher
devtools: Integrate ARCH_MIN_GLIBC_VER table into MAX_VERSIONS in symbol-check.py
test: Properly set BIP34 height in CreateNewBlock_validity unit test
p2p: Add timeout for AddrFetch peers
fuzz: Assert roundtrip equality for `CPubKey`
refactor: wrap CCoinsViewCursor in unique_ptr
fuzz: Add Temporary debug assert for oss-fuzz issue
fuzz: Speed up crypto fuzz target
Added new test for future blocks reacceptance
build: Disable deprecated-copy warning only when external warnings are enabled
gui: misc external signer fixes and translation hints
refactor: make ExternalSigner NetworkArg() and m_chain private
refactor: reduce #ifdef ENABLE_EXTERNAL_SIGNER usage
build: enable external signer by default
refactor: clean up external_signer.h includes
fuzz: fix fuzz binary linking order
build: improve detection of eBPF support
build, qt: Do not install *.prl files
test: check rejected future block later accepted
build, qt: Force bootstrap while building linguist tools
build, qt: Drop translations.pro hack
build, qt: Drop lrelease dependency patch
build, qt: Add linguist_tools list
build: Use Qt top-level build facilities
test: kill process group to avoid dangling processes
guix-attest: Error out if SHA256SUMS is unexpected
Switch Appveyor CI to VS2019 stable image
devtools: Add xkb version to symbol-check
refactor: Make CAddrMan::cs non-recursive
Add AssertLockHeld to CAddrMan private functions
Add thread safety annotations to CAddrMan public functions
refactor: Avoid recursive locking in CAddrMan::Clear
refactor: Apply consistent pattern for CAddrMan::Check usage
refactor: Avoid recursive locking in CAddrMan::Check
Make CAddrMan::Check private
refactor: Avoid recursive locking in CAddrMan::size
test: Drop excessive locking in CAddrManTest::SimConnFail
test: add combined I2P/onion/localhost eviction protection tests
test: add tests for inbound eviction protection of I2P peers
p2p: extend inbound eviction protection by network to I2P peers
test: add combined onion/localhost eviction protection coverage
p2p: remove unused m_is_onion member from NodeEvictionCandidate struct
p2p: remove unused CompareLocalHostTimeConnected()
p2p: remove unused CompareOnionTimeConnected()
p2p: update ProtectEvictionCandidatesByRatio() doxygen docs
p2p: make ProtectEvictionCandidatesByRatio() fully ratio-based
Bugfix: GUI: Use a different shortcut for "1 d&ay" banning, due to conflict with "&Disconnect"
refactor: Pass script verify flags as uint32_t
test: remove combined onion/localhost eviction protection tests
p2p: add CompareNodeNetworkTime() comparator struct
p2p: add m_network to NodeEvictionCandidate struct
p2p, refactor: rename vEvictionCandidates to eviction_candidates
p2p, refactor: improve constness in ProtectEvictionCandidatesByRatio()
test: add ALL_NETWORKS to test utilities
test: speed up and simplify peer_eviction_test
fuzz: Call const member functions in addrman fuzz test only once
refactor: Remove chainparams arg from CChainState member functions
refactor: Remove ::Params() global from inside CChainState member functions
GUI: Add keyboard shortcuts for other context menus
GUI: Restore keyboard shortcuts for context menu entries
Add support for SIGHASH_DEFAULT in RPCs, and make it default
tests: check spending of P2TR
Basic Taproot signing logic in script/sign.cpp
Make GetInputUTXO safer: verify non-witness UTXO match
Construct and use PrecomputedTransactionData in PSBT signing
Construct and use PrecomputedTransactionData in SignTransaction
Don't nuke witness data when signing fails
Permit full precomputation in PrecomputedTransactionData
Add precomputed txdata support to MutableTransactionSignatureCreator
Add CKey::SignSchnorr function for BIP 340/341 signing
Use HandleMissingData also in CheckSchnorrSignature
Add TaprootSpendData data structure, equivalent to script map for P2[W]SH
wallet test: Add test for subtract fee from recipient behavior
wallet test refactor: add CreateSyncedWallet function
doc: update release notes with removal of tor v2 support
qt: Refactor open date range to use std::optional
test: ensure I2P addresses are relayed
test: make CAddress in functional tests comparable
test: implement ser/unser of I2P addresses in functional tests
Update msvc and appveyor builds to use Qt5.12.11 binaries.
test: use NODE_* constants instead of magic numbers
p2p, refactor: rm redundant erase_size calculation in SelectNodeToEvict()
refactor: Pass block reference instead of pointer to PeerManagerImpl::BlockRequested
Allow tr() import only when Taproot is active
validation: Farewell, global Chainstate!
qt/test: Reset chainman in ~ChainstateManager instead
scripted-diff: tree-wide: Remove all review-only assertions
tree-wide: Remove stray review-only assertion
qt/test: Use existing chainman in ::TestGUI (can be scripted-diff)
scripted-diff: wallet/test: Use existing chainman
fuzz: Initialize a TestingSetup for test_one_input
scripted-diff: test: Use existing chainman in unit tests
test: Pass in CoinsTip to ValidateCheckInputsForAllFlags
test/miner_tests: Pass in chain tip to CreateBlockIndex
test/util: Use existing chainman in ::PrepareBlock
init: Use existing chainman
Avoid wallet code writing node settings file
Add FoundBlock.found member
Add ipc::Context and ipc::capnp::Context structs
Rearrange fillPSBT arguments
Make SetupServerArgs callable without NodeContext
tests: Add test for compact block HB selection
net: relay I2P addresses even if not reachable (by us)
test: Run pep-8 on touched test
test: Use MiniWallet in test_no_inherited_signaling RBF test
test: Remove unused generate() from test
test: Add txin.sequence option to MiniWallet
gui: Unregister wallet notifications before unloading wallets
Update REVIEWERS: I've found that I keep track of PRs in need of review without the need for DrahtBot's automated notification :)
scripts: check macOS SDK version is set
scripts: check minimum required Windows version is set
scripts: check minimum required macOS vesion is set
scripts: LIEF 0.11.5
doc: remove obsolete `okSafeMode` RPC guideline from developer notes
Reject invalid coin height and output index when loading assumeutxo
test: Use ConnmanTestMsg from test lib in denialofservice_tests
test: Add temporary coinstats suppressions
test: Correct outstanding -Werror=sign-compare errors
Rewrite guix-{attest,verify} for new hier
Make SHA256SUMS fragment right after build
zmq: use msg: prefix over errno= in zmqError
zmq: use std::string in zmqError()
macdeploy: cleanup .temp.dmg if present
macdeploy: remove qt4 related code
macdeploy: select the plugins we need, rather than excluding those we don't
macdeploy: fix framework printing when passing -verbose
macdeploy: remove unused plistlib import
Use latest signapple commit
test: MiniWallet: fix fee calculation for P2PK and check tx vsize
test: MiniWallet: force P2PK signature to have fixed size (71 bytes)
Add sync_blocks in wallet_orphanedreward.py.
test: doc: improve doc for chain_transaction() helper
test: refactor: dedup utility function chain_transaction()
Remove `Warning:`
qt: Handle peer addition/removal in a right way
addrman: remove invalid addresses when unserializing
fuzz: Increase branch coverage of the float fuzz target
fuzz: Remove confusing return keyword from CallOneOf
Do not load external signers wallets when unsupported
doc: update tor.md with removal of tor v2 support
p2p, rpc, fuzz: various tiny follow-ups
qt: Connect WalletView signal to BitcoinGUI slot directly
qt: Drop redundant OverviewPage::handleOutOfSyncWarningClicks slot
qt: Drop redundant WalletView::requestedSyncWarningInfo slot
qt: Save/restore column sizes of the tables in the Peers tab
fuzz: reduce possible networks check
net: simplify CNetAddr::IsRoutable()
test: Remove unused node from feature_nulldummy
test: Add temporary logging to debug #20975
util: Properly handle -noincludeconf on command line
Protect last outbound HB compact block peer
[doc] explain why CheckBlock() is called before AcceptBlock()
scripted-diff: rename MarkBlockAs functions
[net processing] Tidy up MarkBlockAsReceived()
[net processing] Add IsBlockRequested() function
rpc: Add test for -rpcwaittimeout
test: convert docs into type annotations in test_framework/test_node.py
test: convert docs into type annotations in test_framework/wallet.py
test: convert docs into type annotations in test_framework/util.py
contrib: remove torv2 seed nodes
contrib: update generate-seeds.py to ignore torv2 addresses
[net processing] Remove QueuedBlock.hash
script: fix spelling linter raising spuriously on "invokable"
doc: Various validation doc fixups
scripted-diff: rename nPeersWithValidatedDownloads
[net processing] Remove CNodeState.nBlocksInFlightValidHeaders
[net processing] Remove QueuedBlock.fValidatedHeaders
[net processing] Remove unnecessary hash arg from MarkBlockAsInFlight()
p2p, refactor: extract OnionToString() from CNetAddr::ToStringIp()
p2p: remove torv2 from CNetAddr::ToStringIP()
p2p: remove torv2 in SetIP() and ADDR_TORV2_SIZE constant
p2p: remove pre-addrv2 onions from SerializeV1Array()
p2p: ignore torv2-in-ipv6 addresses in SetLegacyIPv6()
p2p: remove BIP155Network::TORV2 from GetBIP155Network()
rpc: Prefix rpcwaittimeout error with details on its nature
doc: Add release notes for the `-rpcwaittimeout` cli parameter
rpc: Add a `-rpcwaittimeout` parameter to limit time spent waiting
Index: Return early from failed coinstatsindex init
index: Use batch writing in coinstatsindex WriteBlock
build, qt: Make QWindowsVistaStylePlugin available again (regression)
Randomize message processing peer order
CRegTestParams: Use `args` instead of `gArgs`.
MOVEONLY: context-free package policies
doc: Drop no longer required notes for Windows builds
build: Try posix-specific CXX first for mingw32 host
Testcase for wallet issue with orphaned rewards.
disallow_mempool_conflicts -> allow_bip125_replacement and check earlier
[refactor] comment/naming improvements
[rpc] reserve space in txns
[package] static_assert max package size >= max tx size
ci: Bump macOS image to big-sur-xcode-12.5
qt: Translations update
test: remove sanitizer suppression for nanobench
test: update nanobench from release 4.0.0 to 4.3.4
qt, test: use regex search in apptests
qt, test: introduce FindInConsole function
qt, rpc: Do not accept command while executing another one
qt, rpc: Accept stop RPC even another command is executing
qt, rpc, refactor: Return early in RPCConsole::on_lineEdit_returnPressed
qt, rpc: Add "Executing…" message
test: feature_cltv.py: don't return tx copies in modification functions
test: drop unused node parameters in feature_cltv.py
test: fix typo in feature_cltv.py (s/ctlv/cltv/)
test: run mempool_reorg.py even with wallet disabled
refactor: Switch serialize to uint8_t (1/n)
scripted-diff: rename GetSystemTimeInSeconds to GetTimeSeconds
net: cleanup newly added PeerManagerImpl::ProcessNewBlock
validation: change ProcessNewBlock() to take a CBlock reference
Use COINBASE_MATURITY constant in functional tests.
scripted-diff: Rename SelectCoinsMinConf to AttemptSelection
Move vin filling to before final fee setting
Set m_subtract_fee_outputs during recipients vector loop
Move variable initializations to where they are used
Move recipients vector checks to beginning of CreateTransaction
Rename nSubtractFeeFromAmount in CreateTransaction
Rename nValue and nValueToSelect
Remove extraneous scope in CreateTransactionInternal
Move cs_wallet lock in CreateTransactionInternal to top of function
qt: Drop BitcoinGUI* WalletFrame data member
qt: Move CreateWalletActivity connection from WalletFrame to BitcoinGUI
qt: Move WalletView connections from WalletFrame to BitcoinGUI
test: check anchors.dat when node starts for the first time
doc: add maxuploadtarget to bitcoin.conf example
p2p: AddrFetch - don't disconnect on self-announcements
addrman: use unordered_map instead of map
Additional test vector for hardened derivation with leading zeros
test: remove BasicTestingSetup from util_threadnames unit tests
test: remove BasicTestingSetup from uint256 unit tests
test: remove BasicTestingSetup from torcontrol unit tests
test: remove BasicTestingSetup from sync unit tests
test: remove BasicTestingSetup from reverse_lock unit tests
test: remove BasicTestingSetup from policy_fee unit tests
test: remove BasicTestingSetup from merkleblock tests
test: remove BasicTestingSetup from hash unit tests
test: remove BasicTestingSetup from compilerbug unit tests
test: remove BasicTestingSetup from bswap unit tests
test: remove BasicTestingSetup from bech32 unit tests
test: remove BasicTestingSetup from base64 unit tests
test: remove BasicTestingSetup from base32 unit tests
test: remove BasicTestingSetup from arith_uint256 unit tests
test: remove BasicTestingSetup from amount unit tests
test: remove BasicTestingSetup from allocator unit tests
p2p: remove torv2 from SetNetFromBIP155Network()
fuzz: rename CNetAddr/CService deserialize targets
p2p: drop onions from IsAddrV1Compatible(), no longer relay torv2
doc: improve note on choosing posix mingw32
p2p: remove torv2/ADDR_TORV2_SIZE from SetTor()
qt: Drop PeerTablePriv class
qt, refactor: Use default arguments for overridden functions
index: refactor-only: Reuse CChain ref
index: Add chainstate member to BaseIndex
bench: Use existing chainman in AssembleBlock
bench: Use existing NodeContext in DuplicateInputs
miner: Pass in chainman to RegenerateCommitments
rest: Add GetChainman function and use it
test: update feature_proxy to torv3
gui: send using external signer
gui: wallet creation detects external signer
node: add externalSigners to interface
gui: display address on external signer
wallet: add displayAddress to interface
gui: create wallet with external signer
gui: add external signer path to options dialog
depends: Bump Qt version to 5.12.11
English translations update
gui: add Direction column to peers tab
Add src/qt/android/.gitignore
MOVEONLY: CWallet transaction code out of wallet.cpp/.h
depends: latest config.sub (2021-04-30)
depends: latest config.guess (2021-05-24)
build: don't use cf-protection when targeting arm-apple-darwin
fuzz: don't try and use fopencookie when building for Android
guix: Check for disk space availability before building
qt: add translator comments for peers table columns
Replace size/weight estimate tuple with struct for named fields
Mark `CheckTxInputs` `[[nodiscard]]` (out-param `txfee` only set if call is successful). Avoid UUM in fuzzing harness `coins_view`.
guix: Remove dest if OUTDIR mv fails
build: Use Qt archive of the same version as the compiled binaries
[fuzz] Occasional valid magic bytes for transport serialization test
[fuzz] Occasional valid checksum for transport serialization fuzz test
[fuzz] Add serialization to deserialization test
ci: Bump multiprocess memory
contrib: add torv3 seed nodes for testnet, drop v2 ones
doc: describe in fuzzing.md how to reproduce a CI crash
test: use MiniWallet (P2PK mode) for feature_dersig.py
net: remove non-blocking bool from interface
Add roundtrip fuzz tests for CAddress serialization
Use addrv2 serialization in anchors.dat
Introduce well-defined CAddress disk serialization
Remove support for double serialization
Convert uses of double-serialization to {En,De}codeDouble
Convert existing float encoding tests
Add unit tests for serfloat module
Add platform-independent float encoder/decoder
Remove unused float serialization
tests: check derivation of P2TR
Add tr() descriptor (derivation only, no signing)
Add TaprootBuilder class
Add XOnlyPubKey::CreateTapTweak
Make consensus checking of tweaks in pubkey.* Taproot-specific
Separate WitnessV1Taproot variant in CTxDestination
Avoid dependence on CTxDestination index order
Change Solver() output for WITNESS_V1_TAPROOT
Make XOnlyPubKey act like byte container
index: Avoid unnecessary type casts in coinstatsindex
move-only: Group and re-order CAddrMan members by access type
[policy] detect unsorted packages
[doc] add release note for package testmempoolaccept
[test] functional test for packages in RPCs
[rpc] allow multiple txns in testmempoolaccept
test: MiniWallet: introduce enum type for output mode
[policy] limit package sizes
[fuzz] add ProcessNewPackage call in tx_pool fuzzer
[test] unit tests for ProcessNewPackage
[test] make submit optional in CreateValidMempoolTransaction
[validation] package validation for test accepts
Factor feefilter logic out
rpc: simplify addpeeraddress and improve code constness
Remove `GetDataDir(bool fNetSpecific = true)` function
scripted-diff: Replace `GetDataDir(true)` calls with `gArgs.GetDataDirNet()` calls
scripted-diff: Replace `GetDataDir()` calls with `gArgs.GetDataDirNet()` calls
Make `ArgsManager.GetDataDirPath` private and drop needless suffix
scripted-diff: Change `ArgsManager.GetDataDirPath()` to `ArgsManager.GetDataDirBase()` in tests
Add `ArgsManager.GetDataDirBase()` and `ArgsManager.GetDataDirNet()` as an intended replacement for `ArgsManager.GetDataDirPath(net_identifier)`
build: Convert warnings into errors when testing for -fstack-clash-protection
refactor: Do not expose CAddrMan members as protected without need
test: addpeeraddress functional test coverage
qt: Improve GUI responsiveness
Make `m_cached_blocks_path` mutable. Make `ArgsManager::GetBlocksDirPath()` const.
rpc: fix code comment for bumpfee/psbtbumpfee output
rpc: fix docs for bumpfee psbt update
fuzz: Terminate immediately if a fuzzing harness ever tries to perform a DNS lookup (belts and suspenders)
Update Windows code signing certificate
Move COINBASE_MATURITY from `feature_nulldummy` test to `blocktools`.
Cleanup -includeconf error message
refactor: Make m_cs_fee_estimator non-recursive
refactor: Add non-thread-safe CBlockPolicyEstimator::_removeTx helper
Add thread safety annotations to CBlockPolicyEstimator public functions
net: ignore block-relay-only peers when skipping DNS seed
txmempool: add thread safety annotations
qt: Make RPC console welcome message translation-friendly
[validation] explicit Success/Failure ctors for MempoolAcceptResult
[policy] Define packages
[refactor] add option to disable RBF
[coins/mempool] extend CCoinsViewMemPool to track temporary coins
[validation] make CheckSequenceLocks context-free
fuzz: Terminate immediately if a fuzzing harness ever tries to create a TCP socket (belt and suspenders)
fuzz: Speed up banman fuzz target
fuzz: Speed up transaction fuzz target
Generate doxygen documentation for test sources
rpc/blockchain: Use existing blockman in gettxoutsetinfo
Have OutputGroup determine the value to use
guix: repro: Sort find output in libtool for gcc-8
Change SelectCoins_test to actually test SelectCoins
Remove CreateTransaction while loop and some related variables
Remove use_bnb and bnb_used
Do both BnB and Knapsack coin selection in SelectCoinsMinConf
Have KnapsackSolver actually use effective values
p2p: pass strings to NetPermissions::TryParse functions by const ref
Roll static tx fees into nValueToSelect instead of having it be separate
Move output reductions for fee to after coin selection
Remove -feefilter option
doc: release note for getnodeaddresses by network
test: improve getnodeaddresses coverage, test by network
rpc: enable filtering getnodeaddresses by network
p2p: allow CConnman::GetAddresses() by network, add doxygen
p2p: allow CAddrMan::GetAddr() by network, add doxygen
p2p: pull time call out of loop in CAddrMan::GetAddr_()
p2p: enable CAddrMan::GetAddr_() by network, add doxygen
wallet: make chain optional for CWallet::Create
CWallet::Create move chain init message up into calling code
refactor: Add CWallet:::AttachChain method
refactor: move first run detection to client code
net: Return IPv6 scope id in `CNetAddr::ToStringIP()`
build: Silent lupdate "unknown namespace/class" warnings
refactor: Make CFeeRate constructor architecture-independent
build: libevent 2.1.12-stable
doc: note that brew installed qt is not supported
rpc: Improve avoidpartialspends and avoid_reuse documentation
wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100
qt, test: use qsignalspy instead of qeventloop
test: use P2PK-MiniWallet for feature_csv_activation.py
qt: Add shortcuts for console font resize buttons
qt: Add GUIUtil::AddButtonShortcut
test: MiniWallet: add P2PK support
wallet: refactor: dedup sqlite PRAGMA assignments
wallet: refactor: dedup sqlite PRAGMA integer reads
qt: English translations update
qt: Extract translations correctly from UTF-8 formatted source
fuzz: Add missing CheckTransaction before CheckTxInputs
fuzz: Sanity check result of CheckTransaction
fuzz: Add utxo_snapshot target
qt: Replace disambiguation strings with translator comments
qt, refactor: Revert explicit including QStringBuilder
qt, build: Optimize string concatenation
qt: make console buttons look clickable
validation: document lack of inherited signaling in RBF policy
test: Extend feature_rbf.py with no inherited signaling
qt: Use native presentation of shortcut
docs: improve make with parallel jobs description.
Make cost_of_change part of CoinSelectionParams
Move some calculations to common code in SelectCoinsMinConf
scripted-diff: rename some variables
codesigning: Use SHA256 as digest for osslsigncode (Windows)
guix: Add codesigning functionality
guix: Package codesigning tools
guix: Reindent existing manifest.scm
Makefile.am: use APP_DIST_DIR instead of hard-coding dist
refactor: Replace memset calls with array initialization
RPC/blockchain: getblockchaininfo: Include versionbits signalling details during LOCKED_IN
qt: Align numbers in the "Peer Id" column to the right
ci: Bump cirrus fuzz CPUs to avoid timeout
build: add *~ to .gitignore
scripted-diff: update noban documentation in net_processing.cpp
scripted-diff: rename NetPermissionFlags enumerators
p2p, refactor: make NetPermissionFlags a uint32 enum class
fuzz: Remove incorrect float round-trip serialization test
wallet: Do not iterate a directory if having an error while accessing it
p2p: NetPermissions::HasFlag() pass flags param by value
scripted-diff: add NetPermissionFlags scopes where not already present
index: Avoid async shutdown on init error
fuzz: Run const CScript member functions only once
doc: Update bips.md for 0.21.1
fuzz: Avoid timeout in EncodeBase58
build: improve macro for testing -latomic requirement
rpc/wallet: use OMITTED_NAMED_ARG instead of Default(VNULL)
net: initialize nMessageSize to max uint32_t instead of -1
rpc/createwallet: omitted named arguments
net: use stronger AddLocal() for our I2P address
rpc: address:amount dictionaries are OBJ_USER_KEYS
rpc/getpeerinfo: bytesrecv_per_msg is a dynamic dictionary
rpc/gettxoutsetinfo: hash_or_height is a named argument
doc: Remove mention of priority estimation
refactor: Avoid magic value of all-zeros in assumeutxo base_blockhash
refactor: Use type-safe assumeutxo hash
refactor: Remove unused code
move-only: Add util/hash_type
refactor: remove redundant fOnlySafe argument
fuzz: Limit max insertions in timedata fuzz test
build: Makes rcc output always deterministic
refactor: Remove useless extern keyword
refactor: feature_csv_activation.py: move tx helper functions to methods
test: use MiniWallet for feature_csv_activation.py
qt: enable wordWrap for peers-tab detail services
rpc/listaddressgroupings: redefine inner-most array as ARR_FIXED
rpc/createrawtransaction: redefine addresses as OBJ_USER_KEYS
rpc: include OBJ_USER_KEY in RPCArg constructor checks
test: fee rate values that cannot be represented as sat/vB
rpc: enable passing decimals to AmountFromValue, add doxygen
test: type error and out of range fee rates where missing
test: explicit fee rates with invalid amounts
refactor: Add TSA annotations to the WorkQueue class members
fuzz: Avoid excessively large min fee rate in tx_pool
fuzz: Remove strprintf test cases that are known to fail
fuzz: Limit ParseISO8601DateTime fuzzing to 32-bit
scripts: test for MACHO control flow instrumentation
build: build Boost with -fcf-protection when targeting Darwin
fuzz: Remove unused --enable-danger-fuzz-link-all option
gui: Add access to the Peers tab from the network icon
net: Clarify message header validation errors
fuzz: Add WRITE_ALL_FUZZ_TARGETS_AND_ABORT
test: minor fixes & improvements for files linter test
net: Sanitize message type for logging
test: improve zero-value explicit fee rate coverage
depends: Add missing -D_LIBCPP_DEBUG=1 to debug flags
test: use MiniWallet for p2p_blocksonly.py
ci: Properly pass msan cflags
fix permissions on 00_setup_env_native_fuzz_with_msan
streams: Accept URef obj for VectorReader unserialize
fuzz: Create a block template in tx_pool targets
doc: add OSS-Fuzz section to fuzzing.md doc
gui: rename "Peer Id" to "Peer" in tab column and details area
ci: Add msan fuzz config
ci: Use clang-12 in msan task
ci: Set BASE_SCRATCH_DIR early, so that it can be used in test configs
test: install lief in CI
contrib: consolidate PIE and NX security checks
contrib: use LIEF in PE symbol checks
contrib: use LIEF in macOS symbol checks
contrib: use f strings in symbol-check.py
contrib: add PE PIE check to security checks
contrib: use LIEF for PE security checks
contrib: use LIEF for macOS security checks
contrib: use f strings in security-check.py
guix: install LIEF in Guix container
gitian: install LIEF in gitian container
[net processing] Add internal _RelayTransactions()
fuzz: Limit toxic test globals to their respective scope
refactor: Replace &foo[0] with foo.data()
refactor: Avoid &foo[0] on C-Style arrays
refactor: Use only one temporary buffer in CreateObfuscateKey
refactor: Use CPubKey vector constructor where possible
script: Replace address-of idiom with vector data() method
guix-attest: Avoid incomplete sigdirs with ERR traps
fuzz: Add -fsanitize=integer suppression needed for RPC fuzzer
guix: Consistently use gcc-8 for $HOST
guix: Skip attesting to dist-archive
guix: Attest to inputs in inputs.SHA256SUMS
guix: Construct $OUTDIR in ${DISTSRC}/output
guix: Minor quoting fix in libexec/build.sh
guix-attest: Allow skipping GPG signing with NO_SIGN
guix-attest: Use ascii-armor signatures
guix-attest: Only use cross-platform flags for find+xargs
guix: Add guix-verify script
guix: Add guix-attest script
script: update REVIEWERS
bench: Remove duplicate constants
test: Use throwing variant accessor
test: Use loop to register RPCs
scripted-diff: Replace three dots with ellipsis in the UI strings
net: add I2P seeds to chainparamsseeds
contrib: add a few I2P seed nodes
contrib: parse I2P addresses in generate-seeds.py
doc: Add doc/release-notes/release-notes-0.21.1.md
Remove user input from URI error message
doc: Clarify that feerates are per virtual size
Remove Visual Studio 2017 reference from readme
qt: Make TransactionView aware of runtime palette change
qt: Make CoinControlDialog aware of runtime palette change
qt: Make OverviewPage aware of runtime palette change
qt: Make UnitDisplayStatusBarControl aware of runtime palette change
qt: Replace base class of ClickableLabel with ThemedLabel
qt: Use GUIUtil::ThemedLabel class
qt: Add GUIUtil::ThemedLabel class
qt: Make SignVerifyMessageDialog aware of runtime palette change
qt: Make SendCoinsEntry aware of runtime palette change
qt: Make RPCConsole aware of runtime palette change
qt: Make BitcoinGUI aware of runtime palette change
qt: Make PlatformStyle aware of runtime palette change
doc: add indexes/coinstats/db/ to files.md
doc: fix -coinstatsindex help, and test/rpc touchups
refactor: [index] Replace deprecated char with uint8_t in serialization
test: resolve bug in test/functional/interface_bitcoin_cli.py - Test -getinfo with -rpcwallet=unloaded wallet returns no balances
ci: Clarify that previous_releases task is using DEBUG
ci: Use clang in multiprocess task to avoid OOM
test: Add missing test for empty P2WSH redeem
scripted-diff: Clarify that feerates are per virtual size
build: use -stdlib++-isystem with Clang 10
guix: use Clang 10 for the macOS cross compile
build: no longer patch threading out of ld64
build: Xcode 12.1, macOS SDK 10.15.6
build: native cctools 973.0.1, ld64 609
build: Clang 10.0.1
build: libtapi 1100.0.11
doc: add coinstatsindex to bitcoin.conf
rpc: include_unsafe option for fundrawtransaction
[refactor] Remove unused ForEachNodeThen() template
scripted-diff: rename address relay fields
[net processing] Move addr relay data and logic into net processing
ci: Enable D_GLIBCXX_DEBUG for multiprocess task
test: add new python linter to check file names and permissions
qt: Use template function qOverload in signal-slot connections
fuzz: Reduce maintenance requirements by allowing RPC annotations also for conditionally available RPC commands (such as wallet commands) without the fragility of #ifdef forests
refactor: Replace std::bind with lambdas
refactor: Use appropriate thread constructor
test: Assert that exit code indicates failure
build: use -isysroot over --sysroot on macOS
refactor: Avoid sign-compare compiler warning in util/asmap
[tests] Speed up p2p_segwit.py
test: Run feature_cltv with MiniWallet
test: Hide tx rehash in helper
test: Remove new_tx reference
qt: Refactor to remove unnecessary block in DispatchNotifications
qt: Early subscribe core signals in transaction table model
qt: Refactor ShowProgress to DispatchNotifications
qt: Set flag after inital load on transaction table model
fuzz: Limit mocktime to MTP in tx_pool targets
fuzz: Use correct variant of ConsumeRandomLengthString instead of hardcoding a maximum size
fuzz: Allow to pass min/max to ConsumeTime
fuzz: RPC fuzzer post-merge follow-ups. Remove unused includes. Update list of fuzzed RPC commands.
doc: add release notes for 20867
rpc/util: multisig: only check redeemScript size is <= 520 for P2SH
test/functional: standardness sanity checks for P2(W)SH multisig
script: allow up to 20 keys in wsh() descriptors
script: match multisigs with up to MAX_PUBKEYS_PER_MULTISIG keys
fuzz: Add RPC interface fuzzing. Increase fuzzing coverage from 65% to 70%.
test: Use self.send_addr_msg
test: fix off-by-ones in rpc_fundrawtransaction
doc: IsFinalTx comment about nSequence & OP_CLTV
style: Add { } to multi-line if
move-only: Move functions to blockstorage
move-only: Move constants to blockstorage
refactor: Move block storage globals to blockstorage
refactor: Move pruning/reindex/importing globals to blockstorage
qt: peertableview alternating row colors
refactor + document coin selection strategy
[docs] add doxygen comments to wallet code
validation: remove nchaintx from assumeutxo metadata
doc/style followups in MempoolAcceptResult
Remove progress bar on modal overlay
qt: Avoid unnecessary translations
qt: Do not use QObject::tr plural syntax for numbers with a unit symbol
p2p: Limit m_block_inv_mutex
refactor: Make TraceThread a non-template free function
fuzz: Ensure prevout is consensus-valid
test: fix file permissions on various scripts
doc: IsSnapshotActive
validation: prepare VerifyDB for assumeutxo
refactor: rename active_chainstate in VerifyDB
libsecp256k1 no longer has --with-bignum= configure option
Squashed 'src/secp256k1/' changes from 3967d96bf1..efad3506a8
Update libsecp256k1 subtree to latest upstream master
multiprocess: Add echoipc RPC method and test
multiprocess: Add comments and documentation
multiprocess: Add bitcoin-node process spawning support
multiprocess: Add Ipc interface implementation
multiprocess: Add Ipc and Init interface definitions
Update libmultiprocess library
test: Speed up mempool_spend_coinbase.py
test: Create MiniWallet.create_self_transfer
qt: Do not clear console prompt when font resizing
qt, refactor: Drop redundant history cleaning in RPC console
qt: Untie irrelevant signal-slot parameters
[docs] format existing comments as doxygen
doc: note on SDK for macOS depends cross-compile
test: Add MiniWallet.sendrawtransaction
net: Avoid calling getnameinfo when formatting IPv6 addresses in CNetAddr::ToStringIP
net: Make IPv6ToString do zero compression as described in RFC 5952
cleaned up and added missing "include" statements for pubkey.cpp and pubkey.h
net: Combine two loops into one, and update comments
net: Restrict period when cs_vNodes mutex is locked
doc: add -addrinfo troubleshooting section to tor.md
test: Bump shellcheck version
net: remove unnecessary check of CNode::cs_vSend
refactor: init: mark fReset const
[validation] RewindBlockIndex no longer needed
[test] Add tests for addr relay in -blocksonly mode
[test] Add address relay tests involving outbound peers
[test] Add tests for getaddr behavior
[test] Extract sending an addr message into a helper
[test] Refactor the addr relay test to prepare for new tests
qt: Bump transifex slug for 22.x
Add bitcoin_en.xlf intermediate translation file to the repo
qt [experimental]: Add a translation comment and a disambiguation string
build: Add Qt lconvert tool to depends
build: Use XLIFF file to provide more context to Transifex translators
test: Add missing shift-base:nanobench.h suppression
ci: Use clang-12 for asan task
cli: use C++17 std::array class template argument deduction (CTAD)
Re-add command to install vcpkg
rpc: gettxoutsetinfo rejects hash_serialized_2 for specific height
test: Add test for coinstatsindex behavior in reorgs
rpc: Allow gettxoutsetinfo and getblockstats for stale blocks
index, rpc: Add use_index option for gettxoutsetinfo
test: Test coinstatsindex robustness across restarts
test: Add tests for block_info in gettxoutsetinfo
rpc, index: Add verbose amounts tracking to Coinstats index
test: add coinstatsindex getindexinfo coverage, improve current tests
rpc: Add Coinstats index to getindexinfo
test: Add unit test for Coinstats index
test: Add functional test for Coinstats index
rpc: gettxoutsetinfo can be requested for specific blockheights
index: Coinstats index can be activated with command line flag
index: Add Coinstats index
refactor: Simplify ApplyStats and ApplyHash
refactor: Pass hash_type to CoinsStats in stats object
crypto: Make MuHash Remove method efficient
Update msvc build to use Qt5.12.10 binaries.
refactor: Add and use EnsureConnman in rpc code
Move common package version code to init/common
Move common logging start code to init/common
Move common logging GetArgs code to init/common
Move common logging AddArg code to init/common
Move common sanity check code to init/common
Move common global init code to init/common
remove executable flag for src/net_processing.cpp
refactor, qt: Simplify SendCoinsDialog::updateCoinControlState
refactor: Drop CCoinControl::SetNull
update docstring in feature_csv_activation.py
p2p: allow NetPermissions::ClearFlag() only with PF_ISIMPLICIT
test: add net permissions noban/download unit test coverage
Change ClearDataDirPathCache() to ArgsManager.ClearPathCache().
Change GetBlocksDir() to ArgsManager.GetBlocksDirPath().
scripted-diff: Modify unit tests to use the ArgsManager in the BasicTestingSetup class instead of implicitly relying on gArgs.
scripted-diff: Replace m_args with m_local_args in getarg_tests.cpp
BasicTestingSetup: Add ArgsManager.
Modify "util_datadir" unit test to not use gArgs.
rpc: Improve getblock error message for invalid data type.
doc: update bitcoin.conf maxconnections info
doc: update reduce-memory.md peer connections info
refactor: Mark member functions const
Move GetDataDir(fNetSpecific) implementation to ArgsManager.
Move StripRedundantLastElementsOfPath before ArgsManager class.
doc: update -maxconnections config option help
test: Run versionbits_sanity for all chains
Refactor ProcessNewBlock to reduce code duplication
test: Address outstanding versionbits_test feedback
test: Check that no versionbits are re-used
rpc: Check default value type againts argument type
rpc: Keep default argument value in correct type
qa: Test default include_mempool value of gettxout
doc: update -addnode config option help
doc: update addnode rpc help
build: Drop pointless sed commands
Remove no longer used contrib/bitcoin-qt.pro from the repo
fuzz: use ConsumeBool() instead of !ConsumeBool()
fuzz: split FuzzedSock interface and implementation
fuzz: make FuzzedSock::Wait() sometimes simulate an occurred event
fuzz: set errno from FuzzedSock::Wait() if it simulates a failure
style: remove extra white space
test: Remove intermittently failing and not very meaningful `BOOST_CHECK` in `cnetaddr_basic`
Add mainnet and testnet taproot activation params
Avoid use of low file descriptor ids (which may be in use) in FuzzedSock and StaticContentsSock
validation: fix ActivateSnapshot to use hardcoded nChainTx
p2p, bugfix: use NetPermissions::HasFlag() in CConnman::Bind()
qt, refactor: Use better QMenu::addAction overloaded function
qt: Do not assign Alt+<KEY> shortcuts to context menu actions
qt: Drop menu separator that separates nothing
qt, refactor: Make AddressBookPage::deleteAction a local variable
test: Reset mocktime in the common setup
rpc/rest: Take and reuse local Chain/ChainState obj
rpc: style: Improve BuriedForkDescPushBack signature
rpc: Remove unnecessary casting of block height
rpc: Tidy up local references (see commit message)
rest/rpc: Remove now-unused old Ensure functions
scripted-diff: rest/rpc: Use renamed EnsureAny*()
rpc: Add renamed EnsureAny*() functions
test: Use mocktime to avoid intermittent failure
ci: Only cache depends/sdk-sources for macos/apk task in cirrus
Revert "test: Add tsan supp for leveldb::DBImpl::DeleteObsoleteFiles"
doc: remove boostrap info from GUIX_COMMON_FLAGS doc
test: Remove spurious double lock tsan suppressions by bumping to clang-12
net: flag relevant Sock methods with [[nodiscard]]
external_signer: remove ExternalSignerException
external_signer: use const where appropriate
wallet: remove CWallet::GetExternalSigner()
external_signer: remove ignore_errors from Enumerate()
refactor: unify external wallet runtime errors
refactor: add missing includes to external signer code
refactor: move all signer code inside ENABLE_EXTERNAL_SIGNER #ifdefs
ci: Make Cirrus CI Windows build with --enable-werror
refactor: add [[noreturn]] attribute where applicable
tests: Skip SQLite fsyncs while testing
rpc: Add alt Ensure* functions acepting NodeContext
addrinfo: raise helpfully on server error or incompatible server version
build,boost: update download url.
chainparams: drop versionbits threshold to 90% for mainnnet and signet
versionbits: simplify state transitions
versionbits: Add explicit NEVER_ACTIVE deployments
fuzz: test versionbits delayed activation
tests: test versionbits delayed activation
versionbits: Add support for delayed activation
tests: clean up versionbits test
tests: test ComputeBlockVersion for all deployments
tests: pull ComputeBlockVersion test into its own function
build: mac_alias 2.2.0
build, qt: No longer need to set QT_RCC_TEST=1 for determinism
qt: Do not use QClipboard::Selection on Windows and macOS.
qt: Elide long strings in their middle in the Peers tab
Ignore guix builds
ci: Run self-hosted ci
ci: Make cirrus cache folders relative to cirrus base dir
ci: Restart docker before run
ci: [refactor] Create setting for ephemeral config in .cirrus.yml
fuzz: Extend psbt fuzz target a bit
doc: Use CONFIG_SITE instead of --prefix
doc: add cli -addrinfo release note
cli: add -addrinfo command
cli: create AddrinfoRequestHandler class
doc: release notes for new listbanned fields
rpc: add help for enumeratesigners and walletdisplayaddress
ci: use --enable-external-signer instead of --with-boost-process
Move external signer out of wallet module
i2p: cancel the Accept() method if waiting on the socket errors
cirrus: Use SSD cluster for speedup
test: Remove option to make TestChain100Setup non-deterministic
test: Use compressed keys in TestChain100Setup
[test] check that mapFlagNames is up to date
[test] remove unnecessary OP_1s from invalid tests
[test] minor improvements / followups
[test] fix bug in ExcludeIndividualFlags
guix: Register garbage collector root for containers
guix: Update hint messages to mention guix-clean
build: fix configuring when building depends with NO_BDB=1
rpc: improve getnodeaddresses help
rpc: simplify/constify getnodeaddresses code
rpc: add network field to rpc getnodeaddresses
Drop JSONRPCRequest constructors after #21366
test: increase listbanned unit test coverage
rpc: add time_remaining field to listbanned
rpc: add ban_duration field to listbanned
doc: improve listbanned help
rpc: swap position of banned_until and ban_created fields
script: Add trusted key for hebasto
doc: Remove irrelevant link to GitHub
build: enable -Wdocumentation if suppressing external warnings
doc: fixup -Wdocumentation issues
build: suppress libevent warnings if supressing external warnings
ci: increase CPU count of sanitizer job to increase memory limit
build: remove -Wdeprecated-register from NOWARN flags
guix: Record precious directories and add guix-clean
build: Remove spaces from variable-printing rules
blockstorage: [refactor] Use chainman reference where possible
move-only: Move *Disk functions to blockstorage
rest: Use existing NodeContext
rest: Pass in NodeContext to rest_block
rpc/rawtx: Use existing NodeContext
rpc/mining: Use existing NodeContext
rpc/blockchain: Use existing NodeContext
rpc/*,rest: Add review-only assertion to EnsureChainman
miner: Pass in previous CBlockIndex to RegenerateCommitments
guix: Build dmg as a static binary
depends: libdmg-hfsplus: Skip CMake RPATH patching
guix: Remove codesign_allocate+pagestuff from unsigned tarball
guix: Use clang-toolchain instead of clang
guix: Fallback to local build for substitute-enabled Guix users
guix: Add early health check for guix-daemon
guix: More thoroughly control native toolchain
guix: Supply --link-profile
guix: Add troubleshooting documentation entries
guix: Adapt guix-build to prelude, restructure hier
guix: Remove guix-build.sh filename extension
guix: Add source-able bash prelude and utils
test: Document why no symbol names can be used for suppressions
qt: Handle exceptions in SendCoinsDialog::sendButtonClicked slot
qt: Handle exceptions in TransactionView::bumpFee slot
qt: Handle exceptions in WalletModel::pollBalanceChanged slot
net: Deserialize hardcoded seeds from BIP155 blob
contrib: Add explicit port numbers for testnet seeds
contrib: Add a few TorV3 seed nodes
contrib: generate-seeds.py generates output in BIP155 format
test: Document race:validation_chainstatemanager_tests suppression
refactor: Remove negative lock annotations from globals
test: Replace blanket UBSan signed integer overflow suppression for txmempool.cpp with specific suppression
move-only: Move AbortNode to shutdown
move-only: Move ThreadImport to blockstorage
build, qt, refactor: Drop sed commands for win32-g++/qmake.conf
refactor: Prefer clean assert over UB in coinstats
test: Add missing suppression for signed-integer-overflow:txmempool.cpp
build: additional PKG_CHECK_MODULES calls in bitcoin_qt.m4
build: misc doc changes in bitcoin_qt.m4
build: set QT_*_CFLAGS & QT_*_LIBS in PKG_CHECK_MODULES() calls
build: use QT_*_LIBS rather than passing lib names
scripted-diff: replace Qt5 with ${qt_lib_prefix} in _BITCOIN_QT_CHECK_STATIC_LIBS
build: reorder libs in _BITCOIN_QT_CHECK_STATIC_LIBS (move-only)
Disable certain false positive warnings for libsecp256k1 msvc build
refactor: Move load block thread into ChainstateManager
test: make sure non-IP peers get discouraged and disconnected
test: also check disconnect in denialofservice_tests/peer_discouragement
test: use pointers in denialofservice_tests/peer_discouragement
wallet: refactor: dedup sqlite statement deletions
wallet: refactor: dedup sqlite statement preparations
guix: Create windeploy inside distsrc-*
contrib: Silence git-describe when looking for tag
guix: Use --cores instead of --max-jobs
[doc] correct comment about ATMPW
[doc] correct comment in chainparams
[doc] GetBestBlock() doesn't do nothing
[net] Changes to RunInactivityChecks
rpc: Fail to return undocumented return values
net: Avoid calling getnameinfo when formatting IPv4 addresses in CNetAddr::ToStringIP
net: Add IPv4ToString (we already have IPv6ToString)
[net processing] Make RelayAddress() a member function of PeerManagerImpl
[net processing] Take NodeId instead of CNode* as originator for RelayAddress()
qt: Handle exceptions in BitcoinGUI::addWallet slot
qt: Add GUIUtil::ExceptionSafeConnect function
qt: Add BitcoinApplication::handleNonFatalException function
qt: Make PACKAGE_BUGREPORT link clickable
test: check that _all_ invalid-CLTV txs are rejected after BIP65 activation
test: check that _all_ invalid-CLTV txs are allowed in a block pre-BIP65
test: prepare cltv_invalidate to test all failure reasons in feature_cltv.py
test: add tx modfication helper function in feature_cltv.py
[net processing] Refactor MaybeSendAddr()
[test] remove invalid test from tx_valid.json
build: set --build when configuring packages in depends
test: small cleanup in RPCNestedTests tests
node/ifaces: ChainImpl: Use an accessor for ChainMan
node/ifaces: NodeImpl: Use an accessor for ChainMan
validation: Make BlockManager::LookupBlockIndex const
node: Avoid potential UB by asserting assumptions
net_processing: Move comments to declarations
fuzz: [refactor] Use IsValidFlagCombination in signature_checker fuzz target
fuzz: Removed unused try-catch in coins_view
fuzz: [refactor] Use ConsumeScript in signature_checker fuzz target
build: split native_cctools
Clean up context dependent checks in descriptor parsing
refactor: move uncompressed-permitted logic into ParsePubkey*
refactor: split off subscript logic from ToStringHelper
Account for key cache indices in subexpressions
Make DescriptorImpl support multiple subscripts
refactor: move population of out.scripts from ExpandHelper to MakeScripts
Remove support for subdescriptors expanding to multiple scripts
remove unused class util::Ref and its unit test
refactor: replace util::Ref by std::any (C++17)
util: introduce helper AnyPtr to access std::any instances
rpc: Missing doc updates for bumpfee psbt update
[net processing] Refactor MaybeSendAddr() - early exits
[net processing] Change MaybeSendAddr() to take a reference
[net processing] Extract `addr` send functionality into MaybeSendAddr()
[net] Change addr send times fields to be guarded by new mutex
[net processing] Only call GetTime() once in SendMessages()
build: Enable safe warnings for msvc builds
test: remove qt byteswap compattests
net: add ifaddrs.h include
build: check if -lsocket is required with *ifaddrs
rand: only try and use freeifaddrs if available
cirrus: Add missing depends_sources_cache to Android task
cirrus: Only cache releases when needed
ci: Bump Android cross-build to Ubuntu Focal
ci: Build depends only once for Android build
ci: Set DEPENDS_DIR when setting BASE_ROOT_DIR
ci: Bump macOS VM image to the latest version
[test] no send feefilters when txrelay is turned off
remove incompatibility release note for darkmode on macos
node/coinstats: Replace #include with fwd-declaration
miner: Add chainstate member to BlockAssembler
Revert "miner: Pass in chainstate to BlockAssembler::CreateNewBlock"
Revert "scripted-diff: Invoke CreateNewBlock with chainstate"
Revert "miner: Remove old CreateNewBlock w/o chainstate param"
remove unnecessary newline from initWarning() argument
fuzz: [refactor] Use PickValue where possible
Unconditionally check for fRelay field in test framework
test: Use deterministic chain in utxo set hash test
test: Remove wallet dependency of utxo set hash test
rpc: Improve gettxoutsetinfo help
p2p: Don't send FEEFILTER in blocksonly mode
qt: fix issue when disabling the auto-enabled blank wallet checkbox
doc: Add release notes for #18335 (rpc work queue exceeded error)
doc: Add release notes for -deprecatedrpc=addresses and bitcoin-tx
rpc: deprecate `addresses` and `reqSigs` from rpc outputs
qt, refactor: Drop redundant setEditTriggers(NoEditTriggers) calls
fuzz: Style fixups
build: miniupnpc 2.2.2
build: Remove unused header from the build system
contrib: Use -daemonwait in systemd init script
[net] remove fUpdateConnectionTime from FinalizeNode
refactor: return std::nullopt instead of {}
build: Do not build unused CoreWLAN stuff in depends for macOS
depends: fix Qt precompiled headers bug
depends: disable Qt Vulkan support on Android
CI: add Android APK build to cirrus
CI: add Android APK build script
Qt: add Android packaging support
test: remove duplicate assertions in util_tests
fuzz: cleanups for versionbits fuzzer
fuzz: Use ConsumeWeakEnum in addrman for service flags
[net] remove CConnman::AddNewAddresses
[net] remove CConnman::MarkAddressGood
[net] remove CConnman::SetServices
[net_processing] Keep addrman reference in PeerManager
[net] Construct addrman outside connman
test: add functional test for anchors.dat
test: add ParseUInt16() test coverage
tests: Add test for CNetAddr::ToString IPv6 address formatting (RFC 5952)
Add unit test coverage for our onion peer eviction protection
Protect onion+localhost peers in ProtectEvictionCandidatesByRatio()
Use EraseLastKElements() throughout SelectNodeToEvict()
Add m_inbound_onion to AttemptToEvictConnection()
Add unit tests for ProtectEvictionCandidatesByRatio()
Use std::unordered_set instead of std::vector in IsEvicted()
Move peer eviction tests to a separate test file
Extract ProtectEvictionCandidatesByRatio from SelectNodeToEvict
Doc: Tell howto install clang-format on Debian/Ubuntu
build: Make Windows-specific targets available for Windows builds only
build: Make macOS-specific targets available for macOS builds only
fuzz: Add tx_pool fuzz targets
style-only: Remove whitespace
net: Simplify ProcessGetBlockData execution by removing send flag.
log: Clarify that block request below NODE_NETWORK_LIMITED_MIN_BLOCKS disconnects
qt: Improve URI/file handling message
refactor: Pass PeerManagerImpl members only once
refactor: post Optional<> removal cleanups
Rename CoinSelectionParams::effective_fee to m_effective_feerate
wallet: Move discard feerate fetching to CreateTransaction
wallet: Move long term feerate setting to CreateTransaction
test: add missing netaddress include headers
util: add missing braces and apply clang format to SplitHostPort()
util: add ParseUInt16(), use it in SplitHostPort()
p2p, refactor: pass and use uint16_t CService::port as uint16_t
doc: Update libnatpmp info in dependencies.md
wallet: Replace nFeeRateNeeded with effective_fee
wallet: Use existing feerate instead of getting a new one
test: give fundraw more time for test_transaction_too_large
net: do not advertise address where nobody is listening
test: add I2P test for a runaway SAM proxy
fuzz: add tests for the I2P Session public interface
i2p: use pointers to Sock to accommodate mocking
net: change ConnectSocketDirectly() to take a Sock argument
net: add connect() and getsockopt() wrappers to Sock
fuzz: avoid FuzzedSock::Recv() repeated errors with EAGAIN
fuzz: extend FuzzedSock::Recv() to support MSG_PEEK
fuzz: implement unimplemented FuzzedSock methods
test: add a test to ensure RecvUntilTerminator() limit works
i2p: limit the size of incoming messages
Always add -daemonwait to known command line arguments
Use PrecomputedTransactionData in signet check
Treat amount<0 also as missing data for P2WPKH/P2WSH
Make all SignatureChecker explicit about missing data
Add MissingDataBehavior and make TransactionSignatureChecker handle it
refactor: net: subnet lookup: use single-result LookupHost()
refactor: reuse test string with embedded null char in util_tests
test: add ParseUInt8() unit and fuzz test coverage
Update vcpkg checkout commit.
Add new format string placeholders for walletnotify to include relevant block information for transactions
net: fix hSocket param in netbase.h::ConnectSocketDirectly()
net: move Doxygen docs from netbase.cpp to netbase.h
tests: Add fuzzing harness for LoadMempool(...) and DumpMempool(...)
net: update incorrect Doxygen documentation in netbase.cpp
fuzz: Implement fuzzed_dns_lookup_function as lambda
rpc: remove scantxoutset EXPERIMENTAL warning
scripted-diff: remove Optional & nullopt
scripted-diff: Drop redundant QString calls
ci, gitian: Drop unneeded python3-dev package for macOS builds
doc: Update zlib info in dependencies.md
test: Drop unused get_machine function
test: Cleanup test files in test-{security,symbol}-check.py
Revert "qt: Use "fusion" style on macOS Big Sur with old Qt"
[net processing] Add ChainSyncTimeoutState default initializers
[net processing] Remove CNodeState ctor body
build: don't try and use -fstack-clash-protection on Windows
validation: Make DumpMempool(...) and LoadMempool(...) easier to test/fuzz/mock
tests: Set errno in FuzzedFileProvider. Implement seek(..., ..., SEEK_END).
tests: Add fuzzing harness for versionbits
bugfix: fix bech32_encode calls in gen_key_io_test_vectors.py
naming nits
Add signet support to gen_key_io_test_vectors.py
Use Bech32m encoding for v1+ segwit addresses
Add Bech32m test vectors
Implement Bech32m encoding/decoding
doc: Update dependencies.md with a new Qt version
build: Cleanup libxkbcommon_postprocess_cmds
build, qt: Drop redundant -lxcb-static flag
build, qt: Always test plugins/subdir before adding to search paths
test: use fewer blocks in wallet_groups and move sync call
doc: specify minimum HWI version
rpc: don't require wallet for enumeratesigners
doc: update developer notes for removal of MakeUnique
scripted-diff: remove MakeUnique<T>()
test: use 327 fewer blocks in feature_nulldummy
test, refactor: abstract the feature_nulldummy blockheight values
compat: remove memcpy -> memmove backwards compatibility alias
build: update qt qpaint non determinism patch for 5.12.10
build: update qt no-xlib patch for 5.12.10
build: update qt android jni static patch for 5.12.10
build: update qt lrelease patch for 5.12.10
build: disable qt SDK version checking
build: Add QMacStyle support
build: revert to using Qts internal zlib
build: qt 5.12.10
build: Add xkbcommon 0.8.4
build: only pass -optimized-tools to qt in debug mode
doc: Update fuzzing docs for afl-clang-lto
fuzz: Bump FuzzedDataProvider.h
[net processing] Remove unused CNode.address member
wallet, rpc: update listdescriptors response format
[doc] Improve comment about protected peers
tests: Add fuzzing harness for Lookup(...)/LookupHost(...)/LookupNumeric(...)/LookupSubNet(...)
net: Make DNS lookup code testable
net_processing: Add review-only assertion to PeerManager
scripted-diff: net_processing: Use existing chainman
net_processing: Move some static functions to PeerManager
node/ifaces: ChainImpl: Use existing NodeContext member
node/ifaces: NodeImpl: Use existing NodeContext member
node: Use existing NodeContext
node/coinstats: Pass in BlockManager to GetUTXOStats
miner: Pass in blockman to ::RegenerateCommitments
miner: Remove old CreateNewBlock w/o chainstate param
scripted-diff: Invoke CreateNewBlock with chainstate
miner: Pass in chainstate to BlockAssembler::CreateNewBlock
validation: Remove extraneous LoadGenesisBlock function prototype
doc: Rename fuzz seed_dir to corpus_dir
doc: add signet to doc/bitcoin-conf.md
doc: add signet to share/examples/bitcoin.conf
build: Small libxcb.mk improvements
build: Clean remnants of QTBUG-34748 fix
test: add missing logging to wallet_groups.py
qt, refactor: Drop no longer used PeerTableModel::getRowByNodeId func
qt, refactor: Drop no longer used PeerTableModel::sort function
qt: Use PeerTableSortProxy for sorting peer table
qt: Add peertablesortproxy module
wallet: Mark replaced tx to not be in the mempool anymore
qt test: Don't bind to regtest port
qt: Do not translate file extensions
fuzz: fix gcc Woverloaded-virtual build warnings
Use C++11 member initializer in CNodeState
build, qt: Make Qt static libs check regardless of plugindir
build, refactor: Rename internal _BITCOIN_QT_FIND_STATIC_PLUGINS macro
build, qt: Refactor internal _BITCOIN_QT_CHECK_STATIC_PLUGINS macro
Test that signrawtx works when a signed CSV and CLTV inputs are present
Introduce DeferringSignatureChecker and inherit with SignatureExtractor
rpc: refactor rpc wallet functions to take references instead of pointers
rpc: remove calls to CWallet.get()
fuzz: Avoid -Wreturn-type warnings
net: Replace enum CConnMan::NumConnections with enum class ConnectionDirection
bitcoind: Add -daemonwait option to wait for initialization
shutdown: Use RAII TokenPipe in shutdown
util: Add RAII TokenPipe
util: Make Assume() usable as unary expression
[net processing] Don't pass CConnman to RelayTransactions
[net processing] Move RelayTransaction into PeerManager
fuzz: Add missing include (test/util/setup_common.h)
build: compile libnatpmp with -DNATPMP_STATICLIB on Windows
build: use newer source for libnatpmp
doc: revamp macOS build doc
build, doc: Drop libbz2-dev from macOS cross-compiling dependencies
build, doc: Drop libcap-dev from macOS cross-compiling dependencies
validation: CVerifyDB::VerifyDB: Use locking annotation
guix: Remove libcap from manifest
validation: Use existing chain member in CChainState::LoadGenesisBlock
validation: Use existing chain member in CChainState::AcceptBlock
validation: Pass in chain to FindBlockPos+SaveBlockToDisk
validation: Use *this in CChainState::ActivateBestChainStep
validation: Pass in chainstate to CTxMemPool::check
Make tx relay data structure use std::chrono types
Make all Poisson delays use std::chrono types
Convert block/header sync timeouts to std::chrono types
Change all ping times to std::chrono types
wallet: Add IsAddressUsed / SetAddressUsed methods
interfaces: Stop exposing wallet destdata to gui
test: Add gui test for wallet receive requests
tests: check never active versionbits
tests: more helpful errors for failing versionbits tests
test: HelpExampleCliNamed and HelpExampleRpcNamed
rpc: Add HelpExampleCliNamed and use it for `createwallet` doc
rpc: Add HelpExampleRpcNamed
Move MakeNoLogFileContext to common libtest_util, and use it in bench
guix: Update darwin native packages dependencies
doc: install qt5 when building on macOS
test: bring p2p_leak.py up to date.
fuzz: Add FUZZED_SOCKET_FAKE_LATENCY mode to FuzzedSock to allow for fuzzing timeout logic
fuzz: Add fuzzing harness for Socks5(...)
doc: Remove outdated comment
build: Make AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER]) unconditional
util: Avoid invalid integer negation in ValueFromAmount: make ValueFromAmount(const CAmount& n) well-defined also when n is std::numeric_limits<CAmount>::min()
util: Avoid invalid integer negation in FormatMoney: make FormatMoney(const CAmount& n) well-defined also when n is std::numeric_limits<CAmount>::min()
Make .gitignore ignore src/test/fuzz/fuzz.exe
tests: Add fuzzing harness for TorController
torcontrol: Move TorControlReply, TorControlConnection and TorController to improve testability
txorphanage: comment improvements
build: set Unicode true for NSIS installer
doc: Update build instructions for Fedora
validation: Use *this in CChainState::InvalidateBlock
validation: Move LoadBlockIndexDB to CChainState
validation: Move invalid block handling to CChainState
validation: Pass in chainstate to CVerifyDB::VerifyDB
validation: Remove global ::VersionBitsTip{State,SinceHeight,Statistics}
validation: Pass in chainstate to ::PruneBlockFilesManual
validation: Pass in chainstate to UpdateTip
net: Do not skip the I2P network from GetNetworkNames()
net: recognize I2P from ParseNetwork() so that -onlynet=i2p works
net: accept incoming I2P connections from CConnman
net: make outgoing I2P connections from CConnman
net: add I2P to the reachability map
init: introduce I2P connectivity options
net: implement the necessary parts of the I2P SAM protocol
net: extend Sock with a method to check whether connected
net: extend Sock with methods for robust send & read until terminator
Correction for VerifyTaprootCommitment comments
net: extend Sock::Wait() to report a timeout
net: dedup MSG_NOSIGNAL and MSG_DONTWAIT definitions
net: move the constant maxWait out of InterruptibleRecv()
net: extend CNetAddr::SetSpecial() to support I2P
net: avoid unnecessary GetBindAddress() call
net: isolate the protocol-agnostic part of CConnman::AcceptConnection()
net: get the bind address earlier in CConnman::AcceptConnection()
net: check for invalid socket earlier in CConnman::AcceptConnection()
util: fix WriteBinaryFile() claiming success even if error occurred
util: fix ReadBinaryFile() returning partial contents
util: extract {Read,Write}BinaryFile() to its own files
guix, doc: Update default HOSTS value
guix: Add curl to required tool list
build: fix libnatpmp macos cross compile
zmq test: fix sync-up by matching notification to generated block
build: adds switch for disabling random base addresses in MSVC
Hoist repeated translated strings to RPCConsole struct members
RPCConsole::updateDetailWidget: convert strings to translated strings
rpc: document optional fields for getchaintxstats result
net_processing: move AddToCompactExtraTransactions into PeerManagerImpl
scripted-diff: Update txorphanage naming convention
txorphanage: Move functions and data into class
txorphanage: Extract EraseOrphansForBlock
net_processing: drop AddOrphanTx
denialofservices_tests: check txorphanage's AddTx
txorphanage: Extract OrphanageAddTx
txorphanage: Extract GetOrphanTx
txorphanage: Extract HaveOrphanTx
txorphanage: Extract AddChildrenToWorkSet
txorphanage: Add lock annotations
txorphanage: Pass uint256 by reference instead of value
move-only: Add txorphanage module
script: Add explanatory comment to tc.sh
allow darkmode on macos build
Allow icon colorization on mac os to better support dark mode
test: remove unneeded node from feature_blockfilterindex_prune.py
test: improve assertions in feature_blockfilterindex_prune.py
gui: add "Last Block" (CNodeStats::nLastBlockTime) to peer details
gui: add "Last Tx" (CNodeStats::nLastTXTime) to peer details
qt: add RPCConsole::TimeDurationField helper, call systime only once
test: Add feature_taproot.py --previous_release
test: move releases download incantation to README
test: previous releases: add v0.20.1
rpc: Properly document submitblock return value
rpc: Properly document getblocktemplate return value
rpc: Properly document scantxoutset return value
rpc: Properly document gettxout return value
guix: Bump glibc and linux-headers
guix: Rebase on 95aca2991b (1.2.0-12.dffc918)
test: Replace accidentally placed bit-OR with logical-OR
qt: Rename "Edit label" to "Edit address label"
Revert "qt: Remove Transactionview Edit Label Action"
build: Bump minimum Qt version to 5.9.5
wallet: fix doc typo in signer option
guix: Explicitly set umask in build container
qt: Disable requests context menu actions when appropriate
doc: add external-signer.md
rpc: send: support external signer
rpc: signerdisplayaddress
wallet: ExternalSigner: add GetDescriptors method
wallet: add GetExternalSigner()
test: external_signer wallet flag is immutable
rpc: add external_signer option to createwallet
rpc: signer: add enumeratesigners to list external signers
rpc: add external signer RPC files
wallet: add ExternalSignerScriptPubKeyMan
wallet: add external_signer flag
test: add external signer test
wallet: add -signer argument for external signer command
qt: Prevent the main window popup menu
wallet: listdescriptors uses normalized descriptor form
assumptions: check C++17 assumption with MSVC
assumptions: assume a C++17 compiler
qt: Add Copy Address Action to Payment Requests
guix: Passthrough SDK_PATH into container
qt: Make warning label look clickable
validation: Remove global ::{{Precious,Invalidate}Block,ResetBlockFailureFlags}
validation: Remove global ::LoadGenesisBlock
validation: Check chain tip is non-null in CheckFinalTx
build: make HAVE_O_CLOEXEC available outside LevelDB (bugfix)
init: only use pipe2 if availabile, check in configure
scripted-diff: Rename MakeFuzzingContext to MakeNoLogFileContext
scripted-diff: Rename PROVIDE_MAIN_FUNCTION -> PROVIDE_FUZZ_MAIN_FUNCTION
doc: Clarify that squashing should happen before review
qt, refactor: Use enum type as switch argument in TransactionTableModel
qt, refactor: Use enum type as switch argument in PeerTableModel
qt, refactor: Use enum type as switch argument in BanTableModel
qt, refactor: Use enum type as switch argument in AddressTableModel
guix: only download sources for hosts being built
contrib: run test-symbol check for RISCV
gui: Add monospaced font settings
qt: Choose monospaced font in C++ code rather in `*.ui` file
qt: Make GUIUtil::fixedPitchFont aware of embedded font
gui: Add Roboto Mono font
test: framework: add skip_if_no_external_signer
configure: add --enable-external-signer
test: Avoid connecting to real network when running tests
test: Assume node is running in subtests
test: Intermittent issue in feature_blockfilterindex_prune
ci: Avoid invoking curl on the host
guix: Update conservative space requirements
guix: Add support for powerpc64{,le}
build: Add /opt/homebrew to path to look for boost libraries
style-only: Make AcceptToMemoryPool signature readable
style-only: Make CheckSequenceLock signature readable
validation: Use *this in CChainState::LoadMempool
validation: Pass in chainstate to UpdateMempoolForReorg
validation: Pass in chainstate to CTxMemPool::removeForReorg
validation: Pass in chain to ::TestLockPointValidity
validation: Remove old AcceptToMemoryPool w/o chainstate param
scripted-diff: Invoke ::AcceptToMemoryPool with chainstate
test: Make test actually test something
test: pep8 touched test
validation: Pass in chainstate to ::AcceptToMemoryPool
validation: Pass in chainstate to ::LoadMempool
validation: Pass in chainstate to AcceptToMemoryPoolWithTime
validation: Add chainstate member to MemPoolAccept
validation: Pass in chainstate to ::CheckSequenceLocks
validation: Remove old CheckFinalTx w/o chain tip param
scripted-diff: Invoke ::CheckFinalTx with chain tip
validation: Pass in chain tip to ::CheckFinalTx
validation: Pass in coins tip to CheckInputsFromMempoolAndCache
validation: Pass in chainstate to IsCurrentForFeeEstimation
validation: Pass in coins cache to ::LimitMempoolSize
Avoid comparision of integers with different signs
guix: Jump forwards in time-machine and adapt
guix: Supply --keep-failed for debugging
log: Clarify log message when file does not exist
gui: display BIP152 high bandwidth relay in peer details
gui: display fRelayTxes in peer details
[tools] Allow argument/parameter bin packing in clang-format
[net] Move checks from GetLocalAddrForPeer to caller
[net] Change AdvertiseLocal to GetLocalAddrForPeer
qt: Remove Transactionview Edit Label Action
[doc] Add a note about where lock annotations should go.
[validation] Move the lock annotation from function definition to declaration
doc: nChainTx needs to become a 64-bit earlier due to SegWit
cli: update -netinfo help doc following the merge of 882ce251
cli: small -netinfo simplification and performance improvement
cli: improve -netinfo invalid argument error message
cli: warn in help that -netinfo is not intended to be a stable API
cli: enable -netinfo help to run without a remote server
test: Move P2WSH_OP_TRUE to shared test library
[test] Check user agent string from test framework connections
[test] Add P2P_SERVICES to p2p.py
[test] Move MY_RELAY to p2p.py
[test] Move MY_SUBVERSION to p2p.py
[test] Move MY_VERSION to p2p.py
[test] Move MIN_VERSION_SUPPORTED to p2p.py
doc: Rework internal and external links
util: Use std::chrono for time getters
time: add runtime sanity check
build: actually stop configure if Boost isn't available
build: explicitly install libboost-dev package
build: remove mostly pointless BOOST_PROCESS macro
test: disallow sendtoaddress/sendmany when private keys disabled
Disallow sendtoaddress and sendmany when private keys disabled
[doc / util] Use comments to clarify time unit for int64_t type.
[util] Introduce a SetMockTime that takes chrono time
[util] Change GetMockTime to return chrono type instead of int
[test] Throw error instead of segfaulting in failure scenario
[test] Introduce a unit test helper to create a valid mempool transaction.
guix: Passthrough BASE_CACHE into container
test: Speed up rpc_blockchain.py by removing miniwallet.generate()
test: Change address type from P2PKH to P2WSH in rpc_blockchain
test: Cache 25 mature coins for ADDRESS_BCRT1_P2WSH_OP_TRUE
test: Remove unused bug workaround
test: Start only the number of nodes that are needed
net: Log to net debug in MaybeDiscourageAndDisconnect except for noban and manual peers
Add "index/blockfilterindex -> validation -> index/blockfilterindex" to expected circular dependencies
Add functional test for blockfilterindex in prune-mode
Add debug startup parameter -fastprune for more effective pruning tests
Avoid pruning below the blockfilterindex sync height
faster HexStr => 13% faster blockToJSON
cli: Treat high detail levels as the maximum in -netinfo
scripted-diff: rename ping members
[net processing] Move ping data fields to net processing
[net processing] Move ping timeout logic to net processing
[net processing] Move send ping message logic into function
[net] Add RunInactivityChecks()
[net processing] Add Peer& arg to MaybeDiscourageAndDisconnect()
fuzz: Remove expensive and redundant muhash from crypto fuzz target
scripted-diff: Remove shadowing lock annotations
Add benchmark to write JSON into a string
Re-add dead code detection
net: remove CNode::m_inbound_onion defaults for explicitness
net: make CNode::m_inbound_onion public, drop getter, update tests
doc/bips: Add BIPs 43, 44, 49, and 84
[test] Use mocktime in test_seed_peers()
[refactor] Correct log message in net.cpp
doc: Guix is shipped in Debian and Ubuntu
doc: remove potentially confusing ChainstateManager comment
test: Add tests with maleated snapshot data
tests: add snapshot activation test
tests: add deterministic chain generation unittest fixture
move-onlyish: break out CreateUTXOSnapshot from dumptxoutset
txdb: don't reset during in-memory cache resize
simplify ChainstateManager::SnapshotBlockhash() return semantics
chainparams: add allowed assumeutxo values
build: consolidate reduced export checks
test: fix sign comparison warning in socket tests
build: add building libconsensus to end-of-configure output
build: remove ax_gcc_func_attribute macro
build: remove AX_GCC_FUNC_ATTRIBUTE test for dllimport
build: test for __declspec(dllexport) in configure
build: remove duplicate visibility attribute detection
[p2p] No delay in adding fixed seeds if -dnsseed=0 and peers.dat is empty. Add -fixedseeds arg.
fuzz: version handshake
Avoid accessing nullpointer in BaseIndex::GetSummary()
Allow blockfilter in conjunction with prune
test: add Sock unit tests
fuzz: Fail if message type is not fuzzed
fuzz: Count message type fuzzers before main()
contrib/init: (OpenRC) quote some unquoted variables.
contrib/init: (OpenRC) Do not fail if both rpcuser and rpcpassword are unset.
log: Move "Pre-allocating up to position 0x[...] in [...].dat" log message to debug category
log: Move "Leaving block file [...]: [...]" log message to debug category
style: rename hSocket to sock
net: use Sock in InterruptibleRecv() and Socks5()
net: add RAII socket and use it instead of bare SOCKET
net: move CloseSocket() from netbase to util/sock
net: move MillisToTimeval() from netbase to util/time
Deduplicate some block-to-JSON code.
ci: Re-run wine tests once if they fail
Add EditorConfig file.
validation: don't try to invalidate genesis block
zmq test: speedup test by whitelisting peers (immediate tx relay)
zmq test: fix flakiness by using more robust sync method
zmq test: accept arbitrary sequence start number in ZMQSubscriber
zmq test: dedup message reception handling in ZMQSubscriber
ci: Properly bump to focal for win cross build
wallet: load flags before everything else
test: remove unused function xor_bytes
script: Make LXC container size suitable for gitian builds
[refactor] improve style for touched code
[refactor] const ATMPArgs and non-const Workspace
[refactor] return MempoolAcceptResult
Change BOOST_CHECK to BOOST_CHECK_EQUAL to see mismatched values when a check fails.
test: remove unnecessary assignment in bdb
ci: use Ubuntu Focal for macOS cross build
[refactor] txmempool: split epoch logic into class
test: remove assert_blockchain_height
build: Disable --disable-fuzz-binary for guix builds
build: Disable --disable-fuzz-binary for gitian builds
fuzz: Hide script_assets_test_minimizer
test: remove type: comments in favour of actual annotations
docs: correctly identify script type
gui: update to "Direction/Type" peer details name/tooltip
gui: add "Type" column to Peers main window
gui: allow ConnectionTypeToQString to prepend direction optionally
contrib/signet/miner: remove debug code
bitcoin-util: use AddCommand / GetCommand
contrib/signet/README.md: Update miner description
contrib/signet/miner: Automatic timestamp for first block
contrib/signet/miner: --grind-cmd is required for calibrate
build: build fuzz tests by default.
test: fix timeout decrease in feature_assumevalid
[doc] clarify -peertimeout and -timeout descriptions
refactor: Treat ArgsManager::Flags as uint32_t explicitly
fix the unreachable code at feature_taproot
fuzz: Configure check for main function (take 2)
doc: Replace tabs for spaces
Introduce GetUniquePath(base) helper method to replace boost::filesystem::unique_path() which is not available in std::filesystem.
fuzz: Avoid extraneous copy of input data, using Span<>
depends: Include GUIX_ENVIRONMENT in id string
depends: Improve id string robustness
build: Proper quoting for var printing targets
gitian: remove execstack workaround for ricv64 & powerpc64le
build: use focal in gitian descriptors
netinfo: display only outbound block relay counts
netinfo: add i2p network
netinfo: add bip152 high-bandwidth to/from fields
netinfo: display manual peers count
netinfo: update to use peer connection types
Verify that all validation flags are backward compatible
[test] check verification flags are minimal/maximal
[test] Check for invalid flag combinations
[refactor] use CheckTxScripts, TrimFlags, FillFlags
Apply minimal validation flags to tx_invalid tests
[test] add BADTX setting for invalid txns that fail CheckTransaction
[test] fix two witness tests in invalid tests with empty vout
Apply maximal validation flags to tx_valid tests
[test] fix CSV test missing OP_ADD
[test] remove unnecessary OP_1s from CSV and CLTV tests
[refactor] clean up logic in testmempoolaccept
netinfo: add ConnectionTypeForNetinfo member helper function
doc: refer to BIPs 339/155 in feature negotiation
build: make macOS HOST in download-osx generic
util: Disallow negative mocktime
net: Avoid UBSan warning in ProcessMessage(...)
Add release notes for listdescriptors RPC
ci: remove boost thread installation
build: don't build or use Boost Thread
refactor: replace Boost shared_mutex with std shared_mutex in sigcache
refactor: replace Boost shared_mutex with std shared_mutex in cuckoocache tests
validation: Guard all chainstates with cs_main
init: use GetNetworkNames() in -onlynet help
rpc: use GetNetworkNames() in getnetworkinfo and getpeerinfo helps
net: create GetNetworkNames()
net: update NET_UNROUTABLE to not_publicly_routable in GetNetworkName()
scripted-diff: Remove setup_clean_chain if default is not changed
doc: Improve setup_clean_chain documentation
build: Add -Werror=mismatched-tags
doc: More precise -debug and -debugexclude doc
Drop boost/preprocessor dependencies
refactor: Move STRINGIZE macro to macros.h
refactor: replace sizeof(a)/sizeof(a[0]) by std::size (C++17)
refactor: init vectors via std::{begin,end} to avoid pointer arithmetic
qt: Save/restore recentRequestsView table column sizes
qt: Move recentRequestsView properties settings to constructor
qt: Save/restore TransactionView table column sizes
qt: Move transactionView properties settings to constructor
qt, refactor: Drop intermediate assignment
refactor: iterate arrays via C++11 range-based for loops if idx is not needed
test: Add test for deterministic UTXO set hash results
test: Add test for gettxoutsetinfo RPC with MuHash
gui: display plain "Inbound" in peer details
rpc: Add hash_type MUHASH to gettxoutsetinfo
refactor: Separate hash and stats calculation in coinstats
fuzz: Avoid designated initialization (C++20) in fuzz tests
Remove pointer cast in CRPCTable::dumpArgMap
refactor: Add RPC server ExecuteCommands function
refactor: Replace JSONRPCRequest fHelp field with mode field
net_processing: simplify MaybeSetPeerAsAnnouncingHeaderAndIDs args
net_processing: move MaybeSetPeerAsAnnouncingHeadersAndIDs into PeerManagerImpl
net_processing: simplify ProcessGetData and FindTxForGetData args
net_processing: move FindTxForGetData and ProcessGetData to PeerManagerImpl
net_processing: simplify PeerManageImpl method args
net_processing: move MarkBlockAs*, TipMayBeStale, FindNextBlocksToDL to PeerManagerImpl
net_processing: simplify AlreadyHaveTx args
net_processing: move AlreadyHaveTx into PeerManageImpl
net_processing: move some globals into PeerManagerImpl
[addrman] Don't repeat "Bucketing method was updated" log multiple times
[addrman] Improve serialization comments
doc: Document use of make-tag script to make tags
refactor: remove boost::thread_group usage
peers-tab: bug fix right panel toggle
bitcoin-cli: Correct docs (no "generatenewaddress" exists)
rpc, test: document {previous,next}blockhash as optional
style-only: Remove redundant sentence in ActivateBestChain comment
style-only: Make TestBlockValidity signature readable
validation: Use accessible chainstate in ChainstateManager::ProcessNewBlock
validation: Use existing chainstate in ChainstateManager::ProcessNewBlockHeaders
validation: Move LoadExternalBlockFile to CChainState
validation: Remove global ::ActivateBestChain
validation: Pass in chainstate to ::NotifyHeaderTip
validation: Pass in chainstate to TestBlockValidity
validation: Make CChainState.m_blockman public
validation: Pass in blockman to ContextualCheckBlockHeader
validation: Move GetLastCheckpoint to BlockManager
validation: Move GetSpendHeight to BlockManager
validation: Move FindForkInGlobalIndex to BlockManager
validation: Remove global LookupBlockIndex
scripted-diff: Use BlockManager::LookupBlockIndex
validation: Move LookupBlockIndex to BlockManager
validation: Guard the active_chainstate with cs_main
Improve gui/src/qt README.md
fuzz: Disable shuffle when merge=1
rpc: Return total fee in mempool
rpc: Remove duplicate name and argNames from CRPCCommand
rpc: Use RPCHelpMan for check-rpc-mappings linter
rpc: [refactor] Use concise C++11 code in CRPCConvertTable constructor
net_processing: log txrelay flag from version message
net: use peer=N instead of from=N in debug log
net_processing: additional debug logging for ignored messages
net: make debug logging conditional on -debug=net
net, net_processing: log disconnect reasons with -debug=net
qt: Save/restore RPCConsole geometry only for window
wallet, rpc: add listdescriptors command
tests: Disable bdb dump test when no bdb
Require legacy wallet for wallet_upgradewallet.py
Explicitly mark legacy wallet tests as such
Setup wallets for interface_zmq.py
Use MiniWallet in rpc_net.py
Setup wallets for interface_bitcoin_cli.py
Setup wallets with descriptors for feature_notifications
Have feature_filelock.py test both bdb and sqlite, depending on compiled
Disable upgrades tests that require BDB if BDB is not compiled
Disable wallet_descriptor.py bdb format check if BDB is not compiled
tests: Don't make any wallets unless wallet is required
Skip legacy wallet reliant tests if BDB is not compiled
tests: Set descriptors default based on compilation
doc: update tor.md manual config, move after automatic config
ci: Fuzz with integer sanitizer
Add information to "Confirm fee bump" window
refactor: remove straggling boost::mutex usage
fuzz: Add UBSan suppressions needed for fuzz tests to not warn under -fsanitize=integer
fuzz: Avoid -fsanitize=integer warnings in fuzzing harnesses
doc: update/improve automatic tor section of tor.md
doc: update -proxy, -onion and -onlynet info in tor.md
doc: update -onlynet help in src/init.cpp
raise helpMessageDialog
rpc: Add specific error code for "wallet already loaded"
gitian-linux: Extend noexec-stack workaround to powerpc
gitian-linux: Build binaries for 64-bit POWER
gitian-keys: Add signer aliases, some historical keys
refactor: Improve encapsulation between MuHash3072 and Num3072
Better error messages for invalid addresses
Add documentation to contrib folder
Add Message Capture Test
Add capture parser
Call CaptureMessage at appropriate locations
Add CaptureMessage
fuzz: Avoid initializing version to less than MIN_PEER_PROTO_VERSION
fuzz: move-only FillNode implementation to cpp file
test: store subversion (user agent) as string in msg_version
doc: add instructions for generating RPC docs
gitian-keys: add CoinForensics key
[docs] Update developer notes to discourage very long lines
doc: add xorriso to macOS depends packages
util: Add ArgsManager::GetCommand() and use it in bitcoin-wallet
refactor: Move all command dependend checks to ExecuteWalletToolFunc
test: Add tests
wallet: [refactor] Pass ArgsManager to WalletAppInit
guix: README: Add darwin HOSTS entry
guix: Check for macOS SDK before building anything
guix: Set ZERO_AR_DATE for darwin build determinism
build: Make xorrisofs reproducible with -volume_date
guix: Add support for darwin builds
build: Add var printing target to src/Makefile.am
fuzz: Initialize a full TestingSetup where appropriate
fuzz: Consolidate fuzzing TestingSetup initialization
zmq: deduplicate 'sequence' publisher message creation/sending
test: Work around libFuzzer deadlock
locks: Annotate CTxMemPool::check to require cs_main
test: check that getblockfilter RPC fails without block filter index
qt: drop workaround for QTBUG-42503 which was fixed in Qt 5.5.0
gitian: Properly quote arguments in wrappers
Support glibc-back-compat on 64-bit POWER
doc: Add developer documentation to isminetype
[net] Cleanup InactivityChecks() and add commenting about time
GUI: Write PSBTs to file with binary mode
[addrman] Improve variable naming/code style of touched code.
[addrman] Don't rebucket new table entries unnecessarily
[addrman] Rename asmap version to asmap checksum
[addrman] Improve variable naming/code style of touched code.
Change type definitions for "chain" and "setup_clean_chain" from type comments to Python 3.6+ types. Additionally, set type for "nodes".
Clean PushMessage and ProcessMessages
lint: Skip whitespace lint for guix patches
guix: Make nsis reproducible by respecting SOURCE-DATE-EPOCH
wallet: Add BerkeleyDB version sanity check at init time
zmq test: deduplicate test setup code (node restart, topics subscription)
rpc: document RPC_TRANSACTION_ALREADY_IN_CHAIN exception
Replace fs::absolute calls with AbsPathJoin calls
test: Clear forced -walletdir setting after wallet init_tests
log: Prefix log messages with function name if -logsourcelocations is set
build: fix RELOC_SECTION security check for bitcoin-util
build: improve macro for testing -latomic requirement
add std::atomic include to bitcoin-util.cpp
doc: Add historic 0.21.0 release notes
validation: remove redundant check on pindex
[net] InactivityCheck() takes a CNode reference
fuzz: Use mocktime in process_message* fuzz targets
Add include for std::bind.
rpc: Return wtxid from testmempoolaccept
doc, rpc: add missing signet mentions in network name lists
doc: Add manual page generation for bitcoin-util
[doc] for CheckInputsFromMempoolAndCache
lock annotations for MemPoolAccept functions
contrib/signet: Document miner script in README.md
contrib/signet: Add script for generating a signet chain
Add bitcoin-util command line utility
fuzz: Introduce CallOneOf helper to replace switch-case
contrib: embed C++11 patch in install_db4.sh
doc: update ConnectionType Doxygen documentation
gui: improve markup handling of connection type tooltip
gui: return inbound {full, block} relay type in peer details
test: add test for banning of non-IP addresses
net: allow CSubNet of non-IP networks
refactor, net: Increase CNode data member encapsulation
refactor, move-only: Relocate CNode private members
net_processing: move Peer definition to .cpp
net_processing: move PeerManagerImpl into cpp file
net_processing: split PeerManager into interface and implementation classes
net_processing: make more of PeerManager private
net, net_processing: move NetEventsInterface method docs to net.h
rpc: move getpeerinfo connection_type help to correct place
gui: improve connection type tooltip
gui: replace Direction with Connection Type in peer details
doc: Add explicit macdeployqtplus dependencies install step
Remove deprecated bumpfee behavior
guix: Print build params inside/outside of container
guix: Move DISTSRC determination to guix-build.sh
guix: Move OUTDIR determination+creation to guix-build.sh
guix: Add more sanity checks to guix-build.sh
guix: Add section headings to guix-build.sh
genbuild: Specify rev-parse length
docs: Point to contrib/guix/README.md in doc/guix.md
guix: Small updates to README wording
guix: Update HOSTS README entry for new architectures
guix: Remove README development environment section
guix: Add ADDITIONAL_GUIX_{COMMON,TIMEMACHINE}_FLAGS options
guix: Add SUBSTITUTE_URLS option
guix: Make guix honor MAX_JOBS setting
script: Add Documentation key to bitcoind.service
script: Improve robustness of bitcoind.service on startup
qt: Stop the effect of hidden widgets on the size of QStackedWidget
gui: create GUIUtil::ConnectionTypeToQString utility function
qt: Use "fusion" style on macOS Big Sur with old Qt
fuzz: Add missing muhash registration
test: Replace getmempoolentry with testmempoolaccept in MiniWallet
gitian: Remove codesign_allocate and pagestuff from MacOS build
gitian: use signapple to create the MacOS code signature
gitian: use signapple to apply the MacOS code signature
gitian: install signapple in gitian-osx-signer.yml
depends: Add comment about cache invalidation
depends: Fully determine path for darwin cctools
depends: Fully determine path for darwin_{CC,CXX}
depends: Quote to prevent word splitting in config.site
depends: Remove -fuse-ld line
depends: Pin clang search paths for darwin host
depends: Delay expansion of per-package vars
test: run mempool_compatibility.py even with wallet disabled
[test] Test the add_outbound_p2p_connection functionality
[test] P2PBlocksOnly - Test block-relay-only connections.
[test/refactor] P2PBlocksOnly - Extract transaction violation test into helper.
[test/refactor] P2PBlocksOnly - simplify transaction creation using blocktool helper.
[test] Add test framework support to create outbound connections.
[rpc/net] Introduce addconnection to test outbounds & blockrelay
fuzz: net permission flags in net processing
doc: Add release notes
doc: Add libnatpmp stuff
ci: Add libnatpmp-dev package to some builds
gui: Add NAT-PMP network option
net: Add -natpmp command line option
net: Add NAT-PMP to port mapping loop
net: Add libnatpmp support
gui: Apply port mapping changes on dialog exit
scripted-diff: Rename UPnP stuff
net: Add flags for port mapping protocols
net: Keep trying to use UPnP when -upnp=1
refactor: Replace magic number with named constant
refactor: Move port mapping code to its own module
net: Remove unused cs_feeFilter
Expose integral m_conn_type in CNodeStats, remove m_conn_type_string
net: Move SocketSendData lock annotation to header
net: Move CConnman/NetEventsInterface after CNode in header file
qt: Use layout manager for Create Wallet dialog
gitian-keys: add miketwenty1 key
netinfo: add user help documentation
qt: Add TransactionOverviewWidget class
gitian-keys: add key for guggero
Replace boost::variant with std::variant
gitian-keys: add darosior's key
Revert "Add patch to make codesign_allocate compatible with Apple's"
[mempool] Remove error suppression on upgrade
Add gitian PGP key for theStack
Add benthecarman to keys.txt
test: Add sanitizer suppressions for AMD EPYC CPUs
doc: fix various typos
doc: Use https URLs where possible
refactor: Use C++17 std::array deduction for ALL_FEE_ESTIMATE_HORIZONS
fuzz: bolster ExtractDestination(s) checks
refactor: Use C++17 std::array deduction for OUTPUT_TYPES
qt: Follow Qt docs when implementing rowCount and columnCount
lint: ignore gitian keys file for spelling linter
lint: update list of spelling linter false positives
[net] Add cs_vSend lock annotations
[net] Move RecordBytesSent() call out of cs_vSend lock
doc: update developer notes for signet
fuzz: Use ConsumeWeakEnum for ServiceFlags
fuzz: Add ConsumeWeakEnum helper, Extract ALL_NET_PERMISSION_FLAGS
fuzz: [refactor] Extract ALL_CONNECTION_TYPES constant
fuzz: Use ConsumeNode in process_message target
fuzz: Use ConsumeNode in process_messages target
test: bump codespell linter version to 2.0.0
refactor: Remove nMyStartingHeight from CNode/Connman
rpc: Replace boost::variant with std::variant for RPCArg.m_fallback
scripted-diff: Bump copyright headers
Remove redundant MakeUCharSpan wrappers
Remove CDataStream::Init in favor of C++11 member initialization
fuzz: Remove duplicate ALL_OUTPUT_TYPE array
fuzz: Bump FuzzedDataProvider.h
qt, refactor: Drop no longer used PeerTableModel::getNodeStats function
qt: Use PeerTableModel::StatsRole
qt: Add PeerTableModel::StatsRole
doc: Update license year range to 2021
fuzz: check that certain script TxoutType are nonstandard
p2p: remove unused legacyWhitelisted variable
Update 'Secure string handling'
fuzz: remove no-longer-necessary packages from fuzzbuzz config
lint: run mypy over contrib/devtools
fuzz: Add coverage for CDataStream consumer
gui: display network in peer details
gui: rename peer tab column headers, initialize in .h
gui: add network column in peers tab/window
gui: fix broken doxygen formatting in src/qt/guiutil.h
gui: create GUIUtil::NetworkToQString() utility function
net, rpc: change CNodeStats::m_network from string to Network
[doc] Add release notes for removed getpeerinfo fields.
[rpc] Remove deprecated "whitelisted" field from getpeerinfo
[rpc] Remove deprecated "banscore" field from getpeerinfo
[rpc] Remove deprecated "addnode" field from getpeerinfo
refactor: Enable -Wswitch for FeeEstimateHorizon
qt: Save QSplitter state in QSettings
Add a test that selects too large if BnB is used
fuzz: Check that NULL_DATA is unspendable
test: Set correct nValue for multi-op-return policy check
doc: [test] Remove outdated comment in fuzz runner
util: Log static plugins meta data and style
[doc] Add permissions to the getpeerinfo help.
test: Add race:SendZmqMessage tsan suppression
Update TSan suppressions
[net processing] Remove dropmessagestest
qa: Correct epoll_ctl data race suppression
test: Change MuHash Python implementation to match cpp version again
fuzz: Add MuHash consistency fuzz test
fuzz: Update FuzzedDataProvider.h from upstream (LLVM)
test: Add MuHash3072 fuzz test
bench: Add Muhash benchmarks
test: Add MuHash3072 unit tests
crypto: Add MuHash3072 implementation
rpc: Add missing description of vout in getrawtransaction help text
test: Add missing assignment in mempool_resurrect.py
script: Remove outdated extract-osx-sdk.sh
contrib: remove verify.sh
contrib: binary verification script verify.sh rewritten in python
ci: Print COMMIT_RANGE to the log as it was in Travis CI
ci: Drop Travis-specific workaround for shellcheck
ci: Drop Travis-specific way to set COMMIT_RANGE variable
inline non-member functions with body in fuzzing headers
crypto: Add Num3072 implementation
build: Check for 128 bit integer support
build: more robustly check for fcf-protection support
[net processing] Guard m_continuation_block with m_block_inv_mutex
[net processing] Move hashContinue to net processing
scripted-diff: rename vBlockHashesToAnnounce and vInventoryBlockToSend
[net processing] Move block inventory data to Peer
[net processing] Rename nStartingHeight to m_starting_height
[net processing] Move nStartingHeight to Peer
[net processing] Improve documentation for Peer destruction/locking
Replace boost::optional with std::optional
Remove unused MakeOptional
psbt: Assert that tx has a value in UpdatePSBTOutput
ci: Install missing lint packages
test: run mempool_resurrect.py even with wallet disabled
qt: Align layout of checkboxes
doc: Drop mentions of Travis CI as it is no longer used
ci: Drop travis_fold feature as Travis CI is no longer used
wallet: Add missing check for -descriptors wallet tool option
test: Add missing check for is_sqlite_compiled
Clean up logging of outbound connection type
net: add CNode::IsInboundOnion() public getter and unit tests
net: assert CNode::m_inbound_onion is inbound in ctor
test, fuzz: fix constructing CNode with invalid inbound_onion
wallet: Pass ArgsManager into ExecuteWalletToolFunc instead of using global
fuzz: replace CNode code with fuzz/util.h::ConsumeNode()
build: Define .INTERMEDIATE target once only
doc: Convert depends options list from html to markdown
ci: Only use credits for pull requests to the main repo
ci: Use cpu=1 for linter
doc: update -externalip documentation in tor.md
doc: add tor.md section on how to get tor info via bitcoind
doc: update tor.md address examples from onion v2 to v3
doc: Remove shouty enums in net_processing comments
tests: Test bitcoin-wallet dump and createfromdump
wallettool: Add createfromdump command
wallettool: Add dump command
build: remove cdrkit package from depends
build: Replace genisoimage with xorriso
fuzz: Fill various small fuzzing gaps
doc: warn that incoming conns are unlikely when not using default ports
fuzz: Call SendMessages after ProcessMessage to increase coverage
depends: Use more legible qmake commands in qt package
depends: Do not set build_subdir for qt package
tests: Add fuzzing harness for node eviction logic
Assert eviction at >= 29 candidates. Assert non-eviction at <= 20 candidates.
test: Add unit testing of node eviction logic
net: Move eviction node selection logic to SelectNodeToEvict(...)
GUI: Define MAX_DIGITS_BTC for magic number in BitcoinUnits::format
Only consider addrv2 peers for relay of non-addrv1 addresses
refactor: add IsAddrCompatible() to CNode
ci: Move linter task to cirrus
init: Signal-safe instant shutdown
Move signet onion seed from v2 to v3
Check if Cjdns address is valid
doc: Move add relay comment in net to correct place
build: Add option --enable-danger-fuzz-link-all
[net processing] Tolerate sendheaders and sendcmpct messages before verack
[net] Make p2p recv buffer timeout 20 minutes for all peers
depends: Drop workaround for a fixed bug in Qt build system
rpc: allow getblocktemplate for test chains when unconnected or in IBD
rpc: update getblocktemplate with signet rule, include signet_challenge
Add patch to make codesign_allocate compatible with Apple's
net: use std::chrono throughout maxOutbound logic
init: set nMaxOutboundLimit connection option directly
net: remove nMaxOutboundTimeframe from connection options
net: remove SetMaxOutboundTimeframe
net: remove SetMaxOutboundTarget
fix misleading comment about call to non-existing function
build: Run libdmg-hfsplus's DMG tool in make deploy
[net processing] Clarify UpdatedBlockTip()
[net processing] Remove unnecesary nNewHeight variable in UpdatedBlockTip()
[net processing] Remove nStartingHeight check from block relay
doc: Update for FreeBSD 12.2, add GUI Build Instructions
[skip ci] sync: Check precondition in LEAVE_CRITICAL_SECTION() macro
sync: Improve CheckLastCritical()
Remove m_is_manual_connection from CNodeState
test: run mempool_expiry.py even with wallet disabled
cirrus: Schedule one task with paid credits for faster CI feedback
Clarify comments around outbound peer eviction
Periodically make block-relay connections and sync headers
Use conn_type to identify block-relay peers, rather than m_tx_relay == nullptr
Simplify and clarify extra outbound peer counting
net: don't relay to the address' originator
test: Use Popen.wait instead of RPC in assert_start_raises_init_error
Move TX_MAX_STANDARD_VERSION to policy
fuzz: Link all targets once
Rewrite OutputGroups to be clearer and to use scriptPubKeys
configure: output notice that test binary is disabled by fuzzing
Bugfix: GUI: Restore SendConfirmationDialog button default to "Yes"
Remove g_relay_txes
[net processing] Add m_ignores_incoming_txs to PeerManager and use internally
[init] Use MakeUnique<> to construct peerman
[net processing] Add IgnoresIncomingTxs() function to PeerManager
[net processing] Move PushNodeVersion into PeerManager
contrib: add symbol check test for PE
Add regression test for incorrect decoding
test: Add new ChainTestingSetup and use it
qt/test: [FIX] Add forgotten Context setting in RPCNestedTests
build: Update crc32c subtree
Improve heuristic hex transaction decoding
Send and require SENDADDRV2 before VERACK
Remove unused bits from service flags enum
Squashed 'src/crc32c/' changes from 224988680f..b5ef9be675
util: Allow use of C++14 chrono literals
test: Remove no longer needed MakeChain calls
Avoid weak-linked getauxval support on non-linux platforms (like macOS)
Define correct symbols for getauxval
Update net_processing WTXID documentation per BIP339
Don't send 'sendaddrv2' to pre-70016 software
wallet: document that tx in CreateTransaction is purely an out-param
Remove unused and confusing CTransaction constructor
log: Clarify that failure to read fee_estimates.dat is non-fatal
refactor: Replace uses ChainActive() in interfaces/chain.cpp
refactor: Get rid of more redundant chain methods
log: Clarify that failure to write fee_estimates.dat is non-fatal
[net processing] Add RemovePeer()
[net processing] Make GetPeerRef const
[net_processing] Move peer_map to PeerManager
doc: Update wallet database installation guide for macOS
build: Use Homebrew's sqlite package if it is available
tracing: add tracing framework
build: detect sys/sdt.h for eBPF tracing
rpc: Use FeeModes doc helper in estimatesmartfee
[doc] Tidy up Tor doc (more stringent)
Don't declare de facto const reference variables as non-const
Don't declare de facto const member functions as non-const
Make CanFlushToDisk a const member function
Do not run functions with necessary side-effects in assert()
Don't make "in" parameters look like "out"/"in-out" parameters: pass by ref to const instead of ref to non-const
doc: libbitcoinconsensus: add missing error code description, fix NBitcoin link
test: add coverage for passing fee rate as a string
ci: Adjust Cirrus CI task names (follow up)
wallet, bugfix: allow send to take string fee rate values
rpc: Reject empty txids in gettxoutproof
rpc, refactor: Avoid duplicate set lookup in gettxoutproof
sync: Use decltype(auto) return type for WITH_LOCK
wallet: List all wallets in non-SQLite or non-BDB builds
refactor: Consolidate redundant wallet database path and exists functions
refactor: Drop call to GetWalletEnv in wallet salvage code
refactor: Replace ListWalletDir() function with ListDatabases()
MOVEONLY: Move IsBDBFile, IsSQLiteFile, and ListWalletDir
[net processing] Move GetNodeStateStats into PeerManager
build, refactor: Check that Homebrew's qt5 package is actually installed
net: Assume that SetCommonVersion is called at most once per peer
test: pep8 wallet_multiwallet.py
test: Add option to git-subtree-check to do full check, add help
refactor: Use C++17 std::array where possible
Android : Ensure pic build for bdb
build: Check that Homebrew's berkeley-db4 package is actually installed
tests: Test that a fully signed tx given to signrawtx is unchanged
ci: Build with --enable-werror by default, and document exceptions
Clear m_addr_known before our periodic self-advertisement
feestimator: encapsulate estimation file logic
init: don't create a CBlockPolicyEstimator if we don't relay transactions
Remove the remaining fee estimation globals
interface: remove unused estimateSmartFee method from node
contrib: add MACHO tests to symbol-check tests
contrib: Add test for ELF symbol-check
Removed redundant git pull from appveyor config.
Support make src/bitcoin-node and src/bitcoin-gui
depends: Do not force Precompiled Headers (PCH) for building Qt on Linux
Adjusted msvc compiler and linker settings to remove optimisations that are causing sporadic ABI issues on Visual Studio updates.
ci: Adjust cirrus ci task names
ci: no-longer exclude feature_block in TSAN job
refactor: Improve use of explicit keyword
lint: Use c++17 std in cppcheck linter
fuzz: Avoid time-based "non-determinism" in fuzzing harnesses by using mocked GetTime()
Fail if maximum weight is too large
Have CalculateMaximumSignedTxSize also compute tx weight
doc: rename CODEOWNERS to REVIEWERS
build: mac_alias 2.1.1
macdeploy: use Python 3.6
macdeploy: remove runHDIUtil in favor of directly calling subprocess.run
macdeploy: remove existing Bitcoin-Core.dmg if present
macdeploy: move qt_conf to where it's used
macdeploy: consolidate .DS_Store generation
macdeploy: assume plistlib is available
macdeploy: have a single level of logging output
macdeploy: remove add-resources argument
macdeploy: remove codesigning argument
build: automatically determine macOS translations
GUI/Intro: Move prune setting below explanation
GUI/Intro: Estimate max age of backups that can be restored with pruning
Warn when binaries are built from a dirty branch.
qt: unlock wallet "OK" button bugfix
Add [[nodiscard]] to RenameOver(...)
Handle rename failure in DumpMempool(...) by using RenameOver(...) return value
refactor: Replace deprecated Qt::SystemLocale{Short,Long}Date
Mention units of MAX_STANDARD_ policy constants
Mention in validation that IsWitnessStandard tests for P2TR
Clean up assets test minimizer LDFLAGS
Document additional IsWitnessStandard behavior
Add comments on CPubKey::IsValid
Add comments to VerifyTaprootCommitment
Document need_vin_vout_mismatch argument to make_spender
doc: Add bash as an OpenBSD dependency
sync: use HasReason() in double lock tests
sync: const-qualify the argument of double_lock_detected()
sync: print proper lock order location when double lock is detected
Remove NODISCARD
scripted-diff: Use [[nodiscard]] (C++17) instead of NODISCARD
Add MAX_STANDARD_SCRIPTSIG_SIZE to policy
build: Drop unneeded IOKit framework dependency
build: Drop unneeded ApplicationServices framework dependency
qt: Improve comments in WalletController::getOrCreateWallet()
qt: Call setParent() in the parent's context
qt: Add ObjectInvoke template function
Drop noop gcc version checks
This change to the appveyor CI config for msvc builds reverses a change introduced in #19960. It re-applies a setting to inform vcpkg to only build release vesions of the dependencies rather than the default of debug and release.
Add depends qt fix for ARM macs
Move WalletImpl from interfaces/wallet.cpp to wallet/interfaces.cpp
Move ChainImpl from interfaces/chain.cpp to node/interfaces.cpp
Move NodeImpl from interfaces/node.cpp to node/interfaces.cpp
Don't set BDB flags when configuring without
doc: Document current boost dependency as 1.71.0
util: Remove probably misleading TODO
util: Add Assume() identity function
util: Allow Assert(...) to be used in all contexts
test: Add testing of ParseInt/ParseUInt edge cases with leading +/-/0:s
RPC/Wallet: unloadwallet: Allow specifying wallet_name param matching RPC endpoint
RPC/Wallet: unloadwallet: Clarify docs/error when both the RPC endpoint and wallet_name parameter specify a wallet
depends: build qt in c++17 mode
builds: don't pass -silent to qt when building in debug mode
depends: build zeromq with -std=c++17
depends: build Boost with -std=c++17
depends: build bdb with -std=c++17
build: Avoid secp256k1.h include from system
doc: Release note regarding -rpcauth validation
rpc: Validate -rpcauth arguments
rpc: Refactor to process -rpcauth once
depends: boost: Specify cflags+compileflags
depends: boost: Remove unnecessary _archiver_
depends: boost: Cleanup toolset selection
depends: boost: Cleanup architecture/address-model
depends: boost: Disable all compression
depends: boost: Split into non-/native packages
depends: boost: Bump to 1.71.0
depends: boost: Refer to version in URL
Treat CDataStream bytes as uint8_t
refactor: Drop CDataStream constructors in favor of one taking a Span of bytes
Remove unused CDataStream methods
ci: Run i686 centos ci config on cirrus
ci: Run nowallet ci config on cirrus
test: add is_bdb_compiled helper
contrib: Changes to checks for PowerPC64
contrib: Parse ELF directly for symbol and security checks
net: Treat raw message bytes as uint8_t
Use the correct incremental fee constant in bumpfee help
Update feeRate (BTC/kvB) to fee_rate (sat/vB) in wallet_bumpfee
Allow zero-fee fundrawtxn and walletcreatefundedpsbt calls
sanitizers: Add suppression for unsigned-integer-overflow in libstdc++ basic_string.tcc
tests: shrink feature_taproot transfer of funds tx
wallet (not for backport): improve upgradewallet error messages
wallet: fix and improve upgradewallet error responses
wallet: fix and improve upgradewallet result responses
fuzz: Make addrman fuzzing harness deterministic
Update univalue subtree
Squashed 'src/univalue/' changes from 98261b1e7b..98fadc0909
wallet: Do not treat default constructed types as None-type
p2p: Ignore version msgs after initial version msg
p2p: Ignore non-version msgs before version msg
Don't upgrade to HD split if it is already supported
GUI/Intro: Rework UI flow to let the user set prune size in GBs
GUI/Intro: Abstract GUI-to-option into Intro::getPrune
GUI/Intro: Return actual prune setting from showIfNeeded
Drop the leading 0 from the version number
Allow disabling BDB in configure with --without-bdb
GUI: Force descriptor wallets when BDB is not compiled
RPC: Require descriptors=True for createwallet when BDB is not compiled
Enforce salvage is only for BDB wallets
Do not compile BDB things when USE_BDB is defined
Include wallet/bdb.h where it is actually being used
wallet: refactor GetClosestWalletFeature()
Use std::make_unique
build: Require C++17 compiler
build: set minimum supported macOS to 10.14
build: Bump gitian descriptors to 0.22
doc: clean out release notes post branch-off
doc: Remove generated manual pages from master branch
build: Bump master version to 0.21.99
refactor: Change pointer to reference because it can not be null
CConnman: initialise at declaration rather than in Start()
[upgradewallet] removed unused warning param
Break circuit earlier
test: run mempool_spend_coinbase.py even with wallet disabled
qt: Pre-splitoff translations update
qt: Remove redundant BitcoinGUI::setTrayIconVisible
gui: Replace "Hide tray icon" option with positive "Show tray icon" one
ci: Use the previous build worker image in AppVeyor
CI/Cirrus: Skip merge_base step for non-PRs
gui: create wallet: add advanced section
gui: create wallet: name placeholder
Add missing optional.h include
Silence false positive GCC warning
build: remove global_init_link_order from mac qt qmake.conf
build: document preprocessing steps in qt package
build: don't copy Info.plist.* into mkspec for macOS qt build
build: remove plugin_no_soname from mac qt qmake.conf
build: pass XCODE_VERSION through to qt macOS cross compile conf
build: convert "echo" usage into a patch in qt package
test: walettool create descriptors
doc: Add instructions on how to fuzz the P2P layer using Honggfuzz NetDriver
tests: Remove no longer needed UBSan suppression (float-divide-by-zero in validation.cpp)
fix potential devision by 0
fuzz: Use ConsumeRandomLengthBitVector(...) in src/test/fuzz/connman and src/test/fuzz/net
tests: Add fuzzing harness for CAddrMan
wallet: override minfee checks (fOverrideFeeRate) for fee_rate
wallet: update sendtoaddress, send RPC examples with fee_rate
wallet: use MIN_RELAY_TX_FEE in bumpfee help
wallet: provide valid values if invalid estimate mode passed
wallet: update remaining rpcwallet fee rate units to BTC/kvB
wallet: update fee rate units, use sat/vB for fee_rate error messages
Remove references to CreateWalletFromFile
fuzz: Improve coverage for CPartialMerkleTree fuzzing harness
addrman: ensure old versions don't parse peers.dat
wallet: remove fee rates from conf_target helps
wallet: add fee_rate unit warnings to bumpfee
wallet: remove redundant bumpfee fee_rate checks
wallet: introduce fee_rate (sat/vB) param/option
wallet: remove unneeded WALLET_BTC_KB_TO_SAT_B constant
wallet: add CFeeRate ctor doxygen documentation
wallet: fix bug in RPC send options
Avoid signed integer overflow when loading a mempool.dat file with a malformed time field
wallet: fix scanning progress calculation for single block range
test: Suppress epoll_ctl data race
ci: Remove redundant valgrind fuzz task
wallettool: add param to create descriptors wallet
wallettool: pass in DatabaseOptions into MakeWallet
depends: native_ds_store 1.3.0
Replace KeyIDHasher with SaltedSipHasher
Add generic SaltedSipHasher
Move Hashers to util/hasher.{cpp/h}
lint: Also lint files with shellcheck directive
depends: Allow relative CONFIG_SITE path env var
src/randomenv.cpp: fix build on uclibc
fuzz: Assert roundtrip equality for both addrv1 and addrv2 versions of CService
fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CSubNet
swapped "is" for "==" in literal comparison
configure: Support -f{debug,macro}-prefix-map
ci: Run windows ci config on cirrus
ci: Run macos ci config on cirrus
ci: Run arm ci config on cirrus
ci: Replace TRAVIS_OS_NAME with CI_OS_NAME
ci: Move documentation to correct config file
[tests] Recommend f-strings for formatting, update feature_block to use them
Bump minimum python version to 3.6
refactor: Assert before dereference in CWallet::GetDatabase
refactor: Drop redudant CWallet::GetDBHandle
test: Mock IBD in net_processing fuzzers
docs/descriptors.md: Remove hardened marker in the path after xpub
cirrus: Skip tasks on the gui repo main branch
QA: wallet_multiwallet: Check that recursive symlink directory and wallet.dat loops are ignored
Bugfix: Wallet: Soft-fail exceptions within ListWalletDir file checks
fix ecdsa verify in test framework
wallet: Set DatabaseStatus::SUCCESS in MakeSQLiteDatabase
scripted-diff: [build] Ensure source tarball has leading directory name
ci: Set LC_ALL=C to allow running the s390x tests in qemu
travis: Remove s390x build
Set bilingual error completely
fuzz: Assert expected DecodeHexTx behaviour when using legacy decoding
wallet: Remove -upgradewallet from dummywallet
test: Remove unused wallet.dat
tests: Test specific upgradewallet scenarios and that upgrades work
test: Add test_framework/bdb.py module for inspecting bdb files
tests: Add a sha256sum_file function to util
wallet: upgrade the CHDChain version number when upgrading to split hd
wallet: remove nWalletMaxVersion
wallet: have ScriptPubKeyMan::Upgrade check against the new version
fuzz: Add missing ECC_Start to descriptor_parse test
Make it easier to reason about node eviction by removing unused NodeEvictionCandidate::addr (CAddress)
macOS deploy: use the new plistlib API
ci: Run ci configs on cirrus
ci: Bump timeout factor
doc: Clarify that vpindexToConnect is in reverse order
Remove dead CheckForkWarningConditionsOnNewFork
Small improvements to the Taproot functional tests
test: Remove unused unnamed parameter from block.serialize call
Ignoring (but warn) on duplicate -wallet parameters
[net] Consolidate logic around calling CAddrMan::Connected()
Remove redundant p2p lock tacking for tx download functional tests
Add mutation for functional test test_preferred_inv
Add functional test test_txid_inv_delay
test: Makes wtxidrelay support a generic P2PInterface option
fuzz: Check for addrv1 compatibility before using addrv1 serializer on CService
doc: update contrib/seeds/README dnspython installation info
script: fix deprecation warning in makeseeds.py
test: Only try witness deserialize when checking for witness deserialize failure
[wallet] Return object from upgradewallet RPC
Update assumed chain params
tests: Make only desc wallets for wallet_multwallet.py --descriptors
Avoid creating legacy wallets in wallet_importdescriptors.py
Update feature_backwards_compatibility for descriptor wallets
Update wallet_labels.py to not require descriptors=False
tests: Add a --legacy-wallet that is mutually exclusive with --descriptors
Disable some tests for tool_wallet when descriptors
Make raw multisig tests legacy wallet only in rpc_rawtransaction.py
Do addmultisigaddress tests in legacy wallet mode in wallet_address_types.py
Use importdescriptors when in descriptor wallet mode in wallet_createwallet.py
Avoid dumpprivkey and watchonly behavior in rpc_signrawtransaction.py
Add script equivalent of functions in address.py
Add descriptor wallet output to tool_wallet.py
Use separate watchonly wallet for multisig in feature_nulldummy.py
Move import and watchonly tests to be legacy wallet only in wallet_balance.py
Use importdescriptors for descriptor wallets in wallet_bumpfee.py
Avoid dumpprivkey in wallet_listsinceblock.py
Make import tests in wallet_listtransactions.py legacy wallet only
Use a separate watchonly wallet in rpc_fundrawtransaction.py
Update wallet_importprunedfunds to avoid dumpprivkey
doc: fix getchaintxstats fields in release-process.md
docs: Correct getblockstats documentation for (sw)total_weight
refactor: qt: Use vQueueNotifications.clear()
style: minor improvements as a followup to #19845
test: fix creation of std::string objects with \0s
Increase feature_taproot inactive test coverage
Only relay Taproot spends if next block has it active
doc: Document that wallet salvage is experimental
[gui] create wallet: smarter checkbox toggling
Ensure a legacy wallet for BDB format check
Skip --descriptor tests if sqlite is not compiled
rpc: update conf_target helps for correctness/consistency
wallet, rpc: fix send subtract_fee_from_outputs help
wallet: add rpc send explicit fee rate coverage
wallet: add sendtoaddress/sendmany explicit fee rate coverage
wallet: add walletcreatefundedpsbt explicit fee rate coverage
test: refactor for walletcreatefundedpsbt fee rate coverage
wallet: fundrawtx fee rate coverage, fixup ParseConfirmTarget()
qt, wallet: Drop unused parameter in WalletModel::setWalletEncrypted
gui: Remove BDB version from the Information tab
[tests] Remove getnettotals/getpeerinfo consistency test
Squashed 'src/secp256k1/' changes from c6b6b8f1bb..3967d96bf1
Update secp256k1 subtree to latest master
[test] Clarify setup of node topology.
qt: Make transaction notification queue wallet specific
move-only: Define TransactionNotification before  TransactionTablePriv
[move-only, test]: Match test order with run order
wallet: combine redundant bumpfee invalid params and args tests
wallet: improve bumpfee error/help, add explicit fee rate coverage
doc: Update data directory path comments
util: Add StripRedundantLastElementsOfPath function
qt: Pre-splitoff translations update
Avoid test-before-evict evictions of current peers
Refactor test for existing peer connection into own function
Call CAddrMan::Good() on block-relay-only peer addresses
Avoid calling CAddrMan::Connected() on block-relay-only peer addresses
build: fix mutex detection when building bdb on macOS
[net processing] Don't add AlreadyHave txs to recentRejects
fuzz: Check for addrv1 compatibility before using addrv1 serializer
test: Add test for -blockversion
test: Replace ARRAYLEN with C++11 ranged for loop
test: Run AssetTest even if built --with-libs=no
ci: Add --with-libs=no to one ci config
doc: Missing comments for signet parameters
fuzz: Properly initialize PrecomputedTransactionData
qt: Add WalletFrame::sizeHint
cli -netinfo: print oversized/extreme ping times as "-"
cli -netinfo: handle longer tor v3 local addresses
cli -netinfo: make age column variable-width
cli -netinfo: various quick updates and fixes
net: Hardcoded seeds update for 0.21
contrib: Add new versions to makeseeds.py and update gitignore
refactor: remove use of boost::algorithm::replace_first
wallet: fix SetFeeEstimateMode() error message
wallet, bugfix: fix bumpfee with explicit fee rate modes
qt, wallet: Drop unused parameter in Wallet{Frame|View}::encryptWallet
qt, wallet: Remove unused AskPassphraseDialog::Decrypt
refactor: Clean up CTxMemPool initializer list
refactor: Make CTxMemPool::m_check_ratio a const and a constructor argument
refactor: Avoid double to int cast for nCheckFrequency
net: Add compat.h header for htonl function
net: Drop unneeded headers when compat.h included
net: Drop unneeded Windows headers in compat.h
wallet: fix buffer over-read in SQLite file magic check
Convert amounts from float to decimal
test: remove last_{block,header}_equals() in p2p_fingerprint.py
wallet: Make -wallet setting not create wallets
net: fix output of peer address in version message
Use -Wswitch for TxoutType where possible
test: Add missing script_standard_Solver_success cases
Show name, format and if uses descriptors in bitcoin-wallet tool
RPC: createwallet: Nicer error message if descriptor wallet requested and sqlite support not compiled in
GUI: Create Wallet: Nicely disable descriptor wallet checkbox if sqlite support not compiled in
Make sqlite support optional (compile-time)
Bugfix: chainparams: Add missing (disabled) Taproot deployment for Signet
test: Move (dis)?connect_nodes globals into TestFramework as helpers
scripted-diff: test: Replace uses of (dis)?connect_nodes global
test: Replace use of (dis)?connect_nodes globals
tests: Add fuzzing harness for CConnman
Switch to BIP341's suggested scheme for outputs without script
wallet: Add GetClosestWalletFeature function
wallet: Add utility method for CanSupportFeature
p2p: declare Announcement::m_state as uint8_t, add getter/setter
test: add logging for mining_getblocktemplate_longpoll.py
test: remove unused helpers random_transaction(), make_change() and gather_inputs()
test: Default blockversion to 4 in feature_block
test: use MiniWallet for mining_getblocktemplate_longpoll.py
test: Remove unused -blockversion from tests
script: Make ComputeEntrySchnorr and ComputeEntryECDSA const to clarify contract
Initialize default-initialized uint256 consensus params to zero explicitly
doc: add contrib/signet readme
Address functional test nits
docs: mention BIPs 340-342 in doc/bips.md
Reduced number of validations in `tx_validationcache_tests` to keep the run time reasonable.
test: add getnetworkinfo network name regression tests
rpc: update GetNetworksInfo() to not return unsupported networks
net: update GetNetworkName() with all enum Network cases
test: add coverage for getwalletinfo format field
wallet: fix importdescriptor silent fail
doc: Move assumed-values doxygen comments to header
doc: Update wallet files in files.md
rpc, wallet: Expose database format in getwalletinfo
Squashed 'src/secp256k1/' changes from 8ab24e8dad..c6b6b8f1bb
Update libsecp256k1 subtree to latest master
Update wallet_multiwallet.py for descriptor and sqlite wallets
Run dumpwallet for legacy wallets only in  wallet_backup.py
Include sqlite3 in documentation
wallet: Enforce sqlite serialized threading mode
Set and check the sqlite user version
Use network magic as sqlite wallet application ID
Use SQLite for descriptor wallets
walletutil: Wallets can also be sqlite
Determine wallet file type based on file magic
Implement SQLiteDatabase::MakeBatch
Implement SQLiteDatabase::Verify
Implement SQLiteDatabase::Rewrite
Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort
Implement SQLiteDatabase::Backup
Implement SQLiteBatch::StartCursor, ReadAtCursor, and CloseCursor
Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey
Add SetupSQLStatements
Implement SQLiteBatch::Close
Implement SQLiteDatabase::Close
Implement SQLiteDatabase::Open
Initialize and Shutdown sqlite3 globals
Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch
Implement SQLiteDatabaseVersion
Add SQLiteDatabase and SQLiteBatch dummy classes
Add sqlite to travis and depends
Add libsqlite3
refactor: enable -netinfo to add future networks (i2p, cjdns)
RPC: getpeerinfo: Wrap long help line for bytesrecv_per_msg
RPC: getpeerinfo: Deprecate "whitelisted" field (replaced by "permissions")
scripted-diff: rename vRecvGetData
Guard vRecvGetData (now in net processing) with its own mutex
Move vRecvGetData to net processing
Lock before checking if orphan_work_set is empty; indicate it is guarded
Move m_orphan_work_set to net_processing
refactor: promote some -netinfo localvars to class members
cli: simplify -netinfo using getpeerinfo network field
rpc, test: expose CNodeStats network in RPC getpeerinfo
net: add peer network to CNodeStats
net: Send post-verack handshake messages at most once
contrib: add getcoins.py script to get coins from (signet) faucet
[Rename only] Rename orphan_work_set to m_orphan_work_set.
test: Speed up wallet_resendwallettransactions test with mockscheduler RPC
rpc: Adjust witness-tx deserialize error message
wallet: remove db mode string
Avoid the use of abs64 in timedata
tests: dumping and minimizing of script assets data
tests: add generic qa-asset-based script verification unit test
tests: functional tests for Schnorr/Taproot/Tapscript
tests: add BIP340 Schnorr signature support to test framework
--- [TAPROOT] Tests ---
Activate Taproot/Tapscript on regtest (BIP 341, BIP 342)
Make Taproot spends standard + policy limits
--- [TAPROOT] Regtest activation and policy ---
Implement Tapscript script validation rules (BIP 342)
Use ScriptExecutionData to pass through annex hash
Implement Taproot validation (BIP 341)
Support for Schnorr signatures and integration in SignatureCheckers (BIP 340)
Implement Taproot signature hashing (BIP 341)
Ignore incorrectly-serialized banlist.dat entries
Restore compatibility with old CSubNet serialization
Report and verify expirations
Delete limitedmap as it is unused now
Make txid delay penalty also apply to fetches of orphan's parents
Expedite removal of tx requests that are no longer needed
Reduce MAX_PEER_TX_ANNOUNCEMENTS for non-PF_RELAY peers
Change transaction request logic to use txrequest
Add txrequest fuzz tests
Add txrequest unit tests
Add txrequest module
build: optionally skip external warnings
test: Remove unused nVersion=1 in p2p tests
Add TaggedHash function (BIP 340)
--- [TAPROOT] BIP340/341/342 consensus rules ---
refactor: keep spent outputs in PrecomputedTransactionData
tests: don't export in6addr_loopback
test: add p2p_lock acquires in p2p_leak_tx.py
test: use MiniWallet for p2p_leak_tx.py
Only relay IPv4, IPv6, Tor addresses
Mention BIP155 in doc/bips.md
[trivial] Extract connection type doc into file where it is used.
[doc] Improve help for getpeerinfo connection_type field.
[doc] release notes for max fee checking
test: RPC: getblock fee calculations
RPC: getblock: tx fee calculation for verbosity 2 via Undo data
tor: make a TORv3 hidden service instead of TORv2
net: advertise support for ADDRv2 via new message
net: CAddress & CAddrMan: (un)serialize as ADDRv2
tests: Test getaddressinfo parent_desc
rpc: Add parent descriptor to getaddressinfo output
wallet: Add GetDescriptorString to DescriptorScriptPubKeyMan
descriptors: Add ToNormalizedString and tests
doc: Add anchors.dat to files.md
p2p: Try to connect to anchors once
p2p: Integrate DumpAnchors() and ReadAnchors() into CConnman
p2p: Add CConnman::GetCurrentBlockRelayOnlyConns()
p2p: Add ReadAnchors()
p2p: Add DumpAnchors()
Support bypassing range check in ReadCompactSize
style and nits for fee-checking in BroadcastTransaction
doc: Add release notes for #20101
cirrus: Use kvm to avoid spurious CI failures in the default virtualization cluster
test: Document why syncwithvalidationinterfacequeue is needed in tests
Revert "test: Add missing sync_all to wallet_balance test"
[net] Remove CombinerAll
Avoid 'timing mishap' warnings when mocking
Use mockable time everywhere in net_processing
rpc: change no wallet loaded message to be clearer
random: fixes read buffer resizing in RandAddSeedPerfmon
refactor: rename scriptPubKey in VerifyWitnessProgram to exec_script
scripted-diff: put ECDSA in name of signature functions
--- [TAPROOT] Refactors ---
Bump vcpkg commit ID to get new msys mirror list
util: Do not use gArgs global in ArgsManager member functions
refactor: Extract ParseOpCode from ParseScript
doc: Update and improve files.md
[validation] Remove absurdfee from accepttomempool
scripted-diff: update max-fee-exceeded error message to include RPC
[rpc/node] check for high fee before ATMP in clients
fuzz: Configure check for main function
lint: Use TRAVIS_BRANCH in lint-git-commit-check.sh
lint: Don't use TRAVIS_COMMIT_RANGE in whitespace linter
lint: Don't use TRAVIS_COMMIT_RANGE for commit-script-check
ci: Build Arm64 on Travis without functional tests
test: Add tests for CNode::ConnectedThroughNetwork
net: Add CNode::ConnectedThroughNetwork member function
test: Mention commit id in scripted diff error
net: Add CNode::m_inbound_onion data member
RPC: remove duplicate line in getblock help
Explicitly filter out partial groups when we don't want them
Move OutputGroup positive only filtering into Insert
test: Assert exclusive PSBT funding options
net: rename CNetAddr scopeId to m_scope_id, improve code doc
test: add test coverage for CNetAddr ipv6 scoped addresses
net: Use Span in ReceiveMsgBytes
test: Assert PSBT change type
doc: Collect release-notes snippets
doc: clarify CRollingBloomFilter size estimate
refactor: fix -Wbraced-scalar-init warning in validation tests
qt: Periodic translations update
tx: Update transifex slug for 0.21
doc: Update onion service target port numbers in tor.md
net: Extend -bind config option with optional network type
net, refactor: Move AddLocal call one level up
net: Pass onion service target to Tor controller
rpc: Set HTTP Content-Type in bitcoin-cli
Remove confusing and almost useless "unexpected version" warning
signet: do not log signet startup messages for other chains
zmq: Append address to notify log output
test: Add zmq test to support multiple interfaces
scripted diff: Improve invalid vout value rpc error message
test: use wait_for_{block,header} helpers in p2p_fingerprint.py
depends: Set CMAKE_INSTALL_RPATH for native packages
doc: Add 19501 release notes
doc: Remove double-whitespace from help string, other whitespace fixups
refactor: Clean up -Wlogical-op warning
Move EligibleForSpending into GroupOutputs
Move fee setting of OutputGroup to Insert
Move GroupOutputs into SelectCoinsMinConf
Remove OutputGroup non-default constructors
signet: Add assumed values for default signet
Update msvc build to use new vcpkg manifest
test: Get rid of default wallet hacks
test, refactor: add default_wallet_name and wallet_data_filename variables
test: Add signet witness commitment section parse tests
Remove gArgs global from CreateChainParams to aid testing
refactor: Rename TorController::target to m_tor_control_center
net, refactor: Refactor CBaseChainParams::RPCPort function
net: Add alternative port for onion service
net: Use network byte order for in_addr.s_addr
test: add test for high-bandwidth mode states in getpeerinfo
doc: release note for new getpeerinfo fields "bip152_hb_{from,to}"
rpc: expose high-bandwidth mode states via getpeerinfo
net: save high-bandwidth mode states in CNodeStats
[test] Make sure send rpc returns fee reason
feature: Added ability for users to add a startup command
test: Check that invalid peer traffic is accounted for
test: Remove confusing cast to same type (int to int)
wallet: no need for duplicate storage for ABANDON_HASH constant
scripted-diff: Replace UINT256_ONE() with uint256::ONE
uint256: Update constructors to c++11, make ONE static
[Trivial] python help message
[send] Make send RPCs return fee reason
test: remove unused constants in functional tests
test: use explicit p2p objects where available
doc: Added default signet config for linearize script
doc: Mention signet in -help output
remove CRPCCommand constructor that takes rpcfn_type function pointer
remove dead rpc code
Improve docs about feeler connections
refactor: Drop boost::thread stuff in CCheckQueue
bench: Use CCheckQueue local thread pool
test: Use CCheckQueue local thread pool
Add local thread pool to CCheckQueue
refactor: Use member initializers in CCheckQueue
doc: Add release notes to support multiple interfaces
doc: Adjust ZMQ usage to support multiple interfaces
zmq: Add support to listen on multiple interfaces
net: Print error message if -proxy is specified without arguments (instead of continuing without proxy server)
Remove header checks out of net_processing
Give V1TransportDeserializer CChainParams& member
Change CMessageHeader Constructor
Add doxygen comment for ReceiveMsgBytes
Move checksum check from net_processing to net
Give V1TransportDeserializer an m_node_id member
doc: Document signet BIP
doc: Update comments for new chain settings (-signet and -chain=signet)
fuzz: Remove needless guard
refactor: Remove SignetTxs::m_valid and use optional instead
test: Run signet test even when wallet was not compiled
Assert that RPCArg names are equal to CRPCCommand ones (net, rpcwallet)
Update zmq notification documentation and sample consumer
Add functional tests for zmq sequence topic and mempool sequence logic
Add 'sequence' zmq publisher to track all block (dis)connects, mempool deltas
zmq test: Actually make reorg occur
refactor: took out unused member functions
[doc] Release notes
[rpc] Deprecate getpeerinfo addnode field
[refactor] Rename test file to allow any getpeerinfo deprecations.
[rpc] Add connection type to getpeerinfo RPC, update tests
[log] Add connection type to log statement
validation: Remove review-only comments + assertions
docs: Move FindFilesToPrune{,Manual} doxygen comment
style: Make FindFilesToPrune{,Manual} match style guide
validation: Move FindFilesToPrune{,Manual} to BlockManager
Clarify blocksonly whitelistforcerelay test
net: recognize TORv3/I2P/CJDNS networks
log: Remove static log message "Initializing chainstate Chainstate [ibd] @ height -1 (null)"
Remove unused LockAssertion struct
Replace LockAssertion with a proper thread safety annotations
refactor: Use explicit function type instead of template
test: create default wallet in extended tests
Only update the updateSmartFeeLabel once in sync
test: some sanity checks for consensus logic
test: basic signet tests
test: add small signet fuzzer
test: signet network selection tests
signet: hard-coded parameters for Signet Global Network VI (2020-09-07)
qt: update QT to support signet network
consensus: add signet validation
add signet chain and accompanying parameters
net: CNetAddr: add support to (un)serialize as ADDRv2
rpc: add brackets to ConstructTransaction
[rpc] send: various touch-ups
[rpc] send: fix parsing replaceable option
Mark send RPC experimental
test: move HasReason so it can be reused
[test] add get_vsize util for more programmatic testing
[rpc] Return fee and vsize from testmempoolaccept
validation: Move PruneOneBlockFile to BlockManager
validation: Pass in chainman to UnloadBlockIndex
build: patch qt libpng to fix powerpc build
scripted-diff: Rename SendMessage to SendZmqMessage.
validation: Move ~CMainCleanup logic to ~BlockManager
policy/fees: remove a floating-point division by zero
policy/fees: unify some duplicated for loops
policy/fees: small readability improvements
policy/fee: remove requireGreater parameter in EstimateMedianVal()
policy/fees: correct decay explanation comments
build: AX_PTHREAD serial 27
build: split PTHREAD_* flags out of AM_LDFLAGS
scripted-diff: add FUZZ_SUITE_LDFLAGS_COMMON
build: add PTHREAD_LIBS to LDFLAGS configure output
Test batch rpc with params
QA: Use GBT to get block versions correct
QA: blocktools: Accept block template to create_block
Squashed 'src/secp256k1/' changes from 2ed54da18a..8ab24e8dad
Update src/secp256k1 subtree to upstream libsecp256k1
util: move HasPrefix() so it can be reused
Change CSipHasher's count variable to uint8_t
tests: Add fuzzing harness for Keccak and SHA3_256
[test] remove confusing p2p property
scripted-diff: replace p2p with p2ps[0] in p2p_invalid_tx
[doc] sample code for test framework p2p objects
[refactor] clarify tests by referencing p2p objects directly
Add OpenBSD instructions for building the Qt GUI
[doc] Clarify semantic of peer's m_protect w.r.t to outbound eviction logics
[rpc] add send method
add signet basic support (signet.cpp)
validation: move GetWitnessCommitmentIndex to consensus/validation
log: print unexpected version warning in validation log category
bugfix: make LoadWallet assigns status always
test: gettxoutproof duplicate txid
test: Test empty array in gettxoutproof
test: Run rpc_txoutproof.py even with wallet disabled
test: MiniWallet: Default fee_rate in send_self_transfer, Pass in utxo_to_spend
test: bugfix: Actually pick largest utxo
Tell users how to load or create a wallet when no wallet is loaded
Do not create default wallet
refactor: Use Mutex type for some mutexes in CNode class
.gitignore: ignore qa-assets/ folder
build: use DIR_FUZZ_SEED_CORPUS if specified for cov_fuzz target
Do not pass chain params to CheckForStaleTipAndEvictPeers twice
ProcessOrphanTx: Move AddToCompactExtraTransactions call into ProcessOrphanTx
ProcessOrphanTx: Remove aliases
ProcessOrphanTx: Remove outdated commented
ProcessOrphanTx: remove useless setMisbehaving set
ProcessOrphanTx: remove useless done variable
[net processing] Add doxygen comments for orphan data and function
[rpc] add snake case aliases for transaction methods
[rpc] walletcreatefundedpsbt: allow inputs to be null
p2p: Use the greatest common version in peer logic
p2p: Remove SetCommonVersion() from VERACK handler
refactor: Rename local variable nSendVersion
p2p: Unify Send and Receive protocol versions
scripted-diff: Remove unused "What's This" button in dialogs on Windows
qt: Add flags to prevent a "What's This" button on Windows OS
[doc] Clarify scope of eviction protection of outbound block-relay peers
test: Use MiniWalet in p2p_feefilter
[net processing] Move Misbehaving() to PeerManager
[net_processing] Move SendBlockTransactions into PeerManager
[net processing] Move MaybePunishPeerForTx to PeerManager
[net processing] Move ProcessOrphanTx to PeerManager
[net processing] Move MaybePunishNodeForBlock into PeerManager
[net processing] Move ProcessHeadersMessage to PeerManager
[whitespace] tidy up indentation after scripted diff
scripted-diff: [net processing] Rename PeerLogicValidation to PeerManager
[net_processing] Pass chainparams to PeerLogicValidation constructor
[move only] Collect all private members of PeerLogicValidation together
Replace zmqconfig.h by a simple zmqutil.
Use std::unique_ptr for CZMQNotifierFactory.
Simplify and fix notifier removal on error.
Various cleanups in zmqnotificationinterface.
Unroll Keccak-f implementation
Add SHA3 benchmark
Implement keccak-f[1600] and SHA3-256
Change FILE_CHAR_BLOCKLIST to FILE_CHARS_DISALLOWED
wallet: Avoid multiple BerkeleyBatch in DelAddressBook
refactor: remove unused header <arpa/inet.h> in protocol.cpp
Remove mempool global
Remove mempool global from p2p
Remove mempool global from init
ci: Double tsan CPU and Memory to avoid global timeout
doc: Add doxygen comment to IsRBFOptIn
Remove mempool global from interfaces
refactor: Add IsRBFOptInEmptyMempool
[BroadcastTransaction] Remove unsafe move operator
[p2p] Remove dead code
[p2p] Check for nullptr before dereferencing pointer
[mempool] Revert unbroadcast set to tracking just txid
rawtransaction: fix argument in combinerawtransaction help message
Get rid of unused functions CTxMemPool::GetMemPoolChildren, CTxMemPool::GetMemPoolParents
Remove mapLinks in favor of entry inlined structs with iterator type erasure
script: fix zmq_sub.py file permissions
doc: update PyZMQ installation instructions, ZeroMQ link
refactor: Avoid duplicate map lookup in ScriptToAsmStr
wallet: Remove path checking code from bitcoin-wallet tool
wallet: Remove path checking code from createwallet RPC
wallet: Remove path checking code from loadwallet RPC
refactor: Pass wallet database into CWallet::Create
wallet: Remove Verify and IsLoaded methods
refactor: Use DatabaseStatus and DatabaseOptions types
wallet: Add MakeDatabase function
Remove WalletLocation class
[tests] Replace bytes literals with hex literals
[tests] Correct docstring for address.py
[tests] Tidy up imports in address.py
[tests] Remove unused optional verify_checksum parameter
[tests] Rename segwit encode and decode functions
[tests] Move bech32 unit tests to test framework
[doc] Follow developer notes, add comment about missing default.
[doc] Describe connection types in more depth.
[refactor] Simplify connection type logic in ThreadOpenConnections
[refactor] Simplify check for block-relay-only connection.
[test] Add explicit tests that connection types get set correctly
[trivial] Small style updates
[doc] Explain address handling logic in process messages
[refactor] Restructure logic to check for addr relay.
[net] Remove unnecessary default args on OpenNetworkConnection
scripted-diff: Rename `OUTBOUND` ConnectionType to `OUTBOUND_FULL_RELAY`
build: add /usr/local/ to LCOV_FILTER_PATTERN for macOS builds
cli -netinfo: display multiple levels of details
Protect localhost and block-relay-only peers from eviction
test: Change feature_config_args.py not to rely on strange regtest=0 behavior
qa: Changes v0.17.1 to v0.17.2
Refactor the functional test
Address nits in ADDR caching
wallet: Reload previously loaded wallets on GUI startup
net: improve nLastBlockTime and nLastTXTime documentation
doc: Add comments and additional reviewers to CODEOWNERS file
doc: elaborate on release notes wrt netmasks
refactor: CTxMemPool::IsUnbroadcastTx() requires CTxMemPool::cs lock
refactor: CTxMemPool::GetTotalTxSize() requires CTxMemPool::cs lock
refactor: CTxMemPool::ClearPrioritisation() requires CTxMemPool::cs lock
refactor: CTxMemPool::ApplyDelta() requires CTxMemPool::cs lock
refactor: CTxMemPool::UpdateChild() requires CTxMemPool::cs lock
refactor: CTxMemPool::UpdateParent() requires CTxMemPool::cs lock
lint: add C++ code linter
Remove -zapwallettxes
Assert that RPCArg names are equal to CRPCCommand ones (rawtransaction)
Assert that RPCArg names are equal to CRPCCommand ones (blockchain)
cli: change -netinfo optional arg from bool to int
cli: add getpeerinfo last_{block,transaction} to -netinfo
cli: add -netinfo server version check and error message
cli: create peer connections report sorted by dir, minping
cli: create vector of Peer structs for peers data
cli: add NetType enum struct and NetTypeEnumToString()
cli: create local addresses, ports, and scores report
cli: create inbound/outbound peer connections report
cli: start dashboard report with chain and version header
cli: tally peer connections by type
remove usage of boost::bind
build: enable unused member function diagnostic
Update the vcpkg checkout commit ID in appveyor config.
cli: add ipv6 and onion address type detection helpers
cli: create initial -netinfo option, NetinfoRequestHandler class
Avoid callback when -blocknotify is empty
Set appveyor vm version to previous Visual Studio 2019 release.
rpc: Properly deserialize txs with witness before signing
doc: Add best practice for annotating/asserting locks
sync.h: Make runtime lock checks require compile-time lock checks
Do not hide compile-time thread safety warnings
Add missed thread safety annotations
Use LockAssertion utility class instead of AssertLockHeld()
p2p: Put disconnecting logs into BCLog::NET category
doc: release note for changed {sign,verify}message error codes
test: check parameter validity in rpc_signmessage.py
rpc: fix {sign,message}verify RPC errors for invalid address/signature
util: Hard code previous release tarball checksums
scripted-diff: Move previous_release.py to test/get_previous_releases.py
test: Add tsan supp for leveldb::DBImpl::DeleteObsoleteFiles
doc: Document differences in bitcoind and bitcoin-qt locale handling
Ignore unknown messages before VERACK
test framework: serialize/deserialize inv type as unsigned int
wallet, refactor: Remove duplicate map lookups in GetAddressBalances
Remove old check for 3-byte shifted IP addresses from pre-0.2.9 node messages
wallet: Avoid recursive lock in IsTrusted
wallet, refactor: Immutable CWalletTx::pwallet
Warn on unknown rw_settings
Pass mempool reference to chainstate constructor
chain: Remove UB CChain comparison
gui refactor: Inline SplashScreen::ConnectWallet
refactor: Move wallet methods out of chain.h and node.h
refactor: Create interfaces earlier during initialization
tests: Add fuzzing harness for CNode
test: Remove unused lock arg from BitcoinTestFramework.wait_until
test: Rename wait until helper to wait_until_helper
test: Remove unused p2p_lock in VersionBitsWarningTest
p2p: change CInv::type from int to uint32_t
Add indexing ADDR cache by local socket addr
Justify the choice of ADDR cache lifetime
test: Add docstring to wait_until() in util.py to warn about its usage
test: Update wait_until usage in tests not to use the one from utils
bench: Prevent thread oversubscription
p2p: ensure inv is GenMsgTx before ToGenTxid in inv processing
test: use CInv::MSG_WITNESS_TX flag in p2p_segwit
p2p: make gtxid(.hash) and fAlreadyHave localvars const
p2p: use CInv block message helpers in net_processing.cpp
[net processing] Change AlreadyHaveTx() to take a GenTxid
[net processing] Change AlreadyHaveBlock() to take block_hash argument
[net processing] Remove mempool argument from AlreadyHaveBlock()
[net processing] Split AlreadyHave() into separate block and tx functions
p2p: remove nFetchFlags from NetMsgType TX and INV processing
p2p: add CInv block message helper methods
gui: Delay interfaces::Node initialization
gui: Replace interface::Node references with pointers
gui: Remove unused interfaces::Node references
gui: Partially revert #10244 gArgs and Params changes
build: replace wingenminiupnpcstrings sed with a patch in miniupnpc package
build: replace qtranslations lrelease sed with a patch in qt package
wallet: filter for keys only before record deser in salvage
walletdb: Add KeyFilterFn to ReadKeyValue
util: make EncodeBase64 consume Spans
util: make EncodeBase32 consume Spans
util: Check for file being NULL in DirectoryCommit
util: Introduce DirectoryCommit commit function to sync a directory
util.h: Document FileCommit function
util: Prefer Mac-specific F_FULLSYNC over fdatasync in FileCommit
util: Refactor FileCommit from an #if sequence nested in #else, to a sequence of #elif
Bugfix: Define and use HAVE_FDATASYNC correctly outside LevelDB
test: inline hashToHex
[test] Remove final references to mininode
build: replace FreeType back-compat sed with a patch in qt package
build: replace pwd sed in qt package with a patch
build: remove no-longer needed qt workaround
build: remove no-longer needed qt configure workaround
build: use patch rather than sed in zeromq package
build: use patch rather than sed in native_cctools package
build: use patch rather than sed in fontconfig package
build: use patch rather than sed in Boost package
build: use patch rather than sed in bdb package
net: change CNetAddr::ip to have flexible size
net: don't accept non-left-contiguous netmasks
Add in/out connections to cli -getinfo
UNIX_EPOCH_TIME fixup in rpc getnettotals
Add in/out connections to rpc getnetworkinfo
test: Select at least the fee in wallet_bumpfee to avoid negative amounts
doc: Remove label from good first issue template
scripted-diff: gArgs -> args
init: Capture copy of blocknotify setting for BlockNotifyCallback
init: Pass reference to ArgsManager around instead of relying on global
test/fuzz: add a seed corpus generation option to the test_runner
qt, refactor: Limit scope of QPainter object
test: add parameterized constructor for msg_sendcmpct()
test: Activate segwit in TestChain100Setup
test: Pass empty tx pool to block assembler
test: Move doxygen comment to header
test: resort imports
scripted-diff: Rename mininode to p2p
scripted-diff: Rename mininode_lock to p2p_lock
docs: Correct description for getblockstats's txs field
[net_processing] Move ProcessMessage to PeerLogicValidation
wallet: IsChange requires cs_wallet lock
help: Generate checkpoint height from chainparams
Move Win32 defines to configure.ac to ensure they are globally defined
Remove unused includes
Move comment about BaseIndex::DB from TxIndex::DB
test: Distinguish between nodes(bitcoind) and peers(mininodes) in p2p_leak.py
test: remove `CNodeNoVersionIdle` from p2p_leak.py
test: remove `CNodeNoVersionMisbehavior` from p2p_leak.py
depends: Specify LDFLAGS to cmake as well
depends: Prepend CPPFLAGS to C{,XX}FLAGS for CMake
depends: Cleanup CMake invocation
tests: Add fuzzing harness for ec_seckey_import_der(...) and ec_seckey_export_der(...)
tests: Add fuzzing harness for SigHasLowR(...) and ecdsa_signature_parse_der_lax(...)
-maxapsfee: follow-up fixes
Drop deprecated and unused GUARDED_VAR and PT_GUARDED_VAR annotations
doc: release notes for -maxapsfee
tests: add sync_all to fix race condition in wallet groups test
util: remove unused c-string variant of atoi64()
util: remove c-string interfaces for DecodeBase58{Check}
ci: Set cirrus RAM to 8GB
ci: Run valgrind fuzzer on cirrus
[test] Add test for getblockheader verboseness
wallet: IsMine overloads require cs_wallet lock
wallet: GetWalletTx requires cs_wallet lock
build: AX_BOOST_THREAD serial 33
build: disable D-Bus on Android by default
doc: Add release notes for getindexinfo RPC
test: Add tests for getindexinfo RPC
rpc: Add getindexinfo RPC
Move only: Move CDiskTxPos to its own file
Updated outdated help command for getblocktemplate (fixes #19625)
doc: release note for getpeerinfo last_block/last_transaction
test: rpc_net.py logging and test naming improvements
test: getpeerinfo last_block and last_transaction tests
rpc: expose nLastBlockTime/TXTime as getpeerinfo last_block/transaction
test: Remove confusing and broken use of wait_until global
net: add nLastBlockTime/TXTime to CNodeStats, CNode::copyStats
ci: Set increased --timeout-factor by default
Increase the ip address relay branching factor for unreachable networks
doc: comment out and add annotation to unused MSG_FILTERED_WITNESS_BLOCK
build: Add Werror=range-loop-analysis
bench: Allow skip benchmark
build: Add missed gcov files to 'make clean'
rpc: Assert that RPCArg names are equal to CRPCCommand ones (rpcdump)
rpc: Assert that RPCArg names are equal to CRPCCommand ones (zmq)
rpc: Assert that RPCArg names are equal to CRPCCommand ones (mining)
rpc: Remove unused return type from appendCommand
rpc: fix/add missing RPCExamples for "Util" RPCs
Add variables for repeated scripts
Remove GetScriptForWitness function
Replace usage of GetScriptForWitness with GetScriptForDestination
Add loadwallet and createwallet RPC load_on_startup options
qt: Rename qt-init thread before logging start
qt: Name ClientModel timer QThread
qt: Name WalletController worker QThread
qt: Name RPCConsole executor QThread
Cap listsinceblock target_confirmations param
test: speedup p2p_feefilter.py by whitelisting peers (immediate tx relay)
test: use wait_until for invs matching in p2p_feefilter.py
test: add logging for p2p_feefilter.py
Reduce cs_main lock accumulation during GUI startup
Optionally populate BlockAndHeaderTipInfo during AppInitMain
Add BlockAndHeaderTipInfo to the node interface/appInit
RPCConsole, take initial chaintip data as parameter
util: make EncodeBase58Check consume Spans
util: make EncodeBase58 consume Spans
Shrink CAddress from 48 to 40 bytes on x64
[net_processing] Change PeerLogicValidation to hold a connman reference
scripted-diff: rename misbehavior members
[net processing] Move misbehavior tracking state to Peer
[net processing] Add Peer
[net processing] Remove CNodeState.name
[net] Add addpeeraddress RPC method
[test] Test that getnodeaddresses() can return all known addresses
[addrman] Specify max addresses and pct when calling GetAddresses()
Refactor OutputGroups to handle effective values, fees, and filtering
doc: Document ALLOW_HOST_PACKAGES dependency option
rpc: Improve addnode remove command error message
build: Enable some commonly enabled compiler diagnostics
sync: detect double lock from the same thread
build, qt: Add Qt version checking
build: Drop unused bitcoin_cv_qt58
build: Add missed fuzz.coverage/ directory to .gitignore
build: Add missed fuzz_filtered.info to COVERAGE_INFO
build, test: Add support for llvm-cov
depends: More robust cmake invocation
depends: Use $($(package)_cmake) instead of cmake
[net] Remove unnecessary default args on CNode constructor
[refactor] Remove IsOutboundDisconnectionCandidate
[net/refactor] Simplify multiple-connection checks
[net/refactor] Rework ThreadOpenConnections logic
[net/refactor] Clarify logic for selecting connections in ThreadOpenConnections
[net/refactor] Remove fInbound flag from CNode
[net/refactor] Remove m_addr_fetch member var from CNode
[net/refactor] Remove fFeeler flag from CNode
[net/refactor] Remove m_manual_connection flag from CNode
[net/refactor] Add connection type as a member var to CNode
[doc] Describe different connection types
[net/refactor] Add AddrFetch connections to ConnectionType enum
[net/refactor] Extract m_addr_known logic from initializer list
[net/refactor] Add block relay only connections to ConnectionType enum
[net/refactor] Add feeler connections to ConnectionType enum
[net/refactor] Add manual connections to ConnectionType enum
[net/refactor] Introduce an enum to distinguish type of connection
scripted-diff: Rename OneShot to AddrFetch
Refactor Get{Prevout,Sequence,Outputs}Hash to Get{Prevouts,Sequences,Outputs}SHA256.
Replace `hidden service` with `onion service`
[rpc] fundrawtransaction, walletcreatefundedpsbt lock manually selected coins
Add SHA256Uint256 helper functions
Add single sha256 call to CHashWriter
refactor: Make HexStr take a span
refactor: test: use _ variable for unused loop counters
build: make clean removes .gcda and .gcno files from fuzz directory
test: test the implicit avoid partial spends functionality
wallet: try -avoidpartialspends mode and use its result if fees are below threshold
build: Update and sort package list in gitian-linux.yml
build: set minimum required Boost to 1.58
sync: make EnterCritical() & push_lock() type safe
Deduplicate missing parents of orphan transactions
Rewrite parent txid loop of requested transactions
test addition of unknown segwit spends to txid reject filter
Add txids with non-standard inputs to reject filter
add functional test
test: Wait until is_connected in add_p2p_connection
lint: Remove travis env var from commit linter
doc: Add CODEOWNERS file
gui: Call setWalletActionsEnabled(true) only for the first wallet
Test that wtxid relay peers add wtxid to reject filter
Restore test case for p2p transaction blinding
rpc: Assert that RPCArg names are equal to CRPCCommand ones (misc)
rpc: Limit echo to 10 args
refactor: Use C++11 range based for loops to simplify rpc code
rpc: Treat all args after a hidden arg as hidden as well
rpc: document returned error fields as optional if applicable
test: Add LockStackEmpty()
test: Repeat deadlock tests
Preserve initial state if push_lock() throws exception
scripted-diff: Remove Reference Links
doc: Add historical release notes for 0.20.1
qt: Wrap tooltips in the intro window
rpc: Document getwalletinfo's unlocked_until field as optional
build: Drop old hack which is unneeded now
[util] add RunCommandParseJSON
[ci] use boost::process
[doc] include Doxygen comments for HAVE_BOOST_PROCESS
[build] msvc: add boost::process
[build] make boost-process opt-in
configure: add ax_boost_process
[depends] boost: patch unused variable in boost_process
test: Catch decimal.InvalidOperation from TestNodeCLI#send_cli
test: Wait for 'cmpctblock' in p2p_compactblocks when it is expected
Make Hash[160] consume range-like objects
Make CHash256/CHash160 output to Span
Make MurmurHash3 consume Spans
Make CHash256 and CHash160 consume Spans
Make script/standard's BaseHash Span-convertible
Add MakeUCharSpan, to help constructing Span<[const] unsigned char>
Make uint256 Span-convertible by adding ::data()
scripted-diff: rename base_blob::data to m_data
refactor: make txmempool interface use GenTxid
refactor: make FindTxForGetData use GenTxid
refactor: use GenTxid in tx request functions
test: request parents of orphan from wtxid relay peer
p2p: enable fetching of orphans from wtxid peers
refactor: add GenTxid (=txid or wtxid) type and use it for tx request logic
doc: list support for BIP 339 in doc/bips.md
Use real value when calculating OutputGroup value
Test addr response caching
Add addr permission flag enabling non-cached addr sharing
Cache responses to addr requests
walletdb: Ensure that having no database handle is a failure
Remove BDB dummy databases
Introduce DummyDatabase and use it in the tests
Pass mempool pointer to GetCoinsCacheSizeState
Pass mempool pointer to UnloadBlockIndex
refactor: use local argsmanager in CRegTestParams
scripted-diff: Replace gArgs with local argsman
refactor: add unused ArgsManager to replace gArgs
test: Simplify cs_main locks
doc: Clang 8 or later is required with FORCE_USE_SYSTEM_CLANG
util: use HAVE_FDATASYNC to determine fdatasync() use
travis: Re-enable s390x
doc: set CC_FOR_BUILD when building on OpenBSD
devtools: Add security check for separate_code
build: add -Wl,-z,separate-code to hardening flags
net: save the network type explicitly in CNetAddr
Clean message_count and last_message
p2p, refactoring: use CInv helpers in net_processing.cpp
p2p: add CInv transaction message helper methods
walletdb: Remove unused static functions from walletdb.h
wallettool: Have RecoverDatabaseFile return errors and warnings
refactor: Drop unused CBufferedFile::Seek()
rpc: Avoid useless mempool query in gettxoutproof
rpc: Style fixups in gettxoutproof
test: test decodepsbt fee calculation (count input value only once per UTXO)
gui: Clarify block height label
[net processing] Tidy up Misbehaving()
[net processing] Always supply debug message to Misbehaving()
wallet: Don't override signing errors
rpc: RPCResult Type of MempoolEntryDescription should be OBJ. If multiple entries are possible, wrapping Type should be OBJ_DYN. fixes #19579
Remove useless 2500 limit on AddrMan queries
Move filtering banned addrs inside GetAddresses()
rpc: reset scantxoutset progress on finish
walletdb: Remove BerkeleyBatch friend class from BerkeleyDatabase
No need to check for duplicate fileids in all dbenvs
walletdb: Move Db->open to BerkeleyDatabase::Open
walletdb: track database file use as m_refcount within BerkeleyDatabase
Combine BerkeleyEnvironment::Verify into BerkeleyDatabase::Verify
test: Add test coverage for -networkactive option
net: Log network activity status change unconditionally
net: Add -networkactive option
Call RecoverDatabaseFile directly from wallettool
build: call AC_PATH_TOOL for dsymutil in macOS cross-compile
fuzz: add missing overrides to signature_checker
qt: Leverage the default "Create new receiving address" button
qt: Make "Create new receiving address" default unconditionally
contrib: Clean up previous_releases.py
Make test DoS_mapOrphans deterministic
net: document `enum Network`
span: Add Span::empty() and use it in script/descriptor
rpc: deduplicate WriteHDKeypath() used in decodepsbt
test: fix intermittent p2p_ibd_txrelay race, add test_framework.py#wait_until
build: pass -fcommon when building genisoimage
fuzz: fix unused variable addrdb compiler warning
Further improve comments around recentRejects
Disconnect peers sending wtxidrelay message after VERACK
test: Use wtxid relay generally in functional tests
test: Add tests for wtxid tx relay in segwit test
test: Update test framework p2p protocol version to 70016
Rename AddInventoryKnown() to AddKnownTx()
Make TX_WITNESS_STRIPPED its own rejection reason
Delay getdata requests from peers using txid-based relay
Add p2p message "wtxidrelay"
ignore non-wtxidrelay compliant invs
Add support for tx-relay via wtxid
Add wtxids to recentRejects instead of txids
Add wtxids of confirmed transactions to bloom filter
Add wtxid-index to orphan map
Add a wtxid-index to mapRelay
Just pass a hash to AddInventoryKnown
Add wtxid to mempool unbroadcast tracking
Add a wtxid-index to the mempool
doc: Update macOS cross compilation dependencies for Focal
ci: add tsan debug symbols option
depends: bump native_cctools for fixed lto with external clang
ci: Add tsan suppression for race in DatabaseBatch
depends: enable lto support for Apple's ld64
test: Add chacha20 test vectors in muhash
test: Add basic Python/C++ Muhash implementation parity unit test
test: Add Python MuHash3072 implementation to test framework
test: Move modinv to util and add unit test
[test] feefilter during and after IBD
gui: Show permissions instead of whitelisted
[tests] Remove unnecessary cs_mains in denialofservice_tests
Linter to check commit message formatting
log: Avoid treating remote misbehvior as local system error
refactor: Switch ValidationState mode to C++11 enum class
tests: Add fuzzing harness for CBlockPolicyEstimator::{Read,Write} (policy/fees.h)
tests: Add fuzzing harness for CBufferedFile::{SetPos,GetPos,GetType,GetVersion} (stream.h)
tests: Add fuzzing harness for LoadExternalBlockFile(...) (validation.h)
tests: Add fuzzing harness for CBufferedFile (streams.h)
tests: Add fuzzing harness for CAutoFile (streams.h)
tests: Add serialization/deserialization fuzzing helpers WriteToStream(…)/ReadFromStream(…)
tests: Add FuzzedAutoFileProvider which provides a CAutoFile interface to FuzzedDataProvider
tests: Add FuzzedFileProvider which provides a FILE* interface to FuzzedDataProvider using fopencookie
build: fix -Wformat-security check when compiling with GCC
test: ensure OP_1NEGATE satisfies BIP62 minimal push rule
Do not turn OP_1NEGATE in scriptSig into 0x0181 in signing code
ci: Increase CCACHE_SIZE in some builds on Travis
Increment input value sum only once per UTXO in decodepsbt
walletdb: Introduce WalletDatabase abstract class
walletdb: Add BerkeleyDatabase::Open dummy function
walletdb: Introduce AddRef and RemoveRef functions
walletdb: Move BerkeleyDatabase::Flush(true) to Close()
Have zmq reorg test cover mempool txns
refactor: replace CConnman pointers by references in net_processing.cpp
test: update tests for peer discouragement
test: Fail wait_until early if connection is lost
[net/net processing] check banman pointer before dereferencing
gui, doc: rm Ban Score in GUI Peers window/release notes updates
ci: Drop Homebrew caching while using Homebrew addon on Travis
ci: Do not activate Travis ccache caching strategy
ci: Disable functional tests on forked repos to avoid timeouts for macOS
Work around memory-aliasing in descriptor ParsePubkey
Add zmq test for transaction pub during reorg
Add test case for mempool->block zmq notification
Make ordering of zmq consumption irrelevant to functional test
walletdb: Don't remove database transaction logs and instead error
test: Change default test logging directory
test: Remove duplicate NodeContext hacks
util: Handle HTTP_SERVICE_UNAVAILABLE in bitcoin-cli
doc: CONTRIBUTING.md improvements
doc: move-only release notes
doc: Remove release notes of backports
net: rename DEFAULT_BANSCORE_THRESHOLD to DISCOURAGEMENT_THRESHOLD
net: remove -banscore configuration option
util: Make Assert work with any value
qt: Disable toolbar when overlay is shown
Add <datadir>/settings.json persistent settings storage.
util: Add ReadSettings and WriteSettings functions
qt, refactor: Cleanup ModalOverlay slots
[net processing] Continue SendMessages processing if not disconnecting peer
[net processing] Only call MaybeDiscourageAndDisconnect from SendMessages
test: add rpc_generate functional test
rpc: print useful help and error message for generate
depends: Add documentation for FORCE_USE_SYSTEM_CLANG make flag
depends: Reformat make options as definition list
depends: Add justifications for macOS clang flags
depends: specify libc++ header location for darwin
depends: force a new host id string if FORCE_USE_SYSTEM_CLANG is in use
[protocol] Remove unused GETHEADERS_VERSION
[protocol] Remove unused CADDR_TIME_VERSION
[net processing] Change cs_main TRY_LOCK to LOCK in SendMessages()
doc: Use precise permission flags where possible
net: improve encapsulation of CNetAddr
http: Release work queue after event base finish
walletdb: Add MakeBatch function to BerkeleyDatabase and use it
walletdb: Refactor DatabaseBatch abstract class from BerkeleyBatch
test: consider generate covered in _get_uncovered_rpc_commands()
refactor: Use C++11 range-based for loop
wallet: Never schedule MaybeCompactWalletDB when -flushwallet is off
wallet: Pass unused args to StartWallets
gui tests: Limit life-time of dummy testing setup
test: Add smoke test to check that wallets are flushed by default
net: Extract download permission from noban
refactor: clean up PeriodicFlush()
Make sure unconfirmed parents are requestable
Drop setInventoryTxToSend based filtering
Only respond to requests for recently announced transactions
Introduce constant for mempool-based relay separate from mapRelay caching
Swap relay pool and mempool lookup
Add lifetimebound to attributes for general-purpose usage
banlist: log post-swept banlist size at startup
doc: getpeerinfo banscore deprecation release note
Drop unused CDBWrapper methods
test: getpeerinfo banscore deprecation test
rpc: deprecate banscore field in rpc getpeerinfo
tests: Add fuzzing harness for BanMan
tests: Add ConsumeSubNet(...). Move and increase coverage in ConsumeNetAddr(...).
depends: Allow building with system clang
depends: Decouple toolchain + binutils
tools: clang-format 6 compatibility
doc: afl fuzzing comment about afl-gcc and afl-g++
ci: Add tsan suppression for race in BerkeleyBatch
cli: reduce DefaultRequestHandler memory allocations
doc: Add non-thread-safe note to FeeFilterRounder::round()
Remove previous_release.sh
script: Add previous_release.py
Updates msvc build to use ISO standard C++17.
Remove cached directories and associated script blocks from appveyor CI configuration.
Clean up separated ban/discourage interface
Replace automatic bans with discouragement filter
walletdb: don't reinitialize desc cache with multiple cache entries
qt: Get rid of cursor in out-of-focus labels
rpc: Update server to use new RPCHelpMan
rpc: Add option to hide RPCArg
rpc: Assert that passed arg names are equal to hardcoded ones
ci: Run tsan ci config on cirrus
Update pruning tooltip, original author BitcoinErrorLog
Enable Wswitch for OutputType
Remove confusing OutputType::CHANGE_AUTO
wallet: Replace boost::none with nullopt
ci: Run all tests on native mac again
test: add test for CChainState::ResizeCoinsCaches()
add ChainstateManager::MaybeRebalanceCaches()
Add CChainState::ResizeCoinsCaches
txdb: add CCoinsViewDB::ChangeCacheSize
walletdb: Move Rewrite into BerkeleyDatabase
walletdb: Move PeriodicFlush into WalletDatabase
walletdb: Combine VerifyDatabaseFile and VerifyEnvironment
gui: change combiner for signals to optional_last_value
ci: Add tsan suppression for race in wallet
doc: Remove outdated comment in TransactionTablePriv
rpc: Add CRPCCommand constructor which takes RPCHelpMan
build: pass _WIN32_WINNT=0x0601 when building libevent for Windows
refactor: Remove confusing BlockIndex global
span: add lifetimebound attribute
qt: Hide peer detail view if multiple are selected
span: (almost) match std::span's constructor behavior
scripted-diff: rename movie folder to animation
test: move TEST_RUNNER_EXTRA into native tsan setup
Add Windows WSL build recommendation to temporarily disable Win32 PE support.
doc: explain why passing -mlinker-version is required
[build] Remove unused RES_IMAGES
build: improve builtin_clz* detection
refactor: Replace RecursiveMutex with Mutex in rpc/server.cpp
ci: Install fixed version of clang-format for linters
build: Sort Makefile.am after renaming file
scripted-diff: Move ui_interface to the node lib
qt: Remove unused includes
wallet: Do not include server symbols
interfaces: Remove unused getDefaultChangeType
doc/REST-interface: Remove stale info
doc: Mention Span in developer-notes.md
doc: Document Span pitfalls
rpc: Check that left section is not multiline
tests: Provide main(...) function in fuzzer
Hide bumpfee's psbt creation behavior behind -deprecatedrpc
Add psbtbumpfee RPC
Improve "detected inconsistent lock order" error message
tests: Add fuzzing harness for ChaCha20Poly1305AEAD
tests: Add fuzzing harness for ChaCha20
tests: Add fuzzing harness for CHKDF_HMAC_SHA256_L32
tests: Add fuzzing harness for poly1305_auth(...)
tests: Add fuzzing harness for AES256CBCEncrypt/AES256CBCDecrypt
tests: Add fuzzing harness for AES256Encrypt/AES256Decrypt
test: retry when write to a socket fails on macOS
refactor: Use Mutex type for g_cs_recent_confirmed_transactions
depends: Patch libevent build to fix IPv6 -rpcbind on Windows
tests: Check that segwit inputs in psbt have both UTXO types
psbt: always put a non_witness_utxo and don't remove it
psbt: Allow both non_witness_utxo and witness_utxo
rpc: show both UTXOs in decodepsbt
refactor: Replace HexStr(o.begin(), o.end()) with HexStr(o)
ci: Increase test timeout for sanitizer configs
qt: Remove needless headers
Static asserts for consistency of fee defaults.
doc: add release notes for explicit fee estimators and bumpfee change
tests for bumpfee / estimate_modes
policy: optional FeeEstimateMode param to CFeeRate::ToString
rpc/wallet: add two explicit modes to estimate_mode
MOVEONLY: Make FeeEstimateMode available to CFeeRate
fees: add FeeModes doc helper function
test: use pgrep for better compatibility
[net] Don't try to take cs_inventory before deleting CNode
[net] Make cs_inventory a non-recursive mutex
[net processing] Remove PushBlockInventory and PushBlockHash
build: Add MemorySanitizer (MSan) in Travis to detect use of uninitialized memory
Drop CADDR_TIME_VERSION checks now that MIN_PEER_PROTO_VERSION is greater
build: Detect missed pkg-config early
build: Drop unused use_pkgconfig variable
build: Drop use_pkgconfig check for libmultiprocess check
doc: add release note for bitcoin-cli -generate
darwin: pass mlinker-version so that clang enables new features
walletdb: Handle cursor internally
Split SetWalletFlags into Add/LoadWalletFlags
test: Bump linter versions
doc: add release note for -getinfo displaying multiwallet balances
test: Improve "potential deadlock detected" exception message
macos: Bump to xcode 11.3.1 and 10.15 SDK
depends: bump MacOS toolchain
contrib: macdeploy: Remove historical extraction notes
contrib: macdeploy: Use apple-sdk-tools instead of xar+pbzx
native_cctools: Don't use libc++ from pinned clang
Adapt rest of tooling to new SDK naming scheme
test: add two edge case tests for CSubNet
test: refactor functional tests to use restart_node
refactor: Use uint16_t instead of unsigned short
qt: Do not truncate node flag strings in debugwindow.ui peers details tab.
build: Drop dead non-pkg-config code for libevent check
test: Test gettxouttsetinfo hash_type option
rpc: Add hash_type NONE to gettxoutsetinfo
rpc: gettxoutsetinfo can specify hash_type (only legacy option for now)
Change format of log2_work for uniform output (zero-padded)
ci: Run fuzz testing test cases (bitcoin-core/qa-assets) under valgrind to catch memory errors
doc: Remove -whitelistforcerelay from comment
test: Check that peers with forcerelay permission do not get a feefilter message
test: Add connect_nodes method
test: Add test for no net permission
test: Replace self.nodes[0].p2p with conn
test: remove redundant generate
test: pep-8 p2p_feefilter.py
scripted-diff: TxoutType C++11 scoped enum class
doc: Update outdated txnouttype documentation
rpc: Properly use underlying type in GetAllOutputTypes
rpc: Simplify GetAllOutputTypes with the Join helper
clang-format scheduler
docs: match usage text to script and location
wallet: Replace CDataStream& with CDataStream&& where appropriate
wallet: Remove confusing double return value ret+success
rpc/wallet: add conf_target as alias to confTarget in bumpfee
added CURRENCY_ATOM to express minimum indivisible unit
ci: Add test for clang-3.8 C++11 support
Disallow automatic conversion between hash types
Remove an apparently unnecessary conversion
Explicitly support conversion between equivalent hash types
Use explicit conversion from WitnessV0KeyHash -> CKeyID
Use explicit conversion from PKHash -> CKeyID
Convert CPubKey to WitnessV0KeyHash directly
Prefer explicit CScriptID construction
Prefer explicit uint160 conversion
contrib: macdeploy: Correctly generate macOS SDK
ci: Upgrade most ci configs to focal
doc: move doc to ci readme
ci: Have one config run in xenial to test against python3.5
travis: Always run multiprocess build
net: Avoid wasting inv traffic during IBD
refactor: block import implies IsInitialBlockDownload
Add ChainstateManager::ActiveChainstate
test: Add FeeFilterRounder test
test: hoist p2p values to test framework constants
test: improve msg sends and p2p disconnections in p2p_invalid_messages
test: refactor test_large_inv() into 3 tests with common method
test: add p2p_invalid_messages logging
net: update misbehavior logging for oversized messages
refactor: Extract GetBogoSize function
net: Use mockable time for ping/pong, add tests
util: Add count_microseconds helper
build: add -fstack-clash-protection to hardening flags
build: add -fcf-protection=full to hardening options
Make lint-spelling.py happy
[gui] Load PSBT from clipboard
[gui] PSBT Operations Dialog (sign & broadcast)
[rpc] refactor: consolidate sendmany and sendtoaddress code
FillPSBT: report number of inputs signed (or would sign)
Improve TransactionErrorString messages.
qa: Test concurrent wallet loading
wallet: Handle concurrent wallet loading
[net] split PushInventory()
ci: Run asan ci config on cirrus
cirrus: Clear dummy task
test: move sync_blocks and sync_mempool functions to test_framework.py
scripted-diff: Make SeparatorStyle a scoped enum
Add sanity check asserts to span when -DDEBUG
Test buffered valid message
Remove WalletDatabase::Create, CreateMock, and CreateDummy
scripted-diff: Replace WalletDatabase::Create* with CreateWalletDatabase
Add Create*WalletDatabase functions
doc: add C++17 release note for 0.21.0
walletdb: refactor Read, Write, Erase, and Exists into non-template func
Add tests for CPubKey serialization/unserialization
build: don't warn when doxygen isn't found
Add missing includes to fix compile errors
Remove unused variables
test: Add missing sync_blocks
[refactor] use waiting inside disconnect_p2ps
[test] wait for disconnect_p2ps to be reflected in getpeerinfo
[test] logging and style followups for bloomfilter tests
refactor: Use AbortError in FatalError
pep-8 test/functional/test_framework/util.py
test: refactor: Inline adjust_bitcoin_conf_for_pre_17
test: use subprocess.run() in test-security-check.py
tests: run test-security-check.py in CI
net: Remove dead logging code
net: Avoid redundant and confusing FAILED log
walletdb: Move BDB specific things into bdb.{cpp/h}
walletdb: moveonly: Move BerkeleyBatch Cursor and Txn funcs to cpp
walletdb: move IsWalletLoaded to walletdb.cpp
walletdb: Add IsBDBWalletLoaded to look for BDB wallets specifically
walletdb: Make SpliWalletFilePath non-static
tests: Add fuzzing harness for CHash{160,256}, C{HMAC_,}SHA{1,256,512}, CRIPEMD160, CSipHasher, etc.
tests: feature_backwards_compatibility.py test 0.16 up/downgrade
Skip hdKeypath of 'm'
refactor: Remove unused BlockAssembler::pblock member var
refactor: Remove unused EnsureChainman
scripted-diff: Replace EnsureChainman with Assert in unit tests
util: Add Assert identity function
[net] Add seed.bitcoin.wiz.biz to DNS seeds
RPC: Rephrase generatetoaddress help, and use PACKAGE_NAME
[p2p/refactor] move disconnect logic and remove misbehaving
[test] test disconnect for filterclear
[netprocessing] disconnect node that sends filterclear
move-only: Move NDEBUG compile time check to util/check
ci: Move travis workarounds to .travis.yml
build: Drop dead non-pkg-config code for qrencode check
build: Drop dead non-pkg-config code for ZMQ check
build: Drop dead non-pkg-config code for UNIVALUE check
build: Always use pkg-config
build: Always define ZMQ_STATIC for MinGW
[tests] Don't import asyncio to test magic bytes
Replace current benchmarking framework with nanobench
refactor: Drop ::HasWallets()
doc: improve subtree check instructions
init: use std::thread for ThreadImport()
build: remove BIP70 configure option
refactor: Remove unused request.fHelp
wallet: Make RPC help compile-time static
tests: Add fuzzing harness for {Read,Write}{LE,BE}{16,32,64} (crypto/common.h)
Add means to handle negative capabilities in thread safety annotations
scripted-diff: rename privkey with seckey in secp256k1 interface
Drop --disable-jni from libsecp256k1 configure options
[tests] move generate_wif_key to wallet_util.py
[tests] sort imports in rpc_createmultisig.py
Revert "[TESTS] Move base58 to own module to break circular dependency"
[doc] Coin: explain that IsSpent() can also mean never existed
Check size after Unserializing CPubKey
scripted-diff: rename node to peer for mininodes
[test] fix race conditions and test in p2p_filter
[test] sending invalid msgs to node with bloomfilters=0 causes disconnect
[test] add BIP 37 test for node with fRelay=false
[test] add mempool msg test for node with bloomfilter enabled
Make SetMiscWarning() accept bilingual_str argument
Make GetWarnings() return bilingual_str
refactor: Make GetWarnings() bilingual_str aware internally
test: mempool.dat compatibility between versions
gui: add missing translation.h include to fix build
[TESTS] Move base58 to own module to break circular dependency
Update MSVC build config for libsecp256k1
Squashed 'src/secp256k1/' changes from b19c000063..2ed54da18a
Update src/secp256k1 subtree
change blacklist to blocklist
test: Add BerkeleyDatabase tsan suppression
scripted-diff: replace MAX_BLOCKS_ONLY_CONNECTIONS with MAX_BLOCK_RELAY_ONLY_CONNECTIONS
refactor: Change Node::initError to take bilingual_str
refactor: Put`TryParsePermissionFlags` in anonymous namespace
refactor: Error message bilingual_str consistency
refactor: Replace RecursiveMutex with Mutex in warnings.cpp
Call SHA256AutoDetect in benchmark setup
refactor: Add AbortError alias
doc: Mention repo split in the READMEs
doc: Add redirect for GUI issues and pull requests
Refactor resource exhaustion test
test: Remove leftover comment in mining_basic
test: pep-8 mining_basic
doc: Extract net permissions doc
doc: release note for rpc getaddressinfo removals
rpc: getaddressinfo RPCResult fixup
rpc: remove deprecated getaddressinfo `labels: purpose`
rpc: remove deprecated getaddressinfo `label` field
util: Don't reference errno when pthread fails.
Move size limits to module-global
Remove two unneeded tests
doc: release note for `db` log category removal
log: remove deprecated `db` log category
ci: Switch to bitcoincore.org download
doc: Add documentation for 'checklevel' argument in 'verifychain' RPC call
Add functional test for P2P eviction logic of inbound peers
refactor: Replace RecursiveMutex with Mutex in netbase.cpp
test: Avoid overwriting the NodeContext member of the testing setup
refactor: Replace RecursiveMutex with Mutex in timedata.cpp
build: Add -Wshadow-field
refactor: Make CScriptVisitor stateless
rpc: Validate provided keys for query_options parameter in listunspent
refactor: Replace RecursiveMutex with Mutex in Shutdown()
[tests] Make mininode_lock non-reentrant
[tests] Don't call super twice in P2PTxInvStore.on_inv()
[tests] Don't acquire mininode_lock twice in wait_for_broadcast()
[tests] Only acquire lock once in p2p_compactblocks.py
doc: Add mypy to test dependencies
test: Do not swallow flake8 exit code
refactor: Combine GetWalletForJSONRPCRequest and EnsureWalletIsAvailable functions
build: turn on --enable-c++17 by --enable-fuzz
ci: tsan with wallet
doc: noban precludes maxuploadtarget disconnects
net: Reformat excessively long if condition into multiple lines
Drop MSG_NOPREFIX flag
Pass bilingual_str argument to AbortNode()
refactor: Use bilingual_str::empty()
refactor: Specify boost/thread/thread.hpp explicitly
txdb: Remove unused boost/thread
txindex: Remove unused boost/thread
test: Make valgrind.supp work on aarch64
[test] CScriptNum Decode Check as Unit Tests
validation: Make VerifyDB level 4 interruptible
validation: Remove unused boost interruption_point
build: improved output of configure for build OS
doc: Move 0.21 fragments into the main release notes
doc: Add release-notes-0.20.0.md
doc: Remove release notes of 0.20.1 release
tests: Avoid fuzzer-specific nullptr dereference in libevent when handling PROXY requests
wallet: Remove unused boost::thread_interrupted
rpc: add missing space in JSON parsing error message, update test
test: add multiwallet tests for bitcoin-cli -generate
cli: add multiwallet capability to GetNewAddress and -generate
test: add tests for bitcoin-cli -generate
cli: create bitcoin-cli -generate command
cli: extract ParseResult() and ParseError()
cli: create GenerateToAddressRequestHandler class
cli: create GetNewAddress()
rpc: make generatetoaddress locals const
This PR adds initial support for type hints checking in python scripts.
refactor: replace CNode pointers by references within net_processing.{h,cpp}
build: Enable unreachable-code-loop-increment
qt: lock cs_main, m_cached_tip_mutex in that order
rpc: create rpc/mining.h, hoist default max tries values to constant
[test] Add test for NODE_COMPACT_FILTER.
[net] Signal NODE_COMPACT_FILTERS if we're serving compact filters.
Apply cfilters review fixups
gui: Add Close All Wallets action
gui: Add closeAllWallets to WalletController
doc: Add warnings for http interfaces limitations
ci: Remove unused workaround
ci: Install llvm to get llvm symbolizer
test: Add more tsan suppressions
test: Add missing sync_blocks to wallet_hd
test: pep-8 wallet_hd
doc: Sync "how to upgrade" with 0.20.0 release notes
doc: Add release notes for 17219
ci: Mute depends logs completely
test: Extend tsan suppressions for clang stdlib
ci: Use libc++ instead of libstdc++ for tsan
ci: Set halt_on_error=1 for tsan
ci: Deduplicate DOCKER_EXEC
cirrus: Remove no longer needed install step
tests: Add fuzzing harness for functions in script/sign.h
tests: Add fuzzing harness for functions in script/sigcache.h
tests: Add fuzzing harness for functions in script/interpreter.h
tests: Add fuzzing harness for functions in script/descriptor.h
tests: Add fuzzing harness for functions in script/bitcoinconsensus.h
tests: Fill fuzzing coverage gaps for functions in script/script.h, script/script_error.h and script/standard.h
rpc: Remove special case for unknown service flags
Limit scope of all global std::once_flag
test: Explain that a bug should be filed when the test fail
util: dedup code in callers of serviceFlagToStr()
util: simplify the interface of serviceFlagToStr()
tests: Add fuzzing helper functions ConsumeDataStream, ConsumeTxDestination and ConsumeUInt160
net: improve code documentation for dns seed behaviour
gui, refactor: Register Qt meta types in application constructor
doc: Switch scheduler to doxygen comments
scheduler: Replace stop(true) with StopWhenDrained()
Add missing QPainterPath include
build: Only allow ASCII identifiers
[tools] Update clang-format config
doc: Explain that anyone can work on good first issues, move text to CONTRIBUTING.md
doc: Expand section on Getting Started
doc: Add headings to CONTRIBUTING.md
doc: Remove unused documentation about unimplemented features
doc: Switch boost::thread to std::thread in scheduler
validation: use std::chrono in IsCurrentForFeeEstimation()
validation: use std::chrono in CChainState::FlushStateToDisk()
scripted-diff: replace gArgs with argsman
Create a local class inherited from BasicTestingSetup with a localized args manager and put it into the getarg_tests namespace
test: Remove unused scheduler.h include from the common setup
scheduler: Remove unused REVERSE_LOCK
build: Replace -Wthread-safety-analysis with broader -Wthread-safety
Get rid of -Wthread-safety-precise warnings
Use template function instead of void* parameter
refactor: Rename LockGuard to StdLockGuard for consistency with StdMutex
Add thread safety annotated wrapper for std::mutex
Remove g_rpc_chain global
refactor: replace RegisterWalletRPCCommands with GetWalletRPCCommands
depends: Propagate only specific CLI variables to sub-makes
depends: boost: Use clang toolset if clang in CXX
depends: boost: Split target-os from toolset
depends: boost: Specify toolset to bootstrap.sh
depends: Propagate well-known vars into depends
walletdb: Remove unsed boost/thread
qt: Add privacy feature to Overview page
doc : add link to readme.md in the first section
wallet: Make PeriodicFlush uninterruptible
qt: increase console command max length
[test] Add test for cfilters.
[net processing] Message handling for getcfilters.
[refactor] Pass CNode and CConnman by reference
Remove outdated comment about DER encoding
logging: thread safety annotations
refactor: replace pointers by references within tx_verify.{h,cpp}
util/system.cpp: add thread safety annotations for dir_locks
[doc] Update unbroadcast description in RPC results
[trivial] Remove misleading 'const'
[test] Manage node connections better in mempool persist test
[doc] Provide rationale for randomization in scheduling.
[mempool] Don't throw expected error message when upgrading
[test] Test that wallet transactions aren't rebroadcast before 12 hours
[test] P2P connection behavior should meet expectations
[test] updates to unbroadcast test
[docs] add release notes
Add release notes about salvage changes
Move RecoverKeysOnlyFilter into RecoverDataBaseFile
Move RecoverDatabaseFile and RecoverKeysOnlyFilter into salvage.{cpp/h}
Make BerkeleyBatch::Recover and WalletBatch::RecoverKeysOnlyFilter standalone
Expose a version of ReadKeyValue and use it in RecoverKeysOnlyFilter
Move BerkeleyEnvironment::Salvage into BerkeleyBatch::Recover
walletdb: remove fAggressive from Salvage
walletdb: don't automatically salvage when corruption is detected
wallet: remove -salvagewallet
Add basic test for bitcoin-wallet salvage
wallettool: Add a salvage command
tests: Add fuzzing harness for CCoinsViewCache
Remove old serialization primitives
Convert LimitedString to formatter
Convert wallet to new serialization
BlockTip struct created and connected to notifyHeaderTip and notifyBlockTip signals.
Added best block hash to the NotifyHeaderTip and NotifyBlockTip signals.
test: Remove global wait_until from p2p_getdata
test: Default mininode.wait_until timeout to 60s
qt: Add BitcoinUnits::formatWithPrivacy() function
test: pep-8 p2p_getdata.py
gui: update Qt base translations for macOS release
doc: Drop protobuf stuff
trivial: Suggested cleanups to surrounding code
rpc: Make gettxoutsetinfo/GetUTXOStats interruptible
rpc: factor out RpcInterruptionPoint from dumptxoutset
[test] Add test for cfheaders
[net processing] Message handling for getcfheaders.
[doc] Add comment for m_headers_cache
tests: Don't limit fuzzing inputs to 1 MB for afl-fuzz (now: ∞ ∀ fuzzers)
doc: Add and fix comments about never destroyed objects
Split SetActiveScriptPubKeyMan into Add/LoadActiveScriptPubKeyMan
Split SetHDChain into AddHDChain and LoadHDChain
refactor: Replace const char* to std::string
validation: Mark g_chainman DEPRECATED
validation: Make ProcessNewBlock*() members of ChainstateManager
validation: Make PruneOneBlockFile() a member of ChainstateManager
validation: Make LoadBlockIndex() a member of ChainstateManager
net: Pass chainman into PeerLogicValidation
node: Add chainman alias for g_chainman
test: Set -logthreadnames in unit tests
init: Setup scheduler in tests and init in exactly the same way
test: Default --previous-releases to false if dir is empty
test: Replace TEST_PREVIOUS_RELEASES env var with test_framework option
test: add -getinfo multiwallet functional tests
rpc: drop unused JSONRPCProcessBatchReply size arg, refactor
cli: use GetWalletBalances() functionality for -getinfo
cli: create GetWalletBalances() to fetch multiwallet balances
cli: lift -rpcwallet logic up to CommandLineRPC()
cli: extract connection exception handler, -rpcwait logic
tests: implement base58_decode
Convert Qt to new serialization
guix: Add clarifying documentation for V env var
net: Use C++11 member initialization in protocol
Add comments to CustomUintFormatter
[test] wait for inital broadcast before comparing mempool entries
[mempool] sanity check that all unbroadcast txns are in mempool
[rpc] add unbroadcast info to mempool entries and getmempoolinfo
Change docs for walletcreatefundedpsbt RPC method
http: Avoid crash when g_thread_http was never started
test: Replace inline-comments with logs, pep8 formatting
init: Remove confusing and redundant InitError
test/checkqueue_tests: thread safety annotations
rpc/blockchain.cpp: thread safety annotations for latestblock
net: fMsgProcWake use LOCK instead of lock_guard
wallet/wallet.h: Remove mutexScanning which was only protecting a single atomic bool
ci: Set DEBIAN_FRONTEND=noninteractive
ci: tsan on clang-9
refactor: Remove Node:: queries from GUI
qt: Add SynchronizationState enum to signal parameter
refactor: Remove Node::getReindex() call from GUI
refactor: Pass SynchronizationState enum to GUI
refactor: Remove unused bool parameter in RPCNotifyBlockChange()
refactor: Remove unused bool parameter in BlockNotifyGenesisWait()
Replace thread_local g_lockstack with a mutex-protected map
refactor: Refactor duplicated code into LockHeld()
refactor: Add LockPair type alias
refactor: Add LockStackItem type alias
Prevent UB in DeleteLock() function
[indexes] Add compact block filter headers cache
docs: Add notes on how to diasble rpc timeout in functional tests while attatching gdb.
test: Add capability to disable RPC timeout in functional tests.
[wallet] remove nLastResend logic
log: Remove "No rpcpassword set" from logs
Updated comment for the condition where a transaction relay is denied
gui: Remove un-actionable TODO
net: Run clang-format on protocol.h
net: Remove un-actionable TODO
log: Properly log txs rejected from mempool
compressor: use a prevector in compressed script serialization
Remove IBD check in sethdseed
Test that keys from inactive seeds are generated
Generate new keys for inactive seeds after marking used
Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan
Remove unnecessary blockfile SetPos
wallet: Minimal fix to restore conflicted transaction notifications
Switch from Optional<T> to std::optional<T> (C++17). Run clang-format.
tests: Fill fuzzing coverage gaps for functions in util/translation.h
tests: Fill fuzzing coverage gaps for functions in consensus/validation.h
tests: Fill fuzzing coverage gaps for functions in primitives/block.h
test: Remove const to work around compiler error on xenial
test: Check that invalid witness destinations can not be imported
scripts: add additional type annotations to security-check.py
scripts: add run_command to security-check.py
scripts: remove NONFATAL from security-check.py
scripts: no-longer check for 32 bit windows in security-check.py
build: enforce minimum required Windows version (7)
miner: Avoid stack-use-after-return in validationinterface
test: Remove UninterruptibleSleep from test and replace it by SyncWithValidationInterfaceQueue
validationinterface: Rework documentation, Rename pwalletIn to callbacks
test: Add unregister_validation_interface_race test
refactor: Remove g_rpc_node global
scripted-diff: Remove g_rpc_node references
refactor: Pass NodeContext to RPC and REST methods through util::Ref
Add util::Ref class as temporary alternative for c++17 std::any
qt: Remove QFont warnings with QPA=minimal
Do not answer GETDATA for to-be-announced tx
Simplify usage of Span in several places
Add Span constructors for arrays and vectors
Make pointer-based Span construction safer
Make Span size type unsigned
[net processing] Only send a getheaders for one block in an INV
Push down use of cs_main into FindTxForGetData
Abstract logic to determine whether to answer tx GETDATA
build: Enable -Wsuggest-override
multiprocess: add multiprocess travis configuration
depends: add MULTIPROCESS depends option
build: multiprocess autotools changes
guix: Make V=1 more powerful for debugging
fuzz: Stop nodes in process_message* fuzzers
test: use p2p constants in denial of service tests
p2p: add MAX_FEELER_CONNECTIONS constant
Add a link from ZMQ doc to ZMQ example in contrib/
avoided os-dependant path
fuzz: Give CNode ownership to ConnmanTestMsg in process_message fuzz harness
refactor: Add BerkeleyDatabaseVersion() function
rpcwallet: Replace pwallet-> with wallet.
rpcwallet: Replace boost::optional<T>::emplace with simple assignment of T{}
doc: add c++17-enable to fuzzing instructions
refactor: s/command/msg_type/ in CNetMsgMaker and CSerializedNetMsg
util: Drop OpOriginal() and OpTranslated()
gui: Do not translate InitWarning messages in debug.log
util: Enhance Join()
Set LD_LIBRARY_PATH consistently in travis tests
net: use CMessageHeader::HEADER_SIZE, add missing include
Remove unused ci configs that have been moved elsewhere
fuzz: Pass down MAKEJOBS to test_runner
build: don't pass -w when building for Windows
util: Enhance bilingual_str
fuzz: use std::optional for sep_pos variable
build: Enable -Werror=sign-compare
refactor: Rework asmap Interpret to avoid ptrdiff_t
[test] Add test for cfcheckpt
[net processing] Message handling for getcfcheckpt.
[init] Add -peerblockfilters option
fuzz: fix vector size problem in system fuzzer
[ci] make list of previous releases to download a setting
refactor: Remove override for final overriders
refactor: Use override for non-final overriders
Test txinwitness is accessible on coinbase vin
Expose txinwitness for coinbase in JSON form
test: Remove unnecessary disconnect_nodes call in rpc_psbt.py
test: remove redundant two-way disconnect_nodes calls
test: warn if nodes not connected before disconnect_nodes
travis: Remove s390x
test: explicit imports from test_framework.messages in p2p_invalid_messages.py
test: add inventory type constant MSG_CMPCT_BLOCK
test: replace inv type magic numbers by constants
test: remove glibc fdelt sanity check
build: remove fdelt_chk backwards compatibility code
qt: Reset toolbar after all wallets are closed
qt: Display warnings as rich text
rpc: Relock wallet only if most recent callback
travis: Remove valgrind
build: make linker checks more robust
rpc/blockchain.cpp: Remove g_utxosetscan mutex that is only protecting a single atomic variable
test: Remove RPCOverloadWrapper boilerplate
build: enable -Werror=gnu
contrib: Remove optimize-pngs.py script, which lives in the maintainer repo
wallet: error if an explicit fee rate was given but the needed fee rate differed
Add test for param interaction b/w -blocksonly and -whitelistforcerelay
Change SetType to SetInternal and remove m_address_type
Remove unimplemented SetCrypted from DescriptorScriptPubKeyMan
rpc: createwallet warning that descriptor wallets are experimental
docs: Add release notes for descriptor wallets
build: Suppress -Wdeprecated-copy warnings
valgrind : remove duplicate BCLog::Logger suppression
valgrind: remove rest_blockhash_by_height suppression
qt: Rename slot to updateDisplayUnit()
qt: Overhaul ReceiveRequestDialog
test: Add test for conflicted wallet tx notifications
util: Cleanup translation.h
doc: Do not translate technical or extremely rare errors
Make InitError bilingual
Make ThreadSafe{MessageBox|Question} bilingual
gui: Add detailed text to BitcoinGUI::message
rel-builds: Specify core.abbrev for git-rev-parse
Drop unused GIT_COMMIT_DATE macro
refactor: Remove duplicated code
[test] backwards compatibility: bump v0.19.0.1 to v0.19.1
[test] add v0.16.3 backwards compatibility test
Remove CCoinsViewCache::GetValueIn(...)
build: warn on potentially uninitialized reads
tests: feature_backwards_compatibility.py test downgrade after upgrade
test: add factor option to adjust test timeouts
have GenerateNewKey and DeriveNewChildKey take a CHDChain as an argument
build: Rename BUILD_* macros and the code self-descriptive
scripted-diff: Rename share/genbuild.sh macros to more meaningful ones
build: Accomodate makensis v2.x
guix: Remove logical cores requirement
lint: Also enable source statements for non-gitian
rel-builds: Directly deploy win installer to OUTDIR
wallet: Remove trailing whitespace from potential translation strings
wallet: Report full error message in wallettool
wallet: Avoid translating RPC errors when creating txs
wallet: Avoid translating RPC errors when loading wallets
Revert "gui: Avoid Wallet::GetBalance in WalletModel::pollBalanceChanged"
Get rid of BindWallet
gui: Avoid wallet tryGetBalances calls before TransactionChanged or BlockTip notifications
Disable CWalletTx copy constructor
Cancel wallet balance timer when shutdown requested
Avoid copying CWalletTx in LoadToWallet
Switch transaction table to use wallet height not node height
Get rid of unneeded CWalletTx::Init parameter
Remove CWalletTx merging logic from AddToWallet
[wallet] Remove locked_chain from CWallet, its RPCs and tests
[wallet] Move methods from Chain::Lock interface to simple Chain
[wallet] Move getBlockHash from Chain::Lock interface to simple Chain
[wallet] Move getBlockHeight from Chain::Lock interface to simple Chain
[wallet] Move getHeight from Chain::Lock interface to simple Chain
test: Strip down previous releases boilerplate
tests: Clarify how we avoid hitting the signed integer overflow in CFeeRate::GetFeePerK() when fuzzing
tests: Add fuzzing harness for IsRBFOptIn(...)
tests: Add fuzzing harness for CBlockPolicyEstimator
test: Add test for GetRandMillis and GetRandMicros
Add templated GetRandomDuration<>
build: add -Wgnu to compile flags
Remove use of non-standard zero variadic macros
Drop unused LOG_TIME_MICROS helper
prevector: Avoid unnamed struct, which is a GNU extension
test: fix message for ECC_InitSanityCheck test
[docs] Improve commenting in ProcessGetData()
[test] test that an invalid GETDATA doesn't prevent processing of future messages
qt: Track QEvent::Resize during animation
Use salted hasher instead of nonce in sigcache
[net processing] ignore unknown INV types in GETDATA messages
[net processing] ignore tx GETDATA from blocks-only peers
test: added test for upgradewallet RPC
rpc: Add mutex to guard deadlineTimers
Add Hash Padding Microbenchmarks
test: add test for witness commitment index
validation: Add minimum witness commitment size constant
fix: update rest info on block size and json
rpc: Do not advertise dumptxoutset as a way to flush the chainstate
Drop unused CLIENT_VERSION_SUFFIX macro
net: remove is{Empty,Full} flags from CBloomFilter, clarify CVE fix
tests: Add missing sync_all to wallet_importdescriptors.py
nsis: Specify OutFile path only once
guix: Expose GIT_COMMON_DIR in container as readonly
guix: Make source tarball using git-archive
gitian: Limit sourced script to just assignments
ci: Document why tests can not be run on mac
init: Remove boost from ThreadImport
tests: Add fuzzing harness for MessageSign, MessageVerify and other functions in util/message.h
ci: Add and document BASE_BUILD_DIR
wallet: Make sure no WalletDescriptor members are uninitialized after construction
wallet: Make sure no DescriptorScriptPubKeyMan members are uninitialized after construction
doc: Better explain GNU ld's dislike of ld64's options
ci: Run functional tests on mac again
test: Add CreateWalletFromFile test
Prevent valgrind false positive in rest_blockhash_by_height
wallet: Recommned absolute path for dumpwallet
test: use unittest and test_runner for test framework unit testing
tests: Sort fuzzing harnesses
tests: Add fuzzing coverage for JSONRPCTransactionError(...) and RPCErrorFromTransactionError(...)
tests: Add fuzzing coverage for TransactionErrorString(...)
tests: Add fuzzing coverage for FormatHDKeypath(...) and WriteHDKeypath(...)
tests: Add fuzzing coverage for CHECK_NONFATAL(...)
tests: Add fuzzing coverage for StringForFeeReason(...)
tests: Add fuzzing harness for functions in system.h (ArgsManager)
qt: remove todo bug fix for old versions of Qt
test: Remove raw-tx byte juggling in mempool_reorg
test: check misbehavior more independently in p2p_filter.py
test: use zero-argument super() shortcut (Python 3.0+)
bench: Start nodes with -nodebuglogfile
test: add coverage for -rpcwallet cli option
test: Add mempool_updatefromblock.py
fuzz: Remove enumeration of expected deserialization exceptions in ProcessMessage(...) fuzzer
tests: Add fuzzing harness for functions in primitives/transaction.h
refactor: test: use wait_for_getdata() in p2p_compactblocks.py
[mempool] Persist unbroadcast set to mempool.dat
[test] Integration tests for unbroadcast functionality
[refactor/test] Extract P2PTxInvStore into test framework
[wallet] Update the rebroadcast frequency to be ~1/day.
[p2p] Reattempt initial send of unbroadcast transactions
[util] Add method that returns random time in milliseconds
[mempool] Track "unbroadcast" transactions
Add a --descriptors option to various tests
tests: Add RPCOverloadWrapper which overloads some disabled RPCs
Correctly check for default wallet
Implement CWallet::IsSpentKey for non-LegacySPKMans
Return error when no ScriptPubKeyMan is available for specified type
Change wallet_encryption.py to use signmessage instead of dumpprivkey
Functional tests for descriptor wallets
add importdescriptors RPC and tests for native descriptor wallets
Add IsLegacy to CWallet so that the GUI knows whether to show watchonly
Generate new descriptors when encrypting
Be able to create new wallets with DescriptorScriptPubKeyMans as backing
Implement GetMetadata in DescriptorScriptPubKeyMan
Change GetMetadata to use unique_ptr<CKeyMetadata>
Implement FillPSBT in DescriptorScriptPubKeyMan
Implement SignMessage for descriptor wallets
Implement SignTransaction in DescriptorScriptPubKeyMan
Implement GetSolvingProvider for DescriptorScriptPubKeyMan
Implement GetKeypoolOldestTime and only display it if greater than 0
Implement ReturnDestination in DescriptorScriptPubKeyMan
Implement GetReservedDestination in DescriptorScriptPubKeyMan
Implement Unlock and Encrypt in DescriptorScriptPubKeyMan
Implement GetNewDestination for DescriptorScriptPubKeyMan
Implement TopUp in DescriptorScriptPubKeyMan
Implement SetupGeneration for DescriptorScriptPubKeyMan
Implement writing descriptorkeys, descriptorckeys, and descriptors to wallet file
Implement several simple functions in DescriptorScriptPubKeyMan
Add IsSingleType to Descriptors
Implement loading of keys for DescriptorScriptPubKeyMan
Load the descriptor cache from the wallet file
Implement GetID for DescriptorScriptPubKeyMan
Implement IsHDEnabled in DescriptorScriptPubKeyMan
Implement MarkUnusedAddresses in DescriptorScriptPubKeyMan
Implement IsMine for DescriptorScriptPubKeyMan
Add LoadDescriptorScriptPubKeyMan and SetActiveScriptPubKeyMan to CWallet
Implement SetType in DescriptorScriptPubKeyMan
Store WalletDescriptor in DescriptorScriptPubKeyMan
Add a lock cs_desc_man for DescriptorScriptPubKeyMan
Introduce WalletDescriptor class
Create LegacyScriptPubKeyMan when not a descriptor wallet
Return nullptr from GetLegacyScriptPubKeyMan if descriptor wallet
Add WALLET_FLAG_DESCRIPTORS
Introduce DescriptorScriptPubKeyMan as a dummy class
Introduce SetType function to tell ScriptPubKeyMans the type and internal-ness of it
[net processing] Move all const declarations to top of net_processing.cpp
[validation] Move all const declarations to top of validation.h
[validation] Move validation-only consts to validation.cpp
[net processing] Move net processing consts to net_processing.cpp
scripts: add PE .reloc section check to security-check.py
test: Check submitblock return values
tests: Add fuzzing harness for functions in primitives/block.h
test: check for matching object hashes in wait_for_getdata
doc: Document how to fuzz Bitcoin Core using honggfuzz
doc: Add wallet release notes for 0.21.0
depends: Add --sysroot option to mac os native compile flags
Add release notes skeleton, so that notes can be filled easier
test: Remove unused, undocumented and misleading CScript.__add__
[docs] use consistent naming for possible_overwrite
[tests] small whitespace fixup
scripted-diff: Rename PRUNED to SPENT in coins tests
[docs] Improve commenting in coins.cpp|h
[test] add 8 error messages to feature_segwit and change version to type
test: display command line options passed to send_cli() in debug log
bench: add CAddrMan benchmarks
scripts: add MACHO LAZY_BINDINGS test to test-security-check.py
scripts: add MACHO Canary check to security-check.py
doc: fix typo in configure.ac
test: add further BIP37 size limit checks to p2p_filter.py
tests: Add fuzzing harness for Golomb-Rice coding (GolombRiceEncode/GolombRiceDecode)
Do not expose and consider -logthreadnames when it does not work
doc: note why we can't use thread_local with glibc back compat
test: fix intermittent race condition in interface_bitcoin_cli.py
test: add wait_for_cookie_credentials() to test framework
wallet: Refactor WalletRescanReserver to use wallet reference
ci: Remove xenial tsan workaround
test: Increase debugging to hunt down mempool_reorg intermittent failure
build: fix ASLR for bitcoin-cli on Windows
test: Properly raise FailedToStartError when rpc shutdown before warmup finished (take 2)
test: Replace boost::mutex with std::mutex
test: Bump timeout in wallet_import_rescan
fuzz: Run in parallel
fuzz: http_request workaround for libevent < 2.1.1
bench: Replace ::mempool globabl with test_setup.mempool
bench: Remove requirement that all benches use RegTestingSetup
refactor: Drop unused ${WRAP_DIR}/${HOST} directory
build: Drop make dist in gitian builds
ci: Disable valgrind functionl tests on forked repos to avoid timeouts
fuzz: fix unused variable compiler warning
build: Set libevent minimum version to 2.0.21
test: Move boost/stdlib includes last
Adding build instructions to Bitcoin Core, fixes #18658
wallet: Add BlockUntilSyncedToCurrentChain to dumpwallet
refactor: Remove unused methods CBloomFilter::reset()/clear()
[tests] Don't initialize PrecomputedTransactionData in txvalidationcache tests
scripted-diff: Bump copyright headers
scripted-diff: Sort test includes
util: Document why ArgsManager (con/de)structor is not inline
Disable unavailable context menu items in transactions tab
log: Use Join() helper when listing log categories
ci: Limit cache size regardless of NO_DEPENDS
rpc: Document all aliases for first arg of listtransactions
rpc: Document all aliases for second arg of getblock
bench: Remove unused argsman.ClearArgs
scripted-diff: Replace gArgs with local argsman in bench
tools: Add unused argsman to bench_bitcoin
test: Verify findCommonAncestor always initializes outputs
fuzz: Disable debug log file
test: Add optional extra_args to testing setup
node: Add args alias for gArgs global
[doc] Update thread information in developer docs
test: Avoid accessing free'd memory in validation_chainstatemanager_tests
test: add -getinfo "unlocked_until" and "headers" coverage
test: verify cli.getwalletinfo in wallet section
test: verify bitcoin-cli -version with node stopped
test: add coverage for bitcoin-cli -rpcwait
script: Remove undocumented and unused operator+
scripted-diff: test: replace command with msgtype
qt: Make bitcoin.ico non-executable
tests: Add std::locale::global to list of locale dependent functions in lint-locale-dependence.sh
gui: use PACKAGE_NAME in exception message
test: Create cached blocks not in the future
appveyor: Remove clcache
ci: Add fuzzbuzz integration
test: add more inactive filter tests to p2p_filter.py
rpc: settxfee respects -maxtxfee wallet setting
appveyor: Disable functional tests for now
test: Improve naming and logging of avoid_reuse tests
wallet: Prefer full destination groups in coin selection
util: Detect posix_fallocate() instead of assuming
test: Add various low-level p2p tests
Remove -upgradewallet startup option
Add upgradewallet RPC
Make UpgradeWallet a member function of CWallet
Have UpgradeWallet take the version to upgrade to and an error message out parameter
Only run UpgradeWallet if the wallet needs to be upgraded
Move wallet upgrading to its own function
Added my fingerprint Stephan Oeste (Emzy)
script: Disallow silent bool -> CScript conversion
gitian: add jonatack gpg key fingerprint
doc: default minconf for getbalance should be 0
rpc: Rename first arg of generateblock RPC to "output"
test: Remove REJECT message code
test: Try once more when RPC connection fails on Windows
test: Document why connection is re-constructed on windows
test: Remove python 3.4 workaround
cirrus: Bump freebsd to 12.1
build: add linker optimization flags to guix
build: add linker optimization flags to gitian descriptors
test: add rpc_signrawtransaction logging
test: refactor rpc_signrawtransaction witness script tests
[REFACTOR] Initialize PrecomputedTransactionData in CheckInputScripts
Add C++17 test to Travis
gitian: Add missing automake package to gitian-win-signer.yml
test: Extend wallet_dump test to cover comments
refactor: test: improve wait_for{header,merkleblock} interface
test: complete impl. of msg_merkleblock and wait_for_merkleblock
Add configure option for c++17
Support conversion between Spans of compatible types
Update ax_cxx_compile_stdcxx.m4
rpc: Remove deprecated migration code
build: Bump gitian descriptors to 0.21
ci: Add pip cache
ci: Print ccache statistics summary
ci: Drop unused WINEDEBUG variable
build: Bump version to 0.20.99
test: Check that the version message does not leak the local address of the node
Correct scripted-diff example link
test: update and harden interface_bitcoin_cli tests
cli -getinfo: use getbalances instead of deprecated getwalletinfo balance
net: limit BIP37 filter lifespan (active between 'filterload' and 'filterclear')
ci: Rename RUN_CI_ON_HOST to DANGER_RUN_CI_ON_HOST
ci: Add native s390x
script: prevent UB when computing abs value for num opcode serialize
Add asmap_direct fuzzer that tests Interpreter directly
Make asmap Interpreter errors fatal and fuzz test it
Add additional effiency checks to sanity checker
Add asmap sanity checker
Improve asmap Interpret checks and document failures
Deal with decoding failures explicitly in asmap Interpret
Introduce Instruction enum in asmap
doc: Clarify developer notes about constant naming
test: Set -use_value_profile=1 when merging fuzz inputs
tests: Add coverage of {,Incremental}DynamicUsage(const std::set<X, Y>& s) to existing fuzzer
tests: Add fuzzing harness for classes/functions in cuckoocache.h
tests: Add fuzzing harness for classes/functions in checkqueue.h
tests: Add coverage of GetVirtualTransactionSize(...) to existing fuzzer
tests: Add fuzzing harness for AdditionOverflow(...)
tests: Add fuzzing harness for FeeFilterRounder
ci: Run unit tests sequential once
appveyor: Enable minimal unit test logging to aid debugging
test: Properly raise FailedToStartError when rpc shutdown before warmup finished
build: Update ax_boost_mase.m4 to the latest serial
guix: Appease travis.
guix: Use gcc-9 for mingw-w64 instead of 8
guix: Don't set MINGW_HAS_SECURE_API CFLAG in depends
guix: Bump to upstream commit with mingw-w64 changes
Avoid non-trivial global constants in SHA-NI code
Add test for UnregisterAllValidationInterfaces bug
Do not clear validationinterface entries being executed
Reorder the test instructions by number
Only run sanity check once at the end
Assert immediately rather than caching failure
Make a fuzzer-based copy of the prevector randomized test
Wallet: Change IsMine check in CWallet::DelAddressBook from assert to failure
Wallet: Replace CAddressBookData.name with GetLabel() method
QA: Test that change doesn't turn into non-change when spent in an avoid-reuse wallet
test: Use one node to avoid a race due to missing sync in rpc_signrawtransaction
rpc: Make verifychain default values static, not depend on global args
test: wallet_bumpfee assertion fixup
test: relax bumpfee dust_to_fee txsize an extra vbyte
Remove PID file at the very end
tests: Add fuzzing harness for HTTPRequest, libevent's evhttp and related functions
build: remove -Qunused-arguments workaround for clang + ccache
depends: Use default macos clang compiler
Add multiprocess travis configuration
Set LD_LIBRARY_PATH consistently in travis tests
libmultiprocess depends build
Multiprocess build changes
test: skip backwards compat tests if not compiled with wallet
scripted-diff: Replace strCommand with msg_type
Use getbalances in wallet_address_types tests
Shift coverage from getunconfirmedbalance to getbalances in wallet_abandonconflict tests
Improve getbalances coverage in wallet_balance tests
rpc: Avoid initialization-order-fiasco on static CRPCCommand tables
fuzz: Add process_messages harness
build: create test_fuzz library from src/test/fuzz/fuzz.cpp
tests: Add proof-of-work fuzzing harness
refactor: drop boost::signals2 in validationinterface
scripts: add MACHO lazy bindings check to security-check.py
test: remaining replacements of (send_message+sync_with_ping) with send_and_ping
fuzz: Extend script fuzz test
fuzz: Extend descriptor fuzz test
test: remove rapidcheck integration and tests
net: Hardcoded seeds update for 0.20
test: add BIP37 remote crash bug [CVE-2013-5700] test to p2p_filter.py
[doc] fix git add argument
fuzz: Add CScriptNum::getint coverage
fuzz: Avoid running over all inputs after merging them
guix: Check mingw symbols, improve SSP fix docs
guix: Expand on INT trap message
guix: Spelling fixes
guix: Reinstate make-ssp-fixed-gcc
guix: Bump time-machine for mingw-w64 patches
guix: Use gcc-8 for mingw-w64 instead of 7
guix: Set the well-known timezone env var
guix: Make x86_64-w64-mingw32 builds reproducible
guix: Remove dead links from README.
guix: Appease shellcheck.
guix: Improve guix-build.sh documentation
guix: Build support for Windows
Wallet: Add warning comments and assert to CWallet::DelAddressBook
Wallet: Avoid unnecessary/redundant m_address_book lookups
Wallet: Avoid treating change-in-the-addressbook as non-change everywhere
Wallet: New FindAddressBookEntry method to filter out change entries (and skip ->second everywhere)
Wallet: Add CAddressBookData::IsChange which returns true iff label has never been set
Wallet: Require usage of new CAddressBookData::setLabel to change label
scripted-diff: Wallet: Rename mapAddressBook to m_address_book
test: Add basic addr relay test
Bugfix: RPC: JSON null is not "None"
Bugfix: RPC: Don't use a continuation elipsis after an elision elipsis
Bugfix: RPC: Add missing commas and correct indentation of explicit ELISION
net: Pass connman const when relaying address
doc: Update webchat URLs in README.md
init: Replace URL_WEBSITE with PACKAGE_URL
Drop bitcoin-wallet dependency on libevent
Drop unintended bitcoin-tx dependency on libevent
build: Detect gmtime_* definitions via configure
chainparams: Bump assumed valid hash
rpc: Make rpc documentation not depend on rpc args
test: replace (send_message + sync_with_ping) with send_and_ping
test: remove redundant sync_with_ping after add_p2p_connection
rpc: Remove deprecated "size" from mempool txs
qt: Translations update pre-branch
Correctly compute redeemScript from witnessScript for signrawtransaction
doc: Explain new test logging
test: Remove redundant sync_with_ping after add_p2p_connection
test: Wait for both veracks in add_p2p_connection
rpc: Add documentation for deactivating settxfee
wallet: Avoid use of Chain::Lock in CWallet::GetKeyBirthTimes
wallet: Avoid use of Chain::Lock in CWallet::CreateTransaction
wallet: Avoid use of Chain::Lock in CWallet::ScanForWalletTransactions
wallet: Avoid use of Chain::Lock in rescanblockchain
wallet refactor: Avoid use of Chain::Lock in CWallet::RescanFromTime
wallet: Avoid use of Chain::Lock in listsinceblock
wallet: Avoid use of Chain::Lock in importmulti
wallet: Avoid use of Chain::Lock in importwallet and dumpwallet
wallet: Avoid use of Chain::Lock in importprunedfunds
wallet refactor: Avoid use of Chain::Lock in qt wallettests
wallet: Avoid use of Chain::Lock in tryGetTxStatus and tryGetBalances
refactor: Add interfaces::FoundBlock class to selectively return block data
gui: Delete progress dialog instead of hidding it
wallet: Handle duplicate fileid exception
doc: note the costs of fetching all pull requests
test: add BIP37 'filterclear' test to p2p_filter.py
Convert everything except wallet/qt to new serialization
Convert blockencodings_tests to new serialization
Convert merkleblock to new serialization
ci: Use Focal for fuzzers
Add SER_READ and SER_WRITE for read/write-dependent statements
Extend CustomUintFormatter to support enums
test: check that peer is connected when calling sync_*
test: Remove unsafe BOOST_TEST_MESSAGE
doc: block-relay-only is not blocksonly
net: Add missing cs_vNodes lock
tests: Add fuzzing harness for functions/classes in random.h
tests: Add fuzzing harness for LimitedString (serialize.h)
tests: Add fuzzing harness for functions/classes in span.h
tests: Add fuzzing harness for functions/classes in merkleblock.h
tests: Add fuzzing harness for functions/classes in flatfile.h
Update -blocksonly documentation
rpc: remove unused getbalances() code
Bugfix: RPC: Remove final comma for last entry of fixed-size Arrays and Objects in RPCResult
serialization: prevent int overflow for big Coin::nHeight
net: Make addr relay mockable
Add tests for generateblock
gui: Handle WalletModel::unload asynchronous
Add generateblock rpc
util: Replace i64tostr with ToString
[psbt] add file size limit
[gui] load PSBT
[gui] save PSBT to file
Move DEFAULT_MAX_RAW_TX_FEE_RATE to node/transaction.h
util: Remove unused itostr
Limit decimal range of numbers ParseScript accepts
test: add coverage for script parse error in ParseScript
tests: Add fuzzing harness for functions/classes in chain.h
tests: Add fuzzing harness for functions/classes in protocol.h
lockedpool: avoid sensitive data in core files (FreeBSD)
ci: Remove misplaced comments from folded block scalar
wallet: remove CreateTotalBumpTransaction()
wallet: remove totalfee from createBumpTransaction()
rpc: remove deprecated totalFee arg from RPC bumpfee
ci: Use Homebrew addon on native macOS
scripts: rename test_64bit_PE to test_PE
scripts: add MACHO NX check to security-check.py
scripts: add MACHO tests to test-security-check.py
ci: Only clone bitcoin-core/qa-assets when fuzzing
build: remove double LIBBITCOIN_SERVER from bench-Makefile
test: Add basic test for BIP 37
[scripts] previous_release: improve failed download error message
[consensus] MOVEONLY: Move single-sig checking EvalScript code to EvalChecksig
qt: Use parent-child relation to manage lifetime of OptionsModel object
[util] GetFileSize
[gui] send dialog: split on_sendButton_clicked
tests: Add fuzzing harness for classes/functions in blockfilter.h
tests: Add integer serialization/deserialization fuzzing harness
Update with new Windows code signing certificate
test: listsinceblock block height checks
tests: Add fuzzing harness for functions in net_permissions.h
tests: Add fuzzing harness for functions in timedata.h
tests: Add fuzzing harness for functions in addrdb.h
gui: avoid QT Designer/Form Editor re-formatting
gui: display Mapped AS in peers info window
validation: delay flushing undo files in syncing node case
Make VerifyWitnessProgram use a Span stack
script: fix SCRIPT_ERR_SIG_PUSHONLY error string
Check for overflow when calculating sum of outputs
test: add executable flag for rpc_estimatefee.py
build: Drop ZeroMQ patch for glibc < 2.12
build: Drop ZeroMQ patch for Mingw-w64 < 4.0
ci: Run feature_block and feature_abortnode in valgrind
tests: Don't assume presence of __builtin_mul_overflow in MultiplicationOverflow(...) fuzzing harness
test: delete wallet_bumpfee_totalfee_deprecation.py
test: update bumpfee testing from totalFee to fee_rate
scripts: add PE dylib checking to symbol-check.py
fixing documentation to not require rpcpassword
rpc: fix broken RPCExamples for waitforblock(height)
rpc: add missing HelpExampleRpc for getblockfilter
test: Remove ci timeout restriction in test_runner
doc: Add internal interface conventions to developer notes
refactor: Change createWallet, fillPSBT argument order
refactor: Change Chain::broadcastTransaction param order
refactor: Rename Chain::Notifications methods to be consistent with other interfaces methods
refactor: Rename Node::disconnect methods
refactor: Get rid of Wallet::IsWalletFlagSet method
doc: Temporary note that release notes should be edited in wiki
build: fix sysctl() detection on macOS
doc: Add fuzzing quickstart guides for libFuzzer and afl-fuzz. Simplify instructions.
Add bn2vch test to functional tests
Simplify bn2vch using int.to_bytes
Update merkle.cpp
net: fix use-after-free in tests
test: use fs namespace in dbwrapper unicodepath test
doc: mention MAKE=gmake workaround when building on a BSD
tests: Add harness which fuzzes EvalScript and VerifyScript using a fuzzed signature checker
protect g_chainman with cs_main
test: add basic tests for ChainstateManager
use ChainstateManager to initialize chainstate
refactor: move RewindBlockIndex to CChainState
validation: introduce unused ChainstateManager
validation: add CChainState.m_from_snapshot_blockhash
tests: simplify next_block() function in feature_block
doc: fix GetTimeMicros() comment in random.cpp
rand: remove getentropy() fallback for macOS < 10.12
DNS seeds: don't query DNS while network is inactive
DNS seeds: wait for 5m instead of 11s if 1000+ peers are known
tx: Bump transifex slug to 020x
qt: Periodical translations update
build: Remove extra tokens warning
build: Remove duplicated QT_STATICPLUGIN define
build: Use pkg-config in BITCOIN_QT_CONFIGURE for all hosts
build: Drop needless EXTRA_DIST content
tests: Add fuzzing harness for various functions taking std::string as input
tests: Add fuzzing harness for MultiplicationOverflow(...)
tests: Add fuzzing harness for CFeeRate
tests: Add fuzzing harness for CBlockHeader
tests: Add fuzzing harness for count_seconds(...)
test: Bump timeouts to avoid valgrind failures
Replace std::to_string with locale-independent alternative
Replace remaining literals BTC with CURRENCY_UNIT
rpc: Document an RPCResult for all calls; Enforce at compile time
rpc: Add missing newline in RPCResult description
util: Fail to parse space-only strings in ParseMoney(...) (instead of parsing as zero)
refactor: Remove mempool global from net
[rpc] fundrawtransaction: add_inputs option to control automatic input adding
[rpc] walletcreatefundedpsbt: don't automatically append inputs
build: Drop SOURCEDIST reordering
build: Use git archive as source tarball
[mempool] Remove NotifyEntryAdded and NotifyEntryRemoved callbacks
[validation] Remove pool member from ConnectTrace
[validation] Remove NotifyEntryRemoved callback from ConnectTrace
[validation] Remove conflictedTxs from PerBlockConnectTrace
[validation interface] Remove vtxConflicted from BlockConnected
[wallet] Notify conflicted transactions in TransactionRemovedFromMempool
guix: Remove now-unnecessary gcc make flag
fuzz: Add missing ECC_Start to key_io test
test: Bump rpc timeout in feature_assumevalid to avoid valgrind timeouts
test: Bump walletpassphrase timeouts in wallet_createwallet to avoid valgrind timeouts
util: HelpExampleRpc formatting fixup
tests: Add fuzzing of CSubNet, CNetAddr and CService related functions
tests: Fuzz HasAllDesirableServiceFlags(...) and MayHaveUsefulAddressDB(...)
tests: Fuzz DecodeBase64PSBT(...)
tests: Simplify code by removing unwarranted use of unique_ptr:s
tests: Fuzz DecodeHexBlk(...)
tests: Fuzz RecursiveDynamicUsage(const std::shared_ptr<X>& p)
tests: Fuzz operator!= of CService
tests: Increase fuzzing coverage of DecompressScript(...)
tests: Fuzz currently uncovered code path in TxToUniv(...)
tests: Re-arrange test cases in parse_univalue to increase coverage
doc: Explain rebase/squash policy in CONTRIBUTING.md
tests: Remove unit test from fuzzing harness
tests: Add deserialization fuzzing of SnapshotMetadata (utxo_snapshot), uint160 and uint256
tests: Add one specialized ProcessMessage(...) fuzzing binary per message type for optimal results when using coverage-guided fuzzing
tests: Add fuzzing harness for ProcessMessage(...)
ci: Enable all functional tests in valgrind
bumpfee test: exit loop at proper time with new fee value being compared
Add some test logging to wallet_bumpfee.py
doc: asmap release note
fuzz: Remove option --export_coverage from test_runner
refactor: move DUMP_BANS_INTERVAL to banman.h
scheduler: Make schedule* methods type safe
test: Explain why test logging should be used
qa: Add getdescriptorinfo functional test
Tests: Unit test related to WalletDB ReadKeyValue
Catch ios_base::failure specifically
Make lifetime correctness easier to see (avoid reference lifetime extension)
tests: Add fuzzing harness for CScriptNum operations
test: add logging to wallet_listsinceblock.py
tests: Add fuzzing harness for CScript operations
tests: Add common Consume* fuzzing functions
doc: Warn about wallet.dat re-use and backups
doc: Add historical release notes for 0.19.1
tests: Remove FUZZERS_MISSING_CORPORA
tests: Add basic fuzzing harness for CNetAddr/CService/CSubNet related functions (netaddress.h)
Clear any input_errors for an input after it is signed
Replace GetSigningProvider with GetSolvingProvider
Move direct calls to MessageSign into new SignMessage functions in CWallet and ScriptPubKeyMan
Move key and script filling and signing from CWallet::FillPSBT to ScriptPubKeyMan::FillPSBT
Move FillPSBT to be a member of CWallet
fuzz: Add option to merge input dir to test runner
doc: Remove --disable-ccache from docs
tests: Reset FUZZERS_MISSING_CORPORA to enable regression fuzzing for more harnesses
rpc/wallet: initialize nFeeRequired to avoid using garbage value on failure
Use CWallet::SignTransaction in CreateTransaction and signrawtransactionwithwallet
Implement CWallet::SignTransaction using ScriptPubKeyMan::SignTransaction
Add SignTransaction function to ScriptPubKeyMan and LegacyScriptPubKeyMan
Refactor rawtransaction's SignTransaction into generic SignTransaction function
fuzz: Add assert(script == decompressed_script)
build: Set minimum Automake version to 1.13
Cache parent xpub inside of BIP32PubkeyProvider
Only cache xpubs that have a hardened last step
Cache the immediate derivation parent xpub
Add DescriptorCache* read_cache and DescriptorCache* write_cache to Expand and GetPubKey
Rename BIP32PubkeyProvider.m_extkey to m_root_extkey
Track the index of the key expression in PubkeyProvider
Introduce DescriptorCache struct which caches xpubs
tests: Fuzz additional functions in the script fuzzing harness
tests: Fuzz additional functions in the transaction fuzzing harness
scheduler: Use C++11 member initialization, add shutdown assert
tests: Fuzz additional functions in the integer fuzzing harness
tests: Fuzz additional functions in the hex fuzzing harness
tests: Add key_io fuzzing harness
doc: remove Boost Chrono from install docs
test: remove Boost Chrono installation from CI
build: remove Boost Chrono detection from build system
build: remove chrono package from depends Boost
build: Add locale fuzzer to FUZZERS_MISSING_CORPORA
test: Check that wait_until returns if time point is in the past
lint-cppcheck: Remove -DHAVE_WORKING_BOOST_SLEEP_FOR
tests: Add fuzzing harness for locale independence testing
scheduler_tests: re-enable mockforward test
Drop unused reverselock.h
scheduler: switch from boost to std
sync.h: add REVERSE_LOCK
scheduler: don't rely on boost interrupt on shutdown
tests: Add fuzzing harness for CKey related functions
tests: Add float to FUZZERS_MISSING_CORPORA (temporarily)
tests: Add serialization/deserialization fuzzing for integral types
compressor: Make the domain of CompressAmount(...) explicit
[rpc] changed MineBlocksOnDemand to IsMockableChain
Remove redundant type information from rpc docs
refactor: Cast ping values to double before output
bnb: exit selection when best_waste is 0
lockedpool: When possible, use madvise to avoid including sensitive information in core dumps
refactor: Convert ping wait time from double to int64_t
refactor: Convert min ping time from double to int64_t
refactor: Convert ping time from double to int64_t
init: move asmap code earlier in init process
rpc: fix getpeerinfo RPCResult `mapped_as` type
net: extract conditional to bool CNetAddr::IsHeNet
logging: asmap logging and #include fixups
test: add functional test for an empty, unparsable asmap
config: separate the asmap finding and parsing checks
config: enable passing -asmap an absolute file path
config: use default value in -asmap config
test: add feature_asmap functional tests
test: Add bad-txns-*-toolarge test cases to invalid_txs
doc: Correct spelling errors in comments
test: Bump timeouts to accomodate really slow disks
wallet: use constant CWallets in rpcwallet.cpp
wallet: make ReserveDestination pwallet ivar const
wallet: make BackupWallet() const
wallet: make getters const
wallet/spkm: make GetOldestKeyPoolTime() const
wallet: use constant CWallets in rpcdump.cpp
wallet/db: make IsDummy() const
wallet/db: make Backup() const
wallet: make CanGetAddresses() const
wallet: make KeypoolCountExternalKeys() const
wallet: make CanGenerateKeys() const
make BlockUntilSyncedToCurrentChain() const
Change example addresses to bech32
Drop unused mach time headers
test: Add missing syncwithvalidationinterfacequeue
test: add unit test for non-standard "scriptsig-not-pushonly" txs
refactor: test/bench: dedup SetupDummyInputs()
test: check specific reject reasons in feature_csv_activation.py
util: Fail to parse empty string in ParseMoney
util: Remove unused ParseMoney that takes a c_str
Make AnalyzePSBT next role calculation simple, correct
test: eliminiated magic numbers in feature_csv_activation.py
test: check for OP_CSV empty stack fail reject reason in feature_csv_activation.py
test: test OP_CSV empty stack fail in feature_csv_activation.py
Templatize ValidationState instead of subclassing
Remove ValidationState's constructor
Refactor FormatStateMessage into ValidationState
Add missing step in win deployment instructions
build: add --enable-determinism configure flag
test: check custom descendant limit in mempool_packages.py
test: Disable mockforward scheduler unit test for now
Convert blockencodings.h to new serialization framework
Add CustomUintFormatter
tests: Add fuzzing harness for rolling bloom filter class CRollingBloomFilter
tests: Add fuzzing harness for bloom filter class CBloomFilter
test: Reduce unneeded whitelist permissions in tests
rpc: Auto-format RPCResult
rpc: Move OuterType enum to header
refactor: Use psbt forward declaration
Add ChainClient setMockTime, getWallets methods
test: Add cost_of_change parameter assertions to bnb_search_test
scripted-diff: Wallet: Rename incorrectly named *UsedDestination
Consolidate service flag bit-to-name conversion to a shared serviceFlagToStr function
Bugfix: GUI: Use unsigned long long type to avoid implicit conversion of MSB check
util: Remove unused MilliSleep
scripted-diff: Replace MilliSleep with UninterruptibleSleep
util: Add UnintrruptibleSleep
test: Set catch_system_errors=no on boost unit tests
util: Avoid potential uninitialized read in FormatISO8601DateTime(int64_t nTime) by checking gmtime_s/gmtime_r return value
test: Remove incorrect assumptions in validation_flush_tests
test: Tabs to spaces in all tests
Add static_asserts to ser_X_to_Y() methods
tests: Improve test runner output in case of target errors
tests: Add --exclude integer,parse_iso8601 (temporarily) to make Travis pass until uninitialized read issue in FormatISO8601DateTime is fixed
tests: Add support for excluding fuzz targets using -x/--exclude
tests: Remove -detect_leaks=0 from test/fuzz/test_runner.py - no longer needed
add: test that transactions expire from mempool
httpserver: use own HTTP status codes
ci: Run fuzz testing test cases under valgrind
doc: Minor grammatical changes and flow improvements
[rpc] expose ability to mock scheduler via the rpc
[lib] add scheduler to node context
gui: Avoid Wallet::GetBalance in WalletModel::pollBalanceChanged
tests: Add --valgrind option to test/fuzz/test_runner.py for running fuzzing test cases under valgrind
Add DifferenceFormatter
Make VectorFormatter support stateful formatters
Convert CCompactSize to proper formatter
Refactor message hashing into a utility function
Deduplicate the message signing code
Deduplicate the message verifying code
ci: use --enable-werror on more hosts
build: add Wreturn-type to Werror flags
[test] add chainparams property to indicate chain allows time mocking
[test] unit test for new MockForward scheduler method
[util] allow scheduler to be mocked
refactor: rpc: Remove vector copy from listtransactions
rpc: update validateaddress RPCExamples to bech32
build: pass -fno-ident in Windows gitian descriptor
Bugfix: GUI: Check validity when QValidatedLineEdit::setText is called
Bugfix: GUI: Re-check validity after QValidatedLineEdit::setCheckValidator
Bugfix: GUI: Only apply invalid style to QValidatedLineEdit, not its tooltip
gui: Throttle GUI update pace when -reindex
[REFACTOR] Abstract out script execution out of VerifyWitnessProgram()
Revert "Store p2sh scripts in AddAndGetDestinationForScript"
[test] check for addmultisigaddress regression
wallet: Improve LegacyScriptPubKeyMan::CanProvide script recognition
tests: Avoid hitting some known minor tinyformat issues when fuzzing strprintf(...)
doc: remove PPA note from release-process.md
[test] add 0.19 backwards compatibility tests
[test] add v0.17.1 wallet upgrade test
[tests] add wallet backwards compatility tests
[scripts] support release candidates of earlier releases
[tests] check v0.17.1 and v0.18.1 backwards compatibility
[scripts] build earlier releases
Get the OutputType for a descriptor
net: Remove forcerelay of rejected txs
Get rid of VARINT default argument
Ignore only auto-generated .vcxproj files
Specify ignored bitcoin-qt file precisely
ci: Check for submodules
build: Add cov_fuzz target
build: link fuzz/test_runner.py for out-of-tree builds
build: Remove unused USE_COVERAGE
test: set a name for CI Docker containers
test: Disable s390 build on travis
build: Skip i686 build by default in guix and gitian
depends: Remove reference to win32
Update univalue subtree
Squashed 'src/univalue/' changes from 5a58a46671..98261b1e7b
Qt: pass clientmodel changes from walletframe to walletviews
Convert undo.h to new serialization framework
Make std::vector and prevector reuse the VectorFormatter logic
Add custom vector-element formatter
doc: link to homebrew's troubleshooting page
refactor: Work around GCC 9 `-Wredundant-move` warning
net: Fail instead of truncate command name in CMessageHeader
logging: enable thread_local usage on macOS
build: don't embed a build-id when building libdmg-hfsplus
random: don't special case clock usage on macOS
gui: Add close window shortcut
test: replace 'regtest' leftovers by self.chain
[wallet] allow transaction without change if keypool is empty
[wallet] CreateTransaction: simplify change address check
[wallet] translate "Keypool ran out" message
build: add additional attributes to Win installer
gui: Drop PeerTableModel dependency to ClientModel
build: use macOS 10.14 SDK
depends: native_cctools 921, ld64 409.12, libtapi 1000.10.8
depends: clang 6.0.1
net: reference instead of copy in BlockConnected range loop
Remove false positive GCC warning
Make asmap Interpret tolerant of malicious map data
Use ASNs for mapped IPv4 addresses correctly
Mark asmap const in statistics code
Avoid asmap copies in initialization
test: Check wallet name in -walletnotify script
tests: Add fuzzing harness for functions taking floating-point types as input
Add missing includes
gui: Drop ShutdownWindow dependency to BitcoinGUI
[test] PSBT RPC: check that bip32_derivs are present by default
gui: Drop BanTableModel dependency to ClientModel
Output a descriptor in createmultisig and addmultisigaddress
Add missing supported rpcs to doc/descriptors.md
Upgrade or rewrite encrypted key checksums
Set fDecryptionThoroughlyChecked based on whether crypted key checksums are valid
Read and write a checksum for encrypted keys
Remove GitHub Actions CI workflow.
tests: Add fuzzer asmap to FUZZERS_MISSING_CORPORA (temporarily)
tests: Add fuzzing harness for AS-mapping (asmap)
gui: Remove WalletView and BitcoinGUI circular dependency
gui: Add transactionClicked and coinsSent signals to WalletView
psbt_wallet_tests: use unique_ptr for GetSigningProvider
Add a constant for the maximum vector allocation (5 Mbyte)
tests: reset fIsBareMultisigStd after bare-multisig tests
on startup, write config options to debug.log
Use rolling bloom filter of recent block tx's for AlreadyHave() check
test: only declare a main() when fuzzing with AFL
doc: Improve fuzzing docs for macOS users
test: Add ubsan surpression for crc32c
build: Disable msvc warning 4722 for leveldb build
build: MSVC changes for leveldb update
build: CRC32C build system integration
build: Add LCOV exception for crc32c
test: Add crc32c exception to various linters and generation scripts
test: Add crc32c to subtree check linter
doc: Add crc32c subtree to developer notes
build: Update build system for new leveldb
Import crc32c using subtree merge as as 'src/crc32c'
Squashed 'src/crc32c/' content from commit 224988680f7673cd7c769963d4035cb315aa3388
Squashed 'src/leveldb/' changes from f545dfabff4c2e9836efed094dba99a34fbc6b88..f8ae182c1e5176d12e816fb2217ae33a5472fdd7
Update to leveldb upstream using subtree merge
test: rename test suite name "tx_validationcache_tests" to match filename
guix: Update documentation for time-machine
guix: Pin Guix using `guix time-machine`
tests: Add fuzzing harness for strprintf(...)
tests: Add fuzzer strprintf to FUZZERS_MISSING_CORPORA (temporarily)
tests: Update FuzzedDataProvider.h from upstream (LLVM)
Bugfix: GUI: Hide the HD/encrypt icons earlier so they get re-shown if another wallet is open
build: remove --large-address-aware linker flag
Updated appveyor job to checkout a specific vcpkg commit ID.
bump test timeouts so that functional tests run in valgrind
gui: Shortcut to close ModalOverlay
Refactor: Replace SigningProvider pointers with unique_ptrs
Cleanup: Drop unused GUI learnRelatedScripts method
Refactor: Copy CWallet signals and print function to LegacyScriptPubKeyMan
Box the wallet: Add multiple keyman maps and loops
refactor: define a UINT256_ONE global constant
HD Split: Avoid redundant upgrades
Make UpgradeKeyMetadata work only on LegacyScriptPubKeyMan
Store p2sh scripts in AddAndGetDestinationForScript
Always try to sign for all pubkeys in multisig
List output types in an array in order to be iterated over
Refactor: Allow LegacyScriptPubKeyMan to be null
Locking: Lock cs_KeyStore instead of cs_wallet in legacy keyman
wallet: Improve CWallet:MarkDestinationsDirty
Add extra logging of asmap use and bucketing
Return mapped AS in RPC call getpeerinfo
doc: Use proper RPC help syntax in importmulti
doc: Remove duplicate "comment" from listsinceblock RPC help
doc: Properly document proxy_randomize_credentials as bool in getnetworkinfo
doc: Add missing "optional" to "long" estimaterawfee RPC help
src/init: correct a typo
test: Add p2p test for forcerelay permission
test: Make msg_tx a witness tx
build: remove configure checks for win libraries we don't link against
Refactor message transport packaging
tests: Add fuzzing harness for V1TransportDeserializer (P2P transport)
tests: Add amount compression/decompression fuzzing to existing fuzzing harness: test compression round-trip
test: add missing #include to fix compiler errors
Convert compression.h to new serialization framework
refactor: Remove redundant conditional
Revert "refactor: Remove never used default parameter"
Revert "refactor: Simplify connection syntax"
Add FORMATTER_METHODS, similar to SERIALIZE_METHODS, but for formatters
qt: Hide non PKHash-Addresses in signing address book
QA: feature_segwit: Check that template "rules" includes "!segwit" as appropriate
Bugfix: Include "csv","!segwit" in "rules"
wallet: Improve CWallet:MarkDestinationsDirty
refactor: Simplify connection syntax
refactor: Remove never used default parameter
test: add unit test for non-standard txs with too large tx size
gui: Remove warning "unused variable 'wallet_model'"
depends: Consistent use of package variable
gui: hide HD & encryption icons when no wallet loaded
QT: Change bumpFee asserts to simple error message
Replace coroutine with async def in p2p_invalid_messages.py
wallet: Replace %w by wallet name in -walletnotify script
Make UpdateTransactionsFromBlock use Epochs
Add Epoch Guards to CTXMemPoolEntry and CTxMemPool
bug-fix macos: give free bytes to F_PREALLOCATE
Don't allow implementers to think ScriptHash(Witness*()) results in nesting computation
scripted-diff: Bump copyright of files changed in 2020
scripted-diff: Replace CCriticalSection with RecursiveMutex
IsUsedDestination shouldn't use key id as script id for ScriptHash
bitcoin-wallet: Use PACKAGE_NAME in usage help
GUI: Use PACKAGE_NAME in modal overlay
gui: Make Intro consistent with prune checkbox
gui: Add Intro::UpdateFreeSpaceLabel()
refactor: Add Intro::UpdatePruneLabels()
refactor: Replace static variable with data member
Convert chain to new serialization
Convert VARINT to the formatter/Using approach
Add a generic approach for (de)serialization of objects using code in other classes
wallet: Reset reused transactions cache
windows: remove call to SetProcessDEPPolicy
windows: Enable heap terminate-on-corruption
build: remove double LIBBITCOIN_SERVER linking
doc: update release notes with getaddressinfo label deprecation
gui: Set CConnman byte counters earlier to avoid uninitialized reads
init: Stop indexes on shutdown after ChainStateFlushed callback.
gui: Avoid redundant tx status updates
test: getaddressinfo label deprecation test
rpc: deprecate getaddressinfo label field
test: remove getaddressinfo label tests
doc: address pr17578 review feedback
Ignore msvc linker warning and update to msvc build instructions.
ci: Combine 32-bit build with CentOS 7 build
util: Add PruneGBtoMiB() function
util: Add PruneMiBtoGB() function
tests: Avoid using C-style NUL-terminated strings as arguments
tests: Add tests to make sure lookup methods fail on std::string parameters with embedded NUL characters
net: Avoid using C-style NUL-terminated strings as arguments in the netbase interface
qt: Rename SetPrune() to InitializePruneSetting()
refactor: Drop `bool force' parameter
qt: Force set nPruneSize in QSettings after intro
QT: bump fee returns PSBT on clipboard for watchonly-only wallets
Restore English translation option
contrib: makeseeds: Read suspicious hosts from a file instead of hardcoding
gui: renamed 'debug window' to 'node window'
psbt: check output index is within bounds before accessing
doc: Add a note about backporting
build: add Wdate-time to Werror flags
qt: Add LogQtInfo() function
doc: Add to Doxygen documentation guidelines
scripted-diff: Add missed copyright headers
refactor: Remove unused defines in bitcoinunits.h
scripts: add MACHO dylib checking to symbol-check.py
scripts: fix check-symbols & check-security argument passing
IsUsedDestination should count any known single-key address
Add logging for CValidationInterface events
Refactor FormatStateMessage for clarity
Format CValidationState properly in all cases
Add VALIDATION to BCLog::LogFlags
doc: update release notes
test: getaddressinfo labels purpose deprecation test
rpc: simplify getaddressinfo labels, deprecate previous behavior
script: Update EXLUDE list in copyright_header.py
script: Add empty line after C++ copyright
script: Add ability to insert copyright to *.sh
gitignore: ignore fuzz binaries, remove test_bitcoin_fuzzy
ci: Set LC_ALL=C when running in qemu-s390x
ci: Use debian to avoid apt install 404 errors
ci: Install needed gcc and qemu-user iff cross-compiling
ci: Move wrap-qemu into separate script
scripts: fix check-symbols & check-security argument passing
test: Show debug log on unit test failure
tests: Add std::to_string to list of locale dependent functions
Add missing typeinfo includes
Convert addrdb/addrman to new serialization
Introduce new serialization macros without casts
scripts: add MACHO NOUNDEFS check to security-check.py
scripts: add MACHO PIE check to security-check.py
build: remove linking librt for backwards compatibility
build: remove deprecated key from macOS Info.plist
DecodeHexTx: Break out transaction decoding logic into own function
doc: Added running functional tests in valgrind
scripted-diff: Bump copyright of files changed in 2019
doc: Update dependencies.md
doc: developer notes guideline on RPCExamples addresses
rpc: incorporate review feedback from PR 17283
build: Add default configure cache to .gitignore
test: Change filemode of rpc_whitelist.py
doc: Update license year range to 2020
Integrate ASN bucketing in Addrman and add tests
ci: Update vcpkg cache on MSBuild update
ci: Update Qt binaries for GitHub Actions
rpc: Remove mempool global from miner
test: Properly document blockinfo size in miner_tests
util: Disallow network-qualified command line options
build: Sort fuzzing harnesses to avoid future merge conflicts
tests: Add fuzzing harness for DecodeHexTx(...)
DecodeHexTx: Try case where txn has inputs first
build: set AC_PREREQ to 2.69
 Add asmap utility which queries a mapping
Document better -keypool as a look-ahead safety mechanism
doc: Mention PR Club in CONTRIBUTING.md
Test watchonly wallet bumpfee with PSBT return
bumpfee: Return PSBT when wallet has privkeys disabled
Change bumpfee to use watch-only funds for legacy watchonly wallets
use preferred shebang approach for documentation
doc: Add formatting to the good first issue template
net: Log to net category for exceptions in ProcessMessages
test: add IsRFC2544 tests
CNetAddr: fix IsRFC2544 comment
tests: Add fuzzing harness for various hex related functions
tests: Add fuzzing harness for various Base{32,58,64} related functions
util: Move TrimString(...). Introduce default pattern (trims whitespace). Add NODISCARD.
tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus
build: remove WINDOWS_BITS from build system
rest: Use mempool from node context instead of global
tests: Add tests for decoding/parsing of base32, base64 and money strings containing NUL characters
util: Don't allow DecodeBase32(...) of strings with embedded NUL characters
util: Don't allow DecodeBase64(...) of strings with embedded NUL characters
util: Don't allow ParseMoney(...) of strings with embedded NUL characters
fix directory path for secp256k1 subtree in developer-notes
tests: Add fuzzing harness for CheckBlock(...) and other CBlock related functions
tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus
[style] Code style fixups in GetWarnings()
doc: Add release note for RPC Whitelist
doc: Add ci prefix to CONTRIBUTING.md
util: change GetWarnings parameter to bool
[qt] remove unused parameter from getWarnings()
ci-s390x: Add qemu and depends support in the ci script
build: add -bind_at_load to hardened LDFLAGS
Moved the include of the system projects to before the build depends on task. Otherwise it doesn't get run.
depends: disable unused qt networking features
depends: -optimized-qmake is now -optimized-tools
depends: skip building qt proxies
Included test_bitcoin-qt in msvc build.
doc: update developer notes wrt unix epoch time
qa: unify unix epoch time descriptions
test: Add test for rpc_whitelist
Update msvc build for Visual Studio 2019 v16.4
tests: add tests for GetCoinsCacheSizeState
refactoring: introduce CChainState::GetCoinsCacheSizeState
build: fix typo
util: Don't allow base58-decoding of std::string:s containing non-base58 characters
tests: Add tests for base58-decoding of std::string:s containing non-base58 characters
rpc: require second argument only for scantxoutset start action
tests: have coins simulation test also use CCoinsViewDB
Add RPC Whitelist Feature from #12248
ci: Use python 3.7 on Windows Github Actions
wallet: unbreak with boost 1.72
Don't calculate tx fees for PSBTs with invalid money values
ci: Add valgrind run
rpc: add missing newline in analyzepsbt rpcresult
doc: Add release notes for 17447
doc: Update release process with latest changes
tests: Add fuzzing harnesses for various JSON/univalue parsing functions
tests: Add fuzzing harnesses for various number parsing functions
tests: Add ParseScript(...) (core_io) fuzzing harness
tests: Add ParseHDKeypath(...) (bip32) fuzzing harness
tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus
Activate no-privkey -> ISMINE_WATCH_ONLY behavior for LegacySPKM only
build: Use dnl for all comments in configure.ac, rather than #
build: Remove backticks from configure.ac
test: Remove ubsan alignment suppressions
prevector: avoid misaligned member accesses
test: re-enable CLI test support by using EncodeDecimal in json.dumps()
Adds GitHub Action workflow which duplicates AppVeyor job.
qt: Normalize placeholder to avoid using "address book" in sendcoinsentry
gui: Move static placeholder texts to forms
ui: disable 3rd-party tx-urls when wallet disabled
Make env data logging optional
lcov: filter /usr/lib64 from coverage report
depends: don't configure xcb_proto
util: Replace magics with DEFAULT_PRUNE_TARGET_GB
gui: disable File->CreateWallet during startup
cli: fix Fatal LevelDB error when specifying -blockfilterindex=basic twice
Replace LegacyScriptPubKeyMan::IsCrypted with LegacyScriptPubKeyMan::HasEncryptionKeys
Remove SetCrypted() and fUseCrypto; Change IsCrypted()'s implementation
Rename EncryptKeys to Encrypt and pass in the encrypted batch to use
Clear mapKeys before encrypting
Move fDecryptionThoroughlyChecked from CWallet to LegacyScriptPubKeyMan
Move Unlock implementation to LegacyScriptPubKeyMan
Replace LegacyScriptPubKeyMan::vMasterKey with GetDecryptionKey()
Add GetEncryptionKey() and HasEncryptionKeys() to WalletStorage
ci: Remove trusty build
ci: Add CentOS 7 build
lcov: filter depends from coverage report
tests: Use a default of supports_cli=True (instead of supports_cli=False)
tests: Mark functional tests not supporting bitcoin-cli (--usecli) as such
tests: Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible. Avoid code repetition.
tests: Add fuzzing harness for various functions consuming only integrals
tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus
tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus
tests: Add fuzzing harness for various CTxOut related functions
tests: Add fuzzing harness for various CTxIn related functions
util: Update tinyformat to upstream
Add bounds checks in key_io before DecodeBase58Check
gitian: fixed SC2001 regex
node: Use mempool from node context instead of global
rpc: Use mempool from node context instead of global
Move events_hasher into RNGState()
depends: Support for S390X targets
depends: Support for 64-bit POWER targets
keypool: Add comment about TopUp and when to use it
depends: don't use OpenGL in Qt on macOS
build: pass -dead_strip_dylibs to ld on macOS
tests: Add initialization order fiasco detection in Travis
ci: Remove unparseable lines from supp file for old xenial clang tsan
ci: ubsan report_error_type=1 and add suppressions
test: Print stderr when subprocess fails
test: Use char instead of unsigned char
ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le
util: remove unwanted fields from bitcoin-cli -getinfo
build: pass -dead_strip_dylibs to ld on macOS
depends: add ability to skip building qrencode
doc: rename wallet-tool references to bitcoin-wallet
Key pool: Change ReturnDestination interface to take address instead of key
Key pool: Move LearnRelated and GetDestination calls
tests: Add option --valgrind to run nodes under valgrind in the functional tests
Add unit test for DB creation with unicode path
script: Add Keyserver to verify-commits README
Use correct C++11 header for std::swap()
script: Enable SC2001 rule for Gitian scripts
script: Enable SC2155 rule for Gitian scripts
tests: Add a test for funding with sufficient preset inputs and subtractFeeFromOutputs
Default to bnb_used = false as there are many cases where BnB is not used
Add OutputType and CPubKey parameters to KeepDestination
Rename Keep/ReturnKey to Keep/ReturnDestination and remove the wrapper
util: make ScheduleBatchPriority advisory only
[gui] send: show watch-only balance in send screen
[test] qt: add send screen balance test
qt: Use proper class for Ui::ReceiveCoinsDialog
ci: Print free disk space
test: Properly deserialize integers in little-endian
ci: Run functional tests on s390x
doc: Change doxygen URL to doxygen.bitcoincore.org
[test] move wallet helper functions into test library
[test] move mining helper functions into test library
Appveyor install libevent[thread] vcpkg
Add s390x tests to travis
Add ci script to install on s390x
[test] move string helper functions into test library
test: add rpc getaddressinfo labels test coverage
test: add listlabels test in wallet_labels.py
rpc: add getaddressinfo code documentation
rpc: update getaddressinfo RPCExamples to bech32
rpc: clarify label vs labels in getaddressinfo RPCHelpman
rpc: improve getaddressinfo RPCHelpman content
wallet: replace raw pointer with const reference in AddrToPubKey
rpc: improve getaddressinfo RPCHelpman formatting
build: Add NX workaround for RV64
doc: Add historical release notes for 0.19.0.1
Seed RNG with precision timestamps on receipt of net messages.
Added libtest_util library to msvc build configuration.
build: Allow export of environ symbols
refactor: Nuke coincontrol circular dependency
keypool: Move opportunistic TopUps from LegacyScriptPubKeyMan to CWallet and ReserveDestination
keypool: Remove  superfluous topup from CWallet::GetNewChangeDestination
Key pool: Move CanGetAddresses call
gui: remove macOS start on login code
doc: add glibc 2.17 requirement to release-notes
build: Bump minimum versions in symbol checker
build: Disallow dynamic linking against c++ library
ci: Remove use of cd
doc: Changed MiniUPnPc link to https in dependencies.md
test: add unit test for non-standard txs with wrong nVersion
build: Create test utility library from src/test/util/
Fire TransactionRemovedFromMempool from mempool
Remove out of date comments for CalculateMaximumSignedTxSize
tests: Add deserialization fuzzing harnesses
tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus
build: set minimum supported macOS to 10.12
ci: Remove unmaintained extended_lint
scripted-diff: Use ci DEPENDS_DIR, remove BASE_BUILD_DIR
ci: Add DEPENDS_DIR variable, Add documentation for folders
test: add unit test for non-standard bare multisig txs
scripted-diff: Move various folders to ci scratch dir
refactor: Remove unused COINBASE_FLAGS
test: add functional test for non-standard bare multisig txs
build: remove libanl.so.1 from ALLOWED_LIBRARIES
Put bounds on the number of CPUID leaves explored
doc: Update and improve Developer Notes
Allow BnB when subtract fee from outputs
Use BnB when preset inputs are selected
depends: only use dbus with qt on linux
test: add functional test for non-standard txs with too large scriptSig
Pass a maximum output length to DecodeBase58 and DecodeBase58Check
Mark PSBTs spending unspendable outputs as invalid in analysis
Have a PSBTAnalysis state that indicates invalid PSBT
test: Wait until mempool is loaded in wallet_abandonconflict
refactor: Cleanup headers from walletmodel.h
refactor: Nuke walletmodel circular dependency
refactor: Nuke walletmodeltransaction circular dep
refactor: Nuke guiutil circular dependency
refactor: Move SendCoinsRecipient in own header
doc: Add some better examples for scripted diff
test: Remove libssl-dev packages from CI scripts
test: remove lsan suppression for libcrypto
build: remove libcrypto as internal dependency in libbitcoinconsensus.pc
doc: Remove ssl as a required dependency from build-unix
test: skip tool_wallet test when bitcoin-wallet isn't compiled
test: skip wallet_listreceivedby test when the cli isn't compiled
test: skip bitcoin_cli test when the cli isn't compiled
Refactor: Require scriptPubKey to get wallet SigningProvider
Accumulate result UniValue in SignTransaction
tests: Add fuzzing harness for various PSBT related functions
random: mark RandAddPeriodic and SeedPeriodic as noexcept
doc: correct random.h docs after #17270
doc: add OpenSSL removal to release-notes.md
ci: remove OpenSSL installation
doc: remove OpenSSL from build instructions and licensing info
depends: remove OpenSSL package
build: remove OpenSSL detection and libs
random: Remove remaining OpenSSL calls and locking infrastructure
random: stop retrieving random bytes from OpenSSL
random: stop feeding RNG output back into OpenSSL
doc: Remove bitness from bitcoin-qt help message and manpage
Changed tooltips of receive form to highlight difference between Label and Message
refactor: Remove unused signal
Define ARENA_DEBUG in Travis test runs
test: fix bitcoind already running warnings on macOS
scripted-diff: Replace ::mempool with m_node.mempool in tests
test: Replace recursive lock with locking annotations
node: Add reference to mempool in NodeContext
[build] ./configure --enable-werror: add unused-variable
scripted-diff: Set gitian arch back to amd64
test: add unit test for non-standard txs with too large scriptSig
fuzz: Bump timeout in test_runner to accomodate for slow arm64 CPUs
test: Remove fragile assert_memory_usage_stable
GUI: Refactor formatServicesStr to warn when a ServicesFlag is missing
Bugfix: GUI: Recognise NETWORK_LIMITED in formatServicesStr
ci: Use clang-8 for fuzzing to run on aarch64 ci systems
refactor: Remove null setting check in GetSetting()
[gui] watch-only wallet: copy PSBT to clipboard
[wallet] add fillPSBT to interface
[gui] send: include watch-only
[wallet] ListCoins: include watch-only for wallets without private keys
tests: Update valgrind suppressions
scripted-diff: Remove unused ArgsManager type flags in tests
refactor: Add util_CheckValue test
refactor: Add ArgsManager::GetSettingsList method
refactor: Get rid of ArgsManagerHelper class
refactor: Replace FlagsOfKnownArg with GetArgFlags
refactor: Clean up includeconf comments
refactor: Clean up long lines in settings code
fix uninitialized variable nMinerConfirmationWindow
Report amount of data gathered from environment
Use thread-safe atomic in perfmon seeder
Run background seeding periodically instead of unpredictably
Add information gathered through getauxval()
Feed CPUID data into RNG
Use sysctl for seeding on MacOS/BSD
Gather additional entropy from the environment
Seed randomness with process id / thread id / various clocks
[MOVEONLY] Move cpuid code from random & sha256 to compat/cpuid
[MOVEONLY] Move perfmon data gathering to new randomenv module
doc: minor corrections in random.cpp
doc: Explain $LIB in LD_PRELOAD in gitian descriptors
util: Add missing headers to util/fees.cpp
wallet: Make -walletdir network only
rpc: Expose block height of wallet transactions
test: check custom ancestor limit in mempool_packages.py
wallet: Avoid showing GUI popups on RPC errors (take 2)
fix Typo: "merkelRoot" -> "merkleRoot"
test: Use proper MAX_SCRIPT_ELEMENT_SIZE
refactor: Use proper MAX_SCRIPT_ELEMENT_SIZE const
ci: Extend docs
travis: Rework CACHE_ERR_MSG
Add TheCharlatan's pgp key
Moves vcpkg list to a text file and updates the appveyor job and readme to use it.
refactor: Styling w/ clang-format, comment update
Remove unnecessary forward declaration
ci: Make ci system read-only on the git work tree
ci: Remove git from required packages on host
ci: Make all filesystem operations inside docker
doc: Add relase note for db→walletdb rename
doc: add historical 0.19.0 release notes
scripted-diff: Change `BCLog::DB` to `BCLog::WALLETDB`
Rename `db` log category to `walletdb` (like `coindb`)
scripted-diff: Avoid hardcoded libfaketime dir in gitian
Add settings_tests
Deduplicate settings merge code
Add util::Settings struct and helper functions.
Remove includeconf nested scope
Rename includeconf variables for clarity
Clarify emptyIncludeConf logic
wallet: Remove unused boost::this_thread::interruption_point
Remove redundant class file includes from test_bitcoin project.
[validation] fix comments in CheckInputScripts()
scripted-diff: [validation] Rename CheckInputs to CheckInputScripts
ci: Guess the native host when not cross compiling
Implement O(1) OP_IF/NOTIF/ELSE/ENDIF logic
[refactor] interpreter: define interface for vfExec
Benchmark script verification with 100 nested IFs
test: speed up wallet_avoidreuse.py
test: add logging to wallet_avoidreuse.py
doc: Added regtest config for linearize script
Updated appveyor config:  - Update build image from Visual Studio 2017 to Visual Studio 2019.  - Updated Qt static library from Qt5.9.7 to Qt5.9.8.  - Added commands to update vcpkg port files (this does not update already installed packages).  - Updated vcpkg package list as per #17309.  - Removed commands setting common project file options. Now done via common.init.vcxproj include.  - Changed msbuild verbosity from normal to quiet. Normal rights a LOT of logs and impacts appveyor job duration. Updated msvc project configs:  - Updated platform toolset from v141 to v142.  - Updated Qt static library from Qt5.9.7 to Qt5.9.8.  - Added ignore for linker warning building bitcoin-qt program.  - Added missing util/str.cpp class file to test_bitcoin project file.
[refactor] Replace global int nScriptCheckThreads with bool
[tests] Don't use TestingSetup in the checkqueue_tests
[tests] Don't stop-start unnecessarily in rpc_fundrawtransaction.py
[tests] Use -whitelist in rpc_fundrawtransaction.py
Remove getBlockDepth method from Chain::interface
Remove locked_chain from GetDepthInMainChain and its callers
Use CWallet::m_last_block_processed_height in GetDepthInMainChain
Only return early from BlockUntilSyncedToCurrentChain if current tip is exact match
Refactor some importprunedfunds checks with guard clause
Add block_height field in struct Confirmation
doc: Add documentation for new test/lib
scripted-diff: test: Move setup_common to test library
Replace CWalletTx::SetConf by Confirmation initialization list
script: Enable SC2006 rule for Gitian scripts
script: Lint Gitian descriptors with ShellCheck
build: Remove install command samples
Add util_ArgParsing test
wallet_importmulti: use addresses of the same type as being imported
Improve "Hide" button tool-tip message
rpc: Remove unused boost::this_thread::interruption_point
test: add dumptxoutset RPC test
devtools: add utxo_snapshot.sh
rpc: add dumptxoutset
Add m_last_block_processed_height field in CWallet
Pass block height in Chain::BlockConnected/Chain::BlockDisconnected
doc: Add template for good first issues
coinstats: add coins_count
Add missing SetupGeneration error handling in EncryptWallet
remove old bootstrap relevant code
Clean up nested scope in GetReservedDestination
Get rid of confusing LegacyScriptPubKeyMan::TopUpKeyPool method
Pass CTxDestination to ScriptPubKeyMan::GetMetadata
doc: Update doc/bips.md with recent changes in master
Add EnsureLegacyScriptPubKeyMan and use in rpcwallet.cpp
TestShell: Return self from setup()
TestShell: Simplify default setting of num_nodes
Doc: Remove backticks in test-shell.md code block
[tools] update nNextInvSend to use mockable time
[tools] add PoissonNextSend method that returns mockable time
depends: move README.md Android instructions to a separate section
tests: Add fuzzing harness for Bech32 encoding/decoding
tests: Move CaseInsensitiveEqual to test/util/str
cli: fix -getinfo output when compiled with no wallet
logs: add timing information to FlushStateToDisk()
logs: add BCLog::Timer and related macros
ci: Run non-cross-compile builds natively
ci: Run CI_WAIT only on travis
[tests] Speed up rpc_fundrawtransaction.py
wallet: LearnRelatedScripts only if KeepDestination
wallet: Lock address type in ReserveDestination
test: Reset global args between test suites
bump libevent to 2.1.11 in depends
test: Add ASSERT_DEBUG_LOG to unit test framework
logging: Add member for arbitrary print callbacks
depends: update README.md with working Android targets and API levels
Add documentation for test_shell submodule
test: add "diamond" unit test to MempoolAncestryTests
Add TestShell class
Move argparse() to init()
Move assert num_nodes is set into main()
Clear TestNode objects after shutdown
Add closing and flushing of logging handlers
Refactor TestFramework main() into setup/shutdown
Remove network_event_loop instance in close()
wallet: Reuse existing batch in CWallet::SetUsedDestinationState
wallet: Avoid recursive lock in CWallet::SetUsedDestinationState
doc: Add ShellCheck to lint tests dependencies
Refactor: Move nTimeFirstKey accesses out of CWallet
Refactor: Move GetKeypoolSize code out of CWallet
Refactor: Move RewriteDB code out of CWallet
Refactor: Move SetupGeneration code out of CWallet
Refactor: Move HavePrivateKeys code out of CWallet::CreateWalletFromFile
Refactor: Move Upgrade code out of CWallet::CreateWalletFromFile
Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe
Refactor: Move GetMetadata code out of getaddressinfo
Refactor: Move LoadKey LegacyScriptPubKeyMan method definition
Refactor: Move SetAddressBookWithDB call out of LegacyScriptPubKeyMan::ImportScriptPubKeys
refactor: Replace UnsetWalletFlagWithDB with UnsetBlankWalletFlag in ScriptPubKeyMan
Refactor: Remove UnsetWalletFlag call from LegacyScriptPubKeyMan::SetHDSeed
Remove SetWalletFlag from WalletStorage
Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata
Refactor: Move SetAddressBook call out of LegacyScriptPubKeyMan::GetNewDestination
Refactor: Add new ScriptPubKeyMan virtual methods
Refactor: Declare LegacyScriptPubKeyMan methods as virtual
MOVEONLY: Reorder LegacyScriptPubKeyMan methods
bench: Remove redundant copy constructor in mempool_stress
refactor: Remove redundant PSBT copy constructor
doc: compiling with Visual Studio is now supported on Windows
doc: update MSVC instructions to remove Qt configuration
test: Do not instantiate CAddrDB for static call
doc: Remove explicit network name references
test: rm ascii art in rpc_fundrawtransaction
test: add rpc_fundrawtransaction logging
[qa] Add shrinkdebugfile=0 to regtest bitcoin.conf
Minor refactoring to remove implied m_addr_relay_peer.
GuessVerificationProgress: cap the ratio to 1
[linter] Strip trailing / in path for git-subtree-check
build: update retry to current version
Update univalue subtree
Squashed 'src/univalue/' changes from 7890db99d6..5a58a46671
QA: Add wallet_implicitsegwit to test the ability to transform keys between address types
travis: Run unit and functional tests on native arm
test: Add RegTestingSetup to setup_common
Walk pindexBestHeader back to ChainActive().Tip() if it is invalid
test: move-only ComputeFilter to src/test/lib/blockfilter
replace asserts in RPC code with CHECK_NONFATAL and add linter
[tests] remove bignum.py
[tests] remove bn2bin()
[tests] remove bn_bytes() function
[tests] remove mpi2vch() function
[tests] don't encode the integer size in bignum
[tests] add function comments to bignum
[tests] fix flake8 warnings in script.py and bignum.py
rpc: Add generatetodescriptor
docs: Add undefined to --with-sanitizers=fuzzer,address
tests: Add fuzzing harness for ISO-8601 related functions
refactor: Replace all uses of boost::optional with our own Optional type
doc: Add developer note on c_str()
[validation] Remove fMissingInputs from AcceptToMemoryPool()
[validation] Remove unused first_invalid parameter from ProcessNewBlockHeaders()
[validation] Remove useless ret parameter from Invalid()
[validation] Remove error() calls from Invalid() calls
[validation] Tidy Up ValidationResult class
[validation] Add CValidationState subclasses
Chainparams: Use name constants in chainparams initialization
nsis: Write to correct filename in first place
cli: Add "headers" and "verificationprogress" to -getinfo
add unused SnapshotMetadata class
wallet: Remove left-over BIP70 comment
doc: Clarify WalletStorage / Wallet relation
Add back mistakenly removed AssertLockHeld
Refactor: Add GetLegacyScriptPubKeyMan helper
test: add reason checks for non-standard txs in test_IsStandard
refactor: Remove addrdb.h dependency from node.h
Add assertion to randrange that input is not 0
Add new mempool benchmarks for a complex pool
contrib: remove accounts from bash completion
pubkey: Assert CPubKey's ECCVerifyHandle precondition
Avoid using g_rpc_node global in wallet code
scripted-diff: Remove g_connman, g_banman globals
Pass NodeContext, ConnMan, BanMan references more places
MOVEONLY: Move NodeContext struct to node/context.h
scripted-diff: Rename InitInterfaces to NodeContext
refactor: Remove redundant c_str() calls in formatting
Add search for first blk file with pruned node
tests: Add fuzzer initialization (hold ECCVerifyHandle)
Add roundtrip and more tests to ParseISO8601DateTime and FormatISO8601DateTime
Rename DecodeDumpTime to ParseISO8601DateTime and move to time.cpp
Drop signal CClientUIInterface::LoadWallet
Tests: Use self.chain instead of 'regtest' in almost all current tests
[rpc] set default bip32derivs to true for psbt methods
Refactor: Split up CWallet and LegacyScriptPubKeyMan and classes
MOVEONLY: Move key handling code out of wallet to keyman file
Move wallet enums to walletutil.h
added asserts to check m_addr_known when it's used
[net] SocketHandler: log peer id for close and disconnect
gui: disable font antialiasing for QR image address
test: fix script_p2sh_tests OP_PUSHBACK2/4 missing
gui: Make polling in ClientModel asynchronous
Avoid unused call to GuessVerificationProgress in NotifyHeaderTip
http: add missing header bootlegged by boost < 1.72
tests: Add fuzzing harness for various CScript related functions
ci: Remove ccache requirement on the host
compat: remove bswap_* check on macOS
build: skip building OpenSSL lib_ssl
build: remove OpenSSL from Qt build
build: remove EVP_MD_CTX_new detection
build: remove SSL lib detection
gui: Update BIP70 support message
build: remove BIP70 entries from macOS Info.plist
gui: remove payment request file handling from OpenURI dialog
Remove BIP70 Support
docs: remove protobuf from docs
build: remove protobuf from depends
consensus: Explain why fCheckDuplicateInputs can not be skipped and remove it
[validation] Remove unused cacheSigStore from CheckInputsFromMempoolAndCache
ci: Disable functional tests on mac host
doc: Changed miniupnp links to https
tests: Remove Cygwin WinMain workaround
tests: Skip unnecessary fuzzer initialisation. Hold ECCVerifyHandle only when needed.
depends: fix boost mac cross build with clang 9+
Add unit testing for the CompressScript functions
tests: Add Parse(...) (descriptor) fuzzing harness
tests: Allow for using non-default fuzzing initialization
Add override/final modifiers to V1TransportDeserializer
Make resetting implicit in TransportDeserializer::Read()
Remove oversized message detection from log and interface
Continue relaying transactions after they expire from mapRelay
refactor: test/bench: dedup Build{Crediting,Spending}Transaction()
Replace the LogPrint function with a macro
static tooltip
test: use default address type (bech32) for wallet_bumpfee tests
Force CNetMessage::m_recv to use std::move
build: use osslsigncode 2.0 in gitian
refactor: Remove unused CExt{Pub,}Key (de)serialization methods
Expand on wallet_balance.py comment from https://github.com/bitcoin/bitcoin/pull/16766\#issuecomment-527563982
Update release notes to mention changes to IsTrusted and impact on wallet
Systematize style of IsTrusted single line if
update variable naming conventions for IsTrusted
Update comment in test/functional/wallet_balance.py
Update wallet_balance.py test to reflect new behavior
Reuse trustedParents in looped calls to IsTrusted
Cache tx Trust per-call to avoid DoS
Make IsTrusted scan parents recursively
tests: Remove no longer needed UBSan suppressions (issues fixed). Add documentation.
Add testcase to simulate bitcoin schema in leveldb
ci: Enable address sanitizer (ASan) stack-use-after-return checking
wallet: Remove unused GetLabelName
doc: Added instructions for how to add an upsteam to forked repo
Send amount shows minimum amount placeholder
util: Add CHECK_NONFATAL and use it in src/rpc
Android: add all arch support
random: remove call to RAND_screen() (Windows only)
[wallet] Remove `state` argument from CWallet::CommitTransaction
[wallet] Remove return value from CommitTransaction()
[wallet] Add doxygen comment to CWallet::CommitTransaction()
gui: Add placeholder text to the sign message field
Use adapter pattern for the network deserializer
Remove transport protocol knowhow from CNetMessage / net processing
Refactor: split network transport deserializing from message container
util: Filter out macOS process serial number
doc: Describe log files + consistent paths in test READMEs
ci: Remove redundant check for TRAVIS_OS_NAME
doc: Document that GNU tools are required for linters
ci: Cleanup macOS runs
doc: correct function name in ReportHardwareRand()
p2p: Avoid allocating memory for addrKnown where we don't need it
chain: Set all CBlockIndex members to null, remove SetNull helper
Add tests for util/vector.h's Cat and Vector
Add some general std::vector utility functions
Remove unused includes
tests: Add fuzzing harness for descriptor Span-parsing helpers
rpc: fix -rpcclienttimeout 0 option
gui: Added label & tooltip for Verify Message labels
gui: remove OpenSSL PRNG seeding (Windows, Qt only)
gui: Make RPCConsole::TabTypes an enum class
Update macdeploy README to include correctly named `.dmg` file produced from `make deploy`
util: Filter control characters out of log messages
github: Add warning for bug reports
[test] rename SegwitVersion1SignatureHash()
travis: run tests on macOS native
[wallet] Remove pruning check for -rescan option
[wallet] Remove package limit config access from wallet
test: fix "tx-size-small" errors after default address change
doc: Add switch on enum example
util: Add AllowShortCaseLabelsOnASingleLine option
test: speed up wallet_address_types by whitelisting peers (immediate tx relay)
gui: don't disable the sync overlay when wallet is disabled
tests: Add test for loadblock option
test: speedup wallet_backup by whitelisting peers (immediate tx relay)
tests: Add EvalScript(...) fuzzing harness
[build] depends macOS: point --sysroot to SDK
depends: export dynamic JNI symbols from static qtforandroid.a
Qt: patch androidjnimain.cpp to make sure JNI is initialised when statically compiled
doc: update bips.md with buried BIP9 deployments
build: pass --enable-option-checking to applicable packages
build: only pass --disable-dependency-tracking to packages that understand it
doc: Add missing indexes/blockfilter/basic/ to doc/files.md
change wallet pointers to references in feebumper
tests: Add FuzzedDataProvider fuzzing helper from the Chromium project
doc: Doxygen-friendly CuckooCache comments
[docs] Add release notes for removal of REJECT reasons
[validation] Remove REJECT code from CValidationState
typo and unneccessary parentheses
[logging] Don't log REJECT code when transaction is rejected
build: Add README.md to DIST target
test: add unit tests for Span-parsing helpers
Add missing fields in TransactionDescriptionString and others
MOVEONLY : move RPC wallets helpers to TransactionDescriptionString
test: Seed test RNG context for each test case, print seed
build: Add variable printing target to Makefiles
lint: Install grep and git via brew on mac for --perl-regexp
lint: Run the linters against Mac OS on Travis
depends: pull upstream libdmg-hfsplus changes
depends: latest config.guess & config.sub
tests: Remove TRANSACTION_DESERIALIZE (replaced by transaction fuzzer)
tests: Add fuzzing harness for CheckTransaction(...), IsStandardTx(...) and other CTransaction related functions
ci: Run tests on arm
init: Change fallback locale to C.UTF-8
[test] Add coverage to estimaterawfee and estimatesmartfee
[doc] fix Makefile target in benchmarking.md
Add release note
Update descriptors.md to include sortedmulti
Test sortedmulti descriptor using BIP 67 tests
Add sortedmulti descriptor and unit tests
gitian: Put things in the right place to begin with
gitian: Eliminate rename dependency
gitian: Smaller diff with gitian-linux.yml
wallet: Avoid showing GUI popups on RPC errors
Added double quotes
Disable _FORTIFY_SOURCE when enable-debug
tests: Pass fuzzing inputs as constant references
Always generate `bitcoinstrings.cpp` on `make translate`
build: Remove workaround for ancient libtool
build: Ensure a minimal version of libtool
util: Simplify path argument for CBlockTreeDB ctor
scripts: update copyright_header script to include additional files
build: Bump gitian descriptor versions
contrib: fix minor typos in makeseeds.py
modify p2p_feefilter test to catch rounding error
Disallow implicit conversion for CFeeRate constructor
feefilter: Compute the absolute fee rather than stored rate to match mempool acceptance logic
ci: Make apt-get more verbose, to debug travis timeouts
Don't rename main thread at process level
Prevent processing duplicate payment requests
gitian: Use split-debug.sh for Win builds
doc: Add detailed info about Bitcoin Core files
doc: Update bips.md for default bech32 addresses in 0.20.0
doc: move-only release notes fragments for 0.20.0
Truly decouple wallet from chainparams for -fallbackfee
p2p: Remove BIP61 reject messages
ci: Use busybox utils for one build
doc: move-only: Steps for "before major release branch-off"
doc: reset release notes after 0.19 split-off
build: 0.19 release updates on master
contrib: Remove invalid nodes from seeds list
gui: Add shortcuts for tab tools
qa: Do not force overwrite of QT_QPA_PLATFORM on windows for gui tests
doc: Explain QT_QPA_PLATFORM for gui tests
doc: Consolidate release notes before 0.19.0
doc: Add missing release notes for 16383
chainparams: Bump assumed chain params
net: 0.19 hardcoded seeds update
contrib: makeseeds: More fancy output
contrib: makeseeds: Limit per network, instead of total
contrib: makeseeds: dedup by ip,port
contrib: makeseeds: Factor out ASN lookup
contrib: makeseeds: Improve logging and filtering
Enable UBSan for Travis fuzzer job
doc: Bump version in bips.md, mention bumping in release process
add newline after -stdin*
cli: add -stdinwalletpassphrase for (slightly more) secure CLI
add stdin helpers for password input support
build: Installed Qt version only appears if being built
util: Make thread names shorter
doc: Remove mention of renamed mapBlocksUnlinked
doc: Add mention of BIP158 indexing since v0.19.0
doc: Add mention of BIP125 used by wallet GUI by default since v0.18.1
scripts: search for next position of magic bytes rather than fail
When BIP70 is disabled, get PaymentRequest merchant using string search
doc: Add mention of BIP70 disabling by default in bips.md
test bumpfee fee_rate argument
test: Avoid whitespace linting in qt translations
qt: Periodic translations update
Correct docstring param name.
build: Factor out qt translations from build system
rpc bumpfee check fee_rate argument
rpc bumpfee: add fee_rate argument
test: add unittests for CheckProofOfWork
Add release note for bech32 by default in wallet
Revert "gui: Generate bech32 addresses by default (take 2, fixup)"
Change default address type to bech32
qt: Change default size of intro frame
refactor: Remove Qt function to disable menu icons on macOS
doc: Improve test READMEs
doc: Remove MSVC update step from translation process
make SaltedOutpointHasher noexcept
refactor: consolidate PASTE macros
Change sendcoins dialogue Yes to Send
doc: Put PR template in comments
test: Remove python dead code linter
doc: replace outdated OpenSSL comment in test README
ci: Remove TRAVIS env vars
ci: Set $HOST before setting fallback values
validation: Make GetWitnessCommitmentIndex public
make sure to update the UI when deleting a transaction
doc: Doxygen-friendly descriptor.h comments
doc: Improve doxygen readme navigation section
doc: Move doxygen intro to file for USE_MDFILE_AS_MANPAGE
travis: Disable feature_block in tsan run
builds: remove superfluous config_opts_aarch64_android
txmempool: Make entry time type-safe (std::chrono)
build: remove mingw linker workaround from win gitian descriptor
Patch libevent when building for Android (fix arc4random_addrandom)
Update bitcoin_qt.m4
Define TARGET_OS when host is android
test: use named args for sendrawtransaction calls
doc: improve rawtransaction code/test docs
test: fix incorrect value in rpc_rawtransaction.py
gui: Rename address checkbox back to bech32
Always define the raii_event_tests test suite
Add OpenSSL termios fix for musl libc
Refresh ZeroMQ 4.3.1 patch
Only check the hash of transactions loaded from disk
tests: Add information on how to add Vulture suppressions
test: Make PORT_MIN in test runner configurable
util: Add count_seconds time helper
test: mempool entry time is persisted
Test: Move common function assert_approx() into util.py
Add full Android build example command and instructions on getting SDK/NDK
Add config opts and patch for aarch64_android build of Qt
Add ranlib to android.mk hosts file (fix OSX Android NDK build)
Add example Android host-platform-triplet and options
Add support for building Android dependencies
[doc] update brew instruction for doxygen
Update tx-size-small comment with relevant CVE disclosure
Add documenting comments to spanparsing.h
Abstract out some of the descriptor Span-parsing helpers
test: lint: Add DisabledOpcodeTemplates to whitelist
test: Remove unused connect_nodes_bi
scripted-diff: test: Replace connect_nodes_bi with connect_nodes
test: Use connect_nodes when connecting nodes in the test_framework
test: Reformat python imports to aid scripted diff
refactoring: move ReplayBlocks under CChainState
refactoring: move LoadChainTip to CChainState method
doc: fix CChainState::ActivateBestChain doc
test: add unit test for wallet watch-only methods involving PubKeys
test: add some unit tests for merkle.cpp
test: Bump timeouts in slow running tests
[refactor] Rewrite AcceptToMemoryPoolWorker() using smaller parts
qt: Run "make translate" in ./src
test: Add notes on how to generate data/wallets/high_minversion
build: remove unnecessary qt xcb patching
build: remove unnecessary macOS qt patching
Add python bech32 impl round-trip test
test: improve gettransaction test coverage
rpc: fix regression in gettransaction
build: make protobuf optional in depends
doc: clarify protobuf build requirements
build: update boost macros to latest upstream
[wallet] Rename 'decode' argument in gettransaction method to 'verbose'
Clarify includeWatching for fundrawtransaction
bitcoin-wallet: Add a missing closing parenthesis in the help
Elaborate on the need to re-login on Debian-based systems to use tor following usermod
Prevent UpdateTip log message from being broken up
Qt: advise users not to switch wallets when opening a BIP70 URI.
doc: specify protobuf as optional in build docs
build: disable BIP70 support by default
tests: rename 'test_getnetworkinginfo' in 'test_getnetworkinfo'
tests: add a test for the 'servicesnames' RPC field
doc: add comments clarifying how local services are advertised
util: CBufferedFile fixes
doc: move-only ActivateBestChain doxygen comment to header
signrawtransaction*: improve error for partial signing
signrawtransactionwithkey: better error messages for bad redeemScript/witnessScript
gui: fix autofocus in CreateWalletActivity::askPassphrase()
gui: fix passphrase labels/tooltip in createwalletdialog/askpassphrasedialog
gui: rename encrypt(), blank(), and askPasshprase()
qa: Check scantxoutset result against gettxoutsetinfo
rpc: Improve scantxoutset response and help message
Escape ampersands (&) in wallet names in Open Wallet menu
HTML escape address labels in more dialogs and notifications
HTML escape the wallet name in more dialogs and notifications
refactor: Cleanup walletinitinterface.h
doc: Add issue templates for bug and feature request
Added libbitcoin_qt and bitcoin-qt to the msbuild configuration.
Testchains: Qt: Simplify network/chain styles
Testchains: Generic selection with -chain=<str> in addition of -testnet and -regtest
Set init stop timeout to 10 min
Add Create Wallet menu action
Expose wallet creation to the GUI via WalletController
Add CreateWalletDialog to create wallets from the GUI
Optionally allow AskPassphraseDialog to output the passphrase
refactor: Avoid locking cs_main in ProcessNewBlockHeaders
gui: Refactor OpenWalletActivity
contrib: guix: Remove ssp spec file hack
contrib: guix: More robust search paths, add checks
depends: zlib: Move toolchain options to configure
Ignore old versionbit activations
doc: add a release note for the new field in 'getpeerinfo' and 'getnetworkinfo'
rpc/net: decode the services flags in a new entry
Assert that the HRP is lowercase in Bech32::Encode
Test that joinpsbts randomly shuffles the inputs
Shuffle inputs and outputs after joining psbts
Conservatively accept RBF bumps bumping one tx at the package limits
Make lint-includes.sh work from any directory
Disconnect peers violating blocks-only mode
doc: improve comments relating to block-relay-only peers
Don't relay addr messages to block-relay-only peers
Add 2 outbound block-relay-only connections
Add comment explaining intended use of m_tx_relay
Check that tx_relay is initialized before access
test: Remove incorrect and unused try-block in assert_debug_log
Refactor rawtransaction_util's SignTransaction to have previous tx parsing be separate
devtools: Accomodate block-style copyright blocks
lint: Bump flake8 to 3.7.8
lint: Disable flake8 W504 warning
test: Print both messages on failure in assert_raises_message
Additionally treat Tx.nVersion as unsigned in joinpsbts
doc: ActivateBestChainStep return value
gui: Update English source translation
gui: Update transifex slug for 0.19
Avoid unnecessary "Synchronizing blockheaders" log messages
qt: Replace objc_msgSend with native syntax
Check for codespell in lint-spelling.sh
GUI: Remove unused menu items for Windows and Linux
doc: Add release note for the new gettransaction argument
tests: Add a new functional test for gettransaction
gettransaction: add an argument to decode the transaction
Don't show addresses or P2PK in decoderawtransaction
[qt] Change uninstall icon on Windows
qt: Replace QFontMetrics::width() with TextWidth()
Add a test wallet_reorgsrestore
Modify wallet tx status if has been reorged out
Add window final block height to getchaintxstats
wallet: extract PubKey from P2PK script with Solver
doc: Delete stale URL in test README
Added the bench_bitcoin project to the list automatically produced by the msvc-autogen python script.
wallet: Translate all initErrors in CreateWalletFromFile
util: Make util/error bilingual_str (refactor)
doc: Tidy up shadowing section
[refactor] Change tx_relay structure to be unique_ptr
[refactor] Move tx relay state to separate structure
test: add executable flag for wallet_watchonly.py
Adds an option to msbuild common configuration to ignore linker warning 4221. This warning is for object files that do not include any symbols. The warning is harmless and occurs due to some classes that are *nix only having no source to compile for an msvc build.
qa: Relax so that the subscriber is ready before publishing zmq messages
ci: Move CCACHE_DIR and test_runner tmp dir into ./ci/scratch/
ci: Pass down $MAKEJOBS to test_runner.py
test: Establish only one connection between nodes in rpc_invalidateblock
move-only: move coins statistics utils out of RPC
doc: Add spacing to command in translation_process.md
Remove unused fScriptChecks parameter from CheckInputs
Support serialization of std::vector<bool>
rpc bumpfee: move feerate estimation logic into separate method
lint: Catch use of [] or {} as default parameter values in Python functions
Avoid using mutable default parameter values
doc: Update labels in CONTRIBUTING.md
qt: Remove QSignalMapper from TransactionView
qt: Replace obsolete functions of QDesktopWidget
qt: Remove obsolete QModelIndex::child()
wallet: Use wallet name instead of pointer on unload/release
[gui] intro: enable pruning by default unless disk is big
[gui] intro: add prune preference
[gui] intro: inform caller if intro was shown
[gui] add explicit prune setter
[node] add forceSetArg to interface
[Doc] Add documentation for the new whitelist permissions
Replace obsolete functions of QSslSocket
qt: Remove QSignalMapper from RPCConsole
Release notes: add previously undocumented changes
Release notes: edit previously-detached notes
Remove SyncTransaction for conflicted txn in CWallet::BlockConnected
Encapsulate tx status in a Confirmation struct
qt: Add TextWidth() wrapper
gui: Ensure tx send error highlight is visible
packages.md: document depends build targets
Clarify need to specify --prefix with depends
Doc: move detached release notes into release-notes.md
gui: remove unused PlatformStyle::TextColorIcon
refactor: replace qLowerBound & qUpperBound with std:: upper_bound & lower_bound
refactor: replace qSort with std::sort
refactor: replace qStableSort with std::stable_sort
build: update RapidCheck Makefile
QA: fix rpc_setban.py race
Make descriptor test deterministic
rpc: Use Join helper in rpc/util
util: Add Join helper to join a list of strings
Unrecommend making config file owned by bitcoin
Set ProtectHome in systemd service file
Chgrp config dir to bitcoin in systemd service
Improve clarity of systemd service file comments
scripts: move update-translations.py to maintainer-tools repo
doc: add default bitcoin.conf locations
scripts: remove github-merge.py
doc: initial RapidCheck property-based testing documentation
doc: add release-notes for getmempoolentry weight field addition
qa: Add RPC tests for weight in mempool entry
RPC: add weight to mempool entry output
Bugfix: QA: Run tests with UPnP disabled
qa: Test ZMQ notification after chain reorg
qa: Refactor ZMQ test
doc: Add note regarding ZMQ block notification
test: Add test for default maxfeerate in sendrawtransaction
wallet/rpc: Use the default maxfeerate value as BTC/kB
doc: Add ZMQ dependencies to Fedora build
Additional tests for other failure cases
Check error messages in descriptor tests
Give more errors for specific failure conditions
Return an error from descriptor Parse that gives more information about what failed
test: Test that low difficulty chain fork is rejected
Reformat p2p_permissions.py
doc: Refer in rpcbind doc to the manpage
test: Pass down correct chain name in tests
[doc] mention whitelist is inbound, and applies to blocksonly
ci: Set --ansi in test_runner
ci: Add environment files for all settings
build: echo prop tests status during build
Add test for setban
Cover UTXO set access with lock annotations
ci: Add note that this assumes a fresh git clone
ci: Use ./ci/ on non-travis host
ci: Remove dependence on travis, use it as fallback env
ci: Add retry
ci: Rename .travis/ to ./ci/
refactor: have CCoins* data managed under CChainState
doc: Improve versionbits.h documentation
util: Move ResolveErrMsg to util/error
lint: Add false positive to python dead code linter
qt: Remove menu icons
tests: Use colors and dots in test_runner.py output only if standard output is a terminal -- allows for using the test runner output as input to other programs
test: Test p2sh-witness and bech32 in wallet_import_rescan
test: Replace fragile "rng" with call to random()
test: Generate one block for each send in wallet_import_rescan
[Consensus] Bury segwit deployment
[docs] Add release notes for burying bip 9 soft fork deployments
[Consensus] Bury CSV deployment height
[tests] Add coverage for the content of getblockchaininfo.softforks
Remove unused variable
build: Remove src/obj directory from repository
depends: zeromq: disable draft classes and methods
depends: xproto: configure flags cleanup
depends: qrencode: configure flags cleanup
depends: fontconfig: configure flags cleanup
depends: libxcb: configure flags cleanup
depends: libXau: configure flags cleanup
descriptor: fix missed m_script_arg arg renaming in #14934
Add missing contributor to release notes
build: ignore macOS make deploy artefacts & add them to clean-local
[rpc] Tidy up reporting of buried and ongoing softforks
Moved and renamed hash256 from util.py to zmq_interface.py
Add test for AddTimeData
travis: Bump timeout from 50 minutes to 90
doc: Mention other ways to conserve memory on compilation
build: Remove unused src/obj-test folder
doc: Update Markdown syntax for bdb packages
Add functional tests for flexible whitebind/list
Replace the use of fWhitelisted by permission checks
Do not disconnect peer for asking mempool if it has NO_BAN permission
Make whitebind/whitelist permissions more flexible
sipsorcery gitian key.
Give QApplication dummy arguments
[wallet] Restore confirmed/conflicted tx check in SubmitMemoryPoolAndRelay()
doc: Add historical release notes for 0.18.1
build: disable libsecp256k1 benchmarks
Remove p2pEnabled from Chain interface
util: refactor upper/lowercase functions
Do not query all DNS seed at once
Add unmodified-but-with-checksum to getdescriptorinfo
Factor out checksum checking from descriptor parsing
[wallet] restore coinbase check in SubmitMemoryPoolAndRelay()
refactor: pcoinsTip -> CChainState::CoinsTip()
build: disable libxcb extensions
test: only include and init openSSL where it's actually used
[doc] chain: Declare BLOCK_VALID_HEADER reserved
Dump transaction version as an unsigned integer in RPC/TxToUniv
test: Add missing sync_blocks to feature_pruning
[doc] Update and extend benchmarking.md
test: Explain why -whitelist is used in feature_fee_estimation
test: Format feature_fee_estimation with pep8
test: Avoid hardcoding the chain name in combine_logs
[build] .gitignore add Qt Creator Makefile.am.user
log: harmonize bitcoind server logging
Tidy up BroadcastTransaction()
Remove unused submitToMemoryPool and relayTransactions Chain interfaces
Remove duplicate checks in SubmitMemoryPoolAndRelay
Introduce CWalletTx::SubmitMemoryPoolAndRelay
Add BroadcastTransaction utility usage in Chain interface
Test: Set -acceptnonstdtxn in feature_fee_estimation
gui: Remove unused RPCConsole::tabFocus
test: Adapt test framework for chains other than "regtest"
test: Make tests arg type specific
Revamp option negating policy
wallet: Drop unused OldKey
doc: Add release note for the deprecated totalFee option of bumpfee
Changes the verbosity of msbuild from quiet to normal in the appveyor script. Increasing the verbosity helps to identify the cause of build errors which is the main purpose of the appveyor script.
autoconf: Sane --enable-debug defaults.
test: Add -acceptnonstdtxn to self.extra_args[3]
gui: Generate bech32 addresses by default (take 2, fixup)
[wallet] Remove CMerkleTx serialization logic
[wallet] Flatten CWalletTx class hierarchy
[wallet] Move CMerkleTx functions into CWalletTx
test: Bump rpc_timeout in feature_dbcrash
Add setting as known type
qa: fix deprecated log.warn in feature_dbcrash test
doc: update labels in CONTRIBUTING.md
Allow createwallet to take empty passwords to make unencrypted wallets
Updated python command in readme so it will work on systems that have both python2 and 3 installed.
scripts: filter more qt plugins we don't use in macdeployqtplus
scripts: misc cleanups in macdeployqtplus
scripts: use format() in macdeployqtplus
scripts: add type annotations to macdeployqtplus
Trivial: add missing space
wallet: Rename CWalletKey to OldKey
wallet: Enumerate walletdb keys
Replace IsArgKnown() with FlagsOfKnownArg()
Use ArgsManager::NETWORK_ONLY flag
rpc: sendrawtransaction unconditionality/privacy note
[test] walletcreatefundedpsbt: check RBF is disabled when -walletrbf=0
[doc] rpc: remove "fallback to" from RBF default help
[rpc] walletcreatefundedpsbt: use wallet default RBF
Remove unused m_debug_only member from Arg struct
scripted-diff: Use ArgsManager::DEBUG_ONLY flag
scripted-diff: Use Flags enum in AddArg()
Add Flags enum to ArgsManager
Refactor InterpretNegatedOption() function
refactoring: Check IsArgKnown() early
[mempool] log correct messages when CPFP fails
test: Fail early on disconnect in mininode.wait_for_*
Add RPC bumpfee totalFee deprecation test
deprecate totalFee argument in bumpfee RPC call
Exclude depends/Makefile in .gitignore
[qa] Ensure we don't generate a too-big block in p2sh sigops test
doc: add note on precedence of options in bitcoin.conf
refactor : use RelayTransaction in BroadcastTransaction utility
doc: Remove downgrading warning in release notes, per 0.18 branch
Enable all tests in feature_config_args.py
Use CheckDataDirOption() for code uniformity
Add CheckDataDirOption() function
Return absolute path early in AbsPathForConfigVal
Have importwallet use ImportPrivKeys and ImportScripts
Optionally allow ImportScripts to set script creation timestamp
Have importaddress use ImportScripts and ImportScriptPubKeys
Have importpubkey use CWallet's ImportScriptPubKeys and ImportPubKeys functions
scripted-diff: Make translation bilingual
Add bilingual message type
Refactor out translation.h
tests: functional watch-only wallet tests
doc: add release note for include_watchonly default changes
depends: disable unused Qt features
doc: remove line numbers from qt package links
doc: fix typo in bitcoin_qt.m4 comment
build: remove jpeg lib check from bitcoin_qt.m4
build: disable libjpeg in qt
test: Skip flaky p2p_invalid_messages test on macOS
wallet: Recognize -disablewallet option early
travis: Print memory and number of cpus
extract min & max depth onto coin control
Remove ReadVersion and WriteVersion
Log the actual wallet file version
Remove nFileVersion from CWalletScanState
Specify AM_CPPFLAGS for ZMQ.
txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN
move-onlyish: move CCoinsViewErrorCatcher out of init.cpp
doc: Update bips 35, 37 and 111 status
build: Treat -Wswitch as error when --enable-werror
Use switch on status in RpcWallet
Return error for ignored passphrase through disable private keys option
Have importprivkey use CWallet's ImportPrivKeys, ImportScripts, and ImportScriptPubKeys
Log when an import is being skipped because we already have it
test: remove redundant setup in addrman_tests
depends: qt: Patch to remove dep on libX11
gitignore: Actually pay attention to depends patches
Add release notes for DEFAULT_BLOOM change
rpcwallet: document include_watchonly default for watchonly wallets
rpcwallet: default include_watchonly to true for watchonly wallets
Get rid of PendingWalletTx class.
depends: Bump QT to LTS release 5.9.8
net: Make poll in InterruptibleRecv only filter for POLLIN events. poll should block until there is data to be read or the timeout expires.
symbol-check: Disallow libX11-*.so.* shared libraries
depends: libXext isn't needed by anyone
build-aux: Remove check for x11-xcb
depends: libX11: Make package headers-only
depends: qt: Explicitly stop using Xlib/libX11
depends: xproto is only directly needed by libXau
fix: tor: Call event_base_loopbreak from the event's callback
Use strong enum for WalletCreationStatus
Place out args at the end for CreateWallet
Remove wallet settings from chainparams
qa: Add --filter option to test_runner.py
docs: Improve netbase comments
doc: describe how to pass wildcard names to test runner
test: enable passing wildcards with path to test runner
Remove unused bits from the service flags enum
contrib: guix: Additional clarifications re: substitutes
contrib: guix: Various improvements.
contrib: guix: Clarify SOURCE_DATE_EPOCH.
contrib: Add deterministic Guix builds.
Change ImportScriptPubKeys' internal to apply_label
Call node->initError instead of InitError from GUI code
init: Use InitError for all errors in bitcoind/qt
Restrict lifetime of ReserveDestination to CWallet::CreateTransaction
CreateTransaction calls KeepDestination on ReserveDestination before success
Remove redundant pre-TopUpKeypool checks
test: Add test for maxtxfee option
Move wallet creation out of the createwallet rpc into its own function
Add GetNewChangeDestination for getting new change Destinations
Replace CReserveKey with ReserveDestinatoin
Add GetNewDestination to CWallet to fetch new destinations
Move WatchOnly stuff from SigningProvider to CWallet
Remove CCryptoKeyStore and move all of it's functionality into CWallet
Move various SigningProviders to signingprovider.{cpp,h}
Move KeyOriginInfo to its own header file
scripted-diff: rename CBasicKeyStore to FillableSigningProvider
Move HaveKey static function from keystore to rpcwallet where it is used
[mempool] Allow one extra single-ancestor transaction per package
Remove CKeyStore and squash into CBasicKeyStore
test: Add test for BIP30 duplicate tx
test: Properly serialize BIP34 coinbase height
Remove redundant WalletController::addWallet slot
depends: expat 2.2.7
Update doc and CI config
qt: Assert QMetaObject::invokeMethod result
test: rpc_users: Make variable names more clear.
test: rpc_users: Also test rpcauth.py with specified password.
test: rpc_users: Add function for testing auth params.
test: rpc_users: Add function for auth'd requests.
refactoring: remove mapBlockIndex global
refactoring: make pindexBestInvalid internal to validation.cpp
refactoring: add block_index_candidates arg to LoadBlockIndex
refactoring: move block metadata structures into BlockManager
refactor: Rename getWallets to getOpenWallets in WalletController
gui: Sort wallets in open wallet menu
test: Tool wallet test coverage for unexpected writes to wallet
test: Split tool_wallet.py test into subtests
test: Add log messages to test/functional/tool_wallet.py
rpc: switch to using RPCHelpMan.Check()
Make the RPCHelpMan aware of JSONRPCRequest and add Check() helper
build: prune dbus from depends
Remove unused guard
doc: Include static members in Doxygen
docs: add reduce-memory.md
[build]: use #if HAVE_SYSTEM instead of defined(HAVE_SYSTEM)
bench: Benchmark blockToJSON
[docs] Add release notes for PR 15427
rpc: migrate JSONRPCRequest functionality into request.cpp
Disable other targets when enable-fuzz is set
Enable ShellCheck rules
[RPC] add new utxoupdatepsbt arguments to the CRPCCommand and CPRCConvertParam tables
Add HaveKey and HaveCScript to SigningProvider
Use placeholder instead of key expiration date
Add logpath description for getrpcinfo
Suppress output in test_bitcoin for expected errors
Add ChaCha20Poly1305@Bitcoin AEAD benchmark
Add ChaCha20Poly1305@Bitcoin tests
rpc: fix RPC help requirements for getblocktemplate
test: Split fundrawtx test into subtests
test: Make local symbols in run_test members
test: Add tests for getblockchaininfo.softforks
bench: Move generated data to a dedicated translation unit
rpc: Clarify that block count means height excl genesis
wallet: Remove unreachable code in CreateTransaction
Add antialiasing to traffic graph widget
TEST: Replace hard-coded hex tx with classes
Improve documentation of memory_cleanse()
[MSVC] Copy build output to src/ automatically after build
Drop no-longer-relevant copyright holder name
Include Objective-C source files
[MSVC] allow user level project customization
[wallet] abort when attempting to fund a transaction above maxtxfee
test: Add missing sync_all to wallet_balance test
[MSVC] Enable Fuzz for functional tests
qt: test: Create at most one testing setup
util: No translation of `Bitcoin Core` in the copyright
util: Explain why the path is cached
tests: Switch one of the Travis jobs to an unsigned char environment (-funsigned-char)
tests: Reduce compilation time and unneccessary recompiles by removing unused includes in tests
qt: Run «make translate» in ./src/
scripted-diff: Avoid passing PACKAGE_NAME for translation
build: Stop translating PACKAGE_NAME
Add Travis check for single parameter constructors not marked "explicit"
Add missing ECC_Stop(); in GUI rpcnestedtests.cpp
Remove extra CBlockIndex declaration
Add ChaCha20Poly1305@Bitcoin AEAD implementation
signrawtransactionwithkey: report error when missing redeemScript/witnessScript param
rpc: Allow shutdown while in generateblocks
build: dont compile rapidcheck with -Wall
test: Require standard txs in regtest
docs: release note wording
wallet/rpc: use static help text
wallet/rpc/getbalances: add entry for 'mine.used' balance in results
Use qInfo() if no error occurs
[MSVC]: Create the config.ini as part of bitcoind build
doc: remove orphaned header in developer notes
ci: Run extended tests
Set AA_EnableHighDpiScaling attribute early
test: Log to debug.log in all tests
Make and get the multisig redeemscript and destination in one function instead of two
net: Document what happens to getdata of unknonw type
test: use common setup in gui tests
test: Create data dir in BasicTestingSetup
Change ismine to take a CWallet instead of CKeyStore
Move ismine to wallet module
[qa] Test that getdata requests work as expected
Make AbortNode() aware of MSG_NOPREFIX flag
Add MSG_NOPREFIX flag for user messages
Prepend the error/warning prefix for GUI messages
doc: Remove travis badge from readme
docs: add rapidcheck to vcpkg install list
Cleaned up and consolidated msvc build files to allow faster builds and easier migration to vs2019.
test: Suppress false positive leak in secure_allocator<RNGState>
test: Log output even if fuzzer failed
test: Add test that mainnet requires standard txs
chainparams: Remove unused fMineBlocksOnDemand
test: Add test for unknown args
net: Use mockable time for tx download
tests: Make coins_tests/updatecoins_simulation_test deterministic
devtools: Fetch and display ACKs at sign-off time in github-merge
getrawtransaction: inform about blockhash argument when lookup fails
doc: Add release notes for 14897 & 15834
travis: Use absolute paths for cache dirs
Improve build-osx formatting
doc: Remove explicit mention of version from SECURITY.md
Add example 2nd arg to signrawtransactionwithkey
Update configure to reject unsafe miniUPnPc API ver
Replace remaining fprintf with tfm::format manually
Failing functional tests stop lcov
Add log output during initial header sync
scripted-diff: Replace fprintf with tfm::format
doc: Rework section on ACK
tinyformat: Add doc to Bitcoin Core specific strprintf
Delete error-prone CScript constructor
devtools: Always use unabbreviated commit IDs in github-merge.py
depends: xtrans: Configure flags cleanup.
scripted-diff: gitian: Use REFERENCE_DATETIME directly.
Remove -mempoolreplacement to prevent needless block prop slowness.
Add test for dumping the private key imported from descriptor
Extend importmulti descriptor tests
[test] Add test to check mempool consistency in case of reorgs
validation: Add missing mempool locks
txpool: Make nTransactionsUpdated atomic
doc: update release process with SECURITY.md
doc: clarify support in SECURITY.md
scripts: add key for fanquake to trusted keys list
doc: Add release notes for 15993
Align formatting with clang-format
Use PACKAGE_NAME in UPnP description
Drop support of insecure miniUPnPc versions
Move DEFAULT_PEERBLOOMFILTERS from validation.h to net_processing.h
Disable bloom filtering by default.
Import private keys from descriptor with importmulti if provided
Add private key derivation functions to descriptors
[build]: check std::system for -[alert|block|wallet]notify
[build] MSVC: set HAVE_SYSTEM for desktop apps
[build] detect std::system or ::wsystem
Clean up logic in memory_cleanse() for MSVC
Include core_io.h from core_read.cpp
Don't use global (external) symbols for symbols that are used in only one translation unit
depends: remove usage of TAR_OPTIONS
docs: create security policy
[qa] Test disconnect block failure -> shutdown
[validation] Crash if disconnecting a block fails
wallet: do not encrypt wallets with disabled private keys
tests: Mark unit test blockfilter_index_initial_sync as non-deterministic
build: remove export GZIP from gitian descriptors
Add riscv64 to outputs list in release-process.md
qt: fix opening bitcoin.conf via Preferences on macOS; see #15409
gui: Set progressDialog to nullptr
New regression testing for CVE-2018-17144, CVE-2012-2459, and CVE-2010-5137.
Added comments referencing multiple CVEs in tests and production code.
Make reasoning about dependencies easier by not including unused dependencies
Add test for GCC bug 90348
Don't GPG sign intermediate commits with github-merge tool
gui: Enable console line edit on setClientModel
Limit Python linting to files in the repo
gui: Enable open wallet menu on setWalletController
bitcoind: update -avoidpartialspends description to account for auto-enable for avoid_reuse wallets
doc: release notes for avoid_reuse
wallet: enable avoid_partial_spends by default if avoid_reuse is set
test: add test for avoidreuse feature
wallet/rpc: add 'avoid_reuse' option to RPC commands
wallet/rpc: add setwalletflag RPC and MUTABLE_WALLET_FLAGS
wallet: enable avoid_reuse feature
wallet: avoid reuse flags
wallet: make IsWalletFlagSet() const
wallet: rename g_known_wallet_flags constant to KNOWN_WALLET_FLAGS
Expire old entries from the in-flight tx map
logging: Add threadsafety comments
Log early messages with -printtoconsole
Replace OpenDebugLog() with StartLogging()
docs: add release note for 14954
contrib: add curl as a required program in gitian-build.py
gui: move coin control OK to the right
wallet: Pass WalletBatch to CWallet::UnsetWalletFlag
Apply the batch treatment to CWallet::SetAddressBook via ImportScriptPubKeys
depends: libX*: --disable-malloc0returnsnull in conf
Move some of ProcessImport into CWallet::Import*
depends: libXext: Bump to 1.3.3 to fix _XEatDataWords
depends: Purge libtool archives
depends: Build secondary deps statically.
Exceptions should be caught by reference, not by value.
Add vertical spacer
Remove global symbols: Avoid using the global namespace if possible
depends: add ability to skip building zeromq
contrib: use newer config.guess & config.sub in install_db4.sh
remove parameters -addresstype=legacy in rpc_rawtransaction test
configure: Add flag for enabling thread_local.
util: Add type safe GetTime
doc: add bitcoin_config.h PACKAGE updates to release process
build: bump bitcoin_config.h packages to v0.18
wallet_balance.py: Prevent edge cases
replace tx hash with txid in test rawtransaction
refactor: Improve CRollingBloomFilter::reset by using std::fill
bench: Add benchmark for CRollingBloomFilter::reset
rpc: Mention getwalletinfo where a rescan is triggered
RPC: Hint for importmulti in help output of importpubkey and importaddress
parameterize hard coded numbers referring to miner conf window
depends: switch to secure download of all dependencies
mempool: remove unused magic number from consistency check
Make --setup command independent
depends: add patch to common dependencies
doc: fix/improve analyzepsbt in doc/psbt.md
Do not show list for the only recipient.
Batch writes for importmulti
Have WalletBatch automatically flush every 1000 updates
Add AddWatchOnlyWithDB, AddKeyOriginWithDB, AddCScriptWithDB functions
Set/unset USE_LXC, USE_VBOX, USE_DOCKER explicitly
test: Speed up cache creation
test: Bump MAX_NODES to 12
scripted-diff: Rename LockAnnotation to LockAssertion
Make sure the compile-time locking promises given via LockAnnotation:s hold also in practice at runtime (ifdef DEBUG_LOCKORDER)
Move LockAnnotation to make it reflect the truth
Move LockAnnotation from threadsafety.h (imported code) to sync.h (our code)
Add a 'logpath' field to getrpcinfo
rpc: bugfix: Properly use iswitness in converttopsbt
Remove temporary method assumeLocked(). Remove LockingStateImpl. Remove redundant cs_main locks.
wallet: Use chain.lock() instead of temporary chain.assumeLocked()
rpc: Switch touched RPCs to IsValidNumArgs
Run all lint scripts
refactoring: IsInitialBlockDownload -> CChainState
refactoring: FlushStateToDisk -> CChainState
refactoring: introduce ChainstateActive()
move-only: make the CChainState interface public
build with -fstack-reuse=none
tests: Fail if RPC has been added without tests
netaddress: Update CNetAddr for ORCHIDv2
docs: Add productivity notes for "dummy rebases"
[doc] rpcwallet: Only fail rescan when blocks have been pruned
validation: Hold cs_main when reading chainActive in RewindBlockIndex
[rpc] deriveaddresses: Correct descriptor checksum in RPCExamples
Disallow extended encoding for non-witness transactions (take 3)
Add option to create an encrypted wallet
[refactor] interfaces: Add missing LockAnnotation for cs_main
init: Remove dead code in LoadChainTip
doc: Mention blocksonly in reduce-traffic.md, unhide option
test: Add test for p2p_blocksonly
QA: add test for HKDF HMAC_SHA256 L32
Add HKDF HMAC_SHA256 L=32 implementations
Add support for descriptors to utxoupdatepsbt
Abstract out UpdatePSBTOutput from FillPSBT
Abstract out EvalDescriptorStringOrObject from scantxoutset
Abstract out IsSegWitOutput from utxoupdatepsbt
[docs] Update release-notes.md
[docs] Update release-process.md
rpc: faster getblockstats using BlockUndo data
test: Format predicate source as multiline on error
Give WalletModel::UnlockContext move semantics
[tests] Make random seed logged and settable
net: Rename ::fRelayTxes to ::g_relay_txes
tests: Make msg_block a witness block
doc: Remove win32 from the release process
test: Remove True argument to CBlock::serialize
Show loaded wallets as disabled in open menu instead of nothing
Add LOCKS_EXCLUDED(cs_main) to LimitValidationInterfaceQueue(...) which does AssertLockNotHeld(cs_main)
.gitignore: Don't ignore depends patches
Add test for ArgsManager::GetChainName
Add unit test NextString, ForEachNoDup functions
fix static_assert for macro HAVE_THREAD_LOCAL
Document strenghtening
Add hash strengthening to the RNG
Do not construct out-of-bound pointers in SHA512/SHA1/RIPEMD160 code
scripted-diff: Bump copyright headers in wallet
wallet: Only fail rescan when blocks have actually been pruned
Add ChaCha20 bench
test_runner: Move pruning back to extended
refactoring: remove unused chainActive
scripted-diff: replace chainActive -> ::ChainActive()
refactoring: introduce unused ChainActive()
rename: CChainState.chainActive -> m_chain
Add ChaCha20 encryption option (XOR)
rpc: Deprecate getunconfirmedbalance and getwalletinfo balances
Remove Windows 32 bit build
[tests] Comment for why logging config is set as command-line args.
Install bitcoin-wallet manpage.
[depends] boost: update to 1.70
Separate reason for premature spends (coinbase/locktime)
Assert validation reasons are contextually correct
[refactor] Update some comments in validation.cpp as we arent doing DoS there
[refactor] Drop unused state.DoS(), state.GetDoS(), state.CorruptionPossible()
scripted-diff: Remove DoS calls to CValidationState
[refactor] Prep for scripted-diff by removing some \ns which annoy sed.
Allow use of state.Invalid() for all reasons
[refactor] Use Reasons directly instead of DoS codes
CorruptionPossible -> BLOCK_MUTATED
CorruptionPossible -> TX_WITNESS_MUTATED
LookupBlockIndex -> CACHED_INVALID
[refactor] Drop redundant nDoS, corruptionPossible, SetCorruptionPossible
[refactor] Add useful-for-dos "reason" field to CValidationState
rpc: Add lock annotations to block{,header}ToJSON
Ban all peers for all block script failures
Clean up banning levels
[refactor] drop IsInvalid(nDoSOut)
[refactor] Refactor misbehavior ban decisions to MaybePunishNode()
[refactor] rename stateDummy -> orphan_state
Drop obsolete sigops comment
rpc: Add getbalances RPC
doc: Add historical release notes for 0.18.0
rpcwallet: Make helper methods const on CWallet
Silence GCC 7 warning "control reaches end of non-void function" (-Wreturn-type) in psbt.cpp
GUI: Move QRImageWidget to its own file-pair
doc: Add release notes for 15730
rpc: Show scanning details in getwalletinfo
wallet: Track current scanning progress
doc: Explain how to pass in non-fundamental types into functions
[docs] Add doxygen comment for CReserveKey
[docs] Add doxygen comment for CKeyPool
rpc: Serialize in getblock without cs_main
rpc: Use IsValidNumArgs in getblock
wallet: Use IsValidNumArgs in getwalletinfo rpc
GUI: Refactor actual QR code rendering into new QRImageWidget::setQR
[tests] log thread names by default in functional tests
test: Add reorg test to wallet_balance
test: Check that wallet txs not in the mempool are untrusted
test: Add getunconfirmedbalance test with conflicts
test: Add wallet_balance test for watchonly
[qa] test_runner: Move feature_pruning to base tests
Replace deprecated Boost Filesystem function
[tests] fix block time in feature_pruning.py
Remove dead code for walletFile check
threads: add thread names to deadlock debugging message
threads: prefix log messages with thread names
tests: add threadutil tests
threads: introduce util/threadnames, refactor thread naming
GetKeyBirthTimes should return key ids, not destinations
Replace CScriptID and CKeyID in CTxDestination with dedicated types
add missing debian contrib files to tarball
Remove unused OpenSSL includes to make it more clear where OpenSSL is used
wallet: Avoid logging no_such_file_or_directory error
lint: Check that all wallet args are hidden
wallet: Track scanning duration
Bugfix: dummywallet: Add -ignorepartialspends to list of ignored wallet options
dummywallet: Reformat ignored wallet options list
remove extraneous scope
wallet: log on rescan completion
Include bitcoin_config.h in release process
Align MSVC build options with Linux build ones
disable HAVE_THREAD_LOCAL on unreliable platforms
appveyor: Write @PACKAGE_NAME@ to config
doc: explain AcceptToMemoryPoolWorker's coins_to_uncache
Remove NOTFOUND transactions from in-flight data structures
Add an explicit memory bound to m_tx_process_time
Improve NOTFOUND comment
Add test for superfluous witness record in deserialization
QA/mininode: Send all headers upfront in send_blocks_and_test to avoid sending an unconnected one
QA: feature_filelock, interface_bitcoin_cli: Use PACKAGE_NAME in messages rather than hardcoding Bitcoin Core
QA: Avoid re-reading config.ini unnecessarily
Doc: remove text about txes always relayed from -whitelist
Align code example with clang-format
Show recipient list as detailedText of QMessageBox
Make SendConfirmationDialog fully fledged
refactor: replace isPotentialtip/waitForNotifications by higher method
Resolve the qt/guiutil <-> qt/optionsmodal CD
wallet: add cachable amounts for caching credit/debit values
test: Add missing syncwithvalidationinterfacequeue to wallet_import_rescan
Add settings merge test to prevent regresssions
rpc: Speedup getaddressesbylabel
Ensure repos are up-to-date
Add WITH_LOCK macro: run code while locking a mutex
wallet: Remove unused import checkpoints.h
Add comments to Python ECDSA implementation
[POLICY] Make sending to future native witness outputs standard
Pure python EC
[wallet] Move maxTxFee to wallet
tests: fix outdate include in blockfilter_index_tests
[test] combine_logs: append node stderr and stdout if it exists
contrib: gh-merge: Use pagination to fetch all review comments
refactor: Add handleNotifications method to wallet
Filter IPv6 by ASN
rpc: Remove dependency on interfaces::Chain in SignTransaction
test: Add test that addmultisigaddress fails for watchonly addresses
doc: Remove upgrade note in release notes from EOL versions
qt: update request payment button text and tab description
bench: Add wallet_balance benchmarks
remove out-of-date comment on pay-to-witness support
doc: Clarify RPC versioning
[wallet] move-only: move CReserveKey to be next to CKeyPool
Include cstring for sanity_test_fdelt if required
[moveonly] Split glibc sanity_test_fdelt out
Extract ParseDescriptorRange
gitignore: add *.plist (clang-check)
gitignore: add *.dat
doc: mention creating application support bitcoin folder on OSX
GUI: Options: Remove the upper-bound limit from pruning size setting
GUI: Options: Set the range of pruning size before loading its value
[rpc] Remove the addresses field from the getaddressinfo return object
travis: Bump second timeout to 33 minutes, Add rationale
scripted-diff: Bump copyright headers in test, bench
docs: Clarify PR guidelines w/re documentation
scripted-diff: Rename test_bitcoin to test/setup_common
doc: describe onlynet option in doc/tor.md
wallet_bumpfee.py: add test for change key preservation
add functional tests for feerate bumpfee with adding inputs
generalize bumpfee to add inputs when needed
test: Use test_bitcoin setup in bench, Add test utils
test: Have segwit always active in (Basic)TestingSetup
docs: Improve netaddress comments
[cleanup] Remove unused CReserveKey
[rpc] simplify generate RPC
bitcoin-wallet tool: Drop libbitcoin_server.a dependency
Remove access to node globals from wallet-linked code
bitcoin-wallet tool: Drop MakeChain calls
[wallet] Refactor CWalletTx::RelayWalletTransaction()
Avoid redefine warning
[build] Move AnalyzePSBT from psbt.cpp to node/psbt.cpp
[docs] Document src subdirectories and different libraries
[build] Move wallet load functions to wallet/load unit
[build] Add several util units
[build] Move several units into common libraries
[build] Move rpc rawtransaction util functions to rpc/rawtransaction_util.cpp
[build] Move rpc utility methods to rpc/util
[build] Move policy settings to new src/policy/settings unit
[build] Move CheckTransaction from lib_server to lib_consensus
test: Remove unused imports
scripted-diff: use self.sync_* methods
test: Pass self to test_simple_bumpfee_succeeds
test: Add BitcoinTestFramework::sync_* methods
test: Pass at most one node group to sync_all
[wallet] Remove unnecessary Chain::Lock parameter from ResendWalletTransactions
[wallet] Schedule tx rebroadcasts in wallet
[wallet] Keep track of the best block time in the wallet
qa: Prevent concurrency issues reading .cookie file
scripted-diff: Rename sync_blocks to send_blocks to avoid name collisions and confusion
test: Properly log named args in authproxy
rpc: Validate maxfeerate with AmountFromValue
doc: correct bitcoinconsensus_version in shared-libraries
Upgrade gitian image before signing
doc: Clarify sendrawtransaction::maxfeerate==0 help
blockfilter: Update BIP 158 test vectors.
rpc: Add getblockfilter RPC method.
init: Add CLI option to enable block filter index.
index: Access functions for global block filter indexes.
test: Unit test for block filter index reorg handling.
test: Unit tests for block index filter.
index: Implement lookup methods on block filter index.
index: Implement block filter index with write operations.
serialize: Serialization support for big-endian 32-bit ints.
blockfilter: Functions to translate filter types to/from names.
index: Ensure block locator is not stale after chain reorg.
index: Allow atomic commits of index state to be extended.
Take non-importing keys into account for spendability warning in descriptor import
Update bips.md for 0.18.0
Mention new descriptor RPCs in descriptors.md
travis: Properly cache and error on timeout
Mention new PSBT RPCs in psbt.md
Remove unused var
rpc: getrpcinfo docs
qa: Make swap_magic_bytes in p2p_invalid_messages atomic
Speed up deriveaddresses for large ranges
Import all origin info in importmulti; even for non-importing pubkeys
Keep full pubkeys in FlatSigningProvider::origins
wallet: Get all balances in one call
rpc: RPCHelpMan: Always push_name when outer type is an object
rpc: Add some doxygen comments to utils
change default Python block serialization to witness
[qa] Overhaul p2p_compactblocks.py
[wallet] Remove ResendWalletTransactionsBefore
gui: Generate bech32 addresses by default
Squashed 'src/secp256k1/' changes from 0b70241850..b19c000063
Update the secp256k1 subtree to the latest upstream version
qa: Check unconfirmed balance after loadwallet
wallet: Update transactions with current mempool after load
interfaces: Add Chain::requestMempoolTransactions
[rpc] remove resendwallettransactions RPC
Disconnect BlockNotifyGenesisWait and RPCNotifyBlockChange properly. Remove no-op CClientUIInterface::[signal_name]_disconnect.
[tests] make pruning test faster
[tests] style fixes in feature_pruning.py
travis: Switch to ubuntu keyserver to avoid timeouts
Silence "Test case [...] did not check any assertions" warnings when running "test_bitcoin --log_level=test_suite"
Avoid repeated log messages in tests by connecting to signal handlers (ThreadSafeMessageBox, etc.) only once
tests: Reduce noise level in test_bitcoin output
Comment for seemingly duplicate LIBBITCOIN_SERVER
doc: rpc-mining: Clarify error messages
release: Update the Windows Codesigning certificate
refactor: combine Chain::findFirstBlockWithTime/findFirstBlockWithTimeAndHeight
wallet: Move CWallet::ReacceptWalletTransactions locks to callers
[tests] Add test for wallet rebroadcasts
QA: add test for CKey::Negate()
CKey: add method to negate the key
Add documentation of struct PSBTAnalysis et al
Refactor analyzepsbt for use outside RPC code
Move PSBT decoding functions from core_io to psbt.cpp
Poly1305: tolerate the intentional unsigned wraparound in poly1305.cpp
Add Poly1305 bench
Add Poly1305 implementation
[docs] fix comment: the return value of findFork is _not_ an ancestor when the specified block is on the active chain
Remove unused AES-128 code
depends: latest rapidcheck, use INSTALL_ALL_EXTRAS
rpc: Rename size to vsize in mempool related calls
Handle the result of posix_fallocate system call
Resolve the checkpoints <-> validation CD.
net: Remove unused unsanitized user agent string CNode::strSubVer
torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently
Interrupt orphan processing after every transaction
[MOVEONLY] Move processing of orphan queue to ProcessOrphanTx
Simplify orphan processing in preparation for interruptibility
docs: Add more tips to productivity.md
[docs] remove reference to signrawtransaction in the developer docs.
contrib: gh-merge: Include review comments in merge commit
[rpc] Remove deprecated functionality message from validateaddress help
[rpc] Remove signrawtransaction warning
gui: Defer removeAndDeleteWallet when no modal widget is active
Move g_is_mempool_loaded into CTxMemPool::m_is_loaded
rpc: Expose g_is_mempool_loaded via getmempoolinfo and /rest/mempool/info.json
doc: Add release notes for 15629
qa: Add test for missing testnet section in conf file
doc: documents how to calculate m_assumed_blockchain_size and m_assumed_chain_state_size on the release process.
doc: Add release notes for 15596
Doc: update ACK description in CONTRIBUTING.md
refactor: Remove unused function
qa: mininode: Clearer error message on invalid magic bytes
doc: Add release notes for 15620
init: Throw error when network specific config is ignored
rpc: Mention all output types in decodescript doc
refactor: Expose UndoReadFromDisk in header
rpc: Uncouple rpcs from maxTxFee global
rpc: Use IsValidNumArgs over hardcoded size checks
refactor: Remove unused function
depends: qt: Don't hardcode pwd path
depends: tar: Always extract as yourself
depends: Defer to Python detected by autoconf
Do not relay banned IP addresses
rpc: decodescript use IsValidNumArgs over hardcoded check
rpc: Clarify decodescript RPCResult doc
Add Gitian key for droark
Set 'distro' explicitly
[docs] release note for disabling reject messages by default
wallet: Improve log output for errors during load
wallet: Remove unused GetLegacyBalance
scripted-diff: wallet: Rename pcoin to wtx
build: depends: Switch to python3
Generate log entry when blocks messages are received unexpectedly.
wallet/rpc: add maxfeerate parameter to sendrawtransaction
wallet/rpc: add maxfeerate parameter to testmempoolaccept
wallet: Log and ignore errors in ListWalletDir and IsBerkeleyBtree
rpc: Document that minconf is an ignored dummy value
rpc: return a number for estimated_feerate in analyzepsbt
doc: correct analysepsbt rpc doc
depends: native_protobuf: avoid system zlib
Enable TLS in link to chris.beams.io
dead code: Remove dead option in HexStr conversion
cli: remove duplicate wallet fields from -getinfo
cli: replace testnet with chain and return network name as per BIP70.
doc: remove release note fragments
doc: correct path in build-windows.md
rest/rpc: Make mempoolinfo atomic
rpc: Speedup getrawmempool when verbose=true
build: use full version string in setup.exe
gitian: Improve error handling
Remove remaining wallet accesses to node globals
test: Refactor vout fetches in rpc_rawtransaction
tests: Print remaining jobs in test_runner.py
wallet_bumpfee.py: Make sure coin selection produces change
Remove use of CCoinsViewMemPool::GetCoin in wallet code
Remove use of CRPCTable::appendCommand in wallet code
Remove use CValidationInterface in wallet code
Document assumptions about C++ compiler
Remove sharp edge (uninitialized m_filter_type) when using the compiler-generated constructor for BlockFilter
In lint-format-strings, open files sequentially
test: .style.yapf: Set column_limit=160
test: Remove python3.4 workaround in feature_dbcrash
doc: Move wallet lock annotations to header
Suggested interfaces::Chain cleanups from #15288
contrib: Bump gitian descriptors for 0.19
doc: Remove pr release notes file in wrong dir
Add sizeof(size_t) assumptions
scripted-diff: Rename CPubKey and CKey::*_KEY_SIZE and COMPRESSED_*_KEY_SIZE
Make SignatureExtractorChecker private to its own file
Make last disconnected block BLOCK_FAILED_VALID, even when aborted
doc: Remove ppa from linux build instructions
.python-version: Specify full version 3.5.6
scripted-diff: Update copyright in ./test
scripted-diff: test: Remove brackets after assert
build: Require python 3.5
scripted-diff: test: Use py3.5 bytes::hex() method
build: Bump version to 0.18.99
docs: Update Transifex links
docs: add "sections" info to example bitcoin.conf
[addrman] Improve collision logging and address nits
modify test for memory locked in case locking pages failed at some point
[rpc] deriveaddresses: add range to CRPCConvertParam
[wallet] remove unused GetScriptForMining
Add regtests for HTTP status codes.
Make deriveaddresses use stop/[start,stop] notation for ranges
test: Bump timeout on tests that timeout on windows
appveyor: Don't build debug libraries instead of "build and delete"
Optimization: don't add txn back to mempool after 10 invalidates
Prevent callback overruns in InvalidateBlock and RewindBlockIndex
Release cs_main during InvalidateBlock iterations
Use stop/[start,stop] notation in importmulti desc range
Add support for stop/[start,stop] ranges to scantxoutset
Support ranges arguments in RPC help
Add ParseRange function to parse args of the form int/[int,int]
fuzz: Link BasicTestingSetup (shared with unit tests)
test: Move main_tests to validation_tests
test: Remove useless test_bitcoin_main.cpp
test: Add missing LIBBITCOIN_ZMQ to test_test_bitcoin_LDADD
msvc: Use a single file to specify the include path
[addrman] Ensure collisions eventually get resolved
[rpc] remove deprecated generate method
[net] feeler connections can be made to outbound peers in same netgroup
doc: Update release process for snap package
test: Add .style.yapf
add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo
[addrman] Improve tried table collision logging
refactor: Use RPCHelpMan::IsValidNumArgs in getrawtransaction
doc: Remove misleading hint in getrawtransaction
test: Simplify create_cache
bench: Benchmark MempoolToJSON
rpc: Pass mempool into MempoolToJSON
rpc/gui: Remove 'Unknown block versions being mined' warning
Enable PID file creation on Windows - Add available WIN PID function - Consider WIN32 in each relevant case - Add new preprocessor definitions to suppress warning - Update error message for generic OS
Call InvalidateBlock without cs_main held
Make RewindBlockIndex interruptible
Call RewindBlockIndex without cs_main held
Release cs_main during RewindBlockIndex operation
Move erasure of non-active blocks to a separate loop in RewindBlockIndex
Abstract EraseBlockData out of RewindBlockIndex
wallet: Use fsbridge::ifstream to fix Windows path issue
Style cleanup.
flatfile: Unit tests for FlatFileSeq methods.
scripted-diff: Rename CBlockDiskPos to FlatFilePos.
Move CDiskBlockPos from chain to flatfile.
validation: Refactor file flush logic into FlatFileSeq.
validation: Refactor block file pre-allocation into FlatFileSeq.
validation: Refactor OpenDiskFile into method on FlatFileSeq.
validation: Extract basic block file logic into FlatFileSeq class.
util: Move CheckDiskSpace to util.
Change brace formatting
Remove use of IsInitialBlockDownload in wallet code
Remove use of uiInterface.LoadWallet in wallet code
circular-dependencies: Avoid treating some .h/.cpp files as a unit
Remove use of AcceptToMemoryPool in wallet code
Remove uses of InitMessage/Warning/Error in wallet code
Remove uses of GetAdjustedTime in wallet code
Remove use of g_connman / PushInventory in wallet code
Remove uses of g_connman in wallet code
Remove uses of fPruneMode in wallet code
Remove uses of fee globals in wallet code
Remove use of CalculateMemPoolAncestors in wallet code
Remove use of GetTransactionAncestry in wallet code
Remove use of GetCountWithDescendants in wallet code
Remove use of IsRBFOptIn in wallet code
Remove uses of CheckFinalTx in wallet code
gui: Drop unused return values in WalletFrame
Remove travis_wait from lint script
refactor: Drop redundant wallet reference
[doc] clarify getdata limit after #14897
rpc: Actually throw help when passed invalid number of params
rpc: Add RPCHelpMan::IsValidNumArgs()
depends: Add commands for each package for each stage
depends: Preprocessing doesn't care about deps
qa: Always refresh stale cache to be out of ibd
[doc] productivity: more advanced git range-diff
[doc] devtools: mention clang-format dependency
qa: Remove mocktime unless required
[doc] productivity: fix broken link
[test] functional: set cwd of nodes to tmpdir
tests: remove byte.hex() to keep compatibility
Add missing #include.
Address test todos by removing -txindex to nodes. Originally added when updating getrawtransaction to stop searching unspent utxos.
Use a single wallet batch for UpgradeKeyMetadata
appveyor: Remove unused NDEBUG removal
scripted-diff: Remove NDEBUG pre-define
Update assumevalid, minimumchainwork, and getchaintxstats to height 563378.
[Doc] importmulti: add missing description of keypool option
[Doc] add missing newline to witnessScript in listunspent help
Implement analyzepsbt RPC and tests
Add checksums to descriptors.md
Make descriptor checksums mandatory in deriveaddresses and importmulti
Add getdescriptorinfo to compute checksum
Descriptor checksum
Move PSBT UTXO fetching to a separate method
Figure out what is missing during signing
Implement joinpsbts RPC and tests
Implement utxoupdatepsbt RPC and tests
doc: update FreeBSD build guide for 12.0
tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree
tests: Add script checking for deterministic line coverage
Import public keys in order
Test pubkey import to keypool
Add option to importmulti add an imported pubkey to the keypool
Fetch keys from keypool when private keys are disabled
Add a method to add a pubkey to the keypool
Add release notes for importing key origin info change
Test importing descriptors with key origin information
Import KeyOriginData when importing descriptors
Implement a function to add KeyOriginInfo to a wallet
Store key origin info in key metadata
Move all PID file stuff to init.cpp
fuzz: test_runner: Better error message when built with afl
travis: Combine --disable-bip70 into existing job
test: txindex: interrupt threadGroup before calling destructor
Remove hdmasterkeyid
Add a method to CWallet to write just CKeyMetadata
Add WriteHDKeypath function and move *HDKeypath to util/bip32.{h,cpp}
Refactor keymetadata writing to a separate method
Remove unused TransactionError constants
[build] AppVeyor: clean cache when build configuration changes
[build] Makefile.am: add rule for src/bitcoin-wallet
Add compile time verification of assumptions we're currently making implicitly/tacitly
fixes m_assumed_blockchain_size variables values:
Bump minimum Qt version to 5.5.1
qa: Add test/fuzz/test_runner.py
fuzz: Script validation flags
fuzz: Move deserialize tests to test/fuzz/deserialize.cpp
Remove manual byte editing in wallet_tx_clone func test
Add release note for listunspent P2WSH change
Add test for P2SH-P2WSH in signrawtransactionwithkey and listunspent
Make listunspent and signrawtransaction RPCs support witnessScript
Log full paths for wallets
gui: Add close wallet action
gui: Add closeWallet to WalletController
interfaces: Add remove to Wallet
Replace script name with special parameter
Remove unnecessary const_cast
[wallet] Close bdb when flushing wallet.
[rpc] mining: Omit uninitialized currentblockweight, currentblocktx
tests: Added missing tests for RPC wallet errors
Factor out combine / finalize / extract PSBT helpers
Switch away from exceptions in refactored tx code
appveyor: Remove outdated libraries
tests: accept unicode characters on Windows
Move PSBT definitions and code to separate files
Factor BroadcastTransaction out of sendrawtransaction
Split DecodePSBT into Base64 and Raw versions
Add pf_invalid arg to std::string DecodeBase{32,64}
Travis: Add test without BIP70 (but still full wallet + tests)
GUI: If BIP70 is disabled, give a proper error when trying to open a payment request file
GUI: If BIP70 is disabled, attempt to fall back to BIP21 parsing
RPCHelpMan: Check default values are given at compile-time
trivial: correct parameter name in comments
[wallet] Support creating a blank wallet
gui: Uppercase bech32 addresses in qr codes
Move ParseConfirmTarget from rpc/mining to rpc/util
Move maxTxFee initialization to init.cpp
qa: Add tool-prefix to functional test readme
A few textual improvements
test_runner: Remove unused --force option
Avoid triggering undefined behaviour (std::memset(nullptr, 0, 0)) if an invalid string is passed to DecodeSecret(...)
wallet: Add lock annotation for mapAddressBook
Change in transaction pull scheduling to prevent InvBlock-related attacks
util: Add SetupHelpOptions()
doc: Add missing wallet-tool manpages
contrib: Add missing wallet tool to gen-manpages.sh
Update linearize-hashes.py
qa: Drop RPC connection if --usecli
travis: Only exit early if compilation took longer than 30 min
doc: Add separate productivity notes document
Add release notes for importmulti descriptor support
Add test for importing via descriptor
[wallet] Allow descriptor imports with importmulti
[wallet] Refactor ProcessImport() to call ProcessImportLegacy()
[wallet] Add ProcessImportLegacy()
[wallet] Refactor ProcessImport()
qa: Test .walletlock file is closed
netaddress: Make IPv4 loopback comment more descriptive
net: Correct comparison of addr count
[Docs] Small updates to getrawtransaction description
remove deprecated mentions of signrawtransaction from fundraw help
qt: Pre-0.18 split-off translations update
init: Modify docs and add release note for 12255
msvc: add rapid check property tests
gui: Show indeterminate progress dialog while opening walllet
gui: Add OpenWalletActivity
wallet: Close wallet env lock file
wallet: Close dbenv error file db.log
interfaces: Avoid interface instance if wallet is null
gui: Add thread to run background activity in WalletController
gui: Add Open Wallet menu
gui: Add openWallet and getWalletsAvailableToOpen to WalletController
interfaces: Add loadWallet to Node
wallet: Factor out LoadWallet
Use RdSeed when available, and reduce RdRand load
Check m_internals in UnregisterValidationInterface
gui: Expose BitcoinGUI::unsubscribeFromCoreSignals
cirrus ci: Inital config
speed up Unserialize_impl for prevector
tests: Make updatecoins_simulation_test deterministic
travis: Revert "Run extended tests once daily"
test: Make bloom tests deterministic
Make PID file creating errors fatal
Improve PID file removing errors logging
Rename Chain getLocator -> getTipLocator
Drop redundant get_value_or
wallet: Add missing cs_db lock
Document rescanblockchain returned stop_height being null
doc: Add cs_main lock annotations for mapBlockIndex
travis: Save cache when compilation took very long
Add suggested rescanblockchain comments
Update ScanForWalletTransactions result comment
Rename ScanResult stop_block field
Update release notes through to cb35f1d3
Release notes: integrate detached & rm backports
travis: Document whether functional tests are run in the job name
Revert "travis: Compile trusty with depends for now"
Prefer boost::optional#get_value_or over #value_or
Piecewise construct to avoid invalid construction
Do not import private keys to wallets with private keys disabled
Refactor importwallet to extract data from the file and then import
Slight tweak to the verify-commits script directions
tests: unify RPC argument to cli argument conversion and handle dicts and lists
travis: Remove unused FUNCTIONAL_TESTS_CONFIG
msvc: build leveldb locally
msvc: build secp256k1 locally
gdb attaching to process during tests has non-sudo solution
Explain that unused mempool memory is added to -dbcache
[tests] Add wallet-tool test
[tools] Add wallet inspection and modification tool
Remove 'boost::optional'-related gcc warnings
build: prefer python3.4 even if newer versions are present on the system
Correct units for "-dbcache" and "-prune"
test: Build fuzz targets into seperate executables
log: Construct global logger on first use
[rpc] util: add deriveaddresses method
[doc] descriptor: explain GetPubKey() usage with cached public key
scripted-diff: rename DescriptorImpl m_script_arg to m_subdescriptor_arg
doc: correct logging rpc return type and example
travis: Compile trusty with depends for now
travis: Compile once on trusty
Add gitian PGP key for hebasto
rpc: Compile on GCC4.8
qa: Use wallet to retrieve raw transactions
[RPC] Update getrawtransaction interface
Pull leveldb subtree
Squashed 'src/leveldb/' changes from 524b7e36a8..f545dfabff
build: Remove WINVER pre define in Makefile.leveldb.inlcude
[test] fuzz: make test_one_input return void
Trivial: Doxygenize existing CBufferedFile and VectorReader comments
RPCHelpMan: Pass through Result and Examples
Descriptor expansions only need pubkey entries for PKH/WPKH
qa: Style-only fixes in touched files
Add warning messages to the debug window
Scripts and tools: Drop no-longer-relevant copyright holder names
Prevent mutex lock fail even if --enable-debug
Trivial: fixup a few doxygen comments
Docs: Update python docs to reflect that wildcard imports are disallowed
Drop defunct Windows compat fixes
qa: Add tests for invalid message headers
tests: unify RPC argument to cli argument conversion and handle dicts and lists
[doc] add notes on release notes
submitheader: more directly test missing prev block header
remove some magic mining constants in functional tests
Doc: add information about security to the JSON-RPC doc
Move non-linux source tarball to bitcoin-binaries
Notify the GUI that the keypool has changed to set the receive button
Added some factors that affect the dependency list
windows: Call SetProcessDEPPolicy directly
windows: Set _WIN32_WINNT to 0x0601 (Windows 7)
Allow connections from misbehavior banned peers.
Default -whitelistforcerelay to off
docs: add perf section to developer docs
tests: add utility to easily profile node performance with perf
Qt: remove macOS launch-at-startup option when compiled with > macOS 10.11
Check for more than private keys disabled to show receive button
[Docs] add short documentation for /rest/blockhashbyheight
[QA] add rest tests for /rest/blockhashbyheight/<HEIGHT>.<FORMAT>
REST: add "blockhashbyheight" call, fetch blockhash by height
Delete README_osx.md and move its contents into build-osx.md
lint: Enable python linters via an array
Remove errant past from walletcreatefundedpsbt for nLocktime replaceability
Add locking annotation for vNodes. vNodes is guarded by cs_vNodes.
zmq: log outbound message high water mark when reusing socket
Update all subprocess.check_output functions in CI scripts to be Python 3.4 compatible
Update zmq to 4.3.1
rpc: remove duplicate solvable field from getaddressinfo
doc: Clarify -blocksdir usage
gui: Refactor to use WalletController
gui: Add WalletController
gui: Use AutoConnection for WalletModel::unload signal
Add comment describing fDisconnect behavior
docs: Spelling error fix on fuzzing.md
Document RNG design in random.h
Use secure allocator for RNG state
Encapsulate RNGState better
DRY: Implement GetRand using FastRandomContext::randrange
Sprinkle some sweet noexcepts over the RNG code
Remove hwrand_initialized.
Switch all RNG code to the built-in PRNG.
Integrate util/system's CInit into RNGState
Abstract out seeding/extracting entropy into RNGState::MixExtract
Add thread safety annotations to RNG state
Rename some hardware RNG related functions
Automatically initialize RNG on first use.
Don't log RandAddSeedPerfmon details
build: Drop macports support
scripted-diff: batch-recase BanMan variables
banman: Add, use CBanEntry ctor that takes ban reason
banman: reformulate nBanUtil calculation
banman: add thread annotations and mark members const where possible
scripted-diff: batch-rename BanMan members
net: move BanMan to its own files
banman: pass in default ban time as a parameter
banman: pass the banfile path in
banman: create and split out banman
net: split up addresses/ban dumps in preparation for moving them
tests: remove member connman/peerLogic in TestingSetup
net: Break disconnecting out of Ban()
Remove no longer needed shellcheck suppressions
Pin shellcheck version to v0.6.0
qa: Improve tests of /rest/headers and /rest/block
doc: /rest/block responds with 404 if block does not exist
qa: Remove race between connecting and shutdown on separate connections
Improve "help-console" message
doc: Explain empty result of /rest/headers
[docs] Expand help text for importmulti changes
[doc] explain what .python-version does
Remove remaining chainActive references from CWallet
Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis
Add findFork and findBlock to the Chain interface
Add time methods to the Chain interface
Add height, depth, and hash methods to the Chain interface
gui: Show current wallet name in window title
gui: Keep network style in BitcoinGUI
gui: Remove unused return type in some BitcoinGUI methods
refactor/lint: Add ignored suggestions to an array
doc: Add release notes for unloadwallet change to synchronous call
rpc: Make unloadwallet wait for complete wallet unload
Add workaround for QProgressDialog bug on macOS
contrib: Allow use of github API authentication in github-merge
contrib: Add support for http[s] URLs in github-merge
contrib: Detailed reporting for http errors in github-merge
qa: Ignore shellcheck warning SC2236
Drop IsLimited in favor of IsReachable
Use FRC::randbytes instead of reading >32 bytes from RNG
Replace remaining 0 with nullptr in Qt code
Don't use zero as null pointer constant (-Wzero-as-null-pointer-constant)
configure: bitcoin-tx doesn't need libevent, so don't pull it in
Use C++11 default member initializers
util: Make ToLower and ToUpper take a char
util: remove unused [U](BEGIN|END) macros
Replace use of BEGIN and END macros on uint256
Remove redundant stopExecutor() signal
Remove redundant stopThread() signal
Add checksum in gitian build scripts for ossl
Do not deselect peer when switching away from tab
Improve Peers tab layout
docs: Clarifying testing instructions
Fail if either disk space check fails
Error if rpcpassword contains hash in conf sections
docs: Add FreeBSD build notes link to doc/README.md
Show addresses for "SendToSelf" transactions
build: Allow to configure --with-sanitizers=fuzzer
Use C++11 default member initializers
test: Run invalid_txs.InputMissing test in feature_block
init: Use systemd automatic directory creation
[tests] move wallet util functions to wallet_util.py
[tests] tidy up wallet_importmulti.py
Qt: update header count regardless of update delay
qt: Use WalletModel* instead of wallet name in console window
qt: Use WalletModel* instead of wallet name in main window
qt: Factor out WalletModel::getDisplayName()
rpc: Avoid permanent cs_main lock in getblockheader
Add BitcoinApplication & RPCConsole tests
Move BitcoinApplication to header so it can be tested
Use std::vector API for construction of test data.
test: Correct ineffectual WithOrVersion from transactions_tests
Add names to Travis jobs
rpc: Document bytessent_per_msg and bytesrecv_per_msg
Release notes: integrate detached release notes
Release notes: update notes through fb52d0684
Don't label transactions "Open" while catching up
doc: Add getrpcinfo release notes
qa: Add tests for getrpcinfo
rpc: Add getrpcinfo command
rpc: Track active commands
[rpc] Correct reconsiderblock help text, add test
Botbot.me (IRC logs) not available anymore
[Trivial] Update license year range to 2019
test: Add basic test for BIP34
Bump manpages
Update copyright headers to 2018
IsReachable is the inverse of IsLimited (DRY). Includes unit tests
Increase timeout of featuer_assumevalid test to fix flaky tests
If tests are ran with (ASan + LSan), Docker needs access to ptrace
Update Travis base OS to Xenial
wallet: Avoid leaking locktime fingerprint when anti-fee-sniping
Get more info about GUI-related issue on Linux
[test] wallet_txn_clone: Correctly clone txin sequence
doc: Add historical release notes for 0.17.1
whitespace: Split ~300 char line into multiple ones
scripted-diff: Rename rpc_timewait to rpc_timeout
scripted-diff: Remove unused 'split' parameter to setup_network
validation: Add cs_main locking annotations
blockfilter: Remove default clause in switch statement.
GUI: Restore RPC Console to non-wallet tray icon menu
test: Avoid racy test p2p_timeouts
Remove misplaced Q_UNUSED and others enhancements
doc: Add comment to cs_main and mempool::cs
test: Bump timeout to run tests in travis thread sanitizer
Add suppression for InterruptRPC (fRPCRunning) data race
Modify build instructions to work with Command Prompt as well as PowerShell; other minor changes
 Made expicit constructor CTransaction(const CMutableTransaction &tx).
 Minimal changes to comply with explicit CMutableTransaction -> CTranaction conversion.
wallet: Initialize stop_block to nullptr in CWallet::ScanForWalletTransactions
test: Add missing validation locks
test: Add comment to g_insecure_rand_ctx
clarifying getrawtransaction[time] get help text
test: Undo thread_local g_insecure_rand_ctx
Making supported operating systems more clear
travis: Use trap and set -e errtrace
build: Enable functional tests in the ThreadSanitizer (TSan) build job
[Qt] Restore < Qt5.6 compatibility for addAction
Refactoring with QString::toNSString
[net] add dnsseed.emzy.de to DNS seeds
fix testmempoolaccept CLI syntax
sync: Add RecursiveMutex type alias
rpc: Remove unused PreCommand signal
lint/format-strings: Correctly exclude escaped percent symbols
Select orphan transaction uniformly for eviction
test: add_nodes can only be called once after set_test_params
test: Make g_insecure_rand_ctx thread_local
Revert "tests: Support calling add_nodes more than once"
Remove Python 2 import workarounds
docs: add NSIS setup/install steps to windows docs
Revert "travis: Save cache on build error"
tests: Test for expected return values when calling functions returning a success code
doc: update NetBSD build instructions for 8.0
Add release notes
Overhaul importmulti logic
Do not permit copying FastRandomContexts
Simplify testing RNG code
Make unit tests use the insecure_rand_ctx exclusively
Bugfix: randbytes should seed when needed (non reachable issue)
Use a FastRandomContext in LimitOrphanTxSize
Introduce a Shuffle for FastRandomContext and use it in wallet and coinselection
Use a local FastRandomContext in a few more places in net
Make addrman use its local RNG exclusively
test: Add tests for truncated scripts
depends: disable unused qt features
depends: qt 5.9.7
depends: expat 2.2.6
[test] functional framework: add CScript hex() for Python 3.4
[test] Travis: enforce Python 3.4 support in functional tests
Removed implicit CTransaction conversion from benchmaks
Removed implicit CTransaction constructor from tests
test: mempool_persist: Verify prioritization is dumped correctly
test: pruning: Check that verifychain can be called when pruned
Add nice table to files.md
test: consensus: Check that final transactions are valid
test: Correctly deserialize without witness
qt: Remove ellipsis from sending/receiving addresses
qt: Add Window menu
qt: Allow to inspect RPCConsole tabs
[docs] add release note for change to GBT
[mining] segwit option must be set in GBT
[tests] Add docstring for wallet_importmulti.py
[tests] add test_address method to wallet_import.py
[tests] add test_importmulti method to wallet_import.py
[tests] add get_multisig function to wallet_importmulti.py
[tests] add get_key function to wallet_importmulti.py
Add E711 to flake8 check
Compare to None with is/is not
RPCHelpMan: Support required arguments after optional ones
doc: Update minimum required qt
Change '== None' to 'is None'
Handle exception as ImportError
threads: fix unitialized members in sched_param
rpc: Document default values for optional arguments
rpc: Assert named arguments are unique in RPCHelpMan
rpc: Avoid creating non-standard raw transactions
[tests] tidy up imports in wallet_importmulti.py
[tests] fix flake8 warnings in wallet_importmulti.py
Improve documentation for running verify-commits.py script
Include util/strencodings.h which is required for IsSpace(...)
[doc] developer-notes.md: point out that UniValue deviates from upstream
add `--retry 5` to curl opts in install_db4.sh
RPCHelpMan: Add space after colons in extended description
Use std::numeric_limits<UNSIGNED>::max()) instead of (UNSIGNED)-1
rpc: Add description to fundrawtransaction vout_index
scripted-diff: Run scripted-diff in subshell
validation: Add and use HaveTxsDownloaded where appropriate
scripts: Add trusted key for Samuel Dobson
Increase maxconnections limit when using poll.
Implement poll() on systems which support it properly.
tests: Modify rpc_bind to conform to #14532 behaviour.
wallet_keypool_topup.py: Test for all keypool address types
Add locking annotations to feeStats, shortStats and longStats
scripted-diff: Rename from cs_feeEstimator to m_cs_fee_estimator
policy: Add Clang thread safety annotations for variables guarded by cs_feeEstimator
Scripts and tools & Docs: Used #!/usr/bin/env bash instead of obsolete #!/bin/bash, added linting for .sh files shebang and updated the Developer Notes.
Cleanup SplashScreen class
Test coinbase category in wallet rpcs
Add all category options to wallet rpc help
Move SocketEvents logic to private method.
Move GenerateSelectSet logic to private method.
Introduce and use constant SELECT_TIMEOUT_MILLISECONDS.
[tests] Add wallet_balance.py
Improve blocksdir functional test.
Use const in COutPoint class
Move CheckBlock() call to critical section
tests: have combine_logs default to most recent test dir
make peertimeout a debug argument, remove error message translation
docs: Add more Doxygen information to Developer Notes
Add CScriptNum decode python implementation in functional suite
Remove duplicate libconsensus linking in test make
qt: Remove hidden columns in coin control dialog
validation: assert that pindexPrev is non-null when required
p2p: allow p2ptimeout to be configurable, speed up slow test
Add comments to descriptor tests
Add descriptor expansion cache
[refactor] Combine the ToString and ToPrivateString implementations
[refactor] Use DescriptorImpl internally, permitting access to new methods
[refactor] Add a base DescriptorImpl with most common logic
Add missing lock in CNode::copyStats(...)
Add missing locking annotations
test: add invalid tx templates for use in functional tests
bench: Destroy wallet txs instead of leaking their memory
Replace CAffectedKeysVisitor with descriptor based logic
rpc: Pass argument descriptions to RPCHelpMan
Bugfix: test/functional/mempool_accept: Ensure oversize transaction is actually oversize
Bugfix: test/functional/rpc_psbt: Correct test description comment
Bugfix: test/functional/rpc_psbt: Remove check for specific error message that depends on uncertain assumptions
Add LSan suppression warnings
Add ASan Travis build
Make test p2p_invalid_messages.py pass: Allow for expected Travis ASAN memory increase
qa: Add wallet_encryption error tests
qa: clean up assert_memory_usage_stable utility
qa: fix p2p_invalid_messages on macOS
Trivial: add doxygen-compatible comments relating to BerkeleyEnvironment
Tests: add unit tests for GetWalletEnv
Free BerkeleyEnvironment instances when not in use
clarify RPC rawtransaction documentation
Less confusing documentation for `torpassword`
Use window() instead of obsolete topLevelWidget()
Make SafeDbt DB_DBT_MALLOC on default initialization
Add Benchmark to test input de-duplication worst case
squashme: connect thru node interface
Indicate -rpcauth option password hashing alg
http -> https
tests: check readability of cookie file
test: allows test_runner command line to receive parameters for each test
qa: Test bitcond shutdown
http: Remove timeout to exit event loop
http: Remove unnecessary event_base_loopexit call
http: Unlisten sockets after all workers quit
http: Send "Connection: close" header if shutdown is requested
rpc: Add wait argument to stop
Remove UBSan suppression
streams: Remove unused seek(size_t)
Correct misleading "overridden options" label
Allow running rpc_bind.py --nonloopback test without IPv6
qt: Call noui_connect to prevent boost::signals2::no_slots_error in early calls to InitWarning
test: Move UBSAN suppressions to test/sanitizer_suppressions/ubsan
travis: --disable-hardening for xenial thread sanitizer
travis: Run thread sanitizer
A few minor formatting fixes and clarifications to descriptors.md
rpcbind: Warn about exposing RPC to untrusted networks
CNetAddr: Add IsBindAny method to check for INADDR_ANY
net: Always default rpcbind to localhost, never "all interfaces"
rpcauth: Improve by using argparse and getpass modules
Add regtest for JSON-RPC batch calls.
tests: Support calling add_nodes more than once
Convert comments to thread safety annotations
test: Add BOOST_REQUIRE to getters returning optional
Do not specify sudo in .travis
Warn unrecognized sections in the config file
revert removal of fstream.hpp header in fs.h
Log env path in BerkeleyEnvironment::Flush
Properly generate salt in rpcauth.py, update tests
Remove unreferenced boost headers
fix an undefined behavior in uint::SetHex
Improve scripted-diff developer docs
fix uninitialized read when stringifying an addrLocal
add test demonstrating addrLocal UB
rpc: Documentation fixups
zmq: enable tcp keepalive
Add release notes
Add matching descriptors to scantxoutset output + tests
Add descriptors to listunspent and getaddressinfo + tests
Use RPCHelpMan for all RPCs
Implement prevector::fill once
Drop defunct IS_TRIVIALLY_CONSTRUCTIBLE handling from prevector.h
lint: Must use RPCHelpMan to generate the RPC docs
Bump the minimum Qt version to 5.2
Rename ListTransactions filter variable
[wallet] Restore ability to list incoming transactions by label
disallow oversized CBlockHeaderAndShortTxIDs
fix a deserialization overflow edge case
add a test demonstrating an overflow in a deserialization edge case
rpc: Correctly name arguments
Add stop_block out arg to ScanForWalletTransactions
qa: Check specific reject reasons in feature_block
GetPubKey: make sigdata const
util.h: explicitly include required QString header
Return a status enum from ScanForWalletTransactions
Make CWallet::ScanForWalletTransactions args and return value const
Introduce SafeDbt to handle DB_DBT_MALLOC raii-style
remove redundant KeyOriginInfo access, already done in CreateSig
CreateTransaction: Assume minimum p2sh-p2wpkh spend size for unknown change
Remove stale comment in CalculateMaximumSignedInputSize
rpc: Add RPCHelpMan for machine-generated help
Release notes: integrate detached release notes
Release notes: update notes through to 11e1ac3ae08
Adjust configure so that only bip70 is disabled when protobuf is missing instead of the GUI
qa: Raise ci test_runner timeout to 40 mins
travis: Avoid timeout on verify-commits check
doc: add detached release notes for #14060
build: Add CLIENT_VERSION_BUILD to CFBundleGetInfoString
Better error message for user when corrupt wallet unlock fails
qa: Avoid race in p2p_invalid_block by waiting for the block request
tests: Make feature_block pass on centos
rpc: Include rpc/util.h where needed for RPCHelpMan
build: Add bitcoin-tx.exe into Windows installer
test_node: get_mem_rss fixups
Throw error if CPubKey is invalid during PSBT keypath serialization
Require a public key to be retrieved when signing a P2PKH input
wallet: Create IsDatabaseLoaded function
importmulti: Don't add internal addresses to address book
[doc] conf: Remove deprecated options from docs, Other cleanup
tests: Add Python dead code linter (vulture)
tests: Remove unused testing code
blockfilter: Additional constructors for BlockFilter.
blockfilter: Refactor GCS params into struct.
Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.
Update KNOWN_VIOLATIONS: Remove fixed violations
Use IsSpace(...) instead of boost::is_space
Use ToLower(...) instead of std::tolower
Use IsDigit(...) instead of std::isdigit
Send fewer spam messages in p2p_invalid_messages
Pass chain locked variables where needed
Remove uses of cs_main in wallet code
Remove direct node->wallet calls in init.cpp
Pass chain and client variables where needed
Add skeleton chain and client classes
Add UBSan suppressions needed to pass test suite
Add UBSan options: print_stacktrace + halt_on_error
doc: Add historical release notes for 0.17.0.1
Add metavar to match var name in help text + Change wording for better readability
appveyor: Script improvement part II
wallet: Add trailing wallet.dat when detecting duplicate wallet if it's a directory.
Refactor: Move m_db pointers into BerkeleyDatabase
Add test for rpcpassword hash error
Error if rpcpassword in conf contains a hash character
example_test.py: fixup coinbase height argument, derive number clearly
blockfilter: Use unordered_set instead of set in blockfilter.
Extract CSipHasher to it's own file in crypto/ directory.
qa: Add test to ensure node can generate all help texts at runtime
Add NODISCARD to all {Decode,Parse}[...](...) functions returning bool. Sort includes.
tests: Explicitly ignore the return value of DecodeBase58(...)
tests: Check return value of ParseParameters(...)
miner: Default to DEFAULT_BLOCK_MIN_TX_FEE if unable to parse -blockmintxfee
trivial: Don't translate in help text
Add SAFE_CHARS[SAFE_CHARS_URI]: Chars allowed in URIs (RFC 3986)
rpc: Make HTTP RPC debug logging more informative
scripted-diff: Rename misleading 'defaultPort' to 'http_port'
Make blockdir always net specific
qt: All tray menu actions call showNormalIfMinimized
qt: Use GUIUtil::bringToFront where possible
qt: Add GUIUtil::bringToFront
scripted-diff: Move util files to separate directory.
warnings: Compiler warning on memset usage for non-trivial type
Remove obj_c for macOS Dock icon menu
Use Qt signal for macOS Dock icon click event
build: Remove illegal spacing in darwin.mk
test_runner: Remove travis specific code
Add regression test for PSBT signing bug #14473
Refactor PSBTInput signing to enforce invariant
Simplify arguments to SignPSBTInput
Add bool PSBTInputSigned
New PartiallySignedTransaction constructor from CTransction
Remove redundant txConst parameter to FillPSBT
More concise conversion of CDataStream to string
tests: add tests for invalid P2P messages
tests: add P2PConnection.send_raw_message
tests: add utility to assert node memory usage hasn't increased
Avoid using numeric_limits for sequence numbers and lock times
Remove duplicated code
Replace platform dependent type with proper const
[tests] Move deterministic address import to setup_nodes
Update release-process.md to include RC version bumping
macOS: disable AppNap during sync
Make clear function argument case in dev notes
Remove obj_c for macOS Dock icon setting
FreeBSD: Document Python 3 requirement for 'gmake check'
doc: Add external interface consistency guarantees
build: include rc number in version number
build: if VERSION_BUILD is non-zero, include it in the package version
align items in contrib init
qt: Remove "Pay only required fee" checkbox
tests: Print dots by default
qt: Improve BitcoinAmountField class
added details about commit messages
Bugfix: RPC: Add address_type named param for createmultisig
gui: explicitly disable "Dark Mode" appearance on macOS
Remove unused `adjustedTime` parameter
Various textual improvements in build docs
travis: Save cache on build error
Don't rely on locale dependent functions in base_blob<BITS>::SetHex(...) (uint256), DecodeBase58(...), ParseMoney(...) and ParseHex(...)
Add tests for InferDescriptor and Descriptor::IsSolvable
Add Descriptor::IsSolvable() to distinguish addr/raw from others
Add support for inferring descriptors from scripts
[tests] Test that nodes respond to getdata with notfound
Remove fs::relative call and fix listwalletdir tests
wallet: Refactor to use WalletLocation
wallet: Add WalletLocation utility class
Add segwit address tests for importmulti
Make getaddressinfo return solvability
Add release notes for importmulti segwit change
Add SegWit support to importmulti with some ProcessImport cleanup
appveyor: Enable multiwallet test
tests: add test case for loading copied wallet twice
[rpc] add 'getnewaddress' hint to 'generatetoaddress' help text.
minor p2p_sendheaders fix of height in coinbase
Removed explicit mention of storage requirement (squashed)
Don't link SSL_LIBS with GUI unless BIP70 is enabled
Add BIP70 deprecation warning
qt: cleanup: Move BIP70 functions together in paymentserver
show the progress of functional test
Update documentation to incude origin information
Add tests for key origin support
Add key origin support to descriptors
[macOS] Remove DS_Store WindowBounds bytes object
travis: Compile once on xenial
rpc: Prevent concurrent savemempool
qa: Ensure wallet unload during walletpassphrase timeout
Revert "Make qt wallet test compatible with qt4"
docs: Document lint tests
scripted-diff: Replace boost::bind with std::bind
refactor: Use boost::scoped_connection in signal/slot, also prefer range-based loop instead of std::transform
rpc: Always throw in getblockstats if -txindex is required
ZMQ: add options to configure outbound message high water mark, aka SNDHWM
doc: Update OpenBSD build guide for 6.4
gitignore contents of db4 folder
docs: Add release notes for listwalletdir RPC
qa: Add tests for listwalletdir RPC
rpc: Add listwalletdir RPC
interfaces: Add getWalletDir and listWalletDir to Node
wallet: Add ListWalletDir utility
Add `doc/bitcoin-conf.md`
[wallet] Deprecate the generate RPC method
[tests] Add generate method to TestNode
Avoid 1 << 31 (UB) in calculation of SEQUENCE_LOCKTIME_DISABLE_FLAG
Textual improvements
Avoid triggering undefined behaviour in base_uint<BITS>::bits()
[docs] Add release note for removing getwitnessaddress
descriptors.md: Refer to descriptors as describing instead of matching
doc: add comment explaining recentRejects-DoS behavior
[tests] Small fixups before deprecating generate
build: Pin to specific versions of Python packages we install from PyPI in Travis
Add ignored word: mut
refactor: Drop boost::this_thread::interruption_point and boost::thread_interrupted in main thread
tests: add test for 'getaddressinfo' RPC result 'ischange' field
rpcwallet: add 'ischange' field to 'getaddressinfo' response
bitcoin-tx: Use constant for n pubkeys check
[doc] getblocktemplate: use SegWit in example
tests: Stop node before removing the notification file
Improve CAmount tests
Add compile time checking for cs_main locks which we assert at run time
test: forward timeouts properly in send_blocks_and_test
clarify rpcwallet flag url change
[rpc] Descriptions: Textual consistency fixes
Add GUARDED_BY(cs_wallet) for setExternalKeyPool, mapKeyMetadata, m_script_metadata and setLockedCoins
Add GUARDED_BY(cs_wallet) for encrypted_batch, nWalletMaxVersion, m_max_keypool_index and nOrderPosNext
wallet: Add Clang thread safety analysis annotations
wallet: Add missing locks
qt: Revert "Force TLS1.0+ for SSL connections"
build: Add --disable-bip70 configure option
Add missing locks and locking annotations for CAddrMan
Add tooltips for both datadir and blocksdir
Stop requiring imported pubkey to sign non-PKH schemes
tests: Allow closed http server in assert_start_raises_init_error
implements different disk sizes for different networks on intro
[docs] path to descriptors.md fixed
[tests] Remove rpc_zmq.py
Clean systray icon menu for -disablewallet mode
Add "Blocksdir" to Debug window
rpc: creates possibility to preserve labels on importprivkey
Don't access out of bounds array entry array[sizeof(array)]
appveyor: trivial build cache modifications
doc: miss install
doc: RPC documentation
travis: set codespell version to avoid breakage
depends: qt: avoid system harfbuzz and bz2
doc: Remove "temporary file" notice from 0.17.0 release notes
tests: Make appveyor run with --usecli
doc: Add historical release notes for 0.17.0
test: Add missing call to skip_if_no_cli()
check that a separator is found for psbt inputs, outputs, and global map
Include some files currently missed by 'make distclean'.
utils: Convert Windows args to utf-8 string
fix converttopsbt permitsigdata arg, add basic test
doc: Add historical release notes for 0.14.3 and 0.15.2
depends: fix bitcoin-qt back-compat with older freetype versions at runtime
Don't use systray icon on inappropriate systems
Document fixed attribute behavior in critical test framework classes.
Check for specific tx acceptance failures based on script signature
Strictly enforce instance attrs in critical functional test classes.
[docs] Add release notes for removing `-usehd`
Set C locale for amountWidget
[gitian] use versioned unsigned tarballs instead of generically named ones
Make MSVC compiler read the source code using utf-8
tests: Add test case for std::ios_base::ate
Move boost/std fstream to fsbridge
utils: Add fsbridge fstream function wrapper
qa: Run more tests with wallet disabled
tests: exclude all tests with difference parameters
Consolidate redundant implementations of ParseHashStr
[wallet] remove redundand restart node
AppVeyor: Move AppVeyor YAML to dot-file-style YAML
test: allow arguments to be forwarded to flake8 in lint-python.sh
Move SocketHandler logic to private method.
Move InactivityCheck logic to private method.
tests: write the notification to different files to avoid race condition
Move DisconnectNodes logic to private method.
Move NotifyNumConnectionsChanged logic to private method.
[wallet] Ensure wallet is unlocked before signing
validation: Pass chainparams in AcceptToMemoryPoolWorker(...)
Don't edit Chainparams after initialization
MOVEONLY: Move versionbits info out of versionbits.o
[REST] improve performance for JSON calls
[wallet] Remove deprecated addwitnessaddress RPC method
[test] Remove deprecated addwitnessaddress from feature_segwit.py
[test] Remove deprecated addwitnessaddress from wallet_bumpfee.py
[test] Remove deprecated addwitnessaddress from p2p_compactblocks.py
[tests] Remove deprecated addwitnessaddress call from wallet_dump.py
[tests] Remove deprecated addwitnessaddress call from feature_nulldummy
doc: Add GitHub pr template
[RPC] Remove warning for removed estimatefee RPC
Make fs::path::string() always return utf-8 string
Add test for conversion from non-witness to witness UTXO
Convert non-witness UTXOs to witness if witness sig created
[wallet] Remove -usehd
lcov: filter /usr/lib/ from coverage reports
Add autogen.sh in ARM Cross-compilation
init: Remove deprecated args from hidden args
tests: Use MakeUnique to construct objects owned by unique_ptrs
doc: Split build linux dependencies
wallet: Avoid potential use of unitialized value bnb_used in CWallet::CreateTransaction(...)
Drop unused setRange arg to BerkeleyBatch::ReadAtCursor
Lift prevector default vals to the member declaration
doc: Split depends installation instructions per arch
doc: Add historical release notes for 0.16.3
uint256: Remove unnecessary crypto/common.h use
gui: Show watch-only eye instead of HD disabled
[rpc] Add getnodeaddresses RPC command
[qa] Test for duplicate inputs within a transaction
amount: Move CAmount CENT to unit test header
appveyor: Run functional tests on appveyor
Changed functional tests which do not require wallets to run without
tests: Make it possible to run functional tests on Windows
travis: Run feature_dbcrash functional tests in cron job
tests: Reorder tests and move most of extended tests up to normal tests
use integer division instead of double conversion and multiplication for computing amounts
doc: Document -checklevel levels
[qa] Use correct python index slices in example test
build: Remove libssl from LDADD unless gui
convert C-style (void) parameter lists to C++ style ()
[build] remove #ifdef ENABLE_WALLET from interfaces/node
qa: Remove unneded import_deterministic_coinbase_privkeys overwrite, add comments
Bugfix: Only run bitcoin-tx tests when bitcoin-tx is enabled
configure: Make it possible to build only one of bitcoin-cli or bitcoin-tx
Pass export privkey DER compression flag correctly
doc: `-help-debug` implies `-help`
wallet: Remove trailing separators from -walletdir arg
wallet: Add walletdir arg unit tests
logging: Replace LogPrint macros with regular functions
build: Move interfaces/* to libbitcoin_server
[depends, zmq, doc] upgrade zeromq to 4.2.5 and avoid deprecated zeromq api functions
Pass tx pool reference into CheckSequenceLocks
Remove redundant BIP174 test from rpc_psbt.json
Call unicode API on Windows
Drop minor GetSerializeSize template
Drop unused GetType() from CSizeComputer
qa: Run all tests even if wallet is not compiled
qa: Premine to deterministic address with -disablewallet
utils: Convert fs error messages from multibyte to utf-8
[build] remove ENABLE_WALLET ifdef from httprpc.cpp
don't translate command line options
travis: avoid timeout without saving caches, also enable all qt
depends: Remove unused Qt 4 dependencies
doc: release notes for -enablebip61 default change
rpc: Remove cs_main lock from blockToJSON and blockHeaderToJSON
rpc: Specify chain tip instead of chain in GetDifficulty
Scripts and tools: increased timeout downloading
[build] Move dummy wallet into its own .cpp file.
tx pool: Use class methods to hide raw map iterator impl details
Update univalue subtree
Squashed 'src/univalue/' changes from 51d3ab34ba..7890db99d6
p2p: Disable BIP 61 by default
qt: Also log and print messages or questions like bitcoind
noui: Move handlers to header file
doc/descriptors.md tweaks
test: Add test for config file parsing errors
Remove reference to deprecated RPC call in build instructions
Docs: Add disable-wallet section to OSX build instructions
Replace duplcate reference with reference to reference doc
Adjust TODO link
Add descriptor reference documentation
doc: Change documentation for =0 for non-boolean options
doxygen: Remove misleading checkpoints comment in CMainParams
lint: Add spell check linter (codespell)
Explain GetAncestor check for m_failed_blocks in AcceptBlockHeader
Increase signal to noise in appveyor build output by reducing the MSVC warning count from 12 to 4 (12 is assuming the changes in #14086 are also implemented).
appveyor: Use clcache to speed up build
wallet: Set encrypted_batch to nullptr after delete. Avoid double free in the case of NDEBUG.
doc: correct GetDifficulty doc after #13288
gui: Favor macOS show / hide action in dock menu
lint: Make sure we read the command line inputs using utf-8 decoding in python
Trivial: update clang thread-safety docs url
build: avoid getifaddrs when unavailable
Test rpc_help.py failed: Check whether ZMQ is enabled or not.
Switch nPrevNodeCount to vNodesSize.
qa: Read reject reasons from debug log, not p2p messages
scripted-diff: Small locking rename
added note that control port must be enabled and how to do that in torrc config file
utils: Use _wfopen and _wreopen on Windows
Add EXCLUSIVE_LOCKS_REQUIRED to CWallet::ListCoins
macOS fix: Check for correct version of flake8 to avoid spurious warnings. The brew installed flake8 version is Python 2 based and does not work.
macOS fix: Add excludes for checks added in the newer shellcheck version installed by brew
macOS fix: Work around empty (sub)expression error when using BSD grep
macOS fix: Avoid mapfile due to ancient version of bash shipped with macOS
tests: Dry run bench_bitcoin (-evals=1 -scaling=0: <1 second running time) as part "make check" to allow for quick identification of assertion/sanitizer failures in benchmarking code
Remove RUN_BENCH logic
Only log "Using PATH_TO_bitcoin.conf" message on startup if conf file exists.
tests: Add missing locking annotations and locks
[wallet] Kill accounts
util: Report parse errors in configuration file
Add lock annotations (cs_args)
Add missing locks (cs_args)
qa: Use named args in some tests
scripted-diff: Use named arguments in feature_block
scripted-diff: Pass node into p2p_segwit acceptance tests
Remove unused fsbridge::freopen
Don't close old debug log file handle prematurely when trying to re-open (on SIGHUP)
validation: Log FormatStateMessage on ConnectBlock error in ConnectTip
blockfilter: Omit empty scripts from filter contents.
Removes the Boost case_conv.hpp dependency.
Implements custom tolower and toupper functions.
Implements ParseNetwork unit test.
Add regression test: Don't assert(...) with side effects
Don't assert(...) with side effects
Add README.md to linux release tarballs
Hide spendable label if priveate key is disabled
[rpc] Remove deprecated sigrawtransaction rpc method.
[RPC] Remove warning about wallet addresses in createmultisig()
[rpc] Remove deprecated validateaddress usage.
test padding non micro timestamps
travis: add  CXXFLAGS=-Wnopsabi at ARM job
add unicode compatible file_lock for Windows
Explicitly initialize prevector _union
Make objects in range declarations immutable by default. Avoid unnecessary copying of objects in range declarations.
[doc] Add release notes for 'account' API removal
[wallet] Re-sort wallet RPC commands
[wallet] Remove wallet account RPCs
fix missing differentiation between UNIT and FUNCTIONAL tests in travis build
Integration of property based testing into Bitcoin Core
[tests] Remove wallet accounts test
contrib: Adjust output to current test format
Report minfeefilter value in getpeerinfo rpc
use export LC_ALL=C.UTF-8
make script exit if a command fails
move remaining travis build steps into individual files
number .travis/ script according to build lifecycle and add README to explain
move lint stage up to resemble travis build ui
abort script in END_FOLD on non-zero exit code
move script sections info individual files and comply with shellcheck
utils: run commands using utf-8 string on Windows
auto generate MSVC project files
travis: Run unit tests --with-sanitizers=undefined
qa: Stop txindex thread before calling destructor
Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe
Move cs_main locking annotations from .cpp to .h
Add compile time checking for all cs_main runtime locking assertions
bench: Benchmark GCS filter creation and matching.
blockfilter: Optimization on compilers with int128 support.
blockfilter: Unit test against BIP 158 test vectors.
blockfilter: Additional helper methods to compute hash and header.
blockfilter: Serialization methods on BlockFilter.
blockfilter: Construction of basic block filters.
blockfilter: Simple test for GCSFilter construction and Match.
blockfilter: Implement GCSFilter Match methods.
blockfilter: Implement GCSFilter constructors.
blockfilter: Declare GCSFilter class for BIP 158 impl.
streams: Unit tests for BitStreamReader and BitStreamWriter.
streams: Implement BitStreamReader/Writer classes.
streams: Unit test for VectorReader class.
streams: Create VectorReader stream interface for vectors.
[contrib] Support ARM and RISC-V symbol check
fix walletcreatefundedpsbt deriv paths, add test
qa: Add some actual witness in rpc_rawtransaction
qa: Add TestNode::assert_debug_log
[Tests] Make combine_logs.py handle multi-line logs
util: Replace boost::signals2 with std::function
depends: Enable unicode support on dbd for Windows
Disallow extended encoding for non-witness transactions
depends: allow CC/CXX to be overridden during configure
Make IS_TRIVIALLY_CONSTRUCTIBLE consistent on GCC < 5
qa: Remove unused deserialization code in msg_version
Skip stale tip checking if outbound connections are off or if reindexing.
Remove default argument to prevector constructor to remove ambiguity
Add new regtest ports in doc following #10825 ports reattributions
rpc: Avoid locking cs_main in some wallet RPC
test: Add tests for RPC help
p2p: Remove dead code for nVersion=10300
Bugfix: NSIS: Exclude Makefile* from docs
test: Add lint to prevent SIGNAL/SLOT connect style
qt: Use new Qt5 connect syntax
test: Check RPC settxfee errors
Disable wallet and address book Qt tests on macOS minimal platform
RPCTypeCheck bip32derivs arg in walletcreatefunded
QA: add basic walletcreatefunded optional arg test
walletcreatefundedpsbt: remove duplicate replaceable arg
Preserve a format of RPC command definitions
http: Add const modifier to HTTPRequest methods
depends: fix qt determinism
appveyor: fetch the latest port data
Add checks for settxfee reasonableness
rpc: Return more specific reject reason for submitblock
refactor: use fs:: over boost::filesystem::
Use wildcard path in test_bitcoin.vcxproj
Add PSBT documentation
Allow ConstructTransaction to not throw error with 0-input txn
don't report minversion wallet entry as unknown
Import CInv from correct module
ci: Add appveyor.yml to build on MSVC
Make macro compatible with MSVC
tests: Replace usage of tostring() with tobytes()
Remove unused dummy_tx variable from FillPSBT
Serialize non-witness utxo as a non-witness tx but always deserialize as witness
qa: Add tests for submitheader
rpc: Expose ProcessNewBlockHeaders
Make SignPSBTInput operate on a private SignatureData object
Pass HD path data through SignatureData
Implement key origin lookup in CWallet
[MOVEONLY] Move ParseHDKeypath to utilstrencodings
Generalize PublicOnlySigningProvider into HidingSigningProvider
Make SigningProvider expose key origin information
Introduce KeyOriginInfo for fingerprint + path
More tests of signer checks
Test that a non-witness script as witness utxo is not signed
Additional sanity checks in SignPSBTInput
Only wipe wrong UTXO type data if overwritten by wallet
gitian: bump descriptors for (0.)18
build: bump version to 0.17.99
contrib: fix GetDesirableServiceFlags typo in seeds/README.md
tests: Use explicit imports
fix deprecation in bitcoin-util-test.py
net: Update hardcoded seeds
contrib: in makeseeds, add 0.16.x to PATTERN_AGENT, remove 0.13.x
doc: move-only release notes of individual prs
docs: fixed bitcoin-cli -help output for help2man
qt: Translations update before 0.17 branch
Removes unsed `CBloomFilter` constructor.
p2p: Clarify control flow in ProcessMessage()
Ported usage of deprecated optparse module to argparse module
Replace median fee rate with feerate percentiles
Cleanup StartRest()
Speed up knapsack_solver_test by not recreating wallet 100 times.
qa: Add p2p_invalid_locator test
Make format string linter understand basic template parameter syntax
Visual Studio build configuration for Bitcoin Core
Use 72 byte dummy signatures when watching only inputs may be used
Use 71 byte signature for DUMMY_SIGNATURE_CREATOR
Always create 70 byte signatures with low R values
wallet: shuffle coins before grouping, where warranted
Introduce a maximum size for locators.
No longer shutdown after encrypting the wallet
After encrypting the wallet, reload the database environment
Add function to close all Db's and reload the databae environment
Move BerkeleyEnvironment deletion from internal method to callsite
qa: blocktools enforce named args for amount
Use pushKV in some new PSBT RPCs.
Squashed 'src/leveldb/' changes from 64052c76c5..524b7e36a8
Simplify comparison in rpc_blockchain.py.
[Tests] Cleanup feature_block.py, remove unnecessary PreviousSpendableOutput object
[Tests] Cleanup extra instances of create_transaction
[Tests] Rename create_tx and move to blocktools.py
qa: wait_for_verack by default
Add risc-v 64-bit to gitian
[depends] Add riscv qt depends support for cross compiling bitcoin-qt
qa: Remove redundant checkmempool/checkblockindex extra_args
Trivial: Revert translated string change, clarify wallet log messages
Log progress while verifying blocks at level 4.
[Docs] upgrade rescan time warning from minutes to >1 hour
Consistently use ParseHashV to validate hash inputs in rpc
ui: Compile boost:signals2 only once
Add linting of WalletLogPrintf(...) format strings
build: Add format string linter
Remove redundant extern
Enable -Wredundant-decls (gcc) if available
Remove redundant redeclaration of rescanblockchain(...) in same scope
Docs: fix GetWarnings docs to reflect behavior
shutdown: Stop threads before resetting ptrs
[RPC] Remove getinfo deprecation warning
wallet: Catch filesystem_error and raise InitError
[docs] Reformat -help output for help2man
qa: Raise feature_help timeout to 5s
qa: Use files for stdout/stderr to support Windows
qa: Run gen_rpcauth with sys.executable
[trivial] add doxygen-compatible comments to CAffectedKeysVisitor
gui: get special folder in unicode
qa: Close stdout and stderr file when node stops
Drop boost::scoped_array
qa: Create unicode tempdir in test_runner
Use LOCK macros for non-recursive locks
Make LOCK, LOCK2, TRY_LOCK work with CWaitableCriticalSection
MOVEONLY Move AnnotatedMixin declaration
Add unit test for DEBUG_LOCKORDER code
test: Add testing of value_ret for SelectCoinsBnB
doc: correct versions in dependencies.md
Docs: Improve "of" grammar
[wallet] Add wallet name to log messages
use only travis jobs: instead of mix of jobs+matrix
trivial: correct typos
fix locale for lint-shell
Remove unused variable
Remove redundant assignments (dead stores)
qa: Quote wallet name for rpc path
gui: Pull initial 017x translations from transifex
tx: Update transifex slug 016x→017x
Allow quicker shutdowns during LoadBlockIndex()
-prune option -help output aligned with code
qa: Extract rpc_timewait as test param
[qt] TransactionView: highlight replacement tx after fee bump
travis: Run bench_bitcoin once
doc: Remove outdated net comment
bench: Make CoinSelection output groups pass eligibility filter
contrib: Support github pull request gitian-build
Ignore unknown config file options for now
Update ValidationInterface() documentation to explicitly specify threading and memory model
Update documentation for SingleThreadedSchedulerClient() to specify the memory model
gui: Reject options dialog when key escape is pressed
gui: Reject edit address dialog when key escape is pressed
gui: Add GUIUtil::ItemDelegate with keyEscapePressed signal
Add BIP174 to list of implemented BIPs
wallet: sum ancestors rather than taking max in output groups
use travis:fold in test script steps
contrib: Remove debian and rpm subfolders
[qa] Add test for too-large wallet output groups
Acquire cs_main before ATMP call in block_assemble bench
doc: add note to contributor docs about warranted PR's
[wallet] correctly limit output group size
scripted-diff: Remove unused first argument to addUnchecked
tx pool: Use the entry's hash instead of the one passed to addUnchecked
Mark CTxMemPoolEntry members that should not be modified const
Report when unknown config file options are ignored
Add CMerkleTx::IsImmatureCoinBase method
chainparams: Update with data from assumed valid chain
doc: Add historical release notes for 0.16.2
Add aarch64 qt depends support for cross compiling bitcoin-qt
refactor: Avoid locking tx pool cs thrice
configure: Initialise assembly enable_* variables
configure: Skip assembly support checks, when assembly is disabled
configure: Invert --enable-asm help string since default is now enabled
Support h instead of ' in hardened descriptor paths
Add experimental warning to scantxoutset
[QA] Extend tests to more combinations
[QA] Add xpub range tests in scantxoutset tests
Swap in descriptors support into scantxoutset
Descriptor tests
Output descriptors module
Add simple FlatSigningProvider
Add more methods to Span class
Return void instead of bool for functions that cannot fail
qt: Set BLOCK_CHAIN_SIZE = 220
Regenerate manpages
Update copyright headers to 2018
make .travis/yml a bit more readable
net: Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(...)
travis: Retry to fetch docker image
Mark single-argument constructors "explicit"
[net_processing] Add thread safety annotations
Annotate AssertLockHeld() with ASSERT_CAPABILITY() for thread safety analysis
scripted-diff: prefer MAC_OSX over __APPLE__
gui: remove macOS ProgressBar workaround
gui: remove SubstituteFonts
doc: mention that macOS 10.10 is now required
release: bump minimum required macOS to 10.10
depends: set OSX_MIN_VERSION to 10.10
[gui] Make proxy icon from statusbar clickable
scripted-diff: Remove trailing whitespaces
depends: use MacOS friendly sed syntax in qt.mk
doc: Add release notes for -avoidpartialspends
clean-up: Remove no longer used ivars from CInputCoin
wallet: Remove deprecated OutputEligibleForSpending
test: Add basic testing for wallet groups
wallet: Switch to using output groups instead of coins in coin selection
wallet: Add output grouping
Add -avoidpartialspends and m_avoid_partial_spends
wallet: Add input bytes to CInputCoin
moveonly: CoinElegibilityFilter into coinselection.h
utils: Add insert() convenience templates
qt: Update translation source messages
Skip is_closing() check when not available.
Return the script type from Solver
Removes Boost predicate.hpp dependency
doc: Adjust bitcoincore.org links
trivial: remove unneeded include
tiny refactor for ArgsManager
Avoid locking mutexes that are already held by the same thread
Use the Travis python language feature on the lint build
Don't unnecessarily install shellcheck on the lint build
trivial: Replace CPubKey::operator[] with CPubKey::vch where possible
Removes the boost/algorithm/string/join dependency
Avoid unnecessarily setting env variables on the lint build
[contrib] Add automatic setup for Ubuntu Bionic
[bench] Add benchmark for unserialize prevector
Check that PSBT keys are the correct length
Avoid creating a temporary vector for size-prefixed elements
docs: Specify preferred Python string formatting technique
docs: Link to python style guidelines from developer notes
wallet: Add error handling. Check return value of ParseUInt32(...) in ParseHDKeypath(...).
wallet: Add tests for ParseHDKeypath(...)
[travis] Don't store debug info if --enable-debug is set
Tests: add usage note to check-rpc-mappings.py
tests: fixes mininode's P2PConnection sending messages on closing transport
doc: Improve command to generate list of authors for release notes
doc: Update broken links to now point to gitian-build.py
lint: Add linter for circular dependencies
contrib: correct version check
Remove redundant statement
Remove redundant unused variables
Remove redundant forward declaration
Remove program options from build system
Replace boost program_options
contrib: Clone core repo in gitian-build
depends: disable Werror for zmqlib release, causes ndk build to break
Extract MakeUnique into utilmemory.h
qa: Temporarily disable test that reads the default datadir location
travis: Check that ~/.bitcoin is never created
wallet: Avoid potential null pointer dereference in CWalletTx::GetAvailableCredit(...)
bench: Remove unused variable
Tests for PSBT
Create wallet RPCs for PSBT
Create utility RPCs for PSBT
[doc] Remove outdated comment about mining code ignoring CPFP
Initialize m_next_send_inv_to_incoming
Migrate gitian-build.sh to python
Change gitian-descriptors to use bionic instead
Modified in_addr6 cast in CConman class to work with msvc.
[QA] Add scantxoutset test
scantxoutset: mention that scanning by address will miss P2PK txouts
scantxoutset: support legacy P2PK script type
scantxoutset: add support for scripts
Blockchain/RPC: Add scantxoutset method to scan UTXO set
[moveonly] Extract RescanWallet to handle a simple rescan
Explain when reindex-chainstate can be used instead of reindex
bench_bitcoin: Avoid read/write to default datadir
test_bitcoin: Avoid read/write to default datadir
Bucket for inbound when scheduling invs to hide tx time
SignPSBTInput wrapper function
Refactor transaction creation and transaction funding logic
Methods for interacting with PSBT structs
Add pubkeys and whether input was witness to SignatureData
Implement PSBT Structures and un/serialization methods per BIP 174
bitcoinconsensus: invalid flags should be set to bitcoinconsensus_error type, add test cases covering bitcoinconsensus error codes
build: add missing leveldb defines
Privatize CWallet::AddToWalletIfInvolvingMe
Extract CWallet::MarkInputsDirty
wallet: assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity
Drop dead code from Stacks
[QA] add createwallet disableprivatekey test
[Qt] Disable creating receive addresses when private keys are disabled
Add disable privatekeys option to createwallet
Add option to disable private keys during internal wallet creation
Add FindScriptPubKey() to search the UTXO set
[tests] skip rpc_zmq functional test when python3 zmq lib is not present
Tools: fix BIND_NOW check in security-check.py
Add facility to store wallet flags (64 bits)
Use common SetDataDir method to create temp directory in tests.
Add depends 32-bit arm support for bitcoin-qt
Refactors `keystore.h` type aliases.
doc: Add release notes for -printtoconsole and -debuglogfile changes
tests: Use MAX_SCRIPT_ELEMENT_SIZE from script.py
Remove dead service bits code
Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain
Remove unused argument to WitnessSigOps(...)
Remove unused argument to DefaultOptions(...)
Remove unused argument to ThreadHTTP(...)
Make g_enable_bip61 a member variable of PeerLogicValidation
Remove useless mapRequest tracking that just effects Qt display.
Corrected text to reflect new[er] process of specifying fingerprints instead of individual keys.
depends: Mention RISC-V known compilation issue with gcc-7.3.x
[tests] functional test for createmultisig RPC
segwit support for createmultisig RPC
Move AddAndGetDestinationForScript from wallet to outputype module
Add outputtype module
depends: update zmq config.guess/config.sub for riscv support
depends: latest config.sub
depends: latest config.guess
Remove unused argument to ProcessGetBlockData(...)
net: Remove unused interrupt from SendMessages
Use __cpuid_count for gnu C to avoid gitian build fail.
bitcoin-tx: Stricter check for valid integers
Don't assert(foo()) where foo has side effects
Upgrade Qt depends to 5.9.6
Ugrade Qt depends to Qt5.9.4
fix bench/prevector.cpp
RPC: Add new getzmqnotifications method.
Docs: Modify policy to not translate command-line help
Remove CombineSignatures and replace tests
Replace CombineSignatures with ProduceSignature
Make SignatureData able to store signatures and scripts
Add simple bech32 benchmarks
Docs: Improve doc of options addnode, connect, seednode
scripted-diff: Replace NET_TOR with NET_ONION
Delete double semicolon in wallet.cpp and misc.cpp
Detect if char equals int8_t
logging: avoid nStart may be used uninitialized in AppInitMain warning
Inline Sign1 and SignN
[RPC] [wallet] allow getbalance to use min_conf and watch_only without accounts.
[tests] p2p_segwit: sync_blocks in subtest wrapper.
[tests] p2p_segwit: remove unnecessary arguments from subtests.
[tests] p2p_segwit: log and assert segwit status in subtest wrapper.
[tests] p2p_segwit: Make sure each subtest leaves utxos for the next.
[tests] p2p_segwit: wrap subtests with subtest wrapper.
[tests] p2p_segwit: re-order function definitions.
[tests] p2p_segwit: standardise comments/docstrings.
Make ZMQ notification interface instance global.
[wallet] GetBalance can take a min_depth argument.
[wallet] factor out GetAvailableWatchOnlyBalance()
[wallet] deduplicate GetAvailableCredit logic
[wallet] Factor out GetWatchOnlyBalance()
[wallet] GetBalance can take an isminefilter filter.
[wallet] loadwallet shouldn't create new wallets.
bench: Simplify CoinSelection
[tests] Check signrawtransaction* errors on missing prevtx info
Error on missing amount in signrawtransaction*
Remove boost dependency (boost/assign/std/vector.hpp)
depends: Update Qt download url
depends: Add RISC-V support
Docs: More precise explanation of parameter "onlynet"
Show symbol for inbound/outbound in peer table
Use immintrin.h everywhere for intrinsics
Add SHA256 implementation using using Intel SHA intrinsics
qa: Avoid start/stop of the network thread mid-test
[qa] wallet_basic: Specify minimum required amount for listunspent
qt: Move BitcoinGUI initializers to class, fix initializer order warning
[qt] coincontrol: Remove unused qt4 workaround
Break circular dependency: init -> * -> init by extracting shutdown.h
Drop unused init.h includes
Log warning message when deprecated network name 'tor' is used (e.g. option onlynet=tor)
doc: Clarify that mempool txiter is const_iterator
travis: Build with --enable-debug (x86_64-unknown-linux-gnu)
Add -ftrapv to DEBUG_CXXFLAGS when --enable-debug is used
[Refactor] CPU feature detection logic for SHA256
bench: Add missing pow.h header
policy: Remove promiscuousmempoolflags
[qa] mininode: Expose connection state through is_connected
[qa] Add a test for merkle proof malleation
Restrict as much as possible in net_processing to translation unit
bugfix: Delete walletView in WalletFrame::removeWallet
Obsolete #!/bin/bash shebang
Qt: load wallet in UI after possible init aborts
[move-only] Move things only referenced in net_processing out of header file
Rescope g_enable_bip61 to net_processing
Decouple wallet version from client version
For AVX2 code, also check for AVX, XSAVE, and OS support
[tests] Remove accounts from wallet_importprunedfunds.py
[wallet] Don't use accounts when checking balance in sendmany
[wallet] deprecate sendfrom RPC method.
Test: Harden lint-filenames.sh
doc: Rewrite some validation doc as lock annotations
bugfix: Remove dangling wallet env instance
ui: Support wallets unloaded dynamically
doc: Add release notes for unloadwallet RPC
test: Wallet methods are disabled when no wallet is loaded
test: Add functional tests for unloadwallet RPC
rpc: Add unloadwallet RPC
doc: Remove mention of Qt4 from build docs
test: Update travis to not test Qt4 anymore
gui: Remove QT_VERSION fallbacks for Qt < 5
Move rpc/util.cpp from libbitcoin-util to libbitcoin-server
Add P2WSH destination helper and use it instead of manual hashing
Add additional unit tests for invalid IsMine combinations
Do not expose invalidity from IsMine
Docs: Improve readability of "Squashing commits"
build: add warning to detect hidden copies in range-for loops
cleanup: avoid hidden copies in range-for loops
doc: Add historical release notes for 0.16.1
validation: count blocks correctly for check level < 3
Add linter: Enforce the source code file naming convention described in the developer notes
Avoid concurrency issue
ScanforWalletTransactions should mark input txns as dirty
have verifytxoutproof check the number of txns in proof structure
Add linter: Make sure all shell scripts opt out of locale dependence using "export LC_ALL=C"
Add "export LC_ALL=C" to all shell scripts
doc: Remove note to install all boost dev packages
build: Build system changes to support only Qt5
expose CBlockIndex::nTx in getblock(header)
tests: Drop variadic macro
travis: Change Mac goal to all deploy so that travis can build all executables for Mac.
Add unavailable options to hidden options category
Add linter: Make sure we explicitly open all text files using UTF-8 or ASCII encoding in Python
Explicitly specify encoding when opening text files in Python code
Improve coverage of SHA256 SelfTest code
travis: Increase travis_wait time while verifying commits
rpc: Extract GetWalletNameFromJSONRPCRequest from GetWalletForJSONRPCRequest
Use python instead of slow shell script on verify-commits
Reset default -g -O2 flags when enable debug
[build] Tune wildcards for LIBSECP256K1 target
Only set fNewBlock to true in AcceptBlock when we write to disk
When build fails due to lib missing, indicate which one
qa: Log as utf-8
scripted-diff: Avoid temporary copies when looping over std::map
rpc: Avoid "duplicate" return value for invalid submitblock
wallet: Erase wtxOrderd wtx pointer on removeprunedfunds
test: Add MempoolAncestryTests
mempool: Calculate descendant maximum thoroughly
wallet: Switch to using ancestor/descendant limits
wallet: Strictly greater than for ancestor caps
Remove deprecated TransactionWithinChainLimit
Switch to GetTransactionAncestry() in OutputEligibleForSpending
Add GetTransactionAncestry to CTxMemPool for general purpose chain limit checking
mempool: Add explicit max_descendants
validation: check the specified number of blocks (off-by-one)
Removed unused == operator from CMutableTransaction.
Drop ParseHashUV in favor of calling ParseHashStr
qa: Remove portseed_offset from test runner
Make ReceivedBlockTransactions return void
crypto: cleanup sha256 build
speed up of tx_validationcache_tests by reusing of CTransaction.
lint: Add linter to error on #include <*.cpp>
Clarify include recommendation
Enforce the use of bracket syntax includes ("#include <foo.h>")
Use bracket syntax includes ("#include <foo.h>")
docs: Mention lint-locale-dependence.sh in developer-notes.md
build: Add linter for checking accidental locale dependence
Document validationinterace callback blocking deadlock potential.
utils: checking for bitcoin addresses in translations
Drop uint 256 not operator
index: Move index DBs into index/ directory.
index: Remove TxIndexDB from public interface of TxIndex.
MOVEONLY: Move BaseIndex to its own file.
index: Generalize logged statements in BaseIndex.
index: Extract logic from TxIndex into reusable base class.
db: Make reusable base class for index databases.
db: Remove obsolete methods from CBlockTreeDB.
cli: Ignore libevent warnings
Enable double-SHA256-for-64-byte code on 32-bit x86
Rename “OS X” to the newer “macOS” convention
build: Guard against accidental introduction of new Boost dependencies
bench: Use non-throwing ParseDouble(...) instead of throwing boost::lexical_cast<double>(...)
Add stdin, stdout, stderr to ignored export list
Use IN6ADDR_ANY_INIT instead of in6addr_any
GCC-7 and glibc-2.27 compat code
[docs] update transifex doc link
doc: split FreeBSD build instructions out of build-unix.md
Add option to use docker for gitian-build.sh
qa: Increase includeconf test coverage
[wallets] [docs] Add release notes for createwallet RPC.
[wallet] [tests] Add tests for `createwallet` RPC.
bench: Don't return a bool from main
qa: Avoid checking reject code for now
wallet: Prevent segfault when sending to unspendable witness
[tests] Add logging to provide anchor points when debugging failures.
Test gArgs erroring on unknown args
Give an error and exit if there are unknown parameters
Use a struct for arguments and nested map for categories
Generic TransactionSignatureCreator works with both CTransaction and CMutableTransaction
travis: Skip cache for lint stage
Stop translating command line options
doc: update bitcoin-dot-org links in release-process.md
refactor: add a function for determining if a block is pruned or not
Remove template matching and pseudo opcodes
[MOVEONLY] Move unused Merkle branch code to tests
8-way AVX2 implementation for double SHA256 on 64-byte inputs
4-way SSE4.1 implementation for double SHA256 on 64-byte inputs
Use SHA256D64 in Merkle root computation
Specialized double sha256 for 64 byte inputs
policy: Treat segwit as always active
Ensure gitian-build.sh uses bash
doc: remove leftover check-doc documentation
[wallet] [rpc] Add `createwallet` RPC
test: Output should be unlocked when spent
wallet: Unlock spent outputs
Travis: Build tests on Ubuntu 18.04 with docker
Make handling of invalid in IsMine more uniform
test: Move linters to test/lint, add readme
Do not use uppercase characters in source code filenames
docs: Add a note about the source code filename naming convention
Report progress in ReplayBlocks while rolling forward
build: split warnings out of CXXFLAGS
Tests: Add data file
Tests: Test new getblockstats RPC
RPC: Introduce getblockstats
wallet: Use shared pointer to retain wallet instance
qa: Initialize lockstack to prevent null pointer deref
Update functional RBF test to check replaceable flag
docs: Update OpenBSD build instructions for OpenBSD 6.3
Declare TorReply parsing functions in torcontrol_tests
Drop the chain argument to GetDifficulty
trivial: Mark overrides as such.
Increased max width of amount field to prevent number overflow bug.
[docs] Add release notes for HD master key -> HD seed rename
[rpc] [wallet] Add 'hdmasterkeyid' alias return values.
[refactor] manually change remaining instances of master key to seed.
scripted-diff: Rename master key to seed
Qt: use [default wallet] as name for wallet with no name
Drop UpdateTransaction in favor of UpdateInput
Qt/Bugfix: fix handling default wallet with no name
Add Unit Test for SingleThreadedSchedulerClient
fixup! ui: Support wallets loaded dynamically
wallet: Exit SyncMetaData if there are no transactions to sync
[qt] Added satoshi unit "Satoshi (sat)" will be displayed in dropdowns and status bars. "sat" will be used when appended to numbers.
[qt] BitcoinUnits::format with zero decimals Formatting with zero decimals will now result in 123 instead of 123.0
doc: Bump to Ubuntu Bionic 18.04 in build-windows.md
break circular dependency: random/sync -> util -> random/sync
Wallet: Refactor ReserveKeyFromKeyPool for safety
RPCAuth Detection in Logs
GUI: Allow generating Bech32 addresses with a legacy-address default
GUI: Rephrase Bech32 checkbox text/tooltip
Add circular dependencies script
[wallet] [docs] Update release notes for removing `getlabeladdress`
[wallet] [rpc] Remove getlabeladdress RPC
ui: Support wallets loaded dynamically
ui: Remove unnecessary variable fFirstWallet
[docs] Add release notes for `loadwallet` RPC.
[wallet] [tests] Test loadwallet
[wallet] [rpc] Add loadwallet RPC
[wallet] Pass error message back from CWallet::Verify()
[wallet] Add CWallet::Verify function
Add unit tests for signals generated by ProcessNewBlock()
[gui] Add proxy icon in statusbar
[wallet] setup wallet background flushing in WalletInit directly
[qt] OptionsDialog: add prune setting
net: Serve blocks directly from disk when possible
Break circular dependency: chain -> pow -> chain
Add compile time checking for all cs_wallet runtime locking assertions
doc: Mention disabling BIP61 in bips.md
net: Add option `-enablebip61` to configure sending of BIP61 notifications
bench: Add block assemble benchmark
travis: Rename the build stage "check_doc" to "lint"
Bump wallet version for pre split keypool
Use a keypool of presplit keys after upgrading to hd chain split
Allow -upgradewallet to upgradewallets to HD
Test sethdseed
Add 'sethdseed' RPC to initialize or replace HD seed
Do not unlock cs_main in ABC unless we've actually made progress.
Enable Travis checking for two Python linting rules we are currently not violating
Enable W191 and W291 flake8 checks. Remove trailing whitespace from Python files. Convert tabs to spaces.
test: Ensure that recursive -includeconf produces appropriate warnings
util: warn about recursive -includeconf arguments in configuration files
[tests] Remove spurious error log in p2p_segwit.py
[qa] Handle disconnect_node race
[qa] Avoid printing to console during cache creation
Make gArgs aware of the arguments
Bugfix: ensure consistency of m_failed_blocks after reconsiderblock
[tests] Allow stderr to be tested against specified string
[Tests] Use LIBC_FATAL_STDERR_=1 in tests
[Tests] Write stdout/stderr to datadir instead of temp file.
wallet: Improve logging when BerkeleyDB environment fails to close
[bitcoin-11004] creating another jobs for the CHECK_DOC=1, separated from the core jobs
[qt]: changes sendcoinsdialog's box layout for improved readability.
qa: Remove unused option --srcdir
Refactor SHA256 code
Benchmark Merkle root computation
Bugfix: the end of a reorged chain is invalid when connect fails
RPC Docs: gettxout*: clarify bestblock and unspent counts
Refactor: RPC: Separate GetBlockChecked() from getblock()
Remove enum specifier (to avoid re-declare scoped enum as unscoped)
replace modulus with FastMod
Add Clang thread safety analysis annotations
Add compile time checking for all ::mempool.cs runtime locking assertions
Separate HaveKey function that checks whether a key is in a keystore
Cache witness hash in CTransaction
Make CMutableTransaction constructor explicit
qa: Pad scriptPubKeys to get minimum sized txs
Policy to reject extremely small transactions
Add transaction tests for constant scriptCode
Add constant scriptCode policy in non-segwit scripts
doc: Mention good first issue list in CONTRIBUTING.md
Make it clear which functions that are intended to be translation unit local
Add some checks for invalid recursion in IsMine
Simplify IsMine logic
Make IsMine stop distinguishing solvable/unsolvable
Make coincontrol use IsSolvable to determine solvability
[logging] Don't incorrectly log that REJECT messages are unknown.
wallet: Reset BerkeleyDB handle after connection fails
Print a log message if we fail to shrink the debug log file
refactor: Avoid extra lookups of mapAddressBook in listunspent RPC
rpc: Reduce cs_main lock in listunspent
[tests] Remove 'account' API from wallet functional tests
Trivial: s/SetBestChain/ChainStateFlushed in comments after #13106
devtools: Make linter check LogPrint calls
Add missing newlines to LogPrint debug logging
Make sure initialization occurs in the constructor
wallet: Interrupt rescan on shutdown request
Handle unsuccessful fseek(...):s
logging: remove unused return value from LogPrintStr
doc: Add release notes for -includeconf
test: Test includeconf parameter.
rpcauth: Make it possible to provide a custom password
[doc] qt: fixes broken link on readme
Revert #12769: Add systemd service to bitcoind in debian package
Add Windows shutdown handler
Remove python2 from configure.ac
[Docs] Add version footnote to tor.md
wallet: Add Clang thread safety annotations for variables guarded by cs_db
nit: descendent should be spelled descendant even in the release-notes
scheduler: Add Clang thread safety annotations for variables guarded by m_cs_callbacks_pending
nit: fix typo for entry description string
Remove script to clean up datadirs
util: Store debug log file path in BCLog::Logger member.
scripted-diff: Rename BCLog::Logger member variables.
util: Refactor GetLogCategory.
Add Clang thread safety annotations for variables guarded by cs_warnings
Add Clang thread safety annotations for variables guarded by cs_nTimeOffset
Add Clang thread safety annotations for variables guarded by cs_rpcWarmup
Add missing cs_KeyStore lock
Add locking annotations for variables guarded by cs_KeyStore
util: Encapsulate logCategories within BCLog::Logger.
util: Move debug file management functions into Logger.
util: Establish global logger object.
Use --failfast when running functional tests on Travis
Add --failfast option to functional test runner
Simplify semantics of ChainStateFlushed callback
scripted-diff: Rename SetBestChain callback ChainStateFlushed
Remove "rpc" category from GetWarnings
rpc: Move RPC_FORBIDDEN_BY_SAFE_MODE code to reserved section
tests: Add test for 64-bit PE, modify 32-bit test results
build: sync ax_boost_chrono/unit_test
Remove Safe mode
-includeconf=<path> support in config handler, for including external configuration files
Don't test against min relay fee information in mining_prioritisetransaction.py
Add compile time checking for all cs_KeyStore runtime locking assertions
[doc] Include txindex changes in the release notes.
[test] Simple unit test for TxIndex.
[rpc] Public interfaces to GetTransaction block until synced.
[index] Move disk IO logic from GetTransaction to TxIndex::FindTx.
[validation] Replace tx index code in validation code with TxIndex.
[init] Initialize and start TxIndex in init code.
[index] TxIndex method to wait until caught up.
[index] Allow TxIndex sync thread to be interrupted.
[index] TxIndex initial sync thread.
[index] Create new TxIndex class.
[db] Migration for txindex data to new, separate database.
[db] Create separate database for txindex.
Add "bip125-replaceable" flag to mempool RPCs
[tests] [qt] Add tests for address book manipulation via EditAddressDialog
[tests] [qt] Introduce qt/test/util with a generalized ConfirmMessage
[qt] Display more helpful message when adding a send address has failed
Add purpose arg to Wallet::getAddress
test: add rpcauth-test to AC_CONFIG_LINKS to fix out-of-tree make check
[tests] Make rpcauth.py testable and add unit tests
qa: Clarify documentation for send_txs_and_test
wallet: Make vpwallets usage thread safe
List support for BIP173 in bips.md
Make tests pass after 2020
wallet: Make fee settings non-static members
Add logging and error handling for file syncing
qt: Don't log to console by default
test: Add rpcauth pair that generated by rpcauth
qa: Normalize executable location
[tests] tidy up blocktools.py
[doc][trivial] no retargeting in regtest mode
Add systemd service for bitcoind
Sync contrib/debian from Matt Corallo's PPA
Use anonymous namespace instead of static functions
Mention removal of bare multisig IsMine in release notes
Do not treat bare multisig as IsMine
Optimization: only test for witness scripts at top level
Track difference between scriptPubKey and P2SH execution in IsMine
Switch to a private version of SigVersion inside IsMine
Do not expose SigVersion argument to IsMine
Output values for "min relay fee not met" error
[wallet] [tests] Test disallowed multiwallet params
[qa] Attach node index to test_node AssertionError and print messages
trivial: Improve include comment in src/interfaces/wallet.h
node: Removed unused wallet-related methods from the Node interface.
benchmark: Removed bench/perf.cpp
Remove unused IsMine overload
Make CScript -> CScriptID conversion explicit
Consistently log CValidationState on failure
wallet: Add HasWallets
wallet: Add AddWallet, RemoveWallet, GetWallet and GetWallets
MOVEONLY: Move logging code from util.{h,cpp} to new files.
refactor: Drop CWalletRef typedef
scripted-diff: Rename CChainState::g_failed_blocks to m_failed_blocks
Add new fee structure with all sub-fields denominated in BTC
bench: Amend mempool_eviction test for witness txs
bench: Move constructors out of mempool_eviction hot loop
[doc] Add comments for chainparams.h, validation.cpp
[docs] Add release notes for deprecated 'account' API
[wallet] [tests] Add tests for accounts/labels APIs
[wallet] [rpc] Deprecate wallet 'account' API
[wallet] [rpc] Deprecate account RPC methods
Make --enable-debug to pick better options
Print to console by default when not run with -daemon
qa: Add test for orphan handling
Hold cs_main while calling UpdatedBlockTip() and ui.NotifyBlockTip
net: Minor accumulated cleanups
[tests] Set -deprecatedrpc=accounts in tests
[tests] Rename rpc_listtransactions.py to wallet_listtransactions.py
[wallet] [rpc] Remove duplicate entries in rpcwallet.cpp's CRPCCommand table
qt:Show the entire Window when double clicking on taskbar
Default to defining endian-conversion DECLs in compat w/o config
[doc] build-windows: Switch to Artful, since Zesty is EOL
tests: Remove redundant bytes²
Enable additional flake8 rules
Minor Python cleanups to make flake8 pass with the new rules enabled
tests: Remove compatibility code not needed now when we're on Python 3
correcting the array name from pnSeeds6 to pnSeed6
Avoid launching as admin when NSIS installer ends.
Note new weight field in release-notes.
Test new weight field in p2p_segwit
Expose a transaction's weight via RPC
[contrib] convert test-security-check to python3
add lint tool to check python3 shebang
[MOVEONLY] Turn CScript::GetOp2 into a function and move to cpp
[MOVEONLY] Move CSCript::FindAndDelete to interpreter
Delete unused non-const-iterator CSCript::GetOp overloads
Make iterators in CScript::FindAndDelete const
[qa] Test that v0 segwit outputs can't be spent pre-activation
Always enforce SCRIPT_VERIFY_WITNESS with P2SH
[qa] Remove some pre-activation segwit tests
Separate NULLDUMMY enforcement from SEGWIT enforcement
Use P2SH consensus rules for all blocks
wallet: Refactor g_wallet_init_interface to const reference
wallet: Make WalletInitInterface members const
test: Add rpc_bind test to default-run tests
Avoid std::locale/imbue in DateTimeStrFormat
Drop dead code CScript::Find
macOS: Prevent Xcode 9.3 build warnings
Tighten up bech32::Decode(); add tests.
logging: bypass timestamp formatting when not logging
Give an error when rescan is aborted by the user
Add cancel button to rescan progress dialog
Add assertion to guide static analyzers. Clang Static Analyzer needs this guidance.
tests: Avoid copies of CTransaction
bitcoin-tx: Remove unused for loop
speed up wallet_hd.py and clarify/augment checks
debug log number of unknown wallet records on load
Add AssertLockHeld assertions in CWallet::ListCoins
Add shell script linting: Check for shellcheck warnings in shell scripts
Add config changes to release notes
[tests] Unit tests for -testnet/-regtest in [test]/[regtest] sections
ArgsManager: special handling for -regtest and -testnet
[tests] Unit tests for network-specific config entries
ArgsManager: Warn when ignoring network-specific config setting
ArgsManager: limit some options to only apply on mainnet when in default section
[tests] Use regtest section in functional tests configs
[tests] Unit tests for config file sections
ArgsManager: support config file sections
ArgsManager: drop m_negated_args
depends: Add 'make clean' and 'make clean-all' rules
Document how FlushStateMode::NONE is handled
Call FlushStateToDisk(...) regardless of fCheckForPruning
rpc: Drop redundant testing of signrawtransaction prevtxs args
Remove redundant initializations from the constructor
Ignore macOS daemon() depracation warning
ArgsManager: keep command line and config file arguments separate
Extract consts for WITNESS_V0 hash sizes
[docs] Add release notes for wallet 'label' API.
[wallet] [rpc] introduce 'label' API for wallet
Refine travis check for duplicate includes
Make DummySignatureCreator a singleton
Make BaseSignatureCreator a pure interface
wallet: Remove redundant lambda function arg in handleTransactionChanged
Increase entropy in test temp directory name
Reorder travis builds
tests: run tests in parallel
tests: split up actual tests and helper files
Initialize non-static class members where they are defined
Initialize editStatus and autoCompleter. Previously not initialized where defined or in constructor.
Docs: fixed link, replaced QT with Qt
added logging line back that was accidentally removed with #10762
[qa] Delete cookie file before starting node
Logprint the start of a rescan
util: Remove designator initializer from ScheduleBatchPriority
util: Pass pthread_self() to pthread_setschedparam instead of 0
[doc] devtools: Setup ots git integration
Add Travis check for duplicate includes
Remove duplicate includes
test: Assert on correct variable
Introduce BigEndian wrapper and use it for netaddress ports
qa: Windows fixups for functional tests
[qa] Ensure bitcoind processes are cleaned up when tests end
Use std::bind instead of boost::bind to re-lock the wallet
[rpcwallet] Clamp walletpassphrase value at 100M seconds
list the types of scripts we should consider for a witness program
Add m_ prefix to WalletBatch::m_batch
Update walletdb comment after renaming.
scripted-diff: Rename wallet database classes
[logging] add lint-logs.sh to check for newline termination.
[logging] Comment all continuing logs.
doc: add qrencode to brew install instructions
scripted-diff: Avoid `interface` keyword to fix windows gitian build
Asserts that the tx version number is a signed 32-bit integer.
tests: Add check for test suite name uniqueness in lint-tests.sh
tests: Add note about uniqueness requirement for test suite names
tests: Avoid test suite name collision in wallet crypto_tests
build: Show enabled sanitizers in configure output
[test] fundrawtransaction: lock watch-only shared address
wallet: Refactor to WalletInitInterface* const g_wallet_init_interface
wallet: Make WalletInitInterface and DummyWalletInit private
[tests] Add additional unit tests for -nofoo edge cases
[tests] Check GetChainName works with config entries
[tests] Add unit tests for ReadConfigStream
ReadConfigStream: assume the stream is good
Separate out ReadConfigStream from ReadConfigFile
[tests] Add unit tests for GetChainName
Move ChainNameFromCommandLine into ArgsManager and rename to GetChainName
Get rid of ambiguous OutputType::NONE value
Support serializing Span<unsigned char> and use that instead of FLATDATA
Add Slice: a (pointer, size) array view that acts like a container
wallet: Initialize m_last_block_processed to nullptr. Initialize fields where defined.
doc: Use bitcoind in Tor documentation
Tests: Add Metaclass for BitcoinTestFramework
Add developer notes about blocking GUI code
Use WalletBalances struct in Qt
Remove direct bitcoin calls from qt/sendcoinsdialog.cpp
Remove direct bitcoin access from qt/guiutil.cpp
Remove direct bitcoin calls from qt transaction table files
Remove direct bitcoin calls from qt/paymentserver.cpp
Remove direct bitcoin calls from qt/addresstablemodel.cpp
Remove direct bitcoin calls from qt/coincontroldialog.cpp
Remove most direct bitcoin calls from qt/walletmodel.cpp
Remove direct bitcoin calls from qt/optionsdialog.cpp
Remove direct bitcoin calls from qt/rpcconsole.cpp
Remove direct bitcoin calls from qt/bantablemodel.cpp
Remove direct bitcoin calls from qt/peertablemodel.cpp
Remove direct bitcoin calls from qt/intro.cpp
Remove direct bitcoin calls from qt/clientmodel.cpp
Remove direct bitcoin calls from qt/splashscreen.cpp
Remove direct bitcoin calls from qt/utilitydialog.cpp
Remove direct bitcoin calls from qt/bitcoingui.cpp
Remove direct bitcoin calls from qt/optionsmodel.cpp
Remove direct bitcoin calls from qt/bitcoin.cpp
[trivial] Add newlines to end of log messages.
Modernize best block mutex/cv/hash variable naming
Add src/interface/README.md
make clean removes src/qt/moc_ files
[tests] simplify binary and hex response parsing in interface_rest.py
[tests] only use 2 nodes in interface_rest.py
[tests] refactor interface_rest.py to avoid code repetition
[tests] Make json request building more consistent in interface_rest.py
[tests] improve logging and documentation in interface_rest.py
[tests] fix flake8 warnings in interface_rest.py test
[wallet] [rpc] [doc] importprivkey: hint about importmulti
Adding logging for loop iteration level in p2p_sendheaders.py
[moveonly] Extract HelpRequested to dry up the help options testing
[tests] Stop feature_block.py from blowing up memory.
Bugfix: Include <memory> for std::unique_ptr
[tests] Remove Comparison Test Framework
[tests] Remove bip9-softforks.py
doc: Add testmempoolaccept to release-notes
Avoid travis lint-include-guards error
Add P2P, Network, and Qt categories to the desktop icon
qa: Match full plain text by default
travis: Run verify-commits only on cron jobs
rpc: fix type mistmatch in listreceivedbyaddress
[tests] Test starting bitcoind with -h and -version
test: Remove travis checkout depth
Enable flake8 warning F841 ("local variable 'foo' is assigned to but never used")
Remove assigned but never used local variables
[verify-commits] Add some additional useful documentation.
Increase LevelDB max_open_files unless on 32-bit Unix.
Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished
[contrib] fixup symbol-check.py Python3 support
[contrib] fixup security-check.py Python3 support
adapt bumpfee change discard test to be more strict and add note on p2sh discrep
Add --with-sanitizers option to configure
Improve formatting of developer notes
Add Marco-expired-key-signed-commits to allow-revsig-commits
Revert "test: Update trust git root".
init: Remove help text for non-existent -fuzzmessagestest arg
contrib: Remove unused import string
[Tests] fix a typo in TestNode.assert_start_raises_init_error()
test: List any failed tests at the end of test_runner output
Make base58 python contrib code work with python3
test: Make summary row bold-red if any test failed
Track negated arguments in the argument paser.
Add additional tests for GetBoolArg()
[wallet] Add dummy wallet init class
[wallet] Use global g_wallet_init_interface to init/destroy the wallet.
doc: Add note about our preference for scoped enumerations ("enum class")
Set SCHED_BATCH priority on the loadblk thread.
Use explicit casting in cuckoocache's compute_hashes(...) to clarify integer conversion
doc: Refer to witness reserved value as spec. in the BIP
Change all python files to use Python3
do not truncate .dat extension for wallets in gui
qt: Avoid resetting on resetguisettigs=0
[wallet] Create wallet init interface.
[wallet] Move wallet init functions into WalletInit class.
[Tests] Use blockmaxweight where tests previously had blockmaxsize
rpc: Adjust ifdef to avoid unreachable code
Qt: hide RPCConsole wallet selector when no wallets are present
Qt: show wallet name in request dlg in case of multiwallet
Qt: show wallet name in send confirmation dlg in case of multiwallet
GUI: RPCConsole: Log wallet changes
Qt: Get wallet name from WalletModel rather than passing it around
Qt: When multiple wallets are used, include in notifications the name
Qt: QComboBox::setVisible doesn't work in toolbars, so defer adding it at all until needed
Qt: Add wallet selector to debug console
Reduce variable scopes
[RPC] Remove field in getblocktemplate help that has never been used
Introduce interface for signing providers
Qt: Remove unused method setupAmountWidget(...)
Add username and ip logging for RPC method requests
[REST] Handle UTXO retrieval when ignoring the mempool
Make CTxMemPool::isSpent() const
rpc: Add testmempoolaccept
Move CKeyStore::cs_KeyStore to CBasicKeyStore
Inline CKeyStore::AddKey(const CKey &) in CBasicKeyStore
[CI]: bump travis timeout for make check to 50m
add release note for sendmany output shuffling
shuffle sendmany recipients ordering to shuffle tx outputs
Docs: Improve documentation on standard communication channels
Add lint-include-guards.sh which checks include guard consistency
Document include guard convention
[config] Remove blockmaxsize option
[tests] Change feature_csv_activation.py to use BitcoinTestFramework
[tests] Move utility functions in feature_csv_activation.py out of class.
[tests] Remove nested loops from feature_csv_activation.py
Move compressor utility functions out of class
Add native support for serializing char arrays without FLATDATA
Replace boost::call_once with std::call_once
feebumper: discard change outputs below discard rate
shuffle selected coins before transaction finalization
Qt: Warn users about invalid-BIP21 URI bitcoin://
tests: Remove unused argument max_invalid from check_estimates(...)
Make FastRandomContext support standard C++11 RNG interface
use base58 map instead of strchr()
Support serialization as another type without casting
Remove unnecessary NONNEGATIVE_SIGNED
-blocksdir: keep blockindex leveldb database in datadir
tests: Test connecting with non-existing RPC cookie file
tests: Test connecting to a non-existing server
qa: Allow for partial_match when checking init error
scripted-diff: rename TestNode to TestP2PConn in tests
[tests] Improve assert message when wait_until() fails
[tests] Change feature_block.py to use BitcoinTestFramework
qa: Use node.datadir instead of tmpdir in test framework
Rename wallet_accounts.py test
Rename account to label where appropriate
Remove unreachable help conditions
[tests] Add logging to feature_block.py
[tests] Tidy up feature_block.py
tests: Add lint-tests.sh which checks the test suite naming convention
tests: Rename test suits not following the test suite naming convention
tests: Add note about test suite naming convention
Qt: remove "new" button during receive-mode in addressbook
Avoiding 'file' function name from python2 with more descriptive variable naming
[tests] improve logging in feature_csv_activation.py
[tests] fix flake8 nits in feature_csv_activation.py
[Tests] Require exact match in assert_start_raises_init_eror()
[Tests] Move assert_start_raises_init_error method to TestNode
QA: Add -blocksdir test
wallet: Change output type globals to members
Append scripts to new test_list array to fix bad assignment
[Trivial] Simplify if-else blocks and more descriptive variable naming
Make verify-commits.sh test that merges are clean
test: Use os.path.join consistently in feature_pruning tests
test: Use wait_until in tests where time was used for polling
Add static_assert to prevent VARINT(<signed value>)
Document RPC method aliasing
Test that BnB is not used when there are preset inputs
Remove redundant checks for MSG_* from configure.ac
Do not check for main() in libminiupnpc
ax_boost_{chrono,unit_test_framework}.m4: take changes from upstream
Actually disable BnB when there are preset inputs
Remove unused variable in SortForBlock
Provide relevant error message if datadir is not writable.
Polish interfaces around PeerLogicValidation
Apply hardening measurements in bitcoind systemd service file
Support deserializing into temporaries
travis: Clone depth 1 unless $CHECK_DOC
Add a test to make sure that negative effective values are filtered
Benchmark BnB in the worst case where it exhausts
Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack and use it
Add a GetMinimumFeeRate function which is wrapped by GetMinimumFee
Move original knapsack solver tests to coinselector_tests.cpp
Move current coin selection algorithm to coinselection.{cpp,h}
Add tests for the Branch and Bound algorithm
Remove coinselection.h -> wallet.h circular dependency
Use a struct for output eligibility
Move output eligibility to a separate function
Implement Branch and Bound coin selection in a new file
[qa] util: Remove unused sync_chain
qt: Avoid querying unnecessary model data when filtering transactions
rpc: Update createrawtransaction examples
Split up and sanitize CAccountingEntry serialization
Ubuntu xenial first dependencies
Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s
Allow to optional specify the directory for the blocks storage
configure: UniValue 1.0.4 is required for pushKV(, bool)
Log fatal LevelDB errors more verbosely
Store effective value, fee, and long term fee in CInputCoin
Calculate and store the number of bytes required to spend an input
Split up and sanitize CWalletTx serialization
scripted-diff: Convert 11 enums into scoped enums (C++11)
Format timestamps using ISO 8601 formatting (e.g. "2018-02-28T12:34:56Z")
bitcoin-cli: Provide a better error message when bitcoind is not running
[wallet] Get rid of CWalletTx default constructor
[wallet] Construct CWalletTx objects in CommitTransaction
qa: Cache only chain and wallet for regtest datadir
[rpc] createrawtransaction: Accept sorted outputs
CheckMinimalPush comments are prescriptive
Simplify Base32 and Base64 conversions
[gitian] Add kallewoof key for signing
[gitian] Re-order keys by owner first name alphabetic order
Add tests of listreceivedbyaddress address filtering
Add address filtering to listreceivedbyaddress
qt: Remove TransactionTableModel::TxIDRole
Generalize ConvertBits
Limit the number of IPs we use from each DNS seeder
depends: biplist 1.0.3
Give hint about gitian not able to download
[tests] bind functional test nodes to 127.0.0.1
p2wpkh, p2wsh and p2sh-nested scripts in decodescript
doc: Mention configure without wallet in FreeBSD instructions
net: Correct addrman logging
Add LookupBlockIndex function
Add documentation to PeerLogicValidation interface and related functions
Add missing cs_lock in CreateWalletFromFile
Lock cs_main while loading block index in AppInitMain
Assert cs_main is held when accessing mapBlockIndex
Add test-before-evict discipline to addrman
gui: Show messages as text not html
depends: Remove ccache
qt: Set modal overlay hide button as default
doc: SIGNER can contains space inside now.
test: Update trust git root
Add DynamicMemoryUsage() to LevelDB
Bugfix: RPC: Add missing UnregisterHTTPHandler for /wallet/
Qt: Ensure UI updates only come from the currently selected walletView
Qt: Add a combobox to toolbar to select from multiple wallets
Qt: Load all wallets into WalletModels
depends: patch pthread_set_name_np out of zeromq
depends: zeromq 4.2.3
depends: Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin
Shut down if trying to connect a corrupted block
Add a test for large tx output scripts with segwit input.
Create new wallet databases as directories rather than files
Allow wallet files not in -walletdir directory
Allow wallet files in multiple directories
Remove deprecated PyZMQ call from Python ZMQ example
docs: Update osx brew install instruction
Show a transaction's virtual size in its details dialog.
gitian-build.sh: fix signProg being recognized as two parameters
[qt] Improved "custom fee" explanation in tooltip
[qt] navigate to  transaction history page after send
[script] lint-whitespace: improve print linenumber
Add tests for HexStr std::reverse_iterator cases
Add tests for HexStr corner cases
[test] Add tests for self usage in arith_uint256
[arith_uint256] Do not destroy *this content if passed-in operator may reference it
Allow dustrelayfee to be set to zero
[arith_uint256] Avoid unnecessary this-copy using prefix operator
Remove redundant includes. Conform to header include guidelines.
Use memset() to optimize prevector::resize()
Reduce redundant code of prevector and speed it up
Add new prevector benchmarks.
fix version typo
Add build support for 'gprof' profiling.
[docs] Minor improvements to Compatibility Notes
test: Use wait_until to ensure ping goes out
doc: Add historical release notes for 0.16.0
[Tests] Check output of parent/child tx list from getrawmempool, getmempooldescendants, getmempoolancestors, and REST interface
[RPC] Add list of child transactions to verbose output of getrawmempool
[QA] add wallet-rbf test
Disable wallet fallbackfee by default on mainnet
Avoid unintentional unsigned integer wraparounds in tests
rpc: Allow typeAny in RPCTypeCheck
Don't test against the mempool min fee information in mempool_limit.py
test: Plug memory leaks and stack-use-after-scope
Let wallet importmulti RPC accept labels for standard scriptPubKeys
createmultisig no longer takes addresses
Declare CMutableTransaction a struct in rawtransaction.h
[depends] Allow depends system to support armv7l
Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings
init: Remove translation for `-blockmaxsize` option help
[test] Round target fee to 8 decimals in assert_fee_amount
Split off key_io_tests from base58_tests
Split key_io (address/key encodings) off from base58
Stop using CBase58Data for ext keys
Replace CBitcoinSecret with {Encode,Decode}Secret
docs: clarified systemd installation instructions in init.md for Ubuntu users.
Add test for signrawtransaction
scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests
Split signrawtransaction into wallet and non-wallet
Add setter for g_initial_block_download_completed
fixes #12465 added missing terminating newline character in log message
Revert "[tests] bind functional test nodes to 127.0.0.1"
Assert CPubKey::ValidLength to the pubkey's header-relevent size
[doc] dev-notes: Members should be initialized
scripted-diff: validateaddress to getaddressinfo in tests
Create getaddressinfo RPC and deprecate parts of validateaddress
[rpc] Move DescribeAddressVisitor to rpc/util
Only call NotifyBlockTip when the active chain changes
[tests] Add a (failing) test for waitforblockheight
Bump leveldb subtree
Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5
rpc: Interrupt block generation on shutdown request
test: Add missing signal.h header
[rpc] split wallet and non-wallet parts of DescribeAddressVisitor
gitian: bump descriptors for (0.)17
travis: Full clone for git subtree check
qa: Improve getchaintxstats functional test
rpc: Refactor blockhash parse in getchaintxstats
devtools: Exclude patches from lint-whitespace
qa: Move common args to bitcoin.conf
test: Add unit test for LockDirectory
fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS
[depends] latest config.guess and config.sub
[depends] miniupnpc 2.0.20180203
[depends] ccache 3.4.1
[depends] expat 2.2.5
[qt] send: Clear All also resets coin control options
Make signrawtransaction accept P2SH-P2WSH redeemscripts
Update mac_alias to 2.0.7
Delete mac_alias patch
[tests] Change invalidblockrequest to use BitcoinTestFramework
qt: Initialize members in WalletModel
Remove useless string initialization.
Add some script tests related to BOOL ops and odd values like negative 0.
fix possible shutdown assertion with -reindex-shutdown
Interrupt loading thread after shutdown request
Reset pblocktree before deleting LevelDB file
rpc: Reject deprecated reserveChangeKey in fundrawtransaction
Improve "Turn Windows Features On or Off" step
scripted-diff: Use UniValue.pushKV instead of push_back(Pair())
univalue: Bump subtree
Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba
[scripts] gitian-builder.sh: fix --setup doc, LXC is default
[QA] add NODE_NETWORK_LIMITED address relay and sync test
[QA] fix mininode CAddress ser/deser
[QA] Allow addrman loopback tests (add debug option -addrmantest)
Connect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD
Accept addresses with NODE_NETWORK_LIMITED flag
Refactor: One CBaseChainParams should be enough
boost: drop boost threads for [alert|block|wallet]notify
boost: drop boost threads from torcontrol
boost: remove useless threadGroup parameter from Discover
boost: drop boost threads for upnp
[wallet] Indent only change of CWallet::AvailableCoins
[wallet] Make CWallet::ListCoins atomic
Consistently use FormatStateMessage in RPC error output
Add test for 'mempool min fee not met' rpc error
[RPC] Remove deprecated addmultisigaddress return format
[RPC] Remove deprecated createmultisig object
[tests] Remove test for deprecated createmultsig option
qt: Poll ShutdownTimer after init is done
qt: Clarify some comments
qt: Make sure splash screen is freed on AppInitMain fail
http: Remove numThreads and ThreadCounter
Bech32 addresses in dumpwallet
Add gitian PGP key: akx20000
Add braces to meet code style on line-after-the-one-changed.
http: Remove WaitExit from WorkQueue
http: Join worker threads before deleting work queue
Hold mempool.cs for the duration of ATMP.
add fivepiece key fingerprint
wallet: Disallow abandon of conflicted txes
[tests] Update README after filename change
Add AbsPathForConfigVal to consolidate datadir prefixing for path args
Clarify help messages for path args to mention datadir prefix
[rpc] Remove deprecated getmininginfo RPC option
[rpc] remove deprecated estimatefee RPC
Use ptrdiff_t type to more precisely indicate usage and avoid compiler warnings.
Extend #11583 to include the most common message generated by non-contributing peers (port scanners?) 37% of the log default log entries for a node that has been up for ~24hrs was "version handshake timeout..."
[tests] Remove estimatefee from rpc_deprecated.py test
[tests] Remove tests for deprecated estimatefee RPC
Document method for reviewers to verify chainTxData
Properly alphabetize output of CLI --help option.
[rpc] Reduce scope of cs_main and cs_wallet locks in listtransactions
[gui] Defer coin control instancing
net: don't retry failed oneshot connections forever
net: initialize socket to avoid closing random fd's
Remove suggestion to make cloned repository world-writable for Windows build.
QA: segwit.py: s/find_unspent/find_spendable_utxo/
doc: Explain how to update chainTxData in release process
contrib: Add support for out-of-tree builds in gen-manpages.sh
Organise Linux build instructions to be categorised by distro
Add NetBSD build instruction links
test: Make ua_comment test pass on 0.16.0
[tests] Change invalidtxrequest to use BitcoinTestFramework
[tests] Add P2PDataStore class
doc: Update manpages to 0.16.99
build: Bump version to 0.16.99
qt: Periodic translations update
[tests] Require all tests to follow naming convention
[build] Add NETBSD leveldb target to configure.ac
[doc] Create build-netbsd.md
Refactor HaveKeys to early return on false result
feebumper: Use PreconditionChecks to determine bump eligibility
Add special error for genesis coinbase to gettransaction
Enable flake8 warnings for all currently non-violated rules
Enable flake8 warning for "list comprehension redefines 'foo' from line N" (F812)
[net] add seed.bitcoin.sprovoost.nl to DNS seeds
[tests] Reduce NodeConn connection logging from info to debug
[build] Add db4_cxx to bitcoin_find_bdb48.m4
[rpc] Mention that HD is enabled if hdmasterkeyid is present
Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&)
[wallet] Remove duplicate mapWallet lookups
Avoid leaking prioritization information when relaying transactions
fee estimator: avoid sorting mempool on shutdown
Build: Add a makefile target for Doxygen documentation
Update chainTxData for 0.16
Move scheduler/threadGroup into common-init instead of per-app
Update defaultAssumeValid according to release-process.md.
qa: Add missing syncwithvalidationinterfacequeue to tests
Improve comments/logging in p2p-versionbits-warning.py
[tests] Remove EXPECTED_VIOLATION_COUNT
[tests] Rename misc functional tests.
[tests] Rename rpc_* functional tests.
[tests] Rename p2p_* functional tests.
[tests] Rename wallet_* functional tests.
[tests] Rename feature_* functional tests.
qa: Prepare functional tests for Windows
net: Update hardcoded seeds
contrib: Update ATTERN_AGENT to include 0.15.x
initwallet: Do not translate highly technical addresstype help
[qa] Use address type in addmultisigaddress to avoid addwitnessaddress
qt: Bump BLOCK_CHAIN_SIZE to 200GB
[Trivial] link mentioned scripted-diff-commit
[qa] Test fundrawtransaction with change_type option
[rpc] Add change_type option to fundrawtransaction
[wallet] Add change type to CCoinControl
qt: Update translation source file
tx: Update transifex slug for 0.16
[rpc] Add address type option to addmultisigaddress
net: Move misbehaving logging to net logging category
Mention that other RPC calls report keys as "imported" while txns are still missing
Reduce cs_main lock in ReadBlockFromDisk, only read GetBlockPos under the lock
Make sure WalletRescanReserver has successfully reserved the rescan
Add RAII wallet rescan reserver
Avoid pemanent cs_main/cs_wallet lock during wallet rescans
move more bumpfee prechecks to feebumper::PreconditionChecks
qa: Make TestNodeCLI command optional in send_cli
qa: Rename cli.args to cli.options
Make CKey::Load references const
[wallet] use P2WPKH change output if any destination is P2WPKH or P2WSH
Update chainparams comment for more info on service bits per dnsseed
Fall back to oneshot for DNS Seeds which don't support filtering.
Use GetDesireableServiceFlags in static seeds, document this.
test_runner: Readable output if create_cache.py fails
Updating benchmarkmarking.md with an updated sample output and help options
Correct mempool mapTx comment
Use PACKAGE_NAME instead of hardcoding application name in log message
Don't allow relative -walletdir paths
wallet: Deprecate addwitnessaddress
qa: Sync with validationinterface queue in sync_mempools
Avoid potential null dereference in ReceiveCoinsDialog constructor
rpc: Add deprecation error for `getinfo`
[qt] receive tab: bech32 address opt-in checkbox
[tests] bind functional test nodes to 127.0.0.1
Log debug build status and warn when running benchmarks
Abstract directory locking into util.cpp
Make .walletlock distinct from .lock
Generalise walletdir lock error message for correctness
Add a test for wallet directory locking
Add a lock to the wallet directory
Use flexible font size for QRCode image address
[docs] Clarify -walletdir usage
Use mempool's ancestor sort in transaction selection
trivial: fix address_type help text of getnewaddress and getrawchangeaddress
Add test for new ancestor feerate sort behavior
Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code.
Test walletpassphrase timeout bounds and clamping
Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds
Use the character based overload for std::string::find.
Disallow using addresses in createmultisig
Add address_types test
Support downgrading after recovered keypool witness keys
SegWit wallet support
Implicitly know about P2WPKH redeemscripts
[test] Serialize CTransaction with witness by default
Support P2WPKH and P2SH-P2WPKH in dumpprivkey
Support P2WPKH addresses in create/addmultisig
Sort mempool by min(feerate, ancestor_feerate)
Refactor CompareTxMemPoolEntryByDescendantScore
Remove unused mempool index
Allow multiwallet.py to be used with --usecli
[tests] allow tests to be run with --usecli
TestNodeCLI batch emulation
Prevent TestNodeCLI.args mixups
Improve TestNodeCLI output parsing
[scripts] lint-whitespace: check last N commits or unstaged changes
Remove the ending slashes from RPC URI format.
[Refactor] Remove unused fQuit var from checkqueue.h
fix nits: variable naming, typos
[qa] Improve prioritisetransaction functional test
[scripts] lint-whitespace: use perl instead of grep -P
[contrib] Add --disable-replication to install_db4
[contrib] Use BDB_LIBS/CFLAGS in install_db4
Replaces numbered place marker %2 with %1.
Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json
[qt] Add support to search the address book
[tests] util_tests.cpp: actually check ignored args
Extend validateaddress information for P2SH-embedded witness
Expose method to find key for a single-key destination
Improve witness destination types and use them more
[refactor] GetAccount{PubKey,Address} -> GetAccountDestination
Abstract out IsSolvable from Witnessifier
[tests] Remove redundant import in blocktools.py test
Increment MIT Licence copyright header year on files modified in 2017
[scripts] Add missing univalue file to copyright_header.py
[qt] Simplifies boolean expression model && model->haveWatchOnly()
[Trivial] Update license year range to 2018
bips: add bip176 (Bits Denomination)
Implements a virtual destructor on the BaseRequestHandler class.
[rpc] Adding ::minRelayTxFee amount to getmempoolinfo and updating mempoolminfee help description
Use best-fit strategy in Arena, now O(log(n)) instead O(n)
[qt] change µBTC to bits
remove brew c++ flag
Add helper to wait for validation interface queue to catch up
Block ActivateBestChain to empty validationinterface queue
Add an interface to get the queue depth out of CValidationInterface
Require no cs_main lock for ProcessNewBlock/ActivateBestChain
Avoid cs_main in net_processing ActivateBestChain calls
Refactor ProcessGetData in anticipation of avoiding cs_main for ABC
bluematt's testnet-seed now supports x9 (and is just a static list)
[Doc] Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC
Removed CCheckQueueSpeed benchmark
Improved microbenchmarking with multiple features.
[build] .gitignore: add QT Creator artifacts
doc: Update OpenBSD build instructions for 6.2
[Wallet] Use RBF by default in QT only
depends: fix libzmq's needless linking against libstdc++
qa: Note on test order in test_runner
Improve readability by removing redundant casts to same type (on all platforms)
clientversion: Use full commit hash for commit-based version descriptions
doc: Update FreeBSD build instructions to use bdb4
contrib: FreeBSD compatibility in install_db4.sh
Add script birthtime metadata to dump and import wallet
Add script dump note to RPC help text and release notes
Add test for importwallet
Add dumpwallet scripts test
Add scripts to importwallet RPC
Add CScripts to dumpwallet RPC
Add GetCScripts to CBasicKeyStore
Add configuration/argument testing
univalue: Bump subtree
Squashed 'src/univalue/' changes from fe805ea74f..07947ff2da
[tests] refactor node_network_limited
[tests] remove redundant duplicate tests from node_network_limited
[tests] node_network_limited - remove race condition
[tests] define NODE_NETWORK_LIMITED in test framework
[tests] fix flake8 warnings in node_network_limited.py
Remove dead feeest-file read code for old versions
[docs] initial QT documentation, move Qt Creator instructions
contrib: Remove xpired 522739F6 key
tests: Remove unused variable (firstAddrnServices)
contrib: Make X=Y arguments work in install_db4
contrib: New clang patch for install_db4
contrib: fix typo in install_db4.sh help message
[build] Warn that only libconsensus can be built without boost
contrib: Replace developer keys with list of pgp fingerprints
remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx
[net] add seed.testnet.bitcoin.sprovoost.nl to testnet DNS seeds
Typo fix
Create new mutex for orphans, no cs_main in PLV::BlockConnected
Use std::thread::hardware_concurrency, instead of Boost, to determine available cores
Add required package dependencies for depends cross compilation [skip-ci]
simplify CheckMinimalPush checks, add safety assert
[wallet] Make CWallet::FundTransaction atomic
[wallet] Tidy up CWallet::FundTransaction
Drop extra script variable in ProduceSignature
Clarify getbalance meaning a tiny bit in response to questions.
test: Add createrawtransaction functional tests
test: Add multidict to support dictionary with duplicate key (laanwj)
Remove unused include in hash.cpp
Update files.md for new wallets/ subdirectory
Cleanups for walletdir PR
net: use CreateSocket for binds
net: pass socket closing responsibility up to caller for outgoing connections
net: Move IsSelectableSocket check into socket creation
net: split socket creation out of connection
Stop special-casing phashBlock handling in validation for TBV
[tests] remove redundant univalue_tests.cpp
rpc: Validate replaceable type in createrawtransaction
wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions
Do not un-mark fInMempool on wallet txn if ATMP fails.
[tests] Add NetworkThread assertions
[tests] Use network_thread_start() in tests.
[tests] Add network_thread_ utility functions.
add test for unconfirmed balance between restarts
don't attempt mempool entry for wallet transactions on startup if already in mempool
Add Travis check for unused Python imports
Remove unused Python imports
Split up key and script metadata for better type safety
[tests] Check tests conform to naming convention
Make boost::multi_index comparators const
[Doc] Update bip.md, add support for BIP 159
[QA] Add node_network_limited test
[build] Add missing stuff to clean-local - test/functional/test_framework/__pycache__ - test/cache
doc: Update release notes for share/rpcauth/rpcauth.py rename
qa: Add getrawtransaction in_active_chain=False test
Rename rpcuser.py to rpcauth.py
Avoid leaking the prune height through getdata (fingerprinting countermeasure)
Always set NODE_NETWORK_LIMITED bit
Add NODE_NETWORK_LIMITED flags and min block amount constants
Always return true if AppInitMain got to the end
rpcuser.py: Use 'python' not 'python2'
Test datadir in conf file exists
[test] Add tests for getrawtransaction with block hash.
[rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly.
Avoid calling GetSerializeSize on each tx in a block if !fTxIndex
Move some additional variables into CChainState private
Create initial CChainState to hold chain state information
Move block writing out of AcceptBlock
Move txindex/undo data disk location stuff out of ConnectBlock
Make DisconnectBlock unaware of where undo data resides on disk
test: Add tests for `-debuglogfile` with subdirs
doc: Update release notes for `-debuglogfile`
test: Add test for `-debuglogfile`
Loop through the bip9 soft fork deployments instead of hard coding
Add `-debuglogfile` option
[tests] README.md nit fixes
Docs: Bump OSX version to 10.13 in build-osx.md
Prefix leveldb debug logging
Trivial: fix comments for ZeroMQ bitcoind args
[tests] Rename NodeConn and NodeConnCB
[tests] Add combinedlogslen argument to test_runner.py
[tests] [travis-ci] Move Travis functional test log post processing to test_runner
[tests] Improve logging shutdown and add hint for combine_logs
depends: fix zmq build with mingw < 4.0
[depends] ZeroMQ 4.2.2
[tests] Move version message sending from NodeConn to NodeConnCB
[tests] Make NodeConnCB a subclass of NodeConn
[tests] Move only: move NodeConnCB below NodeConn
[tests] Tidy up mininode
threads: add a thread_local autoconf check
[tests] Remove mininode periodic (half-hour) ping messages
Add Clang thread safety analysis annotations
[Docs] Bump minimum required version of GCC to 4.8
[Tests] Adding unit tests for GetDifficulty in blockchain.cpp.
[tests] Remove rpc property from TestNode in p2p-segwit.py.
clarify abortrescan rpc use
net: Add missing locks in net.{cpp,h}
Remove redundant locks
Document partial validation in ConnectBlock()
[docs] links to code style guides
Improve help text and behavior of RPC-logging
Call BannedListChanged outside of cs_setBanned lock
Switched sync.{cpp,h} to std threading primitives.
tests: move pwalletMain to wallet test fixture
[Qt] Improved copy: RBF checkbox, tooltip and confirmation screen
[tests] Test that mempool rejects coinbase transactions
Add help-console command to Qt debug console
[tests] address review comments
tests: Remove unused mininode functions deser_int_vector(f) and ser_int_vector(l)
Remove unused imports
scripted-diff: Orthogonalize string quoting
bitcoin_qt.m4: Add missing dollar sign for variable.
bitcoin_qt.m4: Add missing braces around variables in autoconf messages.
bitcoin_qt.m4: Use correct M4 quoting characters.
bitcoin_qt.m4: Improve QT_VERSION tests.
cli: Reject arguments to -getinfo
doc: Specify required source location for Windows WSL builds
Make debugging test crash easier
Create walletdir if datadir doesn't exist and fix tests
Default walletdir is wallets/ if it exists
Add release notes for -walletdir and wallets/ dir
Add test for -walletdir
Add -walletdir parameter to specify custom wallet dir
Remove includes in .cpp files for things the corresponding .h file already included
[docs] Add reference to install_db4.sh in OS X build instructions
[build] Add a script for installing db4
[tests] fix flakiness in sendheaders.py
[tests] refactor check_last_announcement() in sendheaders.py
[tests] tidy up BaseNode in sendheaders.py
Make default issue text all comments to make issues more readable
[tests] fix flake8 warnings in sendheaders.py
Add gitian PGP key: willyko
[travis-ci] Only run linters on Pull Requests
Remove trailing whitespace causing travis failure
Recommend #include<> syntax in developer notes
refactor: Include obj/build.h instead of build.h
test: refactor: Use absolute include paths for test data files
qt: refactor: Changes to make include paths absolute
build: Remove -I for everything but project root
qt: refactor: Use absolute include paths in .ui files
scripted-diff: Replace #include "" with #include <> (ryanofsky)
qa: Add multiwallet prefix test
fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it
[build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck
[docs] Add instructions for lcov coverage report generation
Make ISSUE_TEMPLATE a bit shorter, mention hardware tests
Update WSL installation for Fall Creators update
qa: Remove unused NodeConn members
Initialize recently introduced non-static class member lastCycles to zero in constructor
qa: Only allow disconnecting all NodeConns
contrib/init: Update openrc-run filename
Add note about Valgrind suppressions file in developer-notes.md
doc: Add getreceivedbyaddress release notes
doc: Add historical release notes for 0.15.1
During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after
GUI: Receive: Remove option to reuse a previous address
[wallet] Change feebumper from class to functions
[refactor] Make feebumper namespace
[trivial] Rename feebumper variables according to project code style
[wallet] getreceivedbyaddress should return error if address is not mine
[tests] Tidy up receivedby.py
[tests] Tidy up mininode.py module
[tests] Move test_framework Bitcoin primitives into separate module
tests: Add missing locks to tests
Explicitly state assumption that state.m_chain_sync.m_work_header != nullptr in ConsiderEviction
Qt: Enable searching by transaction id
Qt: Avoid invalidating the search filter, when it doesn't really change
Qt: Rename confusingly-named "address prefix" to "search string"
Do not make it trivial for inbound peers to generate log entries
Revert "Remove unused variable in shell script"
Minimal code changes to allow msvc compilation.
Require a steady clock for bench with at least micro precision
Update ban-state in case of dirty-state during periodic sweep
Use MakeUnique<Db>(...)
Use MakeUnique<T>(...) instead of std::unique_ptr<T>(new T(...))
Add MakeUnique (substitute for C++14 std::make_unique)
Use unique_ptr for pcoinscatcher/pcoinsdbview/pcoinsTip/pblocktree
Use unique_ptr for pdbCopy (Db) and fix potential memory leak
Use unique_ptr for dbenv (DbEnv)
Use unique_ptr for pfilter (CBloomFilter)
Use unique_ptr for sem{Addnode,Outbound} (CSemaphore)
Use unique_ptr for upnp_thread (boost::thread)
Use unique_ptr for dbw (CDBWrapper)
Use unique_ptr:s for {fee,short,long}Stats (TxConfirmStats)
Use unique_ptr for httpRPCTimerInterface (HTTPRPCTimerInterface)
Use unique_ptr for pwalletMain (CWallet)
[Tests] check specific validation error in miner tests
[tests] Explicitly disallow support for p2p versions below 60001
[tests] Remove support for p2p alert messages
[tests] Remove support for bre-BIP31 ping messages
[tests] Remove dead code from mininode.py
[tests] use TestNode p2p connection in tests
[tests] Add p2p connection to TestNode
[tests] fix TestNode.__getattr__() method
[net] De-duplicate connection eviction logic
bench: prefer a steady clock if the resolution is no worse
bench: switch to std::chrono for time measurements
Improve -disablewallet parameter interaction
Docs: Change formatting for sequence of steps
rpc: Make logging RPC public
Add missing cs_main locks when calling blockToJSON/blockheaderToJSON
Have SegWit active by default
Unit tests for always-active versionbits.
Always-active versionbits support
[consensus] Pin P2SH activation to block 173805 on mainnet
Improve handling of BIP9Deployment limits
Add mutex requirement for AddToCompactExtraTransactions(…)
Use -Wthread-safety-analysis if available (+ -Werror=thread-safety-analysis if --enable-werror)
[build] .gitignore: add background.tiff
[build] Don't fail when passed --disable-lcov and lcov isn't available
Add sjors gitian key
Move RPC registration out of AppInitParameterInteraction
rpc: further constrain the libevent workaround
[test] Verify node doesn't send headers that haven't been fully validated
Add unit test for stale tip checking
Add CConnmanTest to mutate g_connman in tests
Connect to an extra outbound peer if our tip is stale
rpc: work-around an upstream libevent bug
Track tip update time and last new block announcement from each peer
net: Allow connecting to extra outbound peers
[Wallet] always show help-line of wallet encryption calls
Make p2p-acceptablock not an extended test
[qa] test that invalid blocks on an invalid chain get a disconnect
Reject headers building on invalid chains by tracking invalidity
Accept unrequested blocks with work equal to our tip
Stop always storing blocks from whitelisted peers
Rewrite p2p-acceptblock in preparation for slight behavior changes
addrman: Add missing lock in Clear() (CAddrMan)
Do not send (potentially) invalid headers in response to getheaders
net: Add missing lock in ProcessHeadersMessage(...)
[Util] Update tinyformat.h
Disconnect outbound peers relaying invalid headers
moveonly: factor out headers processing into separate function
Add unit test for outbound peer eviction
Permit disconnection of outbound peers on bad/slow chains
Disconnecting from bad outbound peers in IBD
[trivial] (whitespace only) fix getblockchaininfo alignment
[rpc] Add initialblockdownload to getblockchaininfo
Make listsinceblock refuse unknown block hash
[tests] Add fuzz testing for BlockTransactions and BlockTransactionsRequest
[Docs] Update OpenBSD Build Instructions for OpenBSD 6.2
Sanity-check script sizes in bitcoin-tx
Improve wallet-accounts test
[Build] Add AM_OBJCXXFLAGS and QT_PIE_FLAGS to OBJCXXFLAGS to future-proof darwin targets
[verify-commits] Allow revoked keys to expire
Add comment explaining forced processing of compact blocks
qa: add test for minchainwork use in acceptblock
Don't process unrequested, low-work blocks
Add share/rpcuser to dist. source code archive
Avoid slow transaction search with txindex enabled
Avoid opening copied wallet databases simultaneously
Remove my testnet DNS seed as I currently don't have the capacity to keep it up to date.
Wrap dumpwallet warning and note scripts aren't dumped
[ui] Add toggle for unblinding password fields
Revert "travis: filter out pyenv"
travis: move back to the minimal image
Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512
Add quotes to variable assignment (as requested by @TheBlueMatt)
Use bash instead of POSIX sh. POSIX sh does not support arrays.
Add required space to [[ -n "$1" ]] (previously [[ -n"$1" ]])
Add error handling: exit if cd fails
Remove "\n" from echo argument. echo does not support escape sequences.
Remove unused variables
Updated instructions for Windows 10 Fall Creators Update.
Add Sent and Received information to the debug menu peer list
move human-readable byte formatting to guiutil
[tests] Don't subclass from object for Python 3
[tests] authproxy.py: tidy up __init__()
[tests] fix flake8 warnings in authproxy.py
[tests] use python3 for authproxy.py
Init: Remove redundant exit(EXIT_FAILURE) instances and replace with return false
Updated Windows build doc for WSL/Xenial workarounds.
Add wallet backup text to import*, add* and dumpwallet RPCs
Add missing comma from rescanblockchain
Remove redundant pwallet nullptr check
Add a dev notes document describing the new wallet RPC blocking
Give ZMQ consistent order with UpdatedBlockTip on scheduler thread
Also call other wallet notify callbacks in scheduler thread
Use callbacks to cache whether wallet transactions are in mempool
Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs
Add CWallet::BlockUntilSyncedToCurrentChain()
Add CallFunctionInQueue to wait on validation interface queue drain
Add ability to assert a lock is not held in DEBUG_LOCKORDER
Call TransactionRemovedFromMempool in the CScheduler thread
Add a CValidationInterface::TransactionRemovedFromMempool
[trivial] Make namespace explicit for is_regular_file
Switch DNSSeed-needed metric to any-automatic-nodes, not services
Clarify docs for requirements/handling of addnode/connect nodes
Rename fAddnode to a more-descriptive "manual_connection"
Replace relevant services logic with a function suite.
qa: Remove never used return value of sync_with_ping
qa: Make tmpdir option an absolute path
Avoid division by zero in the case of a corrupt estimates file
[QA] Add RPC based rescan test
[Wallet] add rescanblockchain <start_height> <stop_height> RPC command
Diagnose unsuitable outputs in lockunspent().
[rpc] mempoolinfo should take ::minRelayTxFee into account
[tests] Add uacomment tests
Check subtree consistency in Travis
Improve git-subtree-check.sh
Improve ZMQ functional test
[tests] Add -walletnotify functional test
[tests] Add -blocknotify functional test
[tests] Tidy up forknotify.py
[tests] move witness util functions to blocktools.py
[tests] [docs] update README for new test naming scheme
Ensure backupwallet fails when attempting to backup to source file
Use range-based for loops (C++11) when looping over map elements
fix typo in comment of chain.cpp
Remove accidental stray semicolon
[tests] Make comp test framework more debuggable
Use nullptr instead of NULL
Update importprivkey named args documentation
[depends] native_ds_store 1.1.2
[depends] native_mac_alias 2.0.6
scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error
[tests] do not allow assert_raises_message to be called with JSONRPCException
[tests] remove direct testing on JSONRPCException from individual test cases
CCrypter: move relevant implementation out of the header
CKeystore: move relevant implementation out of the header
Scope the ECDSA constant sizes to CPubKey / CKey classes
build: Make "make clean" remove all files created when running "make check"
Add test for multiwallet batch RPC calls
Add missing batch rpc calls to python coverage logs
Add missing multiwallet rpc calls to python coverage logs
[gui] reset addrProxy/addrSeparateProxyTor if colon char missing
Make AuthServiceProxy._batch method usable
Limit AuthServiceProxyWrapper.__getattr__ wrapping
[test] P2P functional test for certain fingerprinting protections
[net] Ignore getheaders requests for very old side blocks
[Docs] Update Windows build instructions for using WSL and Ubuntu 17.04
Avoid NULL pointer dereference when _walletModel is NULL (which is valid)
Use two boolean literals instead of re-using variable
Remove duplicate uriParts.size() > 0 check
Remove redundant check (!ecc is always true)
Remove redundant NULL checks after new
Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system
qa: check-rpc-mapping must not run on empty lists
qa: Restore bitcoin-util-test py2 compatibility
Remove unused fTry from push_lock
Verify DBWrapper iterators are taking snapshots
[rpc] getblockchaininfo: add size_on_disk, prune_target_size, automatic_pruning
add functional test for mempoolreplacement command line arg
Bump secp256k1 subtree
Squashed 'src/secp256k1/' changes from 84973d393..0b7024185
Bump univalue and fix json formatting in tests
Squashed 'src/univalue/' changes from 16a1f7f6e..fe805ea74
Add error string for CLEANSTACK script violation, preventing an "unknown error" if the CLEANSTACK error condition is set.
Correct typo in comments
[Qt] tolerate BIP173/bech32 addresses during input validation
[RPC] Wallet: test importing of native witness scripts
Use BIP173 addresses in segwit.py test
Support BIP173 in addwitnessaddress
Implement BIP173 addresses and tests
Add regtest testing to base58_tests
Convert base58_tests from type/payload to scriptPubKey comparison
Import Bech32 C++ reference code & tests
[docs] Remove partial gitian instructions from descriptors dir
script: Change SignatureHash input index check to an assert.
Add test for bitcoin-cli -getinfo
rpc: Handle `getinfo` locally in bitcoin-cli w/ `-getinfo`
Change getmininginfo errors field to warnings
Unify help text for GetWarnings output in get*info RPCs
Add warnings field to getblockchaininfo
Add state message print to AcceptBlock failure message.
[rpc] [tests] Add deprecated RPC test
[rpc] Deprecate estimatefee RPC
rpc: Prevent `dumpwallet` from overwriting files
net: Improve and document SOCKS code
doc: move gitian building to external repo
[docs] document scripted-diff
fix  link error
Remove lxcbr0 lines from gitian-build.sh
Implement {Encode,Decode}Destination without CBitcoinAddress
qt: Backup former GUI settings on `-resetguisettings`
Use static_cast instead of C-style casts for non-fundamental types
Remove some unused functions and methods
Rename out to m_tx_out in CScriptCheck
[script] Unit tests for IsMine
[script] Unit tests for script/standard functions
Replace save|restoreWindowGeometry with Qt functions
Remove extremely outdated share/certs dir
Add tests for CMerkleBlock usage with txids specified
Consolidate CMerkleBlock constructor into a single method
Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds
Near-Bugfix: Reestablish consensus check removed in 8d7849b
Introduce CheckInputsAndUpdateCoins static wrapper in txmempool.cpp
Optimization: Minimize the number of times it is checked that no money is created
[test] Add getblockchaininfo functional test
[test] Add restart_node to BitcoinTestFramework
doc: Add release notes for 0.15.0.1
[Tests] Add Qt GUI tests to Overview and ReceiveCoin Page
Tests for zmqpubrawtx and zmqpubrawblock
Remove nBlockMaxSize from miner opt struct as it is no longer used.
net: remove now-unused functions
net: remove now-superfluous numeric resolve
net: separate resolving and conecting
Small refactor of CCoinsViewCache::BatchWrite()
Refactor: Modernize disallowed copy constructors/assignment
[tests] Check connectivity before sending in assumevalid.py
Remove custom fee radio group
contrib: Ignore historical release notes for whitespace check
doc: add release-notes for 0.15.0 to master
Add tab char lint check and exclude imported dependencies
Add a lint check for trailing whitespace.
mininode: add an optimistic write and disable nagle
qa: Treat mininode p2p exceptions as fatal
Put back inadvertently removed copyright notices
[qt] Add use available balance in send coins dialog
Add listwallets RPC test to multiwallet.py
[qa] zapwallettxes: Wait up to 3s for mempool reload
travis: Revert default datadir check
Ignore transactions added to mempool during a reorg for fee estimation purposes.
Do not reject based on mempool min fee when bypass_limits is set.
Change AcceptToMemoryPool function signature
wallet: Display non-HD error on first run
doc: Update release notes for 0.16.0
doc: Bump manpages to 0.15.99
range-based loops and const qualifications in net.cpp
Force explicit double -> int conversion for CFeeRate constructor
Make float <-> int casts explicit outside of test, qt, CFeeRate
Remove countMaskInv caching in bench framework
Add release notes describing blockmaxweight deprecation
Use a sensible default for blockmaxweight
Deprecate confusing blockmaxsize, fix getmininginfo output
remove unused IsArgSet check
add m_added_nodes to connman options
More user-friendly error message when partially signing
Make sure ~/.bitcoin doesn't exist before build
Make fUseCrypto atomic
[depends] Don't build libevent sample code
Add -usehd to excluded args in check-doc.py
Update CONTRIBUTRING.md to reduce unnecesarry review workload
rpc: make estimatesmartfee argument naming consistent with documentation
rpc: update cli for estimatefee argument rename
Remove usehd option and warn when it is used
Bump wallet version number to 159900
[trivial] fixup comment for VerifyWallets()
[wallet] Add StartWallets() function to wallet/init.cpp
[wallet] Add RegisterWalletRPC() function to wallet/init.cpp
[wallet] Add CloseWallets() function to wallet/init.cpp
[wallet] Add StopWallets() function to wallet/init.cpp
[wallet] Add FlushWallets() function to wallet/init.cpp
[wallet] Rename WalletVerify() to VerifyWallets()
[wallet] Rename InitLoadWallet() to OpenWallets()
Ignore old format estimation file
Changing &vec[0] to vec.data(), what 9804 missed
test: Check RPC argument mapping
travis: filter out pyenv
net: stop both net/net_processing before destroying them
[macOS] remove Growl support, remove unused code
Typo in optionsdialog.ui Tooltip displayed ampersand incorrectly, &amp; should be in text.
Ensure that data types are consistent
Proper indentation for CheckTxInputs and other minor fixes
Consistent parameter names in txdb.h
Make fReindex atomic to avoid race
[test] Add bitcoin-cli -stdin and -stdinrpcpass functional tests
[test] Replace check_output with low level version
[test] Add assert_raises_process_error to assert process errors
[test] Add support for custom arguments to TestNodeCLI
[test] Improve assert_raises_jsonrpc docstring
net: drop unused connman param
net: use an interface class rather than signals for message processing
(finally) remove getinfo in favor of more module-specific infos
net: pass CConnman via pointer rather than reference
Remove duplicate destination decoding
Remove unused GetKeyID and IsScript methods from CBitcoinAddress
travis: Assert default datadir isn't created, Run scripted diff only once
Create dependencies.md, and link dependencies file from README & build docs
Switch memory_cleanse implementation to BoringSSL's to ensure memory clearing even with link-time optimization.
Move CBitcoinAddress to base58.cpp
Introduce wrappers around CBitcoinAddress
[qa] TestNode: Add wait_until_stopped helper method
Document assumptions that are being made to avoid NULL pointer dereferences
[docs] explain how to recompile only what bitcoind tests need
Add savemempool RPC
Add return value to DumpMempool
[Qt] Terminate string *pszExePath after readlink and without using memset
when clearing addrman clear mapInfo and mapAddr
Add test for decoderawtransaction bool
Add iswitness parameter to decode- and fundrawtransaction RPCs
Refactor tipUpdate as per style guide
qt: Use IsMine to validate custom change address
github-merge: Coalesce git fetches
[qa] Test nMinimumChainWork
Allow setting nMinimumChainWork on command line
Improve signmessages functional test
Add translation note to CONTRIBUTING.md
Remove redundant testutil files
[tests] fixup dbcrash interaction with add_nodes()
[mempool] Mark unaccepted txs present in mempool as 'already there'.
wallet: update stored witness in AddToWallet
Refactor: make the read function simpler
Update hmac_sha256.h
[tests] fixups from set_test_params()
[tests] Functional tests must explicitly set num_nodes
[tests] don't override __init__() in individual tests
[tests] Avoid passing around member variables in test_framework
[tests] TestNode: separate add_node from start_node
[tests] fix - use rpc_timeout as rpc timeout
Stop test_bitcoin-qt touching ~/.bitcoin
qa: rpc test for wtxid in mempool entry
RPC: add wtxid to mempool entry output
Add python3 to list of dependencies on some platforms
[Refactor] Combine scriptPubKey and amount as CTxOut in CScriptCheck
rpc: Push down safe mode checks
RPC: gettxout: Slightly improve doc and tests
Add getmininginfo functional test
Use for-loop instead of list comprehension
Use the variable name _ for unused return values
Remove unused variables and/or function calls
Avoid reference to undefined name: stderr does not exist, sys.stderr does
Use print(...) instead of undefined printf(...)
Use sys.exit(...) instead of exit(...): exit(...) should not be used in programs
build: Mention use of asm in summary
build: Rename --enable-experimental-asm to --enable-asm and enable by default
Document assumptions that are being made to avoid division by zero
Remove redundant explicitly defined copy ctors
Improve versionbits_computeblockversion test code consistency
Make tabs toolbar no longer have a context menu
Trivial: Documentation fixes for CVectorWriter ctors
Add meshcollider gitian key
Output a bit more information for fee calculation report.
Move local include to before system includes
Trivial: Improve #endif comments
Simplify bswap_16 implementation
[doc] Add RPC response notes
rpc: Write authcookie atomically
Add some tests for getchaintxstats
[tests] Make p2p-leaktests.py more robust
Acquire cs_main lock before cs_wallet during wallet initialization
Improve readability of DecodeBase58Check(...)
Add option -stdinrpcpass to allow RPC password to be read from standard input
[tests] fix timeout issues from TestNode
[doc] build-windows: Mention that only trusty works
Document the non-strict-DER-conformance of one test in tx_valid.json.
Add recommendation: By default, declare single-argument constructors `explicit`
Changing -txindex requires -reindex, not -reindex-chainstate
Drop upgrade-cancel callback registration for a generic "resumeable"
test: Increase initial RPC timeout to 60 seconds
gitian: quick hack to fix version string in releases
Build with --enable-werror under OS X
Docs: Hash in ZMQ hash is raw bytes, not hex
Comments: More comments on functions/globals in standard.h.
Document the preference of nullptr over NULL or (void*)0
Add length check for CExtKey deserialization
Pass serialization flags and whether to include hex to TxToUniv
doc: Update build-openbsd for 6.1
Assert that CWallet::SyncMetaData finds oldest transaction.
qa: Move wait_until to util
Remove dead store in ecdsa_signature_parse_der_lax.
Prefer compile-time checking over run-time checking
[wallet] Add logging to MarkReserveKeysAsUsed
[wallet] Remove keypool_topup_cleanups
contrib: Add Valgrind suppressions file
Declare single-argument (non-converting) constructors "explicit"
Use nullptr instead of zero (0) as the null pointer constant
doc: spelling fixes
Remove vchDefaultKey and have better first run detection
[tests] Add bitcoin_cli.py test script
[tests] add TestNodeCLI class for calling bitcoin-cli for a node
Clean up getbalance RPC parameter handling
disable jni in builds
[tests] Introduce TestNode
Update developer notes after params.size() cleanup
Avoid treating null RPC arguments different from missing arguments
Get rid of redundant RPC params.size() checks
wallet: Avoid second mapWallet lookup
tests: Remove OldSetKeyFromPassphrase/OldEncrypt/OldDecrypt
Skip sys::system(...) call in case of empty command
Check that -blocknotify command is non-empty before executing
Don't use pass by reference to const for cheaply-copied types (bool, char, etc.).
Remove redundant nullptr checks before deallocation
gitian: bump descriptors for master
build: bump version to 0.15.99
MOVEONLY: Init functions wallet/wallet.cpp -> wallet/init.cpp
MOVEONLY: Fee functions wallet/wallet.cpp -> wallet/fees.cpp
Move some static functions out of wallet.h/cpp
remove unused gArgs wrappers
scripted-diff: stop using the gArgs wrappers
doc: Update release notes from wiki
Add instructions for multi-processor gitian builds
[Trivial] Add a comment on the use of prevector in script.
test: Add resendwallettransactions functional tests
Improve shutdown process
[RPC] trivial: gettxout no longer shows version of tx
Only return hex field once in getrawtransaction
Avoid masking of difficulty adjustment errors by checkpoints
Bugfix: Use testnet RequireStandard for -acceptnonstdtxn default
[wallet] [tests] Add keypool topup functional test
[wallet] keypool mark-used and topup
Add option to attach a python debugger if test fails
qt: Periodic translations update
Remove unused variables in shell scripts.
Remove the virtual specifier for functions with the override specifier
[wallet] Close DB on error.
Make sure to clean up mapBlockSource if we've already seen the block
Capitalize bullet points in CONTRIBUTING guide
Enable disablesafemode by default.
[wallet] return correct error code from resendwallettransaction
[tests] Test disconnecting unsupported service bits logic.
Skip remainder of init if upgrade is cancelled
doc: Add comment to use ValueFromAmount/AmountFromValue for JSON, not utilmoneystr
rpc: Use ValueFromAmount instead of FormatMoney in TxToUniv
rpc: Move ValueFromAmount to core_write
doc: Correct AmountFromValue/ValueFromAmount names
scripted-diff: Use the C++11 keyword nullptr to denote the pointer literal instead of the macro NULL
Disconnect network service bits 6 and 8 until Aug 1, 2018
Travis: Test build against system libs (& Qt4)
Travis: Remove bc tool from dependencies
qt: Increase BLOCK_CHAIN_SIZE constants
[wallet] Add HasUnusedKeys() helper
build: always attempt to enable targeted sse42 cxxflags
[wallet] Cache keyid -> keypool id mappings
changed regtest RPCport to 18443 to avoid conflict with testnet 18332
Add undocumented -forcecompactdb to force LevelDB compactions
Update chain transaction statistics
depends: fix fontconfig with newer glibc
[wallet] Don't hold cs_LastBlockFile while calling setBestChain
[wallet] [moveonly] Move LoadKeyPool to cpp
[wallet] [moveonly] Move CAffectedKeysVisitor
Pass SendCoinsRecipient (208 bytes) by const reference
Avoid returning a BIP9Stats object with uninitialized values
Check for empty coinsview instead of just-reset coinsview in init
Always wait for threadGroup to exit in bitcoind shutdown
Squashed 'src/leveldb/' changes from 196962ff0..c521b3ac6
Update LevelDB with latest Bitcoin-specific patches
Restore default format state of cout after printing with std::fixed/setprecision
Use the noexcept specifier (C++11) instead of deprecated throw()
qt: Periodic translations update
p2p: Hardcoded seeds update pre-0.15 branch
Clarify help message for -discardfee
[wallet] Specify wallet name in wallet loading errors
Reject invalid wallet files
Reject duplicate wallet filenames
Force on-the-fly compaction during pertxout upgrade
Eliminate fee overpaying edge case when subtracting fee from recipients
Update defaultAssumeValid according to release-process.md.
Replace ismine with producesignature check in witnessifier
Order chainstate init more logically.
Call RewindBlockIndex even if we're about to run -reindex-chainstate
More user-friendly error message if UTXO DB runs ahead of block DB
Check if sys/random.h is required for getentropy on OSX.
Change wallet method disabled error text
Use compile-time constants instead of unnamed enumerations (remove "enum hack")
Revert "[tests] Allow tests to pass when stderr is non-empty"
Properly document target_confirmations in listsinceblock
test: Make sure wallet.backup is created in temp path
Add const to methods that do not modify the object for which it is called
developer-notes: add reference to snake_case and PascalCase
Replace traditional for with ranged for in primitives
add missing lock to crypter GetKeys()
keystore GetKeys(): return result instead of writing to reference
Add missing lock in CScheduler::AreThreadsServicingQueue()
remove some unused functions
Move CloseSocket out of SetSocketNonBlocking and pass SOCKET by const reference in SetSocket* functions
Qt: Use _putenv_s instead of setenv on Windows builds
[QA] Avoid running multiwallet.py twice
Testing: listsinceblock should display all transactions that were affected since the given block, including transactions that were removed due to a reorg.
listsinceblock: optionally find and list any transactions that were undone due to reorg when requesting a non-main chain block in a new 'removed' array.
qt: Periodic translations update
[wallet] [tests] Add listwallets to multiwallet test
[wallet] [rpc] Add listwallets RPC
[wallet] [rpc] print wallet name in getwalletinfo
[wallet] fix comment for CWallet::Verify()
[Qt] Use wallet 0 in rpc console if running with multiple wallets
Protect SSE4 code behind a compile-time flag
Add selftest for SHA256 transform
Add SSE4 based SHA256
Add SHA256 dispatcher
Support multi-block SHA256 transforms
Add vConnect to CConnman::Options
Rename -usewallet to -rpcwallet
getinfo deprecation warning
Move transaction combining from signrawtransaction to new RPC
Do not allow users to get keys from keypool without reserving them
Avoid redundant redeclaration of GetWarnings(const string&)
Remove unused variable int64_t nEnd
Prevent user from specifying conflicting parameters to fundrawtx
Add a discard_rate
random: only use getentropy on openbsd
Avoid using sizes on non-fixed-width types to derive protocol constants.
Ensure that ECDSA constant sizes are correctly-sized
Remove redundant `= 0` initialisations
Specify ECDSA constant sizes as constants
Update Debian copyright list
Add comments
Add attribute [[noreturn]] (C++11) to functions that will not return
No longer ever reuse keypool indexes
[QA] add basic multiwallet test
[tests] [wallet] Add wallet endpoint support to authproxy
Select wallet based on the given endpoint
Add wallet endpoint support to bitcoin-cli (-usewallet)
Enable devirtualization opportunities by using the final specifier (C++11)
optim: mark a few classes final
Tests: address placement should be deterministic by default
Convert named argument from nblocks to conf_target
Improve api to estimatesmartfee
Print one log message per keypool top-up, not one per key.
Increase wallet default keypool size to 1000.
Pushdown walletdb though CWallet::AddKeyPubKey to avoid flushes.
init: Factor out AppInitLockDataDirectory
check for null values in rpc args and handle appropriately
importmulti options are optional
fixup some rpc param counting for rpc help
Remove factor of 3 from definition of dust.
Register wallet endpoint
Remove unreachable code
Use range based for loop
Remove duplicate include
Pushdown walletdb object through GenerateNewKey/DeriveNewChildKey.
Use AC_ARG_VAR to set ARFLAGS.
[logs] fix zapwallettxes startup logs
Rename member field according to the style guide.
[wallet] fix zapwallettxes interaction with persistent mempool
[tests] fix flake8 warnings in zapwallettxes.py
Remove declaration of unused function: void UpdatedTransaction(const uint256 &)
Avoid static analyzer warnings regarding uninitialized arguments
Properly bound check conf_target in wallet RPC calls
Remove checking of mempool min fee from estimateSmartFee.
Make QT fee displays use GetMinimumFee instead of estimateSmartFee
Use CoinControl to pass custom fee setting from QT.
Refactor to use CoinControl in GetMinimumFee and FeeBumper
Make CoinControl a required argument to CreateTransaction
Clarify *(--.end()) iterator semantics in CWallet::TopUpKeyPool
Meet code style on lines changed in the previous commit
Track keypool entries as internal vs external in memory
Explicitly initialize prevector::_union to avoid new warning
Remove confusing MAX_BLOCK_BASE_SIZE.
Clarify entropy source
Avoid unnecessary work in SetNetworkActive
Use cpuid intrinsics instead of asm code
[utils] allow square brackets for ipv6 addresses in bitcoin-cli
Properly forbid -salvagewallet and -zapwallettxes for multi wallet.
build: verify that the assembler can handle crc32 functions
[Qt] migrate old fee slider value to new dropbown Always round up (conservative)
[Qt] replace fee slider with a Dropdown, extend conf. targets
Reorder C{,Mutable}Transaction for better packing
missing white space in function arg
[refactor] move SplitHostPort() into utilstrencodings
getbalance example covers at least 6 confirms
Adding assert to avoid a memory access violation inside of PartialMerkleTree::CalcHash()
Only reserve key for scriptChange once in CreateTransaction
Replace MAX_OPCODE for OP_NOP10.
Expose if CScheduler is being serviced, assert its not in EmptyQueue
Improve error reporting for estimaterawfee
Add function to report highest estimate target tracked per horizon
Change API to estimaterawfee
Add PR description to merge commit in github-merge.py
Add RPC options for RBF, confirmation target, and conservative fee estimation.
Simplify "!foo || (foo && bar)" as "!foo || bar"
[tests] Avoid redundant assignments. Remove unused variables.
Remove unnecessary branches in utilstrencodings string constructors.
Cleanup (safe, it was checked) subscript[0] in MurmurHash3 (and cleanup MurmurHash3 to be more clear).
nCheckDepth chain height fix
Do not shadow upper local variable `state`.
Avoid dereference-of-casted-pointer
Flush CValidationInterface callbacks prior to destruction
Support more than one CScheduler thread for serial clients
Add default arg to CScheduler to schedule() a callback now
Give CMainSignals a reference to the global scheduler
[tests] fix replace_by_fee.py
Change default fee estimation mode.
remove default argument from estimateSmartFee
Introduce a fee estimate mode.
remove default argument from GetMinimumFee
[qa] Rewrite BIP66 functional tests
qt: First translations update for 0.15
Properly comment about shutdown process in init.cpp file
Use "replaceable" instead of "rbfoptin" in bitcoin-tx.
Use "replaceable" instead of "optIntoRbf" in fundrawtransaction.
Use "replaceable" instead of "optintorbf" in createrawtransaction.
[rpc] fix verbose argument for getblock in bitcoin-cli
Use method name from __func__ macro
[test] don't run dbcrash.py on Travis
Make ValidationInterface signals-type-agnostic
Use TestingSetup to DRY qt rpcnestedtests
fix typo in help text for removeprunedfunds
[tests] nits in dbcrash.py
Avoid printing incorrect block indexing time due to uninitialized variable
Explicitly search for bdb5.3.
Simplify tx validation tests
Add a test that all flags are softforks
Make all script verification flags softforks
[qa] Rewrite BIP65 functional tests
document script-based return fields for validateaddress
REST/RPC example update
Report [CANCELLED] instead of [DONE] when shut down during txdb upgrade
Report txdb upgrade not more often then every 10%
Show txdb upgrade progress in debug log
Allow to cancel the txdb upgrade via splashscreen callback
Allow to shut down during txdb upgrade
[Qt] allow to execute a callback during splashscreen progress
[tests] fix nits.
[tests] Allow tests to pass when stderr is non-empty
[tests] reorganize utils.py module (code move only)
[tests] move mocktime property and functions to BitcoinTestFramework
[tests] Move stop_node and start_node methods to BitcoinTestFramework
[tests] fix flake8 warnings in test_framework.py and util.py
[tests] remove unused imports from utils.py
rpc: Update `generate` for developer notes
rpc: Move the `generate` RPC call to rpcwallet
[qa] Bugfix: allow overriding extra_args in ComparisonTestFramework
contrib: Update laanwj key
Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class
Comment clarifications in coins.cpp
Add CheckInputs() unit tests
Add belt-and-suspenders in DisconnectBlock
Clarify CCoinsViewMemPool documentation.
Make check to distinguish between orphan txs and old txs more efficient.
Remove no longer used mempool.exists(outpoint)
add gdb attach process to test README
[tests] rename getblocktemplate_proposals.py to mining.py
[tests] add test for submit block
[tests] run successful test in getblocktemplate first
[tests] don't build blocks manually in getblocktemplate test
[tests] clarify assertions in getblocktemplate test
[tests] Don't build the coinbase manually in getblocktemplate test
[tests] getblocktemplate_proposals.py: add logging
Move the AreInputsStandard documentation next to its implementation
[qt] Avoid potential null pointer dereference in TransactionView::exportClicked()
RPC Docs: addmultisigaddress is intended for non-watchonly addresses
[tests] add example test
[tests] Update functional tests documentation
Indentation after 'Remove redundant calls to gArgs.IsArgSet()'
Util: Remove redundant calls to gArgs.IsArgSet()
Simplify return values of GetCoin/HaveCoin(InCache)
[qa] Test non-atomic chainstate writes
Dont create pcoinsTip until after ReplayBlocks.
Random db flush crash simulator
Adapt memory usage estimation for flushing
Non-atomic flushing using the blockchain as replay journal
[MOVEONLY] Move LastCommonAncestor to chain
[RPC] Add an uptime command that displays the amount of time that bitcoind has been running
Initialize randomness in benchmarks
[qa] blockchain: Pass on closed connection during generate call
Handle TIMESTAMP_WINDOW within CWallet::RescanFromTime
Make CWallet::RescanFromTime comment less ambiguous
Slightly overhaul NSI pixmaps
chainparams: make supported service bits option explicit
net: use an internal address for fixed seeds
Verify binaries from bitcoincore.org and bitcoin.org
Better document CheckInputs parameter meanings
Update -maxsigcachesize doc clarify init logprints for it
Add CheckInputs wrapper CCoinsViewMemPool -> non-consensus-critical
clang-format: Delete ForEachMacros
scripted-diff: Remove #include <boost/foreach.hpp>
scripted-diff: Remove BOOST_REVERSE_FOREACH
Introduce src/reverse_iterator.hpp and include it...
Remove obsolete _MSC_VER check
[qa] util: Check return code after closing bitcoind proc
qa: Add stopatheight test
[depends] expat 2.2.1
fixed listunspent rpc convert parameter
doc: Remove outdated minrelaytxfee comment
Check for rpcuser/rpcpassword first then for cookie
doc: Add 0.14.2 release notes
random: fix crash on some 64bit platforms
Add a comment explaining the use of MAX_BLOCK_BASE_SIZE.
add Binds, WhiteBinds to CConnman::Options
add WhitelistedRange to CConnman::Options
Make clang-format use C++11 features (e.g. A<A<int>> instead of A<A<int> >)
Supress struct/class mismatch warnings introduced in #10284.
net: switch to dummy internal ip for dns seed source
net: do not allow resolving to an internal address
net: add an internal subnet for representing unresolved hostnames
[trivial] fix indentation for ArgsManager class
Don't create change at the dust limit, even if it means paying more than expected
[RPCs] Remove submitblock parameters argument help text
Pass in smart fee slider value to coin control dialog
Use rdrand as entropy source on supported platforms
Turn TryCreateDirectory() into TryCreateDirectories()
Output Fee Estimation Calculations in CreateTransaction
Filter subtrees and and benchmarks from coverage report
Add an explanation of quickly hashing onto a non-power of two range.
Add missing include for atomic in db.h
Remove unnecessary forward class declarations in header files
[tests] timeout integration tests on travis after 20 minutes
[tests] destroy zmq context in zmq_tests.py
[tests] in zmq test, timeout if message not received
Remove unreachable or otherwise redundant code
Header include guideline
Simplify "bool x = y ? true : false" to "bool x = y"
Add extra LevelDB source to Makefile
leveldb: enable runtime-detected crc32 instructions
Squashed 'src/leveldb/' changes from a31c8aa40..196962ff0
Update to LevelDB 1.20
Clarify prevector::erase and avoid swap-to-clear
Replace lcov -r commands with faster way
Be much more agressive in AccessCoin docs.
Restore some assert semantics in sigop cost calculations
Return a bool in SpendCoin to restore pre-per-utxo assert semantics
Remove duplicate includes
Comment out unused constant REJECT_DUST
Use the "domain name setup" image (previously unused) in the gitian docs
Remove unused Boost includes
Return early in IsBanned.
Add test for rpcuser/rpcpassword
Remove unused constant MEMPOOL_GD_VERSION
Change semantics of HaveCoinInCache to match HaveCoin
[tests] tidy up zmq_test.py
Replace cookie auth in tests
Tests for wallet encryption stuff
Use override keyword on CCoinsView overrides
[tests] update zmq test to use correct config.ini file
Avoid printing generic and duplicated "checking for QT" during ./configure
[tests] Remove accidental trailing semicolon
[tests] Remove unused function InsecureRandBytes(size_t len)
gettxoutproof() should return consistent result
Have `make cov` optionally include branch coverage statistics
Sanity check transaction scripts in DecodeHexTx
Add a valid opcode sanity check to CScript
scripted-diff: Use new naming style for insecure_rand* functions
[tests] Remove printf(...)
[tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution}
scripted-diff: Use randbits/bool instead of randrange where possible
Use randbits instead of ad-hoc emulation in prevector tests
Replace rand() & ((1 << N) - 1) with randbits(N)
Replace more rand() % NUM by randranges
Don't return stale data from CCoinsViewCache::Cursor()
Do not print soft-fork-script warning with -promiscuousmempool
Cache full script execution results in addition to signatures
Pull script verify flags calculation out of ConnectBlock
Use std::unordered_{map,set} (C++11) instead of boost::unordered_{map,set}
wallet: Update formatting
wallet: Forbid -salvagewallet, -zapwallettxes, and -upgradewallet with multiple wallets
wallet: Base backup filenames on original wallet filename
wallet: Include actual backup filename in recovery warning message
Wallet: Move multiwallet sanity checks to CWallet::Verify, and do other checks on all wallets
Wallet: Support loading multiple wallets if -wallet used more than once
Wallet: Replace pwalletMain with a vector of wallet pointers
Use list initialization (C++11) for maps/vectors instead of boost::assign::map_list_of/list_of
Remove references to priority that snuck back in in 870824e9.
Make functions in validation.cpp static and pass chainparams
contrib/verifybinaries: allow filtering by platform
Remove useless mapNextTx lookup in CTxMemPool::TrimToSize.
RPC/rawtransaction: createrawtransaction: Check opt_into_rbf when provided with either value
bitcoin-tx: rbfoptin: Avoid touching nSequence if the value is already opting in
Introduce MAX_BIP125_RBF_SEQUENCE constant
[bitcoin-tx] add rbfoptin command
[Tests] extend the replace-by-fee test to cover RPC rawtx features
RPC/Wallet: Add RBF support for fundrawtransaction
Wallet: Refactor FundTransaction to accept parameters via CCoinControl
RPC: rawtransaction: Add RBF support for createrawtransaction
CWalletDB: Store the update counter per wallet
Bugfix: ForceSetArg should replace entr(ies) in mapMultiArgs, not append
wallet: Move nAccountingEntryNumber from static/global to CWallet
Bugfix: wallet: Increment "update counter" when modifying account stuff
Bugfix: wallet: Increment "update counter" only after actually making the applicable db changes to avoid potential races
Add timeout for headers sync
scripted-diff: use insecure_rand256/randrange more
Add various insecure_rand wrappers for tests
scripted-diff: Rename cuckoo tests' local rand context
Add FastRandomContext::rand256() and ::randbytes()
Replace bytes_serialized with bogosize
scripted-diff: Remove PAIRTYPE
scripted-diff: Remove Q_FOREACH
scripted-diff: Fully remove BOOST_FOREACH
Small preparations for Q_FOREACH, PAIRTYPE and #include <boost/foreach.hpp> removal
Run Qt wallet tests on travis
Add RescanFromTime method and use from rpcdump
Move birthday optimization out of ScanForWalletTransactions
test: Add test for `getpeerinfo` `bindaddr` field
rpc: Add listen address to incoming connections in `getpeerinfo`
Improve bitcoind systemd service file
Limit variable scope
Perform member initialization in initialization lists where possible
Remove unused variables
[test] Add test for getchaintxstats
Bugfixes: missing == 0 after randrange
Remove xvfb configuration from travis
Use REJECT_DUPLICATE for already known and conflicted txn
Deduplicate addrdb.cpp and use CHashWriter/Verifier
scripted-diff: various renames for per-utxo consistency
Increase travis unit test timeout
Rename CCoinsCacheEntry::coins to coin
[MOVEONLY] Move old CCoins class to txdb.cpp
Upgrade from per-tx database to per-txout
Reduce reserved memory space for flushing
Pack Coin more tightly
Remove unused CCoins methods
Extend coins_tests
Switch CCoinsView and chainstate db from per-txid to per-txout
Refactor GetUTXOStats in preparation for per-COutPoint iteration
Replace CCoins-based CTxMemPool::pruneSpent with isSpent
Remove ModifyCoins/ModifyNewCoins
Switch tests from ModifyCoins to AddCoin/SpendCoin
Switch CScriptCheck to use Coin instead of CCoins
Only pass things committed to by tx's witness hash to CScriptCheck
Switch from per-tx to per-txout CCoinsViewCache methods in some places
Introduce new per-txout CCoinsViewCache functions
Optimization: Coin&& to ApplyTxInUndo
Replace CTxInUndo with Coin
Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings
net: Denote some CNode functions const
fixup: fix nits
contrib: Update location of seeds.txt
[bench] Replace 0.00(000)1 with MICRO/MILLI #defines in validation.cpp.
[bench] Include ms/blk stats in Connect* benchmarks.
[tests] Update start/stop node functions to be private module functions
[tests] Functional tests call self.start_node(s) and self.stop_node(s)
[trivial] Add end of namespace comments
build: silence gcc7's implicit fallthrough warning
devtools: Retry after signing fails in github-merge
Fail on commit with VERIFY SCRIPT but no scripted-diff
scripted-diff: s/BIP9DeploymentInfo/VBDeploymentInfo/
Rename -bip9params to -vbparams
add SeedNodes to CConnman::Options
getmempool mempoolminfee is a BTC/KB feerate
net: only enforce the services required to connect
Introduce static DoWarning (simplify UpdateTip)
Update style guide
Introduce Coin, a single unspent output
Store/allow tx metadata in all undo records
Report on-disk size in gettxoutsetinfo
Remove/ignore tx version in utxo and undo
Add specialization of SipHash for 256 + 32 bit data
Introduce CHashVerifier to hash read data
error() in disconnect for disk corruption, not inconsistency
Add SizeEstimate to CDBBatch
Broadcast address every day, not 9 hours
Simplify feebumper minimum fee code slightly
Add test for empty chain and reorg consistency for gettxoutsetinfo.
contrib/init/bitcoind.openrcconf: Don't disable wallet by default
[Qt] make sure transaction table entry gets updated after bump
[Qt] hide bump context menu action if tx already has been bumped
Make bitcoind invalid argument error message specific
RPC/Mining: Restore API compatibility for prioritisetransaction
Add Qt tests for wallet spends & bumpfee
Add perf counter data to GetStrongRandBytes state in scheduler
Add internal method to add new random data to our internal RNG state
[tests] skipped tests should clean up after themselves
[tests] Add libFuzzer support.
[Trivial] Add BITCOIN_FS_H endif footer in fs.h
Prevent shadowing the global dustRelayFee.
Use range-based for loops (C++11) when looping over vector elements
[test] Speed up fuzzing by ~200x when using afl-fuzz
tests: fix spurious addrman test failure
[tests] improve tmpdir structure
Populate services in GetLocalAddress
Globals: Pass Consensus::Params through CBlockTreeDB::LoadBlockIndexGuts()
[qt] Remove excess logic
Make more json-like output from estimaterawfee
Expand signrawtransaction.py to cover error witness checking
Add witness data output to TxInError messages
[depends] miniupnpc 2.0.20170509
Add missing LOCK2 in CWallet::GetAvailableBalance
[test] Move some tests from qt -> wallet
[qt] Move some WalletModel functions into CWallet
[test] Add tests for some walletmodel functions
Add query options to listunspent rpc call
torcontrol: Handle escapes in Tor QuotedStrings
torcontrol: Log invalid parameters in Tor reply strings where meaningful
torcontrol: Check for reading errors in ReadBinaryFile
torcontrol: Add unit tests for Tor reply parsers
torcontrol: Improve comments
tests: Correct testcase in script_tests.json for large number OP_EQUAL
Add logging to FinalizeNode()
qa: Warn when specified test is not found
Replace boost::function with std::function (C++11)
Use a verbosity instead of two verbose parameters
remove minimum total fee option
Output line to debug.log when IsInitialBlockDownload latches to false
Make sure we re-check the conditions of a feebump during commit
Only update the transactionrecord if the fee bump has been commited
Make sure we use nTxConfirmTarget during Qt fee bumps
Make sure we always update the table row after a bumpfee call
Show old-fee, increase a new-fee in Qt fee bumper confirmation dialog
Add cs_wallet lock assertion to SignTransaction()
[Qt] simple fee bumper with user verification
[logging] log system time and mock time
Shadowing is not enabled by default, update doc accordingly.
Comments and improved documentation
minor cleanup: remove unnecessary variable
Introduce a scale factor
Historical block span
Clean up fee estimate debug printing
Track first recorded height
Rewrite estimateSmartFee
Track failures in fee estimation.
Expose estimaterawfee
minor refactor: explicitly track start of new bucket range and don't update curNearBucket on final loop.
Make EstimateMedianVal smarter about small failures.
Refactor to update moving average on fly
Change parameters for fee estimation and estimates on all 3 time horizons.
[doc] Removing comments about dirty entries on txmempool
[test] Add test for getmemoryinfo
[tests] fix disconnect_ban intermittency
[tests] Clean up addrman_tests.cpp
Util: Small improvements in gArgs usage
Util: Put mapMultiArgs inside ArgsManager
scripted-diff: Util: Encapsulate mapMultiArgs behind gArgs
Util: Create ArgsManager class...
[tests] increase timeouts in sendheaders test
[tests] Make wait_until timeout 60 seconds by default
[wallet] Remove CTransaction&() helper conversion operator from wallet implementation.
Add OSX keystroke to clear RPCConsole
qa: disablewallet: Check that wallet is really disabled
Delay parallel block download until chain has sufficient work
[tests] use wait_until in mempool_persist.py
test: Add elapsed time to RPC tracing
removed unused code in INV message
[qa] Test prioritise_transaction / getblocktemplate interaction
Bugfix: PrioritiseTransaction updates the mempool tx counter
[doc] Add hint about getmempoolentry to getrawmempool help.
Reorganize BitcoinTestFramework class
Use sanity check timestamps as entropy
Test that GetPerformanceCounter() increments
Use hardware timestamps in RNG seeding
Squashed 'src/secp256k1/' changes from 8225239..84973d3
Update to latest libsecp256k1
Re-enable upnp support in contrib/debian
Build with QT5 on Debian-based systems using contrib/debian
rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str
Bump minimum boost version in contrib/debian
Add RecursiveDynamicUsage overload for std::shared_ptr
Store disconnected block transactions outside mempool during reorg
[qa] Relax assumptions on mempool behavior during reorg
Maintain state across GetStrongRandBytes calls
net: make CNode's id private
scripted-diff: net: Use accessor rather than node's id directly
devtools: add script to verify scriptable changes
[wallet] Securely erase potentially sensitive keys/values
Use shared config file for functional and util tests
Use an .ini config file for environment vars in bitcoin-util-test.py
Change help_text in bitcoin-util-test.py to a docstring.
Change bitcoin-util-test.py to use Python3
Chainparams: Use the factory for pow tests
Chainparams: Get rid of CChainParams& Params(std::string)
Chainparams: Use a regular factory for creating chainparams
Consensus: Policy: MOVEONLY: Move CFeeRate out of the consensus module
Consensus: Minimal way to move dust out of consensus
Update contrib/debian to latest Ubuntu PPA upload.
[tests] remove import-abort-rescan.py
[tests] fix wait_for_inv()
[depends] dbus 1.10.18
[depends] ccache 3.3.4
[depends] libevent 2.1.8-stable
[depends] Boost 1.64.0
[depends] Latest config.guess and config.sub
Add getchaintxstats RPC
Remove unused argument from MarkBlockAsInFlight(...)
Remove unused Python imports
Add start and stop node methods to BitcoinTestFramework
move initialize_chain() and initialize_chain_clean() to be methods of BitcoinTestFramework
[tests] Update Unit Test for addrman.h/addrman.cpp
Add constant for maximum stack size
[tests] Remove is_network_split from funtional test cases
Remove unused forward declaration for non-existent ScriptPubKeyToJSON(...)
Remove unused args from GetFetchhFlags()
doc: Add RPC interface guidelines
Trivial: remove extra character from comment
[tests] allow zmq test to be run in out-of-tree builds
[test] Add test for listaddressgroupings
[Wallet] unset change position when there is no change on exact match
[Makefile] Alphabetically Reorder addrdb.cpp
Simplify DisconnectBlock arguments/return value
[test] Add gettxout call
[test] Add tests for getconnectioncount, getnettotals and ping
[tests] update disconnect_ban.py test case to work with listbanned
[net] listbanned RPC and QT should show correct banned subnets
refactor TxToJSON() and ScriptPubKeyToJSON()
Improved efficiency in COutPoint constructors
Add -stopatheight for benchmarking
cleanup: reduce to one GetMinimumFee call signature
Remove unused C++ code not covered by unit tests
[test] Unit test amount.h/amount.cpp
[wallet] Remove unneeded legacy getbalance code
[wallet] Add GetLegacyBalance method to simplify getbalance RPC
[test] Add Unit Test for GetListenPort
Use `with` in `macdeployqtplus` script.
Remove unused variable from `macdeployqtplus` script.
[wallet] Make sure pindex is non-null before possibly referencing in LogPrintf call.
Prevent warning: variable 'x' is uninitialized
Remove Clang workaround for Boost 1.46
Trivial: fix fee estimate write error log message
[doc] Minor corrections to osx dependencies
doc: Add historical release notes for 0.14.1
Tests: Add test for getnetworkhashps
contrib: github-merge improvements
wallet: Add comment describing the various classes in walletdb.h
Switch CCoinsMap from boost to std unordered_map
Add support for std::unordered_{map,set} to memusage.h
[test] Test abortrescan command.
Minor fix in build documentation for FreeBSD 11
Change file format for fee estimates.
[qt] Don't call method on null WalletModel object
Tests: Add simple test for getaddednodeinfo
Tests: Refactor to create witness script creation function
wallet: Make IsDummy private in CWalletDBWrapper
wallet: CWalletDB CDB composition not inheritance
Move zmq test skipping logic into individual test case.
wallet: Reduce references to global bitdb environment
wallet: Get rid of fFileBacked
wallet: Introduce database handle wrapper
Make Boost use std::atomic internally
fix tsan: utiltime race on nMockTime
fix ubsan: bitcoin-tx: not initialize context before IsFullyValid
Add missing <atomic> header in clientmodel.h
Set both time/height header caches at the same time
Declare headers height/time cache mutable, re-set the methods const
Tests: Add test for getdifficulty
Update the remaining blocks left in modaloverlay at init.
Reduce cs_main locks during modal overlay by adding an atomic cache
[tests] disconnect_ban: add tests for disconnect-by-nodeid
[tests] disconnect_ban: remove dependency on urllib
[tests] disconnect_ban: use wait_until instead of sleep
[tests] disconnect_ban: add logging
[tests] disconnectban test - only use two nodes
[tests] rename nodehandling to disconnectban
[tests] fix nodehandling.py flake8 warnings
Allow disconnectnode() to be called with node id
build: fix bitcoin-config.h regeneration after touching build files
build: remove wonky auto top-level convenience targets
Remove duplicate method definitions in NodeConnCB subclasses
Adds helper functions to NodeConnCB
wallet: Use boost to more portably ensure -wallet specifies only a filename
[rpc] Add abortrescan command to RPC interface.
Tests: Put Extended tests first when they're included
[tests] test_runner - check unicode
[wallet] Add support for aborting wallet transaction rescans.
[tests] Remove cache directory by default when running test_runner
[test] add warnings to test_runner
[qt] Stop treating coinbase outputs differently: show them at 1conf
[doc] Add blob about finding reviewers.
Check interruptNet during dnsseed lookups
[doc] Wording fixes in CONTRIBUTING.md.
Changed event RAII helper functions to inline to deal with duplicate symbol linker errors.
Clarify importprivkey help text with example of blank label without rescan Occasionally I waste a lot of time not remembering that the second parameter to importprivkey must be blank if you intend to stop rescan with "false" as the third parameter.
[rpc] rename disconnectnode argument
Avoid reading the old hd master key during wallet encryption
[tests] Remove maxblocksinflight testcase
pass Consensus::Params& to ReceivedBlockTransactions()
Remove CValidationInterface::UpdatedTransaction
Add dumpwallet output test
Add friendly output to dumpwallet refs #9564
[Wallet] Prevent CInputCoin to be in a null state
[Wallet] Simplify code using CInputCoin
[Wallet] Decouple CInputCoin from CWalletTx
Missing includes
Trivial: Remove unneeded includes from .h:
Deduplicate SignatureCacheHasher
net: define NodeId as an int64_t
Make CWallet::SyncTransactions() interface friendlier
AddToWalletIfInvolvingMe should test pIndex, not posInBlock
allow libevent logging to be updated during runtime
[rpc] Add logging RPC
Set BCLog::LIBEVENT correctly for old libevent versions.
Make DisconnectBlock and ConnectBlock static in validation.cpp
MOVEONLY: move TxConfirmStats to cpp
Initialize TxConfirmStats in constructor
Read and Write fee estimate file directly from CBlockPolicyEstimator
Call estimate(Smart)Fee directly from CBlockPolicyEstimator
Give CBlockPolicyEstimator it's own lock
Make processBlockTx private.
Make feeEstimator its own global instance of CBlockPolicyEstimator
Changed "Send" button default status from true to false
RPC: Allow multiple names for parameters
Remove excess logic.
[Wallet] Rename std::pair<const CWalletTx*, unsigned int> to CInputCoin
Reduce spammy test logging
Ignore Doxyfile generated from Doxyfile.in template.
fixup - align summary row correctly and make colors/glyphs globals
Take a CTransactionRef in AddToWalletIfInvolvingMe to avoid a copy
Use std::shared_ptr instead of boost::shared_ptr in ScriptForMining
Remove dead-code tracking of requests for blocks we generated
Add override to functions using CValidationInterface methods
Hold cs_wallet for whole block [dis]connection processing
SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected
Handle SyncTransaction in ActivateBestChain instead of ConnectTrace
Keep conflictedTxs in ConnectTrace per-block
Handle conflicted transactions directly in ConnectTrace
Make ConnectTrace::blocksConnected private, hide behind accessors
Add pblock to connectTrace at the end of ConnectTip, not start
Include missing #include in zmqnotificationinterface.h
Wallet: reduce excess logic InMemPool()
MOVEONLY: tx functions to consensus/tx_verify.o
[tests] Add unicode symbols for tests passing/failing/skipping
Log calls to getblocktemplate
doc: Update release process for simplified version bumping
build: Remove duplicate version information from src/clientversion.h
[tests] color test results and sort alphabetically
[net] Added SetSocketNoDelay() utility function
doc: Make build system insert version in Doxyfile
doc: Remove version numbers from READMEs
init: Remove redundant logging code
Remove accidental trailing semicolons
Remove unused import
initialize flag variable to 0 (and continue if GetLogCategory() fails)
[trivial] remove unused line in Travis config
Bugfix: ancestor modifed fees were incorrect for descendants
Test prioritisetransaction and ancestor fee state
Run bitcoin_test-qt under minimal QPA platform
Add -debugexclude option to switch off logging for specified components
Remove `namespace fs=fs`
torcontrol: Use fs::path instead of std::string for private key path
Use fsbridge for fopen and freopen
Replace uses of boost::filesystem with fs
Replace includes of boost/filesystem.h with fs.h
Add fs.cpp/h
Add braces to submitblock per current style.
Check transaction count early in submitblock.
Make GetWitnessCommitmentIndex callable on blocks without a coinbase txn.
[rpc] Remove auth cookie on shutdown
Correct indentation and remove unnecessary braces
Improve CFeeBumper interface, add comments, make use of std::move
Cancel feebump is vErrors is not empty
Use static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back
Restore CalculateMaximumSignedTxSize function signature
Use "return false" instead assert() in CWallet::SignTransaction
Directly abort execution in FeeBumper::commit if wallet or tx is not available
Restore invalid fee check (must be > 0)
Refactor Bumpfee core functionality
Bumpfee move request parameter interaction to the top
Change LogAcceptCategory to use uint32_t rather than sets of strings.
build: Disable Wshadow warning
Make threshold for flushing more conservative.
Send the correct error code in reject messages
Lower default memory footprint slightly
Make pcoinsTip memory calculations consistent
scheduler: fix sub-second precision with boost < 1.50
Add tests for bitcoin-tx input checking
Check stderr when testing bitcoin-tx
Decrease testcase sizes in cuckoocache tests
Compensate for memory peak at flush time
[tests] sync_with_ping should assert that ping hasn't timed out
Add send_await_disconnect() method to p2p-compactblocks.py
util: Work around (virtual) memory exhaustion on 32-bit w/ glibc
Update bitcoin.conf with example for pruning
Datadir option in linearize scripts
Add a FastRandomContext::randrange and use it
Switch FastRandomContext to ChaCha20
Update benchmarking with package statistics
Add benchmarking for CreateNewBlock
Mining: return early when block is almost full
refactor: Make rest.cpp dependency on `*toJSON` in `blockchain.cpp` explicit
Add ChaCha20
FastRandom benchmark
Introduce FastRandomContext::randbool()
No need to use OpenSSL malloc/free
Make forknotify.py more robust
Wait for connection to open in bip9-softforks.py
Remove SingleNodeConnCB
ApproximateBestSubset should take inputs by reference, not value
Remove call to gettransaction(...) where the result is unused
Remove accidental trailing semicolons in Python code
Make all Travis test runs quiet, non just cron job runs
Print out the final 1000 lines of test_framework.log if test fails
Make qt wallet test compatible with qt4
Update travis config to run rpc-tests.py in quiet mode
Add --quiet option to suppress rpc-tests.py output
Check that all test scripts in test/functional are being run
refactor: Move RPCNotifyBlockChange out of `rpc/server.h`
refactor: Move GetDifficulty out of `rpc/server.h`
[qa] combine_logs: Use ordered list for logfiles
[Qt] Don't add arguments of sensitive command to console window
Do not break backward compatibility during wallet encryption
Move several relay options into the Relay help group
move rpcserialversion into RPC option group
remove 'noconnect' option from documentation
rpc: Rename first named arg of createrawtransaction
[QA] Renaming rawTx into rawtx
[qa] Add setnetworkactive smoke test
Ensure an item exists on the rpcconsole stack before adding
fix build if spaces in src dir path
RPC: getblockchaininfo: BIP9 stats
Actually run assumevalid.py.
Deduplicated sigaction() boilerplate
Add assertion for CanSupportFeature(FEATURE_HD_SPLIT)
Define CWallet::DeriveNewChildKey() as private
Optimize GetOldestKeyPoolTime(), return as soon as we have both oldest keys
Make sure we set the wallets min version to FEATURE_HD_SPLIT at the very first point
Slightly modify fundrawtransaction.py test (change getnewaddress() into getrawchangeaddress())
Remove FEATURE_HD_SPLIT bump TODO
Overhaul the internal/external key derive switch
CKeyPool avoid "catch (...)" in SerializationOp
Only show keypoolsize_hd_internal if HD split is enabled
GetOldestKeyPoolTime: if HD & HD Chain Split is enabled, response max(oldest-internal-key, oldest-external-key)
Don't switch to HD-chain-split during wallet encryption of non HD-chain-split wallets
Switch to 100% for the HD internal keypool size
Make sure we always generate one keypool key at minimum
Make sure we hand out keypool keys if HD_SPLIT is not enabled
Make sure ReserveKeyFromKeyPool only hands out internal keys if HD_SPLIT is supported
Removed redundant IsLocked() check in NewKeyPool()
Immediately return setKeyPool's size if HD or HD_SPLIT is disabled or not supported
[Wallet] split the keypool in an internal and external part
Skip rpcbind_test if OS/network requirements are not met.
[trivial] Dead code removal
Add a button to open the config file in a text editor
add missing spaces so that markdown recognizes headline
[zmq] Call va_end() on va_start()ed args.
Switched httpserver.cpp to use RAII wrapped libevents.
[tests] Remove unused variables
[tests] Remove unused and duplicate imports
Add tests for mempool persistence
Control mempool persistence using a command line parameter.
Run extended tests once daily
Allow test cases to be skipped
Python functional tests should log in UTC
Introduce combine_logs.py to combine log files from multiple bitcoinds.
[qa] Expand bumpfee test docstring
[qa] Rename python input variable to tx_input
[qa] Make bumpfee.py test function order consistent
[qa] Get rid of nondeterminism in bumpfee.py
[qa] Remove bumpfee.py get_change_address hack
Avoid QTimer::singleShot compile error with Qt 5.3.2
Avoid scoped_connection compile error with boost 1.55.0
Move src/test/bitcoin-util-test.py to test/util/bitcoin-util-test.py
Rename --enable-extended-rpc-tests to --enable-extended-functional-tests
Rename test/pull-tester/rpc-tests.py to test/functional/test_runner.py
Rename rpc-tests directory to functional
Rename qa directory to test
Add mallocinfo mode to `getmemoryinfo` RPC
Set to nullptr after delete
Rename first iterator to prevent shadowing.
Make some global variables less-global (static)
Prevent -Wshadow warnings with gcc versions 4.8.5, 5.3.1 and 6.2.1.
fix logging in nulldummy and proxy_test
Use log.info() instead of print() in importmulti.py
Remove unused code
util: rename variable to avoid shadowing
[LevelDB] Plug leveldb logs to bitcoin logs
specify blockchain size & default behaviour (over pruning)
Enable xvfb in travis to allow running test_bitcoin-qt
Add new test_bitcoin-qt static library dependencies
Add simple qt wallet test sending a transaction
Add braces to if statements in Qt test_main
fix gitian doc example typo
Initialize nRelockTime
Test transaction selection when gbt called without segwit support
Don't require segwit in getblocktemplate for segwit signalling or mining
devtools: Make github-merge compute SHA512 from git, instead of worktree
util: Throw tinyformat::format_error on formatting error
util: Properly handle errors during log message formatting
QA: getblocktemplate_longpoll.py should always use >0 fee tx
Improve readability of segwit.py
depends: fix zlib build on osx
Make qt test compatible with TestChain100Setup framework
Make test_bitcoin.cpp compatible with Qt Test framework
Add safe flag to listunspent result
Add COutput::fSafe member for safe handling of unconfirmed outputs
Update trusted-sha512-root-commit for new bad tree hash
If GNU sha512sum is missing, try perl shasum in verify-commits
Make verify-commits.sh non-recursive
Use logging in individual tests
Use logging in test_framework/comptool.py
Use logging in test_framework/blockstore.py
Use logging in test_framework/util.py
Remove manual debug settings in qa tests.
Always enable debug log and microsecond logging for test nodes.
Use logging in mininode.py
Add logging to p2p-segwit.py
Add logging to test_framework.py
[util] Remove redundant call to get() on smart pointer (thread_specific_ptr)
Remove unreachable code (g_rpcSignals.PostCommand)
Trivial: Add const modifier to GetHDChain and IsHDEnabled
Add missing braces in semaphore posts in net
Update release notes to include RPC error code changes.
Add commenting around JSON error codes
Refactor: Remove using namespace <xxx> from util*
Refactor: Remove using namespace <xxx> from wallet/
Refactor: Remove using namespace <xxx> from script/
Refactor: Remove using namespace <xxx> from rpc/
[bench] Avoid function call arguments which are pointers to uninitialized values
Add historical release notes for 0.14.0
Improve logging in bctest.py if there is a formatting mismatch
Return correct error codes in fundrawtransaction().
Return correct error codes in setban().
Return correct error codes in removeprunedfunds().
Return correct error codes in blockchain.cpp.
Return correct error codes in bumpfee().
Rename FlushWalletDB -> CompactWalletDB, add function description
Use CScheduler for wallet flushing, remove ThreadFlushWalletDB
CScheduler boost->std::function, use millisecs for times, not secs
Check gpg version before setting --weak-digest
tests: Delete unused function _rpchost_to_args
Disallow copy of CReserveKeys
[Wallet] refactor CWallet/CWalletDB/CDB
[qa] assert_start_raises_init_error
compat: use `unsigned int` instead of `u_int`
build: cleanup: define MSG_DONTWAIT/MSG_NO_SIGNAL locally
build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL
Allow any subkey in verify-commits
Add comment re: why SHA1 is disabled
Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1
Update example bitcoin.conf
Allow setting minrelaytxfee to 0
[cleanup] Remove coin age priority completely.
[rpc] Remove priorityDelta from prioritisetransaction
[rpc] Remove priority information from mempool RPC calls
[test] Remove priority from tests
No longer allow "free" transactions
Define 7200 second timestamp window constant
Optimize GetWitnessHash() for non-segwit transactions
Save watch only key timestamps when reimporting keys
Clean up braces in CWallet::ComputeTimeSmart
Add documentation describing CWallet::nTimeSmart.
Factor out CWallet::nTimeSmart computation into a method.
Add tests for CWalletTx::nTimeSmart
[contrib] gh-merge: Move second sha512 check to before signing
Docs: correct and elaborate -rpcbind doc
Add FindEarliestAtLeast test for edge cases
test: Report InitBlockIndex result
Docs: add details to -rpcclienttimeout doc
remove 'label' filter for rpc command help
Fail merge if there are any symlinks
Improve ScanForWalletTransactions return value
Add test for CWalletTx::GetImmatureCredit() returning stale values.
depends: make osx output deterministic
Trivial: Debug log ambiguity fix for peer addrs
Bugfix: Only install manpages for built programs
[wallet] Remove redundant initialization
[net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(...)
[net] Avoid initialization to a value that is never read
travis: Verify commits only for one target
Add Pieter's old signed commits to revsig-commits
Wallet: Sanitise -wallet parameter
Wallet/RPC: Use filename rather than CWallet pointer, for lockwallet RPCRunLater job name
More tightly couple EnsureWalletIsAvailable with GetWalletForJSONRPCRequest where appropriate
Move wallet RPC declarations to rpcwallet.h
RPC: Pass on JSONRPCRequest metadata (URI/user/etc) for "help" method
Reformat touched lines with C++11
Move nWalletUnlockTime to CWallet::nRelockTime, and name timed task unique per CWallet
RPC: Do all wallet access through new GetWalletForJSONRPCRequest
RPC/Wallet: Pass CWallet as pointer to helper functions
prevector: assert successful allocation
[doc] Update doc/bips.md for BIP90 implementation
[rpc] sendrawtransaction no longer bypasses minRelayTxFee
[cleanup] Remove estimatePriority and estimateSmartPriority
[debug] Change -printpriority option
[mining] Remove -blockprioritysize.
[rpc] Remove estimatepriority and estimatesmartpriority.
wallet: Remove sendfree
test: Replace remaining sprintf with snprintf
uint256: replace sprintf with HexStr and reverse-iterator
Add SHA512 tree hash to merge commits
Run miner_tests with fixed options
Abstract out BlockAssembler options
Change bitcoin address in RPC helpaddress to an invalid address, so people don't accidentally send coins there (like I did).
don't throw std::bad_alloc when out of memory. Instead, terminate immediately
Trivial: Rephrase the definition of difficulty in the code.
BIP32 extra test vector
Trivial: fix comments referencing AppInit2
Add comment about cs_most_recent_block coverage
Cache witness-enabled state with recent-compact-block-cache
Use cached [compact] blocks to respond to getdata messages
[qa] Make import-rescan.py watchonly check reliable
Update sendfrom RPC help to correct coin selection misconception
qt: clean up initialize/shutdown signals
build: add --enable-werror option
qa: Check return code when stopping nodes
Move tx version 2 standardness check to after bip68 activation
Avoid -Wshadow warnings in wallet_tests
build: force a c++ standard to be specified
Remove block file location upgrade code
qa: Set correct path for binaries in rpc tests
random: Add fallback if getrandom syscall not available
sanity: Move OS random to sanity check function
squashme: comment that NUM_OS_RANDOM_BYTES should not be changed lightly
Removed redundant parameter from mempool.PrioritiseTransaction
util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD
merge with bitcoin core
build: warn about variable length arrays
Remove harmless read of unusued priority estimates
use EXIT_ codes instead of magic numbers
Add exclude option to rpc-tests.py
Read/write mempool.dat as a binary.
Enable host lookups for -proxy and -onion parameters
[qa][doc] Correct rpc test options in readme
[trivial] Add tests_config.ini to .gitignore
Add seed.btc.petertodd.org to mainnet DNS seeds
Assert ConnectBlock block and pIndex are the same block
doc: Update manpages for master
Use package name variable inside $(package)_file_name variable
Avoid VLA in hash.h
gitian: bump descriptors for master
boost: remove iostreams includes
Move BIP70_MAX_PAYMENTREQUEST_SIZE to header
Make KEY_SIZE a compile-time constant
Various review markups for rpc-tests.py improvements
Return errors from importmulti if complete rescans are not successful
build: bump version to 0.14.99
[wallet] Remove importmulti always-true check
Qt/Send: Give fallback fee a reasonable indent
Qt/Send: Figure a decent warning colour from theme
Ensure `-maxsigcachesize` is in valid range
Add two hour buffer to manual pruning
Update nMinimumChainWork and defaultAssumeValid.
QA: Test GBT size/weight limit values
Use 2 hour grace period for key timestamps in importmulti rescans
[qa] Extend import-rescan.py to test imports on pruned nodes.
[qa] Extend import-rescan.py to test specific key timestamps
[qa] Simplify import-rescan.py
[Trivial] Update comments referencing main.cpp
Add CheckQueue Tests
Add missing cs_wallet lock that triggers new lock held assertion
Harden against mistakes handling invalid blocks
pow: GetNextWorkRequired never called with NULL pindexLast
ContextualCheckBlockHeader should never have pindexPrev to NULL
wallet: Prevent "overrides a member function but is not marked 'override'" warnings
Selectively suppress deprecation warnings
qa: add a test to detect leaky p2p messages
qa: Expose on-connection to mininode listeners
qa: mininode learns when a socket connects, not its first action
net: require a verack before responding to anything else
net: parse reject earlier
net: correctly ban before the handshake is complete
Return error when importmulti called with invalid address.
Bugfix: Qt/Options: Restore persistent "restart required" notice
param variables made const
Remove unused module from rpc-tests
Use importmulti timestamp when importing watch only keys
Dedup nTimeFirstKey update logic
Use MTP for importmulti "now" timestamps
Add test to check new importmulti "now" value
Require timestamps for importmulti keys
Move CNode::addrLocal access behind locked accessors
Move CNode::addrName accesses behind locked accessors
Make nTimeBestReceived atomic
Move [clean|str]SubVer writes/copyStats into a lock
Make nServices atomic
Make nStartingHeight atomic
Access fRelayTxes with cs_filter lock in copyStats
Avoid copying CNodeStats to make helgrind OK with buggy std::string
Make nTimeConnected const in CNode
net: fix a few races. Credit @TheBlueMatt
Remove fallbacks for boost_filesystem < v3
Pre-0.14.0 hardcoded seeds update
contrib/seeds: Update PATTERN_AGENT
Update seeds tooling to Python 3
qt: Periodic translations update
devtools: Handle Qt formatting characters edge-case in update-translations.py
Add updating of chainTxData to release process
Add a test for P2P inactivity timeouts
Remove nonsense #undef foreach
Remove bitseed.xf2.org form the dns seed list
netbase: Do not print an error on connection timeouts through proxy
netbase: Make InterruptibleRecv return an error code instead of bool
Qt/Intro: Explain a bit more what will happen first time
Qt/Intro: Storage shouldn't grow significantly with pruning enabled
Qt/Intro: Move sizeWarningLabel text into C++ code
Bugfix: Qt/Intro: Pruned nodes never require *more* space
Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain
Qt/Intro: Update block chain size
qa: Expose on-connection to mininode listeners
qa: mininode learns when a socket connects, not its first action
Disconnect peers which we do not receive VERACKs from within 60 sec
Further-enforce lockordering by enforcing directly after TRY_LOCKs
[Trivial] Remove incorrect help message from gettxoutproof()
Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0;
Update OpenBSD and FreeBSD build steps
build: Add options to override BDB cflags/libs
net: add a lock around hSocket
net: rearrange so that socket accesses can be grouped together
Refactor rpc-tests.py
Improve rpc-tests.py arguments
Use argparse in rpc_tests.py
Prevent integer overflow in ReadVarInt.
Init ECC context for test_bitcoin_fuzzy.
Change 'Clear' button string to 'Reset'
Access WorkQueue::running only within the cs lock.
Always enforce lock strict lock ordering (try or not)
Lock cs_vSend and cs_inventory in a consistent order even in TRY
[qa] test signrawtransaction merge with missing inputs
[wallet] Set correct metadata on bumpfee wallet transactions
[qa] Add second input to signrawtransaction test case
[qa] Test that decoderawtransaction throws with extra data appended
Better handle invalid parameters to signrawtransaction
Fail in DecodeHexTx if there is extra data at the end
net: log an error rather than asserting if send version is misused
net: Disallow sending messages until the version handshake is complete
net: don't run callbacks on nodes that haven't completed the version handshake
net: deserialize the entire version message locally
Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates
Dont deserialize nVersion into CNode, should fix #9212
Assert that what might look like a possible division by zero is actually unreachable
Test that pushes to bitcoin/bitcoin are signed per verify-commits
Require merge commits merge branches on top of other merge commits
clarify listunspent amount description
Use configparser in rpc-tests.py
rpc: bumpfee: handle errors more gracefully
rpc: bumpfee: use correct maximum signed tx size for fee calculation
Net: pass interruptMsgProc as const where possible
Net: Make CNetMsgMaker more const
Net: CConnman: Make some methods const
Contrib: Add jtimon pgp keys for commit sigs and future gitian builds
wallet: Refactor dummy signature signing for reusability
qt: periodic translations update
[doc] Remove unused clang format dev script
Skip RAII event tests if libevent is built without event_set_mem_functions
qt: fix build with zlib for target
depends: add a zlib build
build: find qt's renamed helper libs from 5.7
Refactor: Remove using namespace <xxx> from src/*.cpp.
Change bumpfee result value from 'oldfee' to 'origfee'.
Introduce WALLET_INCREMENTAL_RELAY_FEE
qa: Actually test assertions in pruning.py
Use CWallet::GetMinimumFee in bumpfee
[Qt] fix transaction details output-index to reflect vout index
Refactor GetMinimumFee to give option of providing targetFee
Do not add to vNodes until fOneShot/fFeeler/fAddNode have been set
[trivial] Add comment documenting bumpfee mapValues
[Qt] Change RBF checkbox to reflect -walletrbf setting
[Qt] Add simple optin-RBF checkbox and confirmation info
qa: Increase a sync_blocks timeout in pruning.py
net: Consistently use GetTimeMicros() for inactivity checks
Increase minimum debug.log size to 10MB after shrink.
Ensure cs_vNodes is held when using the return value from FindNode
Delete some unused (and broken) functions in CConnman
[Trivial] fix logging typo in FlushStateToDisk()
Refactor ZapWalletTxes to avoid layer vialotions
[Trivial] Update license year range to 2017
Allow to opt-into RBF when creating a transaction
Better document usage of SyncTransaction
Introduce MemPoolConflictRemovalTracker
mempool: add notification for added/removed entries
[wallet] Clarify getbalance help string to explain interaction with bumpfee
[Trivial] Grammar and typo correction
[test] Avoid reading a potentially uninitialized variable in tx_invalid-test
Add missing mempool lock for CalculateMemPoolAncestors
Remove redundant semicolons in Python code
[Trivial] add comment about setting peer as HB peer.
Exclude RBF txs from fee estimation
qt: Periodic translation update
trivial: squash missing field 'argNames' initializer warning in qt tests
[rpc] Add incremental relay fee to getnetworkinfo
Do not shadow local variable named `tx`.
Send final alert message to older peers after connecting.
[bugfix] save feeDelta instead of priorityDelta in DumpMempool
Use incrementalRelayFee for BIP 125 replacement
Adddress nits, use asyncio signal handling, create_task
Add python version checks and 3.4 example
Rewrite to not use Polling wrapper for asyncio, link to python2.7 example
ZMQ example using python3 and asyncio
qt: Use nPowTargetSpacing constant
Add fundrawtransactions new reserveChangeKey option to the release notes
[QA] Add test for fundrawtransactions new reserveChangeKey option
[Wallet] Add an option to keep the change address key, true by default
Move wallet callbacks into cs_main (this effectively reverts #7946)
[RPC] bumpfee
[wallet] Add include_unsafe argument to listunspent RPC
Add IPv6 support to qos.sh
[Qt] Improve progress display during headers-sync and peer-finding
Skip precompute sighash for transactions without witness
depends: qt: disable printer for all platforms, not just osx
Docs: Update CONTRIBUTING.md
Testing: listsinceblock should not use orphan block height.
Bug-fix: listsinceblock: use closest common ancestor when a block hash was provided for a chain that was not the main chain.
Remove unnecessary min fee argument in CTxMemPool constructor
CBlockPolicyEstimator now uses hard coded minimum bucket feerate
Change fee estimation bucket limit variable names
Add braces around AddToCompactExtraTransactions
Clarify comment about mempool/extra conflicts
qt: periodic translations update
Introduce -dustrelayfee
Introduce -incrementalrelayfee
Trim down the XP notice and say more about what we support.
Wake message handling thread when we receive a new block
Make WakeMessageHandler public
Add assumevalid testcase
Clarify assumptions made about when BlockCheck is called
Remove redundant semicolons
[test] Avoid potential NULL pointer dereference in addrman_tests.cpp
[depends] Remove OBJCXX define from config.site.in
depends: fix qt translations build
depends: use new variable layout for qt sdk
[depends] Qt 5.7.1
Make most_recent_compact_block a pointer to a const
Make the cs_sendProcessing a LOCK instead of a TRY_LOCK
Split CNode::cs_vSend: message processing and message sending
Remove unused Python imports
[qt] Rename formateNiceTimeOffset(qint64) to formatNiceTimeOffset(qint64)
Remove unused int64_t nSinceLastSeen
Remove unused Python variables
Introduce assumevalid setting to skip presumed valid scripts.
net: remove cs_vRecvMsg
net: add a flag to indicate when a node's send buffer is full
net: add a flag to indicate when a node's process queue is full
net: add a new message queue for the message processor
net: rework the way that the messagehandler sleeps
net: remove useless comments
net: Add a simple function for waking the message handler
net: record bytes written before notifying the message processor
net: handle message accounting in ReceiveMsgBytes
Make PartiallyDownloadedBlock::InitData's second param const
Add extra_count lower bound to compact reconstruction debug print
Add comment to describe callers to ActivateBestChain
Avoid boost dynamic_bitset in rest_getutxos
Avoid integer overflows in scriptnum tests
Avoid unaligned access in crypto i/o
Allow non-power-of-2 signature cache sizes
Document fee estimation changes
Clarify that prioritisetransaction remains supported
Add unit test for FindEarliestAtLeast
Replace FindLatestBefore used by importmuti with FindEarliestAtLeast.
test: Include tx data in EXTRA_DIST
Call ActivateBestChain without cs_main/with most_recent_block
Deprecate non-txindex getrawtransaction and better warning
Use a temp pindex to avoid a const_cast in ProcessNewBlockHeaders
Address ryanofsky feedback on CCheckQueue benchmarks. Eliminated magic numbers, fixed scoping of vectors (and memory movement component of benchmark).
RPC help updated
Return height of last block pruned by pruneblockchain RPC
Update estimated transaction count data
Shorten variable names and switch to tx/s
travis: make distdir before make
[depends] native_ds_store 1.1.0
release: update docs to show basic codesigning procedure
build: fix for out-of-tree/distdir qt builds
[depends] dbus 1.10.14
[depends] ccache 3.3.3
[depends] FreeType 2.7.1
[depends] Boost 1.63.0
[depends] Latest config.guess and config.sub
release: create a bundle for the new signing script
release: add win detached sig creator and our cert chain
Only call clear on prevector if it isn't trivially destructible and don't loop in clear
Add prevector destructor benchmark
Don't overwrite validation state with corruption check
Improve style w.r.t. if
Consider all (<100k memusage) txn for compact-block-extra-txn cache
Consider all orphan txn for compact-block-extra-txn cache
Use replaced transactions in compact block reconstruction
Keep shared_ptrs to recently-replaced txn for compact blocks
[wallet] Add IsAllFromMe: true if all inputs are from wallet
fixup! Add pruneblockchain RPC to enable manual block file pruning.
Add pruneblockchain RPC to enable manual block file pruning.
qt: periodic translations update
Update RPC argument names
rpc: Named argument support for bitcoin-cli
'help' rpc commands autocomplete
testcases: explicitly specify transaction version 1
Make ATMP optionally return the CTransactionRefs it replaced
Move ORPHAN constants from validation.h to net_processing.h
Add Basic CheckQueue Benchmark
Rename lambda argument name to prevent shadowing.
Make peer id logging consistent ("peer=%d" instead of "peer %d")
Don't overpay fee if we have selected new coins that result in a smaller transaction.
Try to reduce change output to make needed fee in CreateTransaction
[Qt] Show more significant warning if we fall back to the default fee
Avoid holding cs_most_recent_block while calling ReadBlockFromDisk
RPC help documentation for addnode peerinfo.
Add release notes for addnode changes.
Break addnode out from the outbound connection limits.
Wallet: Do not perform ECDSA in the fee calculation inner loop.
Ensure we meet the BIP 152 old-relay-types response requirements
Cache most-recently-connected compact block
Cache most-recently-announced block's shared_ptr
Relay compact block messages prior to full block connection
Add a CValidationInterface::NewPoWValidBlock callback
[Qt] Do proper shutdown
rpc: Argument name consistency
rpc: Named arguments for rawtransaction calls
rpc: Named arguments for wallet calls
rpc: Named arguments for mining calls
rpc: Named arguments for net calls
test: Add test for RPC named arguments
rpc: Named arguments for misc calls
rpc: Add 'echo' call for testing
rpc: Named arguments for blockchain calls
rpc: Support named arguments
authproxy: Add support for RPC named arguments
Make linearize scripts Python 3-compatible.
Allow linearization scripts to support hash byte reversal
Remove SIGCHECK_VERIFICATION_FACTOR
Move tx estimation data out of CCheckPointData
[MOVEONLY] Move progress estimation out of checkpoints
Call AcceptBlock with the block's shared_ptr instead of CBlock&
[qa] Avoid race in preciousblock test.
[qa] Make compact blocks test construction using fetch methods
Make CBlockIndex*es in net_processing const
Check FRESH validity in CCoinsViewCache::BatchWrite
Let autoconf detect presence of EVP_MD_CTX_new
add test for -walletrejectlongchains
Introduce -blockmintxfee
Add clarifying comments to fee estimation
Add extra logging to processBlock in fee estimation.
Add IsCurrentForFeeEstimatation
Pass pointers to existing CTxMemPoolEntries to fee estimation
Always update fee estimates on new blocks.
rename bool to validFeeEstimate
Remove member variable hadNoDependencies from CTxMemPoolEntry
Don't track transactions at all during IBD.
Remove extraneous LogPrint from fee estimation
Mark the minconf parameter to move as ignored
net: set message deserialization version when it's actually time to deserialize
net: remove redundant max sendbuffer size check
net: wait until the node is destroyed to delete its recv buffer
net: only disconnect if fDisconnect has been set
net: make GetReceiveFloodSize public
net: make vRecvMsg a list so that we can use splice()
net: fix typo causing the wrong receive buffer size
[depends] libevent 2.1.7rc
qt: Set (count) placeholder in sendcoinsdialog to notranslate
[qt] `make translate`
[qt] Add more sources to translate
Added EVENT_CFLAGS to test makefile to explicitly include libevent headers.
[Doc] Install Protobuf v3 on OS X
net: misc header cleanups
net: make proxy receives interruptible
net: remove thread_interrupted catch
net: make net processing interruptible
net: make net interruptible
net: add CThreadInterrupt and InterruptibleSleep
net: a few small cleanups before replacing boost threads
[qt] Do not translate `~`
qt: Fill in English numerusforms
doc: Add historical release notes for 0.13.2
Refactoring: Removed using namespace <xxx> from bench/ and test/ source files.
qt: Set transifex slug to 0.14
Increment MIT Licence copyright header year on files modified in 2016
Set peers as HB peers upon full block validation
SetMerkleBranch: remove unused code, remove cs_main lock requirement
Update the Windows build notes
Add test cases to test new bitcoin-tx functionality
Add all transaction output types to bitcoin-tx.
add p2sh and segwit options to bitcoin-tx outscript command
Bugfix: Detect genbuild.sh in repo correctly
GUI/RPCConsole: Include importmulti in history sensitive-command filter
Qt/RPCConsole: Use RPCParseCommandLine to perform command filtering
Qt/Test: Make sure filtering sensitive data works correctly in nested commands
Qt/RPCConsole: Teach RPCParseCommandLine how to filter out arguments to sensitive commands
Qt/RPCConsole: Make it possible to parse a command without executing it
Qt/RPCConsole: Truncate filtered commands to just the command name, rather than skip it entirely in history
Qt/RPCConsole: Add signmessagewithprivkey to list of commands filtered from history
Qt/RPCConsole: Refactor command_may_contain_sensitive_data function out of RPCConsole::on_lineEdit_returnPressed
Bugfix: Do not add sensitive information to history for real
Qt/RPCConsole: Don't store commands with potentially sensitive information in the history
Qt/RPCConsole: Save current command entry when browsing history
test: Include tx data in EXTRA_DIST
Add a ForceSetArg method for testing
Remove unused variable in test, fixing warning.
Release cs_main before processing cmpctblock as header
Release cs_main before calling ProcessNewBlock (cmpctblock handling)
Lock mapArgs/mapMultiArgs access in util
Un-expose mapArgs from utils.h
Get rid of mapArgs direct access in ZMQ construction
Introduce (and use) an IsArgSet accessor method
Remove arguments to ParseConfigFile
Do not evaluate hidden LogPrint arguments
[CoinControl] Allow non-wallet owned change addresses
Allow shutdown during LoadMempool, dump only when necessary
Mention RSVG dependency when creating the disk image on OSX
Share unused mempool memory with coincache
updated listsinceblock rpc docs
Added missing colons in when running help command
Make CScript (and prevector) c++11 movable.
Remove unused MakeTransactionRef overloads
Make FillBlock consume txn_available to avoid shared_ptr copies
Convert COrphanTx to keep a CTransactionRef
Make AcceptToMemoryPool take CTransactionRef
Make nWalletDBUpdated atomic to avoid a potential race.
Re-enable a blank v1 Tx JSON test
Make rpcauth help message clearer, add example in example .conf
Added some simple tests for the RAII-style events.
build: Include cuckoocache header in Makefile
gitignore: Wipe line after java comp tool removal
travis: make distdir
Switched bitcoin-cli.cpp to use RAII unique pointers with deleters.
Added std::unique_ptr<> wrappers with deleters for libevent modules.
reduce number of lookups in TransactionWithinChainLimit
Remove unused test files and references
Uses built-in byte swap if available (Apple) and if bswap_XX is undefined.
If we don't allow free txs, always send a fee filter (take 2)
Adding 'amount' label to tx_valid/tx_invalid.json files
Add documentation for CWalletTx::fFromMe member.
Make fuzzer actually test CTxOutCompressor
[qa] Update compactblocks test for multi-peer reconstruction
Allow compactblock reconstruction when block is in flight
wallet: Use CDataStream.data()
bench: Use CDataStream.data()
dbwrapper: Use new .data() method of CDataStream
streams: Remove special cases for ancient MSVC
streams: Add data() method to CDataStream
doc: Add bare-bones documentation for fuzzing
Simple fuzzing framework
Add unit tests for the CuckooCache
Add CuckooCache implementation and replace the sigcache map_type with it
Remove reference to nonexistent "version" wallet transaction mapvalue field
Batch construct batches
[Qt] Console: don't allow empty arguments when using the comma-syntax
Do not run functions with necessary side-effects in assert()
Add 'subtractFeeFromOutputs' option to 'fundrawtransaction'.
Test for fix of txn chaining in wallet
CreateTransaction: Don't return success with too-many-ancestor txn
SelectCoinsMinConf: Prefer coins with fewer ancestors
Qt/Test: Check handling of empty arguments in RPC debug console
[Qt] Console: allow empty arguments
Squashed 'src/secp256k1/' changes from 7a49cac..8225239
Update libsecp256k1 to master
[trivial] Add comment documenting CWalletTx::mapValue
[qa] Add test for rescan feature of wallet key import RPCs
[Qt] Console: add security warning
[qa] Don't set unknown rpcserialversion
[wallet] Disable free transactions when relay is disabled
If we don't allow free txs, always send a fee filter
Increase mempool expiry time to 2 weeks
Flush wallet after abandontransaction
Wallet needs to stay unlocked for whole test
Refactor: Removed begin/end_ptr functions.
Update ctaes
Squashed 'src/crypto/ctaes/' changes from cd3c3ac..003a4ac
Avoid rollingMinimumFeeRate never being able to decay below half
fix a bug if the min fee is 0 for FeeFilterRounder
Update python tests for default tx version=2
Preserve tx version=1 for certain tests
tiny test fix for mempool_tests
Bump default transaction version to 2
Return txid even if ATMP fails for new transaction
Remove undefined FetchCoins method declaration
remove no longer needed check for premature v2 txs
[QA] add fundrawtransaction test on a locked wallet with empty keypool
qt: Remove on_toggleNetworkActiveButton_clicked from RPCConsole
[Wallet] Bugfix: FRT: don't terminate when keypool is empty
Make RelayWalletTransaction attempt to AcceptToMemoryPool.
Complain when unknown rpcserialversion is specified
Remove mapOrphanTransactionsByPrev from DoS_tests
[test] Add CCoinsViewCache Access/Modify/Write tests
remove internal tracking of mempool conflicts for reporting to wallet
remove external usage of mempool conflict tracking
[Qt] Show ModalOverlay by pressing the progress bar, disabled show() in sync mode
Adapt ZMQ/rest serialization to take rpcserialversion arg
Add option to return non-segwit serialization via rpc
Check and enable -Wshadow by default.
Do not shadow variables (gcc set)
CMutableTransaction is defined as struct.
Align struct COrphan definition
Move CTxInWitness inside CTxIn
[qa] maxuploadtarget: Use cached utxo set
remove obsolete run-bitcoind-for-test.sh
[qa] pruning: Use cached utxo set to run faster
Remove unused CDiskBlockPos* argument from ProcessNewBlock
Document ConnectBlock connectTrace postconditions
Switch pblock in ProcessNewBlock to a shared_ptr
Make the optional pblock in ActivateBestChain a shared_ptr
Create a shared_ptr for the block we're connecting in ActivateBCS
Keep blocks as shared_ptrs, instead of copying txn in ConnectTip
Add struct to track block-connect-time-generated info for callbacks
remove relaypriority from rpc tests
Reorder RPC tests for running time
Add unstored orphans with rejected parents to recentRejects
Move GetWarnings() into its own file.
Eliminate data races for strMiscWarning and fLargeWork*Found.
Make QT runawayException call GetWarnings instead of directly access strMiscWarning.
Make CTransaction actually immutable
Make DecodeHexTx return a CMutableTransaction
Make CWalletTx store a CTransactionRef instead of inheriting
Switch GetTransaction to returning a CTransactionRef
Rename the remaining main.{h,cpp} to validation.{h,cpp}
Move network-msg-processing code out of main to its own file
[qa] Get rid of duplicate code
Developer docs about existing subtrees.
Bugfix: Qt/RPCConsole: Put column enum in the right places
bitcoin-cli: Make error message less confusing
Squashed 'src/leveldb/' changes from 20ca81f..a31c8aa
Remove orphan state wipe from UnloadBlockIndex.
Revert "Use async name resolving to improve net thread responsiveness"
Document cs_main status when calling into PNB or PNBH
Use ProcessNewBlockHeaders in CMPCTBLOCK processing
Use exposed ProcessNewBlockHeaders from ProcessMessages
qt: layoutAboutToChange signal is called layoutAboutToBeChanged
Improvement of documentation of command line parameter 'whitelist'
[qa] Dump debug logs on travis failures.
Trivial refactor: Remove extern keyword from function declarations, as they are extern by default.
Make GUI incapable of setting tx confirm target of 1
Disable fee estimates for a confirm target of 1 block
init: Get rid of fServer flag
init: Try to aquire datadir lock before and after daemonization
init: Split up AppInit2 into multiple phases
Include select.h when WIN32 is not defined
torcontrol: Explicitly request RSA1024 private key
Make fStartedNewLine an std::atomic_bool
Remove pnodeLocalHost.
Remove fNetworkNode.
Remove double brackets in addrman
Make fImporting an std::atomic
unification of Bloom filter representation
Make fDisconnect an std::atomic
net: push only raw data into CConnman
net: add CVectorWriter and CNetMsgMaker
net: No need to check individually for disconnection anymore
doc: Improve windows build instructions using Linux subsystem
Removed using namespace std from bitcoin-cli/-tx and added std:: in appropriate places.
qt: Show progress overlay when clicking spinner icon
qt: Replace NetworkToggleStatusBarControl with generic ClickableLabel
Correct help output for waitfor RPC commands
net: don't send any messages before handshake or after requested disconnect
net: Set feelers to disconnect at the end of the version message
Split ::HEADERS processing into two separate cs_main locks
Expose AcceptBlockHeader through main.h
Move orphan-conflict removal from main logic into a callback
qt: Avoid OpenSSL certstore-related memory leak
qt: Avoid shutdownwindow-related memory leak
qt: Avoid splash-screen related memory leak
qt: Prevent thread/memory leak on exiting RPCConsole
qt: Plug many memory leaks
[Doc] Move comments above bash command
Minor change to comment above new NODE_WITNESS service flag to keep it consitent with existing comment structure. Helps with readability.
fix CreateTransaction error messages
add testcases for getrawtransaction
getrawtransaction should take a bool for verbose
bench: Add support for measuring CPU cycles
Always drop the least preferred HB peer when adding a new one.
[qa] Test getblocktemplate default_witness_commitment
Always add default_witness_commitment with GBT client support
Make test constant consistent with consensus.h
[Qt] Clean up and fix coincontrol tree widget handling
Introduce convenience type CTransactionRef
Make CBlock::vtx a vector of shared_ptr<CTransaction>
Add deserializing constructors to CTransaction and CMutableTransaction
Add serialization for unique_ptr and shared_ptr
Make orphan parent fetching ask for witnesses.
[Qt] fix coincontrol sort issue
Erase orphans per-transaction instead of per-block
Move orphan processing to ActivateBestChain
Set DEFAULT_LIMITFREERELAY = 0 kB/minute
Doxygen: Set PROJECT_NAME = "Bitcoin Core"
Add compile and link options echo to configure
build: fix qt5.7 build under macOS
[qa] add assert_raises_message to check specific error message
SendMoney: use already-calculated balance
credit values are CAmount
[qa] Wait for specific block announcement in p2p-compactblocks
[qa] Avoid 2 list comprehensions in sync_blocks
[qa] Improve sync_blocks error messages.
update comments for tx weight
[qa] proxy_test: Calculate hardcoded port numbers instead
[qt] Make network disabled icon 50% opaque
Remove unnecessary calls to CheckFinalTx
Mention the new network toggle functionality in the tooltip.
Move -salvagewallet, -zap(wtx) to where they belong
Bugfix: Correctly replace generated headers and fail cleanly
[qa] Change sync_blocks to pick smarter maxheight
Unset fImporting for loading mempool
Make strWalletFile const
fNetworkActive is not protected by a lock, use an atomic
Wallet: Split main logic from InitLoadWallet into CreateWalletFromFile
Wallet: Let the interval-flushing thread figure out the filename
Use better name for local variable to prevent -Wshadow compiler warning
Mention reporting security issues responsibly
fix getnettotals RPC description about timemillis.
Initialize variable to prevent compiler warning
Missed one "return false" in recent refactoring in #9067
Revert "Check and enable -Wshadow by default."
Optimize vInOutPoints insertion a bit
Remove redundant duplicate-input check from CheckTransaction
Add deserialize + CheckBlock benchmarks, and a full block hex
Replace CValidationState param in ProcessNewBlock with BlockChecked
Remove pfrom parameter from ProcessNewBlock
net: don't send feefilter messages before the version handshake is complete
Add notes about variable names and shadowing
[depends] Set OSX_MIN_VERSION to 10.8
Avoid ugly exception in log on unknown inv type
Remove unused var UNLIKELY_PCT from fees.h
Revert "RPC: Give more details when "generate" fails"
RPC: Give more details when "generate" fails
Multiple Selection for peer and ban tables
[qa] rpc-tests: Apply random offset to portseed
tx_valid: re-order inputs to how they are encoded
Remove block-request logic from INV message processing
[qa] Respond to getheaders and do not assume a getdata on inv
[qa] Make comptool push blocks instead of relying on inv-fetch
Use fixed preallocation instead of costly GetSerializeSize
Add optimized CSizeComputer serializers
Make CSerAction's ForRead() constexpr
Avoid -Wshadow errors
Get rid of nType and nVersion
Make GetSerializeSize a wrapper on top of CSizeComputer
[qa] test_framework: Exit when tmpdir exists
Make nType and nVersion private and sometimes const
[qa] util: Rework sync_*()
Modify getblocktxn handler not to drop requests for old blocks
Every main()/exit() should return/use one of EXIT_ codes instead of magic numbers
[qa] preciousblock: Use assert_equal and BitcoinTestFramework.__init__
Make streams' read and write return void
Remove unused ReadVersion and WriteVersion
[qa] Add more helpful RPC timeout message
[qa] Increase wallet-dump RPC timeout
add release notes for removal of priority estimation
Remove priority estimation
new var DIST_CONTRIB adds useful things for packagers from contrib/ to EXTRA_DIST
qt: Use correct conversion function for boost::path datadir
[doc] release-process: Mention GitHub release and archived release notes
[copyright] copyright header style uniform
Make warning message about wallet balance possibly being incorrect less ambiguous.
Remove unused CTxOut::GetHash()
Enforcing consistency, 'gitian' to 'Gitian'
Allow bitcoin-tx to parse partial transactions
net: handle version push in InitializeNode
net: construct CNodeStates in place
net: remove now-unused ssSend and Fuzz
drop the optimistic write counter hack
net: switch all callers to connman for pushing messages
connman is in charge of pushing messages
serialization: teach serializers variadics
Bump the protocol version to distinguish new banning behavior.
[qa] Test that invalid compactblocks don't result in ban
Add common failure cases for rpc server connection failure
Clean up bctest.py and bitcoin-util-test.py
Do not fully sort all nodes for addr relay
Declare wallet.h functions inline
LockedPool: avoid quadratic-time allocation
LockedPool: fix explosion for illegal-sized alloc
LockedPool: test handling of invalid allocations
trivial: Remove variable unused after refactoring
Add logging to bitcoin-util-test.py
Do not shadow variable, use deprecated MAP_ANON if MAP_ANONYMOUS is not defined.
IsInitialBlockDownload no longer uses header-only timestamps.
Remove GetTotalBlocksEstimate and checkpoint tests that test nothing.
IBD check uses minimumchain work instead of checkpoints.
trivial: fix bloom filter init to isEmpty = true
Use RelevantServices instead of node_network in AttemptToEvict.
net: Use deterministic randomness for CNode's nonce, and make it const
net: constify a few CNode vars to indicate that they're threadsafe
Move nTimeBestReceived updating into net processing code
Move all calls to CheckBlockIndex out of net-processing logic
Remove network state wipe from UnloadBlockIndex.
Move MarkBlockAsReceived out of ProcessNewMessage
Move FlushStateToDisk call out of ProcessMessages::TX into ATMP
[rpc] ParseHash: Fail when length is not 64
Add mempool.dat to doc/files.md
Add DumpMempool and LoadMempool
Add AcceptToMemoryPoolWithTime function
Add feedelta to TxMempoolInfo
Change all instance of 'GMT epoch' to 'Unix epoch'
Hash P2P messages as they are received instead of at process-time
[qt] Return useful error message on ATMP failure
Move CWalletDB::ReorderTransactions to CWallet
test: Add format-dependent comparison to bctest
wallet: Change default confirm target from 2 to 6
[Qt] overhaul smart-fee slider, adjust default confirmation target
[Qt] Hide nTxConfirmTarget behind WalletModel
CoinControl: add option for custom confirmation target
instance of 'mem pool' to 'mempool'
doc: Add release notes for 0.13.1 release
Update build notes for dropping osx 10.7 support
bench: Add benchmark for lockedpool allocation/deallocation
rpc: Add `getmemoryinfo` call
support: Add LockedPool
Return useful error message on ATMP failure
rpc: Remove invalid explanation from wallet fee message
Send tip change notification from invalidateblock
release: bump required osx version to 10.8. Credit jonasschnelli.
Explicitly pass const CChainParams& to LoadBlockIndexDB()
Make connect=0 disable automatic outbound connections.
[net] Remove assert(nMaxInbound > 0)
Qt: New network_disabled icon
RPC/Net: Use boolean consistently for networkactive, and remove from getinfo
Overhaul network activity toggle
Qt: Add GUI feedback and control of network activity state.
RPC: Add "togglenetwork" method to toggle network activity temporarily
Allow network activity to be temporarily suspended.
Clarify `listenonion`
Add some missing includes
Return shared_ptr<CTransaction> from mempool removes
Make removed and conflicted arguments optional to remove
Bypass removeRecursive in removeForReorg
Add missing cs_main lock to ::GETBLOCKTXN processing
moveonly: move `coincontrol` to `src/wallet`
libconsensus: Add input validation of flags
[Qt] use NotifyHeaderTip's height and date for the progress update
Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip()
Eliminating Inconsistencies in Textual Output
Do not shadow local variable
RPC: importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions
[Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread)
Chainparams: Trivial: In AppInit2(), s/Params()/chainparams/
Add consistency check to RPC call importmulti
wallet: Get rid of LockObject and UnlockObject calls in key.h
wallet: Change CCrypter to use vectors with secure allocator
Add importmulti rpc call
RPC: augment getblockchaininfo bip9_softforks data
[RPC] pass HTTP basic authentication username to the JSONRequest object
[RPC] Give RPC commands more information about the RPC request
rpc: Change JSONRPCRequest to JSONRPCRequestObj
[Qt] make warnings label selectable
RPC/Mining: getblocktemplate: Update and fix formatting of help
Make dnsseed's definition of acute need include relevant services.
Add microbenchmarks to profile more code paths.
Explicitly state that PPA is for Ubuntu only
Don't hold cs_main when calling ProcessNewBlock from a cmpctblock
trivial: update 0.13.0 release note info on linux arm builds
contrib: Add README for pgp keys
RPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC
Report NodeId in misbehaving debug
Be more aggressive in connecting to peers with relevant services.
[TRIVIAL] reorder Windows gitian build order to match Linux
Remove bogus assert on number of oubound connections.
My DNS seed supports filtering
Add x9 service bit support to dnsseed.bluematt.me
Comment that most dnsseeds only support some service bits combos
Simple Update to File 'bitcoin-qt.desktop'
Update implemented bips for 0.13.1
Align constant names for maximum compact block / blocktxn depth
Add cmpctblock to debug help list
More agressively filter compact block requests
Dont remove a "preferred" cmpctblock peer if they provide a block
Define start and end time for segwit deployment
Kill insecure_random and associated global state
Documentation for Building on Windows with WSL
Set minimum required Boost to 1.47.0
[build-aux] Boost_Base serial 27
Sync bitcoin-tx with tx version policy
remove redundant tests in p2p-segwit.py
test segwit uncompressed key fixes
[qa] Add tests for uncompressed pubkeys in segwit
Make test framework produce lowS signatures
Require compressed keys in segwit as policy and disable signing with uncompressed keys for segwit scripts
Add standard limits for P2WSH with tests
[qa] Build v4 blocks in p2p-compactblocktests
add software-properties-common
Add script tests for FindAndDelete in pre-segwit and segwit scripts
Display minimum ping in debug window.
[qa] Send segwit-encoded blocktxn messages in p2p-compactblocks
Qt: Add "Copy URI" to payment request context menu
Add copyright/patent issues to possible NACK reasons
doc: Add build instructions for FreeBSD
qt: Translate all files, even if wallet disabled
[qt] sync-overlay: Don't show progress twice
[Doc] Update bips.md for Segregated Witness
[Doc] Improve GitHub issue template
Update INSTALL landing redirection notice for build instructions.
add verbose mode to bitcoin-util-test.py
Update bitcoin-tx to output witness data.
Don't return the address of a P2SH of a P2SH.
protocol.h: Make enums in GetDataMsg concrete values
[Doc] Update Doxygen configuration file
gui: fix ban from qt console
Bugfix: Trivial: RPC: getblockchaininfo help: pruneheight is the lowest, not highest, block
Qt/splash: Specifically keep track of which wallet(s) we are connected to for later disconnecting
Qt: Get the private key for signing messages via WalletModel
[qa] Another attempt to fix race condition in p2p-compactblocks.py
Use BlockChecked signal to send reject messages from mapBlockSource
Remove SyncWithWallets wrapper function
Always call UpdatedBlockTip, even if blocks were only disconnected
Remove CConnman parameter from ProcessNewBlock/ActivateBestChain
Use CValidationInterface from chain logic to notify peer logic
Move net-processing logic definitions together in main.h
[qa] Update p2p-compactblocks.py for compactblocks v2
[qa] Add support for compactblocks v2 to mininode
Use cmpctblock type 2 for segwit-enabled transfer
Remove duplicate nBlocksEstimate cmp (we already checked IsIBD())
Make validationinterface.UpdatedBlockTip more verbose
Make GetFetchFlags always request witness objects from witness peers
[doc] Rework docs
protocol.h: Move MESSAGE_START_SIZE into CMessageHeader
version.h: s/shord/short/ in comment
log block size and weight correctly.
[qa] mininode: Only allow named args in wait_until
[qa] util: Move wait_bitcoinds() into stop_nodes()
serialize: Deprecate `begin_ptr` / `end_ptr`
net: fix a few cases where messages were sent rather than dropped upon disconnection
rpc: Generate auth cookie in hex instead of base64
Globals: Decouple GetConfigFile and ReadConfigFile from global mapArgs
Mention Gitian building script in doc.
Squashed 'src/univalue/' changes from daf1285..16a1f7f
Move key derivation logic from GenerateNewKey to DeriveNewChildKey
prevector: add C++11-like data() method
Add NULLDUMMY verify flag in bitcoinconsensus.h
test: Explicitly set encoding to utf8 when opening text files
test: Avoid ConnectionResetErrors during RPC tests
bitcoin-util-test.py should fail if the output file is empty
[qa] nulldummy: Don't run unused code
Add option to run bitcoin-util-test.py manually
[qt] sync-overlay: Don't show estimated number of headers left
[qa] blockstore: Switch to dumb dbm
[rpc] throw JSONRPCError when utxo set can not be read
Add bitcoin-tx JSON tests
[qa] Split up slow RPC calls to avoid pruning test timeouts
Do not include env_win.cc on non-Windows systems
net: Hardcode protocol sizes and use fixed-size types
net: Consistent checksum handling
Add policy: null signature for failed CHECK(MULTI)SIG
doc: Add privacy recommendation when running hidden service
Do not shadow variables
[depends] Boost 1.61.0
[qt] sync-overlay: Don't block during reindex
[trivial] fix mempool comment (outdated by BIP125)
[wallet, policy] ParameterInteraction: Don't allow 0 fee
bitcoind: Daemonize using daemon(3)
build: supply `-Wl,--high-entropy-va`
devtools: Check for high-entropy ASLR in 64-bit PE executables
[wallet] Add high transaction fee warnings
tests: Add exception error message for JSONRPCException
Ping regularly in p2p-segwit.py to keep connection alive
Squashed 'src/univalue/' changes from f32df99..daf1285
[qa] Add getinfo smoke tests and rework versionbits test
Remove old manpages from contrib/debian
Trivial: Grammar and capitalization
[Qt] modalinfolayer: removed unused comments, renamed signal, code style overhaul
Do not shadow in src/qt
Make non-minimal OP_IF/NOTIF argument non-standard for P2WSH
[Doc] Add missing autogen to example builds
CONTRIBUTING: Mention not to open several pulls
Check and enable -Wshadow by default.
Mandatory copyright agreement
Comment on CConnman::nLocalServices meaning
[travis] cross-mac: explicitly enable gui
[test] Remove redundant print in addrman_tests
[qa] pull-tester: Only print output when failed
Add MIT license to build-aux/m4 scripts
Add MIT license to autogen.sh and share/genbuild.sh
[share] remove qt/protobuf.pri
Add MIT license to Makefiles
[contrib] delete qt_translations.py
[rpc] Deprecate getinfo
[contrib] Delete spendfrom
bitcoin-cli: More detailed error reporting
[qt] WalletModel: Expose disablewallet
[wallet] Introduce DEFAULT_DISABLE_WALLET
Trivial Bugfix: doc/gitian-building.md: Link to release-process needs to be updated
init: Get rid of fDisableWallet
[Wallet] remove "unused" ThreadFlushWalletDB from removeprunedfunds
init: Get rid of some ENABLE_WALLET
Move static global randomizer seeds into CConnman
[Doc] Target protobuf 2.6 in OS X build notes.
[qa] Refactor RPCTestHandler to prevent TimeoutExpired
Use prefix operator in for loop of DecodeBase58.
[depends] fontconfig 2.12.1
[depends] ccache 3.3.1
[depends] expat 2.2.0
Specify Protobuf version 2 in paymentrequest.proto
net: No longer send local address in addrMe
Remove last reference to CWalletDB from accounting_tests.cpp
Remove pwalletdb parameter from CWallet::AddAccountingEntry
Add CWallet::ReorderTransactions and use in accounting_tests.cpp
Add CWallet::ListAccountCreditDebit
UndoReadFromDisk works on undo files (rev), not on block files.
base58: Improve DecodeBase58 performance.
depends: Add libevent compatibility patch for windows
net: fix maxuploadtarget setting
[qa] walletbackup: Sync blocks inside the loop
Minor change in section name
[qa] wallet: Check legacy wallet as well
net: only delete CConnman if it's been created
[WALLET] Addition of ImmatureCreditCached to MarkDirty()
gitignore: Remove unused lines
[qa] create_cache: Delete temp dir when done
Remove maxuploadtargets recommended minimum
[Qt] only update "amount of blocks left" when the header chain is in-sync
Rename `-optintofullrbf` option to `-walletrbf`
Remove createwitnessaddress
Allow filterclear messages for enabling TX relay only.
[copyright] add MIT License copyright header to remaining Python files
[copyright] add MIT License copyright header to zmq_sub.py
[copyright] Add missing copyright headers
[copyright] add MIT license headers to .sh scripts where missing
[devtools] script support for managing source file copyright headers
fix op order to append first alert
add witness address to address book
[WIP] Remove unused statement in serialization
net: move MAX_FEELER_CONNECTIONS into connman
Convert ForEachNode* functions to take a templated function argument rather than a std::function to eliminate std::function overhead
Made the ForEachNode* functions in src/net.cpp more pragmatic and self documenting
net: move vNodesDisconnected into CConnman
net: add nSendBufferMaxSize/nReceiveFloodSize to CConnection::Options
net: Introduce CConnection::Options to avoid passing so many params
net: Drop StartNode/StopNode and use CConnman directly
net: pass CClientUIInterface into CConnman
net: Pass best block known height into CConnman
net: move max/max-outbound to CConnman
net: move semOutbound to CConnman
net: move nLocalServices/nRelevantServices to CConnman
net: move SendBufferSize/ReceiveFloodSize to CConnman
net: move send/recv statistics to CConnman
net: SocketSendData returns written size
net: move messageHandlerCondition to CConnman
net: move nLocalHostNonce to CConnman
net: move nLastNodeId to CConnman
net: move whitelist functions into CConnman
net: create generic functor accessors and move vNodes to CConnman
net: Add most functions needed for vNodes to CConnman
net: move added node functions to CConnman
net: Add oneshot functions to CConnman
net: move ban and addrman functions into CConnman
net: handle nodesignals in CConnman
net: move OpenNetworkConnection into CConnman
net: Move socket binding into CConnman
net: Pass CConnection to wallet rather than using the global
net: Pass CConnman around as needed
net: Add rpc error for missing/disabled p2p functionality
net: Create CConnman to encapsulate p2p connections
net: move CBanDB and CAddrDB out of net.h/cpp
gui: add NodeID to the peer table
update name of file bitcoin.qrc
add waitfornewblock/waitforblock/waitforblockheight rpcs and use them for tests
[Qt][CoinControl] fix UI bug that could result in paying unexpected fee
Do not shadow upper local variable 'send', prevent -Wshadow compiler warning.
qt: Adding transaction size to transaction details window
Adding method GetTotalSize() to CTransaction
Minimal fix to slow prevector tests as stopgap measure
Add basic test for IsStandard witness transaction blinding
Do not store witness txn in rejection cache
Clear witness with vin/vout in CWallet::CreateTransaction()
fix path for bak file
remove root test directory for RPC tests
trivial: remove unnecessary variable fDaemon
Do not set an addr time penalty when a peer advertises itself.
Update btcdrak signing key
Do not shadow global variable
Predeclare PrecomputedTransactionData as sturct
Remove unused Qt 4.6 patch.
C++11: s/boost::scoped_ptr/std::unique_ptr/
improved gen-manpages.sh, includes bitcoin-tx and strips commit tag, now also runs binaries from build dir by default, added variables for more control
regenerated all manpages with commit tag stripped, also add bitcoin-tx
Make the dummy argument to getaddednodeinfo optional
rest.cpp: change HTTP_INTERNAL_SERVER_ERROR to HTTP_BAD_REQUEST
[depends] Remove Qt46 package
Do not shadow variables.
Implement NULLDUMMY softfork
Berkeley DB v6 compatibility fix
[doc] - clarify statement about parallel jobs in rpc-tests.py
[doc] build: Mention curl
Include instructions to extract Mac OS X SDK on Linux using 7zip and SleuthKit
contrib: Don't use shell=True
doc: Update build-openbsd for 0.13.0+ and OpenBSD 5.9
build: Updates for OpenBSD
Set defaults to gitian defaults
change help string --enable-man to --disable-man
Reduce default number of blocks to check at startup
Create option to detach sign gitian builds and not commit the files in the script
Check for OSX SDK
Create an easy to use gitian building script
add conditional for --enable-man, default is yes
add doc/man to subdir if configure flag --enable-man is set
add doc/man/Makefile.am to include manpages
add autogenerated manpages by help2man
add gen-manpages.sh description to README.md
add script to generate manpages with help2man
Add preciousblock tests
Add preciousblock RPC
Check for compatibility with download in FindNextBlocksToDownload
Rename to PrecomputedTransactionData
[trivial][doc] Mention gpg --refresh-keys in release-process.md
[trivial][doc] Mention ++i as preferred to i++ in dev notes
wallet: Add BIP125 comment for MAXINT-1/-2 behavior
Add option to opt into full-RBF when sending funds
[Qt] add out-of-sync modal info layer
[Qt] ClientModel add method to get the height of the header chain
[Qt] Always pass the numBlocksChanged signal for headers tip changed
[Qt] make Out-Of-Sync warning icon clickable
[Refactor] refactor function that forms human readable text out of a timeoffset
Do not add random inbound peers to addrman.
[rpc] rawtx: Prepare fLimitFree to make it an option
[wallet] Set fLimitFree = true
Do not shadow global RPC table variable (tableRPC)
Remove unused variables
Show XTHIN in GUI
[test] Remove unused code
[wallet] rpc: Drop misleading option
Load choose datadir dialog after options reset
[qt] Remove Priority from coincontrol dialog
Set jonasschnellis dns-seeder filter flag
Add default port numbers to REST doc
Added feeler connections increasing good addrs in the tried table.
doc: Add historical release notes for 0.12.1 0.13.0
[Wallet] remove unused code/conditions in ReadAtCursor
[Qt] RPC-Console: support nested commands and simple value queries
Add configure check for -latomic
Show "end" instead of many zeros when getheaders request received with a hashStop of Null.
contrib: Make fix-copyright-headers.py more portable
[qa] pull-tester: Don't mute zmq ImportError
Add copyright header to wallet_text_fixture.cpp
[contrib] verifybinaries: Mention mandatory preparation step
[contrib] verifybinaries: Keep downloads by default
[contrib] verifybinaries: Adjust parsing to new rc path
Move wallet initialization logic from AppInit2 to CWallet::InitLoadWallet
trivial: remove unused variable
[qa] Remove unused code
Use __func__ to get function name for output printing
[Wallet] Trivial cleanup of HD wallet changes
[doc] Update git-subtree-check.sh README
[Qt] add HD enabled/disabled icon to the status bar
p2psegwit.py transaction is rejected due to premature witness not size
CDB: fix debug output
Revert "[qa] Adjust timeouts for micro-optimization of run time"
Move CWallet::setKeyPool to private section of CWallet
[travis] Drop java
[qa] abandonconflict: Use assert_equal
travis: Remove hostname hack
Update p2p-segwit.py to reflect correct AskFor behavior
Unit test for sighash caching
Precompute sighashes
qa: Remove duplicate `hash160` implementation
Squashed 'src/secp256k1/' changes from 6c527ec..7a49cac
build: Remove check for `openssl/ec.h`
remove no-longer-used InitError logic
Do not shadow variables in networking code
various typos
Corrected JSON typo on setban of net.cpp
test: Remove java comparison tool
[doc] typos, READMEs, comments
net: fixup nits
Reduce cs_main locks during ConnectTip/SyncWithWallets
Persist the datadir after option reset
Adds issue template. [skip ci]
[init] ParameterInteraction() iff wallet enabled
Bugfix: Allow building libbitcoinconsensus without any univalue
configure: Allow building bench_bitcoin by itself
use std::map::emplace() instead of std::map::insert()
use c++11 std::unique_ptr instead of boost::shared_ptr
use std::map::erase(const_iterator, const_iterator) to get non-constant iterator
qa/rpc-tests/segwit: Test GBT sigops before and after activation
Bugfix: Use pre-BIP141 sigops until segwit activates
Remove rpc_wallet_tests.cpp
Account wallet feature RPC tests.
[qa] Use single cache dir for chains
[qa] Adjust timeouts for micro-optimization of run time
Do not shadow LOCK's criticalblock variable for LOCK inside LOCK
Do not shadow members in dbwrapper
Remove redundand (and shadowing) declaration
Move AdvertiseLocal debug output to net category
document return value of networkhashps for getmininginfo RPC endpoint
net: Have LookupNumeric return a CService directly
Do not shadow local variable, cleanup
Do not shadow previous local variable
Trivial: bip -> BIP in help text and comment
[qa] Rework hd wallet dump test
[doc] Increase recommended memory in gitian build guide
Do not shadow member variables
net: narrow include scope after moving to netaddress
net: move CNetAddr/CService/CSubNet out of netbase
net: Add direct tests for new CSubNet constructors
net: Split resolving out of CSubNet
Update README.md
net: Split resolving out of CService
net: Split resolving out of CNetAddr
Make CWallet::fFileBacked private.
Do diskspace check before import thread is started
Add extra message to avoid a long 'Loading banlist'
Use a signal to continue init after genesis activation
Remove unused pwalletdb from CWallet::AddToWallet
Remove CWalletDB* parameter from CWallet::AddToWallet
Split CWallet::AddToWallet into AddToWallet and LoadToWallet.
net: Ignore `notfound` P2P messages
Add p2p test for BIP 152 (compact blocks)
Add support for compactblocks to mininode
Tests: refactor compact size serialization in mininode
Implement SipHash in Python
Allow changing BIP9 parameters on regtest
httpserver: replace boost threads with std
httpserver: explicitly detach worker threads
httpserver: use a future rather than relying on boost's try_join_for
Mempool: Use Consensus::CheckTxInputs direclty over main::CheckInputs
Enable size accounting in mining unit tests
[QA] Add walletdump RPC test (including HD- & encryption-tests)
Port from 0.13: Create a new HD seed after encrypting the wallet
[Qt] Add dbcache migration path
prepend license statement to indirectmap
libconsensus: Expose a flag for BIP112
Trivial: pass Consensus::Params& instead of CChainParams& in ContextualCheckBlock
[Wallet] add HD xpriv to dumpwallet
Ignore CMPCTBLOCK messages for pruned blocks
Ignore GETBLOCKTXN requests for unknown blocks
[qa]: enable rpcbind_test
[qa]: add parsing for '<host>:<port>' argument form to rpc_url()
remove outdated legacy code
Consensus: Remove ISM
qa: Add test for standardness of segwit v0 outputs
Make witness v0 outputs non-standard before segwit activation
[Wallet] Correct hdmasterkeyid/masterkeyid name confusion
Consensus: Remove calls to error() from ContextualCheckBlock
[trivial] Remove URLs from About dialog translations
[depends] ZeroMQ 4.1.5
[Qt] show network/chain errors in the GUI
Move SetMinVersion for FEATURE_HD to SetHDMasterKey
build: fix non-deterministic biplist
Treat high-sigop transactions as larger rather than rejecting them
[trivial] Switched constants to sizeof()
[Wallet] Ensure <0.13 clients can't open HD wallets
Rename "block cost" to "block weight"
Scale legacy sigop count in CreateNewBlock
doc: Clean out release notes
build: bump version to 0.13.99
qt: periodic translations update
mining: Improve `-blockmaxcost` help message
[doc] gbuild: Set memory explicitly (default is too low)
Trivial: Segwit: Don't call IsWitnessEnabled from ContextualCheckBlock
Trivial: Make CBlockIndex param const in ContextualCheckBlockHeader and ContextualCheckBlock
Consensus: Trivial transform BOOST_FOREACH into for loop
[qa] Sort scripts by time for pull_tester and don't overwrite setup_chain
[Wallet] comsetic non-code changes for the HD feature
[Wallet] ensure CKeyMetadata.hdMasterKeyID will be cleared during SetNull()
[qa] Solve merge conflict of 4324bd237c3147fc153ba5046c211f03e8ac956a
transaction: clarify witness branches
Add test for handling of unconnecting headers
Improve handling of unconnecting headers
qt: periodic translation update
[Wallet] keep HD seed during salvagewallet
[QA] extend wallet-hd test to cover HD metadata
[Wallet] print hd masterkeyid in getwalletinfo
[Wallet] report optional HDKeypath/HDMasterKeyId in validateaddress
[Wallet] extend CKeyMetadata with HD keypath
[rpcwallet] Don't use floating point
Test that unnecessary witnesses can't be used for mempool DoS
gitian: use a wrapped gcc/g++ to avoid the need for a system change
[qa] Add wallet-hd test
build: fix Windows builds without pkg-config
bash-completion: Adapt for 0.12 and 0.13
[qa] test_framework: Add wrapper for stop_node
Rename CTxinWitness -> CTxInWitness
build: require boost for bench
qt: periodic translations update
doc: Mention dbcache increase in release notes
Bump `-dbcache` default to 300MiB
Add warning if -blockminsize is used.
Revert "net: Avoid duplicate getheaders requests." PR #8054
[Doc] Update bips.md for CSV softfork.
[util] CopyrightHolders: Check for untranslated substitution
wallet: Revert input selection post-pruning
Remove -blockminsize option
Remove addScoreTxs()
Exclude witness transactions in addPackageTxs() pre-segwit activation
windows: Add testnet icon for testnet link
qt: Network-specific example address
windows: Add testnet link to installer
qt: Remove client name from debug window
Rename NOP3 to CHECSEQUENCEVERIFY in rpc tests
Rename OP_NOP3 to OP_CHECKSEQUENCEVERIFY
Tests: Increase sync_blocks() timeouts in pruning.py
Favour python over python2 as per PR #7723
qt: Periodic translations update
tx: change slug to `bitcoin.qt-translation-013x`
The bit field is shown only when status is "started"
util: Remove zero-argument versions of LogPrint and error
util: Update tinyformat
CreateNewBlock: add support for size-accounting to addPackageTxs
Do not send witnesses in cmpctblock
Use portable #! in python scripts (/usr/bin/env)
RPC: Hide softfork if timeout is 0
doc: Mention Windows XP end of support in release notes
Do not ask a UI question from bitcoind
check that transactionView->selectionModel()->selectedRows(0) exists
[doc] Add OS X ZMQ requirement to QA readme
[trivial] Add aarch64 to depends .gitignore
Mark my dnsseed as supporting filtering
trivial: capitalize BIP32 in option help
remove unnecessary LOCK(cs_main)
BIP9 parameters for testnet
--- [SEGWIT] begin: deployment ---
[qa] Add GetTransactionSigOpCost unit tests
[qa] script_tests: witness tests can specify tx amount
[qa] p2p segwit tests
[qa] Add rpc test for segwit
[qa] Autogeneration support for witness in script_tests
[qa] Add segwit support to script_tests
[qa] Add transaction tests for segwit
[qa] Witness version 0 signing unit tests
--- [SEGWIT] begin: tests ---
[RPC] signrawtransaction can sign P2WSH
[RPC] Add wallet support for witness transactions (using P2SH)
BIP143: Signing logic
--- [SEGWIT] begin: wallet ---
Do not use compact blocks when segwit is enabled
Add rewind logic to deal with post-fork software updates
[libconsensus] Script verification API with amounts
BIP141: Other consensus critical limits, and BIP145
[RPC] Return witness data in blockchain RPCs
BIP143: Verification logic
Refactor script validation to observe amounts
BIP144: Handshake and relay (receiver side)
BIP141: Commitment structure and deployment
BIP141: Witness program
BIP144: Serialization, hashes, relay (sender side)
--- [SEGWIT] begin: P2P/node/consensus ---
depends: Mention aarch64 as common cross-compile target
qt: Periodic transifex update
doc: Mention Linux ARM builds in release notes
doc: Mention ARM executables in release process
[Qt] fix a bug where the SplashScreen will not be hidden during startup
[travis] Update SDK_URL
[Doc] Update OS X build notes for 10.11 SDK
[qa] pull-tester: Start longest test first
Only pass -lQt5PlatformSupport if >=Qt5.6
Elaborate bucket size math
Use vTxHashes to optimize InitData significantly
Provide a flat list of txid/terators to txn in CTxMemPool
Add BIP 152 to implemented BIPs list
Add reconstruction debug logging
Get our "best three" peers to announce blocks using cmpctblocks
Add ability to fetch CNode by NodeId
Add receiver-side protocol implementation for CMPCTBLOCK stuff
readme: Omit phrasing; 'new'
Add sender-side protocol implementation for CMPCTBLOCK stuff
Add protocol messages for short-ids blocks
Add some blockencodings tests
Add TestMemPoolEntryHelper::FromTx version for CTransaction
Add partial-block block encodings API
Add COMPACTSIZE wrapper similar to VARINT for serialization
Move context-required checks from CheckBlockHeader to Contextual...
If AcceptBlockHeader returns true, pindex will be set.
Stop trimming when mapTx is empty
Remove sipa's old revoked key from verify-commits
[c++11] Use std::unique_ptr for block creation.
Enable mempool consistency checks in unit tests
Stop trimming when mapTx is empty
Use runtime linking of QT libdbus, use custom/temp. SDK URL
Clarify documentation for running a tor node
[qa] fundrawtransaction: Create get_unspent()
[qa] assert 'changePosition out of bounds'
[qa] mininode: fail on send_message instead of silent return
[wallet] tests: Don't use floating point
[depends] OpenSSL 1.0.1k - update config_opts
depends: bump OSX toolchain
Add unit tests for ancestor feerate mining
Use ancestor-feerate based transaction selection for mining
[doc] Add website links to about dialog
Allow disconnecting a netgroup with only one member in eviction.
Add recently accepted blocks and txn to AttemptToEvictConnection.
Do not set extra flags for unfiltered DNS seed results
Increase maximum orphan size to 100,000 bytes.
Treat orphans as implicit inv for parents, discard when parents rejected.
Adds an expiration time for orphan tx.
Update petertodd's testnet seed
Remove bad chain alert partition check
Detect -usehd mismatches when wallet.dat already exists
Randomize name lookup result in ConnectSocketByName
Prevent duplicate connections where one is by name and another by ip
Rework addnode behaviour
[qa] util: Move check_fee_amount out of wallet.py
Introduce REQUIRED_SERVICES constant
Introduce enum ServiceFlags for service flags
Don't require services in -addnode
Only store and connect to NODE_NETWORK nodes
Verify that outbound connections have expected services
Keep addrman's nService bits consistent with outbound observations
Add address label to request payment QR Code (QT)
[trivial] Sync ax_pthread with upstream draft
[trivial] Ignore split-debug.sh
[trivial][doc] Use Debian 8.5 in the gitian-build guide
[gitian] set correct PATH for wrappers
This eliminates the primary leak that causes the orphan map to  always grow to its maximum size.
Track orphan by prev COutPoint rather than prev hash
rename mapAddrCount to mapNetGroupNodes
doc: Mention full UTF-8 support in release notes
test: test utf-8 for labels in wallet
test: add ensure_ascii setting to AuthServiceProxy
Squashed 'src/univalue/' changes from 2740c4f..f32df99
build: add armhf/aarch64 gitian builds
[Docs] Add release notes and bip update for Bip32/HD wallets
depends: only build qt on linux for x86_64/x86
qt: translations update
bulid: fix "make translate" when out-of-tree
Add README for verify-commits
developer notes: updates for C++11
Mention new RPC's in release notes
Add ancestor statistics to mempool entry RPC output
Add test coverage for new RPC calls
Add getmempoolentry RPC call
Add getmempooldescendants RPC call
Add git and github tips and tricks to developer notes
build: Get rid of `CLIENT_DATE`
Update luke-jr's PGP key
gitian: Add --disable-bench to config flags for windows
Tests: Edit bloated varint test and add option for 'barely expensive' tests
test: Add more test vectors for siphash
OSX diskimages need 0775 folder permissions Avoids endless Gatekeeper warnings (#7085)
util: Add ParseUInt32 and ParseUInt64
gitian: create debug packages for linux/windows
gitian: use CONFIG_SITE rather than hijacking the prefix
depends: allow for CONFIG_SITE to be used rather than stealing prefix
Do not shadow local variables
[Bitcoin-Tx] fix missing test fixtures, fix 32bit atoi issue
[Bitcoin-Tx] Add tests for sequence number support
Use C++11 thread-safe static initializers
Use 64-bit SipHash of netgroups in eviction
Support SipHash with arbitrary byte writes
Avoid recalculating vchKeyedNetGroup in eviction logic.
Get rid of CTxMempool::lookup() entirely
[rpc] fundrawtransaction feeRate: Use BTC/kB
Log/report in 10% steps during VerifyDB
[init] Make feefilter option debug option
drop vAddrToSend after sending big addr message
getblocktemplate: Use version/force mutation to support pre-BIP9 clients
getblocktemplate: Explicitly handle the distinction between GBT-affecting softforks vs not
qa/rpc-tests: bip9-softforks: Add tests for getblocktemplate versionbits updates
Implement BIP 9 GBT changes
Improve CWallet API  with new GetAccountPubkey function.
tor: Change auth order to only use HASHEDPASSWORD if -torpassword
qt: translation strings update
Optimization: use usec in expiration and reuse nNow
Optimization: don't check the mempool at all if no mempool req ever
Optimize the relay map to use shared_ptr's
IsInitialBlockDownload: usually avoid locking
Switch CTransaction storage in mempool to std::shared_ptr
Add support for unique_ptr and shared_ptr to memusage
build: add temporary fix for "bad magic number" error in out-of-tree builds
comment nit: miners don't vote
mapNextTx: use pointer as key, simplify value
Catch exceptions from non-canonical encoding and print only to log
Continuing port of java comptool
Stop treating importaddress'ed scripts as change
Improve CWallet API with new AccountMove function.
travis: use out-of-tree build
build: fix out-of-tree 'make deploy' for osx
[depends] expat 2.1.1
[depends] miniupnpc 2.0
[depends] Latest config.guess & config.sub
[depends] ZeroMQ 4.1.4
[depends] ccache 3.2.5
[depends] Freetype 2.6.3
build: a few ugly hacks to get the rpc tests working out-of-tree
build: more out-of-tree fixups
build: out-of-tree fixups
[Wallet] use constant for bip32 hardened key limit
Use std::atomic for fRequestShutdown and fReopenDebugLog
Revert "Include signal.h for sig_atomic_t in WIN32"
FIX: correctly measure size of priority block
Tests: Rework blockstore to avoid re-serialization.
Defer inserting into maprelay until just before relaying.
[Wallet] Add simplest BIP32/deterministic key generation implementation
PR #7772 is not enough to fix the issue with QCompleter, use event filter instead of `connect`
Avoid integer division in the benchmark inner-most loop.
Adding P2SH(p2pkh) script test case
[Doc] Update implemented BIPs list
Reduce unnecessary hashing in signrawtransaction
[Doc] Add benchmarking notes
Don't use assert for catching randomness failures
Always require OS randomness when generating secret keys
Benchmark SipHash
build: Enumerate ctaes rather than globbing
Include signal.h for sig_atomic_t in WIN32
Remove unused local variable shadowing upper local
bench: Added base58 encoding/decoding benchmarks
Tests: add timeout to sync_blocks() and sync_mempools()
Use global ::fRelayTxes instead of CNode one
Do not increment nAttempts by more than one for every Good connection.
Avoid counting failed connect attempts when probably offline.
Do not use mempool for GETDATA for tx accepted after the last mempool req.
Add support for dnsseeds with option to filter by servicebits
Test framework: only cleanup on successful test runs
FIX: Account for txs already added to block in addPriorityTxs
Correct small typo in extract_strings_qt.py
VerifyDB: don't check blocks that have been pruned
Remove keys that are no longer used for merging
Remove pointless warning
Make verify-commits path-independent
Make verify-commits POSIX-compliant
travis: use slim generic image, and some fixups
Add RPC test for the p2p mempool command in conjunction with disabled bloomfilters
Disable the mempool P2P command when bloom filters disabled
Consensus: Decouple from chainparams.o and timedata.o
[qa] test_framework: Append portseed to tmpdir
qt: askpassphrasedialog: Clear pass fields on accept
travis: 'make check' in parallel and verbose
Use Socks5ErrorString() to decode error responses from socks proxy.
Refactor CreateNewBlock to be a method of the BlockAssembler class
Remove non-determinism which is breaking net_tests #8069
doc: 32 and 64 bit packages are seperate
Add test for dbwrapper iterators with same-prefix keys.
Use SipHash-2-4 for address relay selection
Switch CTxMempool::mapTx to use a hash index for txids
Use SipHash-2-4 for CCoinsCache index
Add SipHash-2-4 primitives to hash
Add getmempoolancestors RPC call
Refactor logic for converting mempool entries to JSON
[qa] test_framework: Use different rpc_auth_pair for each node
Make Socks5() InterruptibleRecv() timeout/failures informative.
Acquire lock to check for genesis block.
Move BackupWallet to CWallet::BackupWallet
Move GetAccountBalance from rpcwallet.cpp into CWallet::GetAccountBalance
Report reindexing progress in GUI
Add -reindex-chainstate that does not rebuild block index
Optimize ActivateBestChain for long chains
Switch reindexing to AcceptBlock in-loop and ActivateBestChain afterwards
Make ProcessNewBlock dbp const and update comment
Remove unneeded feerate param from RelayTransaction/AcceptToMemoryPool.
net: Avoid duplicate getheaders requests.
[qa] Reduce node count for some tests
[qa] Remove hardcoded "4 nodes" from test_framework
crypter: add tests for crypter
crypter: shuffle Makefile so that crypto can be used by the wallet
crypter: add a BytesToKey clone to replace the use of openssl
crypter: hook up the new aes cbc classes
crypter: constify encrypt/decrypt
crypter: fix the stored initialization vector size
crypto: add aes cbc tests
crypto: add AES 128/256 CBC classes
Add ctaes-based constant time AES implementation
[Doc] Simplify OS X build notes
rpc: Add `relaytxes` flag to `getnetworkinfo`
net: Add fRelayTxes flag
doc: Remove outdated qt4 install information from README.md
[qa] test_framework: Set wait-timeout for bitcoind procs
[Qt] Disable some menu items during splashscreen/verification state
Qt: Add option to hide the system tray icon
bench: Add crypto hash benchmarks
Squashed 'src/crypto/ctaes/' content from commit cd3c3ac
Adding basic tests for OP_CSV inside of script_tests.json
net: No need to export ConnectNode
net: No need to export DumpBanlist
net: make Ban/Unban/ClearBan functionality consistent
[qa] wallet: Temporarily disable salvagewallet test
[doc] Link to clang-format in the developer notes
[doc] Remove outdated line from listunspent RPC help, fix typo
Increase timeout waiting for pruned blk00000.dat
init: Move berkeleydb version reporting to wallet
[doc] Add basic git squash example
Qt: Sort transactions by date
Qt: Delay user confirmation of send
SOCKS5 connecting and connected messages with -debug=net.
Make failures to connect via Socks5() more informative and less unnecessarily scary.
[qa] Add option --portseed to test_framework
[qa] pull-tester: Run rpc test in parallel
Rename ReconsiderBlock func to reflect real behavior
fReopenDebugLog and fRequestShutdown should be type sig_atomic_t
Autofind rpc tests --srcdir
changing "(tests are) automatically run" to correspond to the earlier instance of "run automatically (on the build server)"
test: Revert fatal-ness of missing python-zmq
[qa] pull-tester: Adjust comment
Notify other serviceQueue thread we are finished to prevent deadlocks.
Reenable multithread scheduler test.
Remove state arg from ReconsiderBlock
[qa] Stop other nodes, even when one fails to stop
[qa] Update README.md
[qa] Refactor test_framework and pull tester
Prevent multiple calls to ExtractDestination
Add more clear interface for CoinControl.h regarding individual feerate
CCoinsViewErrorCatcher raison-d-etre
doc: Fedora build requirements, add gcc-c++ and fix typo
don't run ThreadMessageHandler at lowered priority
net: Drop CNodeRef for AttemptToEvictConnection
net: use the exposed GetNodeSignals() rather than g_signals directly
net: remove unused set
net: don't import std namespace
[qa] Switch to py3
http: use std::move to move HTTPRequest into HTTPWorkItem
http: Change boost::scoped_ptr to std::unique_ptr in HTTPRequest
http: Add log message when work queue is full
http: Do a pending c++11 simplification
doc: Fedora build requirements
util: switch LogPrint and error to variadic templates
[depends] Add -stdlib=libc++ to darwin CXX flags
tinyformat: force USE_VARIADIC_TEMPLATES
[qa] smartfees: Properly use ordered dict
bitcoin-cli.cpp: Use symbolic constant for exit code
build: No need to check for leveldb atomics
Remove obsolete reference to CValidationState from UpdateCoins.
[trivial] Add missing const qualifiers.
More comments on the design of AttemptToEvictConnection.
[doc] Update bitcoin-core GitHub links
[RPC] add feerate option to fundrawtransaction
Test for signing messages
More efficient bitsliced rolling Bloom filter
Benchmark rolling bloom filter
auto_ptr → unique_ptr
chain: define enum used as bit field as uint32_t
doc: Add note about new build/test requirements to release notes
build: update ax_cxx_compile_stdcxx to serial 4
Deprecating the remaining LogPrintf dependencies that were made obsolete in PR #7459.
fix race that could fail to persist a ban
Remove useless argument to AlertNotify.
Only use AddInventoryKnown for transactions
[bitcoin-tx] allow to set nSequence number over the in= command
[RPC] createrawtransaction: add option to set the sequence number per input
depends: use c++11
Create signmessagewithprivkey rpc
test: Add more thorough test for dbwrapper iterators
chain: Add assertion in case of missing records in index db
build: quiet annoying warnings without adding new ones
Log invalid block hash to make debugging easier.
[qa] test_framework: Properly print exceptions and assert empty dict
build: Enable C++11 build, require C++11 compiler
qt: Add transaction hash to details window title
Re-instate TARGET_OS=linux in configure.ac. Removed by 351abf9e035.
travis: temporarily disable qt to avoid timeouts
travis: Don't disable writing ccache for pull-requests
travis: drop MAKEJOBS=2 for windows compilers
depends: enable pre-compiled headers for qt
lock cs_main for chainActive
lock cs_main for State/Misbehaving
qt: Make it possible to show details for multiple transactions
Add tests for CCoins deserialization
CDataStream::ignore Throw exception instead of assert on negative nSize.
Treat overly long scriptPubKeys as unspendable
Introduce constant for maximum CScript length
[contrib] Remove reference to sf and add doc to verify.sh
contrib: remove hardcoded version from verify.sh
doc: Update release process
CAddrMan::Deserialize handle corrupt serializations better.
[qa] mininode: Unfiddle strings into bytes
dbwrapper: Move `HandleError` to `dbwrapper_private`
dbwrapper: Pass parent CDBWrapper into CDBBatch and CDBIterator
dbwrapper: Remove CDBWrapper::GetObfuscateKeyHex
dbwrapper: Remove throw keywords in function signatures
push back getaddednodeinfo dead value
CBase58Data::SetString: cleanse the full vector
Improve worst-case behavior of CScript::FindAndDelete
travis: switch to Trusty
depends: mac deploy Py3 compatibility
[contrib] verify-commits: Add MarcoFalke fingerprint
Move bloom and feerate filtering to just prior to tx sending.
Return mempool queries in dependency order
Handle mempool requests in send loop, subject to trickle
Split up and optimize transaction and block inv queues
net: disable resolving from storage structures
net: resolve outside of storage structures
net: manually resolve dns seed sources
Explicitly pass CChainParams to ConnectBlock
Eliminate TX trickle bypass, sort TX invs for privacy and priority.
Unit test for CScript::FindAndDelete
Replace c-style cast with c++ style static_cast.
Replace memcmp with std::equal in CScript::FindAndDelete
leveldb: integrate leveldb into our buildsystem
Pass CChainParams to DisconnectTip()
Globals: Explicitly pass const CChainParams& to UpdateTip()
Move ui_interface.cpp to libbitcoin_server_a_SOURCES
[ZMQ] append a message sequence number to every ZMQ notification
Add test to check spendable and unspendable UTXO on RPC listunspent
Move method to check matches within arrays on util.py
Speed up getchaintips.
test: Rename wallet.dat to wallet_test.dat
wallet_ismine.h → script/ismine.h
test: Create test fixture for wallet
test: move accounting_tests and rpc_wallet_tests to wallet/test
net: require lookup functions to specify all arguments
fix spelling mistake
add missing newline
fix typo in help text
prevector::swap: fix (unreached) data corruption
test prevector::swap
prevector: destroy elements only via erase()
doc: update release-notes for `gettxoutsetinfo` change
rpc: make sure `gettxoutsetinfo` hash has txids
Break circular dependency main ↔ txdb
crypto: bytes counts are 64 bit
txdb: Add Cursor() method to CCoinsView to iterate over UTXO set
Add lockUnspents option to fundrawtransaction
Add change options to fundrawtransaction
Add strict flag to RPCTypeCheckObj
[ZMQ] refactor message string
[gitian] Move keys to contrib/gitian-keys
[gitian] Add marcofalke-key.pgp
add bip32 pubkey serialization
[test] bctest.py: Revert faa41ee
Change mapRelay to store CTransactions
Avoid unnecessary database access for unknown transactions
rpc-tests: handle KeyError nicely in test_framework.py
getblockchaininfo: make bip9_softforks an object, not an array.
Removed call to `TryCreateDirectory` from `GetDefaultDataDir` in `src/util.cpp`.
Use txid as key in mapAlreadyAskedFor
Add jl2012 public key for gitian build
[Doc] Update gitian build guide to debian 8.4.0
Remove wxwidgets references from NSIS script.
build: Use PACKAGE_TARNAME and new bin names in NSIS script.
build: define base filenames for use elsewhere in the buildsystem
Only send one GetAddr response per connection.
[gitian] hardcode datetime for depends
[doc] gitian: Replace precise with trusty
[qa] py2: Unfiddle strings into bytes explicitly
Clean up lockorder data of destroyed mutexes
[qa] pull-tester: Exit early when no tests are run
[qa] pull-tester: Don't mute zmq ImportError
doc: add arch linux setup and build example [skip ci]
RPC: do not print ping info in getpeerinfo when no ping received yet, fix help
tests: add varints_bitpatterns test
Doc: Update isStandardTx comment
[amount] Add support for negative fee rates
[amount] test negative fee rates and full constructor
Test relay of version 2 transactions
Tests: move get_bip9_status to util.py
Version 2 transactions remain non-standard until CSV activates
Corrected values
Gave miner test values constants for less error-prone values.
tests: Check Content-Type header returned from RPC server
Reduce block timeout to 10 minutes
Self check after the last peer is removed
Track block download times per individual block
Trivial: Globals: Explicitly pass const CChainParams& to ProcessMessage()
[Wallet] slightly refactor GetOldestKeyPoolTime()
Refactor IsRBFOptIn, avoid exception
init: allow shutdown during 'Activating best chain...'
Net: Add IPv6 Link-Local Address Support
UpdateTip: log only one line at most per block
Get rid of expect in script_tests as it's implied by scripterror
Make script_error a mandatory 4th field for script_tests
[doc] Update port in tor.md
[travis] echo $TRAVIS_COMMIT_RANGE
depends: qt/cctools: fix checksum checksum tests
depends: fix "unexpected operator" error during "make download"
depends: fix fallback downloads
depends: create a hostid and buildid and add option for salts
RPC: add versionHex in getblock and getblockheader JSON results; expand data in getblockchaininfo bip9_softforks field.
Use relative paths instead of absolute paths
[Qt] Support for abandoned/abandoning transactions
[qa] Remove misleading "errorString syntax"
[qa] maxblocksinflight: Actually enable test
[qa] httpbasics: Actually test second connection
RPC: fix generatetoaddress failing to parse address and add unit test
build: Remove unnecessary executables from gitian release
[travis] Print the commit which was evaluated
Doc: change Precise to Trusty in gitian-building.md
Add note about using the Qt official binary installer.
[ui] Move InitError, InitWarning, AmountErrMsg
[qa] mininode: Combine struct.pack format strings
devtools: Auto-set branch to merge to in github-merge
[qa] mininode: Catch exceptions in got_data
[qa] rpc-tests: Properly use integers, floats
[qa] Use python2/3 syntax
Reformat version in UpdateTip and other messages
rpc: Register calls where they are defined
Clear the input line after activating autocomplete
[doc] added depends cross compile info
build: python 3 compatibility
[qa] Don't run pruning.py twice
P2P: add maxtimeadjustment command line option
[Qt] remove trailing output-index from transaction-id
[Wallet][RPC] add missing abandon status documentation
[qa] wallet: Wait for reindex to catch up
test_framework: Py3.4 compat: Specify timeout parameter by name
test_framework: Avoid infinite loop in encoding Decimal
test_framework: detect failure of bitcoind startup
[Qt] remove unused formatBuildDate method
[Wallet][RPC] add abandoned status to listtransactions
Added companion removeprunedfunds call.
Add importprunedfunds rpc call
devtools: make github-merge.py use py3
Prevent multiple calls to CWallet::AvailableCoins
[Qt] Debug window: replace "Build date" with "Datadir"
[Wallet] refactor wallet/init interaction
modify release-notes.md and bips.md
Add p2p test for feefilter
Create SingleNodeConnCB class for RPC tests
Implement "feefilter" P2P message.
RPC tests for generatetoaddress
Create generatetoaddress rpc
Test of BIP9 fork activation of mtp, csv, sequence_lock
Correct importaddress help reference to importpubkey
[qa] rpc-test: Normalize assert()
[amount] Preempt issues with negative fee rates
[build-aux] Update Boost & check macros to latest serials
Always disconnect old nodes which request filtered connections.
Add release note documentation
protocol.h/cpp: Removes NetMsgType::ALERT
Formatting
Remove alert keys
Remove `-alerts` option
Update alert notification and GUI
Remove p2p alert handling
Add RPC test for BIP 68/112/113 soft fork.
Policy: allow transaction version 2 relay policy.
Soft fork logic for BIP68
Soft fork logic for BIP113
Add CHECKSEQUENCEVERIFY softfork through BIP9
Improve COutPoint less operator
[Depends] Latest config.guess & config.sub
[Depends] Miniupnpc 1.9.20160209
Tests: fix missing import in mempool_packages
[amount] Make GetFee() monotonic
[qa] Add amount tests
[qt] Remove unneeded "fSendFreeTransactions" check
[qa] Add tests verifychain, lockunspent, getbalance, listsinceblock
Add LockPoints
Tests: make prioritise_transaction.py more robust
RPC test for BIP9 warning logic
Test versionbits deployments
Add testing of ComputeBlockVersion
Softfork status report in RPC
Versionbits tests
BIP9 Implementation
List solvability in listunspent output and improve help
[qt] Remove 0-fee from send dialog
Check all ancestor state in CTxMemPool::check()
Add ancestor feerate index to mempool
Add ancestor tracking to mempool
Remove work limit in UpdateForDescendants()
Rename CTxMemPool::remove -> removeRecursive
CTxMemPool::removeForBlock now uses RemoveStaged
[qa] mininode: Add and use CONSTs
[qa] Move create_tx() to util.py
[qa] wallet: speed up tests
[tests] Extend util_ParseMoney test case
[wallet] Move hardcoded file name out of log messages
qt: Remove reflection from `about` icon
[Wallet] optimize return value of InitLoadWallet()
use cached block hash in blockToJSON()
Add autocomplete to bitcoin-qt's console window.
Move GetTempPath() to testutil.
[Wallet] move "load wallet phase" to CWallet
Add a source file for unit test utils.
Check if zmq is installed in tests, update docs
Make the generate RPC call function for non-regtest
remove unused NOBLKS_VERSION_{START,END} constants
Improve EncodeBase58 performance
Add curl to Gitian setup instrustions
Use CCoinControl selection in CWallet::FundTransaction
No "Unknown command" for getaddr command.
QT: Add 'copy full transaction details' option
[Wallet] move wallet help string creation to CWallet
[travis] Exit early when check-doc.py fails
Delete outdated test-patches reference
[gitian] Default reference_datetime to commit author date
Make sure LogPrintf strings are line-terminated
doc: Add missing credit to 0.12.0 release notes
[depends] Delete unused patches
Add missing sudo entry in gitian VM setup.
Bugfix: gitian: Add curl to packages (now needed for depends)
[doc] Typo fix
Description of RPM directory
All files related to my RPM spec file project in one commit
[depends] builders: No need to set -L and --location for curl
Remove openssl info from init/log and from Qt debug window
mempool: Reduce ERROR logging for mempool rejects
Improving wording related to Boost library requirements [updated]
doc: mention bitcoin-cli -stdin in release notes
rpc: Input-from-stdin mode for bitcoin-cli
doc: include post-mortem fixes to 0.12.0 release notes
Clarify description of blockindex
doc: Add historical release notes for 0.10.4 0.11.2 and 0.12.0
Remove vfReachable and modify IsReachable to only use vfLimited.
Add tags to mempool's mapTx indices
Code style fix.
test: test leading space for ParseHex
wallet: Warn on unexpected EOF while salvaging wallet
Separate CheckLockTime() and CheckSequence() logic
BIP112: Implement CHECKSEQUENCEVERIFY
Add bip68-sequence.py to extended rpc tests
autogen.sh: warn about needing autoconf if autoreconf is not found
fix spelling of advertise in src and doc
LibreSSL doesn't define OPENSSL_VERSION, use LIBRESSL_VERSION_TEXT instead
Bugfix: Only use git for build info if the repository is actually the right one
Don't resend wallet txs that aren't in our own mempool
fix sdaftuar's nits again
test: Script_error checking in script_invalid tests
test: Re-introduce JSON pretty printing in test builder
test: Move non-generated script_invalid test to the correct place
Common argument defaults for NODE_BLOOM stuff and -wallet
Remove internal miner
Bug fix to RPC test
Add RPC test exercising BIP68 (mempool only)
Implement SequenceLocks functions
make clean should clean .a files
Update the wallet best block marker when pruning
Correctly report high-S violations
Travis: Use Blue Box VMs for IPv6 loopback support
Bugfix: depends/Travis: Use --location (follow redirects) and --fail [on HTTP error response] with curl
wallet: Ignore MarkConflict if block hash is not known
tests: Remove May15 test
tests: Make proxy_test work on travis servers without IPv6
Travis: Use curl rather than wget for Mac SDK
depends: Use curl for fetching on Linux
Update nQueuedValidatedHeaders after peer disconnection
Changed getnetworkhps value to double to avoid overflow.
rpc: Add WWW-Authenticate header to 401 response
[rpc-tests] Change solve() to use rehash
Consensus: Decouple pow.cpp from util.h
[doc] Update release-process.md
peers.dat, banlist.dat recreated when missing
ATMP: make nAbsurdFee const
[wallet.h] Remove main.h include
When/if the copyright line does not mention Bitcoin Core developers, add a second line to copyrights in -version, About dialog, and splash screen
Rewrite FormatParagraph to handle newlines within input strings correctly
Move maxTxFee out of mempool
[doxygen] Actually display comment
Rename replacebyfee=opt-in to mempoolreplacement=fee
Eliminate unnecessary call to CheckBlock
build-unix: Update UniValue build conditions
[travis] Only run check-doc.py once
Decide eviction group ties based on time.
Do not absolutely protect local peers from eviction.
Get rid of inaccurate ScriptSigArgsExpected
Blacklist -whitelistalwaysrelay; replaced by -whitelistrelay.
Add link to whitepaper
Improve block validity/ConnectBlock() comments
LDADD dependency order shuffling
Bugfix: Always include univalue in DIST_SUBDIRS
mempool: Replace maxFeeRate of 10000*minRelayTxFee with maxTxFee
Use Debian 8.3 in gitian build guide
Consensus: Remove calls to error() and FormatStateMessage() from some consensus code in main
Simplify check for replacebyfee=opt-in
Add whitelistforcerelay to control forced relaying.
GUI: Disable tab navigation for peers tables.
Add example for displaying additional configure flags
Accept replacebyfee=opt-in for turning on opt-in RBF
Change default configure option --with-system-univalue to "no"
Rename permitrbf to replacebyfee
Bugfix: Include COPYRIGHT_HOLDERS_SUBSTITUTION in Makefile substitutions so it gets passed to extract-strings correctly
Move PACKAGE_URL to configure.ac
doc: add example for building with constrained resources
splashscreen: Resize text to fit exactly
Increase test coverage for addrman and addrinfo
release: add security/symbol checks to gitian
release: always link librt for glibc back-compat builds
release: add check-symbols and check-security make targets
release: add _IO_stdin_used to ignored exports
release: fix parsing of BIND_NOW with older readelf
Minor improvements to the release process
[Qt] Add a new chevron/arrow icon for the console prompt line
net: Hardcoded seeds update January 2016
[devtools] github-merge get toplevel dir without extra whitespace
[init] Clarify permitrbf help message
Add achow101's pgp key
[Qt] keep scroll position in GUI console after changing font size
[Qt] Add option to increase/decrease font size in the console window
devtools: show pull and commit information in github-merge
Add option `-permitrbf` to set transaction replacement policy
[qt] Peertable: Increase SUBVERSION_COLUMN_WIDTH
rpc: update inline comments to refer to new file paths
move rpc* to rpc/
[Qt] rename "amount" to "requested amount" in receive coins table
[qa] Change default block priority size to 0
[RPC, Wallet] Move RPC dispatch table registration to wallet/ code
devtools: replace github-merge with python version
RPC: indicate which transactions are replaceable
Bugfix: Actually use _COPYRIGHT_HOLDERS_SUBSTITUTION everywhere
[qa] wallet: Print maintenance
[travis] Run contrib/devtools/check-doc.py early
gitian: Need `ca-certificates` and `python` for LXC builds
doc: Make networking work inside builder in gitian-building.md
[qt] Windows: Make rpcconsole monospace font larger
Update license year range to 2016
Typo fixes in comments
Remove copyright header from autogenerated chainparamsseeds.h
Update project URL
doc: Add UniValue to build instructions
Build against system UniValue when available
Bugfix: The var is LIBUNIVALUE,not LIBBITCOIN_UNIVALUE
Eliminate race condition in mempool_packages test
release: remove libc6 dependency from the osx signing descriptor
[Wallet] Transaction View: LastMonth calculation fixed
[qt] coincontrol workaround is still needed in qt5.4 (fixed in qt5.5)
[Wallet] Call notification signal when a transaction is abandoned
Add RPC test for abandoned and conflicted transactions.
Add new rpc call: abandontransaction
[wallet] Clarify rpc help message with regard to rounding
MOVEONLY: non-consensus: from pow to chain:
Added help text for chainwork value
doc/bips: Document BIP 125 support
[qa] Test walletpassphrase timeout
Clarify mocktime help message
c++11: add scoped enum fallbacks to CPPFLAGS rather than defining them locally
[RPC] remove the option of having multiple timer interfaces
Make wallet descendant searching more efficient
Eliminate race condition in sendheaders.py test
Add race-condition debugging tool to mininode
[init] Help Msg: Use Params(CBaseChainParams::MAIN)
[init] Add missing help for args
Make sure conflicted wallet tx's update balances
limitfreerelay edge case bugfix:
[contrib] Prepare clang-format-diff for usage
Add clang-format-diff.py from the LLVM svn
c++11: fix libbdb build against libc++ in c++11 mode
c++11: CAccountingEntry must be defined before use in a list
c++11: don't throw from the reverselock destructor
c++11: detect and correct for boost builds with an incompatible abi
Improved readability of sorting for coin selection.
Add missing copyright headers
Bump copyright headers to 2014
[qt] Intro: Display required space
Add sane fallback for fee estimation
Always respect GetRequiredFee for wallet txs
[wallet] Add regression test for vValue sort order
[travis] Fail when documentation is outdated
qt: periodic translations pull from transifex
[Qt] fix coincontrol update issue when deleting a send coin entry
Improve CheckInputs() comment about sig verification
Report non-mandatory script failures correctly
[debian] Update bitcoind manpage description
[debian] Bump manpages and only mention -?
Remove hardcoded fee from CoinControl ToolTip
[gitian] Set reference date to something more recent
Add note to CoinControl Dialog workaround
Removed comment about IsStandard for P2SH scripts
Double semicolon cleanup.
Reduce inefficiency of GetAccountAddress()
[devtools] Use git pretty-format for year parsing
Combine common error strings for different options so translations can be shared and reused
Replace some instances of formatWithUnit with formatHtmlWithUnit
Bugfix: update-translations: Allow numerus translations to omit %n specifier (usually when it only has one possible value)
[qa] Move gen_return_txouts() to util.py
Bugfix: gitian-descriptors: Add missing python-setuptools requirement for OS X (biplist module)
Bugfix: Correct copyright year in Mac DMG background image
Set copyright holders displayed in notices separately from the package name
Travis & gitian-osx: Use depends for ds_store and mac_alias modules
depends: Add mac_alias to depends
depends: Add ds_store to depends
depends: Pass PYTHONPATH along to configure
macdeploy: Use rsvg-convert rather than cairosvg
More complicated package name substitution for Mac deployment
Use createrawtx locktime parm in txn_clone
[walletdb] Add missing LOCK() in Recover() for dummyWallet
Parameterise 2009 in translatable copyright strings
[qa] check if wallet or blochchain maintenance changes the balance
[qa] Cleanup wallet.py test
Add more tests to p2p-fullblocktest
torcontrol debug: Change to a blanket message that covers both cases
Mark blocks with too many sigops as failed
Do not download transactions during inital sync
Removed offline testnet DNSSeed 'alexykot.me'.
Rename OP_NOP2 to OP_CHECKLOCKTIMEVERIFY.
qt5: Use the fixed font the system recommends
Add RPC tests for getblockheader.
Add RPC documentation for getblockheader[chainwork].
Add assert_is_hex_string and assert_is_hash_string to RPC test utils.
test: don't override BITCOIND and BITCOINCLI if they're set
Make max tip age an option instead of chainparam
[RPC-Tests] add option to run rpc test over QT clients
Unify package name to as few places as possible without major changes
Add "NODE_BLOOM" to guiutil so that peers don't get UNKNOWN[4]
Bump copyright headers to 2015
[devtools] Rewrite fix-copyright-headers.py
fix logic for error log
wallet: check if tx scriptPubKey is unspendable
checks for null data transaction before debug.log
Replace trickle nodes with per-node/message Poisson delays
Note that reviewers should mention the commit hash of the commits they reviewed.
Set link from http:// to https://
net: Add and document network messages in protocol.h
[depends] Latest config.guess & config.sub
[wallet] Adjust pruning test
test: Add basic test for `reject` code
Build: Consensus: Make libbitcoinconsensus_la_SOURCES fully dynamic and dependend on both crypto and consensus packages
Build: Libconsensus: Move libconsensus-ready files to the consensus package
Build: Consensus: Move consensus files from common to its own module/package
Added a test for the pruning of extraneous inputs after ApproximateBestSet
Moved set reduction to the end of ApproximateBestSubset to reduce performance impact
net: Account for `sendheaders` `verack` messages
log bytes recv/sent per command
Coinselection prunes extraneous inputs from ApproximateBestSubset
Don't do mempool lookups for "mempool" command without a filter
tests: Disable Tor interaction
test: remove necessity to call create_callback_map
include the chaintip *blockIndex in the SyncTransaction signal
Disconnect on mempool requests from peers when over the upload limit.
[Tests] Refactor some shared functions
Now that 0.12 has been branched, master is 0.12.99
Remove GetMinRelayFee
Use fee deltas for determining mempool acceptance
Update replace-by-fee logic to use fee deltas
[qt] Use tr() instead of _()
Update contrib/devtools/README.md
PartitionCheck: remove useless spaces
TRIVIAL: Chainparams: Remove unused CBaseUnitTestParams
qt: Final translation update before 0.12 fork
rpc: remove cs_main lock from `createrawtransaction`
Squashed 'src/univalue/' changes from 5839ac3..2740c4f
Remove old replace-by-fee tests
Name union to prevent compiler warning
[Qt] add InMempool() info to transaction details
[Tests] Add mempool_limit.py test
Add missing automake package to deb-based UNIX install instructions.
Flush coins cache also after transaction processing
Uncache input txn in utxo cache if a tx is not accepted to mempool
Add CCoinsViewCache::HaveCoinsInCache to check if a tx is cached
Discard txn cache entries that were loaded for removed mempool txn
Get the set of now-uncacheable-txn from CTxMemPool::TrimToSize
Add method to remove a tx from CCoinsViewCache if it is unchanged
-bytespersigop option to additionally limit sigops in transactions we relay and mine
Rewrite CreateNewBlock
Expose FormatStateMessage
Make accessing mempool parents and children public
Add TxPriority class and comparator
Add a score index to the mempool.
Store the total sig op count of a tx.
test: Disable scheduler test manythreads
qt: periodic translations update
qt: use QMetaObject::invokeMethod for cross-thread signaling in clientmodel
Describe maxmempool and mempoolminfee in the getmempoolinfo RPC help.
Constrain rpcport default values to a single location in code
Add rpc test for prioritisetransaction
Add rounding helper function to util.py
rpc: Don't translate warning messages
Change default block priority size to 0
Don't call removeForReorg if DisconnectTip fails
Track coinbase spends in CTxMemPoolEntry
removeForReorg calls once-per-disconnect-> once-per-reorg
Make indentation in ActivateBestChainStep readable
Add failing test checking timelocked-txn removal during reorg
Explicitly set chain limits in replace-by-fee test
HelpMessage: Don't hide -mintxfee behind showDebug
rpcwallet: Clarify what settxfee does
contrib: Del. gitian downloader config and update gitian README
[doc] Minor markdown fixes
[qa] pull-tester: Cleanup (run keypool, tidy stdout)
[Qt] improve minimum absolute fee option - Only display the minimum absolute fee control if CoinControl is enabled
[Qt] make use of the nMinimumTotalFee (absolute) in coincontrols fee calculation
[Qt] use ASYMP_UTF8 (≈) whenever we show a fee that is not absolute
Move fPayAtLeastCustomFee function to CC
When not filtering blocks, getdata sends more in one test
Actually only use filterInventoryKnown with MSG_TX inventory messages.
Only use filterInventoryKnown with MSG_TX inventory messages.
Rename setInventoryKnown filterInventoryKnown
Remove mruset as it is no longer used.
Replace setInventoryKnown with a rolling bloom filter.
torcontrol: only output disconnect if -debug=tor
Move uiInterface.NotifyBlockTip signal above the core/wallet signal - This will keep getbestblockhash more in sync with blocknotify callbacks
[Qt] call GuessVerificationProgress synchronous during core signal, pass double over UI signal
[Qt] reduce cs_main in getVerificationProgress()
[Qt] update block tip (height and date) without locking cs_main, update always (each block)
NotifyBlockTip signal: switch from hash (uint256) to CBlockIndex* - also adds a boolean for indication if the tip update was happening during initial sync - emit notification also during initial sync
Added additional config option for multiple RPC users.
Keep track of explicit wallet conflicts instead of using mempool
Documentation updates for BIP 130
Allow block announcements with headers
[wallet] Add rpc tests to verify fee calculations
Default fPayAtLeastCustomFee to false
Bugfix: Default -uiplatform is not actually the platform this build was compiled on
Move blocksonly parameter interaction to InitParameterInteraction()
[qt] Move GUI related HelpMessage() part downstream
[trivial] Reuse translation and cleanup DEFAULT_* values
Switch to a more efficient rolling Bloom filter
Bugfix: Omit wallet-related options from -help when wallet is not supported
Constrain constant values to a single location in code
[RPC] Add transaction size to JSON output
Print correct minimum mempool size in MB
Switch blocks to a constant-space Merkle root/branch algorithm.
Add merkle.{h,cpp}, generic merkle root/branch algorithm
util: Don't set strMiscWarning on every exception
Initialize logging before we do parameter interaction
Move -blocksonly parameter interaction to the new ParameterInteraction() function
[QT] Call inits parameter interaction before we create the options model
Refactor parameter interaction, call it before AppInit2()
Connect to Tor hidden services by default
Replace scriptnum_test's normative ScriptNum implementation
uint256::GetCheapHash bigendian compatibility
Assert now > 0 in GetTime GetTimeMillis GetTimeMicros
build: Set osx permissions in the dmg to make Gatekeeper happy
Pass reference to estimateSmartFee and cleanup whitespace
Document both the peerbloomfilters and enforcenodebloom options.
Add enforcenodebloom option.
Move bloom filter filtering logic outside of command "switch" (giant if/else).
Squashed 'src/secp256k1/' changes from 2bfb82b..6c527ec
Globals: Remove a bunch of Params() calls from main.cpp:
Limit setAskFor and retire requested entries only when a getdata returns.
prevent peer flooding request queue for an inv
Move time data log print to 'net' category to reduce log noise
Improve log messages for blocks only violations.
Optimisation: Store transaction list order in memory rather than compute it every need
Add relaytxes status to getpeerinfo
Bail early in processing transactions in blocks only mode.
Add missing "blocktime" description to listtransactions help, fix formatting.
http: add Boost 1.49 compatibility
[Qt] simple mempool info in debug window
[doc] Update OS X build notes for new qt5 configure
Change GetPriority calculation.
Modify variable names for entry height and priority
Remove default arguments for CTxMemPoolEntry()
doc: change suite to trusty in gitian-building.md
gitian: make windows build deterministic
qt: Periodic translations update
[qa] python-bitcoinrpc is no longer a subtree
ui: Add "Copy raw transaction data" to transaction list context menu
add powerpc build support for openssl lib
zmq: prepend zmq to debug messages
init: add zmq to debug categories
init: amend ZMQ flag names
[doc][trivial] Remove miniupnpc build notes build-unix
add UI help for -resetguisettings
Save the last unnecessary database read
Alter assumptions in CCoinsViewCache::BatchWrite
[Qt] don't allow to store invalid proxy ports
[qa] Extend README.md
[contrib] Delete test-patches
Bugfix: Use unique autostart filenames on Linux for testnet/regtest
[doc][trivial] Update Debian control description
[doc][trivial] Remove source forge from Debian watch.
[doc] Users now see 'Bitcoin Core' in the OSX bundle
[qa] Split README.md to /qa and /qa/rpc-tests
Implement helper class for CTxMemPoolEntry constructor
Expose RPC calls for estimatesmart functions
add estimateSmartFee to the unit test
EstimateSmart functions consider mempool min fee
Increase success threshold for fee estimation to 95%
Change wallet and GUI code to use new smart fee estimation calls.
Add smart fee estimation functions
gitian: use trusty for building
depends: qt PIDLIST_ABSOLUTE patch
devtools: add libraries for bitcoin-qt to symbol check
Remove unmaintained example test script_test.py
[contrib] Update versionprefix to "bitcoin-core" in verify.sh
[qa] keypool: DRY: Use test framework
[Qt] refactor and optimize proxy settings behavior
Avoid a compile error on hosts with libevent too old for EVENT_LOG_WARN.
Switch to libsecp256k1-based validation for ECDSA
[qa] travis: cover *receivedby* rpcs
Display DEFAULT_WHITELISTALWAYSRELAY in help text
Use DEFAULT_BLOCKSONLY and DEFAULT_WHITELISTALWAYSRELAY constants
Add help text for blocksonly and whitelistalwaysrelay
Add whitelistalwaysrelay option
Do not process tx inv's in blocksonly mode
Add blocksonly mode
add documentation for exluding whitelistes peer from maxuploadtarget
Remove LOCK(cs_main) from decodescript
Add mediantime field to getblock and getblockheader
Document new mediantime field in getblockchaininfo
Clarify nLockTime-by-time comment in CheckFinalTx()
Better error message for fundrawtransaction w/ empty vout
Actually use includeWatching value in fundrawtransaction
Add mediantime field to getblockchaininfo RPC call
[docs] rename reducetraffic.md to reduce-traffic.md
don't enforce maxuploadtargets disconnect for whitelisted peers
Prevector type
[Qt] add startup option to reset Qt settings
add jonasschnellis key to git-verify-commits trusted-keys
update jonasschnellis gpg key
doc: Add non-style-related development guidelines
http: speed up shutdown
Update key.cpp to new secp256k1 API
Squashed 'src/secp256k1/' changes from 22f60a6..2bfb82b
Update libsecp256k1
[doc] Add -maxuploadtarget release notes
[net] Cleanup maxuploadtarget
doc: update docs for Tor listening
doc: Mention Tor listening in release notes
torcontrol improvements and fixes
Add unit test for UpdateCoins
doc: Remove mention of pulltester from README.md
add (max)uploadtarget infos to getnettotals RPC help
[Qt] add shortcurts for debug-/console-window
Make CCoinsViewTest behave like CCoinsViewDB
Clarify 'fee' field in fundrawtransaction help text
Add basic coverage reporting for RPC tests
[doc] Improve lanaguge in reducetraffic.md
[doc] add documentation how to reduce traffic
Chainparams: Explicit CChainParams arg for miner:
Chainparams: Explicit CChainParams arg for main (pre miner):
[gitian] Use vm-builder_0.12.4+bzr494 on Debian
[depends] zeromq 4.0.7
Port test to rpc-test framework
Add test for max replacement limit
Improve RBF replacement criteria
Reject replacements that add new unconfirmed inputs
Prevent low feerate txs from (directly) replacing high feerate txs
Add tests for transaction replacement
Add opt-in full-RBF to mempool
Better error message if Tor version too old
net: Automatically create hidden service, listen on Tor
qt: Periodic translations update
[depends] native ccache 3.2.4
[depends] miniupnpc 1.9.20151026
[depends] Boost 1.59.0
build: Use fPIC rather than fPIE for qt objects.
build: Split hardening/fPIE options out
[trivial] init: Use defaults MIN_RELAY_TX_FEE & TRANSACTION_MAXFEE
[trivial] New DEFAULT_MIN_RELAY_TX_FEE = 1000
transaction_tests: Be more strict checking dust
Always allow getheaders from whitelisted peers
translations: Don't translate markdown or force English grammar
doc: there is no libboost-base-dev, add missing sudo
Benchmark sanity checks and fork checks in ConnectBlock
Use Pieter's signing subkey instead of his primary key
[doc] Remove excessive white space
[trivial] clang-format: Set AlignAfterOpenBracket: false
[qt] Use maxTxFee instead of 10000000
Always flush block and undo when switching to new file
Squashed 'src/leveldb/' changes from 7d41e6f..20ca81f
Update LevelDB
Improving labels for Sent / Received "Bytes"
build: If both Qt4 and Qt5 are installed, use Qt5
BIP70: Chainparams: DRY: Make qt/guiutil.cpp fit BIP70 chain name strings
devtools: Update README.md
build: Improve build instructions
Revert "Revert "Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints""
Restore MedianTimePast for locktime.
[qt] rpcconsole: Scale monospace font to 95%
Clarify what minrelaytxfee does
[qt] Properly display required fee instead of minTxFee
ModifyNewCoins saves database lookups
Make skipping BIP30 check chain agnostic
Skip BIP30 check after BIP34 activation
build: don't distribute tests_config.py
Don't wipe the sigcache in TestBlockValidity
Revert "Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations"
Revert "Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints"
qt: translation update prior to opening 0.12 translations
tests: Initialize networking on windows
Evict sigcache entries that are seen in a block
Make sigcache faster and more efficient
Globals: Explicit Consensus::Params arg for main:
Bugfix: Omit wallet-related options from -help when wallet is disabled
Reject invalid pubkeys when reading ckey items from the wallet.
[qt] Use fixed pitch font for the rpc console
Init: Use DEFAULT_TRANSACTION_MINFEE in help message
Add explicit shared_ptr constructor due to C++11 error
Init: Cleanup error and warning strings
[wallet] Add comments for doxygen
[wallet] Refactor to use new MIN_CHANGE
Lower default policy limits
Make -checkmempool=1 not fail through int32 overflow
Update to my new key
Add Pieter's new PGP key to verify-commits/trusted-keys
unittest: fix test for null tx input
[Trivial] ensure minimal header conventions
constify missing catch cases
Add option for microsecond precision in debug.log
Add RPC test for -maxuploadtarget
Introduce -maxuploadtarget
fix locking issue with new mempool limiting
rpc: Add maxmempool and effective min fee to getmempoolinfo
doc: mention BIP65 softfork in bips.md
Use BOOST_CHECK_MESSAGE() rather than BOOST_CHECK() in alerts_tests.cpp and initialize strMiscWarning before calling PartitionCheck()."
added OS X documentation to doc/init.md
Add BIP65 CHECKLOCKTIMEVERIFY to release notes
Support gathering of code coverage data for RPC tests
Run extended BitcoinJ tests for coverage based on config
Add config option to enable extended RPC tests for code coverage
Require Python for RPC tests, when using lcov
Remove coverage and test related files, when cleaning up
Ignore coverage data related and temporary test files
Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints
Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations
doc: Add developer notes about gitignore
Whitelist commits signed with Pieter's now-revoked key
[trivial] Latest config.guess
[trivial] rpcnet: fix typo
leveldbwrapper file rename to dbwrapper.*
leveldbwrapper symbol rename: Remove "Level" from class, etc. names
leveldbwrapper: Remove unused .Prev(), .SeekToLast() methods
Set TCP_NODELAY on P2P sockets.
[trivial] Rewrite help text for feature enabled by default
devtools: Add security-check.py
*: alias -h for --help
Support -checkmempool=N, which runs checks on average once every N transactions
http: Restrict maximum size of request line + headers
Chainparams: Translations: DRY: options and error strings
Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir)
[rpc-tests] Check return code
[rpc-tests] fundrawtransaction: Update fee after minRelayTxFee increase
Do not allow blockfile pruning during reindex.
Added fPowNoRetargeting field to Consensus::Params that disables nBits recalculation.
build: make sure OpenSSL heeds noexecstack
Mention PHP bindings to libbitcoinconsensus
Add DERSIG transaction test cases
Correct spelling mistakes in doc folder
Make fee aware of min relay in pruning.py RPC test
temporarily comment out rpcbind.py
[trivial] Update contrib/devtools/README.md
[devtools] add clang-format.py
script:  Remove magic numbers
Add historical release notes for October 2015 bugfix releases
Undo GetMinFee-requires-extra-call-to-hit-0
doc: add comment explaining initial header request
[doc] Cleanup release-process documentation
trivial: use constants for db keys
build: univalue subdir build fixups
Drop minRelayTxFee to 1000
Add reasonable test case for mempool trimming
Only call TrimToSize once per reorg/blocks disconnect
Implement on-the-fly mempool size limitation.
Print mempool size in KB when adding txn
Add CFeeRate += operator
Track (and define) ::minRelayTxFee in CTxMemPool
Add Mempool Expire function to remove old transactions
Reverse the sort on the mempool's feerate index
Update bluematt-key, the old one is long-since revoked
zmq: point API link to 4.0 as that is what we are conforming to [Trivial]
Updated Prab's PGP Key -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256
Create btcdrak-key.pgp
[depends] Latest config.guess and config.sub
tests: update transaction_tests for new dust threshold
Clarification of unit test build instructions.
Change URLs to https in debian/control
Update debian/changelog and slight tweak to debian/control
net: Disable upnp by default
Refer to obfuscate_key via pointer in peripheral CLevelDB classes
Add tests for gettxoutsetinfo, CLevelDBBatch, CLevelDBIterator
Bump minrelaytxfee default
[doc] trivial: fix markdown syntax in qa/rpc-tests/README.md
[doc] trivial: developer-notes.md covers more than just coding standards
[trivial] Make optimize-pngs.py also cover share/pixmaps
[trivial] Remove obsolete share/qt/make_windows_icon.sh
Update miniupnpc to 1.9.20151008
build: match upstream build change
Squashed 'src/univalue/' changes from 87d9045..5839ac3
Handle obfuscation in CLevelDBIterator
Encapsulate CLevelDB iterators cleanly
Add BIP65 to getblockchaininfo softforks list
Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork
Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic
build: Make use of ZMQ_CFLAGS
Ignore bench_bitcoin binary.
Add chainstate obfuscation to avoid spurious antivirus detection
Test LowS in standardness, removes nuisance malleability vector.
zmq: update docs to reflect feature is compiled in automatically if possible
Document pull-req #6424 in release-notes
The Bitcoin Core project is releasing Bitcoin Core, not Bitcoin.
tests-config.sh is superseded by tests_config.py
Changed run-bitcoind-for-test.sh.in to non-executable mode. Consistency with other *.in input files.
Changed rpc-tests.sh to rpc-tests.py in README.md
build: Remove unnecessary chmods after #6616
qa/pull-tester/rpc-tests.py: chmod 0755
autotools: move checking for zmq library to common area in configure.ac
banlist (bugfix): allow CNode::SweepBanned() to run on interval
banlist: add more banlist infos to log / add GUI signal
banlist: better handling of banlist in StartNode()
banlist: update set dirty to be more fine grained
Rewrite help texts for features enabled by default.
wallet: Expose GUI labels in RPC
Bugfix: If genproclimit is omitted to RPC setgenerate, don't change it; also show correct default in getmininginfo
Bugfix: Describe dblogsize option correctly (it refers to the wallet database, not memory pool)
Bugfix: RPC: blockchain: Display correct defaults in help for verifychain method
Migrated rpc-tests.sh to all python rpc-tests.py
build: disable -Wself-assign
Accept any sequence of PUSHDATAs in OP_RETURN outputs
Add IsPushOnly(const_iterator pc)
Make TX_SCRIPTHASH clear vSolutionsRet first
travis: install a recent libzmq and pyzmq for tests
doc: no longer require use of openssl in OpenBSD build guide
build: remove libressl check
remove $(@F) and subdirs from univalue make
[travis] add zmq python module
[Univalue] add univalue over subtree
Squashed 'src/univalue/' content from commit 87d9045
remove univalue, prepare for subtree
Changed logging to make -logtimestamps to work also for -printtoconsole
doc: Change #bitcoin-dev IRC channel to #bitcoin-core-dev
Support very-fast-running benchmarks
Simple benchmarking framework
Add PR title prefix for trivial changes [skip ci]
[Trivial] start the help texts with lowercase
Bugfix: Allow mining on top of old tip blocks for testnet (fixes testnet-in-a-box use case)
zmq: update and cleanup build-unix, release-notes, and zmq docs
zmq: require version 4.x or newer of libzmq
qt: periodic translations update
http: Force-exit event loop after predefined time
http: Wait for worker threads to exit
Make HTTP server shutdown more graceful
doc: Add build guide for OpenBSD 5.7
build: Remove dependency of bitcoin-cli on secp256k1
timedata: Prevent warning overkill
Add CONTRIBUTING.md
Update debian/copyright format version to 1.0
Use standard license names in contrib/debian/copyright
Creates unittests for addrman, makes addrman testable. Adds several unittests for addrman to verify it works as expected. Makes small modifications to addrman to allow deterministic and targeted tests.
Add java-libbitcoinconsensus as example to documentation
Add test showing bug in mempool packages
SanitizeString: Allow hypen char
Rename rpcconsole.ui => debugwindow.ui
[Qt] Raise debug window when requested
Avoid duplicate CheckBlock checks
Do not store Merkle branches in the wallet.
[trivial] Minor format fixes
Make RPC tests cope with server-side timeout between requests
rpc: Split option -rpctimeout into -rpcservertimeout and -rpcclienttimeout
http: Disable libevent debug logging, if not explicitly enabled
[QT] dump banlist to disk in case of ban/unban over QT
Track transaction packages in CTxMemPoolEntry
TxMemPool: Change mapTx to a boost::multi_index_container
init: Ignore SIGPIPE
[QT] fix thin space word wrap line brake issue
devtools: don't push if signing fails in github-merge
Clarifying offline build process using gbuild --url and noting it is not done automatically.
enable zmq-test in rpc-tests.sh
Temporarily disable ZMQ tests in bitcoin test suite
fix rpc-tests.sh
depends: fix platform specific packages variable
Drop "with minimal dependencies" from description
Split bitcoin-tx into its own package
use CBlockIndex* insted of uint256 for UpdatedBlockTip signal
[QA] adabt QT_NO_KEYWORDS for QT ban implementation
[QA] fix netbase tests because of new CSubNet::ToString() output
[Qt] call DumpBanlist() when baning unbaning nodes
[Qt] reenabling hotkeys for ban context menu, use different words
[Qt] adapt QT ban option to banlist.dat changes
[Qt] add sorting for bantable
[Qt] bantable polish
[Qt] simplify ban list signal handling
[Qt] remove unused timer-code from banlistmodel.cpp
[Qt] polish ban table
net: use CIDR notation in CSubNet::ToString()
[Qt] bantable overhaul
[Qt] bantable fix timestamp 64bit issue
[Qt] banlist, UI optimizing and better signal handling
[Qt] add context menu with unban option to ban table
[Qt] add ui signal for banlist changes
[Qt] add banlist table below peers table
[Qt] add ban functions to peers window
configure.ac: Revert autotools-auto-updated 2.69 autoconf requirement
[uacomment] Sanitize per BIP-0014
QA: Add ZeroMQ RPC test
Add ZeroMQ support. Notify blocks and transactions via ZeroMQ
Depends: Add ZeroMQ package
Add UpdatedBlockTip signal to CMainSignals and CValidationInterface
Update contrib/debian/copyright
Update trusted-git-root to the most recent unsigned commit
[trivial] Remove obsolete pixmaps
[qt] [trivial] share/qt/make_spinner.py => src/qt/res/movies/makespinner.sh
[trivial] init cleanup
[Trivial] [logging] Rm extraneous cleansubver in serveral debug messages.
doc: update release-notes and bips.md for BIP111
Prune the -prune help to reflect that the wallet is no longer disabled.
Simplify logic of REST request suffix parsing.
[docs] add libevent dependency to build-osx.md
Enable wallet key imports without rescan in pruned mode.
[doc] [tor] Clarify when to use bind
Add NODE_BLOOM service bit and bump protocol version
Disallow duplicate windows.
net: correctly initialize nMinPingUsecTime
[release notes] mention apache reverse proxy to re-enable SSL
Revert "rpc-tests: re-enable rpc-tests for Windows"
doc: update deps in build-unix.md after libevent
Report minimum ping time in getpeerinfo
Replace boost::reverse_lock with our own.
Update RPC generate help for numblocks to include required
In (strCommand == "tx"), return if AlreadyHave()
[doc] Clarify authors in assets-attribution.md
Move windows socket init to utility function
libevent: Windows reuseaddr workaround in depends
Document options for new HTTP/RPC server in --help
Implement RPCTimerHandler for Qt RPC console
doc: mention SSL support dropped for RPC in release notes
evhttpd implementation
Update gitian build guide for Debian 8.1
added org.bitcoin.bitcoind.plist for launchd (OS X)
tests: GET requests cannot have request body, use POST in rest.py
tests: fix qt payment test
build: build-system changes for libevent
libevent: add depends
Remove rpc_boostasiotocnetaddr test
qa: Remove -rpckeepalive tests from httpbasics
doc: remove documentation for rpcssl
depends: bump ccache to 3.2.3
depends: bump miniupnpc to 1.9.20150730
travis: bump wine to 1.7
Update build-unix.md
travis: for travis generating an extra build
Use network group instead of CNetAddr in final pass to select node to disconnect
Include bitcoin-tx binary on Debian/Ubuntu
Make sure LogPrint strings are line-terminated
Enable python tests for Native Windows
Improve addrman Select() performance when buckets are nearly empty
Acquire cs_vNodes before changing refrence counts
CNodeRef copy constructor and assignment operator
rpc-tests: re-enable rpc-tests for Windows
net: Set SO_REUSEADDR for Windows too
add support for miniupnpc api version 14
Return false early if vEvictionCandidates is empty
Better support for nodes with non-standard nMaxConnections
RAII wrapper for CNode*
Add comments to AttemptToEvictConnection
Remove redundant whiteconnections option
Prefer to disconnect peers in favor of whitelisted peers
AttemptToEvictConnection
Record nMinPingUsecTime
Refactor: Move failure conditions to the top of AcceptConnection
Refactor: Bail early in AcceptConnection
Refactor: AcceptConnection
Add p2p-fullblocktest.py
Stop parsing JSON after first finished construct.
add unit test for CNetAddr::GetGroup.
consensus: cache the openssl EC_GROUP to avoid a race condition for each CECKey instantiation
Make sure we re-acquire lock if a task throws
Add limitedmap test
Disallow unlimited limited maps
Make limited map actually respect max size
Implement REST mempool API, add test and documentation.
Add missing files to files.md
Handle leveldb::DestroyDB() errors on wipe failure
Move mempool rejections to new debug category
Add information to errors in ConnectBlock, CheckBlock
Remove most logging from transaction validation
Add function to convert CValidationState to a human-readable message
Introduce REJECT_INTERNAL codes for local AcceptToMempool errors
Do not store more than 200 timedata samples.
Correct a possibly intentional pun that is nevertheless hard to read: "two times of nLockTime." What is meant is that there are two kinds, or categories of nLockTime.
typofixes (found by misspell_fixer)
Reformat validateaddress help, add missing iswatchonly description.
Add optional locktime to createrawtransaction
Update init doc to mention cookie authentication
[Qt] add verifySize() function to PaymentServer
[Qt] minor optimisations in peertablemodel
SQUASH "Implement watchonly support in fundrawtransaction"
SQUASH "Add have-pubkey distinction to ISMINE flags"
Add some const declarations where they are appropriate.
Revert "Revert "Assert on probable deadlocks if the second lock isnt try_lock""
locks: don't lock cs_wallet before making rpc calls
[Qt] show client user agent in debug window
Add support for data-based outputs (OP_RETURN) to bitcoin-tx.
Add OP_RETURN support in createrawtransaction RPC call, add tests.
Revert "Assert on probable deadlocks if the second lock isnt try_lock"
Add debug message to CValidationState for optional extra information
Use unique name for AlertNotify tempfile
Add assertion and cast before sending reject code
Add v0.11.0 release notes
limit total length of user agent comments
[Qt] replace wifi icon with network symbol
[QT] cleanup icons
Add note on relative paths, improve formatting
Rationalize currency unit to "BTC"
Consolidate individual references to the current maximum peer connection value of 125 into a single constant declaration.
Clean up tx prioritization when conflict mined
Give a better error message if system clock is bad
Removed contrib/bitrpc
Make sure LogPrintf strings are line-terminated
build: make sure pkg-config checks are guarded by an m4_ifdef
build: fix libressl detection
Move recentRejects initialization to top of InitBlockIndex
implement uacomment config parameter which can add comments to user agent as per BIP-0014
qt: Introduce PlatformStyle
Resolve issue 3166. These changes decode valid SIGHASH types on signatures in assembly (asm) representations of scriptSig scripts. This squashed commit incorporates substantial helpful feedback from jtimon, laanwj, and sipa.
Clean up chainparams some more.
Delay initial pruning until after wallet init
Keep track of recently rejected transactions
chainparams: don't use std namespace
chainparams: move CCheckpointData into chainparams.h
Revert "Cache transaction validation successes"
Avoid leaking file descriptors in RegisterLoad
qt: use CHashWriter also in SignVerifyMessageDialog
Only use randomly created nonces in CRollingBloomFilter.
Make CRollingBloomFilter set nTweak for you
Reuse vector hashing code for uint256
Add uint256 support to CRollingBloomFilter
Unit test doublespends in new blocks
Cache transaction validation successes
doc: mention change to option parsing behavior in release notes
doc: Mention RPC strings for monetary amounts in release notes
[QA] add testcases for parsing strings as values
rpc: Accept strings in AmountFromValue
fixup: qt 5.5 snuck in another module that needs path hand-holding
depends: make more qt flags explicit
don't try to decode invalid encoded ext keys
[Qt] allow users to set -onion via GUI
depends: bump to qt 5.5
depends: split qt config options to separate lines
build: fix building against qt5.4/5.5
Includes: Cleanup around net main and wallet
TRIVIAL: Missing includes
extend bip32 tests to cover Base58c/CExtKey decode
fix and extend CBitcoinExtKeyBase template
Assert on probable deadlocks if the second lock isnt try_lock
Handle no chain tip available in InvalidChainFound()
Don't share objects between TestInstances
Implement watchonly support in fundrawtransaction
Add logic to track pubkeys as watch-only, not just scripts
Add have-pubkey distinction to ISMINE flags
Update importaddress help to push its use to script-only
Add importpubkey method to import a watch-only pubkey
Add p2sh option to importaddress to import redeemScripts
Split up importaddress into helper functions
Also remove pay-2-pubkey from watch when adding a priv key
Reformat help text of estimatefee and estimatepriority to match other help texts.
Separate core memory usage computation in core_memusage.h
Documenting pruned, pruneheight and softforks in getblockchaininfo
Exempt unspendable transaction outputs from dust checks
Include pruned state in chaininfo.json
util: use locale-independent parsing in ParseDouble
univalue: Avoid unnecessary roundtrip through double for numbers
rpc: Make ValueFromAmount always return 8 decimals
[Qt] remove std namespace polution from code
remove unused inv from ConnectTip()
configure --enable-debug changes
Create centaur1-key.pgp
qt: update forgotten emit to Q_EMIT in macdockiconhandler.mm
doc: Add NBitcoin to bitcoinconsensus examples
Remove bash test note from rpc-tests readme
doc: Remove recommendation to add old repos for libd4.8*
qt: define QT_NO_KEYWORDS
Add description for bitcoinconsensus_ERR_OK
Updated URL location of netinstall for Debian
openssl: avoid config file load/race
doc: add documentation for shared library libbitcoinconsensus
doc: mention RPC random cookie authentication in release notes
rpc: Implement random-cookie based authentication
tests: Remove old sh-based test framework
Chainparams: CTestNetParams and CRegTestParams extend directly from CChainParams
Chainparams: Introduce CreateGenesisBlock() static function
Eliminate signed/unsigned comparison warning
Add autogen.sh to source tarball.
[QA] remove rawtransactions.py from the extended test list
[QA] fix possible reorg issue in rawtransaction.py/fundrawtransaction.py RPC test
Update Linearize tool to support Windows paths
Test whether created sockets are select()able
Implement accurate memory accounting for mempool
rpc: Accept scientific notation for monetary amounts in JSON
rpc: Remove chain-specific RequireRPCPassword
Add BITCOIND_SIGTERM_TIMEOUT to OpenRC init scripts
[bitcoin-cli] improve error output
[Qt] constify foreach uses where possible
Buffer log messages and explicitly open logs
CLTV: Add more tests to improve coverage
qt: Force TLS1.0+ for SSL connections
[REST] add JSON support for /rest/headers/
depends: bump qrencode to 3.4.4
depends: bump protobuf to 2.6.1
depends: bump ccache to 3.2.2
depends: bump miniupnpc to 1.9.20150609
depends: bump boost to 1.58.0
Remove ChainParams::DefaultMinerThreads
acceptnonstdtxn option to skip (most) "non-standard transaction" checks, for testnet/regtest only
assets-attribution: Update typicons to MIT license
tests: fix txn_clone.py (retry)
Move recently introduced CTransAction::IsEquivalentTo to CWalletTx
Adding CSubNet constructor over a single CNetAddr
tests: fix txn_clone.py
use CBanEntry as object container for banned nodes
CAddrDB/CBanDB: change filesize variables from int to uint64_t
banlist.dat: store banlist on disk
When processing RPC commands during warmup phase, parse the request object before returning an error so that id value can be used in the response.
Show softfork status in getblockchaininfo
Use real number of cores for default -par, ignore virtual cores
miner: rename UpdateRequestCount signal to ResetRequestCount
add CReserveScript to allow modular script keeping/returning
Add absurdly high fee message to validation state (for RPC propagation)
fix GetScriptForMining() CReserveKey::keepKey() issue
detach wallet from miner
Ideal release process for Windows detached signing
gitian: make the windows signing process match OSX
add tests for the decodescript rpc. add mention of the rpc regression tests to the testing seciton of the main readme.
Replace sleep with syncing using pings
Ignore whitelisting during IBD for unrequested blocks.
Policy: MOVEONLY: 3 functions to policy.o:
Policy: MOVEONLY: Create policy/policy.h with some constants
UniValue: don't escape solidus, keep espacing of reverse solidus
Hardcoded seeds update June 2015
contrib: Add port parsing to makeseeds.py
contrib: Improvements to hardcoded seeds scripts
Testing infrastructure: mocktime fixes
doc: update mailing list address
Enable CHECKLOCKTIMEVERIFY as a standard script verify flag
Replace NOP2 with CHECKLOCKTIMEVERIFY (BIP65)
Take the training wheels off anti-fee-sniping
build: comparison tool NPE fix
build: Remove -DBOOST_SPIRIT_THREADSAFE
test: Move reindex test to standard tests
Bugfix: Don't check the genesis block header before accepting it
fix lock issue for QT node diconnect and RPC disconnectnode
setban: add IPv6 tests
fix missing lock in CNode::ClearBanned()
build: comparison tool swap
gitian: add a gitian-win-signer descriptor
Adding pgp public key for cdecker as requested by @jonasschnelli in bitcoin/gitian.sigs#182
add RPC tests for setban & disconnectnode
setban: add RPCErrorCode
fix CSubNet comparison operator
setban: rewrite to UniValue, allow absolute bantime
rename json field "bannedtill" to "banned_until"
[RPC] extend setban to allow subnets
[net] remove unused return type bool from CNode::Ban()
[QA] add setban/listbanned/clearbanned tests
[RPC] add setban/listbanned/clearbanned RPC commands
[net] extend core functionallity for ban/unban/listban
Enable block relay when pruning
Do not inv old or missing blocks when pruning
fix crash on shutdown when e.g. changing -txindex and abort action
New RPC command disconnectnode
rpc: make `gettxoutsettinfo` run lock-free
locking: add a quick example of GUARDED_BY
locking: fix a few small issues uncovered by -Wthread-safety
locking: teach Clang's -Wthread-safety to cope with our scoped lock macros
remove berkeley-db4 workaround
remove using namespace std from addrman.cpp
make CAddrMan::size() return the correct type of size_t
tests: Extend RPC proxy tests
Add option `-alerts` to opt out of alert system
doc: Add section on plurals to strings policy
Added -whiteconnections=<n> option
depends: fix Boost 1.55 build on GCC 5
Improve proxy initialization
Add paytxfee to getwalletinfo, warnings to getnetworkinfo
fundrawtransaction tests
Add fundrawtransaction RPC method
Add FundTransaction method to wallet
Small tweaks to CCoinControl for fundrawtransaction
Add DummySignatureCreator which just creates zeroed sigs
[Qt] deselect peer when switching away from peers tab in RPC console
[Qt] replace Boost foreach with Qt version peertablemodel.cpp
[Qt] extend rpc console peers tab
gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures
Consensus: Refactor: Separate Consensus::CheckTxInputs and GetSpendHeight in CheckInputs
Consensus: Separate CheckIndexAgainstCheckpoint() from ContextualCheckBlockHeader
Remove translation for -help-debug options
Return all available information via validateaddress
Use best header chain timestamps to detect partitioning
gitian-downloader: Add prab's key
gitian: Add petertodd to gitian download scripts
Add an alternate location of endian.h header
configure: Detect (and reject) LibreSSL
fix util_tests.cpp clang warnings
Changes necessary now that zero values accepted in AmountFromValue
Get rid of fPlus argument to FormatMoney
Don't go through double in AmountFromValue and ValueFromAmount
Add getblockheader RPC call
Bugfix: Correct links for Xcode download
fix rpcmining/getblocktemplate univalue transition logic error
use const references where appropriate
Advance pindexLastCommonBlock for blocks in chainActive
univalue: add type check unit tests
univalue: add strict type checking
util: Add ParseInt64 and ParseDouble functions
Simplify RPCclient, adapt json_parse_error test
Add erkmos OpenPGP key to gitian downloader keyset
fix univalue json parse tests
fix missing univalue types during constructing
fix rpc batching univalue issue
Remove JSON Spirit wrapper, remove JSON Spirit leftovers
remove JSON Spirit UniValue wrapper
fix rpc unit test, plain numbers are not JSON compatible object
univalue: correct bool support
univalue: add support for real, fix percision and make it json_spirit compatible
special threatment for null,true,false because they are non valid json
expicit set UniValue type to avoid empty values
extend conversion to UniValue
Convert tree to using univalue. Eliminate all json_spirit uses.
UniValue: export NullUniValue global constant
UniValue: prefer .size() to .count(), to harmonize w/ existing tree
Prune: Support noncontiguous block files
Ignore unrequested blocks too far ahead of tip
json: fail read_string if string contains trailing garbage
OSX: use "Bitcoin Core" as Bundle Display Name
Explicitly set tx.nVersion for the genesis block and mining tests
P2P regression test for new AcceptBlock behavior
Be stricter in processing unrequested blocks
bump version in clientversion.h
gitian: Bump cache dir for current master
gitian: bump faketime to something more recent
osx: set min version to 10.7 for 0.11+
[Qt] disconnect peers from peers tab via context menu
[OSX] revert renaming of Bitcoin-Qt.app
[init] add -blockversion help and extend -upnp help
build: disable optional use of gmp in internal secp256k1 build
Now that 0.11 has been branched, master is 0.11.99
[net, trivial] remove using namespace std pollution in netbase.cpp
[net, trivial] explicitly use std::string for FindNode
Remove P2SH coinbase flag, no longer interesting
doc: Add to 0.11 release notes
[squashme] improve/corrects prune mode detection test for required wallet rescans
[RPC] disable import functions in pruned mode
[autoprune] allow wallet in pruned mode
Improve comment explaining purpose of MAX_MONEY constant
Prevent block.nTime from decreasing
[REST] remove json input for getutxos, limit to query max. 15 outpoints
Eliminate compiler warning due to unused variable
Ignore getheaders requests when not synced.
Chainparams: Explicit CMessageHeader::MessageStartChars to functions in main:
rest.cpp: strip whitespace
gitian-downloader: Update luke-jr's key
Autoprune release notes included
qt: Periodic translation update
doc: Add preliminary changelog for 0.11 to release notes
Remove duplicate chainparams.h include from alert_tests
Simplify code for CSubnet
doc: Add historical release notes 0.9.5
doc: add translation strings policy
Catch errors on datadir lock and pidfile delete
Update Windows resource files (and add one for bitcoin-tx)
rpc-tests: remove python-bitcoinrpc directory
contrib/linearize: Support linearization of testnet blocks
Update help message to match the #4219 change
Update documentation to match the #4219 change
Make command line option to show all debugging consistent with similar options
[QT] mainwindow toolbar must not be movable
pull-tester/rpc-tests.sh: disable script_test.py test
[QT] overviewpage: make sure warning icons gets colored
qt: fix unused function warning in scicon.cpp
build: Cope with spaces in filenames when creating/applying OSX sigs
[Mac only] rename Bitcoin-Qt.app to "Bitcoin Core.app"
doc: Add historical release notes for 0.10.1 0.10.2 0.9.4
[Docs] fix and improve REST documentation
pull-tester/rpc-tests.sh: allow passing throug of arguments
update rpc-tests readme.md
extend rpc-tests.sh control script with non-travis tests
[QA] restructure rpc tests directory
Parameter interaction: disable upnp if -proxy set
Remove unused code from wallet and validation interface
Change default nTxConfirmTarget to 2
wallet: Introduce constant for `-txconfirmtarget` default
More robust CScheduler unit test
Missing from Documentation Index
Chainparams: Refactor: Decouple main::GetBlockValue() from Params() [renamed GetBlockSubsidy]
Consensus: MOVEONLY: Move CValidationState from main consensus/validation
Consensus: Refactor: Decouple CValidationState from main::AbortNode()
qt: translations update
doc: Documentation in Markdown for Depends Dir
Remove assertion from ~LockedPageManager
Alert if it is very likely we are getting a bad chain
Use CScheduler for net's DumpAddresses
Create a scheduler thread for lightweight tasks
CScheduler unit test
scheduler: fix with boost <= 1.50
build: make libboost_chrono mandatory
CScheduler class for lightweight task scheduling
[Qt] add defaultConfirmTarget constant to sendcoinsdialog
minor: remove unneeded bool in CWalletDB::Recover
depends: sanity-check sources and cached builds
Comment edits and cleanup
Alphabetic order in makefile
fix header include groups
remove unneeded incude of wallet/db.h from rpcmining.cpp
remove unused classes from db.h
fix IDE/compiler warning "extra ';'" in validationinterface.h
[Trivial] Update COPYING
Trivial: Corrected owner of DNS seeder
[init] better message when no wallet support is compiled in
Capitalized P2P
[Trivial] Cryptocurrency is one word
Typo in GetRawMemPool RPC method help: "]" --> "}"
addrman: update comments
Reduce checkpoints' effect on consensus.
Increase timeouts in pruning.py and modify warning language.
[QT] don't colorize icons on win and mac
Create new BlockPolicyEstimator for fee estimates
Clean up parsing of bool command line args
Relocate calls to CheckDiskSpace
[QT] use alert icon with tooltip insted of "(out of sync)" text
[QT] remove frame to avoid double-frame situation in sendcoinsentry.ui
Avoid crash on start in TestBlockValidity with gen=1.
Write block index more frequently than cache flushes
Cache tweak and logging improvements
Use accurate memory for flushing decisions
Keep track of memory usage in CCoinsViewCache
Add memusage.h
Add txn_clone.py test
appropriate response when trying to get a block in pruned mode
[squashme] simplify SetupEnvironment() (by dexX7)
Move LOCKTIME_THRESHOLD to src/script/script.h
Make CScriptNum() take nMaxNumSize as an argument
re-add -reindex help message
[QA] add multisig rpc tests
chaincodes: abstract away more chaincode behavior [squashme] replace struct CCainCode with a typedef uint256 ChainCode
Add more script edge condition tests.
[QT] change transaction amount and height in overview page
Chainparams: Refactor: Decouple IsSuperMajority from Params()
QA: add RPC tests for error reporting of "signrawtransaction"
RPC: show script verification errors in "signrawtransaction" result
qt: update translations from Transifex - first run for 0.11
build: quiet the exe-installer output
Show an init message while activating best chain
travis: don't spew fixme messages when running wine tests
build: if there's no recent git tag, don't spew error messages
Update key.cpp to use new libsecp256k1
qt: fix numerusform in English translation
qt: English translation update before enabling translation for 0.11
Clean up change computation in CreateTransaction.
Non-grammatical language improvements
Abstract chaincodes into CChainCode
change AC_PACKAGE_BUGREPORT from info@bitcoin.org to github issue tracker URL
RPC test for "#5418 Report missing inputs in sendrawtransaction"
Change transifex slug to `translation-011x`
don't imbue boost::filesystem::path with locale "C" on windows
Bugfix: Grammar fixes
checkpoints: move the checkpoints enable boolean into main
checkpoints: Decouple checkpoints from Params
checkpoints: make checkpoints a member of CChainParams
checkpoints: store mapCheckpoints in CCheckpointData rather than a pointer
Don't run invalidblockrequest.py in travis until race condition is fixed
Trivial: useless cast (ptime)(I'm ptime)
Better mruset unit test
Use ring buffer of set iterators instead of deque of copies in mruset
Replace mruset setAddrKnown with CRollingBloomFilter addrKnown
Rolling bloom filter class
add jonasschnellis dns seeder
qt: disable qt tests when one of the checks for the gui fails
DragonFlyBSD thread renaming.
Add some travis debugging for python scripts
Add script manipulation tools for use in mininode testing framework
Add comparison tool test runner, built on mininode
Python p2p testing framework
wallet: fix boost::get usage with boost 1.58
Report missing inputs in sendrawtransaction
[Qt] add defaultConfirmTarget constant to sendcoinsdialog
use const reference as param in ConnectThroughProxy/Socks5
qt: translation update
Add additional script edge condition tests.
Correct the PUSHDATA4 minimal encoding test.
clarify that there are only two nodes
replace absolute sleep with conditional wait
add autoprune information to RPC "getblockchaininfo"
chainparams: use SeedSpec6's rather than CAddress's for fixed seeds
Remove broken+useless lock/unlock log prints
Add merkle blocks test
Add RPC call to generate and verify merkle blocks
Add CMerkleBlock constructor for tx set + block and an empty one
[REST] update documentation
QA: add --noshutdown option to prevent stopping nodes
fix and enable bip32 unit test
Squashed 'src/secp256k1/' changes from 1897b8e..22f60a6
Update libsecp256k1
Add block pruning functionality
Use equivalent PoW for non-main-chain requests
[QA] rest.py RPC test: change setgenerate() to generate()
[REST] getutxos REST command (based on Bip64)
add rpc test for listunspents support for zero value txouts
tests: Error when setgenerate is used on regtest
FreeBSD, OpenBSD thread renaming.
Consensus: Create consensus/consensus.h with some constants
Show zero value txouts in listunspent.
rpc-tests: Add proxy test
trivial string change in wallet.cpp (the -> that)
Add operator names to DNS Seed list
ensure consistent header comment naming conventions
Make 'Default: %u' spacing consistent in help message
[Qt, Trivial] remove two unneeded includes of wallet/db.h
[Qt, Trivial] fix header groupings + space, intdentation fixes
[Qt, Trivial] misc minor string changes
depends: latest config.guess and config.sub
Remove leftover strlcpy.h copyright
Re-wrote a passage of text that was difficult to understand.
[Trivial] format sync.h
Update REST URL to match reality
 Use https link to bitcoin.org in Doxygen intro
Removed '()' where used without contents inside
Replaced current function names with __func__ in LogPrintf() calls.
Point to the Debian 7.8 installer
Add x86_64* i686* mips* and arm* to depends .gitignore
Remove folder and images for bootstrap.md
[Qt] header group cleanup
QA: stop nodes after RPC tests, even with --nocleanup
Cap nAttempts penalty at 8 and switch to pow instead of a division loop.
nLastTry is only used for addrman entries
privacy: Stream isolation for Tor
Separate CTranslationInterface from CClientUIInterface
miner.h: fix clang warning because of class/struct mix
Reduce download timeouts as blocks arrive
[Qt] Use identical strings for expired payment request message
[Qt] minor comment updates in PaymentServer
[Qt] constify first parameter of processPaymentRequest()
[Qt] take care of a missing typecast in PaymentRequestPlus::getMerchant()
[Qt] remove unused PaymentRequestPlus::getPKIType function
[Qt] paymentserver: better logging of invalid certs
[Qt] paymentserver: do not log NULL certificates
Chainparams: Refactor: Remove redundant AllowMinDifficultyBlocks() getter
Set nSequenceId when a block is fully linked
Chainparams: Cleanup: Delete CChainParams getters to attributes from Consensus::Params
[squashme] fix listunspent code indentation
Chainparams: Refactor: Remove redundant HashGenesisBlock() getter
Push down RPC reqWallet flag
[move] move listunspent to wallet/rpcwallet.cpp
Better txn_doublespend.py test
Implement CTransaction::IsEquivalentTo(...)
consensus: don't use arith_uint256 in consensus.h
Revert mining changes in #5957
move ThreadFlushWalletDB declaration to walletdb.h
[Qt] Clarify: smartfee button name "Minimize"
Chainparams: Decouple CAlert from CChainParams
Docs: Use new Bitcoin.org download URLs
Add git-subtree-check.sh script
Change download logic to allow calling getheaders/getdata on inbound peers
Add additional block index consistency checks
Bugfix: make CreateNewBlock return pindexPrev
Introduce separate 'generate' RPC call
Simplify hash loop code
doc: add historical release notes for 0.10.0
add -walletbroadcast=0 rpc test
wallet: make it possible to disable transaction broadcast
Initialization: setup environment before starting QT tests
Initialization: setup environment before starting tests
Switch test case signing to RFC6979 extra entropy
Squashed 'src/secp256k1/' changes from 50cc6ab..1897b8e
Update libsecp256k1.
Add a consistency check for the block chain data structures
[Qt] fix rpc console font size to flexible metrics
Initialization: set fallback locale as environment variable
Trivial optimization: use GetAncestor to compute new target
Keep mempool consistent during block-reorgs
Consensus: Refactor: Decouple pow.o from chainparams.o
Consensus: Refactor: Introduce Consensus::Params class
Regression test for ResendWalletTransactions
Includes: Do not include main.h from any other header
Includes: MOVEONLY: move more method definitions out of wallet.h
Includes: Refactor: Move CValidationInterface and CMainSignals out of main
don't trickle for whitelisted nodes
Scale up addrman
Always use a 50% chance to choose between tried and new entries
Do not bias outgoing connections towards fresh addresses
Simplify hashing code
Make addrman's bucket placement deterministic.
Switch addrman key from vector to uint256
wallet: move crypter to wallet
Update bitcoin.conf
Add a NODE_GETUTXO service bit and document NODE_NETWORK. Stop translating the NODE_* names as they are technical and cannot be translated.
use constant references for strings in functions in wallet/*.*
Abstract out Ctransaction-specific signing into TransactionSignatureCreator
[Wallet] sort pending wallet transactions before reaccepting
refactor: move bdb (bitdb) interaction from init.cpp to wallet.cpp
allocators: split allocators and pagelocker
Reduce fingerprinting through timestamps in 'addr' messages.
depends: fix a static qt5 crash when using certain versions of libxcb
[QT] some mac specifiy cleanup (memory handling, unnecessary code)
Reorder travis builds for faster response
qa/rpc-tests/wallet: Tests for sendmany
rpcwallet/sendmany: Just take an array of addresses to subtract fees from, rather than an Object with all values being identical
Subtract fee from amount
BUGFIX: Stack around the variable 'rv' was corrupted
add RPC test for InvalidateBlock
fix InvalidateBlock to repopulate setBlockIndexCandidates
[Move Only] Move wallet related things to src/wallet/
tests: add a BasicTestingSetup and apply to all tests
[QT] fix OSX dock icon window reopening
Initialization: set Boost path locale in main thread
Help messages correctly formatted (79 chars)
fix possible block db breakage during re-index
test: remove fSkipProofOfWork
test: Remove UNITTEST params
tests: change main and wallet tests to BOOST_FIXTURE_TEST_SUITE
[Qt] rework setNumBlocks to have blockDate as parameter
Run unit tests in different orders
Replace CBlockHeader::GetHash with call to SerializeHash
Add serialize float/double tests
src/txmempool.cpp: make numEntries a uint32_t
src/arith_256.cpp: bigendian compatibility
src/serialize.h: base serialization level endianness neutrality
src/script/script.h: endian compatibility for PUSHDATA sizes
src/primitives/transaction.h: endian compatibility in serialization
src/primitives/block.cpp: endian compatibility in GetHash
src/net.cpp: endian compatibility in EndMessage
src/main.cpp: endian compatibility in packet checksum check
GUI: Display label rather than address on popups
src/hash.cpp: endian compatibility
build: Endian compatibility
Limit message sizes before transfer
Add correct bool combiner for net signals
[Qt] fix a issue where "command line options"-action overwrite "Preference"-action (on OSX)
QT: remove unused parameter
[Qt] Code-movement-only: Format confirmation message in sendcoinsdialog
Reinitialize state in between individual unit tests.
startup script for centos, with documentation.
contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables
keys: remove libsecp256k1 verification until it's actually supported
GUI: Clarify terminology; use "Label" heading for labels row, and "Node/Service" rather than [IP] "Address"
Remove obsolete pubsub method definitions
Add bitcoin-cli man page
qt: Don't save geometry for options and about/help window
make CMessageHeader a dumb storage class
depends: always use static qt5 for linux
WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef. Code to avoid calling Perfmon too often is only needed when perfmon is actually going to get called. This is not intended to make any functional difference in the addition of entropy to the random pool.
Better fingerprinting protection for non-main-chain getdatas.
build: fix typo in configure help
gitian: fix x86_64 build with static libstdc++
build: change reduce exports/static libstdc++ options for gitian and travis
build: remove libstdc++ backwards-compat
build: disable reduced exports by default
Add unit tests for next difficulty calculations
[GUI] Move fee dialog minimise button away from "Transaction Fee"
Revert "Make nicer pull request merge messages"
[Qt, Linux] honor current network when creating autostart link
[Qt, Win] honor current network when creating autostart link
Update debian changelog and control file
Rename Interval() to DifficultyAdjustmentInterval()
Add list of implemented BIPs
doc: Add note-to-self about SHA256SUMS to release-process.md
openssl: abstract out OPENSSL_cleanse
gitian: don't add . to tar list
Add fanquake PGP key
Add test for DER-encoding edge case
[Qt] remove unused getNumBlocksAtStartup() from ClientModel
[Qt] use qint64 in BitcoinGUI::setNumBlocks
Sanitize command strings before logging them.
Ignore getaddr messages on Outbound connections.
fix jonasschnelli's gitian key
Add more information to errors in ReadBlockFromDisk
[Qt] add bitcoin logo to about screen
fix getblocktemplate lock issue
minor rework of SendMoney in rpcwallet
[Qt] prevent amount overflow problem with payment requests
c++11: These look like user-defined literals.
c++11: don't forward-declare types used in maps
c++11: MOVEONLY: break circular dependency in wallet
c++11: MOVEONLY: move function definitions out of the header
build: fix newer boost build with c++11
Split logic to undo txin's off DisconnectBlock.
Acquire CCheckQueue's lock to avoid race condition
Avoid storing a reference passed to SignatureChecker constructors
Use separate SignatureChecker for CMutableTransaction
Replace difficulty readjustment blocks with Interval()
Increase coverage of DERSIG edge cases
Add RPC test for DERSIG BIP switchover logic
BIP66 changeover logic
Example unit tests from BIP66
Change IsDERSignature to BIP66 implementation
Change "insane" to "absurd" (referring to high fees) in text strings and identifiers.
Changed pronouns for correctness and inclusivity
fix _code_ snippet in gitian-building.md
Suggest --disable-wallet when libdb_cxx headers are missing
depends: fix typos
TRIVIAL: fix misleading comment
Remove whitespaces before double colon in errors and logs
Improve gitian build guide
remove sig_canonical.json and sig_noncanonical.json
Remove bootstrap.md
[Qt] allow unit changes for read-only BitcoinAmountField
Format build flags in src/Makefile.am.
Change Coin Control first column label
Trim RPC command table
Removed main.h dependency from rpcserver.cpp
change hardcoded character constants to a set of descriptive named constants for database keys
fix crash: createmultisig and addmultisigaddress
fix crash: CoinControl "space" bug
LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead
depends: latest config.guess and config.sub
Remove custom pkg.m4 script.
Delete RecvLine function
add new osx dmg background picture
osx packaging: update DS_Store after background changes
osx packaging: switch background image to background.tiff
osx packaging: move background image to .background to match gitian builds
osx: bump build sdk to 10.9
Get rid of DetectShutdownThread
[QA] fix httpbasic keep-alive test
qt: avoid hard-coding font names
qt: fix broken unicode chars on osx 10.10
qt: fonts: allow SubstituteFonts to filter based on user's language
Restore RPC HTTP keepalives to default.
[Qt] change transaction table column width
[Qt] resize oversized icons
[Qt] add debug logging for -rootcertificates option
[Qt] Payment request expiration bug fix (re-done)
improve tests for #5655
fix tests for #5655
Add a -rpckeepalive and disable RPC use of HTTP persistent connections.
Use text-color icons for system tray Send/Receive menu entries
contrib: improve optimize-pngs.py
[Qt] optimize PNG files
Update OS X build instructions to use Qt 5
[Qt] add payment request unit test for non matching networks
jonasschnelli's GPG key
[Qt] prepare paymentservertests for new unit tests
[Qt] group variables below initial if-clauses in AmountSpinBox::stepEnabled
[Qt] remove size grip to get rid of the right margin
Coin Control: Use U+2248 "ALMOST EQUAL TO" rather than a simple tilde (which may be mistaken for a negative sign)
Increase block download timeout base from 10 to 20 minutes.
MOVEONLY: Move struct CBlockTemplate to miner.h (from main.h)
depends: remove embedded OpenSSL timestamp for determinism
Improve robustness of DER recoding code
[Qt] add option to allow self signed root certs (for testing)
Make nicer pull request merge messages
[Qt] don't allow amount changes when AmountSpinBox is read-only
fail immediately on an empty signature
depends: bump openssl to 1.0.1k
consensus: guard against openssl's new strict DER checks
[Qt] optimize helpmessage dialog
Make empty byte arrays pass CheckSignatureEncoding()
Catch UTXO set read errors and shutdown
Bugfix: configure: Correctly detect "nothing to build" condition
Bugfix: Only check for boost when building code that requires it
Introduce 10 minute block download timeout
Bugfix: configure: Check for openssl/ec.h
[QA] fix zapwallettxes test
tests: fix spurious windows test failures after 012598880c
Use EXTRA_LIBRARIES instead of noinst_LIBRARIES so we can avoid building unused code
tests: run sanity checks in tests too
Move arith_uint256 out of consensus and util
Squashed 'src/secp256k1/' changes from bccaf86..50cc6ab
Update libsecp256k1
Use libsecp256k1's RFC6979 implementation
Make the command-line-args dialog better
Update seed IPs, based on bitcoin.sipa.be crawler data
arith_uint256: remove initialization from byte vector
Remove now-unused methods from arith_uint256 and base_uint
Remove arith_uint160
Add tests for new uint256
Add conversion functions arith_uint256<->uint_256
uint256->arith_uint256 blob256->uint256
Use arith_uint256 where necessary
String conversions uint256 -> uint256S
Replace uint256(1) with static constant
Replace GetLow64 with GetCheapHash
Replace direct use of 0 with SetNull and IsNull
Temporarily add SetNull/IsNull/GetCheapHash to base_uint
Get rid of the internal miner's hashmeter
Reject non-final txs even in testnet/regtest
Catch LevelDB errors during flush
Bugfix: only track UTXO modification after lookup
Remove dead BitcoinUnits::id code and update assets-attribution for non-image unit selector
On close of splashscreen interrupt verifyDB
depends: bump cctools to a custom version with less deps
namespace: drop most boost namespaces and a few header cleanups
namespace: drop boost::assign altogether here
namespace: remove boost namespace pollution
build: osx builders no longer need 32bit compiler support
depends: major upgrade to darwin toolchain
depends: osx: fix qt5 build against 10.10 sdk
Remove declaration of no longer existent CheckWork
Bump project-wide COPYRIGHT_YEAR to 2015
Remove redundant copyright notices from README files
Rename MAX_TX_SIGOPS to MAX_STANDARD_TX_SIGOPS to match similar policy constant MAX_STANDARD_TX_SIZE
depends: fix major regression after d546191dc.
[Qt] update a translation string and argument counts
Bugfix: ConnectBlock: In case the genesis block gets in with fJustCheck, behave correctly
Make CCoinsViewCache's copy constructor private
Clean AcceptToMemoryPool error messages
Bugfix: RPCWallet: Docs: Booleans aren't quoted
RPCWallet: Notate all account stuff as deprecated
Correct tooltip on address book page
dmg: fix deterministic dmg creation and docs
clarify obscure uses of EvalScript()
Require sufficent priority for relay of free transactions
Updated license date
rpcserver: attempt to fix uncaught exception.
[REST] rest/chaininfos add documentation
[REST] add /rest/chaininfos
Use real text rather than image-rendered text for unit selector
Adopt style colour for button icons
Move UndoWriteToDisk() and UndoReadFromDisk() to anon namespace
MOVEONLY: CBlockUndo from main.h to undo.h
Decouple CBlockUndo from CDiskBlockPos
Decouple miner.o and txmempool.o from CTxUndo
Decouple CCoins from CTxInUndo
[Qt] new icon for the debug window
[Docs] clean up assets-attributen.md
Remove bitnodes.io from dnsseeds.
RPC test for immature balance
Add immature balances to getwalletinfo.
Add unconfirmedbalance field to getwalletinfo
bitcoin-tx: Add test case for signing a tx
gitian: attempt to fix tarball determinisim
en: Avoid ambiguous language regarding when transactions confirm
Adding RPC tests for the following wallet related calls: getbalance, listsinceblock, listtransactions, listlockunspent, listaccounts listaddressgroupings
DOS: Respect max per-peer blocks in flight limit
bitcoin-tx: Refer to the JSON fields rather than the whole object
Reject headers that build on an invalid parent
remove max orphan blocks config parameter since it is no longer functional
sleep-wait on genesis block during init with -reindex
IsNull doesn't change CBlockLocator, add const hint
Remove no longer needed declaration of CBlockLocator
Add libbitcoinconsensus.pc to .gitignore
contrib: make github-merge require signing
Add script to verify all merge commits are signed
build: fix 'make distcheck'
Enforce minRelayTxFee on wallet created tx and add a maxtxfee option.
docs: update gitian building docs
Added "Core" to copyright headers
add missing CAutoFile::IsNull() check in main
Remove outdated comment about NTP
Create developer-notes.md
Add RandAddSeedPerfmon to MakeNewKey
Build winshutdownmonitor.cpp on Windows only.
[QA] fix httpbasics RPC test typo
Add mips, mipsel and aarch64 to depends platforms
Drop beta suffixes from readmes
Bugfix: prioritisetransaction: Do some basic sanity checking on txid
make all catch() arguments const
Make pass-by-ref arguments const.
[Qt] light blue icon color for regtest
[Qt] fix a <Qt4.7 compatibility issue raised in #5228
resize tray icon because a 1024x1024 icon won't show in ubuntu (bug)
Qt: Go back to using QIcon functionality for scaling
Qt: HiDPI (retina) support for splash screen
[RPC-TESTS] ability to run single test manually
Remove references to X11 licence
minor fix on script test data docs
Apply AreSane() checks to the fees from the network.
Display time offset in the debug window's Peers tab
Add time offset to getpeerinfo output
Add /rest/headers
docs: release process fixups
depends: fix packages with hard-coded SOURCES_PATH
depends: Move source stamps to source dir and misc cleanups
depends: teach 'make download' to download sources for all hosts
Remove unused chainparam networkID
Move remaining CBlockIndex methods to chain.cpp
Make IsSuperMajority a standalone function
Implement test for merkle tree malleability in CPartialMerkleTree
signrawtransaction: validate private key.
Now that 0.10 has been branched, master is 0.10.99
qt: translations pull from transifex
Update Bitcoin for libsecp256k1 API change
Squashed 'src/secp256k1/' changes from b0210a9..bccaf86
Update libsecp256k1
[REST] JSON output: remove block infos from tx details if it is nested in block
[REST] added /rest/block/notxdetails/<hash> into REST-interface.md documentation
[REST] /rest/block response with full tx details
Port of walletbackup.sh to Python.
contrib: show pull # in prompt for github-merge script
RPC-test based on invalidateblock for mempool coinbase spends
Make CTxMemPool::remove more effecient by avoiding recursion
Make CTxMemPool::check more thourough by using CheckInputs
Remove txn which are invalidated by coinbase maturity during reorg
Remove coinbase-dependant transactions during reorg.
[Qt] update paymentserver license and cleanup ordering
[Qt] add BIP70 DoS protection test
[Qt] add BIP70 payment request size DoS protection for URIs
[Qt] remove dup lock that is done in SetAddressBook()
[Qt] ensure socket is set to NULL in PaymentServer::ipcSendCommandLine
[Qt] add BIP70/BIP71 constants for all messages and mime types
[Qt] make PaymentServer::ipcParseCommandLine void
Remove genesis block hash from error
Make several small string fixes in linearize-data.py
Revised translation process doc
[RPC] add rpc-test for http keep-alive (persistent connections)
Add a new test for FormatParagraph (string longer than the default width).
Format paragraphs properly - count the space between words.
Disable SSLv3 (in favor of TLS) for the RPC client and server.
Use RPC_INVALID_PARAMETER instead of RPC_WALLET_ERROR for invalid amount. No return at the end of void function.
Normalize header guard of script_error.h
Move CMerkleBlock and CPartialMerkleTree to their own file
Clean up wallet encryption code.
Squashed 'src/secp256k1/' changes from ad2028f..b0210a9
Update libsecp256k1
Remove gmp dependency and doc mentions
Limit the number of new addressses to accumulate
Test unexecuted OP_CODESEPARATOR
Package libqt5core5 replaced with libqt5core5a
MOVEONLY: core/ -> primitives/
Coinbases-in-mempool regression test
Report script evaluation failures in log and reject messages
newlines in strings are invalid JSON
Add 0.10 release notes on improvement to signing security.
Regard connection failures as attempt for addrman
Test resurrecting memory pool transactions during chain re-org
[Qt] fix a translation that occurs 2 times but was a little different
[Qt] change some strings to reflect name change to Bitcoin Core
[Qt] fix missing plural form for a string in sendcoinsdialog
Make comments in main an init doxygen compatible
Move SendMoney() to rpcwallet.cpp.
Move CHECKMULTISIG order tests out of automatically generated block
Use deterministically generated script tests
Extra explanation for getchaintips
prioritisetransaction RPC: Restore compatibility with existing implementations by using satoshis for fee offset rather than BTC
[REST] add REST interface tests in rpc-test section
Add /opt/local/include/db48 only if it exists.
Resize after succesful result
Update the intent on SI-style separators.
Move `setmocktime` to hidden category
[REST] make selection of output-format mandatory, support dot url syntax
Report status of chain tips
Remove -printblock, -printblocktree, and -printblockindex
Introduce a hidden category
Delay writing block indexes in invalidate/reconsider
Add 'invalidateblock' and 'reconsiderblock' RPC commands.
[REST] adding basic documentation
[REST] set REST API behind "-rest" option
[REST] give an appropriate response in warmup phase
qt: Update translations from transifex
[REST] fix headersonly flag for BINARY responses
Use complete path to include bitcoin-config.h.
Include missing config/bitcoin-config.h.
docs: add/update docs for osx dmg signing
build: add a deterministic dmg signer
release: update docs to reflect new layout
build: Clean up the dmg layout
build: add the deploydir target for gitian
gitian: update descriptors to use a sane uniform output
build: disable static lib stripping during osx make install-strip
[Qt] small changes to sendcoinsdialog
Do all block index writes in a batch
Make SCRIPT_VERIFY_CLEANSTACK a standardness requirement
Add SCRIPT_VERIFY_CLEANSTACK (BIP62 rule 6)
No semantic change: reuse stack variable in P2SH evaluation
Delay writing block indexes in invalidate/reconsider
Add 'invalidateblock' and 'reconsiderblock' RPC commands.
No longer check osx compatibility in RenameThread
qt: osx: fix hidden symbol visibility
libbitcoinconsensus: don't require any global constructors
print the caught error instead of raising an error
[Qt, OSX] fix Qt4.8 compatibility with QProgressBar issue
Introduce separate flushing modes
Improve chainstate/blockindex disk writing policy
Check for strnlen and provide it if it is not found.
Make -proxy set all network types, avoiding a connect leak.
Prioritize and display -testsafemode status in UI
Add key generation/verification to ECC sanity check
Add sanity check after key generation
Remove misleading comment about testnet's message string.
Process help and version arguments before datadir.
docs: ThreadGetMyExternalIP has been removed
Check pindexBestForkBase for null
Change MIT/X11 to MIT in license displayed in the program
Convert remaining comments in /src to doxygen format
qt: English translation update
libbitcoinconsensus: Add pkg-config support
Edited rpc-tests to run python script not shell script.
Port of wallet.sh to python (wallet.py).
Header define style cleanups
Deterministic signing
Add the RFC6979 PRNG
Add HMAC-SHA256
Split up crypto/sha2
CreateNewBlock: Stick height in coinbase so we pass template sanity check
Test the exact order of CHECKMULTISIG sig/pubkey evaluation
Make STRICTENC invalid pubkeys fail the script rather than the opcode.
[Qt] explicitly call proxy in GUI settings SOCKS5 proxy
Make PruneBlockIndexCandidates safer
[Qt] minor ordering cleanup after new fee selection
minor style cleanup after HTTP rest interface merge
qt: Make askpassphrase dialog behave more sanely
Check block header before accepting it.
gitian: make tarballs deterministic and nuke .la files from build output
travis: let travis use shared libs for tests
gitian: quick docs update
gitian: descriptors overhaul
depends: Add a package for qt4.6. Linux uses it by default.
depends: Use pic for all linux dependencies
build: pad header for osx libs
build: fix static dll link for mingw
build: shared lib build should work reasonably well now
build: add quick consensus lib tests
build: add --with-libs so that libs are optional
build: add libbitcoinconsensus files and hook up the lib build
build: remove internal/protected build attribute checks
build: check visibility attributes
build: mingw needs libssp for hardening with dlls
build: make a distinction between static app ldflags and static lib ldflags
Update comments in src/rpc* to be doxygen compatible
submitblock: Check for duplicate submissions explicitly
QA RPC tests: Add tests block block proposals
Implement BIP 23 Block Proposal
Truthier error message when rpcpassword is missing
Port/fix txnmall.sh regression test
doc: add libgmp dependency for secp256k1
[Qt] Add Smartfee to GUI
[Wallet] Prevent user from paying a non-sense fee
[Wallet] Add global boolean whether to pay at least the custom fee (default=true)
[Wallet] Add global boolean whether to send free transactions (default=true)
gmp needed to build on OSX
[Qt, OSX] move QProgressBarMac to guiutil.h
Remove unused ecwrapper code
change nSubsidy's type from int64_t to CAmount
Abstract DecodeHexBlk and BIP22ValidationResult functions out of submitblock
miner_tests: Disable checkpoints so they don't fail the subsidy-change test
TestBlockValidity function for CBlock proposals (used by CreateNewBlock)
CreateNewBlock and miner_tests: Also check generated template is valid by CheckBlockHeader, ContextualCheckBlockHeader, CheckBlock, and ContextualCheckBlock
Abstract context-dependent block checking from acceptance
revert part of 9eda1620b
build: secp256k1 as a subdir, since it's required
build: fixup configure to not export anything
depends: quit exporting in config.site
depends: add gmp package
Don't use bashisms in configure
Use libsecp256k1 in key.cpp
Do not use EC code in global constructors
Always build and link libsecp256k1
Squashed 'src/secp256k1/' content from commit ad2028f
Delete src/secp256k1 before subtree import
Properly lock cs_main in rest_block
HTTP REST: minor fixes
[Qt, OSX] fix usage of osx 10.8+ user notification center
Discourage NOPs reserved for soft-fork upgrades
travis: disable rpc tests for windows until they're not so flaky
RPC tests: create initial chain with specific timestamps
regression test only setmocktime RPC call
[Qt, OSX] QProgressBar CPU-Issue workaround
[OSX, docs] update some release build informations
Update comments in util to be doxygen compatible
Update comments in txmempool to be doxygen compatible
Update bash-completion for v0.10
Coin Control: Make list mode default
Bugfix: Clarify coin control dialog labels
Update the 'test_IsStandard' unit test
[docs] Add mini-"howto" using Qt Creator (osx)
script: check ScriptError values in script tests
script: create sane error return codes for script validation and remove logging
Optimize -regtest setgenerate block generation
don't override dir() in qa rpc tests
Change the default maximum OP_RETURN size to 80 bytes
Win32: change buffer size for gethotsname in Discover()
Win32: log addresses found in Discover() calls
init: minor parameter interaction updates
[Qt] the RPC Console should be a QWidget to make window more independent
travis: temporarily disable the forknotify test
depends: cleanup better after qt and force a bump
travis: attempt to fix unlikely build issue
travis: install less packages from apt-get
Reset setBlockIndexCandidates once block index db loaded
Add unauthenticated HTTP REST interface to public blockchain data.
Don't show wallet options in the preferences menu when running with -disablewallet
Do signature-s negation inside the tests
Check against MANDATORY flags prior to accepting to mempool
Make comments in /src/script doxygen compatible
Adding const.
Adding license.
Do not use third party services for IP detection.
Qt: new icons
gather_inputs: use correct variable in error message
Make sure that GetRandomBytes never fails
Add a locking mechanism to IsInitialBlockDownload to ensure it never goes from false to true.
doc: Correct several typos in bootstrap.md
Reduce bitcoin-tx dependencies
Change -genproclimit default to 1
Always log number of threads for script verification
Rearrange initial config checks: AC, AM, compiler, libtool. Removed some repeated and unused prog checks.
Reduce bitcoin-cli dependencies
Qt: Add support for missing scrollbar in peers table
Qt: Network-Traffic-Graph: make some distance between line and text
depends: boost: hard-code hidden symbol visibility
bitcoin-tx: Add the "-txid" option. Also add the hex-encoded transaction to the JSON output as the "hex" property.
Avoid a bunch of copying/conversion in script/sign
[Wallet] Reduce minTxFee for transaction creation to 1000 satoshis
Add "warmup mode" for RPC server.
minor code style cleanup after recent merges
The first thing that SelectParams does is call SelectBaseParams. Therefore, we do not need to call SelectBaseParams immediately prior to calling SelectParams.
Remove file and class order guidelines
util.cpp comment correction
fix a typo
qt: translations update from Transifex
minor cleanup: include orders, end comments etc.
boost: moveonly: split CPubKey and friends to new files
boost: moveonly: move BIP32Hash to hash.h
boost: moveonly: create eccryptoverify.h|cpp and move helper functions there
Update serialize comments to be doxygen compatible
add tests to travis
tests: replace the old (unused since Travis) tests with new rpc test scripts
tests: remove old pull-tester scripts
tests: fix forknotify.py on windows
tests: allow rpc-tests to get filenames for bitcoind and bitcoin-cli from the environment
tests: enable alertnotify test for Windows
Update comments in client version to be doxygen compatible
Update comments in version to be doxygen compatible
[Qt] fix slot connection problems when no wallet is loaded
Update comments in rpcserver to be doxygen compatible
Print parameter interactions to console, too
RPC: submitblock: Support for returning specific rejection reasons
Qt: Clarify sign/verify dialog text to specifically state that these messages only prove one receives with the address in question, and makes no claim to sender of transactions
Be a bit more verbose during -loadblock if we already have blocks
CBlockIndex::GetBlockWork() + GetProofIncrement(nBits) -> GetBlockProof(CBlockIndex)
MOVEONLY: Move void UpdateTime() from pow.o to miner.o (plus fix include main.h -> chain.h)
Introduce preferred download peers
Don't relay alerts to peers before version negotiation
Add missing reserved address spaces.
Separate protocol versioning from clientversion
qt: Move transaction notification to transaction table model
Rename ProcessBlock to ProcessNewBlock to indicate change of behaviour, and document it
Update comments in keystore to be doxygen compatible
Update comments in key to be doxygen compatible
Update comments in wallet to be doxygen compatible
Update generate-seeds.py to produce doxygen compatible comments
boost: code movement only: split CECKey into separate files
boost: remove CPubKey dependency from CECKey. Follow-up of e405aa48
MOVEONLY: core.o -> core/block.o
MOVEONLY: Move script/compressor out of script and put CTxOutCompressor (from core) with it
MOVEONLY: separate CTxUndo out of core
MOVEONLY: Separate CTransaction and dependencies from core
MOVEONLY: Move CFeeRate and Amount constants to amount.o
Build util and common before building server
Enable customising node policy for datacarrier data size with a -datacarriersize option
Add valid invert of invalid every numeric opcode tests
Clearly separate PUSHDATA and numeric argument MINIMALDATA tests
Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule
Ensure MINIMALDATA invalid tests can only fail one way
Improve CScriptNum() comment
Add SCRIPT_VERIFY_MINIMALDATA (BIP62 rules 3 and 4)
Add SCRIPT_VERIFY_SIGPUSHONLY (BIP62 rule 2)
Update comments in chainparams to be doxygen compatible
Update comments in chain to be doxygen compatible
[Qt] Remove CAmount from BitcoinAmountField Q_PROPERTY
Start with tidier cache directories
getblockhash: throw JSONRPCError (not runtime_error)
--tracerpc option for regression tests
Make CBlockIndex* returned by GetDepthInMainChain const.
Update comments in addrman to be doxygen compatible
Work around #5113.
Extend getchaintips RPC test.
Add doc/doxygen to .gitignore
fix build with libc++ after 85c579e
qt: remove monitoreddatamapper
doc: release notes update for `rpcallowip` syntax change
Update license in pull-tester and rpc-tests
boost: split stream classes out of serialize.h
CAutoFile: Explicit Get() and remove unused methods
Replace some function names with __func__
openssl version bump
qt: small English language updates from translators
doc: add headers first backwards compat warning
qt: English translation update after 0a08aa8
Rename RPC_TRANSACTION_* errors to RPC_VERIFY_* and use RPC_VERIFY_ERROR for submitblock
Bugfix: submitblock: Use a temporary CValidationState to determine accurately the outcome of ProcessBlock, now that it no longer does the full block validity check
Add CValidationInterface::BlockChecked notification
Chain::SetTip return type to void
Rename CWalletInterface to CValidationInterface
Add IsNull() to class CAutoFile and remove operator !
script: add a slew of includes all around and drop includes from script.h
script: move ToString and ValueString out of the header
script: add ToByteVector() for converting anything with begin/end
script: move CScriptID to standard.h and add a ctor for creating them from CScripts
Add buildenv.py to gitignore
doc: Add historical release notes for 0.9.3
MOVEONLY: CInPoint from core to txmempool
squashme on 3fdb9e8c (Bluematt's bikeshedding)
Squashed 'src/leveldb/' changes from 7924331..7d41e6f
Add LIBTOOLFLAGS CXX tag to qt makefile include
boost: drop boost dependency in version.cpp.
boost: drop boost dependency in utilstrencodings.cpp
boost: drop boost dependency in core.cpp
boost: remove CPrivKey dependency from CECKey
boost: drop dependency on tuple in serialization
boost: drop dependency on is_fundamental in serialization
build: fix libtool's refusal to link static libs into a dll
Skip reindexed blocks individually
Make -reindex cope with out-of-order blocks
Rename setBlockIndexValid to setBlockIndexCandidates
Add height to "Requesting block" debug
Better logging of stalling
Improve getheaders (sending) logging
Remove CheckMinWork, as we always know all parent headers
RPC additions after headers-first
Headers-first synchronization
Bugfix: Remove default from -zapwallettxes description (inaccurate)
build: quit abusing LIBS for Windows builds.
Typo in test
Discourage fee sniping with nLockTime
SQUASHME: fix "Reserve only one network specific cached path per session"
Parameterise command line option defaults, so translations are independent of them
rpc-tests: don't spew non-errors to stdout
build: fix qt test build when libprotobuf is in a non-standard path
build: fix dynamic boost check when --with-boost= is used
SQUASHME: NetworkIdFromCommandLine() function instead of method
Remove CChainParams::NetworkID()
Add fTestnetToBeDeprecatedFieldRPC to CChainParams
Move checkpoint data selection to chainparams
qt: add network-specific style object
Travis: Descriptive build names
Trigger -alertnotify if network is upgrading without you
Refactor -alertnotify code
Make SCRIPT_VERIFY_STRICTENC compatible with BIP62
contrib: revert changes to github-merge.sh in #5038
Prettify JSON tests and minimize diffs
Don't return an address for invalid pubkeys
Homebrew lang fix
minor txindex documentation improvement
contrib: make linearize-data.py cope with out-of-order blocks
contrib: use batched JSON-RPC in linarize-hashes
add -timeout default as constant and use them
fix a lock indentation in main.cpp
minor license, header end comment etc. cleanup in /script
Keep information about all block files in memory
Disable App Nap on OSX 10.9+
Bugfix: Replace bashisms with standard sh in tests/tools
Bugfix: Replace bashisms with standard sh in gitian descriptors
Bugfix: Replace bashisms with standard sh to fix build on non-BASH systems
travis: add non-default shell testing to travis.
[Wallet] Do not flush the wallet in AddToWalletIfInvolvingMe(..)
[Wallet] Watch-only fixes
Make comptool more deterministic
Update English translation
Don't translate state.Abort() messages
DRY: Avoid repetitions in script_test
Replace SCRIPT_VERIFY_NOCACHE by flag directly to checker
Make signature cache optional
Abstract out SignatureChecker
Correct logging AcceptBlock()->AcceptBlockHeader()
Changed mixed indentation to four spaces
Avoid introducing a virtual into CChainParams
Switch testing framework from MAIN to new UNITTEST network
Qt: allow "emergency" shutdown during startup
amount.h: update license, add header end comment + rem from util.h
CAutoFile: make file private
CBufferedFile: add explicit close function
CBufferedFile: convert into a non-refcounted RAII wrapper
Revert merge of pull #4845
Upgrade comparison tool further
build: macdeploy: filter out irrelevant qt5 frameworks and dylibs
travis: If the comparison-tool fails, dump the tail of the debug log
Print input index when signature validation fails, to aid debugging.
When transaction outputs exceed inputs, show the offending amounts so as to aid debugging.
Keep symlinks when copying into .app bundle
travis: enable windows tests
doc: add make install to build-osx.md and build-unix.md
qt: Register CAmount metatype
remove dead/unused code in walletdb.cpp
update getnetworkinfo help with subversion
change exit(1) to an assert in CWallet::EncryptWallet
fix possible memory leaks in CWallet::EncryptWallet
fix a possible memory leak in CWalletDB::Recover
Update build-unix.md
tests: fix false-positive under win64
tests: fix python test-runner for windows
Revert "travis: retry tests before giving up"
depends: update the comparison tool to a more recent version
osx: fix signing to make Gatekeeper happy (again)
doc: update gpg command line for SHA256SUMS.asc in release process
Avoid introducing a virtual into CChainParams
Suggested corrections on comments, variable names. Also new test case testing the PoW skip in UNITTEST.
Switch testing framework from MAIN to new UNITTEST network
cleanup license and header end comment in chain.cpp/.h
update license of compat and crypto
LLu is standard, but not portable. use ULL
doc: Add instructions for consistent Mac OS X build names
doc: Update SHA256SUMS.asc step in release-process.md
Add 0.9.3 and fix control
Use a typedef for monetary values
Add automatic script test generation, and actual checksig tests
autofile: Disallow by-value copies of CAutoFile
autofile: don't copy CAutoFile by value
qt: add proxy to options overridden if necessary.
travis: use debug for one build
script: don't read past the end
tests: don't split an empty string
depends: disable reduced exports for debug builds
depends: add docs for debug
depends: make LDFLAGS act like the other flags
depends: give miniupnpc cppflags
depends: teach qt to honor debug/release
depends: boost: build for debug or release as requested
depends: make sure openssl sees cppflags
depends: add debug/release flags for linux/osx/win
depends: add the debug/release concept to depends
minor variable init changes in init.cpp
SanitizeString: allow '(' and ')'
RPC getnetworkinfo: export local node's client sub-version string
[Qt] add more NULL pointer checks in bitcoingui
Apply clang-format on crypto/* and compat/*
Do merkle root and txid duplicates check simultaneously
Get rid of the dummy CCoinsViewCache constructor arg
Reinitializing list's begin iterator after few elements were erased from the head
Add coins_tests with a large randomized CCoinViewCache test.
Do not keep fully spent but unwritten CCoins entries cached.
Get rid of CCoinsView's SetCoins and SetBestBlock.
Use ModifyCoins instead of mutable GetCoins.
Avoiding referencing elements of an empty vector
Add scriptPubKey field to validateaddress RPC call
Grammar fixes in README
[Qt] minor changes in splashscreen.cpp
Add actual signature tests
Use actually valid transactions for script tests
build: change cdrkit location in build-process.md
qt: Make splash and shutdown window ignore close events
remove code below asserts in limitedmap.h (fixes a ToDo)
Remove CBaseChainParams::NetworkID()
Reserve only one network specific cached path per session
Add warning about the merkle-tree algorithm duplicate txid flaw
Also create pid file in non-daemon mode
build: fix release name strings for gitian builds
Apply clang-format on some infrequently-updated files
Write fee estimate and peers files only when initialized
[Qt] include and file header cleanup
qt: Change splash screen to normal window
CMessageHeader sanity changes
Remove mention of MacPorts from OSX build docs
cleanup class private and public areas in walletdb
prefer const string& over char* in CDB and CWalletDB constructor
typo fix of booleamn to boolean
Avoid copying undo data
travis: use DEBUG_LOCKORDER for our quick/small Linux build
depends: respect CPPFLAGS when configuring with depends
travis: retry tests before giving up
Move CTxDestination from script/script to script/standard
add nModSize init to default constructor of CTxMemPoolEntry
Update obsolete AC macros.
fix missing gettransaction entries in rpcclient
update rpc help message for gettransaction to add includeWatchonly param
Create the common location for all m4 autotool build scripts, build-aux/m4.
remove include of chainparams.h
minor changes for help message of getpeerinfo
Eliminate extra assignment
Bugfix: Add missing equals-sign to Travis config
header include cleanup
cleanup new script files (no code changes)
bitcoin-util-test: Test bitcoin-tx with null scriptPubKey
Bugfix: bitcoin-tx: scriptPubKey may be null, so accept outscript=<n>:
Don't pass nHashType to EvalScript nor CheckSig
Don't pass nHashType to VerifyScript
Remove CScriptCheck::nHashType (was always 0)
Remove unused function main:VerifySignature
Avoid reject message feedback loops
Catch error when done reading files
Store fewer orphan tx by default, add -maxorphantx option
Stricter handling of orphan transactions
When reindexing check for file before trying to open (refactored)
Use explicit fflush() instead of setvbuf()
Rename scriptutils.o to wallet_ismine.o
Move CAffectedKeysVisitor to wallet.cpp (remove ExtractAffectedKeys)
Move scriptutils.o to wallet
netbase: Make SOCKS5 negotiation interruptible
Add init scripts and docs for Upstart and OpenRC
remove unneeded cast in rpcmisc.cpp
Remove some unnecessary c_strs() in logging and the GUI
Avoid returning many "inv" orphans
Limit CNode::mapAskFor
Make script_{valid,invalid}.json validation flags configurable
Move CBlockIndex, CChain and related code out of main
Decouple CChain from mapBlockIndex
qt: fix tablet crash. closes #4854.
Separate script/sign
Separate CScriptCompressor
Separate script/standard
Separate script/interpreter
Move CScript class and dependencies to script/script
Rename script.h/.cpp to scriptutils.h/.cpp (plus remove duplicated includes)
Avoid repeated lookups in mapOrphanTransactions and mapOrphanTransactionsByPrev
Track modified size in TxMemPoolEntry so that we can correctly compute priority.
netbase: Use .data() instead of .c_str() on binary string
qt: Remove thousands separators after decimal point
Clarify 'compressed nor uncompressed' error message
Add testnet DNS seed of Andreas Schildbach.
Cleanup messy error messages
univalue: make spaceStr thread-safe
[Qt] update form files for setting autoDefault explicitly to false
Improve readability of CAddrInfo::IsTerrible
[Qt] copyright, style and indentation cleanup of Qt tests
remove dup include of foreach.hpp in script.cpp
travis: add osx build
depends: fix typo in source downloading. Regression from c897b1e732.
contrib/linearize: Add feature to set file's timestamp based on block header time.
Added XML syntax highlighting
Use memcmp for uint256 equality/inequality
Use boost::unordered_map for mapBlockIndex
Introduce BlockMap type for mapBlockIndex
checkpoints.cpp depends on main, it can use mapBlockIndex directly
Combine CCoinsViewCache's HaveCoins and const GetCoins into AccessCoins.
net: Remove MilliSleep from StopNode
Remove DNS Seeds run by entities which were never well-established.
remove useless millisleep
Use OR of respective block flags for masks
Rename IMPLEMENT_SERIALIZE to ADD_SERIALIZE_METHODS
Discover some missing includes
Remove unused function StackString() and class CCoins;
Serializer simplifications after IMPLEMENT_SERIALIZE overhaul
Update translations after update script improvements
Add deeper XML checking to update-translation script
Move g_signals.SetBestChain(..) below SyncWithWallets
Use CSizeComputer to avoid counting sizes in SerializationOp
rework overhauled serialization methods to non-static
remove fields of ser_streamplaceholder
overhaul serialization code
Clean up CMerkleTx::SetMerkleBranch.
Broken addresses on command line no longer trigger testnet.
changed field types in some structures to equivalent unambiguous types
Replace weird characters by normal spaces
missing include boost/algorithm/string/replace.hpp
Move CMerkleTx to wallet.cpp/h
rpc: Compute number of confirmations of a block from block height
build: Remove message about Ubuntu 13.10 when no boost sleep implementation found
[Qt] minor watch-only changes
[Qt] simplify return code and return values in txtablemodel
[Qt] add all used colors in txtablemodel to guiconstants
cleanup include of assert.h
add missing copyright headers
add missing header end comments
Add travis build:passing/failing indicator.
qt/splashscreen: #include version.h
fix comments ExtractAddress() -> ExtractDestination()
Revert "Add a getutxos command to the p2p protocol. It allows querying of the UTXO set"
depends: add sensible download timeout/retry values
Perform CVerifyDB on pcoinsdbview instead of pcoinsTip
depends: bump miniupnpc to 1.9.20140701.
depends: bump openssl to 1.0.1i
build: add -DMINIUPNP_STATICLIB for new version
[Qt] Call checkBalanceChanged() periodically instead for every updated transaction
qt: Add null check in setClientModel(0)
Split up util.cpp/h
Move `COIN` and `CENT` to core.h
Move `*Version()` functions to version.h/cpp
Move `S_I*` constants and `MSG_NOSIGNAL` to compat.h
Move functions in wallet.h to implementation file
move functions in main and net to implementation files
Move SetThreadPriority implementation to util.cpp instead of the header
Remove unused function `ByteReverse` from util.h
Remove unused `alignup` function from util.h
Move CMedianFilter to timedata.cpp
Use const CCoinsView's at some places.
Make appropriate getter-routines "const" in CCoinsView.
Mark LevelDB "Read" and "Exists" functions as const.
Bypass reloading blocks from disk
travis: add doc
travis: initial descriptor
Test IsPushOnly() with invalid push
contrib/linearize: split block files based on year-month, not just year
contrib/linearize: Guarantee that output is generated in-order
contrib/linearize: split output files based on new-timestamp-year or max-file-size
Update linearize scripts.
Make CScript::clear() release its memory
Allow BatchWrite to destroy its input, reducing copying
replace ComputeMinWork with CheckMinWork
Move CBlockIndex::GetBlockWork() to pow::GetProofIncrement(nBits)
Move UpdateTime to pow
depends: add a fallback path in case package sources go missing
build: work around ccache/autotools warning-spamming bug
rpc_tests: use BOOST_CHECK_EQUAL
Update build-osx.md
Added protobuf-compiler library to the Qt 5 Dependencies
Remove all other print() methods
Remove link to now removed Windows Build Notes
Move strprintf define to tinyformat.h
Remove print() from core functions
UniValue tests: use more BOOST_CHECK()
UniValue: add unit tests
UniValue: compact (!pretty) output should not include extra whitespace
UniValue: use correct setNumStr() input val, when setting number values
Add bitcoin-tx tests
bitcoin-tx: Accept input via stdin. Add input handling to tests.
Add "it works" test for bitcoin-tx
Don't reveal whether password is <20 or >20 characters in RPC
addrman: Do not propagate obviously poor addresses onto the network
build: add option for reducing exports (v2)
replace int with size_t in stream methods
Revert "build: add option for reducing exports"
Univalue: Do not build JSON escape list at runtime
qt: Use quint64 for formatServicesStr
Add detailed network info to getnetworkinfo RPC
doc: Remove outdated information about boost versions
gui: remove redundant numTransactions tracking
[Qt] Revert overviewpage from QFormLayout to QVBoxLayout
Clean-up SyncWithWallets/SyncTransaction
build: Add --with-utils (bitcoin-cli and bitcoin-tx, default=yes). Help string consistency tweaks. Target sanity check fix.
devtools: Exclude default exports from symbol-checker script
Changed LevelDB cursors to use scoped pointers to ensure destruction when going out of scope.
tests: fix test-runner for osx. Closes ##4708
build: add funcs.mk to the list of meta-depends
depends: fix shasum on osx < 10.9
build : fix CPPFLAGS for libbitcoin_cli
build: add option for reducing exports
build: fix automake warnings about the use of INCLUDES
Closely track mempool byte total. Add "getmempoolinfo" RPC.
Create new signal for notification of new blocks.  Use w/ -blocknotify
ui_interface: remove unused NotifyBlocksChanged signal
[Wallet] Improve ReorderTransactions(..)
bitcoin-tx: fix build warnings
Reapply: Reject transactions with excessive numbers of sigops
Don't poll showmyip.com, it doesn't exist anymore
Revert "Reject transactions with excessive numbers of sigops"
qt: better looking trayicon
build: check for sys/prctl.h in the proper way
Remove unnecessary typedef and script.h include
Remove unused CKeyStoreIsMineVisitor
[Qt] Add column Watch-only to transactions list
Add boolean HaveWatchonly and signal NotifyWatchonlyChanged
Categorize rpc help overview
build: Add mention of --disable-wallet to bdb48 error messages
Add a getutxos command to the p2p protocol. It allows querying of the UTXO set given a set of outpoints.
Reduce maximum coinscache size during verification
Dont run full check every time we decrypt wallet.
Make CCryptoKeyStore::Unlock check all keys.
remove unused class CAddrMan; from db.h
[Qt] Add TRY_LOCK back to peertablemodel
Simplify serialize.h's exception handling
Add a way to limit deserialized string lengths
libc-compat: add new symbol that's now needed
build: fix FDELT_TYPE configure check
depends: add shared dependency builder
URLs containing a / after the address no longer cause parsing errors.
[Qt] disable tray interactions when client model set to 0
[Qt] use BitcoinGUI::DEFAULT_WALLET constant in bitcoin.cpp
[Qt] ensure all class attributes are init to 0
[Qt] move SubstituteFonts() above ToolTipToRichTextFilter
[Qt] re-work overviewpage UI
small net cleanup
qt: fix unicode character display on osx when building with 10.7 sdk
Added bullet point
CCoinsKeyHasher::operator() should return size_t
build: fix race in 'make deploy' for windows
build: hook up qt translations for static osx packaging
build: add --with-qt-translationdir to configure for use with static qt
build: teach macdeploy the -translations-dir argument, for use with static qt
build: Find the proper xcb/pcre dependencies
build: silence mingw fpic warning spew
build: don't let libtool insert rpath into binaries
qt: bitcoin_en update after 8d0d512
Remove size limit in RPC client, keep it in server
Avoid a copy in RPC output
more Bitcoin -> Bitcoin Core string changes
[Qt] format ping times in peers tab as ms
Log "version" message IP addresses in client connect summary
qt: Demote ReportInvalidCertificate message to qDebug
[Qt] tweak new peers tab in console window
Typo, and a few "Bitcoin" -> "Bitcoin Core"
doc: Add new DNSseed policy
doc: Modernize steps to be followed after release
Implement "getchaintips" RPC command to monitor blockchain forks.
Add built-in seeds for .onion
Declare SignatureHash() in script.h
add license header to core_io.h, core_read/_write.cpp
fix compilation error in core_io.h
small ordering cleanup of init help message
qt: Remove '0 BTC' placeholder from translation
test: don't let the port number exceed the legal range
test: redirect comparison tool output to stdout
qt: more watchonly -> watch-only
qt: Update some messages after suggestions by translators
qt: Change transifex slug to new resource for 0.10.x
English translation update
qt: Remove an obscure option no-one cares about
univalue: remove unused methods getArray, getObject
Replace the temporary file hack currently used to change Bitcoin-Qt's dock icon (OS X) with a buffer-based solution.
Add GetNetworkName function
Add IsReachable(net) function
Allow -onlynet=onion to be used
Simplify and rename CheckWork to ProcessBlockFound
Process fee estimate file into temporary vector first to let sanity checking complete.
Added systemd .service file in order to help distributions integrate bitcoind.
Update openssl.org URL to include https://
script.h: set_vch() should shift a >32 bit value
Add "bitcoin-tx" command line utility and supporting modules.
bitcoin-cli, rpcrawtransaction: harmonize "{" styling
core_read's ParseScript(): minor cleanups
Move ParseScript() helper, becoming accessible outside src/test/
Consolidate CTransaction hex encode/decode into core_io.h, core_{read,write}.cpp
Avoid querying DNS seeds, if we have open connections.
contrib: remove getwork-based pyminer
Remove hopelessly outdated build-msw.md
Update coding style and add .clang-format
Add warning comment to getinfo
[Qt] remove ProxySocksVersion from OptionID
Rework block processing benchmark code
[Qt] small Qt-only include cleanup
Add comment about never updating nTimeOffset past 199 samples
Add missing FindNode prototype to net.h
doc: remove any mention of SOCKS4
ui: Make sure sendcoinsentry signals only connected once
qt: Remove unused functions from BitcoinUnits
qt: Use fixed-point arithmetic in amount spinbox
Bugfix: make CCoinsViewMemPool support pruned entries in underlying cache
gitian: remove unneeded option after last commit
build: fix broken boost chrono check on some platforms
Harmonize importprivkey and importaddress documentation
CBloomFilter::clear() method
remove an unneded .c_str() in OpenNetworkConnection()
Revert "CBloomFilter::clear() method"
Revert "Relay double-spends, subject to anti-DOS"
Revert "UI to alert of respend attempt affecting wallet."
Revert "Add -respendnotify option and new RPC data"
Revert "Add release notes entry"
Revert "Formatting, spelling, comment fixes."
Revert "Check signatures before respend relay"
Revert "Remove signal DoubleSpendDetected, use function"
qt: Move SplashFinished to after ClientModel/WalletModel creation
qt: Make error message for failed export a little friendlier
Update README.md
script tests: add tests for CHECKMULTISIG limits
Introduce option to disable relay/mining of bare multisig scripts in TX outputs
script test: test case for 5-byte bools
script tests: value with trailing 0x00 is true
script tests: values that overflow to 0 are true
script tests: BOOLAND, BOOLOR decode to integer
additional test for OP_SIZE in script_valid.json
build: fix whitespace in pkg-config variable
build: allow linux and osx to build against static qt5
build: silence false errors during make clean
[Qt] Prevent balloon-spam after rescan
prevent SOCKET leak in BindListenPort()
net: add SetSocketNonBlocking() as OS independent wrapper
Convert closesocket 'compat wrapper' to function in netbase
fix help message for RPC getpeerinfo
Make sure CAutoFile for fees estimate goes out of scope
Break up CAddrMan's IMPLEMENT_SERIALIZE
Remove tx from AlreadyAskedFor list once we receive it, not when we process it.
Add a new checkpoint at block 295,000
qt: Start core thread only when needed
Add peerid to getpeerinfo to allow correlation with the logs.
Add vout to ListTransactions output
ui: Replace some LogPrintfs with qDebug()
Can't log to debug log before chain params initialized
Add helptexts for -whitelist and rpc prioritisetransaction and switch to bitcoin instead of satoshis
Use unordered_map for CCoinsViewCache with salted hash
Add option to disable 077 umask (create new files with system default umask)
qt: Ignore showNormalIfMinimized in initialization or shutdown
Set -discover=0 in regtest framework
Reject transactions with excessive numbers of sigops
Clarify that redeemScript is often optional
In -? output: -keypool, -gen, -genproclimit depend on ENABLE_WALLET
-datadir is now allowed in config files
Do not flush the cache after every block outside of IBD
Only keep setBlockIndexValid entries that are possible improvements
`getrawchangeaddress` should fail when keypool exhausted
Add test for getblocktemplate longpolling
getblocktemplate: longpolling support
Clean up RPCs that are disabled in safe-mode.
Avoid a segfault on getblock if it can't read a block from disk.
Introduce whitelisted peers.
Only remove actualy failed blocks from setBlockIndexValid
Print better errors, and add util stop_node() function.
Refactor common RPC test code to BitcoinTestFramework base class
make RandAddSeed() use OPENSSL_cleanse()
move rand functions from util to new random.h/.cpp
add GetRandBytes() as wrapper for RAND_bytes()
init.cpp: log fee estimates filename on error
Payment request parsing on startup now only changes network if a valid network name is specified.
build: fix win32 static linking after libtool merge
build: re-add AM_LDFLAGS where it's overridden
Improved logging and Decimal support
Update Debian packaging description for new bitcoin-cli
Fee fixes
Add comments re BitcoinUnits::formatWithUnit/formatHtmlWithUnit
Remove unused fAlign argument from BitcoinUnits::format and friends
Show bitcoin quantities with full precision, even in the presence of trailing zeros
test/bloom_tests: Use UL suffix for unsigned long number to ensure compatibility
Bugfix: strerror_r can return an error, and if it does, POSIX does not specify the content of the buffer
Add translation mailing list to README.md
Use GetBlockTime() more
Move ui_interface to bitcoin_server.a
qt: Pick translation messages only from necessary files
Rename SendMoneyToDestination to SendMoney.
error out, when we detect -socks argument
remove SOCKS4 support from core and GUI
Use pong receive time rather than processing time
Send rejects and apply DoS scoring for errors in direct block validation.
Add CChain::GetLocator() unit test
Remove unused variable
[Qt] Replace status bar unit icon with actual images
[Qt] seed OpenSSL PNRG with Windows event data
[Qt] remove dup includes in bitcoingui
rpc: Prevent easy memory exhaustion attack
Add libtool generated files to .gitignore
Show nodeid instead of addresses (for anonymity) unless otherwise requested.
Move fee policy out of core
Sanity checks for estimates
Use fee/priority estimates in wallet CreateTransaction
Clarify error message when invalid -rpcallowip
CBlockIndex()::SetNull() method to avoid code repetition
Remove signal DoubleSpendDetected, use function
replaced MINE_ with ISMINE_
fixed bug where validateaddress doesn't display information
fixed bug in ListReceived()
Added MINE_ALL = (spendable|watchonly)
removed default argument values for ismine filter
Use script matching rather than destination matching for watch-only.
added includedWatchonly argument to listreceivedbyaddress/...account
added includeWatchonly argument to 'gettransaction' because it affects balance calculation
fixed tiny glitch and improved readability like laanwj suggested
Added argument to listtransactions and listsinceblock to include watchonly addresses
Showing 'involvesWatchonly' property for transactions returned by 'listtransactions' and 'listsinceblock'. It is only appended when the transaction involves a watchonly address.
Added argument to listaccounts to include watchonly addresses
Added argument to getbalance to include watchonly addresses and fixed errors in balance calculation.
Watchonly transactions are marked in transaction history
Watchonly balances are shown separately in gui.
qt: Hide unspendable outputs in coin control
Add support for watch-only addresses
Update Gitian Build guide to include OSX
qt: fix 'opens in testnet mode when presented with a BIP-72 link with no fallback'
Check signatures before respend relay
Clean up release-process.md after OS X gitian changes
libsecp256k1 integration
secp256k1: Add build-side changes for libsecp256k1
secp256k1: add libtool as a dependency
qt: Change serious messages from qDebug to qWarning
qt: Log messages with type>QtDebugMsg as non-debug
typedef std::map<uint256, CCoins> to CCoinsMap
fix copyright string in two of our *.rc files
http to https, 2013 to 2014
Add skiplist unit tests
Add a skiplist to the CBlockIndex structure.
Track peers' available blocks
Update verify.sh script to point to bitcoin.org
fix RPC error replies
Move non-trivial uint256.h methods to uint256.cpp
Correct comment for 15-of-15 p2sh script size
Add note about PPA to build instructions
Replace HexBits with strprintf
Update OS X build instructions
doc: Add historical release notes for 0.9.2
Display unknown commands received.
Show only one zero instead of many when getblocks request received with a hashStop of uint256(0)
Formatting, spelling, comment fixes.
Add release notes entry
Add -respendnotify option and new RPC data
UI to alert of respend attempt affecting wallet.
Relay double-spends, subject to anti-DOS
CBloomFilter::clear() method
set shutdown title to main window title
minor code format fix in rpc-related files
Move AcceptedConnection class to rpcserver.h.
RPC code movement: separate out JSON-RPC execution logic from HTTP server logic
RPC cleanup: Improve HTTP server replies
RPC client: Simplify command line string-to-JSON-value conversion code
Use async name resolving to improve net thread responsiveness
Simplify build instructions
Add an option to allow users to disable relaying/mining data carrier transactions
Allocate more space if necessary in RandSeedAddPerfMon
JSON-RPC method: prioritisetransaction <txid> <priority delta> <priority tx fee>
update coding.md to reflect changes by pull
add OpenSSL RAND_cleanup() on OpenSSL shutdown
add missing BOOST_FOREACH indentation in ThreadSocketHandler()
small cleanup of #ifdefs in BindListenPort()
ensure clean and consistent "namespace" usage
Remove timing-based signature cache unit test
[Qt] New status bar Unit Display Control and related changes.
Move coins.cpp and keystore.cpp to libbitcoin_common
Remove unnecessary dependencies for bitcoin-cli
Move network-time related functions to timedata.cpp/h
Update .gitignore
Consistent lettering
Add dependencies for Mac OSX gitian builds
[Qt] fix links in about window not opening
remove -tor compatibility code (only allow -onion)
replace 3 separate calls to WSAGetLastError() with 1
move pow constants to chainparams
Refactor proof of work related functions out of main
Relax IsStandard rules for pay-to-script-hash transactions
build: fix build weirdness after 54372482.
qa/rpc_tests: Wait for handshake to complete in connect_nodes
Issue warning if collecting RandSeed data failed
[Qt] don't allow translation of our example btc address
doc: Remove unused section from release-process.md
change "char pch[200000]" to "new char[200000]"
Avoid undefined behavior using CFlatData in CScript serialization
remove unneded class CNodeCombinedStats; from rpcconsole.cpp
add missing vhListenSocket.clear(); to CNetCleanup()
remove unused CNode::Cleanup()
miner: indentation fixes, remove for (;;)
Code simplifications after CTransaction::GetHash() caching
Add CMutableTransaction and make CTransaction immutable.
Add <Hasher>::OUTPUT_SIZE
crypto: create a separate lib for crypto functions
crypto: explicitly check for byte read/write functions
build: move bitcoin-config.h to its own directory
Extend and move all crypto tests to crypto_tests.cpp
Move {Read,Write}{LE,BE}{32,64} to common.h and use builtins if possible
Add built-in RIPEMD-160 implementation
Move crypto implementations to src/crypto/
Add built-in SHA-1 implementation.
Switch miner.cpp to use sha2 instead of OpenSSL.
Remove getwork() RPC call
Switch script.cpp and hash.cpp to use sha2.cpp instead of OpenSSL.
Add a built-in SHA256/SHA512 implementation.
Add comment regarding experimental-use service bits
Add nLocalServices info to RPC getinfo
Allocate receive buffers in on the fly
small cleanup in src/compat .h and .cpp
AvailableCoins: acquire cs_main mutex
rpc: Add acceptors only when listening succeeded
rpc: Ignore and log errors during cancel
Add "chain" to getmininginfo, improve help in getblockchaininfo
Get rid of Params().RPCisTestNet()
add comment to HelpMessage() to ensure alphabetical ordering
Added encryptwallet call to bitrpc.py
sanity: hook up sanity checks
sanity: add libc/stdlib sanity checks
sanity: autoconf check for sys/select.h
[Qt] Change Coin control labels and tooltips because of non-rounding fees
Let -zapwallettxes recover transaction meta data
Remove `using namespace std` from header file
Add `-stopafterblockimport` option
[Qt] rename In:/Out: to Received/Sent in traffic tab
Remove cli functionality from bitcoind
bitcoin-cli, rpcclient: prefer EXIT_FAILURE cstdlib constant
Add DNS seed of open-nodes.org
qt: Unify AboutDialog and HelpMessageDialog
Add 'about' information to `-version` output
Ignore too-long redeemScripts while loading wallet
Remove -beta suffix
add NetworkIDString() to chainparams
base58: add paranoid return value checks
Add testnet DNS seed of Alex Kotenko.
remove unused code from getblockchaininfo()
util: Add function FormatParagraph to format paragraph to fixed-width
Add `-version` option to get just the version
convert an if into an else if in OpenNetworkConnection()
small cleanup of net
rework help messages for fee-related options
[Qt] allow setting listen via GUI
Updated Debian example bitcoin.conf with config from wiki + removed some cruft and updated comments
build: Add a top-level forwarding target for src/* objects
remove wrong ; in chainparams.h and order includes
remove unused UPnP code from main.h
small formatting, indentation and comment fixes
Remove unused Print/PrintHex functions
Ping automatically every 2 minutes (unconditionally)
Push cs_mains down in ProcessBlock
Move all post-chaintip-change notifications to ActivateBestChain
Allow ActivateBestChain to release its lock on cs_main
Get rid of the static chainMostWork (optimization)
Move checkpoint based heuristic checks to AcceptBlockHeader
Update translation_process.md
[Qt] Remove CENT-fee-rule from coin control completely
[Qt] Improve rpc console history behavior
qt: Periodic translation update
estimatefee / estimatepriority RPC methods
Allow multiple regression tests to run at once
Type-safe CFeeRate class
build: fix version dependency
build: quit abusing AM_CPPFLAGS
build: avoid the use of top_ and abs_ dir paths
build: Tidy up file generation output
build: nuke Makefile.include from orbit
build: add stub makefiles for easier subdir builds
build: delete old Makefile.am's
build: Switch to non-recursive make
gitian: upgrade OpenSSL to 1.0.1h
Remove global strWalletFile
[Qt] add BerkeleyDB version info to RPCConsole
log used config file to debug.log on startup
Remove side effect in assertion in ProcessGetData
Use Params().NetworkID() instead of TestNet() from the payment protocol
Make max number of orphan blocks kept in memory a startup parameter (fixes #4253)
net.h was using std namespace through chainparams.h included in protocol.h
Replace virtual methods with static attributes, chainparams.h depends on protocol.h instead of the other way around
Get rid of TestNet()
Add RPCisTestNet chain parameter
Add RequireStandard chain parameter
Add AllowMinDifficultyBlocks chain parameter
Move majority constants to chainparams
Get rid of RegTest()
Add DefaultCheckMemPool chain parameter
Add DefaultMinerThreads chain parameter
Add MineBlocksOnDemand chain parameter
Add MiningRequiresPeers chain parameter
Remove double-dash parameters from mapArgs
key.cpp: fail with a friendlier message on missing ssl EC support
CWallet: fix nTimeFirstKey init, by making constructor init common code
Some documentation fixes + link to my Docker/LXC guide
VerifyDB progress
[Qt] style police and small addition in rpcconsole
Qt: Add GUI view of peer information. #4133
Properly initialize CWallet::nTimeFirstKey
doc: Update hash in release process for new windows deps intermediate
gitian: make linux qt intermediate deterministic
Make links on 'About Bitcoin Core' into clickable (squashed 5 comits into one)
Periodic language update
remove dup of extern int nConnectTimeout; in netbase
Remove template matching params from GetOpName()
Use pnode->nLastRecv as sync score directly
Limit number of known addresses per peer
No references to centralized databases in help text.
gitian: Add cfields to gitian download scripts
rename fNoListen to fListen and move to net
Spelling fix in comment
release: Bump the OSX SDK to 10.7 for gitian builds
doc: Add historical release notes for 0.9.1
qt: Periodic language update
Add Tips and Tricks section to README
Replace non-threadsafe gmtime and setlocale
doc: Clarify wording about testing in README.md
Replace non-threadsafe strerror
Update test_main.cpp
Remove forward declaration for non-existent class CCoinsDB
Remove redundant c_str
qt: Periodic language update
gitian: Add OSX build descriptors
Doc: Always use absolute paths
Add missing LOCK(cs_main)
add DEFAULT_UPNP constant in net
Remove unused imports in macdeploy script
remove CPubKey::VerifyCompact( ) which is never used
remove GetMedianTime( ) which is never used
remove LookupHostNumeric( ) which is never used
remove LogException( ) which is never used
remove CTransaction::IsNewerThan which is never used
remove CWallet::AddReserveKey which is never used
Remove extraneous c_str
Remove fDaemon flag checking on return from main(), which is useless and looks really strange.
Implement SI-style (thin space) thoudands separator
SetupEnvironment() - clean commit
remove ParseString(...) which is never used
removed a few unnecessary casts
json_spirit: #include <stdint.h>
switch from boost int types to <stdint.h>
Add Python test for -rpcbind and -rpcallowip
Support IPv6 lookup in bitcoin-cli even when IPv6 only bound on localhost
Add -rpcbind option to allow binding RPC port on a specific interface
qt: periodic language update
LoadBlockIndexDB(): Require block db reindex if any blk*.dat files are missing.
Enable paranoid corruption checks in LevelDB >= 1.16
Add CODESEPARATOR/FindAndDelete() tests
rpc: keep track of acceptors, and cancel them in StopRPCThreads
doc: remove mention of `-rpctimeout` from man page
rpc: Make sure conn object is always cleaned up
rpc: pass errors from async_accept
Switch stdout to line buffering
ProcessGetData(): abort if a block file is missing from disk
Move base58.h implementation code to base58.cpp
fixes #4163
Squashed 'src/leveldb/' changes from 9094c7f..7924331
Move bignum.h to test/
Reduce bignum.h now it is only needed for scriptnum_tests
Add tests for BoostAsioToCNetAddr
Remove unused function WildcardMatch
rpc: Use netmasks instead of wildcards for IP address matching
net: Add CSubNet class for subnet matching
Use new function parseint32 in SplitHostPort
util: add parseint32 function with strict error reporting
Deduplicate uint* comparison operator logic
Move {Get,Set}Compact from bignum to uint256
Add multiplication and division to uint160/uint256
Exception instead of assigning 0 in case of wrong vector length
Deduplicate shared code between uint160 and uint256
build: fix: remove error output
qt: fix compile issue in Qt GUI
Check redeemScript size does not exceed 520 byte limit
Increase IsStandard() scriptSig length
Do not trigger a DoS ban if SCRIPT_VERIFY_NULLDUMMY fails
Add rejection of non-null CHECKMULTISIG dummy values
[Qt] fix ugly typo in bitcoin.cpp
Add missing cs_main lock to VerifyDB
ui: Check for !pixmap() before trying to export QR code
build: fix make clean on OSX
[Qt] ensure payment request network matches client network
Remove dummy PRIszX macros for formatting
[Qt] fix Qt slot problem in receivecoinsdialog
qt: periodic translations update
Remove NumBlocksOfPeers
rpc: add `getblockchaininfo` and `getnetworkinfo`
add DEFAULT_TRANSACTION_FEE constant in wallet
Let tx (in)valid tests use any SCRIPT_VERIFY flag
Create (MANDATORY|STANDARD)_SCRIPT_VERIFY_FLAGS constants
doc: remove specific mention of boost 1.55
don't use sed's -i option to stay posix compliant
reorder includes to compile on OpenBSD
stop bitcoind/bitcoin-cli processes that might have been left running
gitian: use right qt tools in linux build
better std::exception logging for CAddrDb
Wording
Removed LevelDB changes
Remove build-time no-IPv6 setting
Full translation update
devtools: add a script to fetch and postprocess translations
qt: add transifex configuration file
Update build instructions for Berkeley DB
Log BerkeleyDB version at startup
devtools: have symbol check script check for exported symbols
gitian: don't export any symbols from executable
gitian: build against Qt 4.6
use standard __func__ instead of __PRETTY_FUNCTION__
Correct indentation
qt: Periodic translations update
Update contrib/debian for autotools, among a few other tweaks
[Qt] Optionally add third party links to transaction context menu
devtools: add script to check symbols from Linux gitian executables
Split AcceptBlockHeader from AcceptBlock.
Split up CheckBlock in a block and header version
Add CLIENT_VERSION_REVISION to mac osx info plist
Add MESSAGE_START_SIZE from chainparams when loading blocks from external files.
Add missing AssertLockHeld in ConnectBlock
qt: get required locks upfront in polling functions
Add required locks in tests
[Qt] importwallet progress
Replace DecodeBase58/EncodeBase58 with direct implementation.
script: Add test for CScriptNum
script: add additional script tests
script: remove bignum dependency
script: switch outside users to CScriptNum
script: switch to CScriptNum usage for scripts
script: add CScriptNum class
Solve chainActive-related locking issues
Add AssertLockHeld for cs_main to ChainActive-using functions
Translation update 2014-04
Pointed to location of BDB 4.8 in procedure for unix build.
Update doc/gitian-building.md for new gitian
VERSION obtained from source instead of the previous git tag.
[Qt] catch Windows shutdown events while client is running
qt: remove de_AT translation
/contrib index reorg
Improve and expand base58 comments
Added Blockchain Bootstraping Tutorial
build: add symbol for upcoming gcc 4.9's libstdc++
doc: add note about translations to README.md
gitian-linux: --enable-glibc-back-compat
build: add an option for enabling glibc back-compat
build: add glibc/libstdc++ back-compat stubs
Correct some proxy related socket leaks.
Prevent socket leak in ThreadSocketHandler.
Changed bitrpc.py's raw_input to getpass for passwords to conceal characters during command line input. Getpass is in Python stdlib so no additional dependencies required.
doc: update expected intermediate dependency hashes
Bugfix: configure: Look in libx32 subdirectory for boost libraries
gitian: upgrade miniupnpc input to 1.9
doc: remove versions from build-unix.md, just refer to release-process.md
gitian: Version bump for Qt dependency
gitian: upgrade openssl to 1.0.1g for both win and linux
Restart-warning for spendZeroConfChange option
build: Sync ax_boost_base.m4 with upstream.
Show error message if ReadConfigFile fails
Doxygen-compatible comments in coding style
Move assert(pindexNew); to above where we dereference pindexNew.
Added instructions for when wrong openssl detected after brew link
Update README.md
Have pull-tester run the listtransactions.py regression test
Edit subsidy_limit_test to account for BIP42
Add gitian build guide
added list/get received by address/ account tests
[Qt] rescan progress
added many rpc wallet tests
[Qt] small cleanup of coincontroldialog
unified and better log/error messages for CDBEnv/CDB
add checks for deserialization errors
Add application category for OSX
Add code generating data/sighash.json test data
Add sighash tests from data file
Use the new name Bitcoin Core Daemon instead of Bitcoin server
Wrap create_directory calls in try...catch blocks.
Organize RPCCommands table
qt: Don't require db_cxx.h when wallet disabled
doc: Add note about memory reqs for compilation
build: improve missing boost error reporting
Remove weights from download config for now as it's unclear how it will be used in future.
Add Andreas Schildbach to gitian download scripts.
Add nHighTransactionFeeWarning as per #3969.
Make GetAvailableCredit run GetHash() only once per transaction.
remove an assignment which is never used.
'sendrawtransaction' improvements
add constant for shared (GUI/core) -par settings
[Qt] fix style, formating, comment and indentation problems
Remove duplicate from src/makefile.am
gitian: add statically built variant of bitcoind/bitcoin-cli
improve command-line options output
qt: Only override -datadir if different from the default
qt: Do proper boost::path conversion
Update moved and dead links
fix permissions in application bundle
RPC command getmininginfo showing right genproclimit
Remove stale and redundant src/.gitignore file
Ignore temporary object files
doc: version bump Doxyfile
Update gitian README.md
qt: translation update
[Qt] remove space from translation of client bitness
build: hook up "make deploy" for cross osx builds
build: ensure the correct strip is used for osx/win32
build: if cross-compiling for an apple host, locate some additional tools
build: fix qt.conf case-sensitivity in the deployed dmg
build: allow correct tools to be used for dmg creation.
build: build qt tests after qt libs/executable
Consistent use of 'sudo' in unix build doc
0.9.0 release notes
doc/README.md: remove 'rc' label for 0.9.0 version, in title
[Qt] add expert section to wallet tab in optionsdialog
Add licenses for tests and test data
build: fix explicit --disable-qt-dbus
Revert "Squashed 'qa/rpc-tests/python-bitcoinrpc/' content from commit e484743"
qt: Show weeks as well as years behind for long timespans
qt: change CT_NOW string to CT_NEW in log message
Add new DNS seed from bitnodes.io.
qt: Enable and disable the Show and Remove buttons for requested payments history based on whether any entry is selected.
[Qt] Dont set table color in coin control
Update docs about boost on unix
qt: Show also value for options overridden on command line
Add a "relayfee" field to getinfo.
Test CHECKMULTISIG with m == 0 and n == 0
Adjust branding in datadir lock error message
[Qt] Fill in label from address book also for URIs
minor style cleanups
qt: Make it possible again to specify -testnet in config file
Add script test to prove that OP_0 evaluates as the empty vector, rather than [0].
Also switch the (unused) verification code to low-s instead of even-s.
Make mining fee policy match relay fee policy.
qt: Remove control characters from ko_KR translation
Transifex pull pre-0.9.0rc3/final
doc/build-unix.md  use github flavored md for table
add --enable-debug for configure
qt: Adjust BLOCK_CHAIN_SIZE to 20GB
Minor code cleanup: remove indentation
MainNet is the special case for the GUI
Remove unused includes of boost lexical_cast
AddToWallet implies BindWallet
gui: Prevent status icons from being cut off
Update the list of threads to the current state.
Slightly tweak error when unable to bind port
Log which wallet is used during init
Total money limit test
Clarify the error message when unable to bind to port
Bitcoin is running fine...
update bash-completion for v0.9
build: Version bump to 0.9.99, disable IS_RELEASE
[Qt] show number of in/out connections in debug console
replace custom GetFilesize() with boost::filesystem::file_size()
doc: Empty release notes for next release
English translation update
Python-based regression tests
Squashed 'qa/rpc-tests/python-bitcoinrpc/' content from commit e484743
qttools5-dev is required in order to build with qt5 on debian and ubuntu
qt: Modernize 'confirmed' terminology in shown tx status
Make tinyformat errors raise an exception instead of assert()ing
Re-enable UPnP by default in gitian builds
Transifex pull pre-0.9.0rc2
Update build instructions for db4.8 on Debian and Unix
Update build information
move wallet info stuff to "getwalletinfo" rpc (left original wallet stuff in getinfo call for backwards compatibility)
Add shell null to else block
script: reduce OP_RETURN standard relay bytes to 40
Remove CWalletTx::vfSpent
convert tabs to whitespace in bitrpc.py
Replace PrintException with PrintExceptionContinue + throw
Require OSX 10.6, 64-bit
Document that CPubKey.IsValid() is consensus critical
gitian: Make protobuf win32 intermediate output deterministic
Test for walletbackup/walletdump RPC calls
Remove definition of PRI?64 in util.h
Get rid of C99 PRI?64 usage in source files
fix broken link to contrib/devtools
Make the signrawtransaction docs explicit that the arguments can be 'null'.
Don't use PRIx64 formatting derives from inttypes.h
gitian: add libz-dev dependency package for linux boost
Remove "conflicted" as transaction category.
script: tighten multisig non-standard rules: do not relay pubkeys above 65 bytes
add test of DecodeBase58 skipping whitespace
Add progress to initial display of latest block downloaded.
Display progress of rescan.
qt: Rename 'Confirmed' balance to 'Spendable' on overview page
Wallet locking fixes for -DDEBUG_LOCKORDER
Change new constants in txdb.h to int64_t
[Qt] small .ui cleanup for optionsdialog and coincontrol
add constants for shared (GUI/core) -dbcache settings
Increase default dbcache to 100 MiB
Serialize only CTransaction data in gettransaction RPC hex
remove orphan fHaveGUI from main.h
always show syncnode in getpeerinfo (fixes #2717)
Document new `walletpassphrase` behavior in 0.9
qt: Add option to (not) spend unconfirmed change
[Qt] allow translation of client bitness
Track and report wallet transaction clones
qt: GUI for conflicted transactions
Add -zapwallettxes cli/config option, used for wallet recovery
Handle "conflicted" transactions properly
Make qa/rpc-tests/ compatible with OSX
Add raw transaction hex to `gettransaction` wallet RPC
Make qa/rpc-tests/ compatible with OSX
fix non-standard reason string in main.cpp
Rename IsConfirmed to IsTrusted to better match the intended behavior.
If requested, actually treat uncomfirmed change as being uncomfirmed
Add HasCanonicalPushes(), and use it in IsStandardTx
Move IsPushOnly() to script.cpp
Add option to avoid spending unconfirmed change
gitian: sort generated source distribution archive for windows
gitian: Post-process .a libraries for win to be deterministic
gitian: add -D flag to ar for deterministic output for linux deps
linearize.py: Harmonize rpcpass to rpcpassword
gitian: Sort generated source distribution archive
Copyright header updates s/2013/2014 on files whose last git commit was done in 2014. contrib/devtools/fix-copyright-headers.py script to be able to perform this maintenance task with ease during the rest of the year, every year. Modifications to contrib/devtools/README.md to document what fix-copyright-headers.py does.
Log warnings when bootstrap files are specified but cannot be opened
doc: add gist link to 'reject' P2P message mention in release notes
Correct/add/merge a few release notes entries
Per-peer block download tracking and stalled download detection.
Cleanup v0.9 release notes
gitian: Make windows dependencies outputs fully deterministic
doc: add preliminary release notes for 0.9.0
remove setting methods in wallet/walletdb
[Qt] remove broken OptionsModel::Upgrade()
Update the address for downloading libpng
gitian: Make linux boost dependency completely deterministic
gitian: Make linux build of OpenSSL deterministic
-Wl,-z,relro and -z,now were wiping out environmental LDFLAGS passed in by the user. I moved them to HARDENING_* where they belong.
Typo fix: `anonimized => anonymized` + `infromation => information`
added missing homebrew qt dependency on mac osx build documentation.
Gitian fixes for 0.9.0rc1 build
[Qt] Improve single step in bitcoinamountfield
Limit the number of orphan blocks
build: Make sure historical release notes end up in distributions
small changes to rpc command help message strings
doc: Add historical release notes
Final bitcoin_en update before 0.9.0rc1
Add more data-driven tests.
Support for error messages and a few more rejection reasons
Use standard BIP 22 rejection reasons where applicable
Re-add BTC/KB in help message for `settxfee`
qt: Add closing newline to help message
Bump version numbers for 0.9.0rc1 release
qt: Transifex pull before 0.9.0rc1
[Qt] minor receive tab improvements
[Qt] extend validate line edit and btc address validator
Mention `*` value for account in documentation for `getbalance` RPC
Re-add newline to error() messages
[Qt] fix bitcoin: URI strings (spelling fixes)
Add check for valid keys in `importprivkey`
use english for all reason strings in IsStandardTx()
build: use -mwindows for gui targets when linking with mingw
Prepare block connection logic for headers-first.
Move only: extract WriteChainState and UpdatedTip from SetBestChain.
log parameter interactions to debug.log
qt: Translation update
[Qt] harmonize strings used when exporting in addressbookpage
Updated fallback seed nodes from sipa's DNS seeds
Unit test fixes for AssertLockHeld / -DDEBUG_LOCKORDER
ui: Clarify help messages for 'message' fields
Remove redundant .c_str()s
Typesafe strprintf/error/LogPrint functions
build: fix typo in configure help message
[Qt] move helpmessage from debug window to main menu
build: Add -static for mingw builds
[Qt] very minor style cleanups
enable full GCC Stack-smashing protection for all OSes
[Qt] Show and store message of normal bitcoin:URI
build: Change package name to Bitcoin Core
build: Package docs/ and don't package source.
build: Add bitcoin-cli.exe to installer
Adapt Windows installer for 64 bit
doc: Build with qt5 is possible again
gitian: Windows 64 bit support
Don't store or send side-chain blocks lower than last checkpoint.
[Qt] Add sorting feature to the requested payments table
[Qt] Permanently store requested payments in wallet
wallet: add interface for storing generic data on destinations
Adds additional zero checks for setCompact  These encoded values should all decode to zero
Update OS X Homebrew docs to include new build dependencies
Bugfix: Use BOOST_CPPFLAGS when testing for boost sleep vs sleep_for
configure: Minor grammatical changes to be more clear
configure: Change --with[out]-qt to --with[out]-gui and add --with[out]-cli and --with[out]-daemon to support more build configurations
Bugfix: Correct captitalisation of Qt
configure: Internal changes to make building bitcoind and bitcoin-cli optional
Update linearize.py defaults to block 279,000
Add a new checkpoint at block 279,000
Cleanup LevelDB library dependencies
Bugfix: Undefine _FORTIFY_SOURCE before redefining it, to avoid warnings on compilers that define it by default
Bugfix: configure: Allow user-provided CXXFLAGS to override default optimisation, debug, and warning flags
[Qt] add utilitydialog.cpp/h and helpmessage class
Squashed 'src/leveldb/' changes from e991315..9094c7f
gitian: add optimization to win32 protobuf
qt: allow `walletpassphrase` in debug console without -server
[Qt] let OptionsModel::getProxySettings() directly query proxy
gitian: Add openssl to linux deps
gitian: Build boost dependency for linux
gitian: Reduce build time for boost windows dependency
build: Pass BOOST_CPPFLAGS to sleep implementation test
build: Allow providing extra libs for Boost Chrono
build: Auto-detect whether -DBOOST_TEST_DYN_LINK is needed
Added automake to the macports depdency list as it was required to complete the autogen.sh step as it required aclocal (which isn't included in recent versions of xcode).
Make gitian builds consistent across platforms
gitian: add explicit dependency build for linux
doc: bump boost version in release-process
Update build-unix.md
Update configure.ac
[Qt] small paymentserver header cleanup
[Qt] 2 minor translation changes
[Qt] add missing lock in walletmodel
update copyright year to 2014
build: use Ubuntu 12.04 for linux gitian build
qt: Update remaining "The Bitcoin Core Developers"
build: upgrade Qt used by windows build to 5.2.0
build: Update the other win32 deps
qt: Update copyright year in about dialog to 2014
qt: English translation update
qt: Minor message updates
qt: use series of pngs for spinner
src/leveldb/Makefile is ignored?
build: fix MacOSX build after ec41342
Tweak linearize.py to give more flexibility
[Qt] fix alphabetical ordering in Makefile.am
Store orphan blocks in serialized form
[Qt] don't regenerate autostart link on every client startup
[Qt] guard bitcoin-config.h and remove dublicated help message code
small headers ordering cleanup
makefile.am: split long lines into one file per line
GUI for --disable-wallet compiles and -disablewallet mode
build: pass correct defs and include path to moc
qt: Stop shutdown detection timer during shutdown
qt: Remove global references in bitcoin.cpp
qt: Show window while shutting down
qt: Move initialization/shutdown to a thread
qt5: fix typo causing broken selection logic
qt5: fix --with-qt with no arguments
qt5: Force macports default include path to be searched last
qt5: tests: Make sure static plugin symbols are pulled in
qt5: Use QT_SELECT for debian-based distros.
qt5: Use the info gleaned from configure for plugin importing
qt5: split out qt config and add qt5 support
qt5: fix a build issue with osx and qtdbus
qt5: Ensure correct link order
Add missing MacPorts dependencies to osx build docs
[Qt] display native dir separators in select dadatir dialog
gitian: Add -O2 for win32 build
Upgrade gitian win32 to boost-1.55.
Add test for GetTime()
[Qt] update bitcoin-qt.pro and assets-attribution.md
qt: Update translations
build: Correctly put boost at end of LDADD
qt: Better status text for mined transactions
[Qt] massive options/settings rework (no core changes)
qt: Remove unused method OptionsModel::getTransactionFee
better std::exception logging for block/undo files
qt: Add missing lock in WalletModel::listCoins
qt: protect SetAddressBook with cs_wallet lock everywhere
qt: Add missing LOCKs for locked coin functions
qt: add missing cs_wallet lock in AddressTableModel::setData
Added new DNS seed from bitcoinstats.com.
ui: Better tab order in send coins entry
"getnetworkhashps" with defaults was yielding "0", the hashrate is not 0.
Update debian/
Unittests for uint256.h
Changed Get64(.) to GetLow64()
Explicitly ensure that wallet is unlocked in `importprivkey`
extend std::exception logging in txdb.cpp
Win32: use a more modern API call in FileCommit()
qt: make wallet test consistent
Allow `-noserver` with bitcoind
[Qt] coin control change address handling update
init: add better formating for some command-line options
qt: Treat regtest as testnet
qt: Make sure overviewpage button is pressed at startup
Make bitcoin compile without wallet if "db_cxx.h" is not present
LoadWallet: acquire cs_wallet mutex before clearing setKeyPool
Document cs_wallet lock and add AssertLockHeld
Use mutex pointer instead of name for AssertLockHeld
Remove ui_interface ThreadSafeAskFee residue
Rebrand README.md
[Qt] style-police, add missing license headers
some more small re-branding changes (Bitcoin Core)
qt: Prevent non-functional GUI from popping up during Init
Don't create empty transactions when reading corrupted wallet
qt: Update English language file for translators
Seperate out wallet options in help message
qt: status WalletModel::Aborted is no longer used
Improve unit test code not to compare with explanatory messages for each platform. Instead, use have an exception object to check if the string returned by what() on the raised exception matches the string returned by what() on the expected exception instance. This way, we do not need to list all different possible explanatory strings for different platforms in the test code, and make it simple. (The idea is by Cory Fields.)
qt: use GUIUtil::dateTimeStr in coincontrol
Remove -logtodebugger
Remove unused ThreadSafeAskFee from ui_interface
Remove unused ThreadSafeHandleURI from ui_interface
Move `verifymessage` from rpcwallet to rpcmisc
Move `createmultisig` from rpcwallet to rpcmisc
Move `validateaddress` from rpcwallet to rpcmisc
Move `nTransactionFee` from main.cpp to wallet.cpp
Move `settxfee` from rpcblockchain to rpcwallet
Move `getinfo` from rpcnet to rpcmisc
add new RPC implementation file `rpcmisc.cpp`
fixed documetation on hardening flags
update help for -blockmaxsize and blockprioritysize
Rebrand to `Bitcoin Core`
docs: remove workaround instructions now that the problem is fixed
build: fix detection of boost libs on multi-arch distros
Squashed 'src/leveldb/' changes from 936b461..e991315
Use 'make check' instead of 'make test'
build: fix syntax error on older m4/autoconf.
[Qt] fix RecentRequestsTableModel function ambiuguity
[Qt] fix possibilty to delete last sendcoins entry
Update build-osx.md
Add tests for correct and incorrect order of signatures for a multisig (P2SH)
[Qt] add messages when handling local payment request files
Release process: add section about announcing new release
Add protobuf-compiler dependency package for debian
Use thread-local storage for LogPrint(category...)
rpcwallet: use EnsureWalletIsUnlocked() where possible
[Qt] misc small Mac related changes/cleanups
cleanup includes in rpcnet.cpp
some string and indentation updates in init/rpcclient
Re-enable miner tests in --disable-wallet mode
Move internal miner functionality together
Allow mining RPCs with --disable-wallet
Add ThreadGetMyExternalIP to net thread group
Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed balance
Add main-specific node state
Restore hex to getrawtransaction vout scriptPubkey.
[Qt] misc PaymentServer changes (e.g. changes to eventFilter())
Change release-process.md to sign release tags
fix typo in rpcnet.cpp
Refuse to retransmit transactions without vins
Prevent empty transactions from being added to vtxPrev
Split off rpc_wallet_tests
Move CCryptoKeyStore to crypter.cpp
Update build-unix.md to mention --disable-wallet
Add --disable-wallet option to build system
Move CAddrDB frrom db to net
Delimit code with #ifdef ENABLE_WALLET
Move getinfo to rpcnet.cpp
Move HelpExample* from rpcwallet to rpcserver
qt: use deleteLater to remove send entries
Payment request URI syntax changed, from request=... to r=...
[Qt] small notificator and style changes
bitcoin-cli: remove unneeded dependencies (only code movement)
Sanitize assert usage and refuse to compile with NDEBUG.
[Qt] coin-control features GUI cleanup 3
[Qt] coin-control features GUI cleanup 2
Lossless image optimization
Make unit tests succeed with -DDEBUG_LOCKORDER
Add verbose boolean to getrawmempool
Refactor: move GetValueIn(tx) to tx.GetValueIn()
Remove dead transaction replacement code
Increase default -blockmaxsize/prioritysize to 750K/50K
mutex debugging routines: LocksHeld() and AssertLockHeld()
bitcoin-cli: Add missing SelectParamsFromCommandLine
src/Makefile.am: Simplify clean of leveldb
configure.ac: Check for miniupnpc headers, not just -lminiupnpc
autogen.sh: Stop passing --verbose to autoreconf
autogen.sh: Use long options to autoreconf, for self-documentation
autogen.sh: Support running from outside the source directory
autogen.sh: Use set -e to fail if any command fails
autogen.sh: Add a /bin/sh shebang.
prevent Windows redefinition warning cause by compat.h
Split up bitcoinrpc (code movement only)
Integration tests via RPC calls
qt: restore icon dock menu
Store and use a sanitized subVer
Add some additional logging to give extra network insight.
Drop fees by 10x due to the persistently higher exchange rate.
[Qt] allow deletion of payment-requests in sendcoins
contrib: add sipa's github-merge script
Move types.h include before ifaddres.h for u_int declaration
cleanup error message consistency
Remove '/': prefix always starts with '/'
setgenerate creates multiple blocks in -regtest mode
Provide build time when building from tarball:
[Qt] make a UI element in sendcoins non-validated
RPC client option: -rpcwait, to wait for server start
qt: keep a list of requested payments
Update ax_pthread.m4 to serial 21
Update ax_boost_thread.m4 to serial 27
Update ax_boost_system.m4 to serial 17
Update ax_boost_program_options.m4 serial 22
Update ax_boost_filesystem.m4 to serial 26
Update ax_boost_base.m4 to serial 21
Coincontrol cleanup (e.g. add missing license)
Add additional data update to release-process.md
qt: show all units in send confirmation
doc: small doxygen update
[Qt] use GUIUtil::setClipboard() where possible
Remove Wallet Tools
orphan spaces cleanup ;-)
core: remove includes in .cpp, if header is already in .h
[Qt] make most Windows appear centered on main GUI
qt: language update from transifex
Coin Control Features
pass nBytes as parameter to GetMinFee(..)
qt: align amounts on overview page to the right
configure: lupdate is not needed for Qt build
tests: add testcases for strprintf
Use C99 printf statements in mingw
Issue #1865 - Clean up RPC help messages
qt: GUI support for -disablewallet mode
Add -disablewallet option, to disable wallet support (and BDB)
qt: make URI scheme comparison case insensitive
init.cpp: cosmetic indent changes, preparing for no-wallet mode
[Qt] remove GUIUtil::getSaveFileName() default arguments
misc small changes to polish after include cleanup
qt: add Open URI dialog
Space saving in /doc README.
[Qt] paymentserver: start netManager in uiReady()
doc: replace DOS with MSYS shell to be more consistent
configure: Automatically disable bitcoin-qt by default, if dependencies are not met
configure: Simplify common AM_CPPFLAGS and AM_LDFLAGS to a Makefile.common
doc: add note about building on Ubuntu 13.10
Update build docs that refer to old makefile.* files.
Bump protocol version to 70002
Test alerts high at high PROTOCOL_VERSIONs
New reject p2p message
Refactor: pull alert string sanitization into util
Improve logging of failed connections
Move CCoins-related logic to coins.{cpp.h}
Make CCoinsView use block hashes instead of indices
Cleanup code using forward declarations.
Rename leveldb.{h,cpp} to leveldbwrapper.{h,cpp}.
Add a few more basic script/tx test-cases.
[Qt] rename rpcconsole window
[Qt] make event() and eventFilter() in askpassphrasedialog protected
[Qt] remove unused optionsmodel from addressbookpage
[Qt] use tr() instead of QObject::tr() in intro.cpp
qt: remove unused signal from addresstablemodel
Make time facet non-constant
qt: add license header to source files
No more fHaveGUI
Skip comparison tool on win32 since Wine breaks it
process received messages one at a time without sleeping between messages
Refactor: CTxMempool class to its own txmempool.{cpp,h}
make -logtimestamps default on and rework help-message
.gitignore: Simplify references to the same file in different directories
Check integrity of gitian input source tarballs
Make some globals in main non-public.
Do not use the redundant BestInvalidWork record in the block database.
rework an ugly hack in processPaymentRequest()
make processPaymentRequest() use a single SendCoinsRecipient
payment-request UI: use SendCoinsRecipient.message for memo
[Qt] Rework of payment request UI (mainly for insecure pr)
[Qt] sendcoinsdialog: convert QMessageBox usage to message()
transactionview: make exportClicked() use message()
transactionview: add message() signal
re-work -debug switch handling
-fuzzmessagestest=N : randomly corrupt 1-of-N sent messages
Bug fix: CDataStream::GetAndClear() when nReadPos > 0
fix wrong memcmp() usage in CKey::operator==
Generalize the remove-outputs check for fully-prunable transactions.
qt: make receive coins tab look more consistent with send coins tab
Missed an RPC port
Run block tester and test suite on Windows too (only on Jenkins)
Gracefully handle the case when a DISTDIR already exists
pull-tester.py: Re-enable coverage msg, new args to run test script
Make large-reorg tests optional in block-tester
Make util phexdigit array reusable
walletview: clarify 2 comments
walletview: make backupWallet() use GUIUtil::getSaveFileName()
qt: english language update
qt: clean up signal handling in walletframe/walletview
Re-enable BitcoindComparisonTool:
[Qt] additional small fixes for #3099 (new receive flow)
Remove redundant insert method in serialize.
GUIUtil: make getSaveFileName() use native OS path separators
Break dependency of init on wallet.
Use boost signals for callbacks from main to wallet
Remove broken PrintWallet functionality
Do not treat fFromMe transaction differently when broadcasting
Give peer time-adjustment data an own lock
Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION
Send multiple inv messages if mempool.size > MAX_INV_SZ
qt: ReceiveCoinsDialog and SendCoinsDialog should not take a gui object
[Qt] additional small fix for #3099 (new receive flow)
[Qt] misc small fixes for #3099 (new receive flow)
allow emit message() in sendcoinsdialog and walletview
qt: general polish after adding new receive flow
paymentserver: init all class members in constructor
Qt: move paymentACK handling to paymentserver
Show short scriptPubKeys correctly
Relay OP_RETURN TxOut as standard transaction type
[Qt]: fix num Blocks to maturity in Tx description
RPC: error code changes and prevent crash with walletpassphrase
bitcoingui: show main window (if hidden) on modal messages
Add test for monetary value parsing
Add test for monetary value formatting
qt: show payment information in one text area
qt: move bitcoin URI formatting to guiutil
qt: use SendCoinsRecipient for payment request information
qt: add message field to SendCoinsRecipient
qt: allow dragging, copying and saving QR code
qt: remove verify/send message and send coins from address book
qt: rework "receive coins" workflow
remove duplicate -rpcsslciphers help message from init
Revert "JSON Spirit updated to v4.06"
Revert "Switch to using raw_utf8"
splashscreen: use TestNet() instead of unneeded string processing
Prettify some /Contrib READMEs
Adding new "addrlocal" field to RPC getpeerinfo. The existing CNode::addrLocal member is revealed to the user, as an address string, similar to the existing "addr" field. Instead of showing garbage or empty string, it simply will not appear in the output if local address not known yet.
Add separate bitcoin-rpc client
Bump Year Number to 2013
Changing LockedPageManager to use a managed instance
Make -DDEBUGLOCKORDER + -debug less noisy
qt: remove awkward way of setting GUI pages
paymentserver: style fixes / cleanup
qt: merge walletstack and walletframe
Added better WalletTools description.
update default -rpcsslciphers to include TLSv1.2
add SendCoinsEntry::updateLabel() function
Finished /Contrib Index. Standardized READMEs.
Broken Link in /Doc README
Push down cs_main locking in ProcessMessage
Run node deletions outside of cs_vNodes
Allow SendMessages to run partially without cs_main
doc: build with qt5 is currently not possible
doc: remove readme-qt.md
make BitcoinAmountField::setReadOnly() usable
replace %zu with %"PRIszu" macro to prevent compiler warnings
misc spelling / space / style fixes
clientmodel: remove 2 hard-coded values, use CChainParams instead
Move CBlockLocator to core.h
Reimplement CBlockLocator's chain-related logic in CChain.
Avoid core dump if rpc port is in use.
[doc] Add testnet hidden service port to the example tor config.
Add network traffic graph
comment explaining new wallet format for key/wkey entries
Documentation Cleanup in /Doc
Update michagogo's gitian pgp key, adding UIDs
Refactor/encapsulate chain globals into a CChain class
prevent compiler redefinition warnings
don't touch addressbook when using secure payment-requests
paymentserver: use own HTML-esc / add new header const
sendcoinsdialog: display real failed address string
sendcoinsentry: small clear() and setValue() changes
Disable code-coverage builds for now
Rework pull-tester scripts, disable blockchain tester
wallet: remove automatic update of default key
Remove include of windows.h from allocators.h
Bitcoin-Qt: ensure Qt icon is shown with Qt >= 5.0
make fCommandLine a local variable in AppInit()
make appbundle target for OSX development
Re-enable win32 pull-testing
style-police: fixed badly readable code in ProcessMessage()
add missing Boost Thread join_all() call during shutdown
Bitcoin-Qt: prevent stuck/unusable debug window on exit
Hurricane Electric uses block 2001:470::, not 2011:470::
Lower maximum size for free transaction creation
Remove CENT-output free transaction rule when relaying
Added ping time measurement. New RPC "ping" command to request ping. Implemented "pong" message handler. New "pingtime" field in getpeerinfo, to provide results to user. New "pingwait" field, to show pings still in flight, to better see newly lagging peers.
special case DoS value == 0 in ProcessMessage()
HTTPS-ify the downloads for the deps
Switch the order of win32 deps and win32 qt in release-process.md
rename bitcoin-res.rc to bitcoind-res.rc
fix #3049 by changing comment for CNetAddr::IsRFC4193()
Relay OP_RETURN data TxOut as standard transaction type
RPC validateaddress: test pwalletMain for NULL (no-wallet mode)
log start and end of Shutdown()
Support absence of wallet (pwalletMain==NULL) in several locations, notably RPC.
Bitcoin-Qt: translation fixes in sendcoins
Bitcoin-Qt: add missing change from branch Qt_misc
Hardcode string in miniupnpcstring.h and remove wine requirement from deps-win32.yml
misc small spelling/indentation fixes
several small Qt-related fixes
Inline signature serializer
Update Qt 4.8.3 download link
Upgrade gitian win32 to boost-1.54.0
Upgrade gitian win32 to Precise 12.04.
Removes obselete HomeBrew patches
build: add libcrypt32 dep for new mingw. Also ensure that libgcc/libstdc++ are static-linked regardless of the toolchain config
internal miner: move 2 globals from main to miner
GUI: fix sendcoinsdialog/sendcoinsentry
Skip unspendable outputs in consistency check
Adjust weight for michagogo in gitian download scripts
Add michagogo to gitian download scripts
fix some printf -> LogPrintf leftovers
Use 'low S' as malleability breaker rather than 'even S'
Tweaks to the top-level pull-tester script
Rename BitcoinjBitcoindComparisonTool just BitcoindComparisonTool
Master pull-tester-driver python script
fix extract_strings_qt.py
Bugfix: nHeightLast instead of nHeightFirst
win32: only check for windres for win32, and fail if missing
win32: add version info to bitcoind.exe
autotools: fix the Makefile.include to be safely included anywhere.
autotools: fix subdir m4 check, never let it return -I
gitian: remove obsolete --disable-debug flag
gitian: fix win32 build after configure bdb changes
configure.ac: remove unneeded OSX flags
configure.ac: remove debug/release concept, prefer autotools default CXXFLAGS
qt: english translation update
Add src/.gitignore: ignore src/test_bitcoin
Replace printf with LogPrintf / LogPrint
Refactor: OutputDebugStringF -> LogPrint(category, ...)
Update contrib/debian: proper desktop category and update changelog
[Fee logic] Don't count txins for priority to encourage sweeping.
Add getnetworkhashps to get the calculated network hashrate
included-tests: generate binary data from test files for inclusion into test binaries
included-tests: update gitian descriptors for hexdump dependency
autotools: fix a parallel build race condition spotted by the pull-tester
More fixes for blockchain corruption on OSX.
autotools: update translation docs
autotools: check for lupdate/xgettext
autotools: add translate target for qt translations
Bitcoin-Qt: BitcoinGUI::message() updates/fixes
autotools: teach extract_strings_qt.py to respect the XGETTEXT env variable
autotools: rearrange qt sources to make them more flexible
Make validateaddress provide redeemScript
Add RPC call decodescript
Move Parse{Hash|Hex} to be usable by all RPC code
Bugfix: Since test_bitcoin is being built and run inside src/test/, try using relative directories from that point
configure: Prefer specific known-good versions of Qt metacompiler tools
build-unix.md: Remove now-redundant and unnecessary Gentoo instructions
configure: Check common include subdirectories for bdb headers, and refuse to use any version other than 4.8 by default
autotools: use an absolute path to test data
fix some cosmetic glitches in the codebase
Longer term workaround for chainstate corruption from negative versions.
Rename -tor to -onion to better reflect what it does.
Silence useless warning in src/json/json_spirit_writer_template.h to make important warnings easier to see.
configure.ac: remove superfluous bracket
qt: add vout index to transaction id in transactions details dialog
Bitcoin-Qt: Use qDebug() for printing to debug.log
autotools: switch to autotools buildsystem
Make settxfee clear that units are btc/kb.
Qt 4.8.3 r2 in gitian and release process
Add protobuf 2.5.0 download to gitian release process
Don't warn about forks while fIsInitialDownload
Bitcoin-Qt: allow to differentiate Qt log entries from core
qt: Display txfee in first sendCoinsDialog message box
fix the typo fix in linearize.py
fix help prompt
qt: Use GUIUtil::HtmlEscape to escape HTML
contrib/misc/mkbootstrap: rename to linearize.py
Add "mkbootstrap" script to contrib, for creating bootstrap.dat.
qt: Add comment to sorting step in refreshAddressTable
qt: Handle address purpose in incremental updates
Bitcoin-Qt: fixes for using display unit from options
verify vchPubKey matches calculated public key unless fSkipCheck is set
improve wallet load time by removing duplicated calls to EC_KEY_check_key and adding a hash for vchPubKey/vchPrivKey entries in wallet.dat
[raw] reject insanely high fees by default in sendrawtransaction
RPC: add getrawchangeaddress, for raw transaction change destinations
[wallet] Consider generated coins mature at COINBASE_MATURITY+1
Set Accept: application/bitcoin-paymentrequest header
miner: constify CreateNewBlock() arg scriptPubKeyIn
Document and test OP_RESERVED weirdness
move Checkpoints:fEnabled from step 2 to step 3 in init
Squashed 'src/leveldb/' changes from be1b0ff..936b461
Bitcoin-Qt: add testnet check and icon to intro dialog
RPC: getblocktemplate does not require a key, to create a block template
CreateNewBlock() now takes scriptPubKey argument, rather than a key.
Remove fAllowReuse from GetKeyFromPool.
[QT] Don't ask for a passphrase to getnewaddress.
Bitcoin-Qt: extend some checks for valid model pointers
Bitcoin-Qt: tweak Qt walletXXX.cpp/h code
Payment Protocol: X509-validated payment requests
Route qDebug() messages to debug.log
Rework when payment server is started
update SelectParamsFromCommandLine() handling/order
Refactor: Move GetAccountAddresses to CWallet
Refactor: CAddressBookData for mapAddressBook
GetDataDir(): cache paths for each network separately
Reject dust amounts during validation
translations update for 0.8.4
Update the bloom state on the real object, not the temporary one.
Squashed 'src/leveldb/' changes from a02ddf9..be1b0ff
Add MurmurHash3() unit test
Performance optimization for bloom filters.
Checkpoint at block 250,000
Squashed 'src/leveldb/' changes from ae6c262..a02ddf9
Only create signatures with even S, and verification mode to check.
Mempool consistency check
Clarified the listsinceblock help test Specifically, the fact that the command relates to wallet transactions.
Removed duplicate files.
Add missing 0x prefix in chainparams.cpp
Use HandleError() consistently to handle leveldb errors
do not call BuildMerkleTree() unnecessarily twice
Reject non-canonically-encoded sizes
Make RPC password resistant to timing attacks
Use existing RPC_INVALID_PARAMETER constant
fix typo in README.md
remove a newline from a string in init.cpp
More unit tests for NUMEQUAL
translations update for Transifex 2013-08-05
Compile into build_test when creating bitcoin-qt_test
Simplify storage of orphan transactions
Revert "Truncate oversize 'tx' messages before relaying/storing."
Move internal miner/block creation to separate miner.cpp module.
Minor miner fixes (hey hey it's fun to say)
Remove #define loop from util.h
fix string in intro.cpp, which is untranslatable on Transifex
Bitcoin-Qt: save and restore position of debug window
Make sure new wallet variables are initialized
fix possible infinite loop in intro.cpp thread
remove windows.h from crypter.cpp includes
cleanup compat.h Windows stuff
exclude CreatePidFile() function on WIN32 as it is unused
Add 'chainwork' to getblock
Don't use checkpoints and accept nonstd txn on -regtest
Add unittests for multiple ELSEs in a row
update bitcoin_en.ts to current master (2013-07-23)
Bitcoin-Qt: fix QApplication includes to match our include defaults
Switch to using raw_utf8
JSON Spirit updated to v4.06
Better warning/"alert" messages for large-work forks.
Call the -alertnotify script when we see a long or invalid fork.
Detect any sufficiently long fork and add a warning.
Bugfix: Include block creation and SSL options headings in usage
makefile.mingw: Use normal boost libraries instead of debug for Windows
Ignore SIGPIPE signal on Solaris
Add missing constant for solaris
Disable variadic template support in C++11
Bugfix: Supress "address" key in transaction details, when the destination isn't recognized
Bugfix: Avoid trying to parse outputs that aren't relevant to CWalletTx::GetAmounts
Bugfix: Store last/next wallet resend times unique per CWallet object
Bugfix: Move boost/version include from db.cpp to walletdb.cpp where BOOST_VERSION is used
BIP32 test vectors
BIP32 derivation implementation
fix invalid conversion error with MinGW 4.8.1 in net.cpp
Remove readme-qt.rst and update documentation for readme-qt.md
Prune provably-unspendable outputs
Make the rand tests determinstic. (fixes #2714)
Made the build/release process completable verbatim as listed in release-process.md
Add wtogami to gitian download scripts.
let user select wallet file with -wallet=foo.dat
RPC: add getbestblockhash, to return tip of best chain
Squashed 'src/leveldb/' changes from aca1ffc..ae6c262
README for contrib/debian
Added comments to sync.h to make it easier to understand the macros
RPC: keypoolrefill gains optional size parameter
CWallet::TopUpKeyPool() takes optional pool size argument
Log aborted block database rebuilds
Truncate oversize 'tx' messages before relaying/storing.
translation update 2013-06-25
Move core implementations to core.cpp
Calling UnregisterAllWallets() instead of UnregisterWallet(pwalletMain) in init.cpp
Added locks on the setpwalletRegistered functions in main.cpp and added an UnregisterAllWallets function.
main.h->core.h include dependency improvements.
Dump addresses every 15 minutes instead of 10 seconds
Moved CBlock from main.h to core.h
Pulled AcceptBlock out of CBlock.
Pulled CheckBlock out of CBlock.
Pulled AddToBlockIndex out of CBlock.
Pulled ConnectBlock out of CBlock.
Pulled DisconnectBlock out of CBlock.
Moved ReadBlockFromDisk implementation to main.cpp
Moved CBlock::ReadFromDisk out of CBlock to functions ReadBlockFromDisk in main.h
Moved WriteBlockToDisk implementation from main.h to main.cpp
Moved CBlock::WriteToDisk out of CBlock to inline function WriteBlockToDisk in main.h
Generalize version bytes
Add HMAC-SHA512 to hash
fix makefiles and init.cpp after chainparams merge
init.cpp: fix chainparams.h double include.
Log reason for non-standard transaction rejection
Add dumpwallet and importwallet RPCs
Add GetKeyBirthTimes to wallet
Add ExtractAffectedKeys to script
Initialize database before checking changed txindex
Refactor keytime/metadata and wallet encryption bugfix
RPC: add 'verifychain', to verify chain database at runtime
Pass check level, check depth to VerifyDB()
Introduce a CChainParameters singleton class and regtest mode.
Move implementation of some CBlockLocator methods
Markdown Cleanup - Part 2
qt: allow user to choose data directory
Refactor fee rules to make them actually readable.
Update HomeBrew osx makefile patch to account for recent changes to makefile
fixed: don't use thread::sleep_for where it's known to be broken
fixed: include boost header as necessary
Remove broken option to skip input checking for wallet txn.
Added GNU/kFreeBSD kernel name (TARGET_OS)
send tx relay flag with version
fix comment about dust logic
changes to thread code (directly use boost::thread)
allow txindex to be removed and add a reindex dialog
Wallet: optimize rescan to skip blocks prior to birthday
Wallet: store key creation time. Calculate whole-wallet birthday.
Create parent directories if needed in GetDataDir
RPC: getblock(): Accept 2nd "verbose" parameter, similar to getrawtransaction, but defaulting to 1 for backward compatibility
qt: Add total balance in overview page
Removed the main.h include from net.cpp.
Bitcoin-Qt: small updates to project file
Using boost::signals2 to message main from net.cpp.
Moved UpdateTime out of CBlockHeader and moved CBlockHeader into core.
Removed script.cpp's dependence on main.h
Moved CCoins, CTxOutCompressor, CTxInUndo, and CTxUndo to core.
Removed AcceptToMemoryPool method from CTransaction. This method belongs to the mempool instance.
Moved CInPoint to core. Removed GetMinFee from CTransaction and made it a regular function in main.
Created core.h/core.cpp, added to makefiles. Started moving core structures from main to core beginning with COutPoint.
Removed net.cpp's dependency on init.h.
Moved unrelated-to-network calls in StartNode and StopNode into init.cpp
Moved PushGetBlocks to main.cpp to eliminate dependence of net.cpp on CBlockLocator.
Get rid of db dependencies on main
osx: fix bitcoin-qt startup crash when clicking dock icon
build: kill off the QT_GUI define
build: cosmetics after last commit
build: use runtime setting for wallet rather than QT_GUI define
build: use runtime setting for displaying the help message rather than QT_GUI define
build: cosmetic: split usage string for easier formatting
build: add global var for whether or not the gui is enabled
build: split the non-gui startup routines into a new file
build: prepare to move DetectShutdownThread
Bitcoin-Qt: harmonize 2 setClientModel() functions
MaxOSX: settings fixes (#2371)
Add Linux script to limit outgoing bandwidth used by Bitcoin
Add new data-driven test-case.
Bitcoin-Qt: setup testnet GUI directly
Too many bitcoins allowed in amount. (#2401)
remove GetBoolArg() fDefault parameter defaulting to false
Qt5 compatibility
Added NSHighResolutionCapable flag to Info.plist for better font rendering on Retina displays.
Move pMiningKey init out of StartRPCThreads
Made more generic by removing specific version references
Make signature cache store CPubKeys
CSecret/CKey -> CKey/CPubKey split/refactor
Make CPubKey statically allocated
Prepare for 0.9 merge window
Don't attempt to resize vector to negative size.
Bump build number to 0.8.2.2 for v0.8.2rc3
All-resolution pixmap, to make win32 builds determisitic again
Replace repeated GetBoolArg() calls with Checkpoint::fEnabled variable set once at init time.
Explicitly #include stdarg.h, for access to va_list
Explictly cast calculation to int, to allow std::max to work.
osx: make use of the 10.8+ user notification center to display growl like notifications
Clean up mining CReserveKey to prevent crash at shutdown
translations update 2013-05-23
doc/README was replaced by README.md
More bestblock records in wallets
gitian deps-win32.yml needs psmisc package for killall to end the build
Update links in build-osx.md
Add a few data-driven tests for SIGHASH_ANYONECANPAY
CreateNewBlock performance improvements
Docs Markdown Cleanup
fix memory leak in CKey::SetCompactSignature()
translations update 2013-05-19 (for 0.8.2 release)
It's after 2013-05-15 forever now, so remove the code for the May 15 fork.
new icons for linux, etc.
Set CLIENT_VERSION_IS_RELEASE, bump build to 0.8.2.1
Make FindBlockByHeight constant-time.
Check for correct genesis
Update version numbers for 0.8.2rc1 release
Release notes for 0.8.2rc1
Link with boost_chrono library on OSX
translations update 2013-05-08
Specified base_uint component size
Use boost::asio::deadline_timer for walletpassphrase timeout
translations update 2013-05-07
Update readme with better link syntax (for clickable links) and better readability.
translations update 2013-05-04
Squashed 'src/leveldb/' content from commit aca1ffc
Remove leveldb in preparation for git-subtree
small init.cpp changes (strings / Winsock init)
Un-hardcode TX_FEE constants
CreateTransaction: return strFailReason on failure
Define dust transaction outputs, and make them non-standard
Remove flaky util thread unit tests
osx: show testnet icon in dock as early as possible
Remove implementation of disabled opcodes
clear path cache after getting a proper config file (fixes #2605)
Do not write to wallet during LoadWallet
Exit cleanly if AppInit2 returns false
Do not kill connections on recv buffer overflow
Bugfix: if no bestblock record is present, do a -rescan
Improve gettxoutsetinfo command
RPC: strictly require HTTP URI "/"
Don't announce to non-peer CNodes
Accept negative -par values to leave N CPUs free.
Try to increase file descriptor rlimit if necessary
Allow files to be opened for reading multiple times
move WSAStartup to init
Checking whether closing succeeds
Print actual Win32 error that occurred on file creation failure.
Prevent prevent file descriptor leak in ShrinkDebugFile()
fix !O_NONBLOCK where ~O_NONBLOCK was meant
qt: remove fee recommendation in settings
Add Bitcoin-Qt.app to .gitignore
qt: remove extraneous padding introduced in multiwallet support patch
Allow select()ing up to 1024 file descriptors on Windows
Allow the default key to be unavailable
translations update 2013-04-25
small updates for walletview.cpp
Remove database/ after clean shutdown
re-remove irc reference in bitcoin.conf.5
added bitcoin-qt manpage and corrected a few minus signs used as hyphens in other manpages
Try moving database/ away in case of failure
remove duplicate bitdb.Open() code from init
Reduce number of open LevelDB files to 64
Update Tor.txt for grammar fixes
Update Qt Readme to include HomeBrew setup for OSX
Add bitcoin-qt.pro homebrew patch
remove obsolete and unused typedef for Windows
Update osx build instructions to ensure users link to the correct version of OpenSSL
Do not invoke DoS for non-canonical sigs
new toolbar icon for liunx/win fix #2518
new splash screen
Add comments to UNIX Makefile regarding USE_UPNP
fixes #2506: mac binary with proper version and copyright meta-informations (Info.plist)
fix: GUI Disappearing #1522 (Mac OSX)
embed bitcoin_testnet.ico in bitcoin-qt.exe (usable for shortcuts)
Made it point to 0.8.1
overviewpage: make some code Qt5 compatible
bitcoingui: remove 2 unneeded includes
bitcoin: use static QApplication:: instead of app.
aboutdialog: use just "The Bitcoin developers" as tr()-string
qt: register metatype for bool*
Require strictly-standard encodings in mempool
qt: move export button to tabs
Use a uint256 for bnChainWork
Add test patches for pull-tester to contrib/
qt: don't show rpcconnect command line option in help
new testnet window .ico file
Bitcoin-Qt: remove " - " on empty title in BitcoinGUI::message()
fix bitcoin-qt.rc not showing up in Qt Creator
use the new COPYRIGHT_YEAR macro in bitcoin-qt.rc
move COPYRIGHT_YEAR to clientversion.h
rework ClientModel::getBlockSource() + BitcoinGUI::setNumBlocks()
better quality windows .ICO icon file
fix mac specific button modification on addressbookpage
overhaul of the testnet icon (green color) and the toolbar icons
small assets-attribution.txt updates
net.cpp: Do not change primary process name from (default) to "bitcoin-start"
new icons: overhaul oxygen icon (was to blurry)
translations update 2013-04-08
Add bytessent, bytesrecv and syncnode to getpeerinfo
Make sure we always have a node to do IBD from
Translations update: pull from Transifex
qt: remove redundant wallet methods from bitcoingui
Always print full hashes (tx, block, inv)
new windows and linux icons
moved bitcoin.svg to correct folder (qt/res/src)
Bitcoin-Qt: emit numBlocksChanged for changed reindex or importing state
Switch version numbers to 0.8.1.99
Bitcoin-Qt: update for BitcoinGUI::eventFilter()
small indentation, space, formatting fixes (no code changes)
small update to release-process.txt
remove proprietary psd file mentioning from assets-sttribution.txt
Bitcoin-Qt: add Genesis blocks time for testnet
Bitcoin-Qt: use $$TRANSLATIONS in bitcoin-qt.pro
Drop release times for CNode
add missing limitedmap.h to bitcoin-qt.pro
Update transaction statistics
Have Qt poll for shutdown requested, the QT way.
Clean up shutdown process
Port Thread* methods to boost::thread_group
LoopForever and ThreadTrace helpers
Bitcoin-Qt: updates to addressbookpage
Rename util.h Sleep --> MilliSleep
Shutdown cleanup prep-work
Bitcoin-Qt: fix GUI after initial multi-wallet patch
Bitcoin-Qt: fix opening verify message tab via main menu
move multiwallet-qt.txt from root to doc folder
new mac osx icon (including SVG Version)
Bitcoin-Qt: only use qApp for Q(Core)Application::instance()
Bitcoin-Qt: small RPCConsole cleanup
translation base files update 2013-04-02
change new mac icon license to public domain
Bitcoin-Qt: fix copy via context-menu broken
added new mac icon to assets-attribution.txt
new mac osx icon
Move mapAlreadyAskedFor to limitedmap
Add a limitedmap class similar to mruset
Revert "Actually use mapAlreadyAskedFor."
Bitcoin-Qt: fix debug window
fix "send coins" via context menu in address book
qt: remove transaction count from overview page
Words in English language are more short than in other langs usually. Tabs don't fits in line in Spanish/German/Russian when they has two words. Wallet has limited functionality. It can send & receive coins. So we can safely rename "Send coins" to "Send" and "Receive coins" to "Receive". Address book is just stored addresses.
Move GenerateBitcoins() call out of net.cpp's StartNode()
Process getdata invs separately until send buffer overflows
Bitcoin-Qt: ensure createTrayIconMenu() is always called on Mac
Use per-message send buffer, rather than per connection
Some fixes to CNetMessage processing
P2P: improve RX/TX flow control
P2P, cosmetic: break out buffer send(2) code into separate function
P2P: parse network datastream into header/data components in socket thread
qt: Improve capslock detection on non-us keyboards (issue #1855)
Don't use -dbcache for BDB anymore
Clean up global datastructures at shutdown.
Don't specify a point size for "Wallet"
Add a new testnet dnsseed (currently only static list, will update)
Update contrib/debian (including IRC removal)
(finally) Remove IRC Seed support now that lfnet is down.
Make explicitly requested salvage operations keep going when there is an error.
Show window in center of screen on first launch
Save & restore window size and position
Make MIN_TX_FEE match MIN_RELAY_TX_FEE.
Minimal architectural changes necessary to support multiple wallets in bitcoin-qt - This commit is a minimal restructuring necessary to support multiple wallets in the UI. Please see multiwallet-qt.txt for details.
2012 to 2013
Recommend alertnotify
Adding 'copy txid' to qt tx overview context menu
blockchain -> block chain (used everywhere else)
translations update 2013-03-19 (bitcoinstrings.cpp / bitcoin_en.ts)
-alertnotify=<cmd>
Deleting everything except the wallet will not help recover from BDB errors.
Some unit tests for CAlert
re-enable -D_FORTIFY_SOURCE=2 for all platforms
Bitcoin-Qt: update Win executable file meta-data copyright
update bitcoin_en.ts and bitcoinstrings.cpp
Bitcoin-Qt: add "send coins" to context menu in addressbook
Update unit test to match rule enforcement starts 21 March
Checkpoint at first block in 11 March chain fork
Before 15 May, limit created block size to 500K
CheckBlock rule until 15-May for 10,000 BDB lock compatibility
Bitcoin-Qt: massive header and cpp cleanup
harmonize 2 init messages and remove one
Also copy the address to the X11 clipboard (the one you middle-click to paste)
CRPCCommand.unlocked -> CRPCCommand.threadSafe
make vRPCCommands comment match property names
Test canonical prunable txout format explicitly
Add coverage for all invalid ops
add address and account information to listunspent
Short-circuit bloom checking if we will always return true.
Add two unittest-related files to .gitignore
Shorten a startup message. It was getting truncated and looks ugly.
small changes in init, main, checkpoints.h and bitcoin-qt.pro
reformat OS X build instrcs, add 10.8 + Homebrew
Bugfix: makefile.unix: Honour BOOST_LIB_SUFFIX on boost_unit_test_framework
Set CC/CXX properly for gitian build
Internal RNG for approximateBestSubset to prevent degenerate behavior.
Improve block database load error reporting
Improve block database load error reporting
remove outdated windows Qt build instructions
Transactions-based verification progress
Change progress bar from block-based to time-based
Minor build fixes
Pass compiler flags down into leveldb make
Enable dumpprivkey in safe mode
Reimplement click-to-pay links. Add OSX support.
Some improvements to the release notes
Add script to clean up datadirs
Use QImage.bits instead of QImage.constBits to ease backporting
Do not use C++11 std::vector.data()
translations update (bitcoinstrings.cpp + bitcoin_en.ts)
Bugfix CValidationResult for BIP30 + add DoS
Do not call ResendWalletTransactions when reindexing, importing or on IBD
Make transactions larger than 100K non-standard
Signrawtransaction shouldn't require redeemScript for non-p2sh txins.
Make sure the genesis block is present after reindex
translations update (bitcoinstrings.cpp and bitcoin_en.ts)
Bitcoin-Qt: better copyright year handling in AboutDialog
Update default URL in verify.sh
Bugfix: Enable ConnectBestBlock to properly report back validation problems, and ensure orphan processing (when their parents are found) cannot be used to counter-DDoS the node providing the parent
update and reformat README.md
Prevent Qt crash at startup with an empty data directory
Bump version numbers for 0.8 release
Correctly randomize change output position
New checkpoint at block 216116 for the 0.8.0 release
Added information about used data files
Support large files on 32-bit Linux
Add DNS seed support for testnet
Drop padding in blk* when finalizing file
Deal with LevelDB errors
Utility to create pnSeed array
Native versions for AllocateFileRange()
Improve dealing with abort conditions
Add disk space checks before flushing CCoins cache
Treat coinbase value violation as DoS
CValidationState framework
New seed nodes, from http://bitcoin.sipa.be/seeds.txt
Rename database directories
Remove support for pre-checksum undo files
Try more than the first address for a DNS -addnode.
Add a getaddednodeinfo RPC.
Add addnode RPC command.
Make ThreadOpenAddedConnections2 exit quicker if(GetNameProxy()).
Use a copy in place of mapMultiArgs["-addnode"].
Treat non-final transactions as non-standard
Check only 288 blocks at startup by default
Various performance tweaks to CCoinsView
full translations update
spendfrom.py sends coins from a particular address or addresses
Let limitfreerelay=0 reject ALL free transactions
Bitcoin-Qt: cleanup / optimise addressbookpage
added utility to dump leveldb files
Port leveldb to MinGW32
Mingw support for Windows LevelDB port
Pre-Vista leveldb::port::InitOnce implementation
Native Windows LevelDB port
Remove Snappy support
Replace leveldb/ with vanilla 1.7.0
Bitcoin-Qt: extend parseBitcoinURI() pre-check
make bitcoinrpc.cpp UTF-8 conformant again
Add a notfound message to getdata that is sent if any transactions that aren't in the relayable set are requested.
Bugfix + simplify special case for genesis
Replace 520 constant with MAX_SCRIPT_ELEMENT_SIZE
Send transactions after a CMerkleBlock when asked for it in an inv.
Code-signing certificates (no private keys) from Apple and Comodo
Port macdeployqtplus to OSX 10.8
Moved SyncWithWallets out of ProcessMessage and into CTxMemPool::accept() so that when adding multiple wallets they will be aware of each other's transactions.
Add optional transaction index to databases
enable GCC large address aware linker flag (Windows only)
Filter mempool command
Add nFlags to CBloomFilter to make filter updating optional.
Use CPartialMerkleTree for CMerkleBlock transactions.
Add CPartialMerkleTree
Add a nTweak to bloom filters to tweak the seed.
Let a node opt out of tx invs before we get a their bloom filter
Relay CMerkleBlocks when asked for MSG_FILTERED_BLOCK
Add test cases for CMerkleBlock and CBloomFilter.
Add a CMerkleBlock to store merkle branches of filtered txes.
Add a CBlock.GetBlockHeader
Automatically add any matching outputs to a filter during matching.
Replace RelayMessage with RelayTransaction.
Add a filter field in CNode, add filterload+filteradd+filterclear
Bump PROTOCOL_VERSION for filter messages.
Add a CBloomFilter class for use as a transaction filter.
Add MurmurHash3 implementation to hash.h/add hash.cpp.
Add const versions of base_uint.end()/begin(), make size() const.
Remove IsFromMe() check in CTxMemPool::accept()
update bitcoinstrings.cpp and bitcoin_en.ts (2013-01-14)
Update development process README to reflect current reality
make database init messages more valuable
add InitMessage() to noui and use debug.log for GUI
small main.h cleanup (no code changes)
Add timeoffset to getinfo RPC call
Bitcoin-Qt: use reference in setAddress_SM() and setAddress_VM()
Remove fClient
Bitcoin-Qt: fix known addressbook bugs
Display tx nLockTime correctly when set to block #
Remove contention on signature cache during block validation
Parallelize script verification
Remove CheckSig_mode and move logic out of CheckInputs()
Add CScriptCheck: a closure representing a script check
Move VerifySignature to main
Bitcoin-Qt: fix small stylesheet glitch in overviewpage.ui
Bitcoin-Qt: add a Signature label on sign message page
update noui_ThreadSafeMessageBox function to use strCaption
Bitcoin-Qt: give testnet a unique IPC message queue name
translations update (bitcoinstrings.cpp + bitcoin_en.ts)
Bitcoin-Qt: add a Reset button to the options dialog
Make output of gettxout RPC more consistent
Bitcoin-Qt: never display own block count > estimated block count
New database check routine
moved "index_in_template" to a separate variable to clarify what it is
Add checksums to undo data
Make DisconnectBlock fault-tolerant
test/util_tests.cpp: one more DateTimeStrFormat 'T' removal
OutputDebugStringF code cleanup
Remove 'T' from remaining date/time format strings.
Remove 'T' from debug log timestamps
update 2 command-line parameter help messages
If the prio. will be enough after the next block don't force fees.
Make IsCanonicalScript() check the hash type more thoroughly
use fee/sigop data in BlockTemplate struct instead of (not always correctly) calculating it ourselves
changed CreateNewBlock to return a CBlockTemplate object, which includes per-tx fee and sigop count data
Convert fRescan argument to importprivkey to bool
Split off hash.h from util.h
Updated help and tests for getreceivedby(account|address)
Upgrading to 0.8: re-use blkNNNN.dat files.
Bitcoin-Qt: comment out unused parameter in addressbookpage
Bitcoin-Qt: ensure all Windows scopes use win32 as identifier
In listaddressgroupings push down the IsMine check to run on each input.
listreceivedbyaddress now provides tx ids (issue #1149)
LevelDB: build_detect_platform fix NATIVE_WINDOWS indentation
add threadsafety.h to bitcoin-qt.pro
Compile c/objective-c code max compatiblity when RELEASE
Change timestamps to use ISO8601 formatting
OptionsModel now has MapPortUPnP=false if UPNP is not supported
Checkpoint at first 25-btc-reward block (210,000)
add rescan bool to importprivkey to control whether to do a rescan after import
Allow lengthy block reconnections to be interrupted
Update the block file counter in database when using -reindex
Reconstruct coins/ from scratch when missing.
Add -benchmark for reporting block processing times
Add GetTimeMicros() for ore accurate benchmarking
call CheckDiskSpace() before pre-allocating space
Update src/makefile.mingw
rework ThreadSafeAskFee() / askFee() functions
remove unneeded flag from MSG_INFORMATION and fix an indentation
use new message() function in BitcoinGUI
added build instructions for Ubuntu >= 12.04
Bitcoin-Qt: remove obsolete modal flag from GUI APIs
Replace text on how to enable IPv6 with disable
add 2 constructors in CDiskBlockPos to simplify class usage
Make SetBestChain() atomic
FlushBlockFile(): check for valid FILE pointer
Only send reorged txn to mempool after checkpoint
Enable script verification for reorganized mempool tx
Make test_bitcoin run in a temp datadir
Add GetTempPath() to util
New 'checkpoints' option should default to true.
Add "checkpoints" option, to permit disabling of checkpoint logic.
split of createTrayIconMenu() from createTrayIcon() in BitcoinGUI
do not silently ignore errors on "backupwallet" RPC cmd
Allow -printpriority without -debug
update CClientUIInterface and remove orphan Wx stuff
Bugfix: remove conflicting transactions from memory pool
Deploy properly with Nokia Qt installer's Frameworks
Add assert and comment for subtle pay-to-script-hash logic
Bitcoin-Qt: fix crash on Windows caused by CDBEnv::EnvShutdown()
ConnectBlock(): fix error() format to be unsigned
update bitcoinstrings.cpp and bitcoin_en.ts
ensure we use our format macros to avoid compilation warnings
Add new RPC "lockunspent", to prevent spending of selected outputs and associated RPC "listlockunspent".
RPC: Forbid RPC username == RPC password
Split off CBlockHeader from CBlock
Introduce script verification flags
Print error for coinbase-pays-too-much case of ConnectBlock failing
make enum and parameter used in Bind() unsigned
Simplify CMutexLock
Prevent RPC 'move' from deadlocking
Change block references in debug.log to full hash instead of just 0..20
Abstract block hash substr extraction (for debug.log) into BlockHashStr inline
add CWalletTx::GetImmatureCredit() and use it in CWallet::GetImmatureBalance()
Change 'make' to $(MAKE) in leveldb make command line
some small fixes for main.cpp/.h
o Annotated lock-like functions in net.h. o Removed unused function EndMessageAbortIfEmpty
o Added AnnotatedMixin which adds locking annotations to the mutex   API, compatible with clang's -Wthread-safety
o Added threadsafety.h - a set of macros using the -Wthread-safety   feature in clang.  These macros should primarily be used to   document which locks protect a given piece of data.  Secondary it   can be used to document the set of held and excluded locks when   entering a function.
o Removed verbose clang warning
One-line comments for public main functions
fix some missing indentations in main.cpp for better readability
simplify CDBEnv::Open() / fix small glitches
allow listening on -bind=address for blocked networks
make CBase58Data class use zero_after_free_allocator
don't use memset() in privacy/security relevant code parts
Add -reindex, to perform in-place reindexing of block chain files
Move ThreadImport to init.cpp
LoadExternalBlockFile switched to CBufferedFile
Add CBufferedFile
Qt: small header changes / fixes
Do not reorganize if new branch has same amount of work
VariantClear@4 + shutdown@8 patch
RPC: HTTP server uses its own ReadHTTPRequestLine() rather than reusing ReadHTTPStatus() from the client mode.
RPC, cosmetic: push down ReadHTTPStatus() calls into ReadHTTP() callers
Cache size optimizations
Remove -detachdb and stop's detach argument.
remove printf redefinition from bitcoinrpc.cpp
Add -walletnotify to call an external script on wallet transactions
Comments for constants
Add virtual destructor to CCoinsView
Bugfix: do not keep relaying spent wallet transactions
Bitcoin-Qt: use statustips in addition to tooltips
Undo bad gitian update.
Add missing calls to ranlib in Windows makefiles
Upgrade to Qt 4.8.3 (because 4.8.2 was removed from qt repos?)
Use && instead of ; in leveldb calls to makefile.
New createmultisig rpc command
Add redeemScript to listunspent output and signrawtransaction input
Tests for raw transactions argument checking
No need for test fixture now that multisig is enabled on main network.
Remove P2SH transition code: P2SH violations may cause DoS trigger
Bugfix: don't crash by trying to write unchanged best block
fix some double-spaces in strings
First flush block tree, then coin set
Added checks for null pointers in Shutdown
fix some thread related log messages
ensure AskPassphraseDialog::eventFilter forwards events
Show warning when using prerelease version
Don't force getblocktemplate to have a parameter.
Bugfix: actually use CCoinsViewMemPool
Added some comments
Bugfix: off-by-one in priority calculation
Bugfix: add missing fee check
Bugfix: off-by-one error in coinbase maturity check
change blockchain -> block chain (spelling)
fix a double inclusion of txdb.h in bitcoin-qt.pro
remove init messages from ThreadImport()
Add NATIVE_WINDOWS
Tab instead of 4 spaces in makefile.mingw
Bugfix: do not mark all future coins spent
Update version numbers to 0.7.99
Remove BDB block database support
Add gettxout and gettxoutsetinfo RPCs
Add LevelDB MemEnv support
LevelDB block and coin databases
Flush and sync block data
Use singleton block tree database instance
Prepare database format for multi-stage block processing
Automatically reorganize at startup to best known block
Direct CCoins references
Transaction hash caching
Batch block connection during IBD
Ultraprune
Pre-allocate block and undo files in chunks
Multiple blocks per file
Preliminary undo file creation
One file per block
Add CTxUndo: transaction undo information
Add CCoins: pruned list of transaction outputs
Compact serialization for amounts
Compact serialization for scripts
Compact serialization for variable-length integers
LevelDB glue
Makefile integration of LevelDB
Backport Win32 LevelDB env from C++0x to C++
Disable libsnappy detection in LevelDB
Leveldb Windows port by Edouard Alligand, adapted for MingW by me.
Import LevelDB 1.5, it will be used for the transaction database.
Move external block import to separate thread
Use CHashWriter also in SignatureHash(), and for message signing
Added script that verifies authenticity of binaries on SourceForge
Changed connect?_16.png to non-GPL one and changed the assets attribution.
Changed the spinner to a non-GPL one, added instructions on how to regenerate it, changed the assets attribution, removed old spinner + old spinner's sources.
Bitcoin-Qt: remove unneeded "--param ssp-buffer-size=1" flag
Bitcoin-Qt: add new GCC compiler hardening options
Bitcoin-Qt: intregrate current translations from Transifex
Bitcoin-Qt: update english translation master file
0.7.1 release notes
Bump versions for 0.7.1 release
Revert "Send 'mempool' P2P command at the start of each P2P session"
Don't try to verify a non-existent wallet.dat
Handle corrupt wallets gracefully.
Handle incompatible BDB environments
Handle incompatible BDB environments
CAddrMan: verify pchMessageStart file marker, before reading address data
change Q_WS_MAC -> Q_OS_MAC (Qt5 compatibility)
make optionsmodel query real proxy state for ::data()
Use fdatasync instead of fsync on supported platforms
Remove I2P support from netbase
get rid of strlcpy.h
fix wrong (signed/unsigned) printf format specifier in bitcoinrpc.cpp
Avoid crashes at shutdown due to printf() in global destructors.
Add constants for HTTP status codes
Document RPC error codes
When datadir missing, show messagebox instead of printing error to stderr
add LOCK() for proxy related data-structures
Pull changed translations from transifex
Translation update for 0.7.1
Send --help message to stdout i.s.o stderr
remove "checkorder" and "reply" P2P commands
move most explicit getters in optionsmodel to header
Revert "Remove -Wformat* warnings from makefiles"
fix -Wformat warnings all over the source
Extend printf warnings to error()
data-driven base58 CBitcoinAddress/CBitcoinSecret tests
When encrypting the wallet, warn user that old backups will become useless.
Add a backup warning to the encryptwallet RPC command
harmonize printf format characters
Windows: fix URI association setting in registry
Remove stack randomization
toHTML won't add empty wtx.mapValue elements
Remove -Wformat* warnings from makefiles
walletdb.h: remove dead code
Documented bug in sign-extension behavior of opcodes OP_AND, OP_OR, and OP_XOR.
switch to Qt 4.8.2 for Windows builds
Update comment, we're no longer using boost::interprocess::scoped_lock
change last occurance of mac to macx in Qt project-file
Send 'mempool' P2P command at the start of each P2P session to query remote node mempool contents.
Import $DataDir/bootstrap.dat automatically, if it exists.
P2P: Do not request blocks from peers with fewer blocks than us
Adds a stopdetach <detach> RPC command.  <detach> defaults to true.  Works just like stop, but overrides the commandline/config file -detachdb option.  Useful for upgrading, for example.  Lets you use fast stops usually, but force a detach when needed.  Also, allows you to do a fast stop in a system normally configured for fast stops.
Update Qt include
Bitcoin-Qt: expand GCC Stack-Smashing Protector usage (non Windows)
additional fix for #1843
Update Bugreport Links
Update Bitcoin to use OpenSSL 1.0.1c
Remove unnecessary text from tooltip in AddressBookPage
Compile/link Bitcoin-Qt.app with -pthread
fix #1843 by changing 2 GUI shortcuts
enhance Qt5 compatibility
comment update: it's -> its
Check for canonical public keys and signatures
Update gitignore and Makefiles for build.h move from src/ to src/obj
When rejected TX relay due to lack of fees, log full txid
Trim trailing whitespace for src/*.{h,cpp}
Give makefiles 'test' and 'check' targets to compile and run unit tests
Reset release notes for release-after-0.7.0
Bump client version to 0.7.0.99 now that 0.7.0 release is final.
reimplement CBigNum's compact encoding of difficulty targets
tests for SetCompact and GetCompact of CBigNum
update comment, secure_allocator is defined in allocators.h
fix signed/unsigned in strprintf and CNetAddr::GetByte()
Bump client version number for 0.7.0rc3
Do not abort if RPC listening for IPv6 fails
Cleanup on doc/build-unix.txt
Add format characters for (s)size_t and ptrdiff_t
HexStr: don't build a vector<char> first
Apply BIP30 checks to all blocks except the two historic violations.
Improve debug logging, for mempool TXs that do not include sufficient fees
Cosmetic: move CTransaction::GetMinFee out of header file
Improve RPC console key event behaviour
Remove VC6 comment and pointless #ifdef'd benchmark code
Cleanup some unused macros from util.h
Add printf-style warnings to strprintf() and OutputDebugStringF()
Apply MIT license to md2k7 art
Update translations from Transifex (100% coverage for Finnish and Chinese (China)
Partially Bugfix: Update English translation strings and translations from Transifex
Bugfix: Initialize CWallet::nOrderPosNext on an empty wallet, and save it in db
small update to release-notes.txt
Bitcoin-Qt (Windows only): add version info to Resource File
Wrong address added to collection in test
Minor build documentation fix
Build doc updates
Add various tests for CTransaction::CheckTransaction()
check tx.CheckTransaction for data-driven tx tests.
replace 2x WSAGetLastError() with 1x WSAGetLastError() call
select(): Use precise fd presence check, rather than imprecise hSocketMax test
Bump version number for 0.7.0rc2
Minor documentation updates
Update gitian build setup notes
Correct LoadWallet() return value (false -> DB_LOAD_OK)
remove double logging of startup time, when !fLogTimestamps
fix signed/unsigned usage in BlockFilePath()
Add block file naming helper, BlockFilePath()
init.cpp: fix build error, and possibly-uninit'd warning
Useless vector declaration
Remove last occurrence of potentially insecure function sprintf.
clear history when using clear button in RPC console
Bugfix: Require OrderedTxItems to provide properly scoped accounting entry list
No need to log start time if it's already being done on every line.
Bugfix: getblocktemplate: Accept optional "mode" parameter not being provided
RPC console: escaping within ' and " now handled differently
In RPC console, attempt to format errors
release-notes.txt: mention getmemorypool removal
add default value in -timeout description
add missing netbase.h to Qt project-file
enable ASLR and DEP for bitcoind.exe via linker flags
Rename CreateThread to NewThread
implement CreateThread with boost::thread
Qt: re-order GUI code
remove FIRST_CLASS_MESSAGING support from the client
Update strings for 0.7.0rc2
Remove json/*.cpp from Qt build system
Update string for Show/Hide in the tray
Don't retry a failing IRC nickname forever.
Don't force IRC off if not listening, do force it off if IPv4 is off.
Bugfix: increase score, not port
Small update to release notes regarding -seednode
Give testnet it's own alert key.
Refactor: move alert code from main to alert.cpp/h
Changed nprev->pprev
remove I2P support mention from release notes
make use of -onlynet more clear in release notes
Remove unused styles on Windows from gitian qt build
add Qt GUI part to release-notes.txt
I forgot to paint the bike shed
Add boost chrono lib for windows builds (required for boost 1.50)
Update release notes
Version numbers -> 0.7.0
Upgrade to Boost 1.50
Special-case the last alert for alert-key-compromised case
Removed duplicated lock
Bugfix: Adjust gitian-win32 to use Boost 1.49 for real
Bugfix: Move boost::interprocess Win32 workaround to Bitcoin-Qt sources, rather than hacking boost in gitian
Alert system DoS prevention
Update Czech translation from Transifex
Abstract all IPC communication to qtipcserver
Override progress bar on platforms with segmented progress bars
Qt: add copyrightLabel to aboutdialog.ui
Make 0-value outputs non-standard
Change CWallet addressgrouping to use CTxDestination instead of strings.
Qt: show mined transactions at depth 1
Avoid leaving return types or function attributes on their own lines.
Treat generation (mined) transactions less different from receive transactions
Allow building with IPv6 support, but it disabled by default
Bugfix: Make USE_UPNP=- work with makefile.{linux-mingw,mingw,osx} too
Make IPv6 support buildtime-optional again (defaults to enabled)
Add icon for "About Qt" in menu
Add txout address filtering to listunspent.
Add address groupings RPC from the coincontrol patches.
Choose reasonable "smart" times to display for transactions
JSON-RPC: Add "blocktime" and (for wallet transactions) "timereceived" to transaction Object outputs
Store a fixed order of transactions (and accounting) in the wallet
Spaces in strings
Removed useless assignment
Make CCrypter use LockedPageManager to manage locked pages
bitcoin-qt.pro: Add test sources to OTHER_FILES so that they can be edited easier in Qt creator
Update translations from transifex
Checkpoint at block 193,000
Do not accept orphan blocks in -loadblock mode
RPC: add facility to enable RPCs to run outside cs_main, wallet locks
Restore OSX 10.5 compatibility (do not use pthread_setname_np)
RPC, cosmetic: move more RPC code to new rpcblockchain.cpp module
RPC, cosmetic: move wallet-related RPCs to new rpcwallet.cpp module
RPC: submitblock returns null on success, string on error
RPC, cosmetic: Create rpcmining.cpp as new home for mining-related RPC code
RPC, cosmetic: de-indent getblocktemplate()
RPC: split new 'submitblock' out of 'getblocktemplate'
Allow signrawtransaction '...' null null 'hashtype'
When using SIGHASH_SINGLE, do not sign inputs that have no corresponding outputs.
Allow setting a different linker than compiler in makefile.unix
Add data-driven transaction tests.
Add a few test cases to data-driven script tests.
Suppress output when running unit tests.
Reject block.nVersion<=1 blocks if network has upgraded to version=2
Block height in coinbase as a new block rule
Set block.nVersion to fix miner unit test
fix a comment in addrman.cpp
Bitcoin-Qt (Windows only): add ASLR and DEP linker flags
Remove useless non-cross-platform tests.
add splashscreen message when importing blocks via -loadblock
fix a compiler sign warning in OpenBlockFile()
log how long LoadExternalBlockFile() takes in ms (Benchmark)
Bitcoin-Qt (Windows only): extend Resource File
Revert "Make this error message similar to the others"
Update English translation strings
Return !0 when qt tests fail.
Make this error message similar to the others
Bitcoin-Qt (Windows only): enable DEP for bitcoin-qt.exe
Minimal BIP 22 (getblocktemplate) support
fix further spelling errors / remove a tab in the source
small UX update for optionsdialog
only update cached values in ClientModel::updateTimer() when they are changed
Translations update 2012-08-01 (fetched from Transifex)
Optimize JSON-RPC getblockhash
Add doc/release-notes.txt, temporary for 0.7 release
Bugfix: Correct English grammar regarding "'s"
Bugfix: Use standard BTC unit in comments
Update Warning-strings to use a standard-format
Add 'mempool' P2P command, and extend 'getdata' behavior to permit downloading of mempool transactions from the remote peer.
update HelpMessage()
Switch testnet3's message bytes to avoid connecting to old nodes.
Handle should-never-happen case of orphan in mempool
When creating new blocks, sort 'paid' area by fee-per-kb
Update translation messages
Typo
fix typo "logfile" -> "log file"
set TARGET = bitcoin-qt in project file
Typo
Replace all occurances of license.txt with COPYING, including naming the file COPYING.txt on Windows
optionsdialog cleanup
fix OpenSSL not written as proper noun in some comments
do not use external IPv4 discovery, when -onlynet="IPv6"
re-size addressbookpage.ui to fix #1062
Update a link
Docs Tidy up
Let the comment in GetBlockValue() reflect the uncertainty about the time interval between subsidy reductions
New feature for signrawtransaction: specify signature hash (ALL/NONE/etc)
Give a better error message than 'type mismatch' for complex JSON arguments
small update for BitcoinGUI::setNumBlocks() function
Make sort and filters for transactions and labels case-insensitive
fix a comment in net.cpp
IPC-server hardening and update
Teach RenameThread to work on OSX
Give the GUI-IPC thread a name as well
Don't check for __linux__ specifically, check for PR_SET_NAME feature instead
Add support for renaming FreeBSD and OpenBSD threads
Give threads a recognisable name to aid in debugging
Use linker-arguments only when linking
Correct OpenSSL in makefile
Correct OpenSSL version
change Window title to "Bitcoin -  Wallet" / misc related renames
when on testnet, set testnet icon for about dialog
enhance lang-selection in OptionsDialog, when compiling with Qt >= 4.8
Bug fix: sendrawtransaction was not relaying properly
Tests for CreateNewBlock
optionsmodel cleanup
fix a wrong string in signverifymessagedialog.ui
translation process file updates
Reorder dnsseed list, Jeff's seed list is static so put it last.
fix some recently added translation plurals
Translation strings update
fix for build.h regeneration failure when compiling on Windows
Persistently poll for balance change when number of blocks changed
Run BDB disk-less for test_bitcoin
replace some ugly code in addressbookpage.cpp
CHashWriter that does SHA256 in-place during serialization
show used OpenSSL library version in debug window
fix typo in optionsmodel.cpp
update QRCodeDialog
Warn if blockchain majority doesn't match CBlock::CURRENT_VERSION
Treat non-version-1 transactions as non-standard
GUI: merge sign/verify message into a single window with tabbed UI
update Boost version to 1.49 for Windows in the Qt project file
bitcoinrpc.cpp: Removed outdated comment
Use unsigned ints to fix signed/unsigned warnings
Implement raw transaction RPC calls
RPCTypeCheck method to make type-checking JSON Arrays easier.
Refactor: SignSignature/VerifyScript
Rework gettransaction / getblock RPC calls
write used OpenSSL library version to debug.log
CTxMemPool: eliminate redundant lock, GetHash() call
Remove duplicate GetHash() in ConnectBlock
RPC: add support for JSON-RPC 2.0-style request batching
RPC: break out high level JSON-RPC req/resp into their own functions
Work around a distcc bug where -MMD output isn't copied.
enhance translation possibilities in TransactionDesc / misc other changes
Show when node is misbehaving, not just at the point that it gets banned.
Include human readble format for nRequestTime.
Do not consider inbound peers for outbound network group exclusion.
RPC getpeerinfo: s/height/startingheight/ for returned nStartingHeight value
Change default send buffer to 1Mb.
Remove useless high-volume printf (fixes #1544).
fix a typo in OptionsDialog
RPC: add 'getpeerinfo', returning easy-to-retrieve per-CNode data
Create new rpcnet module, and move 'getconnectioncount' RPC to it
Lock vnThreadsRunning[THREAD_RPCHANDLER].
Use a rpc-specific queue to tell asio connections to shutdown.
Revert "*Always* send a shutdown signal to enable custom shutdown actions"
Make truncating the debug.log file an option.
Stop processing messages on full send buffer and dont disconnect.
GUI: change language selection format
Update contrib/debian and remove system json_spirit patch.
small updates to Bitcoin-Qt project file
Checkpoint at block 185333 (and remove a couple of intermediate checkpoints)
Add Bitcoin dev Copyright
Update comments
fix a comment to correctly use -upgradewallet
Document -debugnet option in command line help.
On Windows link with `mswsock`, it being required (indirectly) by RPC code
Cancel outstanding listen ops for RPC when shutting down
Quieten 'getdata' P2P message output
Changed a comment about a QVariant type
Some documentation about tor
Debug version messages
Add -tor and related configuration
Rewrite CNetAddr::GetReachabilityFrom()
Node support for Tor hidden services
Introduce -debugnet option, thereby quieting some redundant debug messages
Remove some rule differences which aren't needed with testnet3.
RPC: add 'getrawmempool', listing all transaction ids in memory pool
Unit tests for base32 encode/decode
Base32 encoding/decoding
Small fix to rpc_tests
= instead of == in multisig_tests.cpp
fix a memory leak in key.cpp
Update master
gitian-downloader: Update luke-jr's key
Update my GPG key
Remove CTxDB::ReadOwnerTxes.
GUI: ensure a changed bitcoin unit immediately updates the tx list amounts
print large orphan warning BEFORE deleting pvMsg
If (for example) the new max_size must be 5 then at the end the queue.size() must be <= 5, so the exit condition must be <=, so the continuing condition must be > (and not >= as it was).
CBigNum: Convert negative int64 values in a more well-defined way
OS X not OSX
Further updates to build instructions
Update OSX build instructions
*Always* send a shutdown signal to enable custom shutdown actions
add the slot updateDisplayUnit() to overviewpage, sendcoinsdialog, sendcoinsentry and connect it to displayUnitChanged() - this ensures all fields in the GUI, who use a display unit are imediately updated, when the user changes this setting in the optionsdialog / ensure used fields init with the current set display unit
Revert "Disable bitcoin: URI handling on Windows for the 0.6 release"
Upgrade to Boost 1.49 on Win32
Document how to build/run unit tests
Use a 64-bit nonce in ping
Add netbase tests
Improve parsing of IPv6 addresses
Show command line options as dialog when opened from debug window
Reorganize tray icon menu into more logical order
URI-handling code update: added safety checks and tray-notifications
set cursor for balance field to IBeamCursor (to show the user it IS selectable) and set autoDefault to false for the buttons that do not need this
Update bitcoinstrings from core and English source translation file
update translation files (fetched from Transifex) and remove translation for fr_FR, which was removed / renamed on TX
re-work optionsdialog to a tabbed UI based on an ui-file
Update wiki changelog at doc/release-process.txt
merge toggleHidden() code into showNormalIfMinimized() to extend the functionality, but keep a simpler toggleHidden() for use in SLOT() macro
make buttons in debug window non autoDefault
Cross-platform "Open debug logfile"
Do not select first address automatically in the address book
introduce a new StartShutdown() function, which starts a thread with Shutdown() if no GUI is used and calls uiInterface.QueueShutdown() if a GUI is used / all direct uiInterface.QueueShutdown() calls are replaced with Shutdown() - this ensures a clean GUI shutdown, even when catching a SIGTERM and allows the BitcoinGUI destructor to get called (which fixes a tray-icon issue and keeps the tray-icon until Bitcoin-Qt exits)
change initial Balance on overviewpage from "123.456 BTC" to "0 BTC" to not confuse users, which could see it before we init with the real wallet balance
update info string in GUI for generated blocks and change "must wait" into "must mature" to take the new immature label into consideration
Update comment about secure_allocator<>
Move NOINLINE definition to test where it's used.
Don't overflow integer on 32-bit machines.
add used datadir to debug.log
fix two signed/unsigned comparison warnings in netbase.cpp
fix default Proxy address in Qt options (no hostname allowed currently)
Preserve the shuffled order of coins with equal value to give more randomized coin selection.
Test that the coin selection code is suitably random, and add tests re. sub-cent change.
Move the random_shuffle call back into SelectCoinsMinConf() so we can unit test it.
Refactor SelectCoinsMinConf() and add unit tests.
"USE_UPNP=-" is needed to remove UPnP support.
Update contrib/debian.
move class HelpMessageBox to guiutil.cpp/.h / add button to show Bitcoin command-line options (in RPC Console -> Information) / resize Debug window a little to allow for a non-breaking display of the welcome message with non-english translation
change verifymessagepage behaviour to match RPC-call "verifymessage" (input address, signature and message) / display messages in status label (remove message boxes) / resize window to make signature fully readable / change signature font to BC-address font (like in messagepage) / remove checkAddress() and place code directly in on_verifyMessage_clicked() / add visual feedback to LineEdits / remove AddressTableModel references, as they are now unused / add addr.GetKeyID(keyID) check
Use ConvertTo to simplify sendmany/addmultisigaddress argument handling
Make sendrawtx return txid to be consistent with other send methods.
Use C++-style numeric limits instead of C-style.
Rework network config settings
sync english translation master file with current master branch
Update bitcoinstrings.cpp
Show the timestamp for the block.
incorrect openssl when compared to makefile
CreateNewBlock: Check that the produced CBlock is acceptable (except for proof-of-work and merkletree, since those need to be provided later)
Add a testnet checkpoint at block 546
Testnet, Mark III
Remove newlines from JSON strings
Unit tests for transaction size limits
Added 'immature balance' for miners. Only displayed if the balance is greater than zero.
Use the QueueShutdown signal to stop accepting new RPC connections
Allow all addresses on the loopback subnet (127.0.0.0/8) not just 127.0.0.1
Generalise RPC connection handling code to allow more listening sockets
Allow clients on the IPv6 loopback as well
Add dual IPv4/IPv6 stack support to the RPC server
Use asynchronous I/O to handle RPC requests
Lots more Script unit test cases.
Refactor: split CKeyID/CScriptID/CTxDestination from CBitcoinAddress
Encapsulate public keys in CPubKey
More CScript unit tests.
DoS_tests: fix signed/unsigned comparison warnings
remove dead "using namespace boost::asio;" from rpcdump.cpp
rpcdump: include cleanup. move JSONRPCError def to bitcoinrpc.h.
Refactor: move runCommand() to util.cpp
.gitignore: add test_bitcoin
JSON-RPC: Add 'sendrawtx' op, for sending pre-built TX's to network
Use debhelper to install bitcoind.bash-completion
Bash programmable completion for bitcoind(1)
add client startup time as an entry to debug.log (note: logged time in debug.log differs by a few seconds from the one displayed in the Debug window) / make ClientModel::formatClientStartupTime() return a QString
Refactor: add IsChainFile helper. LoadBlockIndex() code movement.
CDBEnv: fix qt build
ProcessMessage(): remove duplicate orphan tx debug message
Prevent crashes due to missing or corrupted blk????.dat records
Prevent crashes due to missing or corrupted database records
Move signature cache from CKey::Verify to CheckSig in script.cpp
Remove duplicate behavior on MacOSX
Correct debug.log output to show correct function the debug is coming from.
Define BOOST_SPIRIT_THREADSAFE in all makefiles rather than at each include site.
Remove autocorrection of 0/i in addresses in UI
Filter out whitespace and zero-width non-breaking spaces in validator
Reorder AppInit2
BDB: restore DB_PRIVATE flag to environment
start rows in askpassphrasedialog.ui at 0 (not 1)
Make testcases build, prevent windows symbol collision
Process address book updates incrementally
Convert UI interface to boost::signals2.
Fine-grained UI updates
Further CDBEnv encapsulation work.
CDB::CDB: properly initialize activeTxn to NULL
Remove unused nested BDB transaction support
Create CDBEnv::TxnBegin(), and use it in CDB::TxnBegin()
Encapsulate BDB environment inside new CDBEnv class
Reorganize(): remove spurious TxnAbort()
remove strncasecmp() + strnicmp() calls and replace that code via boost::algorithm::istarts_with() / do not call ipcInit() on Mac and Windows as this is unneeded currently
Replace debug window icon with LGPL-licensed one (fixes #1348)
Default to DB_TXN_WRITE_NOSYNC for all transactional operations
Shared code for wallet lock help and check
Reopen debug.log on SIGHUP
Serialize access to debug.log stream
change strings to Bitcoin (uppercase), where it is used as a noun and update strings to use "Qt" (and not qt or QT) / update initialisation of notificator to use qApp->applicationName() instead of a static string
Use boost::thread locking instead of interprocess
Cache signature verifications
Further DoS prevention: Verify signatures last
Remove invalid dependent orphans from memory
Optimize orphan transaction handling
Update License in File Headers
add an icon for Debug logfile -> Open in the RPC console / add a missing comment in rpcconsole.h
Restore overviewpage (put transactions back within frame)
JSON-RPC: remove 'getblocknumber' deprecated RPC
Make orphan logging more verbose, displaying mapOrphanTransactions.size()
Revert "use _strnicmp (ISO C++) instead of deprecated strnicmp (POSIX) and add missing "#define strncasecmp _strnicmp" in init.cpp"
Should only be mapped when the getdata is done.
Report how long DBFlush took.
use _strnicmp (ISO C++) instead of deprecated strnicmp (POSIX) and add missing "#define strncasecmp _strnicmp" in init.cpp
Was showing a negative number. Changes to positive, since negative (T minus) usually indicates a future event.
Refactor: GetRandHash() method for util
Refactor: move code from key.h to key.cpp
add 2 labels to the overviewpage that display Wallet and Transaction status (obsolete or current) / cleanup overviewpage XML ui-file
Add icon for debug window
Add build directory to .gitignore, so that it's not tracked.
Corrected grammar. As per Principle Of Least Surprise.
Add /bin/sh to bitcoin-qt.pro - as some filesystems don't have the execute flag.
fix RenameOver() and FileCommit() functions, to not generate compilation errors
allow translation of "options" used in the --help message / split translation of RPC console welcome message and remove the need to take care of "<br>" / remove some spaces in strings and misc other stuff related to translations
CAddrDB: Replace BDB-managed addr.dat with internally managed peers.dat
Add new utility functions FileCommit(), RenameOver()
Add missing Q_OBJECT in bitcoin.cpp
Update bitcoinstrings.cpp and bitcoin_en.ts
add 4 new translations bg, el_GR, fr and pt_PT (based on transifex fetch from today)
Remove dead code: CTxDB::EraseBlockIndex(), CBlockIndex::EraseBlockFromDisk()
Hopefully final fix for the stuck blockchain issue
adapt user-experience from messagepage / move placeholderTexts from XML to source to avoid a problem with Qt < 4.7 / add eventFilter for address field to select text when clicking in / add Clear All button / rework strings
fix DebugLog file opens twice after clicking "Open" in RPC Console Information tab
Add test case for CBigNum::setint64().
Get rid of snprintf (except one) with fixed buffers, shorten code
RPC console: scroll to the end when user enters a command
Do not listen on blocked networks
Allow binding to the any address, and report failure
-onlynet instead of -blocknet
make CheckDiskSpace() use a global static const uint64 for checking required disk space and remove 2 ugly spaces from a message string
Always check return values of TxnBegin() and TxnCommit()
Don't overflow signed ints in CBigNum::setint64().
Use getnameinfo() to get canonical IPv6 addresses
Really do not consider blocked networks local
Make CNetAddr::GetHash() return an unsigned val.
update some strings used as warning messages in sendcoinsdialog.cpp
Move help message out of AppInit2
release-process.txt: Add a note to check the download link destinations.
Do not consider blocked networks local
Only encode IPv4 addresses in IRC nicks
ensure that no double timestamps show up in the debug.log, by removing manual timestamps from the source (now only -logtimestamps parameter adds timestamps to debug.log)
Enforce -nodiscover better
Improve error reporting at startup
Move GetStartOnSystemStartup and SetStartOnSystemStartup to GUI code
Prevent tooltip filter from ever causing infinite loops
Take -port into account when resolving -bind's
use "IPv6" and "IPv4" in strings as these are the official spellings and make ParseNetwork() in netbase.cpp case-insensitive
Keep local service information per address
Do not signal outbound semaphore if uninitialized
Only check for port# after : in ConnectSocketByName
Partially revert f621326: xCXXFLAGS
remove string "TextLabel" from warningLabel, as this is unneeded and as such is a silly translation less to do :)
set minimum size allowed by Qt Creator and rename "QR-Code Dialog" to "QR Code Dialog" as this spelling is used all over the code
RPC console: don't crash on invalid input exception
Convert RPC console to QTextEdit instead of QTableView
When a transaction is clicked on overview page, focus it on history page
change size of transactiondialog, to allow display of transaction-id without an ugly line-break
add Alt-Shortcut for "Clear All" in sendcoinsdialog.ui
convert 4 tabs into 4 x 4 spaces in bitcoinrpc.cpp
Speed up build in Qt creator in common case
Correct Date
Correct Date
add the client startup time to the debug window / rename Version label to Client, which is better suiting now / add IBeamCursor for selectable text on the information page / make ">" sign on RPC page untranslatable / re-order XML-file tags to match real GUI element order
Properly escape " in strings when exporting CSV
Split synchronization mechanisms from util.{h,cpp}
Use polling instead of boost's broken semaphore on OSX
Use semaphores instead of condition variables
Add a menu option to verify a signed message
add calls to qApp->setWindowIcon(), to remove the need to set window icons for testnet with additional calls
Separate listening sockets, -bind=<addr>
Keep port information for local addresses
Add -blocknet to prevent connections to a given network
Use NET_ identifiers in CNetAddr::GetGroup()
Add -noproxy to circumvent proxy for some network
Limited relaying/storing of foreign addresses
Preliminary support for Tor/I2P hidden services
IPv6 node support
Add missing #include for GetDataDir
if there is no current block number available display N/A on totalBlocks label, instead of 0, which can not ever be true
guiutil.cpp/.h: fix a -Wreorder compiler warning and make constructor for ToolTipToRichTextFilter explicit
add code to open (display) debug.log on Windows with the associated application and add a button to the Information page in the Debug console
CTxMemPool::accept(): do not log FetchInputs failure redundantly
CTxMemPool: consolidate two frequently-printed debug.log lines into one
optionsdialog.cpp: rename "Start Bitcoin on window system startup" to "Start Bitcoin on system login" and move it to Main / hide "Window" Options on Mac as there are currently none available / remove an unused variable / add Alt-Shortcuts where they were missing / allow translation of "default"
add placeholder text to address field (like in sendcoins) and set focus to address field on opening messagepage or "Clear All" / consolidate gotoMessagePage() to 1 function / rename windowTitle to "Sign Message Dialog"
add 2 comments to transactionview.cpp to ensure no one moves setPlaceholderText to the XML file (after this all parts in the code that use setPlaceholderText have this comment
Bugfix: getmemorypool: NULL pindexPrev across CreateNewBlock, in case it fails
Bugfix: getwork: NULL pindexPrev across CreateNewBlock, in case it fails
Add key shortcuts for RPC console tabs
Automatically focus entry widget when console tab comes into focus
Show testnet icon for tray-menu option Show/Hide / set tooltip for tray icon to match non-testnet text (just [testnet] added) / remove obsolete title_testnet variable'
add Debug window to tray-menu / switch sendCoinsAction and receiveCoinsAction in tray to match button ordering in the client window
Kill warning from unavoidable signed/unsigned comparison in bitcoinrpc.cpp.
update bitcoin_en.ts (translation master file) to match current master branch as of 2012-05-09
util.h/.ccp: modifiy some comments / rename MyGetSpecialFolderPath() -> GetSpecialFolderPath(), set fCreate default to true and remove the fallback (not Win >= Vista compatible anyway) / remove namespace fs stuff where only used once / misc small changes'
fix an incorrect if-clause in net.cpp
harmonize the use of ellipsis ("...") to be used in menus, but not on buttons / update some strings to be more informative
Make it possible to set user interface language from options dialog
Organize optionsdialog (split off Window and Network page)
remove 2 ugly spaces from a string used in translations
Clean up warnings
Revert part of 1302257e: don't update CXXFLAGS, only xCXXFLAGS
makefile.unix: add -Wall to default CXXFLAGS
RPC: Support HTTP/1.0 and HTTP/1.1, including the proper use of keep-alives
Support multi-threaded JSON-RPC
remove 2 obsolete functions from init.h that moved to util.h
Support for decomposing scripts as "obj"
Second parameter to JSON-RPC getblock/gettransaction: decompositions
Add block "confirmations" to getblock, mainly for identifying orphans
Increase client version to 0.6.99
Make user action more straightforward in address book
Update changelog to match reality.
Move back setPlaceholderText to code, from xml, as this broke building with Qt 4.6
Prevent stuck download: correct solution
passphrasedialog: change dialog title to "Passphrase Dialog" / remove style-sheet for bold font and use Qt Designer option / remove an unused label default-text and remove an obsolete clear()'
move many overviewpage settings from code to ui XML-file / removed ability to translate "0 BTC" and "123.456 BTC" as this is only used as preview in the Qt Designer anyway / set mouse cursor to IBeam for selectable labels
Hide UI immediately after leaving the main loop.
Bugfix: store source address in addrman
Add extra asserts to addrman
Bugfix: %-12I64d is not valid and causes the parameter to be skipped, use %12"PRI64d" instead
changed cursor for selectable text on the about dialog to IBeamCursor and removed an unused tag
change text on message.ui from "Copy to Clipboard" to "Copy Signature" and add an Alt-Shortcut to "Clear &All"
renamed qrcodedialog.ui window title to "QR-Code Dialog" and changed window size to the minimum values Qt Creator allows me to set
simplified qrcode icon that scales gracefully to 16x16
Add UI RPC console / debug window
Allow Qt to wrap long tooltips (fixes #1063)
signmessage: auto-select signature when field is focused/clicked
move label placeholdertext from sendcoinsentry.cpp to ui-file
Bump version numbers for 0.6.1rc2
Added -externalip and -discover
Support for multiple local addresses
Add -seednode connections, and use this for -dnsseed + -proxydns
Support connecting by hostnames passed to proxy (-proxydns)
refactor ConnectSocket
SOCKS5 connect via hostname
SOCKS5 support by default
fix #952 by checking if we have a new address or an updated label
remove obsolete BackupWallet() entry in wallet.h
add a clear all button to the sign message page
Update to require IE 5.1 as it is required on mingw64.
EvalScript(): cast to avoid signed/unsigned warning
ThreadSocketHandler2(): cast to avoid signed/unsigned warning
OpenBlockFile(): cast to eliminate signed/unsigned comparison warning
CDiskTxPos, CInPoint, COutPoint: cast null value (-1) to unsigned int to eliminate signed/unsigned comparison warnings
add bitcoin-qt.rc to OTHER_FILES (shown in Qt Creator)
remove duplicate definition of SecureString in util.h
fix DEPENDPATH in the project file, as json has no include sub-dir and src was in twice
small translation-file handling / loading changes and re-work comments to be clearer
fix compiler warning "suggest parentheses around assignment used as truth value [-Wparentheses]" in util.cpp
fix compiler warning "suggest explicit braces to avoid ambiguous "else" [-Wparentheses]" in net.cpp
remove references to bitcoin-wx from comment in init.cpp
remove unused typedef in serialize.h
Update openssl version
Bump win32.deps version number for new openssl
Windows build: compile against openssl 1.0.1b
Bump version numbers for 0.6.1rc1
remove strange debug message from listsinceblock
listsinceblock: rpc param blockid -> blockhash
Define TEST_DATA_DIR so unit tests can be run from any current working directory
Undo part of c2e8c8ac to fix issue#1148
Remove unused -DNOPCH
Make lsn_reset ("detach databases") optional and off by default.
We should include netinet/in.h to use sockaddr_in (POSIX.1-2001)
Change signed->unsigned at 3 code sites
CBlock::WriteToDisk() properly checks ftell(3) for error return
Add casts for unavoidable signed/unsigned comparisons
Test ScriptSigArgsExpected() for error, before accumulating return value
SigOp and orphan-tx constants and counts are always unsigned.
Prefer 'unsigned int' for loop index variables tested against ::size()
change button tooltip on sign message page for copy to clipboard as it was missleading
Make GetDataDir return absolute paths
-loadblock to load from an external blk000?.dat file
Data-drive script evaluation unit tests.
Integrate @JoelKatz's optimized ToHex (#562) into current HexStr function
Remove no-longer used UI hints in bitcoin core
change type of various bare chars to bool that are only used as bool (and never serialized)
Add explicit numeric constant value for all opcodes
Expose CRPCTable via bitcoinrpc.h for testing
Encapsulate mapCommands in class CRPCTable
Encapsulate RPC command dispatch in an array of CRPCCommand's
gettransaction RPC for non-wallet transactions
Added ability to respond to signals during Block Loading stage.
Add missing breaks in optionmodel's switch case
Further reduce header dependencies
Move proto version to version.h.  Reduce header deps a bit more.
Move CWalletDB code to new walletdb module.
Remove headers.h
main.cpp: replace tabs with spaces
AlreadyHave(): only hold lock during mapTransactions access
Remove unused and unreachable code
Add forgotten initializer
Reduce sync frequency for blkindex.dat
Bump PROTOCOL_VERSION to 60001, thereby enabling BIP31
CNode's nHeaderStart may be negative, so change its type
serialize.h: CAutoFile's read and write may take size_t nSize
The string class returns string::npos, when find() fails.
CTxMemPool: add helper methods, to reduce global mempool.mapTx accesses
CTxMemPool: encapsulate AcceptToMemoryPool
CTxMemPool: encapsulate AddToMemoryPoolUnchecked(), RemoveFromMemoryPool(), and nPooledTx
New class CTxMemPool, encapsulating TX memory pool data members
fix warnings: suggest explicit braces to avoid ambiguous 'else' [-Wparentheses]
fix warnings: '&&' within '||' [-Wlogical-op-parentheses]
fix warnings: delete called on 'XX' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]
fix warnings: unused variable 'XX' [-Wunused-variable]
fix warnings: enumeration values 'XX' not handled in switch [-Wswitch-enum]
fix warnings: 'XX' defined as a struct here but previously declared as a class [-Wmismatched-tags]
fix warnings: array subscript is of type 'char' [-Wchar-subscripts]
work around issue in boost::program_options that prevents from compiling in clang
enable all warnings except invalid-offsetof, sign-compare, unused-parameter
Bugfix: Check that QRcode_encodeString didn't return NULL (error)
Show a message box when runaway exception happens
Rename make_windows_icon.py to .sh as it is a shell script (fixes #1099)
Update translations for bitcoin core
Do not show green tick unless all known blocks are downloaded (fixes #921)
Locking fix for AlreadyHave()
Database micro-optimization for "tx" network message
revert to default OS theme for progressbar / fix small glitches in bitcoingui.cpp
Add missing tooltip and key shortcut in settings dialog (#1088 without line break part)
Replace several network protocol version numbers with named constants stored in version.h.
CBitcoinSecret::SetString() now calls IsValid() to make sure it was passed something with the correct version.
make text in about box selectable (fixes #1055)
enable wordWrap on lblQRCode / small code comment change
limit length of generated URI to 255 chars to prevent a DoS against the QR-Code dialog
updated to reflect pull-request suggestions / renamed some GUI elements
fixed amount part of URI in QR-Codes / removed (no label) string if we have NO label / coding style updates / removed an unused variable
Remove obsolete Win32 AffinityBugWorkaround()
version.h: separate client, net sections.  Move more constants to this file.
BIP 0031: pong message
Use filesystem::path instead of manual string tinkering
Remove path.make_preferred() calls, and fix compiler error in bitcoinrpc RE: boost::system
by popular request, make 4th bar of connection icon green
Force regeneration of build.h in qmake builds
Build identification strings
Toggle main window hide on tray icon click
Added comment lines in French & Turkish which basically mean "Bitcoin, virtual P2P cryptocurrency".
Do not report spurious deadlocks caused by TRY_LOCK
Support for parametrized locks in deadlock detector
Use scoped locks instead of CRITICAL_BLOCK
Bugfix: Replace "URL" with "URI" where we aren't actually working with URLs
Show error message instead of exception crash when unable to bind RPC port
fixed small error in bitcoinrpc.cpp
updated util.cpp to use make_preferred()
updated bitcoinrpc.cpp to use make_preferred() and removed double inclusion of boost/filesystem.hpp
updated db.cpp to use make_preferred()
Change sign message bitcoin address tooltip to "The address to sign the message with" Closes #1050
Document strlcpy.h in assets-attribution.txt since it isn't MIT-licensed
Flush on log size instead of transaction count
removed obsolete boost workaround (boost ticket #4258)
Remove USE_SSL #define
Bug fix listtransactions from/count handling.
Verify status of encrypt/decrypt calls to detect failed padding
removed an unneeded space in bitcoin-qt.pro
removed an unused / obsolete tag from bitcoin.qrc
Enable addmultisigaddress RPC call for main network
Remove half-implemented publish/subscribe system
Add ifdef RELEASE to makefile.osx as the compile-for-older-macs flags
Condition variable for outbound connection slots
Locking system overhaul, add condition variables
Move from noui.h / ui.h to one ui_interface.h with dummy implementation for the daemon.
Use a messagebox to display the error when -server is provided without providing a rpc password
qtui.h/noui.h interface cleanup
support RPC stop and encryptwallet with UI
move translation function _ to qtui.h/noui.h instead of util.h
remove dependency on serialize.h and util.h for SecureString
remove unused CalledSetStatusBar and UIThreadCall notifications
Update UI through async calls MainFrameRepaint and AddressBookRepaint instead of a timer.
remove HTML code around "Wallet" (displayed on overview page) and use Qt tags for font settings
Code deduplication: make function in GUIUtil to get connection type to call object slot in GUI thread with invokeMethod.
move QT_PLUGINS stuff to qt main file, where it belongs
VC2010 compile fixes
clarified comment why we use an own progressbar style / included "~" in the tr() call
changed percentage done in tooltip to float to be more precise / allowed plurals in translation for "x block(s) remaining"
polished code and fixed progress display (was very jerky at the end of a sync)
color update for progress bar
implemented OS independent progress bar style / moved one-time functions used on the bar to a better code location
changed progressbar text to "~n blocks remaining"
removed relative progressbar display and moved re-worked network detection code to setNumBlocks()
modified block DL progressbar to be dynamic and more precise
Increase time ago of last block for "up to date" status from 30 to 90 minutes
Bump version to 0.6.0.99 for 0.6.1 merge window
hide Delete button (only) on ReceivingTab / hide Sign message button (only) on SendingTab
Updated my GPG key
fixed typo in comment in netbase.h and bignum.h
Use transactions-updated as flush condition
Bump version to 0.6.0rc6
Workaround hangs when upgrading old addr.dat files
Auto-remove logs, and decrease logfile size to 10M
made tray icon tooltip translatable
removed an ugly line break in a transaction tooltip for case TransactionStatus::Mature
update translations from transifex
Update version to 60005 (0.6.0rc5)
Use erase instead of rewrite to remove old addr entries
Remove wxWidgets .exe and locales during setup
Disable bitcoin: URI handling on Windows for the 0.6 release
Begin doxygen-compatible comments
make sure Window is shown when clicking bitcoin: Links to get user attention
Give DNS seeds a random age between 3 and 7 days old
remove unused functions from util.h/util.cpp
Add Luke-Jr's PGP key to gitian-downloader
Introduce explicit -walletupgrade option
Move QMAKE_LIBS_QT_ENTRY adjustment to bitcoin side of build
Check minversion before loading the rest of the wallet
Add -checklevel and improve -checkblocks
Remove -bip16 and -paytoscripthashtime command-line arguments
replace call to PrintConsole with call to error()
updated translation process documentation
More debug output for failed reorganizations
Correct date
Prevent stuck block download in large reorganisations
Speed up block downloading
Avoid some pointless warnings while compiling
Proper support for Growl 1.3 notifications
assertion in CBlock::SetBestChainInner was too strong
remove bitcoin_cs_CZ from bitcoin.qrc and delete bitcoin_cs_CZ.ts
updated english language source file via lupdate
fixed a capitalization error in the german translation
update german translation from transifex
Limit getheaders to a hard 2000.
Make the sendcoins dialog use the configured unit type, even on the first attempt.
When disconnecting a node, clear the received buffer so that we do not process any already received messages.
update german translation from transifex
Bump CLIENT_VERSION for rc4 release
update translations from transifex
add shell one-liner for updating translations in bitcoin.qrc
Yet another attempt at implementing "minimize to tray" that works on all OSes
Link -lrt library on Linux
Bump CLIENT_VERSION for rc3 release
Limit the impact of reorganisations on the database
Print more diagnostic info for the various DB_CORRUPT conditions
Print wallet load errors (to debug.log)
Resolves issue #922 - "wallet passphrase timeout of several years doesn't work"
fix typo src/net.cpp
Do not allow overwriting unspent transactions (BIP 30)
Updated Mac build process
DoS fix for mapOrphanTransactions
"February"
Do not start bitcoin: thread on OSX. fixes #889
Add mruset and use it for setInventoryKnown
Move BIP16 switchover time to April 1
Store addrProxy port in settings
Reworked QT settings
bitcoind changes to stop storing settings in wallet.dat.
Simplify MyGetSpecialFolderPath and fix possible buffer overflow (#901)
Move 'Backup Wallet' to file menu
In UI, handle cases in which the last received block was generated in the future (secs<0)
Do not invoke anti-DoS system for invalid BIP16 transactions
Add option "-splash" so we can disable the splash screen. Don't show splash screen when -min is specified on the command line.
CAddrMan: stochastic address manager
Checkpoint block 168,000
Make deps build deterministic and upgrade to libpng 1.5.9.
Cleanup JSON-RPC getblock output to be consistent - Add "size" and "bits" - Rename "blockcount" to "height" - Rename "hashprevious" and "hashnext" to "previousblockhash" and "nextblockhash" (respectively)
Bugfix: Instead of reporting "bitcoin-qt" for both bitcoind and Bitcoin-Qt, report "Satoshi" which is at least correct
Leave IRC enabled by default on testnet
Post-feb20 simplifications
ProcessBlock is sometimes called with pfrom==NULL
Sign message description changes discussed in #bitcoin-dev
Typo fix
Report number of (dis)connected blocks in reorganization
Hide tray icon in destructor, as deleting will let it linger until quit (on Ubuntu)
Free pwalletdbEncryption after encryping wallet
Make compressed pubkeys require 0.6.0
Move GenerateNewKey back to CWallet
Add SetMinVersion to CWallet
Workaround for BN_bn2mpi reading/writing out of bounds
Do show/showNormal only when needed.
Allow setting UI language from commandline (implements #678)
Only fill in label from address book, if no label is filled in yet, fixes #840
Change #ifdef GUI to #ifdef QT_GUI, GUI is not defined anymore...
On windows, show message box with help, as there is no stderr (fixes #702)
Hide window from taskbar when "minimize to tray" active by making window into Tool window
Restructure IPC URL handling (fixes #851)
don't allow -daemon in bitcoin-qt (changes only #defines)
fix typo in CNetAddr::IsRFC4843()  (fixes #850)
Symbolic names for threads
Properly include $*_LIB_PATH in makefile.unix
Make bitcoin-qt static-link libqrcode and add it for debian pkgs.
Several shutdown-related fixes
Bugfix: do not create CAddress for invalid accepts
fix default suffixes in save dialog in GNOME, make it more clear that PNG is used (solves #833)
increase BitcoinAddressValidator::MaxAddressLength from 34 to 35
Added 'Backup Wallet' menu option
(trivial) regularize coding style
Add export action to file menu (as long as we have a file menu, export certainly should be there)
Extra wallet locking fixes
Macros for manual critical sections
Add Bitcoin-Qt test suite with some bitcoin: URL Tests to start.
Add -req prefixes to comply with BIP21.
Enable accessible widgets Qt module on win32, so that people with screen readers such as NVDA can make sense of it.
Get ext. IP from UPnP, make sure addrMe IsRoutable() in version.
Update readme-qt.rst for 0.6.0
Update doc/release-process.txt
Split smaller dependencies out of gitian-win32 into deps-win32
Update all copyrights to 2012
Increase client version to 0.6
Look for flushwallet/listen/irc/dnsseed/upnp instead of noflushwallet/etc. And switch default for irc to 0.
New GetArg features: allow --, and booleans can be -foo or -nofoo
Unit tests for the GetArg() methods
-bip16 option (default: 1) to support / not support BIP 16. And bumped default BIP16 switchover date from Feb 15 to Mar 1
Restructure credit transaction decomposition (solves issue #689)
Update zlib and libpng (previous version had a security issue)
Mac deploy tool: make dylibs writeable when copying into app bundle, so they can be stripped/nametool'ed
miniupnpc Porfile removed; new and improved macdeployqtplus
fetch translations from transifex
Change up/down increment in UI to 0.001 BTC (issue #760)
Have bitcoind recommend a secure RPC password. Increase invalid password delay.
Avoid advertising the node's address when it is not listening or IsInitialBlockDownload().
Remove loose amp; from Portugese translation (issue #701)
Allow -upnp to override setting in wallet (and simplify logic a bit)
Testnet difficulty calculation changes, to take effect Feb 15 2012
CreateNewBlock was not adding in transaction fees.
Bitcoin-Qt signmessage GUI (pull request #582)
Full checking of all loaded keys
Check consistency of private keys
Support makefile.osx building test_bitcoin with dynamic boost
Rename src/obj/test to src/obj-test to workaround bug in older GNU Make
Only store transactions with missing inputs in the orphan pool.
Bugfix: Support building test_bitcoin with shared-object boost test framework
Add DEBUG_LOCKCONTENTION, to warn each time a thread waits to lock.
Sanitize AreInputsStandard slightly
Simplify counting of P2SH sigops to match BIP 16 (thanks to Matt Corallo for prompting this).
Back out spacing changes to json spirit code
Make transactions with extra data in their scriptSig's non-standard.
Update seednodes, pick long-uptime nodes with version >= 0.4.0
Various updates to the release process
Remove erroneous ":" in front of port in options dialog (introduced with network refactor)
fix the build (port IP validation in options to network refactoring)
Revert to global progress indication (see #753)
Added mintime and curtime to RPC getmemorypool
Separated COINBASE_FLAGS out into main.h and made RPC getmemorypool return it
*Clear all has a tooltip now *About dialog updated
Replace tabs with four spaces to comply with coding standard in doc/coding.txt
Remove base58 encoding from validateaddress/addmultisigaddress
Refactor: needing to call ConnectInputs to process coinbase transactions was counter-intuitive
Refactored ConnectInputs, so valid-transaction-checks are done before ECDSA-verifying signatures.
Replace OP_EVAL (BIP 12) with Pay-to-script-hash (BIP 16).
Remove not-used-anywhere scriptPrereq from SignSignature()
Minor code cleanup to use fHaveUPnP instead of #ifdef
Add -keepnode which attempts to -addnode and keep a connection open
Compile with extra warnings turned on. And more makefile/code tidying up.
collect more info on tx pooling and block finding for getmininginfo
Add new "getmininginfo" JSON-RPC method, with mining-only fields moved out of "getinfo"
Remove broken Visual C++ makefile.vc, and removed annoying HEADERS= list from other makefiles
Qt: Show transaction ID in details
Remove unused definition
Unit tests for EC key routines
Compact signatures with compressed pubkeys
Compressed pubkeys
Remove mentions on anonymity in debian folder.
Network stack refactor
make transaction description read-only (UI fix)
Add support for opening bitcoin: URIs directly.
Automatically refocus on new SendCoinsEntrys and scroll to them.
-blocknotify=command argument, implemented using system() and boost::thread
I broke -testnet with my TOR option-parsing fixes.
make sure IsMine only returns true when we own all keys
Check all prevout.n if one transaction provides multiple inputs
assert condition in previous commit was backwards
Check for valid prevout.n in FetchInputs. IsStandardInputs could crash if given invalid input index.
Add QR Code support to Win32 Gitian build.
Add libqrencode-dev to the debian/ubuntu apt-get lines.
No reason to have any qrcode stuff in the bitcoind osx makefile.
Be more conservative: check all transactions in blocks after last checkpoint.
New RPC commands: getblockhash and getblock
Copy amount to clipboard (implements #657) - Also, unify similar code related to copying transaction fields to clipboard
Add context menu for address book page (implements part 1 of issue #648)
Move HtmlEscape (escape for qt rich text controls) to qt gui utilities
Comments update
Back out testnet default address change, it breaks accounts on old wallets.
Revert "Use standard C99 (and Qt) types for 64-bit integers"
Use standard C99 (and Qt) types for 64-bit integers
Implement "Start on window system startup" on Win32 + Linux.
include util.h to get SecureString definition.
Include limits, not climints (using std::numeric_limits now)
Added QRCode generation functions via libqrencode. Switch on with USE_QRENCODE=1. Amended build docs for Linux and OSX, and OSX makefile. Added package 'qrencode' to gitian.yml
Code cleanup: use ECDSA_size() instead of fixed 10,000 byte sig buffer, and explicity init static var
Use std::numeric_limits<> for typesafe INT_MAX/etc
Cleanup: removed dead code, and use C99 typedefs for int64 (supported by all modern c++ compilers)
Update bitcoin address numbers for latest luke-jr/sipa scheme
Use block times for 'hard' OP_EVAL switchover, and refactored EvalScript so it takes a flag for how to interpret OP_EVAL. Also increased IsStandard size of scriptSigs to 500 bytes, so a 3-of-3 multisig transaction IsStandard.
Interpret OP_EVAL as OP_NOP until Feb 1, 2012
Disable addmultisigaddress if not testnet
Put OP_EVAL string in coinbase of generated blocks
add key.o and rpcdump.o to makefile.linux-mingw
OP_EVAL implementation
Global fixture to send output to console instead of debug.log
Support 3 new multisignature IsStandard transactions
Rework unit tests so test_bitcoin.cpp does not #include them all
Collapse no-op ExtractAddress/ExtractAddressInner
Implement BIP 14 : separate protocol version from client version
Key import and export
Preparations for key import/export
CBitcoinSecret added (base58 encoded privkey)
Add GetSecret() and GetKeys() to CKeyStore
Make CWalletTx::pwallet private
Add blockhash and blockindex to transaction info
Add my DNS seed domain
Move more newlines out of strings, and fix translations.
Add laanwj to gitian download scripts.
Update debian changelog to 0.5.1.
Bump version 0.5.99 (prep for pulling for version 0.6)
Add sipa's new dnsseed.
GetMinFee takes a mode parameter (GMF_{BLOCK,RELAY,SEND}) instead of fForRelay
Bugfix: fForRelay should be false when deciding required fee to include in blocks
Add "About Qt" menu option to show built-in Qt About dialog
Enable wordwrap for long message in passphrase dialog - Remove explicit resizing from constructor to prevent potential hang
move \\n outside _() in --help
added translations: pt_BR zh_CN
updated translations: es es_CL nb ru
Restore compatibility with miniupnpc 1.5 (without breaking miniupnp 1.6)
Prevent window from being shown momentarily when using -min - In a previous patch, show() was added to all the page switcher functions. As the contructor calls showOverviewPage(), this means the window is shown in the constructor. - This change prevents this by connecting show() to the signal instead.
When using Qt GUI, move parameter-parsing to start of qt/bitcoin.cpp:main()
Re-enable RPCSSL in gitian builds.
Implement -min option to start minimized
Move -lgdi32 after -lcrypto (fixes #681).
Retain only the most recent time samples
Only log time samples in debug mode
Speed up RPC authentication (reworked pull from Joel Katz)
Orphan block fill-up-memory attack prevention
Moved checkpoints out of main, to prep for using them to help prevent DoS attacks
Add missing command-line arguments to --help/-? output
Move DNS Seed lookup to a new thread.
Make home and addressbook icon more consistent with other toolbar icons (make it blue and flip light source direction)
Implement an mlock()'d string class for storing passphrases
allow for filtering addresses and labels by searching for the typed string anywhere, not just at the beginning (#641)
update translation: de
add translations: hu uk
Small fixes in both spanish translations
update translations: da de nl ru zh_TW
add italian translation
Don't forget to bump release numbers in READMEs next time
Bump version numbers to 0.5.1
Update release process instructions
Bump version to 0.5.1
Bugfix: only make QListView transparent, not its tooltips
Update contrib/debian/ for 0.5.0 release and fix copyright file.
update debian copyright file for MIT icon relicensing
relicense my own images as MIT
close old db when rewriting
Never remove database files on shutdown, it caused unreadable wallets on some testers' machines.
Only remove database log files on shutdown after wallet encryption/rewrite
Create new keypool for newly encrypted wallets.
Tweak handling of boost filesystem versions
add message about restarting bitcoin after encrypting wallet succesfully
Obsolete keypool and make sure database removes log files on shutdown.
Resilvering
Improve documentation for UI classes
Example documented class
Add doxygen documentation configuration file
Add model null pointer check (solves issue #595 and https://github.com/laanwj/bitcoin-qt/issues/29)
Do not launch Shutdown in a new thread in case we are running the UI.
Deprecate RPC getblocknumber
Replace kfm_home with go-home for "overview"
update doc/assets-attribution.txt
Tool/process for including correct qt translations in mac .App
Replace icons with Nuvola (LGPL 2.1): some (but not all) GPL-licensed
Replace icons with Nuvola (LGPL 2.1): all non-free except for those by Wladimir van der Laan (who will hopefully relicense)
Release process doc fixes
Add robustness against null models
Add debian build folder
Re-add bitcoin(32&80).xpm
add doc/translation_process.md
merged translations from transifex: da de es es_CL nb nl ru zh_TW
Mention Qt4 runtime dependencies
Static link on Linux. And better document release process on OSX.
Some extra comments
add zh_TW locale
Add English translation to fix plural(s).
Mac releases use macdeployqtplus
Make qt-win32 gitian build deterministic
Added simple critical section test cases.
Added a copy of the GPLv3 to macdeployqtplus
Mac Deployment Script
Cleaned up the critical section macros.
Update documentation to reflect 0.5 reality. And removed leading $ from shell commands, so it is easier to copy and paste from release-process.txt.
attempt to make build deterministic
do not use -fstack-protector on Windows
Update Win32 gitian descriptor for bitcoin-qt.
Add gitian descriptor for qt cross compile via MinGW.
Remove vladimir's DNS seed, at his request.
Save translators some work - Remove duplicate translation strings (that somehow came from old wx UI and ended up in bitcoinstrings.cpp)
Add notes on getting gitian builds going
Update documentation to reflect reality (no win32 gitian builds, new Mac process)
Update openssl to 1.0.0e.
Update setup.nsi for bitcoin-qt.
Decrease number of installed packages for Linux Gitian build.
Remove wxWidgets gitian descriptors.
Update Linux gitian descriptor for bitcoin-qt.
Allow miniupnpc include path specificaiton and fix link on Win32.
Optionally include additional QT plugins when required to build.
Add BOOST_THREAD_USE_LIB define.
Add option to specify a different suffix for boost_thread.
Add returns to avoid annoying compile-time warnings.
Add -Wno-strict-aliasing because boost breaks that too much.
Only define __STDC_LIMIT_MACROS if not already defined.
Update qt readme to indicate Qt is now the primary GUI.
Warn about the qt-at-spi bug in Ubuntu 11.10.
Translation lookup logic improvements - use wildcard for TRANSLATIONS in bitcoin-qt.pro to automatically build all translations present in src/qt/locale (thanks @tcatm) - first load translations/<language>.qm, then translations/<language>_<TERRITORY>.qm, so that territory-specific translations take precedence, but the fallback is on the base language if no territory-specific translation exists.
Revert "translation fixes"
translation fixes - use wildcard for TRANSLATIONS in bitcoin-qt.pro to automatically build all translations present in src/qt/locale (thanks @tcatm) - rename language files to the usual <lang>_<TERRITORY> - include recently added language files for es_ES and nb_NO
update translations: nb, es_CL (from transifex)
Added Caps Lock check and warning at askpassphrasedialog.
Added a workaround for an Ubuntu bug which causes -fstack-protector-all to be disregarded.
Make build work on Mac OS X 10.7 Lion (32bit dependencies through MacPorts)
bitcoind does not need to link with gthread-2.0
Allow users to customize CXX, CXXFLAGS, and LDFLAGS normally
Add spanish translation to TRANSLATIONS
Mac OSX release process changes
Added Spanish translation for qt
Add alt-1..alt-5 shortcut to switch between tabs
Improved Mac experience; QDoubleSpinBox for BitcoinAmountField
Make "Quit" menu saner - Use 'x' for Exit shortcut - Set Ctrl-Q as global quit key sequence
Add support to makefile.unix for the same parameters used by bitcoin-qt.pro, dynamic linking unless STATIC=1 is passed
Improved Gentoo instructions.
Collate generic dependency information. Segregate distribution-specific (Ubuntu/Debian) information. Add Gentoo information.
Bump version to 0.5.0.0
Remove old wx translations, updated qt translations
Remove ui_res from makefiles
Bugfix: "bits" should be a hex-string, not a number (that just doesn't make sense)
Use C's const char* for status strings rather than C++'s std::string, which is slower
Auto-build dependencies
Update mac Makefile and build instructions to use MacPorts
Send "Connection: close" HTTP header with JSON-RPC requests (client)
Remove 2 second sleep from CheckWork
Bugfix: report error creating ThreadSocketHandler thread just like the rest
Only GetAdjustedTime once for the retry loop
Added bitrpc.py which allows for sending of all standard Bitcoin commands via RPC rather than as command line args.
Added wallet tools
Declare integer constant LL
Update release-process to point to gitian.sigs repo.
Edited doc/readme-qt.rst via GitHub
Bugfix: Restore old behaviour of USE_UPNP as close as possible (built & enabled by default, can be disabled or unsupported by option)
remove code that reads addr.txt in LoadAddreses()
Added RPC call 'getmemorypool' that provides everything needed to construct a block with a custom generation transaction and submit a solution
remove possibility of 63 bit overflow in ParseMoney - also, add unit tests for various functions in util.cpp/util.h
only install translator when not empty
simpler ByteReverse
remove cryptopp dependency, add simple unittest for SHA256Transform()
make USE_SSL actually work (thanks @prusnak for noticing)
Add assertion size>0 to MedianFilter
Update "other files" in Qt Creator with all documentation now that the projects merged
use median filter for peer-reported reported number of blocks - fixes problem that one misconfigured or malicious node can mess up progress bar - implementation in src/util.h - testcase in src/test/util_tests.cpp
deprecate midstate and hash1 in getwork
remove deprecated RPCs
Update release-process.txt with gitian release instructions.
translation handling improvements
Use key recovery for message signatures
Compact signatures and key recovery
base64-based sign/verify
Incorporate pubkey in signature, check based on address
Sign and verify message with bitcoin address and public key
Test case for base64 encode/decode
Inline base64 encoder/decoder
Faster Base64 decoder.
Removing the if statement entirely - not needed.
Remove DoS penalty for SigOpCount or immature transactions
Send Coins page not cleared when changing tabs. Clear all button for clearing the entries
Updated readme file with timers.
Output build temp files in build/ instead of current directory.
Update build instructions for the new, no-wxwidgets world
Remove wxWidgets
Skip verifying transaction signatures during initial block-chain download
Bump version to 0.4.1
Change define to determine use of DBUS to USE_DBUS, to prevent overlap with Qt-defined QT_DBUS
make qmake build system more configurable (as suggested by lukejr)
Update release process for repackaging gitian builds, and osx dmg
Add win32 gitian download config.
Script to create OSX .dmg diskimage file.
Restructure gitian files and add download config files.
Updated dutch translation
show balance in sendcoins screen (issue #24)
Update binary mo to match latest po translation.
More denial-of-service misbehavior detection: version/addr/inv/getdata messages
Transaction/Block denial-of-service detection/response
Framework for banning mis-behaving peers
SetMockTime() for cleaner unit testing
put Q_OBJECT everywhere it should be (removes warnings when running lupdate)
SocketHandler thread can be detached
move current qt specific readme to doc/, restore original README.md
assure that base bitcoind and bitcoin still build
move qt-specific scripts to qt-specific directory in scripts/
missed printf in AbortMessage(); merged printfs in EndMessage
log low-level network messages only when fDebug is set
Update to the Chinese Simp translation
Update bitcoin icon to make nsis setup exe deterministic.
make German translation up-to-date
Add some hardening to protect against unknown/future exploits.
Updated German translation
Spanish translation update
remove transparency effect and windows-specific code for now, it's not working as supposed
Some Mac OS X specific things
clarify function signature (GetNumBlocksOfPeers) and use number of 'frozen' blocks as initial value for number of peer blocks
The synchronization progress bar now compares the amount of total blocks to amount of blocks downloaded at application start-up. Could be probably implemented better.
Update gitian build descriptors to produce proper builds.
wxWidgets needs to be at least version 2.9.1 because wallet crypto uses ToStdString() which is not in 2.9.0
http -> https
fix the build (moved code use 'this' instead of 'window')
Pull request #21: windows fixes/cleanup by Matoking
Bugfix: Use timestamp in coinbase rather than "bits", needed to ensure coinbase txn is unique even if address is the same
Save coinbase, not just extraNonce
Revert "Define MSG_NOSIGNAL to 0 on platforms where it is unavailable."
Add binary mo for new translation.
Define MSG_NOSIGNAL to 0 on platforms where it is unavailable.
Romanian translation added
ignore stuff
Add a note to only include .po file
README.md: word wrap text file
Updated readme file
Optimize database writes for transactions with lots of TxIns. Patch from ArtForz, who discovered the problem.
(k)ubuntu 10.04+ notification support (based on @zwierzak his code)
Support for boost filesystem version 3
Bumped version numbers to 0.4.0rc1
Versions 0.3.20 THROUGH 0.3.23 have trouble with blockchain downloads; avoid them
Edited README.rst via GitHub
support USE_UPNP setting
Update binary mos to latest translations.
Stay connected to seed nodes; disconnecting causes problems if you are trying to make the initial blockchain download.
bitcoin-qt cannot be used as command line rpc client
update to work with new lock system, add protocol.* to build system
If compiled -DDEBUG_LOCKORDER and run with -debug, print out every mutex lock/unlock (helpful for debugging something-is-holding-a-mutex-too-long problems)
Do not try to download blockchain from 0.3.23 nodes
Give hard-coded seed nodes a random last-seen time, to randomize order they're tried.
Update the list of seednodes.
obtain cs_wallet mutex to protect vchDefaultKey
SetCrypted() obtains keystore lock, to be safe.
Highlight mis-matching locks
Add reference python miner, in contrib/pyminer/
comments and readme update
Wallet encryption part 2: ask passphrase when needed, add menu options
add russian translation and add unicode compatibility (merges pull request #20)
CHECKMULTISIG unit tests.
Add Gitian Build descriptors for Boost and wxWidgets.
Wallet encryption part 1: show wallet encryption status
Upgrade dependancies and tweak build process.
Mingw gitian build with deterministic bitcoin.exe by use of faketime
Mingw gitian with separate wxWidgets and boost
Linux gitian config with separate wxWidgets build
Edited locale/pl/LC_MESSAGES/bitcoin.po via GitHub
Move CInv to protocol.[ch]pp
Move CAddress to protocol.[ch]pp
Start moving protocol-specific code to protocol.[ch]pp
Move func 'REF' from util.h to serialize.h
Cleanup makefiles such that diffs to them are smaller
Make some global variables less-global (static)
Compile with DEBUG_LOCKORDER to detect inconsistent lock orderings that can cause deadlocks
Updated czech translation
update README for issue #15
add russian translation by msva
Remove unused ScanMessageStart function
src/makefile.unix: remove -DFOURWAYSSE2
fix issue #13
Updated checkpoints, maybe Tx fee should be reduced to 0.0001 from 0.0005 and maximum minimum tx should be 0.0010.
Add specific wallet encryption details to doc/README
Missed a 'password' should be 'passphrase'.
Use 'unsigned char' rather than 'char' for pchMessageStart.
Qualify make_tuple with boost:: namespace.
Test for SO_NOSIGPIPE rather than assuming all BSDs support it.
Do-nothing MapPort() ifndef USE_UPNP.  fixes #450
Unify copyright notices.
Cleanup test suite output to be more useful.
Add file for transaction tests.
Add a file for script tests
Add prototype for EvalScript() to script.h
Add missing include to serialize.h
Add missing includes to net.h
Add missing include to script.h
Add missing includes to key.h
QtUI code cleanup / comment improvements
add TODOs in  parseBitcoinURL
update readme
allow empty/missing amounts in URL
don't include <QDebug>
Accept "bitcoin:" URL drops from browsers
reorganize transaction model data function, and transaction tooltip
improve sync spinner
speling fix
improve tooltip over transactions
select new address immediately after creation
minimize amount of text in status bar; show only icons, if the user wants explanation they can view the tooltip
when clicking a transaction on the overview page, send the user to the transactions page
Clarity: change definition of "confirmed"  to "counts towards balance"
Don't listen if on TOR (resolves #441).
fix drawing on gtk
unconfirmed amount = grey
Make it clear that setting proxy requires restart to fully apply.
show last few transactions on overview page
make amount field the same width as decimals field
avoid strAddress + validity checks
add attribution for wallet image
update readme and splash screen text
add splash screen
Identify as "Bitcoin + version number" when mapping UPnP port
Translation from "Open Bitcoin" to "Verstuur Bitcoins"
show n/a for mined transactions (and send to self) instead of empty field
address icons
Check for duplicate txins in CheckTransaction.
Properly html-escape labels
comment update
make sure address book model is up to date after sending coins
Comment "deprecated"
Remove unused variable
Hide addresses in transaction overview by default, they can be re-shown as a configuration option
Make dot in amount field more apparent
Make debug info more interesting (show SHA160 addresses for inputs)
Remove no longer valid comment
Full support for other units, add configuration option for default unit (used when displaying amounts)
normalize SIGNAL/SLOT signatures (http://marcmutz.wordpress.com/effective-qt/prefer-to-use-normalised-signalslot-signatures/)
also accept numbers without dot/decimals for parsing, fixes transaction filter row
CAddrDB::LoadAddresses: properly initialize CAddress
Bugfix: don't overuse limited ExtractAddress
show amounts in <b>bold</b> in confirmation dialog
Re-apply pull request #10, it got lost for some reason
make SetHash160 return a value (as specified in the function signature)
make SetHash160 return a value (as specified in the function signature)
update readme
Reset unit to default when clearing the field, to prevent confusion
refuse to format nor parse invalid units
allow multiple units in bitcoin amount widget (for example, for sending) using a combobox
Negative transaction color changed to red (was grey due to mistake)
fix unit names (μBTC)
preparations for multiple unit (uBTC, mBTC, BTC) support, fix amount entry issue
put color constants in guiconstants.h
Clean up the project file.
On Mac OS X do not link aginst the boost libraries in UNIX:LIBS
better exit icon
make all tab icons blue/gray for more consistencyx
improve tooltip texts
add windows program (.exe) icon
Allow ammount field to be empty so that one can specify .05 instead of having to type the leading zero as in 0.05
Implement range... transaction filter
fix clear() (clear red/invalid status)
Actually use mapAlreadyAskedFor.
one remove/delete icon is enough and the red minus better matches the add icon
move buttons to bottom of send coins tab, outside of scroll area
windows build fix
put sendcoins entries in scroll area, so that window does not become bigger than screen with many recipients
show rotating spinner when block download out of date, tick otherwise
make initial block download reporting somewhat better by tracking version responses
split off CBase58Data from CBitcoinAddress
Use CBitcoinAddress instead of string/uint160
get rid of mapPubKeys
Changed Russian translation according to comment in issue 395
Added German wallet encryption messages translation.
Basically some grammatical fixes of the German translation.
readme update
update readme
add missing icon
Revert "Now that send coins / receive coins etc are tabs, remove them from menu, and reorganize menu bar"
add sendmany support
Added crypter to makefile.vc.
Suppress uninitialized warnings.
move README.md out of the way for now
Add call to request unconfirmed balance
fix quoting
Now that send coins / receive coins etc are tabs, remove them from menu, and reorganize menu bar
listsinceblock now shows txns with 0 confirms, as well as allows the lastblock return property to be targeted to the block with the specified depth
Add listsinceblock command for retrieving all wallet transactions in blocks after the specified block
solve warnings at startup
added polish wallet encryption messages
Single DB transaction for addresses from DNS seeds
Single DB transaction for all addresses in a message
Generate Warning when using default key.
fix warning: control reaches end of non-void function [-Wreturn-type]
fix warning: variable ‘nMinDepth’ set but not used [-Wunused-but-set-variable]
Bugfix: add autogenerated addresses to address book
Update mac build (alkor on forums)
doc/README: word wrap into something readable
Bump version to 0.3.25
Update CWallet::LoadWallet for proper return type.
fix warning: unused function 'SigIllHandlerSSE2' [-Wunused-function]
fix warning: unused variable 'X' [-Wunused-variable]
fix warning: X enumeration values not handled in switch [-Wswitch-enum]
fix warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
fix warnings: using the result of an assignment as a condition without parentheses [-Wparentheses]
fix warnings: expression result unused [-Wunused-value]
fix warning on 64bit systems: cast to pointer from integer of different size [-Wint-to-pointer-cast]
Update makefile.linux-mingw to work with crypter and UPnP fix.
Increase resolution of Windows icon.
Make an invalid addrIncoming so that old clients crash.
Use DB Transactions when encrypting wallet. This speeds up the encryption process significantly.
Do not use obsolete CPrivKey for passing keys around
Add Wallet Encryption section to README
Add the walletlock RPC method to lock the wallet manually.
Dynamically remove/insert the Options for encryption in the menus.
Push unlocked_until in getinfo.
Set the number of SHA512 rounds based on the speed of the computer.
Add wallet privkey encryption.
Remove NSIS branding from bottom divider.
Set default compression for NSIS installer to LZMA.
also show balloon on sent transaction, to notify when coins sent
Show unconfirmed balance on overview page
Make tooltip on refresh more clear
Add logos/branding currently found on bitcoin.org into NSIS installer.
Make mlock() and munlock() portable to systems that require the address to be on a page boundary.
wxp/mingw build fixes
add better windows7/vista look by nico_w
remove placeholder text from ui form, code generator screws up on older qt
Add -fstack-protector to gcc CXX flags
README update
add export functionality for address book / receiving addresses
remove magic number: change threshold for nLockTime to constant
remove magic number: change threshold for nLockTime to constant
remove magic number: change threshold for nLockTime to constant
Readme update
Add context menu on transaction list: copy label, copy address, edit label, show details
Transaction list: less terse tooltip
send coins dialog: make sure send button remain default button (triggered with enter)
Compile 'sv' translation
forgot synced icons
Reorganize "send coins" tab
Display a "freshness" indicator instead of nr of blocks
mlock() all private keys in memory
Prepare codebase for Encrypted Keys.
update README
"Status" doesn't fit into narrow first column in transaction history, make the header empty
Add German translation by nico_w
add [testnet] to whatever the current window title is
clarify todo/dones in readme
Selection/tab navigation fixes
convert to full tab-based ui
Qt handles the "..." for too long table rows. Remove this functionality from TransactionTableModel...
Sync to bitcoin git e94010b2395694d56dd6
temp patch for qtui
CKeyStore::AddKey must return a boolean
Export functionality for transaction list
Rename "History" tab to more logical "Transactions", move "Number of transactions" from status bar to overview page
minor language/text updates
Improve view of generated transactions (show clock icon when still maturing)
Address book: Disable "copy to clipboard" and "Delete" buttons when nothing selected
Remove code for no longer existing edit button in address book dialog
Add "BTC" to all amount widgets, to make clear what the unit is
tab reorg phase 1: split main gui into "overview" and "history"
make balance selectable / copyable
Add minversion to wallet.
Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)
Revert "Make UPnP default on Bitcoin but not on Bitcoind."
Added a couple minor things to match newer build process.
as there is no "default receiving address" in this GUI, don't autogenerate new addresses on receiving
Do not use comma as thousands separator Using the comma as thousands separator causes problems for parts of the world where comma == decimal point.  Germans sending 0,001 bitcoins are unpleasantly surprised when that results in 1 BTC getting sent.
add windows build instructions
Eliminate useless padding
windows build fixes
Block-chain lock-in at 134444
Minor translation changes for latest build
move another setPlaceHolderText to 4.7+ only code
remove libboostall-dev is not needed dependency
Bump OSX version to 0.3.24 (missed in previous commit)
Bump version to 0.3.24.
remove "edit" button, document double-click behaviour to edit
ui improvements: allow inline editing of labels/addresses in address book table, better tab order in send dialog, set focus on sending address table when coming from send coins dialog
make tooltip equal to placeholder
Check addresses in address book for validity
Send: dialog redesign (automatically look up label for entered address)
Give more detailed error messages for connection failure.
update build instructions (thanks tschaboo)
"Receive coins" instead of "Receiving addresses"
Placeholder text can only be used for Qt 4.7+
Add keystore.h to makefile.vs's header list.
Further updated Visual C++ makefile.
Make UPnP default on Bitcoin but not on Bitcoind.
Enable DNS seeding by default.
Remove "default address" from main GUI screen, it only confuses people
Add "last month" filter
Updated Visual C++ makefile.
make amount column wider, so that more decimals fit in
cleanup unused constants
Only use dnsseeds and static seeds when not on testnet.
reverse address and label (suggestion by Danube)
General cleanups
Limit response to getblocks to half of output buffer size
Add new DNSSeed dnsseed.bluematt.me.
Address book: show unlabeled addresses as (no label)
fix sorting in address table dialog
add icons to address book dialog buttons
Add "receiving addresses" to toolbar
Make it very clear when on testnet (green icon, add [testnet] to title)
Split off WalletModel from ClientModel, to be able to support multi-wallets in future
show an error if amount is not valid (either the amount or decimals is empty)
Make it more clear what the "New" button does
Implement filter row instead of tabs, allows for more expressive filters
add "BTC" to balance for clarity
added polish translation
use 256x256 window icon, to prevent uglyness on OSes that show full-size icons for apps
Add OSX App bundle and correct build instructions to reflect reality.
Boost unit-testing framework. make -f makefile.{unix,osx,mingw} test_bitcoin to compile dumb, do-almost-nothing placeholder unit tests.
add icons to "New..." and "Copy to clipboard" buttons
rpc: don't send 403 when using SSL to prevent DoS
rpc server: send '403 Forbidden' to rejected clients
update core to d0d80170a2ca73004e08fb85007fe055cbf4e411 (CWallet class)
reduce spacing between "Add to address book as" and the text field
fix typo in dutch translation
update dutch translation
compile fixes by Unthinkingbit
Improve look/usablity of send coins dialog
allow adding address to address book in send dialog
Call "initial download" "synchronizing with network" instead
finish nl translation
use buttonbox for options dialog
Edited init.cpp to include a check that -datadir exists
experiment with internationalization (nl), unbreak build (externui.h->qtui.h)
use #ifdef QT_UI to distinguish Qt UI instead of hardcoded #if 0
clarify text
Allow changing default address (fixes issue #6)
highlight default address
when going to decimals field using ./, select it all, so that entry starts from scratch instead of appending to previous value
fix issue #7
Add comment to tooltip that only sending addresses can be deleted
introduce bitcoin amount field with split amount/decimals, to protect against mistakes (https://forum.bitcoin.org/index.php?topic=19168.0)
number of confirmations is no longer magic value
Bugfixes walletclass
fixes for mac build
CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false to fix warning.
initial block download spans total blocks minus threshold
add GetTotalBlocksEstimate() function, move magic number to constant
On initial block chain download, show a progress bar
update bitcoin core from git (eeac8727bc0a951631bd)
add configure and receive icon
Update translations and remove obsolete translations.
Use explicit resource initialization, apparently needed on some platforms
Prevent notification balloon-spam on initial block download, const-correctness in client model
remove commented code, use // for one-line comments and comments inside functions
fix issue #3 (dark theme compat)
add license for md2k7's icons
remove unused icons
add svg sources for icons
better icons for confirmations
doc/release-process.txt: minor updates
show connection meter "full" only at 10+ connections
add attribution for icons
transaction status icons
icons test
CWallet class
move wallet code to separate file
add connection meter
Make status column narrow (icon only, details on tooltip)
FormatFullVersion: build fix related to recent translation improvement
Consistent Bitcoin example address
Update swedish translation
Add berkelydb version warning
link to -lcrypto as well
Internationalization -- conversion of strings from bitcoin core
Internationalization -- initial step, make _ return a std::string to prevent memory leaks
Address book: select action (edit/select) based on context
Status column reorganization
Reset extraNonce only when prevBlock changes, so miners can continue updating the time on their work until it's stale
new icons -- test
replace icons
add svg version of icon, so that it can be scaled to bigger sizes later
prepare internationalization; rename project to bitcoin-qt
update bitcoin core to git ce148944c776ae8e91cc058f44ddce356c7cebc9
add the bitcoin (MIT?) license
remove wallet updating debug output
use stylized icon by bitboy
Faster timeout when connecting
Double check translation and improved a translation string
add build instructions to doc
move back to original directory structure
Somewhat confident now, tested on GNOME+KDE, with all types of transactions. Next step is integration into bitcoin tree.
Add tooltips, make "amount" entry consistent in Options dialog
Remove unused variable
Added Swedish translation
show notification balloon on incoming transaction
show transaction details on doubleclick
address book edit: edit the right row
use real copyright sign in about dialog
transaction details dialog on doubleclick
Add minimal release process docs.
Lower minimum relay TX fee to 0.0001 (from 0.0005) BTC.
Updated Chinese Simp translation
consistent bracing style
Demystify a few magic numbers.
align "amount" input in send coins dialog to the right
Reduce minimum TX fee for new transactions, to 0.0005.
update to newest git bitcoin core
ask fee
Bump version to 0.3.23.
fix
show messages from core/net thread
Implement Minimize to tray / Minimize on close
Disable map upnp option if built without USE_UPNP
save changed options in database
show actual version nr in about dialog
comment update
comment update
update most importent TODOs in readme
fix "send to" address book
update transaction status as new blocks come in
create new address from main gui, move address book model to client model
support incremental wallet updates
create keypool in LoadWallet()
Finish implementation of address book
Make base58 validator explicit
Add common temp files to .gitignore.
edit address dialog: basic data/widget binding
resolve dependency issues
Bugfix for dnsseed introduced by dnslookup
namespacing, user friendly base58 entry, addressbook work
monospace font for bitcoin addresses
readme fix
update readme
define PAIR_TYPE as std::pair
beginning of address model
Add addresses that we've sent to to the address book
Impl->Priv
implement options model / improve view with validators
Apply button
move getTransactionFee to OptionsModel
implement options model, show current options in options dialog
sending support
mark specific warnings to disable for the cases where bitcoin core "sins"
"Receive with" i.s.o. "Receive from" address
auto-update transaction list
bugfix: accept free transactions
documentation, small fixes
Generated transactions are 'other', and only show up in All tab
extend generation descriptions
use real ParseMoney function to parse input to Send dialog
fix balance display, display number of transactions
look up addresses in address book
transaction color based on confirmed/not confirmed, basic transaction model impl
work on transaction list model
bind transactionmodel
Update to openssl-1.0.0d and enable RPC-SSL on Win32
Handle high DPI a bit more gracefully on Win32. #243
loss of significance in difficulty (by lfm)
Reset Last-Translator on de po to the proper value.
Czech translation
Separate required fee for relaying and creation
Updated spanish translation
Updated dutch translation
Chinese Translation
Add esperanto translation.
Update russian translation to latest git.
use user roles instead of hidden columns for model sort/filter keys
don't start in server mode
core initialisation, client model binding
Update transactions already in the wallet when rescanning.
go on testnet for now
Update Italian translation to latest git.
Revert "OSX build tweaks (laszlo)"
Update NSIS Installer file to support the new directory structure.
irc: #bitcoin is overflowing.  split up into 100 randomly-joined channels.
OSX build tweaks (laszlo)
Update Gitian Build Descriptor to match new directory layout.
Update Lithuanian Translation to latest git.
Only include certain boost headers if necessary.
Remove some globally unused headers from headers.h
Bugfix for dnslookup: irc.cpp still used old CAddress constructor
Update German translation to latest git.
Update spanish translation to newest git.
doc/README: bump version to 0.3.22
update build system for macosx
Only include strlcpy.h when we have to
Only include init.h when we have to
Only include net.h when we have to
Only included rpc.h when necessary
Only include db.h when we have to.
Only include irc.h when needed
add readme file
remove debug stuff for implemented methods
make send coins dialog more user friendly (better checking)
Build error mingw, missing std::
-port option to listen on arbitrary port
update to bitcoin-git
make bitcoin include files more modular
todo update
integration of core bitcoin
bugfix in dnslookup code: didn't compile in mingw
integrate a few extra .h files
core is a more appropriate name for the bitcoin library
integration phase
begin integration with bitcoin upstream
Add Lithuanian translation.
more improvements
improve address book, add less conspicious toolbar icon
make address settable from outside
Add #ifdef USE_UPNP around usage of fUseUPnP to fix build failure.
make balance/blocks/connections/transactions settable through slots
clipboard handling
rename UI controls
update
lowercase
rename to qt standard
add options dialog, spawn dialogs at the right place
Reset extraNonce only every 15 seconds, just in case some miner is updating time himself and stuff
Update nTime after nExtraNonce to avoid potential race (extraNonce being reset due to just-occurred time change after nTime is set)
Decrease minimum TX fee to 0.0005 BTC.
Replace CENT with new constant MIN_TX_FEE, where appropriate.
Support for name lookups in -connect and -addnode
implement filtering, action listeners
ignore generated resource file
update model
Allow move RPC to take account balances negative Use case:  Customer owes you bitcoins, so you create a payment address associated with an account with a negative balance (the amount they owe). When customer pays, that account balance will go to zero.
new resource location
moved files
Use resource system
Add settxfee RPC, to permit setting default TX fee at runtime.
Help for sendtoaddress/sendfrom was wrong: amounts are rounded to 0.00000001
listtransactions number-of-params check was wrong.
Manual merge of jaromil's source tree reorg commit.
Initial commit of changes to make JSON-RPC HTTP headers case-insensitive, as per RFC 2616
add all (unpopulated) dialogs
update
restore orig send image
initial commit
Allow using the [from] parameter also from command-line
When an error is returned, the client crashes as EndModal is called twice. This fixes that and simply returns instead.  At least GTK won't complain.
Clarify the meaning of USE_UPNP in build-unix.txt
removed tooltip balance until it can be made to change without opening the UI
Remove the option to generate coins from the Options Dialog.
fixed some translations which was... weird
added balance to tooltips
added "Send Bitcoins" option in the tray menu
Bump version number to 0.3.22 Doing this now because I always forget to do it later. (I'm hoping the next release will actually be 0.4.0)
gitian: strip binaries
gitian descriptor with miniupnpc
Remove unnecessary line which creates a dependency on wx's png library.
Bugfix in recursive check in IsConfirmed()
directory re-organization (keeps the old build system)
Link with libpthread on Linux, required by libboost_thread.
Better wording for transaction fee notification messages
More 0.3.21 release prep
Update date in license.txt
Monitor incoming transactions for spends by (a copy of) your own wallet
Accept non-standard transactions on testnet.
getbalance '*' was ignoring minconf param.
Automatically rescan after restoring wallet.dat
Remove GUI's "Generate Coins" option from the menu.
Set time locale to POSIX in rfc1123Time so weekday/months in http responses are correct.
Send/return full bitcoin version string in Server and User-Agent HTTP headers
Ensure version number->string conversion is consistent
add parameter from to listtransactions this allows querying for ranges, i.e. transactions [from, from+count)
Exit when no UPnP router found and fUseUPnP gets set to 0.
build: add note for Snow Leopard users and fix typos in linking instructions
New checkpoint at block 118,000
pidfile support for daemon
Bugfix for spentpertxout: slow startup
select transaction outputs separately
Spent per txout
disable -daemon on windows; bitcoind forks only with -daemon set
rfc1123Time: increase buffer size for time string
Report immature coinbase transactions in listtransactions
RPC sendmany must acquire cs_main lock
Remove 4way SSE2 scanhash implementation.
Update DNS seed list
Allow UPnP mapping when USE_UPNP is defined and miniupnpc is installed at build time(statically linked).
allow coredumps by not catching SIGSEGV
[locale] Regenerate es, nl binary message catalogs
catch SIGINT, SIGHUP and SIGSEGV and shutdown cleanly
daemon-mode: add sleep() loop to prevent defunct child process, call setsid() in child
Updated dutch translation
Update copyright in About box from 2010 to 2011
Update Spanish translation.
sendmany RPC command, to send to multiple recipients in one transaction.
Make sure rate-limiting code is thread-safe
Continuously rate-limit free transactions. Changed algorithm to use continuous exponential function instead of discrete 10-minute window. Changed -limitfreerelay to be kilobytes-per-minute instead of boolean.
remove from/message field from uiproject
Update copyright in About box from 2010 to 2011
Bump version number to 0.3.21 (lest we forget)
Only log timestamps if -logtimestamps is set.
Add timestamp prefix to each line in the debug log (this time with human-readable times)
dnsseed: fix printf
DNS seeding
shy patch from Hal
throw JSONRPCError(-5, "Invalid bitcoin address") instead.
setaccount should return if an invalid address is provided. This prevents setaccount from creating new accounts which do not have any addresses.
-help: do not show -server and -daemon in bitcoind
force fDaemon in bitcoind
fix whitespace
fix -daemon switch
Make send/receive limits bigger (10MB each)
Bugfix: avoid sub-cent change (lost in fees) whenever possible
Avoid sprintf decimal-point localization
fix missing newline in help
Added .gitignore, which prevents 'bitcoin' and 'bitcoind' from showing up in git.
build-unix.txt: Updated (now OK to use wxWidgets > 2.9.0).
makefile.unix: WXINCLUDEPATHS now only used for building GUI object files.     Moved it out of CXXFLAGS and into the command-line for the GUI objects.     It will no longer be invoked for non-GUI and crypto object files.
makefile.unix: Removed redundant use of wx-config in DEFS (it was being included twice).     Also changed wx-config --cppflags to --cxxflags. I am not sure what the     difference is supposed to be, but --cppflags does not include -pthread.
ParseMoney: allow full precision
FormatMoney: show full-precision values
Do not round input amounts; allow RPC full precision.
Use ValueFromAmount consistently
Bump version to 0.3.20.02
Set SO_REUSEADDR on JSON port
remove From/Message fields from SendDialog
Changed setup for mingw toolchain
Windows mingw32 makefile and build notes (thanks m0mchil)
Bump version to 0.3.20.01
move gitian descriptor file
Set maxconnections default to 125
Denial-of-service flood control Drop connections that are either sending messages too fast to handle or are processing messages so slowly data starts to back up. Adds two new options:   -maxreceivebuffer  Default: 2000 (2000*1000 bytes)   -maxsendbuffer     Default: 256  (256*1000 bytes)
Update windows build process for 0.3.20 release
Visual C++ compatibility fixes
Set SO_REUSEADDR for JSON-RPC port
Added 320 fresh seednodes to replace the old ones.
Reset testnet with a new genesis block
add gitian build descriptor
new checkpoint at block 105,000
do not create 'Your Address' account
1. Change hardcoded g++ to $(CXX) 2. Change CFLAGS to CXXFLAGS 3. Add binaries to clean target 4. Generate wxWidgets includes/ldflags/etc from wx-config
Explicitly state that make -f makfile.unix is the way to build
Don't scan the time offsets vector repeatedly once we've displayed the warning that the user's clock may be wrong.
Repeatedly resetting the timestamp for seed nodes in the database was slow.  Only update the database if it's a real change.
Bump version number to 0.3.20
cpuid instruction clobbers eax/ebx/ecx/edx
The -rpcssl command line option is a boolean, like -server, -daemon, -testnet, etc.  Specifying -rpcssl=1 is the same as just -rpcssl, as for any other boolean flag, so let's show it the same in the help text.
Updated development process description
Add const bool VERSION_IS_BETA to serialize.h and use it when formatting the version string.  Show the version string in --help text too.
Add -rescan option to --help output
Don't use GetBoolArg() and mapArgs; use one or the other.
The --help text wasn't showing the default values for three of the options, as follows:
Add new command line argument "-printtoconsole" to send debugging output to the console instead of to debug.log.  The code for this was already in place, but there was no way other than editing the source and rebuilding to turn it on.
print -rescan timing info in debug.log
Reconcile getbalance and listaccounts 0 in the shared-wallet case If you copied your wallet and used it on two different machines, the balance reported by getbalance and the sum(listaccounts) could disagree, because you might receive payments for an address that is in your wallet but not your address book.  Now all such transactions are credited to the default empty-string account.
ReacceptWalletTransactions bugfix
include version information in help output
don't set statusbar background color
Add the -keypool option description to help output
Add account/address details to gettransaction output
Add time to category:move transactions.
don't advertise on IRC if we don't allow external connections
add -nolisten command line option
Add address to listtransactions output
EndModal fix for Mac from piotrp
EndModal fix for Mac from piotrp
Straw-man for dev process
Missed a int64_t cast when I added transaction time output
listtransactions was reporting address instead of account for 'receive' setgenerate true 0  is now the same as setgenerate false And return transaction time
New RPC command: listaccounts.  New RPC setting -rpctimeout.  And listtransactions '*'
get external ip from irc
-- version 0.3.19 release
correction
added some DoS limits, removed safe mode
-- version 0.3.18 release
IsStandard() check for CScripts: only relay/include in blocks CScripts we can understand.
fix wallet.dat compatibility problem if you downgrade from 0.3.17 and then upgrade again
preps for future client-only mode, jgarzik's initial download speedup
All boolean options/flags now work the same way.
JSON methods: listtransactions, gettransaction, move, sendfrom and getbalance <account>
added boost tuples to serialize.h
-- version 0.3.17 release
still working on account-based commands getbalance, move and sendfrom, they're only for testing for now
new getwork
Depracate "label" API, replacing with account New RPC methods: move, sendfrom Change to getbalance (now takes optional [account] argument) Renamed methods with "label" in their names. sendtoaddress returns hexadecimal transaction ID instead of "sent".
added transaction fee setting in UI options menu, cut free transaction area from 50KB to 26KB
small bugfix
require some minimal priority for free transactions to slow down transaction spam
efficiently sort transaction dependencies in one pass
OutputDebugStringF fix for Mac FileVault problem, take 3 (cannot use a CRITICAL_BLOCK because of undefined order calling static destructors; instead, keep debug.log open, and tell people to use copytruncate when doing log rotation)
Make OutputDebugStringF thread-safe again (thanks ArtForz for catching)
Re-open debug.log every ten minutes instead of every printf; fixes performance problem with Mac FileVault.
Update websites used for GetMyExternalIP
-- version 0.3.15 release
Add paytxfee to getinfo output
SelectCoins first pass tries not to use coins with less than 6 confirmations
-paytxfee is now per KB, BitcoinMiner prioritise transactions by how old their dependencies are
Prevent double-sends from quick double-button-clicks
bugfixes from Dean Gores, addr system changes, make sure no gen before block 74000
testnet and keypoololdest added to RPC getinfo output.  And RPC now sends proper HTTP Date headers.
-- version 0.3.14 release
Gavin Andresen: multiple instance check, -testnet use port 18333
validateaddress RPC command
Update README now that main svn has -testnet built in
Gavin's TEST network as -testnet switch, misc fixes
makefile.unix tweak from Xunie so bitcoind links on Ubuntu 10.04 x86_64
-rpcssl=1 option, allowing secure HTTPS JSON-RPC connections on OSX/Unix.
dkaparis: boost::bind build fix for c++0x
key pool for safer wallet backup
updated Russian translation
recursive function to determine if own unconfirmed transaction can be spent
Russian translation by eurekafag
fixed linux build, dkaparis: _WIN32_WINNT 0x500 -- version 0.3.13 release
don't count or spend payments until they have 1 confirmation, misc cleanup, changed internal version number from 312 to 31300 -- version 0.3.13
Update README.md
changed free transactions per block threshold
changed free transactions per block threshold
Add branch README.md
only accept transactions sent by IP address if -allowreceivebyip is specified
only accept transactions sent by IP address if -allowreceivebyip is specified
config option -rpcallowip= to accept json-rpc connections from another machine
config option -rpcallowip= to accept json-rpc connections from another machine
reorganize BitcoinMiner to make it easier to add different SHA256 routines
reorganize BitcoinMiner to make it easier to add different SHA256 routines
dropped DB_PRIVATE from dbenv.open
dropped DB_PRIVATE from dbenv.open
fix build on non-intel architectures, thanks teknohog
fix build on non-intel architectures, thanks teknohog
fix problem sending the last cent with sub-cent fractional change
fix problem sending the last cent with sub-cent fractional change
try to auto-detect whether to use 128-bit 4-way SSE2
try to auto-detect whether to use 128-bit 4-way SSE2
Gavin Andresen: clean shutdown on SIGTERM
Gavin Andresen: clean shutdown on SIGTERM
cleanup, catch some recoverable exceptions and continue
cleanup, catch some recoverable exceptions and continue -- version 0.3.12 release
Gavin Andresen: json-rpc return standard error objects with error code numbers, json-rpc command line client return exit code, added rpc backupwallet command
propset svn:eol-style native
added -testsafemode switch -- version 0.3.11 release
change switch name to -disablesafemode
more rpc methods allowed in safe mode
alert system -- version 0.3.11
warning message if clock is too far off
block index checking on load, extra redundant checks, misc refactoring
added -testsafemode switch -- version 0.3.11 release
change switch name to -disablesafemode
more rpc methods allowed in safe mode
alert system -- version 0.3.11
warning message if clock is too far off
block index checking on load, extra redundant checks, misc refactoring
do an extra CheckBlock in ConnectBlock
erase the bad chain after disconnecting it
blocks-1, verify block chain on load, so wouldn't have needed to delete blk*.dat, it would have done a reorg automatically
wrap sha256.cpp in FOURWAYSSE2 #ifdef
added -march=amdfam10 to sha256.cpp in makefile.unix
makefile.unix to build with option to enable tcatm's 4-way SSE2 SHA-256 with -4way switch on Linux
do an extra CheckBlock in ConnectBlock
erase the bad chain after disconnecting it
blocks-1, verify block chain on load, so wouldn't have needed to delete blk*.dat, it would have done a reorg automatically
wrap sha256.cpp in FOURWAYSSE2 #ifdef
added -march=amdfam10 to sha256.cpp in makefile.unix
fix for block 74638 overflow output transaction
misc changes
makefile.unix to build with option to enable tcatm's 4-way SSE2 SHA-256 with -4way switch on Linux -- version 0.3.10 release
scanback check to prevent adding to the 74638 overflow chain
fix for block 74638 overflow output transaction
misc changes
Quick fix: bad block 74,652
fix -datadir=./subdir relative path, autostart off by default except on windows, fix occasional "vector iterator not dereferencable" assertion with msvc, fix readlink compile warning on linux build, use sys/param.h and BSD define instead of __BSD__, -paytxfee switch
fix -datadir=./subdir relative path, autostart off by default except on windows, fix occasional "vector iterator not dereferencable" assertion with msvc, fix readlink compile warning on linux build, use sys/param.h and BSD define instead of __BSD__, -paytxfee switch
fix build, thanks jgarzik
disable SSE2 on 32-bit
gethashespersec and added version and hashespersec to getinfo
json-spirit print reals with 8 decimal places, bitcoind help <command> instead of bitcoind <command> -?
fix build, thanks jgarzik
disable SSE2 on 32-bit
gethashespersec and added version and hashespersec to getinfo
json-spirit print reals with 8 decimal places, bitcoind help <command> instead of bitcoind <command> -?
always make 8 outbound connections even if have inbound, limit one outbound connection per a.b.?.? range, switch -maxconnections=#
enable SSE2 in all builds to fix crypto++ SHA-256 on 64-bit
correct typo for mac compile, update makefile to use llvm
always make 8 outbound connections even if have inbound, limit one outbound connection per a.b.?.? range, switch -maxconnections=#
enable SSE2 in all builds to fix crypto++ SHA-256 on 64-bit
correct typo for mac compile, update makefile to use llvm
new safety feature displays a warning message and locks down RPC if it detects a problem that may require an upgrade -- version 0.3.8
new safety feature displays a warning message and locks down RPC if it detects a problem that may require an upgrade -- version 0.3.8
fixed segfault in bignum.h, additional security limits, refactoring -- version 0.3.7
fixed segfault in bignum.h, additional security limits, refactoring -- version 0.3.7
simplified makefile.unix, updated build-unix.txt instructions to include boost 1.37
simplified makefile.unix, updated build-unix.txt instructions to include boost 1.37
reverted makefile.unix wx-config -- version 0.3.6
Fredrik Roubert: simplified makefile.unix with wx-config, misc
fixed makefile.osx
fixed makefile.vc
reverted makefile.unix wx-config -- version 0.3.6
Fredrik Roubert: simplified makefile.unix with wx-config, misc
fixed makefile.osx
fixed makefile.vc
better IsInitialBlockDownload
added a subset of Crypto++ 5.6.0 with 48% faster ASM SHA-256, combined speedup 2.5x faster vs 0.3.3, thanks BlackEye for figuring out the alignment problem
better IsInitialBlockDownload
added a subset of Crypto++ 5.6.0 with 48% faster ASM SHA-256, combined speedup 2.5x faster vs 0.3.3, thanks BlackEye for figuring out the alignment problem
tcatm's cached SHA256 state idea, about 70% faster generating
tcatm's cached SHA256 state idea, about 70% faster generating
bitcoind now compiles without wxWidgets or wxBase
Gavin: BIO_FLAGS_BASE64_NO_NL
Gavin Andresen's JSON-RPC HTTP authentication, faster initial block download -- version 0.3.3
bitcoind now compiles without wxWidgets or wxBase
Gavin: BIO_FLAGS_BASE64_NO_NL
Lachesis: remove newlines every 64 characters in EncodeBase64
Gavin Andresen's JSON-RPC HTTP authentication, faster initial block download -- version 0.3.3
Configuration file, HTTP Basic authentication
json-rpc password, minor UI tweaks, removed some outdated txt files
security safeguards, limited addr messages -- version 0.3.2
version 0.3.1 release
Spanish translation by milkiway, French translation by aidos
version 0.3.1 rc1
minor UI tweaks, removed some outdated txt files, (and json-rpc password -rpcpw= switch, which we're going to revert)
security safeguards, limited addr messages -- version 0.3.2
version 0.3.1 release
Spanish translation by milkiway, French translation by aidos
version 0.3.1 rc1
fix openssl linkage problems, disable minimize to tray on Linux because it has too many problems including a CPU peg bug
switched from wxStandardPaths to GetDefaultDataDir, fixes bug reported by m0mchil when username contains non-lower-ASCII characters -- version 0.3.1
switched from wxStandardPaths to GetDefaultDataDir, fixes bug reported by m0mchil when username contains non-lower-ASCII characters -- version 0.3.1
Gavin Andresen: implementation of autostart on system startup option on Linux
Gavin Andresen: implementation of autostart on system startup option on Linux
Portuguese translation by Tiago Faria
Portuguese translation by Tiago Faria
Laszlo's fix to make generate threads idle priority on Linux, replaced some wxBase dependencies: wxMutex, wxFileExists, wxStandardPaths, wxGetLocalTimeMillis
Laszlo's fix to make generate threads idle priority on Linux, replaced some wxBase dependencies: wxMutex, wxFileExists, wxStandardPaths, wxGetLocalTimeMillis
version 0.3 release
version 0.3 release
reduced max outbound connections from 15 to 8 --version 0.3 rc4
reduced max outbound connections from 15 to 8 --version 0.3 rc4
version 0.3 rc2
version 0.3 rc2
build-unix.txt: updated a few version numbers
build-unix.txt: updated a few version numbers
updated build-unix.txt instructions: sudo apt-get install libboost-all-dev
updated build-unix.txt instructions: sudo apt-get install libboost-all-dev
added instructions to build-unix.txt for building wxBase, which is needed to compile bitcoind
added instructions to build-unix.txt for building wxBase, which is needed to compile bitcoind
version 0.3 rc1
version 0.3 rc1
added new files to setup.nsi, updated version numbers
added new files to setup.nsi, updated version numbers
re-enable hiding taskbar button on minimize on linux, though it doesn't work cleanly
re-enable hiding taskbar button on minimize on linux, though it doesn't work cleanly
fix system tray icon on windows
fix system tray icon on windows
80x80 xpm icon for ubuntu, alignment tweaked to scale nicely to 20x20 and 16x16
80x80 xpm icon for ubuntu, alignment tweaked to scale nicely to 20x20 and 16x16
fixed colors on ubuntu lucid, enabled -O2 in makefile.unix, boost removed -mt from their library names in 1.40, updated bitcoin icon, hashmeter, generated and hashmeter log entries -- version 0.2.13
fixed colors on ubuntu lucid, enabled -O2 in makefile.unix, boost removed -mt from their library names in 1.40, updated bitcoin icon, hashmeter, generated and hashmeter log entries -- version 0.2.13
use seed nodes as fallback if IRC fails or with TOR -- version 0.2.12
use seed nodes as fallback if IRC fails or with TOR -- version 0.2.12
German translation by DataWraith
German translation by DataWraith
more addr message error checking -- version 0.2.11
more addr message error checking -- version 0.2.11
revert makefile.unix from -02 back to -00 to fix compile on linux, -02 doesn't really help on linux anyway
revert makefile.unix from -02 back to -00 to fix compile on linux, -02 doesn't really help on linux anyway
automatically change displayed address whenever it receives anything, added help and -? for daemon command line rpc commands, only relay addr messages to 5 random nodes to save bandwidth, started setting wtx.fFromMe flag, trickle out tx inventory messages to protect privacy  -- version 0.2.10
automatically change displayed address whenever it receives anything, added help and -? for daemon command line rpc commands, only relay addr messages to 5 random nodes to save bandwidth, started setting wtx.fFromMe flag, trickle out tx inventory messages to protect privacy  -- version 0.2.10
Dutch translation by Xunie (93% complete)
Dutch translation by Xunie (93% complete)
Italian translation by Joozero
Italian translation by Joozero
better prevention of inventory relaying during initial download, message checksum between nodes with 0.2.9 or higher, optimization level up from -O0 to -O2, rpc functions: setlabel, getlabel, getaddressesbylabel, getreceivedbyaddress, getreceivedbylabel, listreceivedbyaddress, listreceivedbylabel  -- version 0.2.9
better prevention of inventory relaying during initial download, message checksum between nodes with 0.2.9 or higher, optimization level up from -O0 to -O2, rpc functions: setlabel, getlabel, getaddressesbylabel, getreceivedbyaddress, getreceivedbylabel, listreceivedbyaddress, listreceivedbylabel  -- version 0.2.9
build-osx.txt build instructions and makefile.osx from Laszlo
build-osx.txt build instructions and makefile.osx from Laszlo
Mac OS build fixes by laszlo -- version 0.2.8
Mac OS build fixes by laszlo -- version 0.2.8
misc
misc
fixed runaway memory alloc bug on 64-bit in ParseString found by sirius-m
fixed runaway memory alloc bug on 64-bit in ParseString found by sirius-m
fix unsafe string handling in wxGetTranslation
fix unsafe string handling in wxGetTranslation
wx/utils.h and wx/clipbrd.h not needed on bitcoind wxbase build
wx/utils.h and wx/clipbrd.h not needed on bitcoind wxbase build
GUI-less build target bitcoind that links to wxBase and shouldn't need GTK, split init and shutdown from ui.cpp into init.cpp, support wxUSE_GUI=0 -- version 0.2.7
GUI-less build target bitcoind that links to wxBase and shouldn't need GTK, split init and shutdown from ui.cpp into init.cpp, support wxUSE_GUI=0 -- version 0.2.7
run as daemon without GUI, hooked wxApp::Initialize to ignore gtk-init-check failure if no GUI, fork to daemonize, rpc getinfo, getconnectioncount, getbalance, getgenerate, setgenerate, -- version 0.2.6
run as daemon without GUI, hooked wxApp::Initialize to ignore gtk-init-check failure if no GUI, fork to daemonize, rpc getinfo, getconnectioncount, getbalance, getgenerate, setgenerate, -- version 0.2.6
transaction filter tabs instead of view->show generated -- version 0.2.5
transaction filter tabs instead of view->show generated -- version 0.2.5
Address Book with tabs instead of separate Your Address book, with live update of default address in main window, New... button on main window for creating new receiving address, made receiving address labels more visible, ask user before paying transaction fee, when sending to bitcoin address also use a bitcoin address for the change, added some event.Skip() to fix UI glitches -- version 0.2.4
Address Book with tabs instead of separate Your Address book, with live update of default address in main window, New... button on main window for creating new receiving address, made receiving address labels more visible, ask user before paying transaction fee, when sending to bitcoin address also use a bitcoin address for the change, added some event.Skip() to fix UI glitches -- version 0.2.4
safer wxGetTranslation wrapper
safer wxGetTranslation wrapper
all builds are now with wxWidgets-2.9.0, we are now using UTF-8, added support for language translation file locale/<lang>/LC_MESSAGES/bitcoin.mo -- version 0.2.2
all builds are now with wxWidgets-2.9.0, we are now using UTF-8, added support for language translation file locale/<lang>/LC_MESSAGES/bitcoin.mo -- version 0.2.2
fix mingw makefile to use correct wxWidgets include, this is the last version of makefile and makefile.vc for wxWidgets-2.8
fix mingw makefile to use correct wxWidgets include, this is the last version of makefile and makefile.vc for wxWidgets-2.8
strip out unfinished product, review and market stuff, enable _() instead of wxT() in uiproject.fbp so it uses wxGetTranslation for the wxFormBuilder generated part of the UI
strip out unfinished product, review and market stuff, enable _() instead of wxT() in uiproject.fbp so it uses wxGetTranslation for the wxFormBuilder generated part of the UI
renamed a few rpc methods
renamed a few rpc methods
updated build-unix.txt
updated build-unix.txt
command line and JSON-RPC first draft, requires Boost 1.35 or higher for boost::asio, added SetBitcoinAddress and GetBitcoinAddress methods on CScript, critsect interlocks around mapAddressBook, added some random delays in tx broadcast to improve privacy, now compiles with MSVC 8.0
command line and JSON-RPC first draft, requires Boost 1.35 or higher for boost::asio, added SetBitcoinAddress and GetBitcoinAddress methods on CScript, critsect interlocks around mapAddressBook, added some random delays in tx broadcast to improve privacy, now compiles with MSVC 8.0
better error message in check_type(), tell the types by name instead of by number
better error message in check_type(), tell the types by name instead of by number
JSON Spirit library from http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx, MIT license
JSON Spirit library from http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx, MIT license
revert revision 56, going in different direction with boost::asio and JSON-RPC
revert revision 56, going in different direction with boost::asio and JSON-RPC
Added some basic IPC functionality using wxServer, wxClient and wxConnection. Added the -blockamount command line option for an example of usage.
Added some basic IPC functionality using wxServer, wxClient and wxConnection. Added the -blockamount command line option for an example of usage.
update fSpent flag on wallet transactions if they're seen spent in case copy of wallet.dat was used elsewhere or restored from backup, better error dialog box if try to spend already spent coins, got rid of unused notebook with only one tab on main dialog, nicer looking About dialog, resize About dialog better on linux
update fSpent flag on wallet transactions if they're seen spent in case copy of wallet.dat was used elsewhere or restored from backup, better error dialog box if try to spend already spent coins, got rid of unused notebook with only one tab on main dialog, nicer looking About dialog, resize About dialog better on linux
now compiles on 64-bit Ubuntu Karmic with wxWidgets-2.9.0, fixes for wxWidgets-2.9.0, added superfluous GetEventHandler()'s, there's still a bug on wx2.9.0 that the status number is mashed up for some reason otherwise seems to run fine
now compiles on 64-bit Ubuntu Karmic with wxWidgets-2.9.0, fixes for wxWidgets-2.9.0, added superfluous GetEventHandler()'s, there's still a bug on wx2.9.0 that the status number is mashed up for some reason otherwise seems to run fine
simplify AddAddress, readcompactsize limit, fixed a 64-bit compile error in serialize.h, change status "# blocks" to "# confirmations" and widen the column.
simplify AddAddress, readcompactsize limit, fixed a 64-bit compile error in serialize.h, change status "# blocks" to "# confirmations" and widen the column.
command line switch -noui
command line switch -noui
a few header changes for freebsd from madhatter
a few header changes for freebsd from madhatter
filter out duplicate getblocks and don't relay inv messages during initial block download -- 0.2 rc2
filter out duplicate getblocks and don't relay inv messages during initial block download -- 0.2 rc2
misc
misc
restrict file permissions on linux to the user only
restrict file permissions on linux to the user only
misc exit code, updated setup.nsi
misc exit code, updated setup.nsi
misc
misc
retry IRC if name in use, resize to fit ubuntu's giant default font, scroll debug.log, pause gen during initial block download
retry IRC if name in use, resize to fit ubuntu's giant default font, scroll debug.log, pause gen during initial block download
misc
misc
fix transaction fee bug in CreateTransaction, higher size cutoff for free transactions in GetMinFee
fix transaction fee bug in CreateTransaction, higher size cutoff for free transactions in GetMinFee
minor fix to batched initial download in case requester has more than 500 block non-main branch
minor fix to batched initial download in case requester has more than 500 block non-main branch
bugfix Db::open/close and zombie sockets bugs fix double-close of socket handle, keep databases open, close db cursors, initial block download in batches of 500 blocks, fix misc warnings, subver linux-test8
bugfix Db::open/close and zombie sockets bugs fix double-close of socket handle, keep databases open, close db cursors, initial block download in batches of 500 blocks, fix misc warnings, subver linux-test8
misc compile error
misc compile error
monitor ThreadSocketHandler and terminate and restart if hung, convert _beginthread to CreateThread wrapper, disconnect inactive connections, ping, break up long messages to speed up initial download, better priorities for initiating connections, track how many nodes have requested our blocks and transactions, status #/offline and warning message on unsent blocks, minimize on close as separate option -- linux-test5
monitor ThreadSocketHandler and terminate and restart if hung, convert _beginthread to CreateThread wrapper, disconnect inactive connections, ping, break up long messages to speed up initial download, better priorities for initiating connections, track how many nodes have requested our blocks and transactions, status #/offline and warning message on unsent blocks, minimize on close as separate option -- linux-test5
Get local host IP on Linux, Shutdown() a little cleaner -- linux-0.1.6-test1 waypoint
Get local host IP on Linux, Shutdown() a little cleaner -- linux-0.1.6-test1 waypoint
ui tweaks, multiple xpm icon sizes
ui tweaks, multiple xpm icon sizes
UI tweaks, use BindListenPort to detect instance already running, setsockopt(SO_REUSEADDR) so can bind during TIME_WAIT after exit and restart
UI tweaks, use BindListenPort to detect instance already running, setsockopt(SO_REUSEADDR) so can bind during TIME_WAIT after exit and restart
UIThreadCall, ThreadSafeMessageBox
UIThreadCall, ThreadSafeMessageBox
got rid of CheckForShutdown, replaced some thread-unsafe wxWidgets calls, Linux fixes, socket send MSG_NOSIGNAL, bind INADDR_ANY, works reliably on Linux now except if wxMessageBox is used in a thread other than the GUI thread
got rid of CheckForShutdown, replaced some thread-unsafe wxWidgets calls, Linux fixes, socket send MSG_NOSIGNAL, bind INADDR_ANY, works reliably on Linux now except if wxMessageBox is used in a thread other than the GUI thread
unix build merged in, bitmap resources from xpm instead of rc, better addr relay, better selection of addrs by time last seen for faster connect
unix build merged in, bitmap resources from xpm instead of rc, better addr relay, better selection of addrs by time last seen for faster connect
renamed build.txt to build-msw.txt
renamed build.txt to build-msw.txt
move debug.log and db.log to data dir, portable GetDataDir, optimize GetBalance, fix repaint bogdown, -addnode and -? switches
move debug.log and db.log to data dir, portable GetDataDir, optimize GetBalance, fix repaint bogdown, -addnode and -? switches
added wx/stdpaths.h
added wx/stdpaths.h
make CheckDiskSpace portable
make CheckDiskSpace portable
setup script removes startup shortcut and runs with highest exec level
setup script removes startup shortcut and runs with highest exec level
better wallet.dat flush, consolidated QueryPerformanceCounter, PRI64d printf portability
better wallet.dat flush, consolidated QueryPerformanceCounter, PRI64d printf portability
CCriticalSection using wxWidgets instead of Windows OS calls
CCriticalSection using wxWidgets instead of Windows OS calls
addr relaying fixes, proxy option and privacy patches, detect connect to self, non-final tx locktime changes, fix hide unconfirmed generated
addr relaying fixes, proxy option and privacy patches, detect connect to self, non-final tx locktime changes, fix hide unconfirmed generated
fix display of new generated coins, fix assertion in bitcoinminer
fix display of new generated coins, fix assertion in bitcoinminer
Removed autorun regkey creation
Removed autorun regkey creation
flush wallet.dat, multi-proc, reorg options, revert to startup folder shortcut
flush wallet.dat, multi-proc, reorg options, revert to startup folder shortcut
Added NSIS installer generation script
Added NSIS installer generation script
Startup folder shortcut opens the program minimized. Restoring a minimized-to-tray window works correctly.
Startup folder shortcut opens the program minimized. Restoring a minimized-to-tray window works correctly.
startup shortcut works
startup shortcut works
tray icon + ask before closing
tray icon + ask before closing
No dll's here
No dll's here
Added changelog.txt
Added changelog.txt
First commit
First commit
