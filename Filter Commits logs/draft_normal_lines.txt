[coro.generator.promise] Remove unused name "x"
[coro.generator.promise] Use "equivalent to `throw`, ..."
[func.wrap.move.ctor] Move private expos member to general index
[general, library index] Describe exposition-only entities
[concepts index] Describe exposition-only concepts
[views] Subclauses for contiguous and multidimensional access
[diff.cpp20.library] Add missing new headers
[vector.bool.pspc] Replace `constexpr static` with `static constexpr`
[check] Add checks for "explicit constexpr" and "constexpr static" in the library
[mdspan.extents.cons] "constexpr" should precede "explicit"
[format] Collate exposition-only index entries correctly
[vector.bool.pspc] Collate exposition-only index entry correctly
[macros, containers] Make \indexlibrarymisc more reusable, add expos version
[temp.deduct.conv] Remove misleading paragraph break
[new.syn] Remove extraneous spaces
[dcl.link] Add missing restriction to language linkage application (#5892)
[ratio.ratio] Use symbol "sgn" for the signum function (#5925)
[views.span] Add \exposid for `data_` and `size_`
[dcl.init.list] Specify the type of the prvalue (#5919)
[mdspan.extents.expo] Remove redundant "// exposition only" (#5907)
[class.union.general] Attach example to its note (#5882)
[meta.const.eval] Add is_constant_evaluated to index of library names (#5898)
[index] Remove stale index entry for removed term (#5873)
[time.format] Use basic_ostringstream<charT> instead of ostringstream (#5932)
[range.drop.while.overview] Use string_view rather than string literal (#5897)
[ranges] Use plain font for "range" when it does not refer to a concept (#5819)
[ranges] Use plain font for "view" when it does not refer to a concept (#5819)
[ranges] Add \libconcept for "view" in adaptor Overview subclauses
[meta.type.synop] Capitalize NTTP name (#5921)
[func.require] Add main index entry for INVOKE
[meta, thread] Add or amend references to func.{require,invoke}
[flat.set.modifiers] Add missing \exposid
[time.clock.system.nonmembers, time.zone.zonedtime.nonmembers] Add <charT> to STATICALLY-WIDEN (#5934)
[climits.syn] Correct note about types of macros (#5926)
[flat.set] [flat.multiset] Use value_type, not key_type
[temp.res.general] Format name in code font (#5935)
[range.dangling] Replace "tag type" with just "type" (#5922)
[stack.syn, queue.syn] Add xref comments to class synopses (#5913)
[intro.defs] Move the definition of "multibyte character" to library
[bibliography] Remove stray closing parenthesis.
Foreword placeholder
[intro.defs] Update hyperlink according to SC22 requirements
[sequence.reqmts] Use "lvalues of type T are swappable" (#5878)
[ios.overview] Remove unconventional empty line (#5874)
[container.rev.reqmts] Correct capitalization
[futures.task.members] Correct capitalization
[futures.task.members] Add missing explicit to packaged_task ctor
[ranges.elementsof] Rename stable label "ranges.*" to "range.*" (#5867)
[ranges.cartesian.iterator] Rename stable label "ranges.*" to "range.*" (#5866)
[utility.arg.requirements] Present identifiers as itemization (#5856)
[range.as.const.overview] Remove unnecessary ranges namespace qualification
[ranges] Indexing fixes for iterator and sentinel classes
[template.bitset] reorder synopsis and member descriptions
[mdspan.extents.cons] Correct spelling of "dynamic-extents"
[support, etc.] New subclause "Arithmetic types". (#5851)
[headers] Order `<type_traits>` before `<typeindex>` in the header table
[futures.errors] Add missing `\tcode` (#5855)
[expected] Change stable label from "ctor" to "cons", add xref
[thread.thread.this] Clarify this_thread::get_id
[expr.prim.lambda.capture] Cross-reference [basic.def.odr] for 'odr-usable'
[func.bind] Index 10 placeholders
[format.string.std] Clarify location of 0x prefix for pointers
[expr.add] Move note, add example (#4778)
[ranges.syn] Make get overloads freestanding
[over.best.ics.general] Split long paragraph
[vector.bool.pspc] Index vector<bool>::reference
[func.bind.isplace] Add cross-reference to [func.bind.place]
[std] Remove redundant hyperref parameters
[diagnostics] Remove 'shall', use 'recommended practice'
[basic.life] Change "complete const object" to "const, complete object" (#5818)
[ranges] Make indentation consistent (#5811)
[range.chunk.view.input, range.slide.view] Remove unused name in the deduction guide
[algorithm.syn] Indentation fixes (#5823)
[container.requirements] Rephrase in terms of const types not values
[rand.req.seedseq] Rephrase in terms of const types not values
[basic.life] Add cross-reference for union member lifetime
[basic.def.odr] A variable is "named by" an expression (#5534)
[thread.stoptoken.syn] "class template", not just "class"; fix spacing (#5799)
[module.reach] Remove redundant module implementation unit declaration
[basic.align] Recommend alignment-specifier instead of deprecated library facility
[check] Add check for \^ and recommend \caret
[expr] Replace `\^` with `\caret`
[actions] Extend GitHub action to run also on MacOS
[headers] Reflow table after header additions
Update configuration for building working drafts after N4917.
Update configuration for new working draft N4917 and add corresponding Editors' Report N4918
[tools/makereport] Tweak vertical whitespace styling, add end tags
[basic, except, diff] Rewordings to avoid "might" and "could"
[ranges] Add missing \exposid (#5796)
[range.iota.sentinel]  Add missing \exposid (#5797)
[range.stride.iterator] Add missing \exposid
[spanstream etc.] Change stable label from "ctor" to "cons"
[stacktrace] Change stable label from "ctor" to "cons"
[mdspan] Change stable label from "ctor" to "cons"
[flat.{,multi}set] Change stable label from "ctor" to "cons"
[flat.{,multi}set.ctor] Add missing "explicit" in itemdecls
[flat.map.modifiers] Typo: "range" should be "rg"
[flat.map.syn] Add missing "namespace std {"
[mdspan.layout.stride.obs] Add missing parentheses
[mdspan.layout.stride.expo] Move "otherwise" from trailing to leading
[mdspan.layout.{left,right}.overview] Replace "see below" with condition
[mdspan.layout.left.overview] Reorder "explicit" and "constexpr"
[mdspan.extents.ctor] Improve hyphenation/line breaking
[expected.object.assign] Add missing 'Returns: *this'
[ranges] Use \logop for names of logical operators
[std] Redefine \logop to small caps and fix all uses
[functional.syn] Add missing \tcode (#5806)
[basic.fundamental] Use correct number; "are", not "is".
[flat.set.modifiers] Remove stray 'return' in Effects clause
[range.repeat.view] Use \tcode (not \exposid) for WArgs (#5801)
[check] Flag undecorated concept names
[range.as.rvalue.view] Add missing \libconcept
[range.subrange.access] Add missing \libconcept
[mdspan.layout.stride.expo] Add missing \libconcept
[check] Flag concepts missing a definition
[coro.generator.promise] Prevent erroneous hyphenation with \mbox
[obj.lifetime] Add cross-reference pointing at basic.types.general
[format.range.fmtdef] Add "exposition only" comments
[ranges] Formatting fixes (\exposid, \tcode, whitespace)
[util.smartptr.shared.create] Add std:: qualification for forward
[move.sentinel] Remove extraneous "std" qualification in example (#5792)
[containers] Add `std::` for `forward`/`move` (#5793)
[ranges] Tweak some examples (#5791)
[check] Flag any space between 'template' and '<'
[range.cartesian.view] Add missing \exposid
[vector.bool.pspc] Reinstate redundant "inline", as per paper
[const.iterators.{alias,iterators}] Add "exposition only" comments
[tuple.like] Remove extraneous "std::" qualification.
[coroutine.syn] Move "all freestanding" comment to the top
[format.range.fmtstr] Add ranges namespace qualifier (#5788)
[range.zip.overview] Use tuple in example, not pair
[range.zip, ranges.cartesian.iterator] Simplify `maybe-const<true, Views>` to `const Views` (#5778)
[range.cartesian.view] Add missing angle brackets for cartesian-is-sized-sentinel
[range.adjacent.overview] Use tuple in example, not pair (#5779)
[template.mask.array.overview], [template.indirect.array.overview] fix itemdecl typos
[cons.slice], [gslice.cons] remove undeclared/undocumented copy constructor signatures
[rand.req.dist] fix grammar typo
[complex.ops] use character literal for single character
[range.elements.iterator] remove stray semi-colon
[range.elements.view] fix class-key for iterator and sentinel
[counted.iter.nav] fix indentation
[stack.ops] fix indentation
[unord.set.overview] Add line breaks in excessively long line
[unord.map.overview] Add line breaks in excessively long line
[unord.req.general] Use "constant" not "const"
[char.traits.require] use nullptr for null pointer constant
[util.smartptr.shared.obs], [util.smartptr.shared.create] use nullptr for null pointer constant
[tuple.creation] Add missing semi-colon to example
[ranges.syn] Move namespace-scope declarations for get(subrange) here
[atomics.syn] Move namespace-scope memory_order_* variables here
[ranges.elementsof] Add missing indexing, fix spacing (#5774)
[locale.codecvt.general] Remove extra space before template-argument-list
[rand.adapt.shuf] Remove superfluous trailing semicolon
[rand.adapt.ibits] Remove superfluous trailing semicolon
[rand.adapt.disc] Remove superfluous trailing semicolon
[alg.partitions] Indicate base of logarithm outside big-oh notation
[alg.fill] Remove extraneous empty line
[alg.move] Add missing \tcode formatting
[ranges] Add missing closing delimiters
[range.cartesian.view] Further fixing of cartesian-product-is-common
[format.string.std] Reorder std-format-spec field descriptions. (#5246)
[memory.syn] Add missing "// freestanding" comment to "destroy"
[diff] Uniform style for examples
[flat.*.{syn,erasure}] Change return type of erase_if to member size_type
[flat.*set.*] Consistently use \exposid
[flat.*set] Remove further linebreaks
[flat.*.defn] Remove unnecessary linebreaks
[flat.multiset.ctor] Add missing parameter name "cont"
[flat.*] Harmonize wording "supports the ... operations but not ..."
[range.repeat.iterator] repeat_view::iterator is not a class template
[containers] Add cross references to "erasure" subclauses
[mdspan.layout.stride.{ctor,obs}] Add cross references to [mdspan.layout.policy.reqmts]
[mdspan.layout.stride.expo] Replace "SizeType" with "IndexType".
[mdspan.accessor.reqmts] Replace "pointer" with "data_handle_type".
[mdspan.layout.stride.overview] Add missing \exposid.
[mdspan.layout.{reqmts,right.ctor}] Consistently use maths, not code
[mdspan.extents.ctor] Consistently use "r" as a maths variable, not code.
[mdspan.extents.expo] Add "exposition-only" comments to itemdecls
[mdspan.overview] Extend the definition to "size of a MD index space"
[alg.sorting.general] Make "comp" part of the defined term
[vector.syn, vector.bool] Add subclause structure.
[range.repeat.view] Add \libconcept for same_as (#5764)
[const.iterators.types,const.iterators.ops] Use \libconcept for range concepts (#5752)
[expr.prim.lambda.capture] Add cross reference to [basic.scope.lambda]
[complex.members] Remove stray "template<class T>" from constructor
[range.chunk.overview,range.slide.overview] Use maths, not code style for N/M (#5500)
[ranges] Make the prints message format consistent (#5756)
[ranges.cartesian.iterator] Add missing @ for libconcept (#5755)
[dcl.fct.def.default] Elaborate on the difference of two declarations
[range.cartesian.view] Use \exposid for bases_ (#5754)
[range.as.rvalue.overview] Add \libconcept for same_as (#5753)
[lex.charset] Add missing hyphens
[stmt.label, except.pre] Use new wording "control-flow-limited" statement (#5413)
[core] Replace 'enumerated type' with 'enumeration'
[const.iterators.alias] Use \libconcept for input_­iterator (#5746)
[stmt.pre] List "compound-statement" explicitly as part of a selection statement
[stacktrace.basic.nonmem] Add missing \pnum before \recommended
[allocator.requirements.general] Use newer style for SimpleAllocator
[map.cons,multimap.cons,multiset.cons,set.cons,associative.reqmts.general] "sorted with respect to `comp`"
[range.as.const.view] Add missing angle bracket (#5745)
[cmp.categories] Replace 'operator admits' phrasing.
[depr.meta.types] use "denotes" for member typedefs
[refwrap.unwrapref] Use "denotes" for member typedef
[meta.trans.cv] use "denotes" in specification of member typedefs
[meta.trans.other] Use "denotes"
[meta.trans.ptr] Use "is a referenceable type" not "names ..."
[meta.trans.arr] Use "is a type" not "names a type"
[meta.trans.sign] Use "is a ... type" and "denotes the type"
[meta.trans.ref] Use "is a referenceable type" and "denotes the type"
[meta.unary.prop.query] Use "is an array type" not "names an array type"
[meta.trans.other] Use "denotes" in decay, enable_if and conditional
[diff.expr] Remove 'implicit function declaration' discussion
[diff.dcl] Remove 'implicit int' discussion
[diff.dcl] Discuss 'alignas' placement restrictions
[ranges.cartesian.iterator] Add missing \exposid (#5737)
[mem.poly.allocator.class.general] Clarify polymorphic_allocator<void> etc.
[module.private.frag] Remove misleading example and broaden note
[temp.inst] Clarify referent of 'declaration'
[thread.general] Remove non-existent header
[strings.general] Add <string> header to "String classes" row
[ranges.syn] Add missing "freestanding" comment for as_rvalue.
[format] Remove redundant `\tcode` around `\exposid`
[mdspan.{overview,extents.ctor}] Increase reuse of definitions
[ranges] Add missing requirement on itemdecl, and fix spacing
[expr.spaceship, fs.path.generic, temp.inst] Use em-dash for parentheticals, not en-dash.
[support.srcloc.cons] Use \effects macro instead
[ranges.syn] Align "freestanding" comments
[over.match.{oper,class.deduct}] Add missing \keyword.
[container.reqmnts] Remove stray `{}`
[ranges] Remove now-unused exposition-only "tuple-or-pair".
[mdspan.*] Replace remaining "pointer"s with "data_handle_type".
[xrefdelta] Add entry for ranges.copy.wrap, update prior redirection
[obj.lifetime] Clarify what the 'a' mentioned in the \returns clause refers to
[obj.lifetime] Clarify wording for implicitly created objects.
P2590R2 Explicit lifetime management
[format.range] Add subclause structure.
P2585R1 Improving default container formatting
P2549R1 std::unexpected<E> should have error() as member accessor
P2520R0 move_iterator<T*> should be a random access iterator
P2517R1 Add a conditional noexcept specification to std::apply
[input.output] Change exposition-only format-string to format_string
P2508R1 Expose std::basic-format-string<charT, Args...>
[coro.generator.promise] Simpler wording for ownership transfer
[coro.generator, ranges.elementsof] Replace {R,r}ng with just {R,r}.
P2502R2 std::generator: Synchronous Coroutine Generator for Ranges
P2499R0 string_view range constructor should be explicit
[range.repeat.view] Apply modifications from P2494R2
[range.chunk.by.view] Change copyable-box to movable-box.
P2494R2 Relaxing range adaptors to allow for move only types
P2474R2 views::repeat
P2467R1 Support exclusive mode for fstreams
P2445R1 std::forward_like
P2465R3 Standard Library Modules std and std.compat
[ranges.syn] Add 'freestanding' markers per P1642R11
P2446R2 views::as_rvalue
P2438R2 std::string::substr() &&
P2419R2 Clarify handling of encodings in localized formatting of chrono types
P2417R2 A more constexpr bitset
P2408R5 Ranges iterators as inputs to non-Ranges algorithms
P2404R3 Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with
P2540R1 Empty Product for certain Views
[range.cartesian] Replace "tuple-or-pair" with "tuple".
P2374R4 views::cartesian_product
P2322R6 ranges::fold
P2302R4 std::ranges::contains
P2291R3 Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header
[assoc.format] Add formatting support for flat_{,multi}{map,set}.
[vector.syn] Drop the superfluous "inline" from is-vector-bool-reference
[format.syn] Move the specialization of formatter up in the synopsis
[format.range.formatter][format.tuple] Rename tuple-type to pair-or-tuple to avoid confusion with the grammarterm of the same name
[format.range] Rename section to [format.range.formatter]
[format.range] Drop the superfluous "convenient" utility descriptor
P2286R8 Formatting Ranges
[const.iterators] Add subclause structure.
[iterator.synopsis,ranges.syn] Add 'freestanding' markers per P1642R11
P2278R4 cbegin should always return a constant iterator
P2165R4 Compatibility between tuple and tuple-like objects
P2093R14 Formatted output
P1899R3 stride_view
[ranges.syn] Colapse freestanding entities to fit on a single line
P1642R11 Freestanding Library: Easy [utilities], [ranges], and [iterators]
[actions] Use Ubuntu 22.04 (up from 20.04)
P1223R5 find_last
[container.adaptors.general] Also mention flat_multi{map,set} adaptors.
[flat.{,multi}set.ctor] Clarify that the state before the move is meant.
P1222R4 A Standard flat_set
[sequence.reqmts] Use "program-defined sequence container" consistently.
[flat.{,multi}map.cons] Clarify that the state before the move is meant.
P0429R9 A Standard flat_map
P2613R1 Add the missing empty to mdspan
P2604R0 mdspan: rename pointer and contiguous
P2599R2 index_type & size_type in mdspan
P0009R18 mdspan
LWG3724 decay-copy should be constrained
LWG3721 Allow an arg-id with a value of zero for width in std-format-spec
LWG3719 Directory iterators should be usable with default sentinel
LWG3715 view_interface::empty is overconstrained
LWG3713 Sorted with respect to comparator (only)
LWG3712 chunk_view and slide_view should not be default_initializable
LWG3711 Missing preconditions for slide_view constructor
LWG3710 The end of chunk_view for input ranges can be const
LWG3709 LWG-3703 was underly ambitious
LWG3708 take_while_view::sentinel's conversion constructor should move
LWG3707 chunk_view::outer-iterator::value_type::size should return unsigned type
LWG3705 Hashability shouldn't depend on basic_string's allocator
LWG3704 LWG 2059 added overloads that might be ill-formed for sets
LWG3703 Missing requirements for expected<T, E> requires is_void<T>
LWG3702 Should zip_transform_view::iterator remove operator<?
LWG3701 Make formatter<remove_cvref_t<const charT[N]>, charT> requirement explicit
LWG3692 zip_view::iterator's operator<=> is overconstrained
LWG3687 expected<cv void, E> move constructor should move
LWG3683 operator== for polymorphic_allocator cannot deduce template argument in common cases
LWG3672 common_iterator::operator->() should return by value
LWG3671 atomic_fetch_xor missing from stdatomic.h
LWG3670 Cpp17InputIterators don't have integer-class difference types
LWG3659 Consider ATOMIC_FLAG_INIT undeprecation
LWG3656 Inconsistent bit operations returning a count
LWG3617 function/packaged_task deduction guides and deducing this
LWG3564 transform_view::iterator<true>::value_type and iterator_category should use const F&
P2579R0 Mitigation strategies for P2036 "Changing scope for lambda trailing-return-type"
P2460R2 Relax requirements on wchar_t to match existing practices
P2295R6 Support for UTF-8 as a portable source file encoding
P1774R8 Portable assumptions
P2582R1 Wording for class template argument deduction from inherited constructors
P1467R9 Extended floating-point types and standard names
P2280R4 Using unknown pointers and references in constant expressions
P1169R4 static operator()
[lex.charset] Add delimited form \u{...} of universal character name
P2071R2 Named universal character escapes
P2266R3 Simpler implicit move
P2448R2 Relaxing some constexpr restrictions
P2290R3 Delimited escape sequences
P2324R2 Labels at the end of compound statements (C compatibility)
P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals
P2437R1 Support for #warning
P2327R1 De-deprecating volatile compound operations
P2468R2 The Equality Operator You Are Looking For
CWG2586 Explicit object parameter for assignment and comparison
CWG2507 Default arguments for operator[]
CWG2608 Omitting an empty template argument list
CWG2606 static_cast from "pointer to void" does not handle similar types
CWG2597 Replaceable allocation and deallocation functions in the global module
CWG2594 Disallowing a global function template main
CWG2585 Name lookup for coroutine allocation
CWG2582 Differing member lookup from nested classes
CWG2571 Evaluation order for subscripting
CWG2540 Unspecified interpretation of numeric-escape-sequence
CWG2535 Type punning in class member access
CWG2534 Value category of pseudo-destructor expression
CWG2405 Additional type-dependent expressions
CWG2355 Deducing noexcept-specifiers
[range.join.with.overview,range.split.overview] use qualified name in examples (#5683)
[algorithm.syn,bitset.syn,rand.synopsis,valarray.syn] Add \ref for header (#5666)
[istreambuf.iterator.general] Add \ref for proxy (#5669)
[special.mem.concepts] Add \libconcept (#5668)
[concept.equalitycomparable] Use \exposconcept (#5660)
[concept.booleantestable] Use plain \exposconcept (#5657)
[ranges.syn] Add \ref for `ref_view` (#5652)
[range.filter.view] Add missing \exposid (#5646)
[sequence.reqmts] Add ranges namespace qualifier for range concepts (#5563)
[unord.map.overview] Replace \tcode with \libconcept for input_range (#5562)
[range.join.with.iterator] Add missing \libconcept and \exposid (#5557)
[specialized.algorithms,iterator.concept.readable] Replace \placeholdernc with \exposconcept
[algorithm.syn,alg.swap] Add missing \libconcept for input_range (#5554)
[range.elements.view] Add missing \libconcept for move_constructible (#5552)
[class.prop] Clarify definition of implicit-lifetime class (#5319)
[priqueue.overview] Add misssing `>` to deduction guide (#5535)
[alg.copy] Add missing \tcode formatting
[alg.equal] Add missing period
[algorithms.requirements] Add hyphen for non-copied
[algorithms.requirements] Add commas for readability
[range.elements.iterator] Add missing \exposid formatting
[range.reverse.view] Add missing \exposid formatting
[range.take.while.overview] Highlight use of ranges::begin
[range.take.view] Replace 'struct' with 'class' for consistency
[range.transform.iterator] Add missing \exposid formatting
[range.join.iterator] Add missing \exposid formatting
[range.filter.iterator] Add missing \exposid formatting
[range.iota.view] Add missing \exposid formatting
[random.access.iterators] Add semicolon at end of statement
[string.view.general] Add missing template-argument-list
[meta.rel] Add parentheses for consistency
[func.search.bmh] Prevent stray hyphen
[func.search.bm] Prevent stray hyphen
[refwrap.helpers] Remove superfluous space after class template name
[range.join.with.sentinel] Add missing curly brace (#5530)
[range.chunk.view.input] Add missing \exposid (#5529)
[ranges.syn] Add missing \libconcept for owning_view (#5524)
[range.join.with.view] Add missing \libconcept for input_range
[move.iter.cons] Add missing Returns
[range.adjacent.iterator] Use correct descriptive element
[range.istream.iterator] basic_istream_view::iterator is not a class template (#5515)
[res.on.functions] Use regular "behavior is undefined" words of power (#5513)
[range.istream.view] Add reference for basic_istream_view::iterator (#5514)
[ranges] Remove redundant "exposition only" comments in \itemdecl (#5499)
[range.chunk.overview,range.chunk.by.overview] Add space in use of range-for loop (#5494)
[expected.object.general] E should use code font (#5487)
[expected.object.ctor] Use the injected-class-name to refer to the current instantiation (#5485)
[range.join.view] Simplify range_reference_t<V> to InnerRng
[ratio.arithmetic] Add missing index entries (#5472)
[range.join.with.view] Add missing \libconcept (#5469)
[range.utility.conv.general] Add missing constexpr for container-inserter
[associative] Add "i.e." in front of explanation
[class.access] Remove dangling Note
[ranges.syn] remove trailing `-> see below` return type from three `to` overloads (#5419)
[cons.slice] Add copy constructor for 'slice' to synopsis (#5444)
[thread.sema.cnt] Add missing parentheses on function call expression (#5443)
[thread.lock.unique.cons] Use nullptr for null pointer constant
[streambuf.virt.get] fix grammar typo
[adjacent.difference] fix grammar typo
[stringbuf.virtuals] add "override" to setbuf
[range.transform.iterator] Add some missing \exposid (#5441)
[expected.object.general] Remove explicit keyword for copy/move constructors (#5380)
[iterator.concept.readable] Remove obsolete note (#5408)
[expected] Add missing noexcept for expected::error() (#5381)
[string.view.deduct] Move to immediately after [string.view.cons] (#5397)
[range.utility.conv.general] Strike extraneous semicolon (#5414)
[expected.un.object] Remove unnecessary subclause nesting
[expected.un.object.general] Reorder constructors in synopsis
[range.adaptors] Make the prints message format consistent
[expr.prim.lambda.general] Clarify deduced lambda return type
[depr.tuple,depr.variant] Use struct class-key consistently (#5402)
[temp.constr.normal] Add missing semicolon in example (#5395)
[allocator.requirements.general] Specify all member types with typename (#5386)
[stacktrace.syn] Add '#include <compare>'
[memory.syn] Add missing closing bracket for attribute
[alg.min.max] Consistently specify ranges::minmax_element with minmax_element_result (#5376)
[lex.name] Remove extra vertical space in grammar
[span.streams] Move non-member swaps to header synopsis (#5366)
[range.utility.conv.general] Add missing template parameter to container-inserter
Update configuration for building working drafts after N4910.
Update configuration for new working draft N4910 and add corresponding Editors' Report N4911
[macros] Remove unused "element-like" macros.
[array.overview] Mention condition of exception
[array.overview] Don't mention swap as an exception
[allocator.requirements.general] Dismantle requirements table
[allocator.requirements.general] Replace table for descriptive variables
[expr.const] Add cross-reference for construct_at
[diff.cpp20.library] Add subclause, highlighting new headers
[macros] Use maths mode for range delimiters (#5164)
[{lower,upper}.bound, string.view.template.general] Linebreaking tweaks
[range.chunk.outer.value] Add missing private specifier
[thread] Rename to 'Concurrency support library'
[headers] List <expected>
[expected.syn] Index <expected>
[check] Enforce space between cv-qualifier and ref-qualifier
[std] Add space between cv-qualifier and ref-qualifier
Move [atomics] into [thread]
[meta] Adjust cross-references
[meta] Create new clause
Move [string.view] to before [string.classes]
[comparisons.three.way,func.search] Add namespace around class definition
[memory] Create new clause
[bit] Move into [utilities]
[check] Check for "(\ref", recommend \iref
[std] Extend \iref to accept a list of cross-references
[version.syn] Remove mention of nonexistent header `<priority_queue>`
[macros] Allow \keyword and \grammarterm in section headings
[unique.ptr.single] Rephrase destruction
[std] Introduce the label 'term.layout.compatible.type'
[std] Introduce the label 'term.object.type'
[std] Introduce the label 'term.trivial.type'
[std] Introduce the label 'term.literal.type'
[std] Introduce the label 'term.standard.layout.type'
[std] Introduce the label 'term.object.representation'
[std] Introduce the label 'term.padding.bits'
[std] Introduce the label 'term.scalar.type'
[std] Introduce the label 'term.incomplete.type'
[std] Introduce the label 'term.trivially.copyable.type'
[function.objects,ranges] Introduce labels for call wrappers
[std] Replace hyphen with period in labels
[atomics] Harmonize references to atomics operations tables
[expr] Cleanup for 'discarded-value expression'
[over.best.ics] Clarify phrasing around user-defined conversion sequence (#5086)
[container.gen.reqmts] Replace "Value:" with "Returns:" (#5256)
[diff.expr] Replace 'will' with present tense
[derivation] Remove 'basic integral type' from footnote
[temp.res] Move a note outside itemize environment
[range.slide.iterator] Remove `@` in `\tcode` (#5309)
[module.interface] Add adjective 'exported' (#5290)
[iterator.concept.winc] Remove duplicate paragraph
[lib] Add missing \pnum before descriptive elements
[char.traits.require] Add leading whitespace to descriptive elements
[lex.name] Rephrase note to avoid upper/lower-case
[depr.meta.types] Add 'is_pod' to library index
P2443R1 views::chunk_by
P2442R1 Windowing range adaptors: views::chunk and views::slide
P2441R2 views::join_with
P2440R1 ranges::iota, ranges::shift_left, and ranges::shift_right
P2387R3 Pipe support for user-defined range adaptors
P2273R3 Making std::unique_ptr constexpr
P2255R2 A type trait to detect reference binding to temporary
P1413R3 Deprecate std::aligned_storage and std::aligned_union
P1206R7 Conversions from ranges to containers
P0627R6 Function to mark unreachable code
P0533R9 constexpr for <cmath> and <cstdlib>
P0323R12 std::expected
LWG3661 constinit atomic<shared_ptr<T>> a(nullptr); should work
LWG3660 iterator_traits<common_iterator>::pointer should conform to [iterator.traits]
LWG3657 std::hash<std::filesystem::path> is not enabled
LWG3654 basic_format_context::arg(size_t) should be noexcept
LWG3650 Are std::basic_string's iterator and const_iterator constexpr iterators?
LWG3648 format should not print bool with 'c'
LWG3643 Missing constexpr in std::counted_iterator
LWG3632 unique_ptr "Mandates: This constructor is not selected by class template argument deduction"
LWG3621 Remove feature-test macro __cpp_lib_monadic_optional
LWG3619 Specification of vformat_to contains ill-formed formatted_size calls
LWG3618 Unnecessary iter_move for transform_view::iterator
LWG3612 Inconsistent pointer alignment in std::format
LWG3610 iota_view::size sometimes rejects integer-class types
LWG3607 contiguous_iterator should not be allowed to have custom iter_move and iter_swap behavior
LWG3601 common_iterator's postfix-proxy needs indirectly_readable
LWG3598 system_category().default_error_condition(0) is underspecified
LWG3525 uses_allocator_construction_args fails to handle types convertible to pair
LWG3471 polymorphic_allocator::allocate does not satisfy Cpp17Allocator requirements
LWG3088 forward_list::merge behavior unclear when passed *this
P2493R0 Missing feature test macros for C++20 core papers
P2173R1 Attributes on lambda-expressions
CWG2511 cv-qualified bit-fields
CWG2509 decl-specifier-seq in lambda-specifiers
CWG2506 Structured bindings and array cv-qualifiers
CWG2502 Unintended declaration conflicts in nested statement scopes
CWG2499 Inconsistency in definition of pointer-interconvertibility
CWG2494 Multiple definitions of non-odr-used entities
CWG1726 Declarator operators and conversion function
[container.requirements] Omit redundant specification
[container.requirements] Replace requirements tables with \itemdescr
[re.req] Replace  requirements table with \itemdescr
[macros,structure.specifications] Add 'Result' element
[range.req.general] Remove incorrect normative duplication for 'view' (#5235)
[stmt.return] Clarify flowing off the end of a function
[class.mem.general] Add cross-reference for 'layout-compatible type'
[stacktrace] Move into [diagnostics]
[class.free] Change subclause heading and add indexing
[class.free] Move into [class.mem]
[temp.dep.general] add trailing 'or' (#5186)
[diff] Annotate keywords
[diff.stmt] Properly refer to function return types
[locale.ctype.virtuals] Clarify do_widen parameter
[macros] In \ucode, align size of digits and letters (#5211)
[util.smartptr.atomic] Add cross-reference to <memory> header (#5207)
[temp.param] Delete outdated wording at p15
[stmt.return,class.{ctor,dtor}] Clarify no return operand
[meta.rel] Avoid undefined term 'void types'
[dcl.meaning.general] Clarify correspondence for block-scope friends
[temp.res.general] Clarify binding of names
[expr.prim.req.general] Change requirement-seq to right-recursive
[except.throw,except.handle] Move lvalue specification for copies
[container.requirements] Improve indexing of members described in requirements
[chrono.syn] Use nested namespace definitions for clarity
[check] Add check for use of undefined \grammarterms
[lib] Add 'namespace std' wrappings around class definitions
[func.memfn] Correct target object by fixing typo (#5202)
[pairs.pair] Add missing _v for type traits (#5196)
[macros] Make U+NNNN "fake small-cap-height" numbers a bit smaller.
[smartptr.adapt] Emphasize that casting might not always be viable
[ptr.align,re.regiter.incr] Replace 'compiler' with 'implementation'
[depr.default.allocator] Index allocator::is_always_equal here (#5152)
[basic.fundamental] Excise normative requirements on std::numeric_limits (#5105)
[index] Index keywords as '<keyword>, keyword' for differentiation
[lex] Rename U+0007 BELL to ALERT
[lex] Remove Unicode character name abbreviations
[dcl.link] Avoid implementation guidance in a note
[basic.start.main] Avoid implementation guidance in a note
[basic.start.main] Remove redundant phrase (#5083)
[func.wrap.{func.general, move.class}] Remove 'first-class object' (#5067)
[format.functions] Add "std::move" around "out" (#5069)
[c.mb.wcs] mbrtoc8 stores code units, not characters
[defns.access, basic.lval] Clarify what can be accessed and how (#4777)
[locale.time.get.virtuals] Use 'conversion specification'
[locale.time.get] Replace 'ISO/IEC 9945' with 'POSIX'
[std] Replace 'OK:' in code comments with 'OK,'
[dcl.typedef] Add explanation for lookup failure in example
[smartptr] Rework subclause nesting (#5119)
[refwrap.general] Add cross-references to the class synopsis (#5122)
[alg.c.library,c.math.fpclass,cmath.syn] Use \xrefc macro (#5076)
[check] Add check for verbatim U+nnnn
[lex] Introduce \unicode macro for Unicode character names
[intro.refs] Update dated reference to previous POSIX standard
[defs] Update introduction to match ISO Directives (#5096)
[check] Cosmetics
[contents] Add special lookup treatment for swap
[expr.prim.lambda.capture] Add missing \keyword
[intro.object,lex.ccon] Use \Cpp{} macros
[ranges] Remove \expos markers for nested types (#4829)
[pairs.pair] Use T1/T2, not first_type/second_type
Update configuration for building working drafts after N4901.
Update configuration for new working draft N4901 and add corresponding Editors' Report N4902
[range.view] Move note outside of list.
[expr.await] Remove hyphen from "re-thrown" (#5062)
[time.format] Avoid non-sentence in bulleted list
[lex.ccon] Clarify antecedent for 'it'
[index] Add UTF-8, UTF-16, UTF-32 to the index
[system.error.syn,locale.facet] Replace 'automatic' by 'implicit' conversion
[string.io] Rephrase sentry conversion
[input.output] Use \tcode{sentry} for the nested class
[vector.cons] Use math formatting for 'N' for consistency
[basic.life] Remove a partial repetition of the end-of-lifetime rules (#4894)
[ranges] Tweak whitespace, comment alignment, italic correction
[ranges] Tweak use of braces and whitespace
[basic.def.odr] Introduce label 'term.odr.use' and refer to it
[container.requirements] Improve punctuation of list items.
[diff.cpp20.utilities] Improve clarity of long sentence.
[dcl.type.auto.deduct, expr.type.conv] Rearrange description of 'auto' deduction
[utilities, range.nonprop.cache] Simplify direct-non-list-initalization phrasing (#5042)
[support.c.headers.general] Do not use \libheader with placeholder.
[move.iterator] Use the template parameter directly in declaration of base()
[expr.delete] Remove "result" from expression (#4740)
[support.types.layout] Avoid implementation guidance in a note
[range.join.view] Remove duplicative condition (#4957)
P2401R0 Add a conditional noexcept specification to std::exchange
[iterators] Add temporary page break to work around longtable bug
P2393R1 Cleaning up integer-class types
[diff.mods.to.headers] Delete statement that C headers are deprecated.
P2340R1 Clarifying the status of the "C headers"
[ranges.zip] Use 'auto' instead of decay-copy
P2321R2 zip
P2301R1 Add a pmr alias for std::stacktrace
P2251R1 Require span & basic_string_view to be Trivially Copyable
P2077R3 Heterogeneous erasure overloads for associative containers
P1675R2 rethrow_exception must be allowed to copy
P1272R4 Byteswapping for fun&&nuf
P1147R1 Printing volatile Pointers
P1072R10 basic_string::resize_and_overwrite
P0849R8 auto(x): decay-copy in the language
[optional.monadic] Clarify handling of non-movable types
P0798R8 Monadic operations for std::optional
[func.wrap.move.util] Clarify result of operator==
[func.wrap.move.class] Use 'recommended practice' for small-object optimization
[func.wrap] Change 'targets an object' to 'has a target object'
[func.wrap.move] Change 'targets an object' to 'has a target object'
[func.wrap.move.ctor] Improve layout for is-callable-from
[func.wrap.move.ctor] 'Args' does not exist; use 'ArgTypes'
P0288R9 move_only_function
[diff.cpp20.utilities] Rephrase to avoid undefined term 'const-iterable'
P2418R2 Add support for std::generator-like types to std::format
P2415R2 What is a view?
[syncstream.syncbuf.special] Remove 'noexcept' for non-member swap
[range.take.overview] Avoid highlighting single evaluation of "F"
LWG3595 Exposition-only classes proxy and postfix-proxy for common_iterator should be fully constexpr
LWG3593 Several iterators' base() const & and lazy_split_view::outer-iterator::value_type::end() missing noexcept
LWG3592 lazy_split_view needs to check the simpleness of Pattern
LWG3591 lazy_split_view<input_view>::inner-iterator::base() && invalidates outer iterators
LWG3590 split_view::base() const & is overconstrained
LWG3589 The const lvalue reference overload of get for subrange does not constrain I to be copyable when N == 0
LWG3585 Variant converting assignment with immovable alternative
LWG3581 The range constructor makes basic_string_view not trivially move constructible
LWG3580 iota_view's iterator's binary operator+ should be improved
LWG3574 common_iterator should be completely constexpr-able
LWG3573 Missing Throws element for basic_string_view(It begin, End end)
LWG3572 copyable-box should be fully constexpr
LWG3571 flush_emit should set badbit if the emit call fails
LWG3570 basic_osyncstream::emit should be an unformatted output function
LWG3568 basic_istream_view needs to initialize value_
LWG3567 Formatting move-only iterators take two
LWG3566 Constraint recursion for operator<=>(optional<T>, U)
LWG3563 keys_view example is broken
LWG3561 Issue with internal counter in discard_block_engine
LWG3560 ranges::equal and ranges::is_permutation should short-circuit for sized_ranges
LWG3559 Semantic requirements of sized_range is circular
LWG3557 The static_cast expression in convertible_to has the wrong operand
LWG3554 chrono::parse needs const charT* and basic_string_view<charT> overloads
LWG3535 join_view::iterator::iterator_category and ::iterator_concept lie
LWG3498 Inconsistent noexcept-specifiers for basic_syncbuf
LWG3480 directory_iterator and recursive_directory_iterator are not C++20 ranges
LWG3470 convertible-to-non-slicing seems to reject valid case
LWG3422 Issues of seed_seq's constructors
LWG3407 Some problems with the wording changes of P1739R4
LWG3392 ranges::distance() cannot be used on a move-only iterator with a sized sentinel
LWG3361 safe_range<SomeRange&> case
LWG3293 move_iterator operator+() has incorrect constraints
LWG3152 common_type and common_reference have flaws in common
LWG3146 Excessive unwrapping in std::ref/cref
LWG3123 duration constructor from representation shouldn't be effectively non-throwing
LWG3121 tuple constructor constraints for UTypes&&... overloads
LWG2762 unique_ptr operator*() should be noexcept
LWG2381 Inconsistency in parsing floating point numbers
LWG2191 Incorrect specification of match_results(match_results&&)
[lex.literals] Improve presentation of tables.
[diff.cpp14.lex] Update 'basic source' to 'translation' character set
P2314R4 Character sets and encodings
P2128R6 Multidimensional subscript operator
P2036R3 Change scope of lambda trailing-return-type
P2360R0 Extend init-statement to allow alias-declaration
P2246R1 Character encoding of diagnostic text
P2334R1 Add support for preprocessing directives elifdef and elifndef
P2316R2 Consistent character literal encoding
[dcl.fct.def.coroutine] Replace \textrm with \text in math mode
P0847R7 Deducing this
P2242R3  Non-literal variables (and labels and gotos) in constexpr functions
CWG2496 ref-qualifiers and virtual overriding
CWG2491 Export of typedef after its first declaration
CWG2490 Restrictions on destruction in constant expressions
CWG2486 Call to noexcept function via noexcept(false) pointer/lvalue
CWG2484 char8_t and char16_t in integral promotions
CWG1733 Return type and value for operator= with ref-qualifier
CWG1724 Unclear rules for deduction failure
CWG1249 Cv-qualification of nested lambda capture
[macros] Preserve straight apostrophes in code.
[stmt.pre] Remove stray cross-reference (#4959)
[expr.prim.id.general] Add missing semicolon in example (#4956)
[tuple.apply] Move exposition-only functions to namespace std (#4951)
[customization.point.object] fix grammar (#4950)
[std] Use \keyword for coroutine keywords (#4943)
[range.dangling] Use ranges::subrange in example (#4946)
[lib] Rename exposition-only 'no-throw-' concepts to 'nothrow-' (#4942)
[swappable.requirements] Change "Requires" to "Preconditions" (#4886)
[expr.new] Clarify result type and value category
[dcl.init.ref] Avoid 'value of the expression'
[stmt.dcl] Clarify 'active' variables
[expr.dynamic.cast] Remove apparent condition
[class.base.init] Clarify implicitly-defined copy/move constructors
[expr.delete] Clarify treatment of arrays of classes
[expr.delete] Clarify constraints on non-array delete
[optional] Replace bool(x) with x.has_value()
[dcl.init.aggr] Insert paragraph break to avoid bad \item numbering
[expr.typeid] Require class type to be complete in all cases (#4827)
[stmt.return,dcl.fct.def.coroutine] Avoid use of 'glvalue result' (#4803)
[conv.rank] Avoid hinting that 'bool' be a standard integer type. (#4209)
[dcl.init.general] break p7 into two paragraphs (#4912)
[dcl.spec.auto.general] The placeholder type -> A placeholder type (#4909)
[basic] Reference [basic.types.general] where appropriate (#4895)
[basic.life] Use Oxford comma (#4896)
[actions] Update dependencies cache before installing (#4897)
[expr.ass] Clarify type of assignment-expression
[basic.string.general] Adjust declaration of basic_string::npos
[std] Replace vestigial parenthesized \ref with \iref
[basic.lookup.unqual] Clarify 'unqualified name'
[impldef] Add missing index entries
[basic] Reference more specific subclause [expr.context] (#4866)
[temp.spec.general] Format grammar terms (#4849)
[range.istream.view] Repeat default template argument in synopsis (#4836)
[coroutine.handle.export.import] Add missing space after "cv" (#4823)
[iostream.format] Use the injected-class-name throughout
[cmath.syn] Add 'lerp' to list of differences vs. C (#4806)
[coroutine.traits.primary] Separate parameters by spaces
[range.dangling] Use "auto" parameter type (#4817)
[futures.async] Add missing space to fold expression
[range.iota.view] Mark exposition-only concepts as such (#4818)
[spanbuf.virtuals] Add missing "override" (#4795)
[std] Use $...$ around negative numbers, for proper minus signs (#4790)
[tuple.creation] Remove unused introductory notation
[dcl.typedef] Properly define 'typedef name for linkage purposes'.
[std] Use grammar typedef-name instead of 'typedef name'.
[meta.member] Clarify is_corresponding_member semantics
[std] Harmonize 'reference binds to an expression' phrasing
[input.streams.general],[output.streams.general] describe contents more accurately
[ostream.formatted.reqmts],[ostream.unformatted] "that object" not "this object"
[range.nonprop.cache] Clarify emplace-deref for prvalues. (#4732)
[basic.compound] Use quoted-string designation for pointer types
[expr.static.cast] Admit integral promotion for cast to enumeration type
[expr.delete] Replace 'denote' with 'pointed to'. (#4762)
[bit.count] Add missing paragraph number
[func.require, func.wrap.func.inv] Use defined term "target object" (#4739)
[range.adaptor.object] Use \ref, not \iref, for direct reference (#4742)
[time.clock.cast.{sys,utc}] Shorten introdution of `Duration2` (#4734)
[allocator.uses.construction] Add missing closing parentheses (#4729)
Make GitHub action upload the PDF file
[check] Add missing semicolon (for BSD compatibility)
[range.split.iterator] Add missing braces in 'Effects' clause (#4721)
[concepts,iterators] Remove space between `requires` and parameter list (#4719)
[algorithms] Add missing spaces after commas
[utilities] Add missing spaces after commas
[dcl.dcl] Improve note regarding nodeclspec-function-declarations
[format] Use \exposid{,nc} for format-arg-store, not \placeholder
[iterator.operations, range.iter.op.distance] Reword "get to".
[dcl.type.auto.deduct] Clarify initializer for placeholder type deduction.
[dcl.fct] Clarify in example which declarations refer to which (#4287)
[stream.types] Move subclause near the start of [iostreams]
[input.output.general] Delete note containing [fig:iostreams.streampos].
[basic.start.dynamic] Clarify note about templated variables
[range.split.overview] Improve string splitting example
[temp.variadic] Clarify template parameter packs not introduced by pack expansions.
[util.smartptr.shared.const] Replace inappropriate "shall"s.
[unord.req.general] Replace inappropriate "shall be" with "is".
[expr.rel] Clarify function pointer comparisons
[basic.types.general] Do not mention pointers
Update configuration for building working drafts after N4892.
Update configuration for new working draft N4892 and add corresponding Editors' Report N4893
[tools/makereport] Pick more delibrate fonts, less distinct code style
[ranges] Whitespace tweaks.
[macros] Further spacing fixes and new non-italic-correcting versions
[range.join.iterator] Add missing \tcode
[range.utility.helper] Add missing '='
[basic.string.general], [string.view.template.general] remove constexpr
[macros] Separate sections a bit more cleanly, document macro length
[temp.variadic] Rearrange description of pack expansion (#4543)
[basic.stc.static] Rephrase the definition of 'static storage duration'
[format.syn] Remove extraneous commas in vformat_to declarations (#4705)
[basic.fundamental] Redirect some index entries.
[range.prim.data] Use ranges::begin(t) not ranges::begin(E)
[fs.path.native.obs] Remove bogus note.
[ranges] Use views::meow in examples instead of meow_view
P2367R0 Remove misuses of list-initialization from Clause 24
P2210R2 Superior String Splitting
P2325R3 Views should not be required to be default constructible
P2328R1 join_view should join all views of ranges
P2281R1 Clarifying range adaptor objects
P2216R3 std::format improvements
P2231R1 Missing constexpr in std::optional and std::variant
P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr
P2136R3 invoke_r
[string.view.cons] Change "R" to "remove_reference_t<R>" in constraint.
P1989R2 Range constructor for std::string_view 2: Constrain Harder
P1951R1 Default Arguments for pair's Forwarding Constructor
P1659R3 starts_with and ends_with
P0401R6 Providing size feedback in the Allocator interface
P1518R2 Stop overconstraining allocators in container deduction guides
[queue] Index constructors.
P1425R4 Iterators pair constructors for stack and queue
P0448R4 A strstream replacement using span<charT> as buffer
P1328R1 Making std::type_info::operator== constexpr
P1132R8 out_ptr - a scalable output pointer abstraction
LWG3555 {transform,elements}_view::iterator::iterator_concept should consider const-qualification of the underlying range
LWG3553 Useless constraint in split_view::outer-iterator::value_type::begin()
LWG3552 Parallel specialized memory algorithms should require forward iterators
LWG3551 borrowed_{iterator,subrange}_t are overspecified
LWG3549 view_interface is overspecified to derive from view_base
LWG3548 shared_ptr construction from unique_ptr should move (not copy) the deleter
LWG3546 common_iterator's postfix-proxy is not quite right
LWG3544 format-arg-store::args is unintentionally not exposition-only
LWG3543 Definition of when counted_iterators refer to the same sequence isn't quite right
LWG3542 basic_format_arg mis-handles basic_string_view with custom traits
LWG3541 indirectly_readable_traits should be SFINAE-friendly for all types
LWG3540 [format.arg] There should be no const in basic_format_arg(const T* p)
LWG3539 format_to must not copy models of output_iterator<const charT&>
LWG3536 Should chrono::from_stream() assign zero to duration for failure?
LWG3533 Make base() const & consistent across iterator wrappers that supports input_iterators
LWG3532 split_view<V, P>::inner-iterator<true>::operator++(int) should depend on Base
LWG3530 BUILTIN-PTR-MEOW should not opt the type out of syntactic checks
LWG3529 priority_queue(first, last) should construct c with (first, last)
LWG3528 make_from_tuple can perform (the equivalent of) a C-style cast
LWG3527 uses_allocator_construction_args handles rvalue pairs of rvalue references incorrectly
LWG3526 Return types of uses_allocator_construction_args unspecified
LWG3523 iota_view::sentinel is not always iota_view's sentinel
LWG3522 Missing requirement on InputIterator template parameter for priority_queue constructors
LWG3521 Overly strict requirements on qsort and bsearch
LWG3520 iter_move and iter_swap are inconsistent for transform_view::iterator
LWG3519 Incomplete synopses for <random> classes
LWG3518 Exception requirements on char trait operations unclear
LWG3517 join_view::iterator's iter_swap is underconstrained
LWG3506 Missing allocator-extended constructors for priority_queue
LWG3481 viewable_range mishandles lvalue move-only views
LWG3462 [formatter.requirements]: Formatter requirements forbid use of fc.arg()
LWG3430 std::fstream & co. should be constructible from string_view
LWG3410 lexicographical_compare_three_way is overspecified
LWG2997 LWG 491 and the specification of {forward_,}list::unique
LWG2818 "::std::" everywhere rule needs tweaking
LWG2774 std::function construction vs assignment
P2201R1 Mixed string literal concatenation
P1847R4 Make declaration order layout mandated
P2223R2 Trimming whitespaces before line splicing
P1401R5 Narrowing contextual conversions to bool
P2156R1 Allow Duplicate Attributes
P1949R7 C++ Identifier Syntax using Unicode Standard Annex 31
P2186R2 Removing Garbage Collection Support
P1938R3 if consteval
[intro.execution] Remove inaccurate note.
CWG2481 Cv-qualification of temporary to which a reference is bound
CWG2479 Missing specifications for consteval and constinit
CWG2477 Defaulted vs deleted copy constructors/assignment operators
CWG2474 Cv-qualification and deletion
CWG2466 co_await should be a single evaluation
CWG2465 Coroutine parameters passed to a promise constructor
CWG2458 Value category of expressions denoting non-static member functions
CWG2448 Cv-qualification of arithmetic types and deprecation of volatile
CWG2397 auto specifier for pointers and references to arrays
[expr] Add cross-references for 'local entity'.
[ranges] Rename 'not-same-as' to 'different-from'.
[std] Use \keyword for access specifiers.
[std] Use \keyword for 'thread_local', 'static_assert', 'decltype'.
[std] Use \keyword for 'new', 'delete', 'this', 'nullptr'.
[std] Use \keyword for specifiers.
[std] Use \keyword for 'struct', 'class', 'union', 'enum'.
[std] Use \keyword for 'for', 'do', 'while', 'switch', 'case', 'if', 'else'.
[std] Use \keyword for 'consteval', 'constexpr', 'constinit'.
[std] Use \keyword for 'typename'.
[std] Use \keyword for 'auto'.
[std] Use \keyword for void.
[expression] Use \keyword throughout
[basic] Use \keyword throughout
[except] Use \keyword throughout.
[std] Use \keyword for character types.
[std] Use \keyword for 'reinterpret_cast'.
[std] Use \keyword for 'dynamic_cast'.
[std] Use \keyword for 'const_cast'.
[std] Use \keyword for 'static_cast'.
Use \keyword for 'typedef'.
[lex] Use \keyword for alternative tokens.
[check] Add check for library element order
[lib] Canonicalize order of library descriptive elements
[thread] Canonicalize order of library descriptive elements
[range.elements.overview] Correct example
[misc] Add index of Working Drafts (#4614)
[namespace.def.general] Clarify inline namespaces
[basic.lookup.unqual] Add examples for conversion-function-ids
[dcl.init.aggr] An initializer list is brace-enclosed
[expr.await] Clarify rethrowing exceptions from await-suspend
[time.clock.cast.sys],[time.clock.cast.utc] Use Duration2 for clarity. (#4565)
[expr] Use 'qualification-combined' and 'qualification-decomposition'
[rand.eng.sub] drop no-op modulo operation
[README] Update requirements for MacOS BasicTeX installs (#4599)
[temp.over.link] Add missing \grammarterm marker (#4609)
[vector.bool] reference has multiple assignment operators (#4607)
[expr.static.cast] fix wording for static_cast from pointer to base to pointer to derived (#4605)
[vector.bool] Remove top-level const from parameter declaration (#4608)
[range.elements.sentinel] Correct return type of operator- (#4603)
[tuple.elem] Replace "member variables" with "non-static data members" (#4602)
[forward.list] Rename stable label from [forwardlist]
[bitset.operators] Add missing template-head for operator functions
[template.bitset.general,bitset.members] Use injected-class-name
[lex.string] Change "string-literal" to "string literal object" (#4549)
[except.ctor] Remove false claim about automatic objects
[format.context] Rephrase recommended practice
[except.spec] Clarify potentially-throwing functions
[ranges.syn] Add primary templates for tuple-like protocol
[ranges] Improve library index for views
[intro.object] Turn non-normative wording into a Note (#4490)
[expr.unary.general] Disable protrusion to align grammar properly. (#4583)
[std] Spell "whitespace" consistently (#4557)
[utility.underlying] Add to_underlying to index (#4578)
Update configuration for building working drafts after N4878.
Update configuration for new working draft N4885 and add corresponding Editors' Report N4886
[range.split.inner] Clarify paragraph 1 (#4545)
[dcl.fct.def.delete] Make terms cover semantic deletedness
[dcl.pre] Reorder paragraphs (#4462)
[dcl.fct] Integrate return type requirements from [expr.call] and simplify them (#4113)
[dcl.struct.bind] Use conventional indexing markup
[lib] Index all uses of public concepts
[cmp.alg] Clarify that ill-formed CPO invocations are SFINAE-friendly (#4494)
[temp.expl.spec] Use 'reachable from', not 'declared before'
[unord.hash] Remove redundant wording
[range.split.outer] Clarify scope of exposition-only 'current'
[floatfield.manip] Rephrase note about ios_base::hex
[conv.rank] Avoid 'shall' for plain descriptions.
[ranges.syn] Don't constrain specializations of enable_borrowed_range (#4519)
[check] Terminate sed commands with semicolons (#4538)
[common.iter.nav] Avoid newline in index entry
P1682R2 std::to_underlying for enumerations
P2017R1 Conditionally borrowed ranges
P2160R1 Locks lock lockables
P2162R2 Inheriting from std::variant
P2212R2 Relax Requirements for time_point::clock
P2259R1 Repairing input range adaptors and counted_iterator
LWG3505 split_view::outer-iterator::operator++ misspecified
LWG3502 elements_view should not be allowed to return dangling references
LWG3500 join_view::iterator::operator->() is bogus
LWG3495 constexpr launder makes pointers to inactive members of unions usable
LWG3492 Minimal improvements to elements_view::iterator
LWG3490 ranges::drop_while_view::begin() is missing a precondition
LWG3433 subrange::advance(n) has UB when n < 0
LWG3391 Problems with counted_iterator/move_iterator::base() const &
P1102R2 Down with ()!
CWG2470 Multiple array objects providing storage for one object
[time.syn] add constexpr to leap_second comparisons (#4539)
[cpp.import] Clarify header units as the source of macro definitions.
[check] Split github action into two stages (source, output) (#4533)
[optional.ctor] Add missing \tcode around 'true' (#4534)
ci: run on Ubuntu 20.04
ci: split make and check steps
docs: update setup instructions for Debian (#4532)
[stdatomic.h.syn] Add semicolons in using-declarations (#4502)
[vector.bool] Remove an extra closing parenthesis (#4501)
[code] Ensure whitespace between ')' and '{' (#4500)
[container.requirements] Use bulleted lists to introduce identifiers
[lib] Use 'tm', not 'struct tm'
[stmt.pre] Excise undefined term 'contained' (#4485)
[func.bind.front] Use a more conventional introduction (#4488)
[README] Update requirements for "Getting Started" on Arch Linux (#4496)
[range.dangling] Split up overly long sentence.
[library.general] Adjust order according to recent clause reorganizations.
[index] Add missing implementation-defined types
[stacktrace.basic.cmp] Update 'lexicographical_compare_3way'
[lib] Change 'expression inside noexcept' to 'exception specification' (#4105)
[iterator.concept.winc] Index implementation-defined integer-class type (#4470)
[stacktrace.basic.overview] Add missing "namespace std {" (#4469)
[range.iota.iterator,range.iota.sentinel] Add missing requires-clauses on out-of-class member definitions (#4426)
[over.built] Correct note re: "hiding" to match over.match.oper/3
[concepts.equality] Turn 'e.g.' into a proper example (#4442)
[lib] Use 'specialization' instead of 'instance'
[ranges] Improve concept index (#4456)
[lib] Ensure non-member swap is declared in the header synopsis only
[fs.op.funcs] Qualify declarator-id with sub-namespace (#4459)
[over.match.viable, over.match.best.general] Use math mode, not \textit
[dcl.decl.general] Use \gterm, not \textit
[expr.prim.req.type] Clarify example comment re: validity of name only (#4457)
[over.match.conv] add missing "can" (#4461)
[localization] Reformat LaTeX source code.
[travis] Delete Travis script, and disable Travis CI.
Run check.sh from GitHub action
Set up new GitHub action
[system.error.syn] Add dropped word (#4440)
[temp.explicit] Typo fix: remove extraneous x (#4439)
[stacktrace.syn] Add header index entry for <stacktrace>. (#4434)
[specialized.algorithms] Align requires-clause with return type (#4430)
[basic.lookup.qual.general] Add \tcode around N::B<0> (#4422)
[stacktrace.entry.overview] Italicize 'implementation-defined' in code block (#4421)
Update configuration for building working drafts after N4878.
Update configuration for new working draft N4878 and add corresponding Editors' Report N4879
[std, cover-wd] Update editor
[func.wrap.func] Remove redundant declarations of swap and op== (#4411)
[class.access.base] Clarify 'direct member' for access checks.
[syncstream.syncbuf.cons] Remove bogus rdbuf() calls
[dcl.constexpr] Remove use of 'identifier label'.
tools/makereport: add styling for nested lists
[stmt.return] Remove unhelpful example. (#4309)
[thread.req.timing] Capitalize sentences in bullets.
[range.istream] Rename expos-only member 'object_' to 'value_'.
Move punctuation to before the footnote mark. (#4402)
[expr.sub] Make deprecation of commas in brackets normative.
[time.cal.year.nonmembers] Avoid narrowing conversion (#4184)
[util.smartptr.weak] Remove redundant declaration of 'swap' (#4037)
[except.spec] Excise undefined term 'instantiation directive'. (#4312)
[diff.cpp03.temp] 'export' was resurrected for modules. (#4316)
[expr.type.conv] Remove indirection of "specified type" (#4397)
[atomics.syn] Move macro definitions to the global namespace.
[ranges] Improve indentation around "using Base" and "using Parent" declarations
[ranges] Change "using Parent" declarations to use "maybe-const" after LWG3448
[atomics.general] Add contents entry for "C compatibility" subclause
[diff.mods.to.headers,depr.c.headers.other] Reflect new status of <stdatomic.h>.
P0943R6 Support C atomics in C++
P1048R1 A proposal for a type trait to detect scoped enumerations
P2227R0 Update normative reference to POSIX
[stacktrace.basic.obs] Append 'is \tcode{true}'
[stacktrace.basic.ctor] Append 'is \tcode{true}'
[stacktrace.basic.ctor] Improve phrasing of frames_ initialization failure.
P0881R7 A Proposal to add stacktrace library
P1679R3 string contains function
LWG3483 transform_view::iterator's difference is overconstrained
LWG3482 drop_view's const begin should additionally require sized_range
LWG3477 Simplify constraints for semiregular-box
LWG3476 thread and jthread constructors require that the parameters be move-constructible but never move construct the parameters
LWG3474 Nesting join_views is broken because of CTAD
LWG3473 Normative encouragement in non-normative note
LWG3472 counted_iterator is missing preconditions
LWG3467 bool can't be an integer-like type
LWG3466 Specify the requirements for promise/future/shared_future consistently
LWG3465 compare_partial_order_fallback requires F < E
LWG3461 convertible_to's description mishandles cv-qualified void
LWG3460 Unimplementable noop_coroutine_handle guarantees
LWG3455 Incorrect Postconditions on unique_ptr move assignment
LWG3453 Generic code cannot call ranges::advance(i, s)
LWG3449 take_view and take_while_view's sentinel<false> not comparable with their const iterator
[ranges] Replace "using Base" declarations as requested in LWG3448
LWG3448 transform_view's sentinel<false> not comparable with iterator<true>
LWG3446 indirectly_readable_traits ambiguity for types with both value_type and element_type
LWG3437 __cpp_lib_polymorphic_allocator is in the wrong header
LWG3434 ios_base never reclaims memory for iarray and parray
LWG3428 single_view's in place constructor should be explicit
LWG3427 operator<=>(const shared_ptr<T>&, nullptr_t) definition ill-formed
LWG3426 operator<=>(const unique_ptr<T, D>&, nullptr_t) can't get no satisfaction
LWG3425 condition_variable_any fails to constrain its Lock parameters
LWG3421 Imperfect ADL emulation for boolean-testable
LWG3420 cpp17-iterator should check that the type looks like an iterator first
LWG3419 [algorithms.requirements]/15 doesn't reserve as many rights as it intends to
LWG3406 elements_view::begin() and elements_view::end() have incompatible constraints
LWG3405 common_view's converting constructor is bad, too
LWG3404 Finish removing subrange's conversions from pair-like
LWG3403 Domain of ranges::ssize(E) doesn't match ranges::size(E)
LWG3306 ranges::advance violates its preconditions
LWG3171 LWG2989 breaks directory_entry stream insertion
LWG3036 polymorphic_allocator::destroy is extraneous
LWG3170 is_always_equal added to std::allocator makes the standard library treat derived types as always equal
LWG3120 Unclear behavior of monotonic_buffer_resource::release()
LWG2820 Clarify <cstdint> macros
LWG2743 P0083R3 node_handle private members missing "exposition only" comment
LWG2731 Existence of lock_guard<MutexTypes...>::mutex_type typedef unclear
LWG3464 istream::gcount() can overflow
LWG3450 The const overloads of take_while_view::begin/end are underconstrained
LWG3447 Deduction guides for take_view and drop_view have different constraints
LWG3432 Missing requirement for comparison_category
LWG3435 three_way_comparable_with<reverse_iterator<int*>, reverse_iterator<const int*>>
LWG3249 There are no 'pointers' in [atomics.lockfree]
LWG3236 Random access iterator requirements lack limiting relational operators domain to comparing those from the same range
LWG3211 std::tuple<> should be trivially constructible
LWG3195 What is the stored pointer value of an empty weak_ptr?
LWG3143 monotonic_buffer_resource growth policy is unclear
LWG3117 Missing packaged_task deduction guides
LWG2839 Self-move-assignment of library types, again
[dcl.meaning.general] Clarify origin of 'declarator-id'.
[dcl.spec.auto.general] Clarify redeclarations vs. placeholder types.
[dcl.type.elab] Clarify 'declaration'.
[dcl.link] Clarify sentence structure
[dcl.pre] Turn 'must' into a note.
P1787R6 Declarations and where to find them
P2029R4 Numeric and universal character escapes in character and string literals
[temp.spec.partial.general] Reword note to avoid "may"
Rename stable labels "temp.class.spec*" to "temp.spec.partial*"
P2096R2 Generalized wording for partial specializations
P0330R8 Literal Suffix for (signed) size_t
CWG2461 Diagnosing non-bool type constraints
CWG2460 C language linkage and constrained non-template friends
CWG2457 Unexpanded parameter packs don't make a function type dependent
CWG2452 Flowing off the end of a coroutine
CWG2369 Ordering between constraints and substitution
CWG2312 Structured bindings and mutable
[macros] Add "\exposidnc", like \exposid without italic correction (#4392)
Replace "could" and "might" in Annexes. (#4390)
Replace "could" and "might", Clauses 16-32. (#4386)
Replace "could" and "might", Clauses 1-15. (#4384)
[std] Add "implemented" to hyphenation rules
[iterators.common] fix typo and add "is true" to Preconditions: clauses (#4382)
Revert "[everywhere] Replace "might" and "could" ...".
[stringbuf.cons] Insert missing space after comma (#4335)
[macros] Remove library headers from general index.
[rand] Remove library names from general index.
[re] Remove library names from general index.
[std] Harmonize phrasing 'terminate is invoked' (#4005)
[stmt.ranged] Align font for begin-expr and end-expr.
[everywhere] Replace "might" and "could" with "can" when expressing "an ability of the user of the document or [...] a possibility open to him/her" (quoting the ISO Drafting Directives, Part 2).
[ranges] Add missing "is true"s to \expects
README: Add splitindex and imakeidx to list of packages for Fedora
[std] Retire \dcr.
[std] Remove unnecessary bracketing in tcode.
Update configuration for building working drafts after N4868.
Update configuration for new working draft N4868 and add corresponding Editors' Report N4867.
[declval] Indent example and fix phrasing in example
[tab:container.hash.req] Capitalize start of sentence.
[class.union.anon] Remove duplicate normative wording.
[everywhere] Consistently use 'whitespace'. (#4211)
[temp.deduct.call] Add additional example to the examples added by CWG2303 to clarify meaning.
[basic.lval] Named bit-fields are objects
[temp.mem] Change instantiation to specialization
[temp.mem] Change "virtual" to "declared virtual"
[dcl.enum] Turn redundant and informal wording into a note
[class.static.mfct] Strike redundant normative wording
[expr.spaceship] Clarify treatment of pointers.
[expr.static.cast] Remove unused cv-qualifier notation
[dcl.spec.auto] Denoise wording for when placeholders can deduce from an initializer
[class.mem] Deduction guides do not declare new members
[dcl.init] Remove redundant specification of when value-initialization occurs
[basic.types] Change redundant normative wording into note
[index] Use LaTeX package 'imakeidx' to allow for more indices.
[numeric.limits] use "primary template" and "value-initialized"
[dcl.array] Clarify that arrays do not have extra padding.
[check] Detect 'shall', 'may', and 'should' inside footnotes.
[everywhere] Convert '\footnote' to 'footnote' environment
[macros] Add 'footnote' environment.
[expr.unary.op] Use 'negative', not 'negation'.
[specialized.algorithms] Fold away unnecessary compound-statements.
[intro.defs] Integrate [re.def].
[tab:container.assoc.req] Add missing 'Effects'
[expr.prim.paren] Replace "value" with "result"
[range.reverse.overview] Use \cv{} instead of "cv-qualified"
[move.iter.elem] Add missing 'return'
[tab:filebuf.open.modes] Consistently order table rows.
[iomanip.syn] Use 'unspecified' instead of type meta-variables.
[expr.prim.id.unqual] Restore "Otherwise"
[locale.codecvt.virtuals] Add missing pnum
[locale.codecvt] Use 2 space indentation (but leave inconsistent indentation for parameters in synopsis as is).
[time.clock.cast.fn] Use 2 space indentation in the constraints for clock_cast.
[tab:container.alloc.req] Indent clauses to fix the build.
[time.clock.system.members] Remove extraneous vertical space.
[container.requirements.general] Add missing paragraph number.
[class.derived.general] Move figure out of note to fix excessive vertical space if the figure gets moved to another page.
[class.union.anon] Remove bogus index entry that was causing excess vertical whitespace.
[tab:re.synopt] Remove blank line in the description of collate.
[intro.races] Harmonize index entry for "visible side effect(s)".
[intro.refs], Bibliography: Reorder ISO before all others and in numerical order.
[algorithm.syn] Improve linebreaking.
[tab:meta.trans.other] Remove blank line before Preconditions.
[tab:container.seq.opt] Remove blank line in the description of emplace_back.
[tab:container.hash.req] Add line breaks before next itemdecl clause.
[temp.dep.type] Replace note in sentence with footnote.
[expr.const] Replace notes in sentences with footnotes.
[time.clock.utc.overview] Move explicit line break in example. (#4261)
[iterator.concept.sentinel] Spell "see" with lower-case 's'.
[macros] Avoid excess vertical space for Annex C macros.
[ranges] Index "split_view::{outer,inner}-iterator" correctly.
[std] Use tailnote and tailexample to avoid empty space in tables. (#4251)
[std] Introduce tailnote environment to avoid empty lines in tables. (#4249)
[class.mem.general] Move note to the end of the list item.
[range.istream.iterator] Add missing space.
[intro.compliance.general, implimits] Cite Annex B normatively.
[futures.async] Avoid note within a sentence.
[lex.charset] Replace "is required" wording in footnote with simple statement.
[basic.fundamental] Delete stray space.
[iostream.objects.overview] Delete duplicate paragraph.
[expr.cond] Clarify what "subject to the constraint" means.
[std] "must" fixes and suggested rewordings.
[temp.constr.order] Remove example markers from footnote.
[std] Remove 'should' and 'may' from footnotes.
[check] Flag 'shall', 'may', or 'should' inside notes.
[std] Rephrase notes giving advice to the programmer.
[std] Move implementation recommendations to outside notes
[std] Replace 'must'.
[std] Replace 'may' in notes.
[std] Replace 'might' in normative context.
[over.match.best.general] Remove mid-sentence period.
[cpp.predefined] Shuffle items to avoid an unfortunate page break.
[fs.norm.ref] Dissolve subclause.
[concepts.equality] Replace spurious 'this document' with 'the library Clauses'.
[cmp.categories.pre] Remove unused enumerators
[class.union.anon] Turn redundant wording into a note
[dcl.fct.spec] Remove "class" from "non-static class member function"
[std] Improve index for 'freestanding/hosted implementation'.
[dcl.init.ref] Remove "type" from "reference to type T"
[range.access] Index customization point objects.
[tuple.special] Index 'swap(tuple, tuple)' as-if a member function.
[iterator.cpp17] Index old-style iterator requirements.
[over.literal] Mark uses of a reserved identifier
[everywhere] Reduce width of space after Note: and Example:.
[stmt.block] Rephrase introductory sentence.
[stmt.return] Improve CWG2426 wording
[expr.prim.lambda.capture] Use the term "local entity".
[intro.object] Say "member subobject" instead of "data member"
[std] Use \defnadj to improve/add many index entries.
[core] Use \keyword to introduce 'template'.
[expr.comma] Turn redundant normative wording into a note
[expr.reinterpret.cast] Strike definition in footnote
[std] Remove cross-references to the very same subclause
[class.dtor] Remove incorrect uses of virtual as a keyword
[over.ics.user] Small grammatical nit-picks
[basic.def.odr] Change "is required" to "shall"
[module.import] Clarify that only header imports make macros visible.
[thread.mutex.requirements] Harmonize wording for try_lock.
[module.reach] Clarify that only TUs with an interface dependency may be incidentally reachable
[class.derived] Clean up cross-references.
[expr.const] Add cross-reference for 'constant initialization'.
[expr.const] Disambiguate 'it' by introducing the name V.
[predef.iterators] Singularize heading of singular sentinels.
[dcl.fct.def.coroutine] Add missing 'noexcept' for final_suspend.
[everywhere] Stop talking about C++ International Standards.
Factor out duplication between note and example macros.
[iterator.concepts] Stop using LongTable for tables that aren't long.
[everywhere] Number notes and examples, make them one point smaller, and move them to (un-numbered) paragraphs of their own.
[xrefs] Don't claim this appendix is an annex.
[depr] Don't claim this Annex is a Clause.
[time.format] Date reference to ISO 8601 to match the normative reference.
[xrefdelta] Remove delta for change that's been incorporated into C++20.
[intro.defs] Remove cross-references from the Terms and Definitions
[intro.compliance.general] Properly reference normative clauses
[ranges.syn] Update iota_view constraints
[intro.defs] Refer to undated ISO/IEC 2382 for the terminology.
[xrefdelta] Remove entries that were also removed for C++20.
[intro.refs] Update from ISO/IEC 10646-1:1993 to ISO/IEC 10646:2003.
[lib] Replace 'comparison function' with 'comparison operator function'.
[definitions] Integrate into [intro.defs]
[defns.undefined] Move cross-reference to [expr.const]
[mem.res.syn] Add default template argument for polymorphic_allocator
[variant.helper] Use 'struct' for variant_size and variant_alternative
[util.smartptr.shared.cast] Add hyphen for 'well-formed'.
[check] Detect subclauses without siblings.
[description] Remove vacuous 'normative' statement.
[std] Remove 'of this document' after hyperlinked clause references.
[std] Use prefix 'Annex' for chapters in the table of contents.
[intro.ack] Dissolve subclause.
[check] Consider only text with \pnum as a hanging paragraph.
Replace "this subclause" with an explicit reference in all formerly-hanging paragraphs.
[check] Ignore LaTeX comments for hanging paragraph detection.
[check] Detect hanging paragraphs.
[except.uncaught] Remove parentheses when not invoking a function
[range.elements.iterator] Add missing 'friend' for operator-. (#4158)
[std] Remove superfluous final \rowsep or \hline in tables. (#4157)
[class.virtual] Add \keyword markup for 'final' and 'override' (#4139)
[diff.mods.to.declarations] Also mention 'byte' and 'to_integer'. (#4145)
[numeric.ops.gcd,numeric.ops.lcm] Say "other than cv bool" (#4147)
[span.iterators] Specify iterator value_type and reference (#4062)
[re, over.match.viable] Remove bad space before full stop. (#4138)
[lib] Harmonize presentation of "The expression in...is equivalent to" (#4108)
[ranges.syn] Remove bogus ; after requires-clause (#4128)
[span.syn] Add index entry for dynamic_extent. (#4136)
[coroutine.noop.coroutine] Use code font for noop_coroutine index entry. (#4133)
[format.syn] Avoid forward references (#4129)
[range.utility.helpers] Move template-argument-list out of \libconcept. (#4127)
[string.syn] Index basic_string typedefs. (#4125)
Index __func__ (#4124)
[depr.conversions.string] Use proper "Returns:" markup. (#4120)
[std] Move \rSec to before \indextext (#4116)
[thread.condvarany.intwait] Remove reference to nonexistent variable "cv". (#4115)
Revert "[expr.cond] drop redundant phrasing (#1374)"
[expr.cond] drop redundant phrasing (#1374)
[memory.syn,specialized.algorithms] Append "-for" to exposition-only concept "no-throw-sentinel" (#4100)
[ranges.syn] Properly capitalize "this Clause" (#4103)
[std] Add missing \pnums.
[check.sh] Escape backslash in awk program to silence warning (#4099)
[mask.array.comp.assign] Clarify "mask object" (#4096)
[mask.array.assign] Replace "it" with its antecedent (#4095)
[lex.ccon] Remove redundant nested \tcode. (#4094)
[lex.ext] Simplify use of \placeholder. (#4091)
[list.ops] Add missing full stop at end of sentence.
[iterator.requirements.general] Add missing comma.
[lib] Canonicalize order of library descriptive elements. (#4067)
[istream.syn,ostream.syn] update synopses according to LWG1203 (#4084)
[fs.class.path] Ensure interword spacing inside sentence. (#4083)
[alg.copy] Typeset variable consistently in math font. (#4079)
[tab:cpp17.moveassignable] Remove superfluous space. (#4076)
[re.grammar] Avoid monospace font for ordinary text. (#4074)
[stmt.pre, re.grammar, gram] Use a separate bnf environment for each nonterminal. (#4070)
[alg.is.permutation] Rephrase to simplify (#4071)
[allocator.members] Remove stray whitespace. (#4073)
[expr.new] Use repeated \indextext for index redirects with multiple targets. (#4065)
[special] Remove index entry for 'X(X&)'. (#4064)
[container.requirements] Improve index entries for contiguous and reversible containers. (#4051)
[basic.fundamental] Use canonical types in [tab:basic.fundamental.width] (#4057)
[expr.const] Remove duplicate cross-reference (#4055)
[structure.specifications] Integrate [res.on.expects]. (#4042)
[container.requirements.general] Remove parentheses for 'equal()' outside of a function call expression. (#4043)
[string.view.template] Wrap synopsis in its namespace (#4038)
[refwrap] Add blank line between class definition and deduction guide (#4036)
[iterator.concept.winc] Format 'I' in code font (#4027)
[ranges.general] Capitalize the word 'clause' (#4029)
[algorithms.general] Add [algorithms.results] to summary table (#4020)
[iterator.concept.forward] Undo spurious list item capitalization. (#4017)
[vector.capacity] Remove duplicate \pnum (#3983)
[thread.syn] Do not mandate including <initializer_list> when including <thread> (#3991)
[range.single.view] Add missing requires-clause to \itemdecl (#4009)
[class.temporary] Omit hyphen from "trivially copyable" (#4002)
[common.iter.cust] Pluralize subclause heading (#3995)
[range.refinements] Use 'customization point object' for ranges::data (#3993)
[iterator.cust] Use 'customization point object' in heading (#3994)
[concept.swappable] Use 'customization point object' for ranges::swap (#3992)
[class.mem] Add cross-reference for data member order (#3990)
Allow 'listings' package v1.8d (#3979)
[meta.trans.other] "C++ object type" is overly precise (#3969)
[over.ics.ref] Remove erroneous capitalization (#3972)
[namespace.qual] Add missing \tcode formatting to X (#3975)
[format.syn] Add missing reference to [format.context] in header synopsis (#3954)
[iterator.concepts.general] Remove synthesizeable operator!= in example. (#3950)
[string.conversions] Replace comparisons of a pointer against 0 with comparision against nullptr, for consistency with other parts of the library
[basic.type.qualifier] Incomplete and complete object types are just object types
[alg.clamp] Add missing calls to invoke (#3902)
[iterator.synopsis,reverse.iter.nonmember] Simplify declaration of reverse_iterator's non-member operator+
[iterator.synopsis,move.iter.nonmember] Harmoize formatting of operator-(move_iterator, move_iterator)
[iterator.synopsis] move_iterator non-member operator+ should agree with [move.iter.nonmember]
[expr.const] Change "dynamic cast" to "dynamic_cast" and move throw-expression to its own item (#3919)
[temp.class.spec] Remove unused hyphenation point (#3928)
[except.handle] Simplify void pointer cv-qualification
[basic.link] Add word missing from P1815R2
Update configuration for building working drafts after N4861.
Update configuration for building new working draft N4861.
Add Editors' Report N4859
Add a placeholder for [diff.cpp20].
Replace cross-references from C++17 with cross-references from C++20.
Update 'Cross-references from C++17' to exactly match the section label differences between C++17 and the C++20 DIS.
[time.zone.db.tzdb] Say where we look for time_zones, and avoid readability problem with 'If a time_zone tz is found' phrasing.
[class.copy.elision] Make wording more parallel by removing redundant wording.
[expr.prim.literal] Rephrase slightly to avoid 'which' sounding restrictive.
[basic.def.odr] Reduce excessive whitespace.
[temp.variadic] Make xref more precise.
[module.reach] Remove impossible private-module-fragment case
Show stable names in diffs (upon configuration)
Add .gitorder and shell script to use it
[depr] Isolate \requires
[concept.booleantestable] Provide value category to deduction
[concept.booleantestable] Use tie before cross references
Shorten footer text for index of implementation-defined behavior so it doesn't run into the copyright notice footer in the final standard.
[module.import] Clarify interface dependency definition
[dcl.attr.grammar] Simplify std:: for attributes
[temp.variadic] A capture has only one relevant ellipsis
[basic.def.odr] Remove redundant "of D"
[basic.def.odr] Clarify cohorts of unnamed enum definitions
[basic.def.odr] Remove vestigial comma
[temp.func.order] Use English for deducible template parameters
[temp.over.link] Clarify type-constraint equivalence requirement
[intro.object] Avoid implying multiple sets of implicit objects
[cpp.pre] Simplify macro restrictions
[cpp.pre] Simplify global module fragment restriction
[class.compare.default] Trim pedagogical <=>/== note
[module.private.frag] Add missing inline cross reference
[temp.func.order] Clarify that optional parameters count
[diff.cpp17.lex] Harmonize example comments
[temp.inst] Make note more precisely describe when function (template) constraints are checked.
[lex.operators] Move editorial note to first usage
[allocator.requirements] Convert longtable to non-longtable.
[lex.icon] Convert table from longtable to simple table.
[nullablepointer.requirements] [hash.requirements] Make table column headings bold.
[basic.namespace] Properly mark grammar non-terminal (#3885)
[bitset.cons] Remove () per P1460R1
[tuple.cnstr] Remove (redundant) && per P1460R1
[cpp.pre] Restore lost \obeyspaces
[alg.replace] Clarify which value gets assigned depending on E.
[depr.strstreambuf] Remove extraneous parenthesis and excessive linebreaks
[over.match] Index candidate function as merely "candidate" so that "candidate, X" entries nest properly.
[diff] Reverse order of subclauses and add "in addition to those listed above" to each introductory sentence after the first.
[depr.volatile] Add examples of deprecated constructs
Update Getting Started on Debian-based Systems
[alg.clamp] Reword for clarity
[expr.const] Add article to bullet start, to parallel the other bullets.
[support.dynamic] Improve cross-referencing for dynamic memory subclauses
[check] Flag non-ASCII characters in LaTeX source (#3790)
[fs.path.modifiers] Remove \tcode around cross reference (#3866)
[range.elements.view] Add cross-reference to elements_view::iterator
[ranges] Correct outer template-heads to match primary template constraints
[ranges] Indent requires-clauses consistently
[support.types.byteops] remove redundant static_cast to unsigned char
[lex.ccon,lex.string] Remove redundant repetition of the grammar.
[depr.atomics] Use enum class memory_order
[class.mfct] consteval member functions are also inline.
[range.access] Introduce 'reified object' to simplify the descriptions.
[module.unit] module-declarations no longer contain \tcode{export}
[atomics] Consistent use of enum class memory_order
[index] Collapse various duplicated index entries.
[memory.syn] Index the pointer_safety enum class
[module.interface] Remove redundant bullet for exported declaration.
[class] [over] Redundant specification of ignoring move special members
[span.deduct] Rename template parameter 'End' to 'EndOrSize'
[contents] Some standard library functions are not defined.
[res.on.requires] Move description of 'Requires' element to Annex D
[range.take.while.sentinel,range.elements.iterator] Rename exposition-only base-t to Base.
[over.oper] Make statement about non-overloadable operators a note.
[depr.conversions] Rename snake_case template parameters to CamelCase.
[support] Renamed from [language.support].
[basic,support] Correctly use 'startup' and 'start of program'
[expr.prim.req,temp.concept] Add std:: qualification for library concepts
[algorithms.general] Add [specialized.algorithms] to summary table. (#3838)
[class.base.init] Remove italics from non-definition.
[concept.constructible] is-default-initializable is not a concept (#3834)
[basic.type.qualifier] Remove redundant wording
[util.smartptr.atomic] Apply conventional order to members of atomic smart pointers
[class.friend] Add cross-reference for the namespace of the friend
[utility.syn] Removed duplicate index entries for piecewise_construct
[utility.syn] Index in-place construction types
[iterator.concept.winc,range.iota.view] Do not index is-integer-like as a concept
[allocator.members] Replace SIZE_MAX with numeric_limits<size_t>::max()
In the index, properly sort terms starting with two underscores
[algorithms] Rename concept 'writable' to 'indirectly_writable'.
[lex.icon,lex.fcon] Rework description to avoid redundancies.
[any.synop,any.class,any.nonmembers] Format pack conventionally
[intro.object] Remove note unhelpfully pointing out that C++ has types.
[basic.life] Update out-of-date wording to mention that pseudo-destructors end the lifetime of an object.
[diff] Consistently format name of prior standards.
[tables, etc.] Replace custom column type "m" with built-in type "l".
[over.oper] Consistently separate rewritten forms out from the running text.
[std] Mark all concepts with \libconcept or \exposconcept
[over.literal] Move out of [over.oper].
[over.oper] Clarify that operator functions must declare one of the allowed operators.
[over] Use \keyword{operator} markup.
[over.oper] Clarify handling of individual operators.
[lib] Consistently format true/false in code font (#3809)
[front.insert.iterator] Correct mis-incorporation of P0896R4
[range.prim.cdata] Properly qualify ranges::cdata (#3793)
[time.format] Add/fix region-index entry for "format" (#3821)
[ptr.launder] Additional edit missed from application of LWG2859 in P2117R0 (2020-02 LWG Motion 3).
[temp.explicit] Add missing comma (#3822)
[expr.sizeof] Remove incorrect \term usage (#3819)
[atomic] Minor corrections to atomic index
[stmt.return.coroutine] Use notion of "enclosing" for "return"
[rand.util.canonical] Convert normative duplication into a note.
[basic.pre] Improve consistency in list
[rand.util.canonical] Remove self-cross-reference
[class] Remove misleading [expr.ass] reference
[expr.type] Add "cv-combined" cross-reference
[library] Replace index-entry non-code "C++" with "\Cpp{}"
[atomics.nonmembers,diff.cpp17.dcl.dcl,library,version.syn] Replace non-index-entry non-code "C++" with "\Cpp{}"
[functional.syn] Correct text in cross-reference comment
[diff.cpp17.iterators] Added compatibility note on iterator_traits
[temp.param] Change "optionally cv-qualified" to "possibly cv-qualified"
[dcl.init] Remove unused definition of a variable
[class.copy.ctor] Change "optionally cv-qualified" to cv
[dcl.init.list] Change "possibly cv-qualified" to cv
[over.match.copy] Change "reference to (possibly cv-qualified) T" to "reference to cv2 T"
[basic.types] Change "(possibly cv-qualified)  void" to cv void
[extern.types] Strike footnote listing C stdlib types
[basic.life] Add variable names for the old and new object in the definition of "transparently replaceable" and simplify the exposition a little.
[utilities] Cleanups after application of P1460R1.
[compliance] Use regular \tcode in index, not \idxcode.
[class.mem] Add explicit-specialization to member-declaration grammar.
[swappable.requirements] Add missing \pnum to example and remove stray paragraph breaks around notes.
[dcl.init] Add sub-bullets to description of class value-initialization.
[expr.prim.req] Format "requirement" as a grammar term where appropriate.
[dcl.constexpr] Add a note explaining that the result of a constexpr function can vary based on the result of is_constant_evaluated().
[basic.fundamental] Clarify that in C, padding bits may cause traps.
[except.spec] Avoid reference to undeclared identifier in example.
[expr.comma] Remove vestigial wording describing "temporary expression"s
[std] Use math rather than code font for expression placeholders.
[temp.pre] Define "templated" not "templated entity" so that we can refer to "templated classes" and "templated functions".
[std] Replace undefined term "automatic object" with "object with automatic storage duration"
[expr.const] Remove example that was made incorrect by P1937R2.
[format.string.std] Clarify that "extended grapheme clusters" is defined by UAX #29, but "estimated widths" is not.
[temp.constr.atomic] Rephrase to make the meaning of "the same *expression*" more obvious.
[util.smartptr.atomic] Add example from Matthew Butler.
[lex.key] Add a proper grammar production for 'keyword'.
[cpp.pre] Clarify that the rule for conditionally-supported-declarations resolves a parse ambiguity rather than determining program validity.
[cpp.pre] Rearrange grammar into topological order.
[cpp.pre] Reorder grammar before paragraph 1.
[cpp.pre] Avoid awkward phrasing "the last token in the sequence is the first token in the sequence [...]".
[lex.pptoken] Update English description of preprocessing-token to match the updated grammar.
[cpp.pre] Improve phrasing of restrictions around defining module/import/export as macros before encountering a module/import directive.
[version.syn] Bump value of __cpp_lib_smart_ptr_for_overwrite to 202002L to match the adoption date of the paper that introduced it.
[atomics.types.operations] Remove inaccurate introductory note concerning 'volatile'.
[ranges] Add missing @s in code blocks
P1970R2 Consistency for size() functions: Add ranges::ssize
P2116R0 Remove tuple-like protocol support from fixed-extent span
P1739R4 Avoid template bloat for safe_ranges in combination with "subrange-y" view adaptors
P2106R0 Alternative wording for GB315 and GB316
P1243R4 Rangify New Algorithms
P1973R1 Rename "_default_init" Functions, Rev1
[atomics.types.float] Remove meaningless A:: qualification.
[atomics] Remove redundant (and wrong in several places) qualification of is_always_lock_free.
P1831R1 Deprecating volatile: library
P0586R2 Safe integral comparisons
[range.prim.size] Change "make-unsigned-like" to "to-unsigned-like" as per #3311
P2091R0 Issues with range access CPOs
P1964R2 Wording for boolean-testable
[span.sub], [span.objectrep] Use direct-list-initialization in span construction to compensate for changes in P1976R2.
P1956R1 On the names of low-level bit manipulation functions
[intro.ack] Add Unicode to the list of registered trademarks we mention.
[format.string.std] Put code point ranges in numerical order and collapse two adjacent code points into a range.
P1868R2 🦄 width: clarifying units of width and precision in std::format
P1994R1 elements_view needs its own sentinel
P2102R0 Make 'implicit expression variations' more explicit
P1115R3 Improving the Return Value of Erase-Like Algorithms II: Free erase/erase if
P2101R0 'Models' subsumes 'satisfies' (Wording for US298 and US300)
P1982R0 Rename link to time_zone_link
P1981R0 Rename leap to leap_second
P1983R0 Wording for GB301, US296, US292, US291, and US283
[specialized.algorithms] Whitespace and punctuation tweaks.
[uninitialized.move,uninitialized.copy] Use \countedrange where applicable.
P1460R1 Mandating the Standard Library: Clause 20 - Utilities library
P2045R1 Missing Mandates for the standard library
LWG3398 tuple_element_t is also wrong for const subrange
LWG3397 ranges::basic_istream_view::iterator should not provide iterator_category
LWG3396 Clarify point of reference for source_location::current() (DE 169)
LWG3395 Definition for three-way comparison needs to be updated (US 152)
LWG3393 Missing/incorrect feature test macro for coroutines
LWG3390 make_move_iterator() cannot be used to construct a move_iterator for a move-only iterator
LWG3389 A move-only iterator still does not have a counted_iterator
LWG3388 view iterator types have ill-formed <=> operators
LWG3387 [range.reverse.view] reverse_view<V> unintentionally requires irange<const V>
LWG3385 common_iterator is not sufficiently constrained for non-copyable iterators
LWG3384 transform_view::sentinel has an incorrect operator-
LWG3383 [time.zone.leap.nonmembers] sys_seconds should be replaced with seconds
LWG3382 NTTP for pair and array
LWG3381 begin and data must agree for contiguous_range
LWG3380 common_type and comparison categories
LWG3379 "safe" in several library names is misleading
LWG3377 elements_view::iterator befriends a specialization of itself
LWG3375 decay in viewable_range should be remove_cvref
LWG3374 P0653 + P1006 should have made the other std::to_address overload constexpr
LWG3373 {to,from}_chars_result and format_to_n_result need the "we really mean what we say" wording
LWG3372 format_to should not try to deduce Out twice
LWG3371 visit_format_arg and make_format_args are not hidden friends
LWG3369 span's deduction-guide for built-in arrays doesn't work
LWG3367 Integer-class conversions should not throw
LWG3364 Initialize data members of ranges and their iterators
LWG3363 drop_while_view should opt-out of sized_range
LWG3362 Strike stop_source's operator!=
LWG3359 <chrono> leap second support should allow for negative leap seconds
LWG3358 [span.cons] is mistaken that to_address can throw
LWG3355 The memory algorithms should support move-only input iterators introduced by P1207
LWG3354 has_strong_structural_equality has a meaningless definition
LWG3352 strong_equality isn't a thing
LWG3348 __cpp_lib_unwrap_ref in wrong header
LWG3347 std::pair<T, U> now requires T and U to be less-than-comparable
LWG3340 Formatting functions should throw on argument/format string mismatch in [format.functions]
LWG3335 Resolve C++20 NB comments US 273 and GB 274
LWG3334 basic_osyncstream move assignment and destruction calls basic_syncbuf::emit() twice
LWG3328 Clarify that std::string is not good for UTF-8
LWG3314 Is stream insertion behavior locale dependent when Period::type is micro?
LWG3301 transform_view::iterator has incorrect iterator_category
LWG3282 subrange converting constructor should disallow derived to base conversions
LWG3270 Parsing and formatting %j with durations
LWG3269 Parse manipulators do not specify the result of the extraction from stream
LWG3262 Formatting of negative durations is not specified
LWG3260 year_month* arithmetic rejects durations convertible to years
LWG3255 span's array constructor is too strict
LWG3252 Parse locale's aware modifiers for commands are not consistent with POSIX spec
LWG3251 Are std::format alignment specifiers applied to string arguments?
LWG3250 std::format: # (alternate form) for NaN and inf
LWG3248 std::format #b, #B, #o, #x, and #X presentation types misformat negative numbers
LWG3247 ranges::iter_move should perform ADL-only lookup of iter_move
LWG3243 std::format and negative zeroes
LWG3242 std::format: missing rules for arg-id in width and precision
LWG3238 Insufficiently-defined behavior of std::function deduction guides
LWG3237 LWG 3038 and 3190 have inconsistent PRs
LWG3226 zoned_time constructor from string_view should accept zoned_time<Duration2, TimeZonePtr2>
LWG3201 lerp should be marked as noexcept
LWG3200 midpoint should not constrain T is complete
LWG3175 The CommonReference requirement of concept SwappableWith is not satisfied in the example
LWG3150 UniformRandomBitGenerator should validate min and max
LWG3141 CopyConstructible doesn't preserve source values
LWG3050 Conversion specification problem in chrono::duration constructor
LWG3018 shared_ptr of function type
LWG2859 Definition of reachable in [ptr.launder] misses pointer arithmetic from pointer-interconvertible object
LWG1203 More useful rvalue stream insertion
[allocator.uses.construction] Give a name to generic lambda type parameter to allow idiomatic use of std::forward.
LWG3360 three_way_comparable_with is inconsistent with similar concepts
LWG3356 __cpp_lib_nothrow_convertible should be __cpp_lib_is_nothrow_convertible
LWG3351 ranges::enable_safe_range should not be constrained
LWG3350 Simplify return type of lexicographical_compare_three_way
LWG3349 Missing __cpp_lib_constexpr_complex for P0415R1
LWG3346 pair and tuple copy and move constructor have backwards specification
LWG3338 Rename default_constructible to default_initializable
LWG3332 Issue in [time.format]
LWG3331 Define totally_ordered/_with in terms of partially-ordered-with
LWG3330 Include <compare> from most library headers
LWG3329 totally_ordered_with both directly and indirectly requires common_reference_with
LWG3327 Format alignment specifiers vs. text direction
LWG3326 enable_view has false positives
LWG3325 Constrain return type of transformation function for transform_view
LWG3324 Special-case std::strong/weak/partial_order for pointers
LWG3323 has-tuple-element helper concept needs convertible_to
LWG3321 uninitialized_construct_using_allocator should use construct_at
LWG3320 span::cbegin/cend methods produce different results than std::[ranges::]cbegin/cend
LWG3319 Properly reference specification of IANA time zone database
LWG3318 Clarify whether clocks can represent time before their epoch
LWG3317 Incorrect operator<< for floating-point durations
LWG3316 Correctly define epoch for utc_clock / utc_timepoint
LWG3315 Correct Allocator Default Behavior
LWG3313 join_view::iterator::operator-- is incorrectly constrained
LWG3310 Replace SIZE_MAX with numeric_limits<size_t>::max()
LWG3307 std::allocator<void>().allocate(n)
LWG3304 Allocate functions of std::polymorphic_allocator should require [[nodiscard]]
LWG3303 Bad "constexpr" marker for destroy/destroy_n
LWG3302 Range adaptor objects keys and values are unspecified
LWG3300 Non-array ssize overload is underconstrained
LWG3299 Pointers don't need customized iterator behavior
LWG3296 Inconsistent default argument for basic_regex<>::assign
LWG3294 zoned_time deduction guides misinterprets string/char*
LWG3292 iota_view is under-constrained
LWG3291 iota_view::iterator has the wrong iterator_category
LWG3286 ranges::size is not required to be valid after a call to ranges::begin on an input range
LWG3285 The type of a customization point object shall satisfy semiregular
LWG3284 random_access_iterator semantic constraints accidentally promote difference type using unary negate
LWG3280 View converting constructors can cause constraint recursion and are unneeded
LWG3264 sized_range and ranges::size redundantly use disable_sized_range
LWG3254 Strike stop_token's operator!=
LWG3233 Broken requirements for shared_ptr converting constructors
LWG3194 ConvertibleTo prose does not match code
P1908R1 Reserving attribute namespaces for future use
P2085R0 Consistent defaulted comparisons
P2002R1 Defaulted comparison specification cleanups
P2095R0 Resolve lambda init-capture pack grammar (CWG2378)
[basic.def.odr] Clarify that translation units lacking a private-module-fragment are definition domains.
P1815R2 Translation-unit-local entities
P2115R0 US069: Merging of multiple definitions for unnamed unscoped enumerations
[temp.func.order] Add bullets to clarify long sentence.
P2113R0 Proposed resolution for 2019 comment CA 112
P2109R0 Disallow "export import foo" outside of module interface
CWG2447 Unintended description of abbreviated function templates
CWG2446 Questionable type-dependency of concept-ids
CWG2445 Partial ordering with rewritten candidates
P2092R0 Disambiguating nested requirements
P2107R0 Core Issue 2436: US064 Copy semantics of coroutine parameters
P2104R0 Disallow changing concept values
P1957R2 Converting from T* to bool should be considered narrowing
P0593R6 Implicit creation of objects for low-level object manipulation
P1857R3 Modules Dependency Discovery
P1779R3 ABI isolation for member functions
NB US 115 (C++20 CD): Hidden non-template friends need a requires-clause
NB CA 107 (C++20 CD): Parameter mapping for non-dependent entities NB US 117 (C++20 CD): Comparing types and type-constraints
NB CA 104 (C++20 CD): Clarify declaration matching and partial ordering requiring substitution into constraints
NB US 041 (C++20 CD): Enforce correspondence of containing objects for pointer values / aliasing
NB US 033 (C++20 CD): Allow "import" inside linkage-specifications
NB US 028 (C++20 CD): Define grammar for "punctuator"
[travis] Reduce log spam by putting latexmk into silent mode for the first pass.
Make check for out-of-date figures actually work, and move it to check.sh.
Remove legacy build methods, leaving only latexmk.
[dcl.attr] Introduce 'Recommended practice' paragraphs.
[cmp, comparisons] Move description of compare_three_way.
[conv.rank] Change "size" to "width" in conversion rank relation (#3675)
[class.access.base] Add missing formatting to access specifier
Update value of __cplusplus to 202002L
[depr.c.headers] Rename heading to just "C headers".
[temp.constr.normal] Confusing identifier used in explanation (#3652)
[class.conv.fct] Add \tcode to void (#3654)
[temp.constr.normal] Remove extraneous parentheses on concept use (#3651)
[ranges.syn] to-unsigned-like operates on expressions, not objects
[ranges] make-unsigned-like-t is an exposition-only alias template
[ranges] Rename make-unsigned-like to to-unsigned-like
[lib] Do not use "for some" to mean "for an arbitrary" (#3146)
[expr.prim.req.nested] Add missing semicolon to example
[span.overview] Correct typo (#3633)
Update configuration for building drafts after N4849.
Update configuration for building new working draft N4849, and add corresponding Editors' Report N4850.
[std] Consistently use 'overload set'.
[std] Enforce comment alignment in 'codeblocktu' environments.
[func.wrap.badcall] Add missing \itemdecl for what() (#3629)
[algorithms] Split list items conventionally.
[temp.spec] Convert description of "specialization" to a proper definition
[cpp.replace] Distribute examples from [cpp.scope]
[ranges] Integrate adaptor subclauses into overviews.
[std] Harmonize comments indicating errors.
[defns.signature] functions never have trailing requires-clauses
[class.this] Cleanup verbose and redundant exposition.
[class.this] Member functions are not cv-qualified.
[class.static.data] Cleanup description for local/unnamed classes.
[index] Harmonize indexing for Cpp17 concepts.
[temp.type,temp.over.link] Define and use 'same template-id'.
[expr.compound] Use sequencing on expressions
[expr.call] Clarify result of function call vs. return operand.
[stringbuf] Use phrases from [bitmask.types].
[over.built] Convert to singular.
[over.built] Only unscoped enumeration types are subject to integral promotions
[over.built] Avoid confusing term 'promoted arithmetic type'.
[iterator.requirements.general] Consistently index iterator terms.
[iterator.concept.sizedsentinel] Improve description
[iterator.requirements.general,range.counted] Rework notation for counted ranges.
[format.arg] Move 'otherwise' to the start of the bullets.
[locale.codecvt] Do not claim that 'Unicode' is a character encoding.
[over.oper] Clarify that operator= cannot be overloaded for enumerations.
[cmath.syn] Turn a consequence into a note.
[range.elements.iterator] Add missing \expos comment (#3609)
[range.istream, range.take.while.sentinel] Harmonize default member initializer (#3605)
[range.take.while.sentinel] Add missing template parameter (#3604)
[range.subrange] Align comments. (#3602)
[expr.pre] Change note to use grammatical English (#3601)
[README] Basic getting started for Windows (#3600)
[range.common.view] Declare size after begin/end like in the other views (#3598)
[styles] Allow 'listings' package v1.8c (#3592)
[ranges] Do not indent \begin/end{codeblock}. (#3572)
[lib] Consistently use ios_base::failbit and ios_base::badbit.
[basic.atomics] Use math mode for memory model placeholders.
[over.match.funcs] Correct comment in example.
[ranges] Missed markings for exposition-only names. (#3562)
[ranges] Mark exposition-only names as kebab-case.
[string.view.synop,span.syn,span.cons] enable_/safe_range are defined in std::ranges (#3551)
[ptr.launder] Remove space before ptr-operator. (#3537)
[alg.partitions] Add missing \pnum. (#3549)
[lib] Put \constraints on a line of its own. (#3548)
[std] Harmonize indexing for list items. (#3539)
[span.cons] Do not suggest that to_address could throw. (#3546)
[span.cons] add missing \pnum
[functional.syn] Move variable templates next to traits. (#3536)
[time.syn] Move treat_as_floating_point_v next to treat_as_floating_point. (#3533)
[class.derived,class.member.lookup] Reference figures in running text. (#3526)
[iterator.concept.readable] Use ranges::iter_move in indirectly-readable-impl (#3532)
[temp.constr.contr] Add index entry for 'satisfy'. (#3527)
[support.srcloc.class] Highlight unspecified properties (#3309)
[basic.life] Rename "Object and reference lifetime" to simply "Lifetime"
Update configuration for building working drafts after N4842.
Update configuration for building new working draft N4842, and finalize corresponding Editors' Report N4843.
[basic.def.odr] Split long-winded bulleted sentence.
[over.match.list] Acknowledge [over.ics.list] and clarify text.
[temp.param] Move grammar non-terminal 'type-constraint' here
Further updates of Editors' Report.
[ranges.syn, range.adaptors] Name view template parameter V for consistency (#3514)
[std] Switch grammar to \sffamily \itshape
[time.duration.cast,time.point.cast] Rename subclause to 'Conversions'.
[lib] Replace "shall not X" with "does not X" when it describes library behavior.
[dcl.type.elab] Clarify that there is no expected correlation between using 'class' or 'struct' in a class definition and using the same keyword in an elaborated-type-specifier.
[std] Remove 'shall' from notes.
[numerics,input.output] Consistently use ios_base::failure.
Update Editors' Report for post-Belfast working draft.
[basic.life] Use idiomatic wording.
[iterators] Improve indexing of defined terms.
[range.istream] Relocate under [range.factories]
[defns.access] Clarify definition of "access".
[depr.relops] Move index entry here from [utility.syn]
[concept.regularinvocable] move iref to a better place
[time.cal.wdidx.nonmembers] Remove extra "
[temp.concept] Move grammar non-terminal concept-definition here.
[temp.deduct.guide] Move into [temp.class].
[any.cons,any.assign] Remove redundant postconndition for moves.
[class.pre] [class.union] Clean up definition of 'union'.
[dcl.type.elab] Make cross-references for "class" and "union" more precise.
[dcl.constexpr] Make cross-reference for "encloses" more precise.
[dcl.fct.def.coroutine] Use 'encloses' instead of imprecise 'contains'.
[lib] Remove 'Constructs an object of type ...' phrases
[lib] Replace 'this subclause' with numbered subclause references.
[temp.local] Change "template-parameter" to "name of a template parameter"
[complex.ops] Remove empty paragraph.
[dcl.decl] Avoid double negative.
[atomics.types.operations] Remove uses of deprecated ATOMIC_VAR_INIT from examples.
[thread.req.timing] Remove "note" markers around note.
[thread] Add missing _v's to uses of type traits in Mandates elements.
P1622R3 Mandating the Standard Library: Clause 32 - Thread support library
P1723R2 Mandating the Standard Library: Clause 31 - Atomics library
P1722R2 Mandating the Standard Library: Clause 30 - Regular Expression library
P1721R2 Mandating the Standard Library: Clause 29 - Input/output library
P1720R2 Mandating the Standard Library: Clause 28 - Localization library
P1686R2 Mandating the Standard Library: Clause 27 - Time library
[rand.util.seedseq] Add cross-reference for "writable".
P1719R2 Mandating the Standard Library: Clause 26 - Numerics library
P1718R2 Mandating the Standard Library: Clause 25 - Algorithms library
P1645R1 constexpr for <numeric> algorithms
[numeric.ops] Reformat itemdecl declarations to match the <numeric> synopsis.
[format.string.std] 'decimal radix separator' -> 'radix separator'.
[format.string.std] Provide a definition for the locale-specific form.
[format.string.std] Use bullets to list the effects of the locale-specific form on each arithmetic type.
P1892R1 Extended locale-specific presentation specifiers for std::format
P1959R0 Remove std::weak_equality and std::strong_equality
[atomics.types.generic] Added reference to [atomics.types.operations] in synopsis
[version.syn] Revert __cpp_lib_chrono back to 201907L as directed by @brevzin in #3476.
P1902R1 Missing feature-test macros 2017-2019
P1960R0 NB Comment Changes Reviewed by SG1
P1865R1 Add max() to latch and barrier
[range.range] [span.cons] Update remaining uses of removed exposition-only concepts range-impl and forwarding-range with range and safe_range as appropriate.
P1870R1 forwarding-range<T> is too subtle
P1862R1 Ranges adaptors for non-copyable iterators
[span.cons] Do not attempt to initialize size_ with an iterator.
[span.cons] Rephrase constraint on input element type to avoid overfull \hbox.
P1394R4 Range constructor for std::span
[string.view] Shorten stable name [string.view.deduction] -> [string.view.deduct]
P1391R4 Range constructor for std::string_view
[range.view] Make the requirement for constant-time move operations and destruction explicit in the description of when a type models view.
[range.adaptors] Extend the changes from P1456R1 to also apply to take_while_view, drop_view, drop_while_view, and elements_view.
P1456R1 Move-only views
P1871R1 Concept traits should be named after concepts
P1878R1 Constraining Readable Types
[range.cmp] Avoid introducing unused 'P'
P1961R0 Harmonizing the definitions of total order for pointers
P1869R1 Rename condition_variable_any interruptible wait methods
[concept.equivalencerelation] Rename to [concept.equiv].
P1716R3 ranges compare algorithm are over-constrained
P1965R0 Blanket Wording for Specifying "Hidden Friends"
P1872R0 span should have size_type, not index_type
P1690R1 Refinement Proposal for P0919 Heterogeneous lookup for unordered containers
P1855R0 Make <compare> freestanding
LWG3277 Pre-increment on prvalues is not a requirement of weakly_incrementable
LWG3276 Class split_view::outer_iterator::value_type should inherit from view_interface
LWG3274 Missing feature test macro for <span>
LWG3273 Specify weekday_indexed to range of [0, 7]
LWG3272 %I%p should parse/format duration since midnight
LWG3266 to_chars(bool) should be deleted
LWG3259 The definition of constexpr iterators should be adjusted
LWG3257 Missing feature testing macro update from P0858
LWG3256 Feature testing macro for constexpr algorithms
LWG3253 basic_syncbuf::basic_syncbuf() should not be explicit
LWG3246 What are the constraints on the template parameter of basic_format_arg?
LWG3245 Unnecessary restriction on '%p' parse specifier
LWG3244 Constraints for Source in [fs.path.req] insufficiently constrainty
LWG3241 chrono-spec grammar ambiguity in §[time.format]
LWG3235 parse manipulator without abbreviation is not callable
LWG3232 Inconsistency in zoned_time deduction guides
LWG3231 year_month_day_last::day specification does not cover !ok() values
LWG3230 Format specifier %y/%Y is missing locale alternative versions
LWG3225 zoned_time converting constructor shall not be noexcept
LWG3224 zoned_time constructor from TimeZonePtr does not specify initialization of tp_
LWG3222 P0574R1 introduced preconditions on non-existent parameters
LWG3221 Result of year_month arithmetic with months is ambiguous
LWG3218 Modifier for %d parse flag does not match POSIX and format specification
LWG3190 std::allocator::allocate sometimes returns too little storage
LWG3149 DefaultConstructible should require default initialization
LWG3103 Errors in taking subview of span should be ill-formed where possible
LWG3070 path::lexically_relative causes surprising results if a filename can also be a root-name
P1980R0 CA096: Declaration matching for non-dependent requires-clauses
P1979R0 Resolution to US086
[cpp.predefined] Bump value of __cpp_nontype_template_args to 201911L for P1907R1, and remove __cpp_nontype_template_parameter_class to indicate that the feature added by P0732R2 is no longer present in that form.
[temp.param] [temp.arg.nontype] Update examples and redundant duplicated wording to match P1907R1.
P1907R1 Inconsistencies with non-type template parameters
P1946R0 Allow defaulting comparisons by value
P1874R1 Dynamic Initialization Order of Non-Local Variables in Modules
[over.over] Extract the non-template function case from the description of the target type and rearrange so that it better parallels the function template specialization case.
P1972R0 US105 Check satisfaction of constraints for non-templates when forming pointer to function
NB CA 378 (C++20 CD): Remove constrained non-template functions
NB US 367 (C++20 CD): Instead of header inclusion, also permit header unit import
NB US 132 (C++20 CD): Macros from the command-line not exported by header units
[temp.constr.op] Stop talking about the programmer's intent being unclear in a note; instead merely clarify the language's response to the various options available to the programmer.
[temp.constr.op] Reword comment in example added for US111 as suggested by Casey
NB US 111 (C++20 CD): Constraint normalization and negation
NB US 087 (C++20 CD): Header unit imports cannot be cyclic, either
NB GB 079 (C++20 CD): Add example for private-module-fragment
NB US 065 (C++20 CD): Apply Coroutines TS issue 24 from P0664R8
NB US 053 (C++20 CD): Mandate the return type for return_void and return_value to be void
NB US 052 (C++20 CD): Non-executed return statements in coroutines
NB CZ 044 (C++20 CD): Allow constexpr construct_at/destroy_at for automatic storage duration
NB CA 038 (C++20 CD): Consider trailing requires-clauses for function identity
NB US 019, US 020 (C++20 CD): Update ISO 9899 document reference from C11 to C17
NB RU 007, US 042 (C++20 CD): [basic.life].8.3 Relax pointer value/aliasing rules
CWG2442 Incorrect requirement for default arguments
CWG2437 Conversion of std::strong_ordering in a defaulted operator<=>
CWG2433 Variable templates in the ODR
CWG2432 Return types for defaulted <=>
CWG2431 Full-expressions and temporaries bound to references
CWG2430 Completeness of return and parameter types of member functions
CWG2429 Initialization of thread_local variables referenced by lambdas
CWG2427 Deprecation of volatile operands and unevaluated contexts
CWG2426 Reference to destructor that cannot be invoked
CWG2424 constexpr initialization requirements for variant members
CWG2422 Incorrect grammar for deduction-guide
[basic.compound] [numeric.ops.midpoint] Unify terminology used to identify array elements.
CWG2419 Loss of generality treating pointers to objects as one-element arrays
CWG2399 Unclear referent of “expression” in assignment-expression
CWG2374 Overly permissive specification of enum direct-list-initialization
CWG2347 Passing short scoped enumerations to ellipsis
CWG2282 Consistency with mismatched aligned/non-over-aligned allocation/deallocation functions
CWG2126 Lifetime-extended temporaries in constant expressions
CWG1621 Member initializers in anonymous unions
[dcl.inline] Move note that 'inline' doesn't affect linkage somewhere more suitable.
[temp.expl.spec] There is no such thing as a "consteval property". Rephrase to use the correct term "immediate function".
CWG2441 Inline function parameters
CWG2416 Explicit specializations vs constexpr and consteval
CWG2382 Array allocation overhead for non-allocating placement new
CWG2280 Matching a usual deallocation function with placement new
[range.filter.overview] Avoid double-negative. (#3355)
[iterator.concept.writable] Correct repeated word. (#3369)
[expr.sizeof] Replace inappropriate \term{n} with $n$. (#3435)
[structure.specifications] Rename remaining "Expects"/"Ensures" to "Preconditions"/"Postconditions"
Remove hyperlinks to github from Editors' Report to avoid compatibility issue with intended path for #3318.
Update Editors' Report for editorial issues handled this week.
[util.smartpr.atomic] Moves subclause from "Utilities" to "Atomics".
[macros, structure.specifications] Rename "Expects:"/"Ensures:" to "Preconditions:"/"Postconditions:"
[basic.lookup.argdep] Inline the definition of 'interface'.
[specialized.destroy] Add whitespace around binary operator (#3382)
[time.cal.day.nonmembers] Add missing closing brace to p6 (operator-)
[thread.jthread.class] close namespace in synopsis
[basic.types] Replace macro constant with constexpr variable
Updates to draft Editors' Report for NB comments:
[lex.key] Don't use a colon to introduce a floating table.
[class.copy.assign] Remove semicolon in 'of the form' phrase.
[range.join.iterator] Clarify if ... otherwise ladder.
Typo fixes in draft Editors' Report.
Update draft Editors' Report with current NB comment dispositions.
Add skeleton Editors' Report.
[range.join.iterator] Remove spurious paragraph number. (#3358)
[intro.compliance] The standard library also offers header units.
[namespace.future,diff.cpp14.library] Properly refer to grammar 'digit'
[defns.block.stmt] Add definition of block as a compound statement.
[temp.constr.decl] Missing case when constraints are associated with a declaration.
[expr.prim.id.unqual] Excise redundant special case for the type
[atomics.ref.int,atomics.types.int] Clarify notes on atomic/_ref<bool> specializations.
[thread.jthread.static] Repeat '[[nodiscard]]' from synopsis. (#3326)
[algorithms.parallel.defns] Rename to 'Preamble' (#3350)
[module.global,cpp.glob.frag] Rename labels to ...global.frag. (#3351)
[dcl.list.init] Make spacing around & declarator operator locally consistent. (#3353)
[ios.members.static] Add "static" to declaration
[diff.cpp17.lex] Add cross-references for 'requires' keyword.
[syncstream.syn] Add default template arguments
[syncstream.syncbuf.overview]  Add default template arguments for 'basic_syncbuf'.
[syncstream.osyncstream.overview] Add default template arguments for 'basic_osyncstream'.
[time.cal.month.members] Remove nested-name-specifier from declaration.
[time.cal.month.members] Remove nested-name-specifier from declaration.
[time.cal.month.members] Remove nested-name-specifier from declaration.
[iterator.requirements.general] Define 'reachable from' to avoid confusion
[temp.param] Strike redundant normative sentence.
[module.reach] Clearly separate translation units in example.
[basic.lookup.argdep] Add missing namespace qualification in example.
[intro.structure] 'Note n to entry' is also a note.
[multimap.modifiers] "Mandates" should be "Constraints" (#3322)
[stmt.dcl] Vacuous initialization is defined in [basic.life] (#3314)
[class.access] Allocation order of data members is described in [expr.rel] (#3316)
[basic.scope.class] Reinstate a qualification that was lost in 0e26279b88c3b8b0a09babdeec8418d383f07419.
[cmp.alg] Correct weak_ordering::equal to the intended weak_ordering::equivalent.
[time.zone.db.tzdb] Add missing '\pnum'. (#3305)
[time.cal.ymd.overview] Typo fix: comma at end of sentence. (#3304)
[class.dtor] Remove incorrect note about trivial vs. constexpr. (#3249)
[readable.traits] Add template argument list to constrained specialization (#3294)
[alg.min.max] Correct errors in paragraph 22 (#3292)
[set.symmetric.difference] Strike duplicated sentence from paragraph 2 (#3293)
[over.binary] Define 'comparison operator function' and related terms
[lib] Do not use macro \libconcept in headings.
[basic.lval] Adjust cross-reference in the note. (#3288)
Update configuration for building drafts after N4835.
Update configuration to build new working draft N4835.
[expr.const] drop unused declaration from example
[intro.defs] Hyphenate parameter-type-list.
[ranges] Add index entries.
[rand.predef] Add digit separators to large numbers.
[version.syn] Add synopsis for <version> header.
Add description of index improvements to Editor's Report
Add draft D4836 (Editor's Report).
[std] Consistently use 'immediately-declared constraint'.
[over.match.funcs] Remove bullet for single-item bulleted list.
[locale.numpunct,locale.moneypunct] Canonicalize local grammar presentation.
[ranges] Harmonize index entries.
[lib] Use macro \notdef for undefined entities. (#3272)
[class.mem] Avoid 'shall have been defined'
[utilities] Index _t typedefs and _v variable templates.
[travis] improve messages for "overfull \hbox" and "Reference ... undefined"
[numeric.ops.overview] Reflow declarations in header synopsis.
[std] Align all comments to a multiple of four
[support.srcloc] Canonicalize presentation.
[basic.def.odr] Replace misleading 'for which' with 'where'.
[atomics.ref.ops] Rename stable label from .operations
[expr.const] Excise 'initialization full-expression'
[atomics] Reorder members of atomic, atomic_ref, atomic_flag
[expr.typeid] Add note highlighting prohibition of bad function types.
[class.copy.elision] Update example to match resolution of CWG 2278
[std] Introduce 'Preamble' sections to avoid hanging paragraphs.
[temp.alias] Change type-id to defining-type-id in the running text
Avoid confusion between lookup and overall overload resolution
[re.regex] Use consistent names for function parameters
[dcl.spec.auto] Add example to show variable redeclaration with 'auto'.
[thread.latch] Subordinate [latch.syn] and [thread.latch.class]
[class.dtor] Group declaration properties vs. behavior.
[lex.pptoken] Mention import keywords in the category list.
[temp.param] Remove unused class template from example.
[re.grammar] Improve grammar typesetting.
[diff.library] Consistency for wide char types
[temp.names] Remove misleading note.
[std] Use consistent margins for codeblocks.
[std] Rename 'floating literal' to 'floating-point literal'.
[std] Hyphenate floating-point and avoid 'floating'.
[thread.jthread.class] Rephrase introductory sentence.
[tuple] Make descriptions of non-members siblings of [tuple.tuple].
[std] Harmonize cross-references for explicit casts.
[intro.multithread,util.smartptr,atomics] Group index entries for 'atomic'.
[move.sent.ops] Add missing description of move_sentinel::base
[rand] Use 1.0, not 1, as a literal of floating-point type
[concept.boolean] Avoid undefined phrase 'Boolean context'. (#3269)
[lib] Remove parameter names from deleted special member functions. (#3259)
[travis] Expand automatic LaTeX source checking for \pnum etc. (#3256)
[re.regex] Rename template parameters for "assign". (#3198)
[meta] Harmonize ordering in descriptions. (#3166)
[everywhere] Remove inappropriate paragraph breaks. (#3253)
[macros,range.counted] Introduce and use \libconceptx (#3252)
[lib] Add index of concept names. (#3159)
[std] Improve indexing of standard library headers. (#3239)
[lib] Use \indexlibrarymember consistently.
[lib] Introduce \indexlibraryctor and \indexlibrarydtor
[zombie.names] Introduce \indexlibraryzombie
[lib] Introduce \indexlibraryglobal
[macros] Add more library indexing macros.
[index] Create first-letter subheadings for long indices.
[std] Revert additional spacing after note.
[std] Remove stray % at end of note/example.
[std] Move \begin/end{note} to a line of their own.
[std] Remove empty line after \begin{example}
[std] Start a new line for \begin{example}
[std] Move library element introducers to a line of their own.
[std] Make sure \pnum is on a line of its own.
[ostream.iterator] Correct typo (#3240)
[dcl.constexpr] Remove whitespace at start of paragraph.
[temp.param] Define X in the example. (#3226)
[basic.stc.dynamic.safety] Avoid undefined term 'dynamic object'. (#3225)
[diff] Move markers to lines of their own. (#3221)
[diff.cpp17] Add 'constinit' to one more list of new keywords in C++20.
[span.tuple] Simplify definition of get(span<T, I>) (#3210)
[range.range] replace hyphens with dashes (#3206)
[basic.def] Move rule on template definition here
[lex.key,diff.header.iso646.h] Consistent tokens order (#3190)
[func.wrap.func,rand] Index 'result_type'. (#3154)
[tuple.elem] Canonicalize comments in example. (#3161)
[std] Use consistent punctuation to terminate non-final list items. (#3175)
[std] Add/fix periods at end of sentences. (#3177)
[format.context] Use \indextext, not \index. (#3179)
[atomics.ref.operations] Change Expects to Effects for atomic_ref::notify_{one,all} (#3180)
[thread.jthread.class] fix typos (#3183)
Update configuration for building drafts after N4830.
Update configuration to build new working draft N4830.
[class.dtor] "The defaulted destructor" -> "A defaulted destructor", since the destructor for a class might not be defaulted.
[over.match.class.deduct] Simplify example
[over.match.class.deduct] Use "deduces"
[class.spaceship] Remove vacuous conversion
[expr.new] Use typical \iref
[basic.scope.pdecl] Add lost index %s
[over.match.class.deduct] Supply missing word
[expr.ass] Improve preposition
[basic.def.odr] Clean up new bullets
Use \libconcept
[iterator.concept.winc], [thread.sema.cnt] Use new \expos command
[dcl.attr.nodiscard] Make the constructor case better parallel the function case by duplicating the implied "through a reachable declaration" wording.
[expr.ass] Remove mention of class types.
[conv.qual] Avoid bouncing back and forth between subscripts and regular scripts for T1 and T2, and add missing definition for cv^j_i and P^j_i.
[dcl.typedef] Split paragraph on typedef name for linkage into two parts (how you know when you have one, and the restrictions on types that have one).
[over.match.class.deduct] Clarify that an incomplete class type is never treated as being an aggregate.
[dcl.fct.def.default] Clarify that the rule concerning how the type of a defaulted function can differ from the type of an implicitly-declared function only applies to the functions that are implicitly declared.
[ostream] Add back the comments that P1423R3 requested, but now as a note.
[diff.cpp17.class] Remove redundant cross-reference.
[over.match.class.deduct] Replace "therefrom" with a more common construction, and more directly talk about the class template for which we are ultimately performing deduction.
[string.erasure] Following the guidance given by P0980R1, and after consultation with LWG chair, mark the std::erase and std::erase_if overloads for std::basic_string as constexpr in addition to those explicitly called out by the wording paper.
[atomics.syn], [atomics.flag] Clean up presentation around ATOMIC_FLAG_INIT.
[thread.jthread.cons] Revert editorial change from "if INVOKE(...) is a valid expression" to checking is_invocable_v.
[atomic] Consistently order atomic<...> and atomic_ref<...> definitions: keep compare_exchange and fetch_* operations together because the latter are a particular form of compare_exchange operation.
[thread.latch] Remove italics from non-definition of "latch".
[thread.sema.cnt] "Class" -> "Class template" in description of a class template.
[atomic] Remove invalid trailing 'const' from non-member function atomic_flag_notify_all.
[numbers.syn] egmma -> egamma
[iterator.concept.sizedsentinel] Avoid potential ambiguity between inclusive and exclusive "or" by using "and/or".
[time.cal.day.nonmembers] 'onstexpr' -> 'constexpr'
[type.index.members] Missing edit from P1614R2: Remove description of type_index operator!=.
[cmp.object] Add missing template-head to function description.
[tab:format.type.float] Add "equivalent to" to remaining calls to to_chars for consistency.
[format.string.general] indexes -> indices
[range.drop.while.overview] Add missing space in example.
[meta.trans.other] Use hyphens, not underscores, for meta-functions.
[res.on.functions] Properly capitalize full-sentence bullets.
[cpp.module] fix sample code comment
[module.global] fix sample code comment
[basic.life] Lifetime of class objects is treated uniformly
[complex.literals] Remove bogus index entry
[basic.lookup.argdep]/5 add export to apply()
Delete irrelevant copy-paste from previous section
[is.sorted] Add missing "return" and semi-colon
[tuple] Use "objects" instead of "variables"
[time.clock,bit.cast] Replace template<typename...> with template<class...>
[diff.cpp17.class] 'injected-class-name' is not a grammar non-terminal.
[diff.cpp17.class] Add example where P0527R1 silently changes semantics.
[conv.qual,expr.static.cast] Harmonize notes on cv-qualified function types.
[range.iota.view] Add missing @
[time.clock.utc.nonmembers] fix \end{itemdescr}
[cmp.alg] Use regular apostrophes instead of fancy Unicode quotation marks.
[char.traits.specializations.char8.t] Align member typedefs.
[diff.cpp17.library], [tab:headers.cpp] Add missing <coroutine> entry to the list of headers, and add various missing entries to the list of new-in-C++20 headers.
[concepts] Renamed concepts' section names to remove trailing prepositions for consistency.
[alg.is.permutation] Add parameters to \libconcept{sized_sentinel_for} as suggested in PR #3099.
[utilities] Use "\expos" instead of "exposition only" in declarations.
[everywhere] Rename exposition-only concept 'same-impl' to 'same-as-impl'.
[everywhere] Rename concept 'ThreeWayComparableWith' to 'three_way_comparable_with'.
[everywhere] Rename concept 'ThreeWayComparable' to 'three_way_comparable'.
[everywhere] Rename exposition-only concept 'Advanceable' to 'advanceable'.
[everywhere] Rename exposition-only concept 'Decrementable' to 'decrementable'.
[everywhere] Rename concept 'ForwardRange' to 'forward_range'.
[everywhere] Rename concept 'FloatingPoint' to 'floating_point'.
[expr.new], [uninitialized.copy], [uninitialized_move], [memory.syn] Rename non-normative names that collide with new concept names.
[everywhere] Rename concept 'UniformRandomBitGenerator' to 'uniform_random_bit_generator'.
[everywhere] Rename concept 'ViewableRange' to 'viewable_range'.
[everywhere] Rename concept 'CommonRange' to 'common_range'.
[everywhere] Rename concept 'ContiguousRange' to 'contiguous_range'.
[everywhere] Rename concept 'RandomAccessRange' to 'random_access_range'.
[everywhere] Rename concept 'BidirectionalRange' to 'bidirectional_range'.
[everywhere] Rename concept 'InputRange' to 'input_range'.
[everywhere] Rename concept 'OutputRange' to 'output_range'.
[everywhere] Rename concept 'View' to 'view'.
[everywhere] Rename concept 'SizedRange' to 'sized_range'.
[everywhere] Rename concept 'Range' to 'range'.
[everywhere] Rename concept 'Sortable' to 'sortable'.
[everywhere] Rename concept 'Permutable' to 'permutable'.
[everywhere] Rename concept 'IndirectlyComparable' to 'indirectly_comparable'.
[everywhere] Rename concept 'IndirectlySwappable' to 'indirectly_swappable'.
[everywhere] Rename concept 'IndirectlyCopyableStorable' to 'indirectly_copyable_storable'.
[everywhere] Rename concept 'IndirectlyCopyable' to 'indirectly_copyable'.
[everywhere] Rename concept 'IndirectlyMovableStorable' to 'indirectly_movable_storable'.
[everywhere] Rename concept 'IndirectlyMovable' to 'indirectly_movable'.
[everywhere] Rename concept 'IndirectStrictWeakOrder' to 'indirect_strict_weak_order'.
[everywhere] Rename concept 'IndirectRelation' to 'indirect_relation'.
[everywhere] Rename concept 'IndirectUnaryPredicate' to 'indirect_unary_predicate'.
[everywhere] Rename concept 'IndirectRegularUnaryInvocable' to 'indirectly_regular_unary_invocable'.
[everywhere] Rename concept 'IndirectUnaryInvocable' to 'indirectly_unary_invocable'.
[everywhere] Rename concept 'ContiguousIterator' to 'contiguous_iterator'.
[everywhere] Rename concept 'RandomAccessIterator' to 'random_access_iterator'.
[everywhere] Rename concept 'BidirectionalIterator' to 'bidirectional_iterator'.
[everywhere] Rename concept 'ForwardIterator' to 'forward_iterator'.
[everywhere] Rename concept 'OutputIterator' to 'output_iterator'.
[everywhere] Rename concept 'InputIterator' to 'input_iterator'.
[everywhere] Rename concept 'SizedSentinel' to 'sized_sentinel_for'.
[everywhere] Rename concept 'Sentinel' to 'sentinel_for'.
[everywhere] Rename concept 'Iterator' to 'input_or_output_iterator'.
[everywhere] Rename concept 'Incrementable' to 'incrementable'.
[everywhere] Rename concept 'WeaklyIncrementable' to 'weakly_incrementable'.
[everywhere] Rename concept 'Writable' to 'writable'.
[everywhere] Rename concept 'Readable' to 'readable'.
[everywhere] Rename concept 'StrictWeakOrder' to 'strict_weak_order'.
[everywhere] Rename concept 'Relation' to 'relation'.
[everywhere] Rename concept 'Predicate' to 'predicate'.
[everywhere] Rename concept 'RegularInvocable' to 'regular_invocable'.
[everywhere] Rename concept 'Invocable' to 'invocable'.
[everywhere] Rename concept 'Regular' to 'regular'.
[everywhere] Rename concept 'Semiregular' to 'semiregular'.
[everywhere] Rename concept 'Copyable' to 'copyable'.
[everywhere] Rename concept 'Movable' to 'movable'.
[everywhere] Rename concept 'StrictTotallyOrderedWith' to 'totally_ordered_with'.
[everywhere] Rename concept 'StrictTotallyOrdered' to 'totally_ordered'.
[everywhere] Rename concept 'EqualityComparableWith' to 'equality_comparable_with'.
[everywhere] Rename concept 'EqualityComparable' to 'equality_comparable'.
[everywhere] Rename concept 'Boolean' to 'boolean'.
[everywhere] Rename concept 'CopyConstructible' to 'copy_constructible'.
[everywhere] Rename concept 'MoveConstructible' to 'move_constructible'.
[everywhere] Rename concept 'DefaultConstructible' to 'default_constructible'.
[everywhere] Rename concept 'Constructible' to 'constructible_from'.
[everywhere] Rename concept 'Destructible' to 'destructible'.
[everywhere] Rename concept 'SwappableWith' to 'swappable_with'.
[everywhere] Rename concept 'Swappable' to 'swappable'.
[everywhere] Rename concept 'Assignable' to 'assignable_from'.
[everywhere] Rename concept 'UnsignedIntegral' to 'unsigned_integral'.
[everywhere] Rename concept 'SignedIntegral' to 'signed_integral'.
[everywhere] Rename concept 'Integral' to 'integral'.
[everywhere] Rename concept 'Common' to 'common_with'.
[everywhere] Rename concept 'CommonReference' to 'common_reference_with'.
[everywhere] Rename concept 'ConvertibleTo' to 'convertible_to'.
[everywhere] Rename concept 'DerivedFrom' to 'derived_from'.
[everywhere] Rename concept 'Same' to 'same_as'.
[ranges] Rename namespace 'view' to namespace 'views'.
[ranges] [iterators] Remove hyphenation hints from concept names to make them easier to find.
[support.srcloc.cons] Use term "default member initialier" rather than describing it indirectly.
P1208R6 Adopt source_location for C++20
P0466R5 Layout-compatibility and Pointer-interconvertibility Traits
[support.limits.general] <stop_token> should provide __cpp_lib_jthread, not __cpp_lib_is_swappable.
P1523R1 Views and Size Types
P1474R1 Helpful pointers for ContiguousIterator
[thread] Update headings, comments, and line wrapping to match editorial conventions.
P0660R10 Stop Token and Joining Thread
P0980R1 Making std::string constexpr
P1004R2 Making std::vector constexpr
[range.iota.view] Rename IOTA_DIFF_T to the preferred IOTA-DIFF-T.
P1522R1 Iterator difference type and integer overflow
P1638R1 basic_istream_view::iterator should not be copyable
Various small fixes relative to the ingress paper
P1035R7 Input range adaptors
[range.transform.sentinel] Reinstate transform_view::sentinel::operator- overloads, accidentally removed during application of P1614R2.
P1207R4 Movability of Single-pass Iterators
[func.require] Convert restrictive 'which' to 'that'.
P1065R2 Constexpr INVOKE
P1651R0 bind_front should not unwrap reference_wrapper
P1650R0 Output std::chrono::days with 'd' suffix
P1661R1 Remove dedicated precalculated hash lookup interface
P1612R1 Relocate endian’s specification
[module.unit] Add "either" to clarify that we're talking about module-names containing a reserved identifier, not module names starting with an identifier that contains a reserved identifier.
P1502R1 Standard library header units for C++20
P1423R3 char8_t backward compatibility remediation
[stringbuf.members] Minor fixes to P0408R7 wording.
[stringbuf] Name string parameters "s" instead of "str" for consistency and to avoid confusion with "str" methods.
P0408R7 Efficient Access to basic_stringbuf ’s Buffer
P0325R4 to_array from LFTS with updates
Rename _s to -s in placeholder names per editorial guidelines.
Apply P1452R2 On the non-uniform semantics of return-type-requirements
P1614R2 Adding <=> to the library
[time.hms.nonmembers] Finish rebase on std::format: rewrite hh_mm_ss operator<< in terms of format rather than using (removed) old formatting terminology.
Various small fixes relative to the ingress paper.
P1466R3 Miscellaneous minor fixes for chrono
[atomics.ref.float] Don't insert italic correction before a comma.
[thread.barrier.class] Rename constructor parameter from `phase_count` to `expected`.
[atomics.lockfree] "are" -> "is"; "along with" is not a coordinating conjunction.
[atomics.types.operations] Add more index entries.
P1644R0 Add wait/notify to atomic<shared_ptr<T>>
P1643R1 Add wait/notify to atomic_ref<T>
P1135R6 The C++20 synchronization library
[numbers.syn] Use 'namespace std::numbers'.
[math.constants] Expand 'math' to 'mathematical'.
[numbers] Use 'template<class T>', not 'typename'.
P0631R8 Math constants
[format.formatter] Reorder Formatter requirements before the descriptions of specializations that meet those requirements.
[format.string] Further clarify description of cases where formatting is described in terms of a call to to_chars.
[format.string.std] Convert normative duplication to a note to avoid creating the impression that alignment is only applied to non-string types.
[format.string] Separate out the general (type-independent) description of formatting from the format specifiers for arithmetic and string types, and make the presentation of the latter consistent with the presentation for chrono types.
[format.string] Avoid duplicating the specification of '#' for integers.
[format.arg] Don't use placeholder name for private member char-type.
[format.functions] Use clamp rather than min(max(a,b),c)
Add some FIXMEs for problematic wording.
[format.string] Explicitly list all the possible formatting types for bool and charT in their respective tables rather than requiring the reader to infer how to merge the integer table into the bool and charT tables.
P1652R1 Printf corner cases in std::format
P1361R2 Integration of chrono with text formatting
[format.context] Add specification of wformat_context analogous to that of format_context, as discussed on lib reflector.
[format.string] Make tone of wording more formal and less tutorialesque.
[format.string] Add missing grammar definition for custom-format-spec rather than leaving it dangling.
[format.string] Change 'integer' grammar to be left-recursive and factor out separate positive-integer and nonnegative-integer productions for clarity.
[format.string] Clarify that "other characters" means "characters other than { and }".
[format.formatter] Add subclause heading to avoid hanging paragraphs.
P0645R10 Text formatting
P1424R1 'constexpr' feature macro concerns
[bit] Avoid std::numeric_limits<...>
P0553R4 Bit operations
P1355R2 Exposing a narrow contract for ceil2
[iterator.concept.sizedsentinel], [range.sized], [range.view] Provide proper descriptions for disable_sized_sentinel, disable_sized_range, and enable_view.
LWG3209 Expression in year::ok() returns clause is ill-formed
LWG3208 Boolean's expression requirements are ordered inconsistently
LWG3206 year_month_day conversion to sys_days uses not-existing member function
LWG3202 P0318R1 was supposed to be revised
LWG3199 istream >> bitset<0> fails
LWG3198 Bad constraint on std::span::span()
LWG3196 std::optional<T> is ill-formed if T is an array
LWG3191 std::ranges::shuffle synopsis does not match algorithm definition
LWG3187 P0591R4 reverted DR 2586 fixes to scoped_allocator_adaptor::construct()
LWG3186 ranges removal, partition, and partial_sort_copy algorithms discard useful information
LWG3185 Uses-allocator construction functions missing constexpr and noexcept
LWG3184 Inconsistencies in bind_front wording
LWG3183 Normative permission to specialize Ranges variable templates
LWG3169 ranges permutation generators discard useful information
LWG3158 tuple(allocator_arg_t, const Alloc&) should be conditionally explicit
LWG3055 path::operator+=(single-character) misspecified
LWG2899 is_(nothrow_)move_constructible and tuple, optional and unique_ptr
P0784R7 More constexpr containers
[lex,cpp] Adjust index entries around 'macro' and 'point of'.
P1703R1 Recognizing header unit imports requires full preprocessing
[class.copy.elision] Add cross-reference, fix example.
[over.match.class.deduct] Put all bullets describing the properties of f' at the same depth, and guard them all by the condition that we're actually adding an f' to the set of guides.
[over.match.class.deduct] Switch from imperative to passive, and clarify what happens if the various 'if' conditions are not met.
Cleanup index entries around 'alias template'.
P1814R0 Class template argument deduction for alias template
P1771R1 [[nodiscard]] for constructors
P1152R4 Deprecating volatile
P1452R2 On the non-uniform semantics of return-type-requirements
P1143R2 Adding the constinit keyword
P1823R0 Remove contracts from C++20
[over.ics.rank] Reorder examples to match order of normative text.
[conv.qual] Move note after the rule that implies it.
[expr.const.cast] Clarify pairwise correspondence for P_i. [over.ics.rank] Move cross-reference pointing to [conv.qual].
P0388R4 Permit conversions to arrays of unknown bound
P1811R0 Relaxing redefinition restrictions for re-exportation robustness
[basic.def.odr] Turn long comma-separate list into bullets.
P1766R1 Mitigating minor modules maladies
P1668R1 Enabling constexpr intrinsics by permitting unevaluated inline-assembly in constexpr functions
P1816R0 Class template argument deduction for aggregates
P1616R1 Using unconstrained template template parameters with constrained templates
[over.match.oper] Replace "member, non-member, and built-in candidates" with "non-rewritten candidates"
P1630R1 Spaceship needs a tune-up
[dcl.enum] Avoid hanging paragraphs by moving "Enumeration declarations" down one level to a sibling of "The using enum declaration".
P1099R5 Using enum
[dcl.attr.nodiscard] Simplify note describing the string-literal in a nodiscard attribute and make it less confusing.
P1301R4 [[nodiscard("should have a reason")]]
[class.spaceship] Remove incorrect note.
P1186R3 When do you actually use <=>?
[class.ctor], [class.dtor] Introduce actual definitions for "constructor" and "prospective destructor".
[class.dtor] Reorder the introduction of an implicit prospective destructor to before we describe the overload resolution to pick the actual destructor.
[class.prop] [special] Move definition of eligible special member functions to the section on special member functions.
P0848R3 Conditionally Trivial Special Member Functions
P0735R1 Interaction of memory_order_consume with release sequences
P1331R2 Permitting trivial default initialization in constexpr contexts
P1161R3 Deprecate uses of the comma operator in subscripting expressions
CWG2418 Missing cases in definition of “usable in constant expressions”
CWG2406 [[fallthrough]] attribute and iteration statements
CWG2404 [[no_unique_address]] and allocation order
CWG2400 Constexpr virtual functions and temporary objects
CWG2390 Is the argument of __has_cpp_attribute macro-expanded?
CWG2376 Class template argument deduction with array declarator
CWG2366 Can default initialization be constant initialization?
CWG2300 Lambdas in multiple definitions
CWG2207 Alignment of allocation function return value
CWG682 Missing description of lookup of template aliases
[temp.constr.order] Remove extraneous "the". (#2964)
[dcl.asm] Rename grammar term 'asm-definition' to 'asm-declaration'
[temp.constr.constr] Add missing period at end of sentence. (#2957)
[expr.reinterpret.cast] Properly capitalize full-sentence bullets. (#2956)
[func.bind] Remove bogus 'shall's. (#2955)
[Concepts] Remove qualified-concept-name reference
[time] Add missing \tcode for a couple of "Returns:" clauses. (#2949)
[iterator.synopsis] Copy constraint for iterator_traits<T*> from [iterator.traits]/5 (#2943)
[range.filter.sentinel] Correct typo in constructor Effects (#2937)
[expr] Adjust whitespace so comments start on the preferred columns
Update configuration for building drafts after N4820.
Update configuration to build new working draft N4820.
[library-wide] Use "meet" for non-concept type requirements (#2796)
[expr.new] Harmonize rules of constant array bounds > 0
[expr.unary.op] Modernize wording for obtaining a pointer.
[range.counted] Introduce "Counted view"
[iterator.requirements.general] "counted range" defines a term of art
[library-wide] Use "model" instead of "satisfy" for semantic library concept requirements
[range.prim.size] Clarify by adding 'respectively'.
[dcl.array] Rework description.
[range.split.outer] Convert trailing cross-reference to prefix style.
[expr.unary.op] Use bullets to clarify the address-of operator.
[expr.add] Avoid x[i] syntax when defining pointer arithmetic.
[stmt.return.coroutine] Move one level up to avoid hanging paragraphs.
[range.semi.wrap] Rename "semiregular" to "semiregular-box"
[basic.compound] Replace four refs with a single one to [dcl.meaning]
[expr.sizeof,expr.alignof,expr.unary.noexcept] Clarify value category.
[std] Show stable labels for tables.
[concept.swappable] Strike array poison pill swap overload
[dcl.dcl]/11 Storage from object definitions has proper alignment
[dcl.dcl,temp.spec] Move normative statements on restrictions for explicit specializations and explicit instantiations to [temp.spec] and its subsections.
[string.view.template][string.view.iterators] Move requirements to a more appropriate place
[expr.call,expr.reinterpret.cast] Adjust cross-references for type violations in function calls.
[namespace.def] Remove redundant mention of "global scope".
[dcl.stc,dcl.type.cv] Avoid redundancy when specifying 'mutable'.
[basic.lookup.elab] Clarify example to refer to injected-class-name
[istream.sentry] Remove unreferenced private typedef-name traits_type (#2818)
[dcl.type.elab] Mix struct/class in example
[cmp.categories] Use italics for exposition-only enumeration and enumerator names
[alg.random.sample] Remove redundant requirement (#2798)
[time.cal.ymwdlast.members] Move statement on class properties (#2927)
[xrefdelta] Remove spurious entry for no-op rename. (#2926)
[algorithms.parallel.exec],[alg.set.operations],[alg.min.max],[alg.c.library] remove empty parens (#2925)
[unord.req] Consistently use 'Average case x, worst case y.' (#2921)
[module.interface] Use 'namespace-definition',
[language.support, utilities] Condense description of exception classes
[lib] Sort headers in summary tables.
[lib] Align contents of library summary tables.
[dcl.fct.def.default] Add missing comma
[basic.def.odr] Make case consistent in first word of bullets.
[except.uncaught] Clarify duration of uncaught exception.
[coroutine.handle,coroutine.handle.export.import] "static" before "constexpr" (#2811)
[stmt.stmt,basic.scope.block] Remove normative redundancy.
[time.zone.info] Add missing 'Returns' items. (#2901)
[dcl.mptr] Add \pnum to note already in a separate paragraph (#2907)
[depr.c.headers.other] Remove somewhat-surprising index entry for "namespace".
[allocator.adaptor.syn] Avoid confusing term 'memory resource'. (#2904)
[except.terminate] thread has move-assignment, not copy (#2903)
[char.traits.specializations.char8.t] Make all members constexpr. (#2833)
[views.span] Move description of iterators to [span.iterators]. (#2864)
[fs.rec.dir.itr.members] Change \ensures to \remarks for pop() (#2830)
[expr.alignof,expr.unary.noexcept] Reorder to after [expr.sizeof]. (#2862)
[dcl.init.aggr] Aggregates can have inherited non-public data members (#2892)
[temp.deduct.type] Add a paragraph break to avoid hiding normative wording between two examples.
[view.interface] Drop unused exposition-only templates (#2881)
[concept.boolean] Simplify first requirement (#2888)
[rand.device,rand.util.seedseq] Remove extraneous spaces from parameter lists (#2891)
[styles] Also allow 'listings' package v1.8b (#2889)
[tables] Remove unused 'libefftabvaluenarrow'.
[tables] Introduce 'floattablebasex' to avoid redundancy in 'lib2dtab2base'.
[tables] Reuse 'floattablebase' as much as possible.
[fs.path.query,fs.op.equivalent] Use 'otherwise', not 'else' (#2883)
[module.global] Make the note that only preprocessing directives can appear in the global module fragment prior to preprocessing a bit more obvious and prominent.
[map,multimap] Add index entries for members of value_compare. (#2861)
[expr.prim.lambda] Simplify grammar for lambda-expression.
[optional.ctor] Remove extra dot. (#2875)
[utilities,containers] Harmonize presentation of tuple_element. (#2868)
[std] Do not use teletype spaces in BNF (#2834)
[basic.start.static] Repair index entry for zero-initialization. (#2867)
[iterators] Add "ranges::" for "iterator_t" (#2860)
[coroutine.traits.primary] Hyphenate "program-defined" (#2810)
[pointer.conversion] Reorder overloads of to_address (#2814)
[iterator.cust] Introduce expression-equivalent list as in [ranges]. (#2845)
[algorithms.requirements] Say 'below to account for clause move (#2812)
[alg.unique] Remove <> after ranges::equal_to (#2826)
[cstdio.syn] Rename parameter of function "rename" (#2840)
[expos.only.func] Add library index entry for decay-copy (#2841)
[basic.life] Remove erroneous comma in description of treatment of storage out-of-lifetime (#2842)
[macros] Adjust \tref to include the word 'Table' in the link text. (#2851)
[time.cal.ym.nonmembers] Add missing \pnum for Complexity element. (#2836)
[expr.ass] Move higher-precedence productions to before the assignment production in the grammar, to be consistent with how we order these productions throughout [expr].
[iterator.traits] Remove redundant required expression in cpp17-input-iterator (#2817)
[memory.syn] Add declaration of primary template "atomic"
Finalize N4812: revised version of Editors' Report.
Add draft of updated Editors' Report, N4812.
[limits.syn,numeric.limits] Declare partial specializations in header synopsis, not class synopsis
Delete unused file 'headers'
Update configuration for building drafts after N4810.
Update configuration to build new working draft N4810.
[util.smartptr.atomic.shared] [util.smartptr.atomic.weak] Clarify grouping of "either".
[std] Switch to using constant-width italics for exposition-only names in the core wording.
[mismatch] LWG3178 std::mismatch is missing an upper bound
[algorithms] Qualify declarator-id with sub-namespace.
[time.clock.req] Change 'satisfy' to 'meet'.
[numeric.requirements] Define 'numeric type'.
[time.clock.req] Simplify requirements for Cpp17TrivialClock.
[basic.fundamental] Rename 'range exponent' to 'width' to align with C
[class.rel] Simplifying wording to avoid talking about a reversed <=>.
[expr.prim.lambda.capture] Convert paragraphs repeating the "non-odr-usable local entities shall not be odr-used" rule from [basic.def.odr] into notes.
Revert "[expr.const] Add missing definition of 'usable in constant expressions'"
[container.node] Add 3 "template" keywords for dependent name (#2676)
[std] Replace underscores in stable labels with periods.
[std] Index all mentions of keywords in grammar productions.
[specialized.algorithms] Rename voidify's parameter
[queue.syn,stack.syn] Add partial specialization of uses_allocator
[func.not_fn], [func.bind_front] fix phrasing of \mandates and \expects (#2750)
[temp.class.spec.mfunc] Correct "class template specialization" to the intended "class template partial specialization"
[expr.sizeof] Remove the redundant paragraph 3
[dcl.attr.contract.cond] Replace return type with 'void' in example that does not return
[stmt.iter,stmt.select] Add formatting for grammar terms
[conv.prom] b_min and b_max are no longer defined in [dcl.enum]
[temp.deduct.conv] Add missing formatting for 'noexcept'.
[range.iota,range.adaptors] Add cross-references for private member types.
[dcl.init] Prepend 'Otherwise' to a bullet
[dcl.attr.contract.cond] References cannot be modified.
[over.match.best] Add number for paragraph 2.
[lib] Use '(inclusive)', not other punctuation
[class.eq,class.spaceship] Clarify order of comparison.
[type.index.overview] Remove excess space in member declarations
[default.allocator] align all typdef-name declarations at =
[meta.type.synop] Align type_identity_t's "=" with following declarations
[basic.lookup.argdep] Reorder bullets to group semantics.
[lib] Remove space between 'template' and argument list.
P1357R1 Traits for [Un]bounded Arrays
P0920R2 Precalculated hash values in lookup
P1024R3 Usability Enhancements for std::span
[ranges.syn] Add ref_view to header synopsis.
P1252R2 Ranges Design Cleanup
P1227R2 Signed ssize() functions, unsigned size() functions
[algorithms.parallel.exec] Rephrase to avoid incorrect use of "may not".
P1001R2 Target Vectorization Policies from Parallelism V2 TS to C++20
P0811R3 Well-behaved interpolation for numbers and pointers
P1164R1 Make create_directory() Intuitive
P1464R1 Mandating the Standard Library: Clause 22 - Iterators library
P1463R1 Mandating the Standard Library: Clause 21 - Containers library
[char.traits.typedefs] Change 'shall meet' to 'meets'
P1462R1 Mandating the Standard Library: Clause 20 - Strings library
P1459R1 Mandating the Standard Library: Clause 18 - Diagnostics library
P1458R1 Mandating the Standard Library: Clause 16 - Language support library
P0738R2 I Stream, You Stream, We All Stream for istream_iterator
P0340R3 Making std::underlying_type SFINAE-friendly
[mem.poly.allocator.mem] Avoid duplicate colons.
P0339R6 polymorphic_allocator<> as a vocabulary type
[coroutine.handle] Use proper macro for "exposition only"
LWG3182 Specification of Same could be clearer
LWG3180 Inconsistently named return type for ranges::minmax_element
LWG3179 subrange should always model Range
LWG3173 Enable CTAD for ref-view
LWG3144 span does not have a const_pointer typedef
LWG3133 Modernizing numeric type requirements
LWG3119 Program-definedness of closure types
LWG3112 system_error and filesystem_error constructors taking a string may not be able to meet their postconditions
LWG3101 span's Container constructors need another constraint
LWG3087 One final &x in [list.ops]
LWG3077 (push|emplace)_back should invalidate the end iterator
LWG3040 basic_string_view::starts_with Effects are incorrect
LWG3012 atomic is unimplementable for non-is_trivially_copy_constructible T
[dcl.fct.def.coroutine] Update wording to align with current editorial conventions.
[expr.await] Rephrase and modernize wording.
.gitignore: add .synctex* exclusion
[temp.param] "a type that is literal" -> "a literal type".
[class.eq] Remove redundant repetition of the operator== symmetry rule.
[temp.type] Do not refer to operator==, which excludes built-in ==.
[class.compare.default] Add a note that friends are found by ADL only.
P1185R2 <=> != ==
P1103R3 Merging Modules
[expr.new] Move treatment of arrays of unknown bound
P1009R2 Array size deduction in new-expressions
[dcl.init] Moved the changed bullet in 17.5 to before 17.6.3.
P0960r3 Allow initializing aggregates from a parenthesized list of values
P1323R2 Contract postconditions and return type deduction
P1139R2 Address wording issues related to ISO 10646
P1041R4 Make char16_t/char32_t string literals be UTF-16/32
P1381R1 Reference capture of structured bindings
P1091R3 Extending structured bindings to be more like variable declarations
P1286R2 Contra CWG DR1778
CWG2394 Const-default-constructible for members
CWG2387 Linkage of const-qualified variable template
CWG2386 tuple_size requirements for structured binding
CWG2385 Lookup for conversion-function-ids
CWG2384 Conversion function templates and qualification conversions
CWG2381 Composite pointer type of pointers to plain and noexcept member functions
CWG2380 capture-default makes too many references odr-usable
CWG2379 Missing prohibition against constexpr in friend declaration
CWG2372 Incorrect matching rules for block-scope extern declarations
CWG2368 Differences in relational and three-way constant comparisons
CWG2365 Confusing specification for dynamic_cast
CWG2354 Extended alignment and object representation
CWG2353 Potential results of a member access expression for a static data member
CWG2289 Uniqueness of structured binding names
[temp.dep.type] Rephrase to avoid suggesting that an expression can be the current instantiation.
CWG2266 Has dependent type vs is type-dependent
CWG2257 Lifetime extension of references vs exceptions
CWG2083 Incorrect cases of odr-use
CWG2051 Simplifying alias rules
[basic.def.odr] Apply additional edits from CWG review that were not transcribed into P1359R0.
CWG2020 Inadequate description of odr-use of implicitly-invoked functions
CWG1938 Should hosted/freestanding be implementation-defined?
CWG1937 Incomplete specification of function pointer from lambda
CWG581 Can a templated constructor be explicitly instantiated or specialized?
[expr.prim.lambda.capture] Add missing close parentheses in CWG2358 examples.
CWG2360 [[maybe_unused]] and structured bindings
CWG2358 Explicit capture of value
CWG2352 Similar types and reference binding
CWG2336 Destructor characteristics vs potentially-constructed subobjects
CWG2332 template-name as simple-type-name vs injected-class-name
CWG2330 Missing references to variable templates
CWG2318 Nondeduced contexts in deduction from a braced-init-list
CWG2317 Self-referential default member initializers
CWG2310 Type completeness and derived-to-base pointer conversions
CWG2309 Restrictions on nested statements within constexpr functions
CWG2303 Partial ordering and recursive variadic inheritance
CWG2278 Copy elision in constant expressions reconsidered
CWG2267 Copy-initialization of temporary in reference direct-initialization
CWG2256 Lifetime of trivially-destructible objects
[array.syn] Add reference to [array.tuple]
[temp.dep] [temp.dep.res] Remove redundant restatement of the two-phase lookup rule. The primary location of the rule is [temp.dep.candidate].
[basic.link] The notion of the linkage of a type is no longer used for any purpose. Remove it and move its example next to the rule that justifies it, and simplify said example.
[expr.sizeof]/2: there are no expressions of reference type
Add missing noexcept cross-refs for invokable traits (#2662)
[algorithms.general,concepts.general] Add missing entries for summary tables (#2663)
Update configuration for building drafts after N4800.
Update configuration to build new working draft N4800.
[depr.strstreambuf.virtuals] Hyphenate "implementation-defined"
[range.prim] merge into [range.access]
[iterator.container] merge into [iterator.range]
[thread.condition] Improve description of efficiency of condition_variable.
[unreachable.sentinel] 'open interval' -> 'unbounded interval'
[range.cmp] Deconfuse subclause heading.
[description] Drop 'informative' from the heading.
[expos.only.types] Exposition-only types apply more generally,
[expos.only.func] New home for global exposition-only functions.
[range.refinements] Rephrase heading to not use 'common range'
[special.mem.concepts] Use 'models ... only if' phrasing for semantic constraints.
[range.factories] New subclause, split off from [range.adaptors]
[dcl.typedef] Use 'redeclare', not 'redefine'
[basic.life] Adjust subclause heading
[iterators] Qualify declarator-id with sub-namespace.
[expr.new] A new-expression might not invoke a constructor
[over.ics.user,over.ics.rank] Reference binding is part of the second SCS
[diff.dcl] Capitalize sentence.
[stream.iterators] Improvements, modernization and fixes
[counted.iter.cmp] Add missing colon to specification element
[istreambuf.iterator] Remove duplicated declarations
[istream.iterator] Remove duplicated declarations
[insert.iterators] Remove duplicated declarations
[iterator.synopsis] Drive-by add semantic breaks
[move.iterator] Remove duplicated declarations
[reverse.iterator] Remove duplicated declarations
[iterators] Move specialization to synopsis
[expr.and,expr.or,expr.xor] Add grouping sentence to the binary and/or/xor operators.
[reverse.iter.cons] Indent consistently with the parent subclause
[basic.lval] clarify the contexts where void expressions can appear and their value category
[basic.lookup,over.call.func] Clarify lookup rules for function calls.
Move package inclusion to std.tex.
Updated README to reflect new LaTeX package dependencies.
\diffref and \diffrefs now take a comma-separated list of references.
[alg.any_of] Add missing paragraph break
[expr] Adjust horizontal whitespace for comments
[expr.prim.lambda.capture] Add missing semicolons after statements ending in lambda expressions
Use \mname for __func__
[allocator.requirements] relocate example to end of subclause
[index] Replace 'see also' with 'see' absent page numbers. (#2636)
[unord.req] Add missing \tcode. (#2629)
[iterator.synopsis] Index fix: unreachable_sentinel is defined here.
[ostreambuf.iterator] Remove tutorial-like sentence
[ostreambuf.iterator] Move description before the synopsis
[istreambuf.iterator.proxy] Move description before class synopsis
[istreambuf.iterator] Use \placeholder for proxy
[istreambuf.iterator] Use nullptr instead of 0
[ostream.iterator.ops] Check for non nullptr value implicitly
[ostream.iterator.cons.des] Use nullptr instead of null
[ostream.iterator] Remove redundant paragraph
[ostream.iterator] Remove tutorial-like description
[istream.iterator.ops] Unparenthesize return object name
[istream.iterator] Use nullptr instead of 0
[iterator.primitives] Rescue introductory sentence.
[optional.assign] use injected class name consistently
[reverse.iterators] Use the public accessor function,
[ranges.syn] Complete requires clause of view_interface
[range.utility.helpers] Mark \placeholders with \expos
[ranges.syn] Remove space before empty brace-init-list
[ranges.syn] Complete requires clause of filter_view
[dcl.constexpr] Add "consteval" to subclause heading (#2597)
[diff.dcl] Remove space before colon. (#2599)
[temp.mem.func] Remove inappropriate parentheses in 'Array<T>::operator[]()'.
[diff.cpp17.library] Add entry for <ranges> header (#2588)
[reverse.iter.cons] Add missing \tcode
[reverse.iterator] Remove stray backslashes
[iterator.traits] Remove space between type and ref-qualifier
[basic.indet] Indeterminate values
[iterator.concept.bidir] Add comma for clarity
Update configuration for building drafts after N4791.
Update configuration to build new working draft N4791.
[iterator.synopsis] Add reference to [alg.req.sortable]
[view.interface] Use "inherits"/"derives" consistently.
[cpp.subst] Introduce grammar non-terminal 'va-opt-replacement'
[iterator.concepts.readable] Turn parenthesized explanation into a note.
[temp.func.order] Adjust example to rules in [temp.deduct.partial].
[input.output] Avoid colons in stable labels
[iterator.concept.iterator] Remove stray, mismatched parenthesis
[basic.fundamental] Remove a footnote that was describing a particular possible manifestation of undefined behaviour
[iterator.traits] Present concept requirements consistently (#2566)
[algorithms] Compactify and reformat source with no visual change
[iosfwd.syn] Change char_traits from 'class' to 'struct'. (#2570)
[algorithms] Add missing closing delimiters
[variant.assign]  Move punctuation out of \tcode. (#2563)
[atomics.types.operations]/20 Replace "E.g." at start of sentence with "For example,". (#2558)
Use \logop consistently for logical expressions ("and", "or"). (#2545)
[re.grammar] Add missing closing parentheses. (#2552)
[meta.logical] use math mode subscripts for Bi, B1, BN etc. (#2549)
[utilities] Harmonize 'For T in Types' phrasing. (#2543)
[dcl.init] Clarify standard conversions for built-in types (#2534)
[over.best.ics] Clarify ambiguous conversion sequence (#2532)
[macros] Remove unused \enumeratea and \drawing environments
[rand] Improve (and fix) nesting of maths within code
[rand] Use itemize envs instead of enumeratea
[algorithms] Use math \min when computing complexities. (#2531)
[over.ics.ref] Use 'implicit conversion sequence',
[class.bit] Bit-fields of sufficient width can store any value of an enumeration,
[dcl.init.aggr] Resolve grammar confusion around arrays of unknown bound
[dcl.inline,dcl.align] Strike redundant 'definition'
[dcl.spec] Harmonize phrasing of restrictions on decl-specifiers
[depr.locale.category] Don't parenthesize reference after 'in'. (#2526)
[dcl.struct.bind,numarray] Use '\dotsc' for comma-separated lists (#2539)
[atomics.types.generic] Remove note that tries to encourage implementations to use the same size for atomic<T> as for T.
[allocator.uses.construction] the argument name is alloc, not allocator
[unord.req] Undo change accidentally made in wrong table cell.
Update configuration for building drafts after N4788.
Update configuration to build new working draft N4788.
[stmt.while] Simplify rewrite rule.
[string.classes] Avoid special characters in stable labels
[iterator.operations] Simplify distance requirements; change to expects
[iterator.operations] Simplify advance requirements; change to expects
[iterator.operations] advance does not decrement by a negative count
[dcl.init.aggr] Add example for anonymous union
[numeric.ops] Move [numerics.defns] to the point-of-use.
[alg.find.end] and [alg.search] should not use "subsequence"
[over.ics.user] Mark "user-defined conversion sequence" as a term of art
[over.best.ics] Turn 'such as' list into a note
[iterators] Shorten labels for iterator concepts
[iterators] Shorten stable labels for algorithm requirements
[ranges] Shorten and adjust stable labels
[structure.summary] Add missing templated entities
[func.bind_front] Use unwrap_ref_decay_t
[dcl.attr.contract.check] Remove redundant statement that violation handler is implementation-defined
[temp] Use 'deduced as' instead of 'deduced to'
[class.mem] Add opaque-enum-declaration to member-declaration
[conv.lval] Improve a bit more the note about std::nullptr_t case
[conv.lval] Improve the note about std::nullptr_t case
[expr.static.cast] Say 'lvalue denoting ...' instead of 'lvalue to ...'
[basic.type.qualifier] Clarify the definitions of const/volatile object
[dcl.spec.auto] Return type deduction should refer to templated entity
[basic.lval] Correct an article in the prvalue definition
[depr.locale.category] Replace tcode environments with codeblock environments.
[cmp.categories,time.cal] Change "explicit constexpr" to "constexpr explicit"
P1209R0 Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20
[unord.req] Clarify what r1 is and remove unnecessary variable e.
[unord.req] Use bullets for the list of denoting variables.
P0919R3 Heterogeneous lookup for unordered containers
[func.def] Simplify "references to functions and references to objects" to simply "references".
[func.not_fn,func.bind_front] Some clarifications
P0356R5 Simplified partial function application
[iterators] Remove bogus "shall"s is "Expects" elements.
[iterators] [range] [rand.req.urng] Apply P1084R2's second change.
[range] [iterators] Replace uses of { I } -> Same<T>& requirement.
[incrementable.traits] [readable.traits] Remove redundant remove_const_t on type that cannot be const-qualified.
[std.iterator.tags] Replace "the most specific category tag" with "a category tag".
P0896R4 The One Ranges Proposal
P1165R1 Make stateful allocator propagation more consistent for operator+(basic_string)
P1085R2 Should Span be Regular?
P0899R1 LWG 3016 is Not a Defect
P0591R4 Utility functions to implement uses-allocator construction
P1285R0 Improving Completeness Requirements for Type Traits
P1020R1 Smart pointer creation with default initialization
P1007R3 std::assume_aligned
P0771R1 std::function move constructor should be noexcept
P0608R3 A sane variant converting constructor
P0357R3 reference_wrapper for incomplete types
[pairs.spec,tuple.creation] Simplify description
P0318R1 unwrap_ref_decay and unwrap_reference
[iostream.forward.overview] Convert incomplete wording with no normative effect to an example.
P1148R0 Cleaning up Clause 20
P1032R1 Misc constexpr bits
P1006R1 Constexpr in std::pointer_traits
P0972R0 <chrono> zero(), min(), and max() should be noexcept
P0655R1 visit<R>: Explicit Return Type for visit
P0602R4 variant and optional should propagate copy/move triviality
[diff.cpp17.input.output] Add ill-formed comment and a still well-formed use.
P1123R0 Editorial Guidance for merging P0019R8 and P0528R3
LWG3160 atomic_ref() = delete; should be deleted
LWG3154 Common and CommonReference have a common defect
LWG3153 Common and common_type have too little in common
LWG3148 <concepts> should be freestanding
LWG3147 Definitions of "likely" and "unlikely" are likely to cause problems
LWG3145 file_clock breaks ABI for C++17 implementations
LWG3140 COMMON_REF is unimplementable as specified
LWG3137 Header for __cpp_lib_to_chars
LWG3132 Library needs to ban macros named expects or ensures
LWG3131 addressof all the things
LWG3130 [input.output] needs many addressof
LWG3129 regex_token_iterator constructor uses wrong pointer arithmetic
LWG3128 strstream::rdbuf needs a const_cast
LWG3127 basic_osyncstream::rdbuf needs a const_cast
LWG3122 __cpp_lib_chrono_udls was accidentally dropped
LWG3116 OUTERMOST_ALLOC_TRAITS needs remove_reference_t
LWG3096 path::lexically_relative is confused by trailing slashes
LWG3065 LWG 2989 missed that all path's other operators should be hidden friends as well
LWG3054 uninitialized_copy appears to not be able to meet its exception-safety guarantee
LWG3038 polymorphic_allocator::allocate should not allow integer overflow to create vulnerabilities
LWG3037 polymorphic_allocator and incomplete types
LWG3031 Algorithms and predicates with non-const reference arguments
LWG3025 Map-like container deduction guides should use pair<Key, T>, not pair<const Key, T>
LWG3008 make_shared (sub)object destruction semantics are not specified
LWG2996 Missing rvalue overloads for shared_ptr operations
LWG2995 basic_stringbuf default constructor forbids it from using SSO capacity
LWG2943 Problematic specification of the wide version of basic_filebuf::open
LWG2936 Path comparison is defined in terms of the generic format
LWG2682 filesystem::copy() won't create a symlink to a directory
LWG2412 promise::set_value() and promise::get_future() should not race
LWG2184 Muddled allocator requirements for match_results assignments
LWG2183 Muddled allocator requirements for match_results constructors
P1330R0 Changing the active member of a union inside constexpr
P1094R2 Nested Inline Namespaces
[expr.prim.req.compound] Replace note that restates what 'immediately-declared constraint' means with an example.
[temp.param] Remove unused grammar production default-template-argument.
[dcl.type.simple] Factor out decltype(e) wording into its own subclause.
[expr.prim.req.compound] Resolve conflict between P1084R2 and P1141R2.
P1141R2 Yet another approach for constrained declarations
[expr.const] Remove redundant bullet from definition of manifestly constant-evaluated. Constexpr variables are always usable in constant expressions.
[expr.const] Factor out some commonality from 'manifestly constant-evaluated' and 'potentially constant evaluated'.
[expr.const] Add missing definition of 'usable in constant expressions' for (sub)objects and reference members.
P0595R2 std::is_constant_evaluated()
P1073R3 Immediate functions
P1353R0 Missing Feature Test Macros
[c.mb.wcs] The parameter is called 's', not 'buf'
P0482R6 char8_t: A type for UTF-8 characters and strings
[lex.key] Change keyword table to use multicolfloattable.
P1236R1 Alternative Wording for P0907R4 Signed Integers are Two's Complement
P1327R1 Allowing dynamic_cast, polymorphic typeid in Constant Expressions
P1002R1 Try-catch blocks in constexpr functions
P1289R1 Access control in contract conditions
[gram] Remove now-incorrect claim that a typedef-name naming a class is a class-name.
[expr,class,temp] Remove vestigious references
P1131R2 Core Issue 2292: simple-template-id is ambiguous between class-name and type-name
[expr.prim.req.compound] Change "is" to "has a" when refering to grammar terms.
P1084R2 Today's return-type-requirements Are Insufficient
P1084R2 Today's return-type-requirements Are Insufficient
P0982R1 Weaken Release Sequences
P0668R5 Revising the C++ memory model
[dcl.fct] Add missing period after last sentence in example. (#2494)
[diff] Rename "basic concepts" to "basics" (#2481)
[styles] Also allow 'listings' package v1.7 (#2473)
[temp.explicit] Add an index alias entry for "extern template". (#2462)
[time] Use outputblock environment where appropriate. (#2440)
CWG2373 Incorrect handling of static member function templates in partial ordering
CWG1781 Converting from nullptr_t to bool in overload resolution
CWG1636 Bits required for negative enumerator values
[class.copy.assign] Use Oxford comma.
[thread] Remove class name repeated in subheadings (#2368)
[input.output] Remove class name repeated in subheadings (#2366)
[iterator.requirements.general] Operations satisfy requirements, not operations (#2375)
[allocator.requirements] Use code font when referring to std::array
[localization] Remove class name repeated in subheadings (#2364)
[numerics] Remove class name repeated in subheadings (#2362)
[output.iterators] Remove misleading italics from note (#2360)
[iterators] Remove class name repeated in subheadings (#2358)
[re] Remove class name repeated in subheadings (#2356)
[utilities] Remove class name repeated in subheadings (#2355)
[lib] Replace \postconditions with \ensures
[class.this] Turn redundant statement on cv-qualified constructors/destructors into a note.
[basic.types] Clarify that 'value representation' does not depend on the value. (#2246)
Update configuration for building drafts after N4778.
Update configuration to build new working draft N4778.
[fs.filesystem.syn] Remove vestige of removed trivial-clock type
Move "plain ints" statement to a note (#2346)
[temp] Add 'static' to examples for static data member template
[dcl.attr.contract.check] Violation handlers are not 'user-provided'
[editorial] Use struct instead of class to make example valid
[class.union] use 'class', not (undefined) 'struct'
[unique.ptr.single.ctor] Simplify description of unique_ptr constructors
[basic.def.odr] Clarify antecedent for declarative region
[basic.def.odr] Replace undefined term 'non-trivial function'
[class.temporary] prvalues are not materialized,
[class.this] A pointer represents more than an address
[class.member.lookup] 'unqualified-id' is the correct complement for 'qualified-id'
[basic.lval] Clarify result object for prvalues as operands
[expr.add] Clarify if/otherwise ladder
[basic.life] Change "class or aggregate type" to "class or array type" (#2309)
[dcl.init] Rephrase "user-defined conversion sequence" (#2298)
[class.virtual] Define 'virtual function' (#2297)
[std] Replace use of 'structure' by 'class'
[temp.param] fix spaceship example (#2291)
[expr.new] Use 'object', not 'entity', for new-expression.
[container.node.overview] Remove suggestion that an implementation could define a class named 'node-handle'.
[containers,utilities] Mark exposition-only names
[diff] Remove headings that refer to dissolved clauses (#2271)
[class.dtor] Clean up awkward '.. is the type of the class' phrasing.
[stmt.switch] Clarify comparison for case labels
[copy.ctor] Rearrange constructor subclauses (#2270)
[std] Use \defnadj where appropriate
[expr.pre] Add note on operator regrouping here,
[class.copy.ctor] Add missing cross-references to Annex D (#2344)
[temp.param] Remove vestigial restriction on non-type template parameters of class type.
[dcl.init.aggr] initializer-list (grammar) is never empty
[basic.types] Replace redundant "cv-unqualified scalar types" with just "scalar types"
[map] Use `mapped_type` rather than `T` for indexing operations (#2330)
[rand.util.seedseq] Typo "for( " should be "for ("
[associative.reqmts] index all members
[unord.req] index "mapped_type", "value_type" and constructors
[unord.req] index "emplace" and "emplace_hint"
[unord.req] index "extract" and "merge"
[unord.req] Move index entry for "erase" to previous row (#2293)
[forwardlist.modifiers] Remove index entry for forward_list::erased (#2292)
Update Getting Started On Fedora to include latexmk (#2282)
[dcl.dcl] Remove incorrect footnote about the implicit int rule.
[mem.res.class] Add default constructor (#2268)
[span.overview] Move requirements on types to after the synposis. (#2260)
[string.view] Move complexity requirement into [string.view.template]. (#2261)
[cmp.alg] Avoid styling non-code in code font (#2266)
Update configuration to build drafts after N4762.
Update configuration to build new working draft N4762.
[class] Introduce a subheading 'Properties of classes'.
[namespace.udecl] Demote normative duplication to notes (#1976)
[macros,class] Define \defnadj and use it experimentally
[time.point,time.duration] Remove class name repeated in subheadings (#2249)
[structure.specifications] spell static_assert-declaration without \_
[algorithm.syn] Reorder after [algorithms.requirements] and [algorithms.parallel], which apply to both <algorithm> and <numeric>.
[algorithms] Integrate requirements from [numeric.ops].
Remove [class.copy] and adjust cross-references pointing there.
[class.derived,class.access,special] Move into [class], as appropriate.
[dcl.decl] Move into [dcl.dcl] as appropriate.
[namespace.udecl] Move one level up
[numeric.ops] Move into [algorithms], after [alg.sorting]
[localization] Move to before [input.output]
[time.general] Add summary table
[time] Promote to a top-level clause.
[conv] Move as a subclause into [expr], immediately before [expr.arith.conv]
Travis CI: Check for undefined references.
[intro.defs] Use https in hyperlink URL; see Directives, Part 2:2018 (#2248)
[class] Reformat paragraph defining standard-layout class
[concepts.{lang,compare,callable}.general] Replace "section" with "subclause".
[basic.start,except] Harmonize references to std::terminate
[dcl.init.ref] Avoid use of 'underlying type' for references
[temp.constr.constr], [iterator.requirements.general], [re.results.size] Replace "section" with "subclause"
[concepts.object] Dissolve single-item subclauses. (#2240)
[re.general] Refer to table as done in the other clauses
[basic.lookup.unqual] Finesse "class definition" footnote to avoid saying that a class definition is one of two components of the definition of a class.
[class.mem] Define complete-class context
[expr.prim.id.{un,}qual] A structured binding name is an lvalue (#2234)
[diff] Use plural form of \diffref for changes affecting multiple subclauses.
[concept.swappable] Remove erroneously included text (#2237)
[{i,o}{string,f}stream.cons] Remove unmatched parenthesis (#2233)
[dcl.attr.contract] Introduce subheadings and reorder paragraphs to fit
[macros] Make colon in Note: and Example: upright and reduce spacing around brackets
[variant.get] Consistently place comma after "otherwise"
[input.iterators,fs.rec.dir.itr.members] Disambiguate phrasing for previous value of iterators
[depr.locale.stdcvt.req] Add normative references for encoding forms
[optional] Move requirements from header synopsis to class template
[basic.fundamental] Add definition of 'fundamental type'
[expr.prim.lambda,depr.capture.this] Replace 'lambda expression'
[dcl.init,over.match.ctor] Clarify copy-initialization for empty arguments.
Drop redundant 'expression'
[lex] Cite ISO/IEC 10646 correctly (#2226)
Restore st ordinals.
Unify typesetting of ordinals.
[atomics.types.operations] Avoid inappropriate use of 'underlying type'
[algorithm.syn] Relocate the "partitions" algorithms (#2219)
[atomics.order] Index entries for memory_order should be in code font (#2222)
[basic.types] Remove stray whitespace in p9 (#2220)
[temp.arg.explicit,temp.mem] Clarify note about explicit template arguments
[move.iterators] Dissolve single-item subclauses.
[output.iterators] Strike useless sentence from note (#2083)
Harmonize phrasings of "this destructor is trivial". (#2191)
[istreambuf.iterator.proxy] correct title and remove default template argument (#2078)
[syserr] Remove class name repeated in subheadings (#2093)
[smartptr] Remove class name repeated in subheadings (#2092)
[vector.cons] vector(const Allocator&) should be noexcept (#2182)
[basic.types] Add index entries for trivial class etc.
[class] Add index cross-references to subentries under "class"
[iterator.requirements.general] Remove stray whitespace in p13 (#2211)
[cpp.cond], [cpp.predefined], [support.limits.general] Add feature-test macros from 2018-06 motions:
[meta.type.trans] Strike redundant and confusing note on type member of basic_common_reference, and replace it with a clarifying description of the primary template.
[meta.trans.other] Replace "(possibly cv) void" with just "cv void".
[concept.equalitycomparable] Remove note that the equality-preserving nature of == implies that == is reflexive. This turns out to not quite be justified by the normative rules.
[concept.boolean] Reword satisfaction rules for Boolean to make them not appear to depend on the "given" lvalues b1 and b2.
[concepts.equality] Add missing paragraph numbers, reorder implicit expression variations in example for clarity and to fix overfull hbox.
[concepts] There need be no "there need be no subsumption relationship"
[structure.requirements] Add paragraph explaining the typographical convention for requirement names
[rand.req.urng] Rework URBG requirements for clarity and simplicitly
[meta.trans.other] Remove basic_common_reference requirement with no normative effect.
[meta.trans.other] Make style of common_type and common_reference consistent
[structure.requirements] Rephrase para 8 for clarity
[concepts.general][library.general] Concepts constrain template arguments, not parameters
[concepts.swappable] Correct example
[customization.point.object][meta.trans.other] Replace "user-defined" added by P0898R3 with "program-defined"
[definitions] Redefine expression-equivalent per ISO directives
[concepts] Rephrase ocurrences of "must"
P0898R3 Standard Library Concepts: full wording
P0898R3 Standard Library Concepts: rename "old" concepts
[depr.c.headers] Undo P0619R4's removal of synopses for <ccomplex>, <cstdalign>, <cstdbool>, and <ctgmath>.
[diff.cpp17.depr] Add paragraph numbering and fix whitespace.
[diff.cpp17.except] Add a note that there is no longer a way to write code that is non-throwing in both C++20 and C++03.
[diff.cpp03.language.support] Remove change described in p1, which is no longer a possible change.
[complex.special] Reorder defaulted complex copy constructor to emphasize relationship between it and the converting constructors.
P0619R4 Review of deprecated facilities
Resolve conflict between 2018-06 LWG Motion 19 and 2018-06 LWG Motion 21.
P0646R1 Improving the return value of erase-like algorithms
P0935R0 Eradicating unnecessarily explicit default constructors from the standard library
[atomics.ref] Reword introductory sentences to avoid overfull hbox.
P0019R8 Atomic ref
P0556R3: Integral power-of-2 operations
P0758R1 Implicit conversion traits and utility functions
P0879R0 Constexpr for swap and swap-related functions
P0887R1 The identity metafunction
[alg.shift] Avoid undefined iterator arithmetic on ForwardIterator. Avoid using the undefined concept BidirectionalIterator.
P0769R2 Add shift to <algorithm>
P1023R0 constexpr comparison operators for std::array
P0759R1 fpos requirements
P0458R2 Checking for Existence of an Element in Associative Containers
[structure.specifications] remove "implementation-defined" from example mentioning [[expects]] and add cross-reference to [[expects]] attribute.
[structure.specifications] replace "paragraph" with "element"
[res.on.required] replace "paragraph" with "element"
P0788R3 Standard Library Specification in a Concepts and Contracts World
P0476R2 Bit-casting object representations
P0475R1 LWG2511 Guaranteed copy elision for piecewise construction
LWG3102 Clarify span iterator and const_iterator behavior
LWG3100 Unnecessary and confusing "empty span" wording
LWG3094 [time.duration.io]p4 makes surprising claims about encoding
LWG3083 What should ios::iword(-1) do?
LWG3080 Floating point from_chars pattern specification breaks round-tripping
LWG3079 LWG 2935 forgot to fix the existing_p overloads of create_directory
LWG3076 basic_string CTAD ambiguity
LWG3074 Non-member functions for valarray should only deduce from the valarray
LWG3067 recursive_directory_iterator::pop must invalidate
LWG3062 Unnecessary decay_t in is_execution_policy_v should be remove_cvref_t
LWG3058 Parallel adjacent_difference shouldn't require creating temporaries
LWG2970 Return type of std::visit misspecified
LWG2139 What is a user-defined type?
[diff.cpp17] Correct description of explicit(bool) compatibility.
P0892R2 explicit(bool)
P0941R2 Integrating feature-test macros into the C++ WD
[dcl.attr.contract] Move according to alphabetical sorting of headings
[except.terminate] Clarify evaluation of a contract
[temp.explicit] Remove redundant rules for contracts
[dcl.attr.contract] Clarify evaluation of non-checked contracts
[dcl.attr.contract] Permit modifications of temporaries within the predicate.
[dcl.attr.contract] Clarify that assertions may apply to a null statement
[dcl.attr.contract] Clarify rules on std::contract_violation
[dcl.attr.contract] Predicates of a contract are potentially evaluated,
[basic.def.odr] Rephrase ODR rule for contracts
[dcl.attr.contract] Reorder paragraphs for more coherence.
[basic.def.odr] Rephrase build level and continuation mode requirements
[dcl.attr.contract] Rephrase comments in examples
[except.terminate] Add contract violation with continuation mode off
[dcl.attr.contract] Avoid duplication of 'renaming' in enumeration
P0542R5 Support for contract based programming in C++
P1120R0 Consistency improvements for <=> and other comparison operators
P1008R1 Prohibit aggregates with user-declared constructors
P1064R0 Allowing virtual function calls in constant expressions
[basic.stc.dynamic.deallocation] Remove confusing note.
P0722R3 Efficient sized delete for variable sized classes
P0528R3 The curious case of padding bits, featuring atomic compare-and-exchange
P1025R1 Update the reference to the Unicode standard
P0732R2 Class types in non-type template parameters
[dcl.fct] Move function definition rule to [dcl.fct.def.general]
[temp.deduct] Forming an array of abstract class type is not deduction failure
P0929R2 Checking for abstract class types
[cpp.subst] Reword paragraph to simplify the logical structure and avoid ambiguous references.
P1042R1 __VA_OPT__ wording clarifications
[depr.capture.this] Reorder so the order of Annex D matches the order of the main text
[depr.capture.this] Replace "can" with "may".
P0806R2 Deprecate implicit capture of this via [=]
CWG2359 Unintended copy initialization with designated initializers
CWG2356 Base class copy and move constructors should not be inherited
CWG2351 void{}
CWG2285 Issues with structured bindings
CWG2249 identifiers and id-expressions
CWG2233 Function parameter packs following default arguments
CWG2339 Underspecified template arguments in structured bindings
CWG2322 Substitution failure and lexical order
CWG2321 Conditional operator and cv-qualified class prvalues
CWG2294 Dependent auto static data members
CWG2293 Requirements for simple-template-id used as a class-name
CWG2254 Standard-layout classes and bit-fields
Add multicolumnfloattable environment.
[dcl.mptr] Add index entry for pointer to member clause (#2111)
[intro.abstract] Move \indextext under \pnum (#2088)
[macros] Remove unused \techterm macro
[macros] Remove accidental whitespace from codeblock environments
[time.zone.db.remote] replace "this section" with "this subclause" (#2103)
[class] Remove misplaced index entries (#2084)
[expr.new] Remove misplaced index entries (#2081)
[cfenv.syn] Add "optional" markers for macros from the C library that are optional (as defined by C)
[macros, rand] Improve the spacing around bit operators. (#2073)
Replace \techterm with \term.
[views.general] Remove redundant introduction for span. (#2062)
[cmp.syn] Rename to [compare.syn] to match the header name
[list.modifiers, forward.list.modifiers] Add missing 'to' in 'referred [to] by' (#2100)
Update configuration to build drafts after N4750.
Update configuration to build new working draft N4750. Add new papers N4749 (Editors' Report) and N4750.
[over.oper] Remove incorrect and redundant sentence in a note.
[over.match,over.match.ref] Drop obsolete mention of class prvalues.
[over.match.copy,over.match.conv] Clarify candidate function selection for references.
[numerics] Remove some maths typesetting idiosyncrasies.
[dcl.array] Clarify that an array bound is deduced in an explicit type conversion
[dcl.type.cv,expr.ass] Clarify the meaning of "modify" for an object.
[enumerated.types,bitmask.types] Use \vdots and \ldots instead of ..... mega-ellipses.
[template.gslice.array.overview] Join two single-sentence paragraphs.
Delete redundant and wrong example
[basic.lval] Add array subscripting to note enumerating xvalues.
[dcl.array]: delete note about non-modifiability of arrays (#2048)
[dcl.array,expr.sub] Consolidate notes on symmetry of array subscripting.
Order library comparisons canonically
[basic.scope.pdecl] Change "type-id" to "defining-type-id"
[class.dtor] Typo.
[pairs.pair] Missed rename from U,V to U1,U2. (#2037)
[class.spaceship] Use math mode for the entire formula, not just for the subscript. (#2034)
[rand] Improve idiosyncratic source code use of math mode.
[cpp, lex, over] Make bnf indentation in source match presentation. (#2035)
[rand] Use \dotsc, not \ldots for comma-separated lists (#2033)
Use \commentellip macro for omitted program text. (#2027)
[time.syn][time.zone] Various editorial fixes (#2028)
[template.slice.array] Harmonize presentation with neighboring parallel statements (#2024)
Clarify which kind of parameter pack is intended. (#2020)
[template.gslice.array.overview] [template.mask.array.overview] [template.indirect.array.overview] Remove misplaced uses of itemdescr
[time.syn] Add comments pointing to specification of literal operators (#2018)
[macros, std] Remove unused "tabular bnf" macros.
[cpp] Dissolve bnftab, use spaces for alignment.
[over.oper] Dissolve bnfkeytab, use space-aligned bnf for all operator listings.
[lex.operators] Dissolve bnfkeytab; use simple spaces for alignment.
[expr, dcl.decl] Use \bnfindent macro instead of its expansion.
[lex.string] Remove unnecessary linebreaks and use bnf instead of bnftab.
[lex.ccon, lex.string] Remove unnecessary linebreaks and use bnf instead of bnftab.
[macros, stmt] Introduce macro \bnfindent and change bnftab to simplebnf.
[class] Replace "ncbnftab" environment with "ncsimplebnf" where no actual tabbing is used.
[class.access] Replace "ncbnftab" environment with "ncsimplebnf" where no actual tabbing is used.
[temp] Replace "ncbnftab" environment with "ncsimplebnf" where no actual tabbing is used.
Update configuration to build working drafts after N4741.
Update configuration to build new working draft N4741.
[any.class] Rephrase small-object optimization
[any.class, optional.optional] Add missing "namespace std" around class definitions.
[utilities] Minor whitespace tweaks
[container.node] Remove placeholder class name from subheadings.
[README, Makefile, travis] Add additional commands to build the xrefdelta glossary
[layout] Place footnotes at the bottom of the page. (#1830)
[temp.concept]: Use note; no syntax for explicit specialization, etc.
Travis CI: Upgrade to newer TeX Live distribution.
[over.match.best] Use new "rewritten candidates" terminology to simplify wording.
[over.match.oper] Refactor the <=> rewrite candidate rules for clarity.
[ostream.manip,time] Replace "can not" with "cannot"
[sequence.reqmts] Convert advice on container selection into a note.
[implimits] Clarify meaning of implementation limits
[lib] Replace 'requirements of FrobMunchable'
[lib] Use table references for CamelCase requirements.
Use \tref for table references
[lib] Use "shall satisfy", not "shall meet", for requirements.
[macros] Define \tref for table references.
[containers] Removed redundant specifications of non-member swap
[expr.ass] Clarify description of simple assignment
[associative.reqmts] Turn emphasis into a note.
[expr.dynamic.cast] Remove redundant statements on casting away constness
[stmt.while] Format the `while` rewrite rule the same way we format rewrite rules for other statement forms.
[stmt.while] Generalize the equivalence for a declaration as the condition.
[over.match.oper] Add a note for conversions on synthesized candidates.
[utility] Convert hanging paragraph into [utility.syn] introduction.
[unord.req] Index unordered associative container members in the library names index, not the main text index.
'floating type' is not a defined term in C++
[unique.ptr] Remove definition of 'transfers ownership'.
[dcl.spec.auto] Use of undeduced placeholder types
[std] Review cross-references to [expr.prim]
[lib] Avoid 'shall' and 'should' in footnotes.
[reverse.iterators] Dissolve single-item subclauses. (#1832)
[xrefdelta] Use \deprxref (#1961)
[locale] Remove class name repeated in subheadings (#1932)
[containers] Remove class name repeated in subheadings (#1933)
[expr.rel] Clarify auxiliary partial ordering (#1977)
Remove uses of 'concept' with ordinary English meaning. (#1918)
[sequences] Add exposition-only alias template for deduction guides.
[associative], [unord] Use \placeholder for deduction guide alias templates.
[utilities] Move chars_format bitmask statement to [charconv.syn] (#1992)
[lib] Use \xrefc instead of \xref ISO C
[lib] \xref may refer to standards other than C
Index all mentions of 'implementation-dependent' (#1967)
Typeset ordinals as "i^\text{th}" instead of "i-th" (#2003)
[ios.base] Disambiguate names to distinguish parameters from static data members (#1969)
[support.types.byteops] Move 'Remarks' to after 'Effects' (#1973)
[time.duration.nonmember] Replace type designator "CR" with its definition (#1985)
[conv.fctptr, special] Pointers to members designate their target (#1968)
CWG2345 [stmt.stmt, stmt.dcl] Jumping across initializers in init-statements and conditions (#1949)
[dcl.fct.def.delete] Adjust 'onlydouble' example. (#1950)
[index] Do not index examples (#1979)
[re.regex] Avoid duplicate list of constants (#1984)
[conv,expr,temp] Use \cv{} where appropriate (#1995)
[macros] Allow \cv macro to be used in math mode
[class.temporary] Repair example (#1944)
Remove [facets.examples]. (#1957)
[error.reporting] Change \rSec3 to \rSec2 (#1954)
[dcl.dcl] Replace \term with  \defn or \defnx (#1941)
[access] Remove inappropriate uses of \term (#1940)
[intro.abstract] Change example for unspecified behavior. (#1930)
[insert.iterators] Dissolve single-item subclauses. (#1924)
P0858R0 Constexpr iterator requirements
[views.span] Editorial review fixes:
P0122R7 Span: bounds-safe views for sequences of objects
[ostream.manip] Rephrase references to exposition-only variable "buf", and add "Calls" to Effects: clause to match our style guide.
P0753R2 Manipulators for C++ Synchronized Buffered Ostream
P0551R3 Thou Shalt Not Specialize std Function Templates!
P0966R1 string::reserve Should Not Shrink
Add normative references to ISO 8601 and RFC 6557, referenced normatively by P0355R7.
P0355R7 Extending <chrono> to Calendars and Time Zones
P0809R0 Comparing Unordered Containers
P0754R2 <version>
LWG3075 basic_string needs deduction guides from basic_string_view
LWG2946 LWG 2758's resolution missed further corrections
LWG3051 Floating point classifications were inadvertently changed in P0175
LWG3048 transform_reduce(exec, first1, last1, first2, init) discards execution policy
LWG3045 atomic<floating-point> doesn't have value_type or difference_type
LWG3043 Bogus postcondition for filesystem_error constructor
LWG3042 is_literal_type_v should be inline
LWG3041 Unnecessary decay in reference_wrapper
LWG3039 Unnecessary decay in thread and packaged_task
LWG3035 std::allocator's constructors should be constexpr
LWG3034 P0767R1 breaks previously-standard-layout types
LWG3030 Who shall meet the requirements of try_lock?
LWG3026 filesystem::weakly_canonical still defined in terms of canonical(p, base)
LWG3017 list splice functions should use addressof
LWG3015 copy_options::unspecified underspecified
LWG3014 More noexcept issues with filesystem operations
LWG3013 (recursive_)directory_iterator construction and traversal should not be noexcept
LWG3009 Including <string_view> doesn't provide std::size/empty/data
LWG3007 allocate_shared should rebind allocator to cv-unqualified value_type for construction
LWG3005 Destruction order of arrays by make_shared/allocate_shared only recommended?
LWG3004 [string.capacity] and [vector.capacity] should specify time complexity for capacity()
LWG3000 monotonic_memory_resource::do_is_equal uses dynamic_cast unnecessarily
LWG2989 path's stream insertion operator lets you insert everything under the sun
LWG2975 Missing case for pair construction in scoped and polymorphic allocators
LWG2969 polymorphic_allocator::construct() shouldn't pass resource()
LWG2851 std::filesystem enum classes are now underspecified
LWG2849 Why does !is_regular_file(from) cause copy_file to report a "file already exists" error?
LWG2843 Unclear behavior of std::pmr::memory_resource::do_allocate()
LWG2816 resize_file has impossible postcondition
LWG2243 istream::putback problem
LWG2164 What are the semantics of vector.emplace(vector.begin(), vector.back())?
P0905R1 Symmetry for spaceship
P0479R5 Likely and unlikely attributes
[temp.variadic] Clarify what the elements of pack expansions are.
P0780R2 Allow pack expansion in lambda init-capture
[temp.res] Convert note to footnote to avoid breaking up flow, add back introductory sentence for the template validity rule, and fix formatting of example.
[temp.res] Clarify that we're talking about the declarator-id of the function or function template, not that of the parameter-declaration.
P0634R3 Down with typename!
P0961R1 Relaxing the structured bindings customization point finding rules
P0969R0 Allow structured bindings to accessible members
P0962R1 Relaxing the range-for loop customization point finding rules
P0840R2 Language support for empty objects
[diff] Replace "as the following example illustrates" with "For example" for consistency.
[diff] Be consistent in formatting and add introductions to examples.
CWG2299 constexpr vararg functions
CWG2260 Explicit specializations of deleted member functions
CWG2255 Instantiated static data member templates
CWG2237 Can a template-id name a constructor?
CWG2235 Partial ordering and non-dependent types
CWG2234 Missing rules for simple-template-id as class-name
CWG2229 Volatile unnamed bit-fields
CWG2227 Destructor access and default member initializers
CWG2226 Xvalues vs lvalues in conditional expressions
CWG2164 Name hiding and using-directives
CWG2092 Deduction failure and overload resolution
CWG2088 Late tiebreakers in partial ordering
CWG2081 Deduced return type in redeclaration or specialization of function template
CWG2059 Linkage and deduced return types
CWG1983 Inappropriate use of virt-specifier
CWG1910 “Shall” requirement applied to runtime behavior
CWG1893 Function-style cast with braced-init-lists and empty pack expansions
[expr.reinterpret.cast] Clarify that pointer->int type restriction looks at the type not the pointer value.
[dcl.type.cv] Do not use \grammarterm in heading
[dcl.dcl] Change example for static_assert (#1923)
[string.classes] Remove class name repeated in subheadings (#1928)
[depr.str.strstreams] Add synopsis for <strstream> header (#1922)
[rand.req.eng] Use \text, not \mbox, in math mode (#1921)
Update configuration to build working drafts after N4727.
Update configuration to build new working draft N4727.
[travis] Run latexmk silently. Vastly reduces log output.
Remove non-\grammarterm's from the index of grammar terms.
[basic.def] 'class name declaration' is undefined.
[macros, back] Put all mentions of \grammarterm into the grammar index; adjust introductory text for index of grammar productions. (#1858)
[travis-ci] Add check for \opt without argument
[conv] Replace \term with \defn or \defnx
[over] Replace \term with \defnx to add index entries
Use \tcode for return/if/switch statement.
[atomics.types.operations] Clarify compare_exchange note
[filesystems] 'dot' and 'dot-dot' are not \grammarterms
[over.best.ics] Adjust example for [over.match.list] case
[class] Replace \term with \defn or \defnx
[cpp] Replace \term with \defn
[library] Replace \term with \defnx
Clean up some index entries related to functions
[string.view.template] Add missing stable reference
Constant expressions can have "library UB"
[temp.dep.type] Clarify that a simple-template-id denotes a type
[basic.scope.class,basic.lookup.unqual] Use the term "default member initializer" (#1892)
[dcl.enum] use indefinite article before "fixed underlying type"
[namespace.udir] Ambiguous lookup results are covered in [basic.lookup]
[dcl.struct.bind] Clarify that structured bindings are entities (as contrast to names)
[array.members] Update the description for array::data to match that of vector::data (#1904)
[fs.rec.dir.itr.members] Grammar fixes. (#1903)
[support.types.byteops, re.synopt] Replace \^ with \caret (#1902)
[class.temporary, temp.inst, temp.dep, temp.res] Capitalize some sentences.
[dcl.init.ref] Remove an unnecessary level of bullet nesting.
[variant.visit] Rephrase specification of 'visit' to be more technically correct and precise
[basic.lookup] Clarify name lookup consistency
[algorithms] Uniformize spelling of "in the initializer list"
[algorithms] Add missing full stops to inline Returns elements
[swappable.requirements] Remove inappropriate \tcode from 'swappable'
[travis] Add test for extraneous blank lines at the end of files
[variant.visit] qualify std::forward for consistency
[structure.requirements] Add missing \tcode
Use 'one of' formulation for binary-digit
[re.regex.construct] Add missing default argument to itemdecl (#1893)
[basic.string] State class invariants about [data(), data() + size()] in the introduction. (#1879)
[atomics.types.memop] Add missing `\pnum`s (#1890)
[re.def] Clarify index entry for "sub-expression"
[headers, diff.mods.to.headers] Re-add main index entries for C headers that do not exist in C++
[tables] Remove unused table macros
[diff.mods.to.headers] Remove non-existent headers from the indexes (#1878)
[string.cons] Replace postcondition tables by ordinary Postcondition elements
[utilities] Remove \placeholder when naming a specific type (#1869)
[charconv.to.chars, charconv.from.chars] Replace 'minus sign' with '-' (#1862)
[fs.path.decompose] 'root-path' is not a grammar non-terminal (#1864)
[intro.scope] C++ is not a strict superset of C
[xrefdelta] Add deprecation of [util.smartptr.shared.atomic] (#1857)
[basic.compound, conv.ptr] Improve index for 'null pointer value' (#1855)
[class.friend, expr.ref, expr.mptr.oper] Use \grammarterm instead of \term when appropriate (#1856)
Update configuration for building drafts after N4713.
Update configuration to build new working draft n4713.
Update Makefile to rebuild xrefdelta.
[basic] Minor whitespace improvements: align comments better and fit comments on fewer lines
[allocator.adaptor.syn] Delete duplicate declarations of relational operators
[temp.constr.order] In definition of 'subsumes', remove confusing introductory paragraph.
[diff] Introduce numbered paragraphs
[lib] Harmonize spacing for template headers.
[basic.link] Entities declared in an unnamed namespace never have external linkage.
[temp.arg.explicit] Remove note obsoleted by P0846R0
Use \opt{arg} instead of suffix \opt{}
[fs.op.funcs] Separate effects from returns. (#1848)
[complex.numbers] Use \xref for references to the C standard.
Create a new index for library headers
[basic.life],[mem.res.private],[mem.res.pool.mem],[mem.res.monotonic.buffer] fix cross-references
[func.require] Clarify which assignment operators
Remove \tilde in favour of \~. (#1851)
[lib] Harmonize punctuation of 'Effects: Equivalent to' (#1815)
[basic.types] Add missing "be" in note (#1839)
[lex.ccon] Align char16_t phrasing to UTF-8 one (#1847)
[tuple.tuple] Remove extra space before class scope (#1846)
[complex{,.special,.members}] Use injected-class-name in class definitions and itemdecls
[vector.bool] Use injected-class-name in synopsis (#1844)
[std] Remove unused package 'xspace'
[macros] Remove \xspace from \opt
Replace \opt with \opt{}
[diff.cpp17.library] Add Annex C entry for new headers <compare> and <syncstream> added since C++17.
Use the terms "single-object delete expression" and "array delete expression" as definitions, removing the italics when not appropriate.
[structure.summary] Remove obsolete paragraph about Note(s): and Example(s): elements that we no longer provide
[unord.req] Spell out the behaviour of cbegin/cend, remove ambiguous note
Index additional member typedefs. (#1712)
[util.sharedptr] Dissolve subclause and integrate contents into parent. (#1814)
[expr, over] Add cross-references for 'usual arithmetic conversions'. (#1804)
[macros] Use standard description labelling for stages
[facet.num.put.virtuals] Move long code fragment to codeblock
[macros] Remove unnecessary redefinition of \emph
[alg.merge] Add hyphenation hint to avoid overfull hbox.
[macros] Replace \xspace with \space in library description macros
[structure.specifications] Do not use library description macros in running text
[rand] Remove non-macro use of \xspace
Replace \ntbs with \ntbs{} and \ntmbs with \ntmbs{}
[macros] remove \xspace from \NTS
Replace \Cpp and related macros with \Cpp{} and similar.
[macros] Remove \xspace from macros taking a mandatory argument.
[atomics.types.operations] Remove spurious paragraph break. (#1834)
Consistent comma after e.g. and i.e.
[over.match.best] Remove meaningless "i.e."
[macros] Introduce \indexhdr and apply it for all headers. (#1810)
[alg.partition] Use established terminology 'partitioned with respect to'
[binary.search] Formulate partitioning requirements in the same style as all the other related algorithms do
[expr.compound] Expression operators do not 'return' results. (#1818)
[strings.general] Use plural "string classes" (#1823)
[variant] Move 'Otherwise' to start of following bullet. (#1813)
[readme] Add Arch Linux getting started instructions (#1831)
[utilities] Add missing charconv entry to summary table
P0457R2 String Prefix and Suffix Checking
P0616R0 Depessimize numeric algorithms with std::move
P0020R6 Floating point atomic
P0718R2 Atomic shared_ptr
P0415R1 Constexpr for std::complex
[algorithm.syn] Reformat functions to not end in "(" for consistency.
[algorithm.syn],[alg.*] Remove space in "template <" for consistency.
P0202R3 Add Constexpr Modifiers to Functions in <algorithm> and <utility> Headers
P0202R3 Add constexpr modifiers to functions in <algorithm> and <utility> Headers
P0653R2 Utility to convert a pointer to a raw pointer
[syncstream] Editorial cleanups throughout the wording.
P0053R7 Synchronized Buffered Ostream
[atomics.order] Index the memory_order enumeration and its enumerators.
[everywhere] Replace references to memory_order_* valus with references to the memory_order::* enumerators.
P0439R0 Make std::memory_order a scoped enumeration
P0600R0 [[nodiscard]] in the Library
[variant.ctor, variant.assign] Break long listing sentences up into actual lists.
[any.nonmembers] Use remove_cvref_t.
P0777R1 Treating Unnecessary decay
P0550R2 Transformation Trait remove_cvref
LWG 2958 Moves improperly defined as deleted
LWG3024 variant's copies must be deleted instead of disabled via SFINAE
LWG3001 weak_ptr::element_type needs remove_extent_t
LWG2998 Requirements on function objects passed to {forward_,}list-specific algorithms
LWG2993 reference_wrapper<T> conversion from T&&
LWG2988 Clause 32 cleanup missed one typename
LWG2982 Making size_type consistent in associative container deduction guides
LWG2981 Remove redundant deduction guides from standard library
LWG2980 Cannot compare_exchange empty pointers
LWG2979 aligned_union should require complete object types
LWG2978 Hash support for pmr::string and friends
LWG2977 unordered_meow::merge() has incorrect Throws: clause
LWG2976 Dangling uses_allocator specialization for packaged_task
LWG2972 What is is_trivially_destructible_v<int>?
LWG2965 Non-existing path::native_string() in filesystem_error::what() specification
LWG2964 Apparently redundant requirement for dynamic_pointer_cast
LWG2953 LWG 2853 should apply to deque::erase too
LWG2952 iterator_traits should work for pointers to cv T
LWG2950 std::byte operations are misspecified
LWG2948 unique_ptr does not define operator<< for stream output
LWG2945 Order of template parameters in optional comparisons
LWG2944 LWG 2905 accidentally removed requirement that construction of the deleter doesn't throw an exception
LWG2941 [thread.req.timing] wording should apply to both member and namespace-level functions
LWG2935 What should create_directories do when p already exists but is not a directory?
LWG2870 Default value of parameter theta of polar should be dependent
P0315R4 Lambdas in unevaluated contexts
P0767R1 Deprecate POD
[expr.prim.lambda.closure] Reverse description of copy constructor and assignment operator
P0624R2 Default constructible and assignable stateless lambdas
P0692R1 Access Checking on Specializations
P0857R0 Functionality gaps in constraints (Part 2 of 2)
P0857R0 Functionality gaps in constraints (Part 1 of 2)
Cross-referencing and formatting fixups for <=> wording based on editorial review.
[expr], [cmp.alg] Rephrase to fix overfull hboxes.
P0768R1 Library Support for the Spaceship (Comparison) Operator
[expr.spaceship] Move statement that builtin <=> is a prvalue to the front and reword to fix overfull hboxes. Extend note on <compare> requirement to explain how "auto" is relevant.
P0515R3 Consistent comparisons
P0859R0: Core Issue 1581: When are constexpr member functions defined?
[dcl.fct.def.default] Use variables to clarify which types we are being compared.
P0641R2 Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)
P0846R0 ADL and Function Templates that are not Visible
P0588R1 Simplifying implicit lambda capture
P0614R1 Range-based for statements with initializer
CWG2338 Undefined behavior converting to short enums with fixed underlying types
CWG2315 Whst is the “corresponding special member” of a variant member?
CWG2313 Redeclaration of structured binding reference variables
CWG2177 Placement operator delete and parameter copies
CWG2307 Unclear definition of “equivalent to a nontype template parameter”
CWG2305 Explicit instantiation of constexpr or inline variable template
CWG1862 Determining “corresponding members” for friendship
CWG2342 Reference reinterpret_cast and pointer-interconvertibility
[diff.cpp17] Remove stray linebreak.
Hyphenate 'pointer-to-member' when it is an adjective and define the adjective.
Do not use \tcode for non-syntax.
Remove \tcode from 'const object'.
Use 'subclause', not 'section'.
[conv.rank] Move from [conv] to [basic.types] (#1802)
Use 'trailing requires-clause'
[dcl.init] Clarify introduction
[array] Dissolve single-item subclauses.
[intro.execution] Clarify full-expression in example.
[expr] Add subclauses and adjust cross-references to [expr].
[algorithms.general] & [algorithm.syn] name "mutating sequence operations" consistently (#1801)
[lib] Harmonize introductory comments in synopses (#1775)
[locale.moneypunct.virtuals] Add reference to ISO 4217. (#1779)
[lib] Add hyphen to 'well-defined' (#1776)
[intro], [basic] Rearrange subclauses
[basic.lookup.argdep] Correct xref to point to the normative invisible friend rule.
[over.built] Improve placeholder phrasing
[meta.endian] Clarify wording regarding size of scalar types
[tuple.cnstr] Add missing \tcode (#1796)
[any.class] Revert dot to comma typo from bdff8687c (#1795)
[basic.ios.members], [streambuf.virt.put], [cmplx.over] replace enumerated lists with itemized
[fstream], [fs.class.directory_entry] qualify filesystem::path consistently
[implimits] Add cross-references to the definition of the respective feature
[defns.referenceable] Remove duplicate 'an'
[array.size] Remove full member declaration from itemdecl. (#1790)
[expr.prim.lambda.capture] Move discusssion of capture-by-reference of references
[travis] Make overfull hboxes a presubmit error. (#1780)
Update configuration for building drafts after n4700.
Update configuration to build new working draft n4700.
[styles,macros] Improve automatic page breaking
[styles] Check for listings.sty version 1.6
[styles] Make page breaks before/after/inside listings configurable
[util.smartptr.shared.cmp] Add "typename" for dependent name (#1770)
[unord.map.overview], [unord.multimap.overview] Use iter_val_t instead of iter_value_t (#1772)
Use 'well-formed' (with hyphen) consistently.
[stringbuf.virtuals] Rephrase DR 453 resolution for seekoff
[intro.races] Add index entries for notions of coherence.
[thread.condition.condvarany] Remove note made incorrect by LWG 2135.
[fs.filesystem.syn] fix ordering of exists and equivalent
[class.virtual] Correct function names in example comments.
Front matter: remove "Contents" entry from itself. Remove list of tables and list of figures. Reorder cross-reference bullets in "Terms and definitions".
[mem.res.private] Remove misleading 'typical' in note.
[dcl.fct.def.general] Typeset placeholder consistently. (#1760)
[syserr] Whitespace fixes (indentation)
[over] Minor horizontal whitespace adjustment for comments
[utilities] Whitespace cleanup
[memory.syn, unique.ptr] Add explanatory comments to make_unique overloads similar to the ones for make_shared, and mild presentational cleanup
[meta.type.synop] Whitespace harmonization
[util.smartptr] Minor whitespace cleanup
[utilities] Add missing "namespace std" to some class definitions
[containers] Remove repeated statement of relational operator declarations (#1759)
[unique.ptr, util.smartptr.shared] Remove redundant repetitions of declarations that already appear in the synopsis (#1758)
[numerics] Improve linebreaking in synopses and declarations
[thread.sharedmutex.class] Formatting fixes.
[dcl.type.simple] Improve naming of template specialization in example.
[thread.req.timing] Use mathematical symbols
[thread] Harmonize presentation of synopses and declarations
[string.assign] Add missing "Returns:".
[strings] Improve linebreaking in synopses and declarations
[containers, iterators] Improve linebreaking in synopses and declarations
[utilities, locales] Remove ad-hoc page breaks
[syserr.compare] Format code blocks more uniformly; remove surprising paragraph breaks from post-conditions.
[std, layout] Use ISO 216:2007-defined paper size (A4).
[language.support] Minor whitespace adjustments
[cover-reg] Fit copyright box in the column
[dcl.attr.depend] Remove intra-example paragraph break
[futures.async] remove parens from DECAY_COPY()
[xrefdelta] Add xref for removed [fs.definitions] subclause.
[class.copy.assign] Remove extraneous space before the first word of para 1
[diff.cpp14.library] Add Annex C entry for new headers in C++17
Convert "must"s in normative wording that do not indicate logical necessity to a different form.
Replace "this International Standard" with "this document" when referring to the document as a body of text.
[support.start.term] Remove note that is not justified by normative wording.
[temp.over.link] Change leading letter in comments in example to lowercase.
[over.match.funcs] Remove the number of overload resolution contexts from the introductory text.
[intro.defs, definitions, fs.definitions] change notes in Terms and Definitions to say "Note X to entry"
[fs] Integrate file system terms and definitions into the text at appropriate places.
[fs.definitions] Replace "Terms and definitions" formatting with inline definitions.
Update [intro.defs] and [definitions] to use (roughly) substitutable phrases as definitions.
[intro.refs] Remove redundant reference to C11 Technical Corrigendum 1.
[any.cons] fix tag typename; "in_place<T>" should be "in_place_type<T>"
[algorithms.parallel.user] remove stray full stop
[support.general, depr.cpp.headers] remove index entries for now-deprecated headers and symbols, and add missing index entries for deprecated headers.
[alg.reverse] remove duplicated Requires: element
[travis] Add newly required package
Consistently place footnote mark after sentence full stop, not before it.
[expr.prim.req.compound] Adjust description in example to be easier to understand.
[temp] Minor whitespace adjustments and harmonization: commas, space around operators, removal of extraneous intra-paragraph paragraph breaks around notes and examples
[temp.deduct] Split long paragraph 8
[dcl.decl] Minor horizontal whitespace harmonization
[memory.syn, util.smartptr.shared] Add missing {make,allocate}_shared declarations to synopsis
[defns.well.formed] remove full stop
Remove accidentally committed tmp.tex.
[dcl.arrays] Remove redundant whitespace
Update configuration for building drafts after N4687.
Update configuration to build new working draft n4687.
Add entries to main index for 'move' and 'forward'.
[dcl.array] Consolidate redundant, repetitive, and somewhat incorrect examples and notes on multidimensional arrays.
[everywhere] Rework how we mark up inline references.
[expr.const] Move p7 next to p3.
[expr.type.conv] Clarify if ... otherwise ladder.
Capitalize after "Effects:"/"Returns:"/"Throws:"/"Requires:".
[expr] Use 'possibly converted' for discarded-value expression.
[class.mfct.non-static], [class.this] Define and use cv member function.
Change the return type of monotonic_buffer_resource's deleted assignment
[string.cons] Consolidate two functions into one description
Remove need to redefine \definition.
Replace \term+\indextext pairs with \defn(x).
[class.temporary] Remove note giving questionable implementation advice.
[over.call.object] Reference postfix-expression in call syntax correctly
[xrefdelta] one remaining \CppXIV -> \CppXVII
[temp] Add missing ';' to grammar for concept-definition.
[temp.constr.normal] Give a proper definition for "normalization".
[temp.constr.order] Clarify description of subsumption and ordering by constraints.
P0674r1 Extending make_shared to Support Arrays
[dcl.init] Replace \tcode with more semantically appropriate \terminal
[everywhere] Address a collection of minor editorial issues related to the concepts wording.
[dcl.fct.def] Reword = default ; and = delete ; introductory text for clarity.
[dcl.fct] Move use of "parameter-type-list" to after its definition.
[everywhere] Consistently prevent linebreaks before a parenthesized \ref.
[expr.prim.id] Add comma in example.
[expr.prim.req] Use grammar terms rather than undefined phrases when referring to kinds of *requirement*.
[meta.endian] Simplify wording, avoid "shall"
P0463R1 Endian, just endian
Prevent linebreak between text and parenthesized \refs.
Remove trailing whitespace. (#1682)
P0739R0 Some improvements to class template argument deduction integration into the standard library
P0682R1: Repairing elementary string conversions
LWG2901 Variants cannot properly support allocators
LWG2956 filesystem::canonical() still defined in terms of absolute(p, base)
LWG2974 Diagnose out of bounds tuple_element/variant_alternative
LWG2966 Incomplete resolution of US 74
LWG2961 Bad postcondition for set_default_resource
LWG2954 Specialization of the convenience variable templates should be prohibited
LWG2942 LWG 2873's resolution missed weak_ptr::owner_before
LWG2940 result_of specification also needs a little cleanup
LWG2937 Is equivalent("existing_thing", "not_existing_thing") an error?
LWG2932 Constraints on parallel algorithm implementations are underspecified
LWG2783 stack::emplace() and queue::emplace() should return decltype(auto)
LWG2597 std::log misspecified for complex numbers
LWG2593 Moved-from state of Allocators
LWG2444 Inconsistent complexity for std::sort_heap
Clear out the "cross references to prior standard" section now that we've branched C++17.
[temp.inst] Tweak explanation in example.
[temp.concept] Remove redundancy: the global scope is a namespace scope.
[temp.mem.func] Add introductory text to new example to separate it from the prior example.
[expr.prim.req.compound] Switch to passive voice.
[temp.param] Switch to passive voice.
[temp] Add note around example to explain what it's an example of, and add missing paragraph numbers.
[over.over] Switch to passive voice.
[expr.prim.req.nested] Remove incorrect (out of date) note.
[expr.prim.req] Remove redundant note that repeats what the prior example just said.
[expr.prim.req] Repair meaningless "A requirement is one that [..]" phrasing.
[temp.constr.atomic] Split long paragraph into three.
P0734R0 Concepts
P0702R1 Language support for Constructor Template Argument Deduction
P0428R2 Familiar template syntax for generic lambdas
[filebuf.virtuals] Refer to return values specified in Effects
P0329R4 Designated Initialization Wording
P0306R4 Comma omission and comma deletion
P0409R2 Allow lambda capture [=, this]
[expr.mptr.oper] Rephrase wording for symmetry with P0704R1.
P0683R1 Default member initializers for bit-fields
CWG1299 “Temporary objects” vs “temporary expressions”
CWG2290 Unclear specification for overload resolution and deleted special member functions
CWG2287 Pointer-interconvertibility in non-standard-layout unions
CWG2273 Inheriting constructors vs implicit default constructor
CWG1836 Use of class type being defined in trailing-return-type
CWG1704 Type checking in explicit instantiation of variable templates
[iterator.synopsis, template.bitset] Add missing whitespace. (#1673)
CWG1523 Point of declaration in range-based for
CWG2253 Unnamed bit-fields and zero-initialization
[expr.mptr.oper] Index second definition of 'object expression'. (#1669)
[dcl.enum] Add index entry for 'fixed' underlying type. (#1667)
[re.traits] Use \placeholdernc for a placeholder. (#1668)
[stringbuf.virtuals] Note in Returns: element that the return value for non-error cases is specified in the Effects: element.
[variant.visit], [tuple.apply], [futures.task.members] add cross-references for INVOKE to [func.require]
Add missing index entries for 'alignas', alignof', 'noexcept'.
Move reference to LIA-1 into a new section 'Bibliography'
Clarify a note on cmpxchg
[fs.dir.entry.obs] Add linebreak to avoid overfull hbox.
[filesystem_error.members] Rename to [fs.filesystem_error.members]
[stringbuf.virtuals] balance parentheses in seekoff table
[memory.syn] Add reinterpret_pointer_cast to synopsis
[class.union] Only standard-layout unions are pointer-interconvertible with their members.
Replace 'encouraged' with 'should'.
[temp.deduct.type] Use \cv instead of \grammarterm{cv-list}.
[string.streams], [file.streams] Use simple-template-id when naming base classes.
Spell 'well-defined' with a hyphen when it is an adjective.
[basic.def.odr] Replace mid-sentence period with "; and"
[lex.string] Remove mention of trigraphs from raw string literal example.
[except.handle] Add index entry for 'active handler'. (#1595)
[basic.stc.dynamic.safety] Update cross-reference to effects of using invalid pointer values. (#1636)
For 'signal-safe', refer to [support.signal], not [csignal.syn]. (#1640)
[any.nonmembers] fix LWG2769 resolution
[lex.phases] Capitalize example. (#1623)
[dcl.attr.depend] Remove misplaced paragraph break. (#1622)
[fs.filesystem.syn] Update synopsis for filesystem::absolute
[class.protected] Add missing full stop at end of sentence. (#1614)
[fs.class.path] Add missing semicolon
[cstring.syn], [cwchar.syn] Add a bunch of missing semicolons
[except.spec] Add missing '~' in comment in example.
[filesystems] Change '!predicate' phrasing to 'predicate is false'.
[language.support] Reserve \xref for references to the C standard.
[basic.start.main] Remove space before plural 's'. (#1596)
[tables] Do not show labels for 'concepttable' environment. (#1589)
[lib] Use nullptr, not 0, for null pointer values. (#1586)
[support.runtime, list.ops] Move non-code punctuation out of \tcode. (#1593)
[basic.scope.pdecl] Capitalize note. (#1590)
[expr.ass] Replace text \term with code \placeholder for "op="
[any.cons] Use 'contained value', not 'contained object'. (#1582)
[meta.trans.other] Use \tcode instead of \textit
[any.bad_any_cast] fix incorrect references to bad_any_access
[localization] Whitespace adjustments
[facet.ctype.char.virtuals] Add missing \pnum
[category.ctype] Replace unnecessary placeholder type by the usual 'see below'
[input.output] Minor whitespace adjustments
[system_error.syn] Minor whitespace adjustments
[basic.string] Minor whitespace adjustments
[time.duration.cast] Remove stray whitespace
[bitset] Minor whitespace adjustments
[utility] Change 'nonzero' to more appropriate words. (#1575)
[mem.poly.allocator.mem], [string.view.iterators] Replace 'method' with 'member function'.
[intro.memory] Replace undefined 'field' with 'member' in note.
Remove stray space from reference_wrapper's "public:"
[futures.task.members] Use math mode for indices and non-C++ ellipses
[func.memfn] Use math mode for indices and non-C++ ellipses
[func.bind.bind] Use math mode for non-C++ ellipses
[func.require] Use math mode for indices and non-C++ ellipses
[dcl.type.simple] Use teletype font for type names in table 11.
[numerics] Use absolute-value markers in math mode. (#1566)
[rand, atomics] Don't needlessly escape underscores. (#1568)
Update configuration for building papers after N4659.
Update configuration to build new working draft n4659.
[cover-reg] Spacing improvements: relax bounding box, align E.164 identifiers
[allocator.requirements] Separate floats better
[intro.refs], [intro.defs] Update introductory text to match latest ISO Directives.
Replace "this International Standard" with "this document" in some places where it is a clear improvement.
[fs.path.generic] Refactor generic pathname grammar to remove redundancy and ambiguity.
[depr.func.adaptor.typedefs] Clarify that reference_wrapper does not define argument_type for non-nullary member function pointer types.
Consistently use bold font for table headers.
[istreambuf.iterator] Join subsections for operations descriptions.
[containers] Rephrase deduction guide constraints
[basic.start.static] Remove spurious paragraph break, found by review committee.
[fs.path.generic] Move descriptions of grammar elements out of the grammar and into separate paragraphs, and format path grammar as we format the language grammar.
[fs.op.copy], [fs.op.copy_file] Rephrase requirements on copy_options.
[partial.sort] Remove 'It takes' from complexity specification.
[diagnostics] Minor spacing fixes.
[language.support] Minor comment compaction and realignment
[cstddef.syn, support.types.byteops] Tactical whitespace tweak for better pagination.
[using.linkage, handler.functions] Remove inappropriate use of \xref
[character.seq] Use \tcode and \placeholder to style placeholders
[stmt.ranged] Do not use \grammarterm for begin-expr and end-expr. (#1558)
[enumerated.types, bitmask.types] Add missing \tcode in a few places, use maths subscripts for indexed placeholders.
[cpp] Align comments to common columns and fix some typography
[dcl.fct] Remove stray space
Move \opt out of \grammarterm (#1554)
[except] Minor comment compaction and realignment
[except] Change '// Ill-formed' to '// ill-formed'
[temp] Minor comment compaction and realignment.
[temp.class.spec.mfunc] Add missing comment to example
[string.cons] Add missing \pnum
Add first draft of Editors' Report N4661.
[xrefdelta] Mark locale.stdcvt as moved to depr.locale.stdcvt, not removed. Improve heading name.
[back] Use proper styling of 'C++ 2014'
[futures.async] Reduce spacing after INVOKE, DECAY_COPY
[xref] Add glossary of cross-references between C++14 section labels and C++17 section labels.
Reduce spacing after INVOKE, DECAY_COPY, GENERALIZED_SUM, GENERALIZED_NONCOMMUTATIVE_SUM, and node_handle throughout.
Consistently use 'operator""x' rather than 'operator "" x' throughout standard.
libindex: fix collation of 'operator^='.
[filesystem] Shorten stable names and add "fs." prefixes
[any.modifiers] fix emplace return type for 'any' (#1545)
[basic.link, expr.add, cstdlib.syn] Small fixes regarding spacing before commas (#1544)
[gram.cpp] Add space before comma in bnf. (#1525)
[fs.enum] Remove unnecessary \clearpage
[dcl.init.list] Replace misuse of \grammarterm with \defn
Move plural 's' out of \grammarterm.
[expr.prim.lambda] Move syntactic restriction on decl-specifier-seq to the front.
[expr.prim.lambda] Split specification of lambda expressions into subsections.
Move specification of deprecated headers to Annex D
Update cover sheet to prepare for DIS.
Update value of __cplusplus to 201703L.
Add acknowledgement of ECMAScript trademark.
P0574r1 Algorithm Complexity Constraints and Parallel Overloads
P0467R2 Iterator Concerns for Parallel Algorithms
P0452R1 Unifying <numeric> Parallel Algorithms
P0523r1 Wording for CH 10: Complexity of parallel algorithms
P0518r1 Allowing copies as arguments to function objects given to parallel algorithms in response to CH11
Editorial fixes for P0317R1.
[path.gen], [fs.op.absolute] Edits to fix overfull hboxes
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (19)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (18)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (17)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (16)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (15)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (14)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (13)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (12)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (11)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (10)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (9)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (8)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (7)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (6)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (5)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (4)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (3)
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (2)
P0156R2 Variadic lock_guard (Rev. 5)
Add instructions for people on Fedora and Debian-like systems. (#1533)
P0433R2 Integrating template deduction for class templates into the standard library
LWG2921 packaged_task and type-erased allocators
LWG2878 Missing DefaultConstructible requirement for istream_iterator default constructor
LWG2788 basic_string range mutators unintentionally require a default constructible allocator
LWG2861 basic_string should require that charT match traits::char_type
LWG2807 std::invoke should use std::is_nothrow_callable
LWG2908 The less-than operator for shared pointers could do more
LWG2876 shared_ptr::shared_ptr(const weak_ptr<Y>&) constructor should be constrained
LWG2875 shared_ptr::shared_ptr(Y* | D | […]) constructors should be constrained
LWG2874 Constructor shared_ptr::shared_ptr(Y*) should be constrained
LWG2802 shared_ptr constructor requirements for a deleter
LWG2873 Add noexcept to several shared_ptr related functions
LWG2905 is_constructible_v<unique_ptr<P | D> | P | D const &> should be false when D is not copy constructible
LWG2801 Default-constructibility of unique_ptr
LWG2868 Missing specification of bad_any_cast::what()
LWG2904 Make variant move-assignment more exception safe
LWG2903 The form of initialization for the emplace-constructors is not specified
LWG2934 optional<const T> doesn't compare with T
LWG2806 Base class of bad_optional_access
LWG2900 The copy and move constructors of optional are not constexpr
LWG2857 {variant,optional,any}::emplace should return the constructed value
LWG2866 Incorrect derived classes constraints
LWG2890 The definition of 'object state' applies only to class types
LWG2872 Add definition for direct-non-list-initialization
Add instructions for people on Fedora and Debian-like systems. (#1533)
CWG2218 Ambiguity and namespace aliases
CWG2205 Restrictions on use of alignas
CWG2174 Unclear rules for friend definitions in templates
CWG1860 What is a “direct member?”
CWG1677 Constant initialization via aggregate initialization
LWG2855 std::throw_with_nested("string_literal")
LWG2853 Possible inconsistency in specification of erase in [vector.modifiers]
LWG2850 std::function move constructor does unnecessary work
LWG2842 in_place_t check for optional::optional(U&&) should decay U
LWG2838 is_literal_type specification needs a little cleanup
P0430R2 File system library on non-POSIX-like operating systems
CWG2262 Attributes for asm-definition
CWG2259 Unclear context describing ambiguity
CWG2224 Member subobjects and base-class casts
CWG2220 Hiding index variable in range-based for
CWG2214 Missing requirement on representation of integer values
CWG2206 Composite type of object and function pointers
CWG2201 Cv-qualification of array types
LWG2837 gcd and lcm should support a wider range of input values
LWG2835 LWG 2536 seems to misspecify <tgmath.h>
LWG2834 Resolution LWG 2223 is missing wording about end iterators
LWG2826 string_view iterators use old wording
LWG2824 list::sort should say that the order of elements is unspecified if an exception is thrown
LWG2804 Unconditional constexpr default constructor for istream_iterator
LWG2795 §[global.functions] provides incorrect example of ADL use
LWG2794 Missing requirements for allocator pointers
LWG2789 Equivalence of contained objects
LWG2787 §[file_status.cons] doesn't match class definition
LWG2786 Annex C should mention shared_ptr changes for array support
LWG2785 quoted should work with basic_string_view
LWG2784 Resolution to LWG 2484 is missing "otherwise, no effects" and is hard to parse
LWG2782 scoped_allocator_adaptor constructors must be constrained
LWG2781 Contradictory requirements for std::function and std::reference_wrapper
LWG2769 Redundant const in the return type of any_cast(const any&)
LWG2260 Missing requirement for Allocator::pointer
[basic.start.dynamic] Convert long conditional sentence to bulleted form.
P0618R0 Deprecating <codecvt>
P0620R0 Drafting for class template argument deduction issues
[atomics.flag] Replace "shall be" with "is" when describing properties of the implementation, for consistency with changes made by P0558R1.
P0298R3 A byte type definition
P0604R0 Resolving GB 55, US 84, US 85, US 86
LWG2911 An is_aggregate type trait is needed
P0610R0 C++ Standard Library "Review" Issues Resolved in Kona
P0612R0: NB comment CH 2: volatile
P0250R3 Wording improvements for initialization and thread ids
P0615R0 Renaming for structured bindings
P0613R0 NB comment GB15: Resolution of Core Issue 2011
CWG2276 Dependent noexcept and function type-dependence
CWG2272 Implicit initialization of aggregate members of reference type
CWG2268 Unions with mutable members in constant expressions revisited
CWG2247 Lambda capture and variable argument list
CWG2211 Hiding by lambda captures and parameters
CWG2251 Unreachable enumeration list-initialization
CWG2248 Problems with sized delete
CWG2198 Linkage of enumerators
CWG2196 Zero-initialization with virtual base classes
CWG1710 Missing template keyword in class-or-decltype
CWG727 In-class explicit specializations
CWG426 Identically-named variables, one internally and one externally linked, allowed?
P0610R0 C++ Standard Library "Review" Issues Resolved in Kona
P0610R0 C++ Standard Library "Review" Issues Resolved in Kona
P0599R1 noexcept for Hash Functions
P0492R2 Proposed Resolution of C++17 National Body Comments for Filesystems (1)
P0548R1 common_type and duration
P0317R1 Directory Entry Caching for Filesystem
P0558R1 Resolving atomic<T> named base class inconsistencies
Revert "P0181R1 Ordered by default" as directed by 2017-03 LWG motion 16.
P0607R0 Inline Variables for the Standard Library
P0270R3 Removing C dependencies from signal handler wording
[func.search] Add missing period
[cpp] Change index redirect from '#' to '# operator' (and same for ##). (#1508)
[util.smartptr.ownerless] Remove 'struct' from index entry for owner_less. (#1509)
Incorporate LWG feedback from Kona.
fix more references to 'object'
fix references to 'object' and op= bug
fix typo
use alias declarations (with 'using'), not 'typedef'
ednote fix
don't require explicit specializations
introduce difference_type and use it in free function overloads
fix value_type typedef for specializations
remove leftover C placeholderrs
Update pointer section.
Move pointer specialization
small fixes
Move specializations for integers further down.
remove integral overloads; extract non-member functions
Add value_type to specializations, avoid 'C'
Add typedefs with separate section
Remove pointed to 'by object' where it no longer applies.
Add 'Equivalent to' where reasonable.
Remove declarations of atomic_xxx functions from definition part
[basic.lookup, conv.qual] Relax line breaking prohibitions before references to accommodate for new, wider cross-references from ec4ca6fc07907ea817152970c45d4c04c86d3c5c
[meta.trans] replace "shall name" with "names" in traits tables
[lib] For showing complexity, use $N \log N$ and not $N \log(N)$ or other variants.
Consistently use repeated \indextext for index redirects with multiple targets.
[expr.prim.id.qual] Redirect '::' index entry directly to 'operator, scope resolution'. (#1504)
[macros] Change way we suppress TOC entries in definitions.
[intro.refs] Add normative references to LIA-1 and IEEE 754.
[any] Use 'contained value' consistently.
[macros] Remove terms-and-definitions entries from TOC and bookmarks
Harmonize punctuation for 'ill-formed, no diagnostic required'
[basic.types] Remove excessive references to [basic.type.qualifier].
Add missing \tcode.
Add a note to the definition of literal type to indicate that it is not a guarantee that such an object can be created in a constant expression.
[lex] Change index redirects from 'backslash' to 'backslash character'. (#1495)
[definitions] Add missing 'Clause' to reference
[intro] Promote "Scope", "Normative references", "Terms and definitions" to top-level clauses per ISO directives.
[dcl.init] Add index entry for direct-initialization. (#1491)
[basic] Use less monospace in index entries. (#1489)
[allocator.uses.construction] Uncapitalize index entry for 'uses-allocator construction'. (#1490)
[expr.eq] Remove space before footnote mark. (#1486)
[localization, diff] Remove superfluous 'return 0;' from 'main' in examples. (#1482)
Do not use code font for "constexpr constructor" and "constexpr function". (#1484)
[meta.unary.prop, meta.trans.other] Omit unhelpful second argument in static_asserts. (#1479)
[dcl.attr.nodiscard] Clarify example with reference return type. (#1471)
[expr.mptr.oper] Use defined term 'null member pointer value'. (#1434)
Put type names with spaces consistently in a single \tcode (#1365)
[rand.req.{eng,dist}] Replace square brackets around reference with regular parentheses. (#1481)
Add Travis CI check for whitespace at the ends of lines. (#1477)
[except.spec] Add missing 'an'. (#1478)
Indent destructors correctly, instead of one column left (#1466)
[support.runtime] Remove extraneous and misleading parentheses from names of functions and macros
[alg.min.max] Enlarge lfloor/rfloor delimiters. (#1455)
[class.dtor, cpp.cond] Add missing \grammarterm. (#1469)
Move plural 's' outside of \grammarterm. (#1462)
Replace \colcol by :: (#1451)
Parenthesize some \refs. (#1436)
Remove trailing whitespace in LaTeX sources. (#1468)
[cpp.cond] Make `defined` and `__has_include` show up in Annex A (#1467)
[dcl.stc] Remove stray whitespace in plural \grammarterm (#1438)
[alg.min.max] Remove space before footnote mark. (#1460)
[unord.req] Insert hint is 'p', not 'q' (#1440)
[expr.delete] Remove bad index entry and fix naming of global deallocation functions. (#1447)
[any.assign] Rename T to VT. (#1448)
[multibyte.strings] Move punctuation out of \term. (#1437)
Update configuration to build papers after N4640.
Update configuration to build new working draft n4640.
Define 'object type' only once. (#1268)
[temp] Replace \term with \defn or \placeholder (#1370)
[expr.new] Add missing space (#1435)
[valarray.access] 'evaluates as' -> 'evaluates to'. (#1337)
[numarray] Add standard description elements. (#1215)
[dcl.init.aggr] Add example for array of unknown bound (#1270)
[cinttypes.syn] Add missing 'the', capitalize sentence
[iostream.format] Whitespace improvements
[iostream.format] Minor rewording to be more accurate and fit the lines better
[tables] Remove some unused table macros.
Format "i^th" consistently.
[cpp.replace] Remove extraneous \br
[cpp] Improve spacing aroud {h,q}-char-sequences
[cpp] Swap "control-line" and "if-section".
[macros] Prevent linebreak after \br. This would never be desirable, and that linebreak is not subject to widow/club control (since '\\' overrides penalties).
[macros] Remove unused macro '\nonterminal'
Replace remaining uses of \nonterminal with \grammarterm.
[ratio.{syn,comparison}] Mild reformatting for consistency.
[algorithms.parallel] Add missing \pnum
Use columns=fullflexible listings option. (#1426)
[string.view.template] Change the `reference`, `pointer` etc typedefs in `string_view` to use `value_type` rather than `charT` (#1416)
[containers] Minor spacing adjustments
Use body font, not \tcode, for '#1' code line references in running text. (#1383)
Use 'base class subobject', not 'base subobject' (#1382)
[cpp.concat] In example code comment, remove unnecessary line break and format code as code. (#1377)
[func.bind.is{bind,place}] Don't being sentences with code.
[functional.syn, func.bind.isplace] Improve how we talk about placeholder placeholders as opposed to concrete placeholders
Capitalize examples where appropriate. (#1356)
[class.temporary] Use 'Clause~\ref{class.access}' (#1348)
[atomics.syn] Don't describe function template overloads as "partial specializations"
[string.io] Don't refer to sentry by name it was not given. (#1333)
[lib] Replace pre: and post: in requirements tables (#1284)
[conv.lval] Split off description of conversion result into dedicated paragraph. (#1318)
[dcl.meaning] Consistently use \placeholder{derived-declarator-type-list}. (#1315)
[util.dynamic.safety, function.objects, func.searchers] Minor spacing improvements
Harmonize formatting of 'main' function. (#1308)
[expr] Split off definition of 'composite pointer type' into dedicated paragraph. (#1300)
Consistently italicize definitions' plural 's'. (#1296)
[strings] Remove remarks that repeat what was stated a few lines before. (#1289)
[tuple.creation] Simplify the introductory notation, and then use notation that matches the introduction. (#1251)
[func.bind.bind] Reformat to use math-style indexing. (#1285)
[stmt.dcl] Clarify footnote about deadlock avoidance. (#1266)
[lib] Harmonize casing for 'shall meet the requirements of ... iterator'.
[bitset] Minor spacing improvements
[util.smartptr] Minor spacing improvements
[cpp.preprocessor] Remove additional "implementation defined" index entries. (#1428)
[intro] Uncapitalize index entries for 'sequenced before' and 'evaluate'. (#1430)
[lex.literal] Avoid references to plain 'literal' (#1277)
Remove stray whitespace resulting from use of " ~". (#1427)
[namespace.udecl] Clarify error in example. (#1254)
[temp.deduct] Avoid talking about 'side effect' and 'evaluation' (#1252)
[alg.partitions] Move entire subclause to [alg.sorting]. (#1245)
[macros, styles] Remove minipages from BNF environments and use a custom enumitem list for spacing. (#1170)
[lib] Replace 'Notes:' elements with regular [ Note: ... -- end note] (#1160)
[streambuf.virt.get] use half-open ranges in underflow effects (#1157)
[locale.time.get] change undefined term "record" to "object" (#1412)
[support.types] Properly describe <cstddef> header (#1415)
Don't parenthesize \refs after 'in'/'of'/'notwithstanding'. (#1420)
[lex.phases] Remove stray period. (#1421)
[forwardlist.ops] Add comma
[locale.facet] add missing backslash in \defn (#1418)
[valarray.members] Style variable and minus sign as math. (#1413)
[alg.heap.operations] Use \bigoh instead of \mathcal{O}. (#1409)
[dcl.enum] Italicize 'unscoped enumeration' in its definition. (#1410)
[thread.lock.algorithm] Change '0-based' to 'zero-based'.
[func.not_fn] Remove whitespace that was added accidentally in 3c6d91088e58e56e295419efdd47ddc8a4628196
[basic.ios.cons] Remove stray semicolon. (#1397)
Add missing \pnums. (#1396)
[special] Add comma.
[optional.ctor] add missing \pnum
[cpp.pragma.op] Add missing \pnums and remove unwanted paragraph breaks. (#1387)
[dcl.link] Index implementation-defined behavior. (#1330)
Remove space between period/comma and footnote mark. (#1385)
[dcl.ambig.res] Describe example ambiguous case more clearly. (#1371)
Consistently use 'this International Standard'. (#1380)
Add missing hyphen in 'floating-point'. (#1319)
'floating-point something', not 'floating point something' (#1384)
[stmt.stmt], [dcl.attr.deprecated] Remove hyphen in 're-declared' (#1381)
[utilities.general] Update reference to bitset section and add missing \rowsep
[over.match.best, over.ics.rank] Remove premature ends of sentences.
[over.ics.rank] Replace self-referential reference with 'this subclause'
[dcl.ptr] Remove unnecessary line break in comment in example code. (#1372)
Remove stray whitespace after opening parentheses. (#1364)
[diff.expr] Remove stray paragraph break. (#1368)
[any.modifiers] Remove space in 'forward<Args> (args)'. (#1363)
[dcl.fct] Make bnf indentation in source match presentation. (#1362)
[temp.deduct.type] Style prose in body font, not code font. (#1361)
[re] Move long pieces of code into codeblocks and remove redundant "the result of" from return statements
[re] Replace \colcol with :: and remove extraneous whitespace. (#1358)
[temp.mem.func, facet.ctype.char.members] Remove inconsistent and unnecessary whitespace around puncutator
[iterators] Remove inconsistent, excessive whitespace around punctuators
Remove stray whitespace around scope resolution operator. (#1357)
[macros] Change \nontermdef so that the colon is styled as normal, not-italicized text
[expr.prim.fold] Disable character protrusion for a bnf block where it would break alignment
[numerics] Remove useless \mbox wrappings. (#1354)
[except] Replace \term and \textit with \grammarterm, \defn or \defnx as appropriate. (#1286)
[dcl.enum] Add missing \tcode in comment in example code. (#1352)
In math, do not needlessly wrap \tcode inside \text. (#1350)
[mem.res.pool], [mem.res.monotonic.buffer] Do not define the otherwise unused term 'owns'. (#1260)
[rand.util.seedseq] Consistently format T(...) as ordinary math, not code. (#1329)
[dcl.enum, conv.prom] Style min/max subscripts as labels, not variables. (#1339)
Replace \nonterminal with \grammarterm or \cvqual, as appropriate. (#1316)
[ostream.inserters] Add missing \tcode to index entry
Remove \shl and \shr.
[iterator.traits] Add index entry for std::iterator_traits. (#1341)
[string.insert] Change "pos1" to "pos" for overloads taking one position
[rand.adapt.ibits] Don't typeset binary + as unary +. (#1336)
[class.gslice.overview] Replace $$...$$ with \[...\]. (#1334)
[rand.adapt.shuf] Show exposition-only members in the order in which initialization is described. (#1332)
[re] Make indentation more consistent and use of whitespace more economical.
[basic.types] Move range_close marker for index
[expr.prim] Move range_close marker for index
[lex.name] Move range_close marker for index
[class.init] Move range_close marker for index
[stmt.iter] Move range_close marker for index
[stmt.select] Move range_close marker for index
[func.bind] Move range_close markers for indices
[containers] Remove bogus multipage index range for "unordered associative containers".
[except.spec, rand.synopsis] Add missing index range close
[complex.ops] Don't repeat declaration in "Effects:" element. (#1324)
[sf.cmath.cyl_bessel_j] Remove parentheses for index entry of implementation-defined behavior. (#1290)
[re.submatch.op] Remove excessive parentheses in "Returns:" element. (#1323)
[util.smartptr.enab] Remove leftover postcondition after P0033R1. (#1314)
[class.derived] Avoid \pnum inside examples. (#1265)
[meta.trans.other] add missing cv for common_type (#1292)
[expr.reinterpret.cast] Index implementation-defined behavior. (#1307)
[expr.unary.noexcept] Use \grammarterm{expression}, not \tcode. (#1313)
[basic] Remove stray whitespace after \tcode{...} (#1321)
[stmt.stmt] Remove stray {} after \grammarterm. (#1322)
[limits] Use normal font for "try" in "try block" (#1303)
[iterators, numerics] Replace 'sub-clause' by 'subclause' (#1302)
[class.virtual] Add index entry for covariant return types. (#1306)
Capitalize notes that consist of complete sentences. (#1297)
[char.traits.specializations] Add missing \tcode. (#1294)
[class.virtual] Adjust whitespace to fix vertical alignment in code example. (#1298)
[utility.syn] Remove stray comment character
[variant.assign] Code comma should be text comma
[conv.qual] Consistent notation for indexed types T_1, T_2
Mechanically harmonize indexed types to $\tcode{T}_i$. (#1283)
[string.view.find] Add missing 'be' (#1282)
[containers] Replace pre: and post: in requirements tables with \requires and \postcondition, respectively. (#1273)
[unord.req] Split column heading into two rows to fix an overfull box. (#1272)
[associative.reqmts] Harmonize capitalization. (#1271)
[ostream.iterator], [istream.iterator] Format exposition-only members with \tcode, not italics. (#1267)
Avoid \pnum inside examples. (#1262)
[dcl.array], [temp.deduct.type] Split notes spanning numbered paragraphs. (#1261)
[unique.ptr.single.modifiers] Use 'if and only if' when calling deleter. (#1255)
[sf.math] Promote parenthesized parts of function names to un-parenthesized. (#1256)
[pair, tuple, optional, variant] Review of synposes and descriptions for presentation
[support.limits.general] Hint hyphenation for an already-hyphenated word
[macros] Suppress italic correction after EXPLICIT. It is never welcome and often disruptive.
[support.limits] Rearrange section 'Implementation properties'
[forward] Remove mid-example paragraph breaks
Change a few stray headings to sentence case
[class.copy] Rephrase rule preferring a move constructor in a throw-expression or a return statement.
[temp.class] Reorganize examples into a separate paragraph
s/(possibly cv-qualified)/\\cv{}~/ and allied changes (#1142)
[input.output] Add references to inclusions in a synopsis
[{ex,in}clusive.scan, transform.{ex,in}clusive.scan]: Rephase 'for each *j' in terms of indexes
[iostream.forward.overview] Promote introductory sentences to normative text.
[basic.def.odr] Clarify that the "not an odr use" requirement for using an internal linkage constant within an inline function (etc) only applies to odr-uses within that inline function, and not uses elsewhere in the program.
[utilities] Use code font for '{U,Bi}naryTypeTrait' (#1151)
[temp] Add variable templates to the definition of 'template'. (#1225)
[unord] Use 'key equality predicate' consistently. (#1241)
[strings, algorithms, diff] Replace 'routine' with 'function'. (#1217)
[class.derived] Don't bother splitting last remark in note off into separate paragraph. (#1240)
[dcl.init, class.directory_iterator, fs.op.current_path] Split multiparagraph notes into multiple note paragraphs.
[over.built] Replace \placeholder{VQ} with \cvqual{vq}.
[over.built] Replace \term and \textit uses.
[path.non-member] Structure multi-paragraph note using an itemization instead. (#1236)
[cstdint.syn] Add cross reference to C
[temp] Misc tweaks: tcode, ellipses, capitalization, comment spacing
[string.view.hash] Add a note about equality to string hashes. (#1235)
[intro.races] Remove duplicated index entry for 'data race'. (#1234)
Use \commentellip macro in a few more places
[over.match.best] Convert footnote into ordinary note and remove overly tutorialisque explanations
[over] Minor whitespace adjustments to compress and align comments
Remove \synopsis macro. (#1231)
[localization] Add numbered headings for synopses. (#1229)
[algorithms] Add numbered heading for synopsis. (#1230)
[input.output] Add numbered headings for synopses. (#1228)
[macros] Make indented environment configurable and simplenbnf less indented on the right
[mem.res.monotonic.buffer.ctor] Spell reference to a parameter correctly. (#1226)
[over.call.object] Tidy up presentation of sequences of parameters
[lib] Harmonize index entries for 'make_error_code' and 'make_error_condition'. (#1223)
[lib] Use 'comparison function', not 'comparison operator'. (#1224)
[any] Rename the ValueType template parameter to T. (#1220)
[dcl.init.ref] Replace 'type qualifier' with 'cv-qualifier' in example. (#1222)
[list.ops] Move effects to 'Effects' element. (#1221)
[utility], [bitset] Introduce a separate heading for the synopsis. (#1213)
[bitset.members] Adjust confusing index entries for 'set' and 'any'. (#1218)
Delete accidentally added vim swap file. (#1216)
[thread] Add numbered headings for synopses. (#1214)
[pairs.spec], [tuple.creation] Avoid 'equality' of types phrasing. (#1212)
[class.temporary] Add paragraph number and split off example into its own paragraph. (#1211)
[pairs.pair, tuple.cnstr] Replace 'The constructor initializes' with just 'Initializes', which is how we say it in many other places. (#1206)
[special] Minor reflowing: remove gratuitous (non-numbered) paragraph breaks, compact comments.
[special] Capitalize notes and examples that are complete sentences.
[class.cdtor] Clarify presentation of example
[class.cdtor] Remove bogus paragraph break from mid-example.
[temp] Use '\commentellip' macro
[special, over] Use '\commentellip' macro
[class.derived] Use '\commentellip' macro
[dcl.decl] Avoid post-sentence spacing
[dcl.dcl] Further use of '\commentellip' macro
[expr, except, diff] Use '\commentellip' macro
[class.access] Use '\commentellip' macro
[class] Use '\commentellip' macro
[dcl.dcl] Use '\commentellip' macro
[basic] Use '\commentellip' macro
[macros] New macro '\commentellip' to typeset '/* ... */' in listings
[class.access] Minor comment adjustments
[class.access] Add missing \tcode
[class] Minor comment adjustments
[class.name] Add missing \tcode
[mem.res.syn] Call polymorphic_allocator a 'class template' (#1209)
[variant.bad.access] Use 'override' instead of 'virtual' in synopsis (#1208)
[dcl.fct.default] Reinstate braces lost in e985d75dc9350459bc27db584bb83e90f65d1657
[dcl.decl] Use correct terminals and ellipses
[dcl.decl] Compress comments and snap to common columns
[diff.cpp03.special] Use the more correct "call function f" rather than "call function f()" to resolve overfull line and fulfil compulsion for pedantry.
[rand] Reflow overfull lines.
[{ex,in}clusive.scan] Reflow and use codeblocks
[sequence.reqmnts] Reflow "member functions of the forms".
[util.smartptr.shared.atomic] Use codeblocks for long return elements.
[func.not_fn] Clean-up not_fun
[mem.res.pool.mem] Reorder and reflow do_is_equal descriptions.
[intro] Add hyphenation hints to some already-hyphenated index entries.
[tuple.helper, variant.helper] Change "specialization of *class*" to "specialization of *template*".
[locale.syn] Make synopsis a bit prettier
[localization] Make whitespace use more in line with our usual style
[locale.stdcvt] Use conventional indentation style for synopsis
[func.search, locale.codecvt.virtuals] Tweak hyphenation hints to avoid hyphenating a code underscore where it isn't necessary
[macros] In range, change mandatory space followed by linebreak opportunity into normal space with discouraged linebreak. This fixes the problem that mandatory spaces appeared at the end of the line, tearing up the column.
[locale.codecvt] Make codecvt nicer
[tables] Increase width of strings table to fit content
[strings] Reflow itemdecl and itemdesc whitespace to avoid overfull boxes and unnecessary linebreaks
[limits] Use 'subnormal number' as defined by IEEE 754-2008 = ISO 60559. (#1203)
[utility] Improve whitespace and linebreaking in synopsis
[variant.variant] Placeholder FUN
[allocator.adaptor.members] Use placeholder macro for OUTERMOST* pseudo-functions, improve presentation.
[allocator] Format OUTERMOST in code font and fix up line breaks (#1199)
[lib] Add main index entries for all headers. (#1197)
[char.traits] Use \tcode around parameter name (#1195)
[time.duration] Reformat general constraints on duration template.
[alg.lex.comparison] Remove duplicate 'Remarks:' item and comfort lone codeblock
[class.bit] Add missing "bit-" to "field declaration" in index entry (#1188)
[numeric.special] Remove redundant 'inline' specifiers in example. (#1192)
[complex.numbers] Use \cv{} (#1193)
[depr] Add missing parentheses around bitwise expressions (#1191)
[namespace.udecl] Restore accidentally deleted '}' (#1190)
Hyphenate 'implementation-defined' in a few residual cases
Residual manual removal of tildes for index entries.
Remove tildes from \indextext arguments.
Replace \defnx{a}{a} by \defn{a}
Remove tildes from \defnx definitions.
[dcl.align] Touch up error comments
[macros, namespace.unnamed] Style \uniquens as code placeholder
[dcl.dcl] Mild whitespace massaging; added some missing \tcodes
[lib] More & and && whitespace adjustments (#1183)
[intseq.general] Remove example not quite mirroring a standard function. (#1187)
[sequence.reqmts] Use placeholders for 'member functions of the form'. (#1186)
[containers, alg.transform] Minor presentation fixes. (#1184)
[class.virtual] Remove awkward 'but'. (#1182)
[lib] Adjust whitespace to attach '&' to the type, not the declarator-id. (#1181)
[function.objects] Introduce a new subsection for the <functional> synopsis. (#1179)
[pairs.pair] Further harmonize spelling of template parameters for pair<U1, U2>. (#1178)
Capitalize examples outside sentences. (#1174)
Capitalize notes. (#1173)
[stmt.stmt] Align comments to customary columns and reflow some very narrow comments
[utility] Harmonize spelling of template parameters for std::pair<T1,T2>. (#1172)
[expr] Reflow comments to be more compact and aligned to common columns
[stmt.iter] Remove extraneous \br from grammar
[expr] Use same notation for collections of cv-qualification signatures as in [conv.qual]
[conv] Minor comment spacing adjustments.
[basic] Reflow comments to be more compact; use math set notation for sets
[util.smartptr] Cleanse text of italics infestation. (#1161)
[re] Add missing \tcode to return values
[re] Adjust whitespace for class definitions to our usual conventions
[thread.mutex] Remove rogue whitespace
[rand] Adjust leading whitespace of class template definitions
[meta.unary.prop.query] Remove rogue space
[headers, depr.c.headers] Avoid brittle counts of headers. (#1167)
[class.mi] Redirect index entry for virtual base class to base class. (#1166)
[utilities] Do not use CamelCase for 'BaseCharacteristic'. (#1164)
[re.regex] Add missing 'multiline' constant. (#1162)
[temp.expl.spec] Minor indexing adjustment as requested by Bjarne Stroustrup.
[dcl.init.aggr] Wording simplification. Aggregate elements are only defined for purposes of aggregate initialization; we don't need to repeat that every time we use the term.
Do not use code font in the phrases 'constexpr constructor' and 'constexpr function' (#1153)
[allocator.requirements] Add linebreak hints
[expr, re] Replace maths pipes with code pipes
[expr] Minor whitespace tweaks
Ensure PDF files are not compared with text-based diff (#1022)
Move punctuation outside quotation marks according to logical nesting (#1148)
[expr.prim.lambda] Move first paragraph below grammar.
[expr.prim.lambda] Remove unwanted indentation from example
[res.on.exception.handling] Use \throws macro
[string.classes] Turn <string> synopsis into numbered subclause
[tuple, variant] Turn synopses into numbered subclauses
[utilities] (mostly pair and tuple) minor cosmetic harmonization
[pairs.pair], [tuple.tuple] Tidy up presentation of member functions (order elements consistently; use better index notation)
[library] Add missing \tcode in headings
[library] Capitalize headings
[syserr.syserr.members] Use \ntbs macro (#1147)
[numeric.limits] Add missing \tcode around true (#1143)
[new.delete] Use \replaceable instead of \textit (#1144)
[basic.def.odf] Clarify example by adding a variable that actually odr-uses D()
Update configuration for building drafts after n4618.
Update configuration to build new working draft n4618.
Revert "[optional] Remove redundant "These functions shall be constexpr"
[map.modifiers, unord.map.modifiers] Add std:: qualifiers to move and forward, and tidy up overlong lines.
[unord.req.except] Add missing \tcode for Hash and Pred. (#1141)
[except.spec] missing linebreak (#1140)
[cpp.replace] Adjust footnote to clarify that conditionally-supported-directives are directives whether supported or not (#1045)
[tuple.special] Use maths operators
[macros] Reduce whitespace at the end of code blocks (#1135)
[tuple.apply] Improve line fit of apply_impl
[expr.const] Reflow comments to be slightly more economical
[complex.ops] Replace inappropriate codeblock with itemdecl; remove some unneeded linebreaks.
[class.union] Clarify in the note that a default member (#1113)
[basic.lookup.unqual] Rephrase unqualified lookup in a function definition. (#1106)
[string.classes] Remove unneeded padding newlines around namespace content
[class.copy] Introduce three subsections. (#1077)
[lex.charset] Remove unneeded newlines
[class] Rephrase definition of M(X) used to define a standard-layout class. (#1076)
[dcl.decl] Turn very large footnote into ordinary note. (#1121)
[basic.scope.class] Break up enumerated list into ordinary paragraphs (#1137)
[optional] Remove redundant "These functions shall be constexpr functions." remark on functions whose declaration includes the constexpr keyword.
[atomics] Use \placeholder instead of \textit or \term. (#1120)
[std] Add hyphenation rule for 'nonzero'.
'floating-point something', not 'floating point something'
'nondeterministic', not 'non-deterministic'
'non-graphic', not 'nongraphic'
'non-portable', not 'nonportable'
'non-member', not 'nonmember' (when referring to a class or namespace member)
'non-constant', not 'nonconstant'
'non-const', not 'nonconst'
'non-class', not 'nonclass'
'non-abstract', not 'nonabstract' (for classes)
'nonzero', not 'non-zero'
'subobject', not 'sub-object'
'subexpression', not 'sub-expression'
[fpos.operations] Use code font for a type (#1138)
[re.grammar] Change ordered list to unordered list
[basic] Remove unnecessary and awkward whitespace in and around lists from LaTeX source
[intro, lex] Remove unnecessary and awkward whitespace in and around lists from LaTeX source
[pairs.pair, tuple.cnstr] Change 'behaviour' to 'behavior' (#1136)
[thread.lock] Extract error conditions from 'Throws' element. (#1122)
[std, macros, styles] Use 'enumerate' package to make vertical spacing of lists uniform. (#1134)
[variant] Use \tcode for type designators, not math mode. (#1125)
[utilities] Harmonize spacing and placement of qualifiers
[re, thread] Move 'const' qualifier to the right place.
[re] Remove trailing whitespace from source file
[depr.default.allocator] Simplify specification of allocator<T>::address.
[streambuf.virtuals] Simplify the logic of exposition; remove several unneeded lists (#1111)
[lib] Remove 'std::' prefix from library names. (#1085)
[filesystems] Do not repeat section title in cross-references to [fs.err.report]. (#1123)
[lib] Remove trailing colon in sectioning comments of synopses.
[lib] Add missing comma in sectioning comments of synposes.
[meta.type.synop] Remove 'see' in sectioning comments of synopses.
[diff] Miscellaneous fixes. (#1114)
[temp.deduct.call] Add example involving cv-qualifiers and references. (#1108)
Adjust italics and index entries for 'underlying type'. (#1127)
[basic.def.odr] Avoid counting the number of bullets in normative text (#1109)
[sequence.reqmts] Remove redundant 'forward iterator' requirement for sequence containers (#1107)
[re.matchflag] Remove namespace qualification when mentioning match_flag_type. (#1124)
[thread.lock.shared] Add sectioning comments to synopsis. (#1126)
[expr.xor, macros] Replace \exor command with \caret; remove \exor definition. (#1131)
Update draft editors report to reflect post-Issaquah motions.
P0509R1 Updating "Restrictions on exception handling"
LWG2778 basic_string_view is missing constexpr
LWG2777 basic_string_view::copy should use char_traits::copy
LWG2773 Making std::ignore constexpr
LWG2771 Broken Effects of some basic_string::compare functions in terms of basic_string_view
LWG2767 not_fn call_wrapper can form invalid types
LWG2765 Did LWG 1123 go too far?
LWG2760 non-const basic_string::data should not invalidate iterators
LWG2759 gcd / lcm and bool for the WP
LWG2758 std::string{}.assign("ABCDE", 0, 1) is ambiguous
LWG2756 C++ WP optional<T> should 'forward' T's implicit conversions
LWG2755 §[string.view.io] uses non-existent basic_string_view::to_string function
LWG2754 The in_place constructors and emplace functions added by P0032R3 don't require CopyConstructible
LWG2752 "Throws:" clauses of async and packaged_task are unimplementable
LWG2749 swappable traits for variants
LWG2748 swappable traits for optionals
LWG2747 Possibly redundant std::move in [alg.foreach]
LWG2744 any's in_place constructors
LWG2742 Inconsistent string interface taking string_view
LWG2740 constexpr optional<T>::operator->
LWG2739 Issue with time_point non-member subtraction with an unsigned duration
LWG2738 is_constructible with void types
LWG2736 nullopt_t insufficiently constrained
LWG2735 std::abs(short), std::abs(signed char) and others should return int instead of double in order to be compatible with C++98 and C
LWG2732 Questionable specification of path::operator/= and path::append
LWG2729 Missing SFINAE on std::pair::operator=
LWG2722 equivalent incorrectly specifies throws clause
LWG2712 copy_file(from, to, ...) has a number of unspecified error conditions
LWG2699 Missing restriction in [numeric.requirements]
LWG2696 Interaction between make_shared and enable_shared_from_this is underspecified
LWG2694 Application of LWG 436 accidentally deleted definition of "facet"
LWG2686 Why is std::hash specialized for error_code, but not error_condition?
LWG2681 filesystem::copy() cannot copy symlinks
LWG2680 Add "Equivalent to" to filesystem
LWG2679 Inconsistent Use of Effects and Equivalent To
LWG2678 std::filesystem enum classes overspecified
LWG2672 Should is_empty use error_code in its specification?
LWG2664 operator/ (and other append) semantics not useful if argument has root
LWG2598 addressof works on temporaries
LWG2591 std::function's member template target() should not lead to undefined behaviour
LWG2589 match_results can't satisfy the requirements of a container
LWG2584 <regex> ECMAScript IdentityEscape is ambiguous
LWG2578 Iterator requirements should reference iterator traits
LWG2569 conjunction and disjunction requirements are too strict
LWG2567 Specification of logical operator traits uses BaseCharacteristic, which is defined only for UnaryTypeTraits and BinaryTypeTraits
LWG2562 Consistent total ordering of pointers by comparison functors
LWG2556 Wide contract for future::share()
LWG2544 istreambuf_iterator(basic_streambuf<charT, traits>* s) effects unclear when s is 0
LWG2540 unordered_multimap::insert hint iterator
LWG2536 What should <complex.h> do?
LWG2534 Constrain rvalue stream operators
LWG2531 future::get should explicitly state that the shared state is released
LWG2519 Iterator operator-= has gratuitous undefined behaviour
LWG2514 Type traits must not be final
LWG2510 Tag types should not be DefaultConstructible
LWG2503 multiline option should be added to syntax_option_type
LWG2475 Allow overwriting of std::basic_string terminator with charT() to allow cleaner interoperation with legacy APIs
LWG2468 Self-move-assignment of library types
LWG2460 LWG issue 2408 and value categories
LWG2394 locale::name specification unclear — what is implementation-defined?
LWG2261 Are containers required to use their 'pointer' type internally?
LWG2223 shrink_to_fit effect on iterator validity
LWG2221 No formatted output operator for nullptr
LWG2166 Heap property underspecified?
LWG2062 Effect contradictions w/o no-throw guarantee of std::function swaps
P0003R5 Removing Dynamic Exception Specifications from C++17
P0435R1 Resolving LWG Issues re common_type.
[utility.from.chars] Replace reference to undefined placeholder type T with the intended type.
[utility.to.chars] [utility.from.chars] Switch references to ISO C sections to use the normal convention of a separate "SEE ALSO" paragraph, as described in [structure.see.also].
[utility.to.chars] [utility.from.chars] Replace awkward and hard-to-locate "see above" description for integral overloads of from_chars and to_chars with a description in the "Remarks:" paragraph, as we do in other similar cases.
P0067R5 Elementary string conversions
[variant.hash] Use new wording formulation from P0513R0 to specify that hash<monostate> meets the hash requirements.
P0513R0 Poisoning the Hash
CA 14 P0521R0 shared_ptr use_count/unique
P0517r0 Make future_error constructible Also fixes NB US-163 from C++17 CD national body comments.
P0502R0 Throwing out of a parallel algorithm terminates—but how?
NB GB-62 P0516R0 Clarify That shared_future’s Copy Operations have Wide Contracts
P0510R0 Disallowing references, incomplete types, arrays, and empty variants
NB CH-3A P0504R0 Revisiting in-place tag types for any/optional/variant
P0414R2 Merging shared_ptr changes from Library Fundamentals to C++17
NB GB-68, US-155, US-154 P0503R0 Correcting library usage of "literal type"
NB GB-58 P0508R0 structured bindings for node_handles
NB CA-16 P0418R2 Fail or succeed: there is no atomic lattice
P0505r0 Wording for GB 50 Also fixes NB GB-50 from C++17 CD national body comments.
P0403r1 Literal suffixes for basic_string_view Also fixes NB US-80, FI-6 from C++17 CD national body comments.
P0426r1 constexpr for std::char_traits Also fixes NB US-81, RU-4 from C++17 CD national body comments.
LWG2770 tuple_size<const T> specialization is not SFINAE compatible and breaks decomposition declarations
P0512R0 Class template argument deduction, assorted NB resolution and issues
[namespace.udecl] Editorial fixes for wording introduced by p0195r2.
P0195R2: Pack expansions in using-declarations
NB RU-1 (C++17 CD) Why must empty or fully-initialized const objects be initialized?
NB FI-20 (C++17 CD) Decomposition declarations with parentheses
NB GB-65 (C++17 CD) Add limit for number of identifiers in decomposition declaration
NB GB-64 (C++17 CD) Add limit for length of initializer-list
NB GB-63 (C++17 CD) Add limit for number of lambda-captures
NB GB-27 (C++17 CD) Multiple activations of the same exception object
NB GB-26 (C++17 CD) 'Last' active handler and multithreading
NB GB-25 (C++17 CD) Imprecise description when terminate is called
NB GB-23 (C++17 CD) Handlers taking a reference to array or function
NB GB-20 (C++17 CD) Decomposition declaration should commit to tuple interpretation early
NB GB-19 (C++17 CD) Missing cv-qualification when materializing a temporary object
NB GB-6 (C++17 CD) Definition of undefined behavior vs. constexpr
NB GB-5 (C++17 CD) Definition of template parameter
NB US-103 (C++17 CD) Explicit deduction guides consider default template arguments
NB US-94 (C++17 CD) Class template deduction in explicit type conversion using a braced-init-list
NB US-93 (C++17 CD) Argument evaluation order when calling an operator function
NB US-28 (C++17 CD) Incorrect definition for principal constructor
Add first draft of post-Issaquah editors' report.
[locale.facet] Don't bother itemizing a single item. (#1118)
[thread.mutex.requirements] Make references to mutex requirements consistent. (#1110)
[macros, basic, streambuf] Retire 'enumeraten' environment in favour of 'enumerate'. (#1105)
[class.conv.fct] Add examples for 'auto' as a conversion-function-id (#1104)
[iterator.requirements.general] Use singular when defining 'value type' and 'writeable to' for iterators. (#1101)
[basic.scope.class] Add missing whitespace before example. (#1103)
[quoted.manip] operator>> is not a member of basic_istream. (#1100)
[istream], [ostream] Remove paragraph numbers in cross-references. (#1099)
[reverse.iter.ops] Simplify reverse_iterator operator function declarations by using non-dependent difference_type. (#1098)
[intro.execution] Remove unnecessary function from example (#1084)
[library] Use \effects etc. when referring to itemdescr elements in introductory text (#1093)
[futures.overview], [futures.async] Use 'bitmask type' terminology. (#1095)
[basic.lookup.argdep] Mark definitions of 'associated class/namespace'. (#1092)
[algorithms, containers, future] Add \tcode
Replace \textit{cv} with \cv{} or \cvqual{...} as appopriate. (#1081)
[temp.variadic] Move example so that it attaches to the correct paragraph. (#1082)
[dcl.ref] Introduce the phrase 'reference collapsing' in a note. (#1083)
[basic.lookup.classref] Replace unnecessary use of 'indented' with 'codeblock'
[conv.qual, temp.deduct.conv] Improve presentation of conversion sequences
Remove unneeded whitespace in synopses
[lib] Spell 'value-initialization' with a hyphen. (#1075)
Remove some unused macros
CWG2271 Aliasing this
CWG2155 Defining classes and enumerations via using-declarations
CWG2143 Value-dependency via injected-class-name
CWG1961 Potentially-concurrent actions within a signal handler
CWG1395 Partial ordering of variadic templates reconsidered
P0507R0: Core Issue 1343: Sequencing of non-class initialization
P0522R0: Matching of template template-arguments excludes compatible templates
Remove rogue namespace closing comments
[atomics] Clean up indexing (#1038)
[container.requirements.general] Remove redundant Requires (#1044)
[facet.num.put.virtuals] Provide definition of 'showpoint' and don't apply '&' twice (#1065)
[system_error.syn, syserr.compare] Declare all nonmembers in the synopsis (#881)
[numeric] Order elements correctly (#1070)
[lex] Replace \term with \placeholder or \defn as appropriate (#1067)
Use \cv{}, not \cv\ . (#1066)
[variant.assign] Introduce bullets for 'If an exception is thrown...' phrases. (#1069)
Improve line breaking (resolves some 'Overfull \hbox' warnings) (#1068)
[container.requirements] Improve punctuation (#1037)
NB GB-67 (C++17 CD): [charname] [lex.name]: Integrate Annex E contents into description of identifiers.
[container.requirements] Consistent semicolons in tables (#1034)
CWG2100 Value-dependent address of static data member of class template
CWG2094 Trivial copy/move constructor for class with volatile member
[diff.mods.to.definitions] Add entry for 'nullptr_t in stddef.h' (#1056)
[expr.rel] Complete the definition of 'compares greater than' (#1015)
[over.match] 'underlying type' for a reference is undefined (#1013)
[intro.multithread] add 'std' to standard library names (#1003)
[utilities], [futures.task] Use 'not defined', not 'undefined', to present library declarations of primary templates that are not supposed to have a definition. (#1063)
Use \tcode{true} and \tcode{false} consistently (#977)
[intro] Replace \term with \placeholder or \defn as appropriate (#1062)
[basic] Replace \term with \defnx as appropriate (#1061)
[macros.tex et al.] Define a new macro \caret and apply it. (#1050)
[atomics] Further whitespace/italic correction improvements, reflow introductory comments
[atomics] Better use of \placeholders, cleanup.
[support.types.layout], [diff.offsetof] Use \placeholder for meta-variables in offsetof, not \textit and not \grammarterm (#1058)
[diff.cpp03.input.output] Use code font for 'explicit' (#1059)
[localization] Make punctuation more uniform
[strings] Make punctuation more uniform
[utilities] Make punctuation more uniform
[dcl.type.cv] Remove paragraph break inside intra-paragraph example
Change 'result is undefined' to 'has undefined behavior' (#1042)
[intro.scope, namespace.udecl, temp.deduct.type] Avoid "and so" (#1030)
NB GB-37 (C++17 CD): [cstdlib.syn] Move into Clause 18. It doesn't really fit well anywhere, but this is better than including it in Clause 17 at least.
NB GB-52 (C++17 CD): [utility] shorten stable names (#1048)
[diff.library] Remove listings of content shared between C and C++. Resolves LWG 2201. (#1052)
[pairs.pair] Minor line breaking improvements; avoid overlong lines.
NB GB-34 (C++17 CD): [contents] A macro is not an entity, don't claim it is.
NB GB-31 (C++17 CD): [defns.traits] Remove apparent definition of term "character traits" in non-normative text. This "definition" was both redundant and incorrect.
NB GB-7 (C++17 CD): [intro.object] Add example where multiple array objects could provide storage for the same object.
NB US-180 (C++17 CD): [variant.variant] Rename section to "Class template variant".
NB US-179 (C++17 CD): [optional] Replace "optional for object type" with just "optional object", and likewise rename stable name from [optional.object] to [optional.optional].
NB US-173 (C++17 CD): [cstdlib.syn] Add 'noexcept' to synopsis to match detailed description of abort, atexit, at_quick_exit, _Exit, quick_exit.
[exception] Rephrase to avoid overfull hbox (#1057)
NB US-133 (C++17 CD): [util.smartptr.shared.const] Remove redundant restatement that this constructor enables shared_from_this. That is already implied by the "equivalent to" wording earlier in the paragraph.
Revert "NB JP-3 (C++17 CD) [basic.stc] Use 'new-expression' instead of 'operator new'"
[cstring.syn] Remove erroneous space
[headers] Reflow 'Annex-K' table to fit on the page
Replace 'run-time' by 'runtime' for consistency. (#1053)
[headers] Remove erroneous whitespace
[diff.mods.to.definitions] Harmonize presentation of wchar_t vs char{16,32}_t
[diff.mods.to.headers] Explain what happened to meaningless C headers (#1051)
[cstdlib.syn, csignal.syn] Introduce exposition-only function types with C and C++ language linkage to improve the presentation of C library functions that take callbacks. (#1049)
[diff.library] Add entries for stdalign.h, stdbool.h and wchar.h
Late 15 (C++17 CD): [path.gen] Simplify and clarify specification of lexically_relative (#1036)
[depr.str.strstreams] Update cross-references to C synopses
[diff.mods.to.definitions] Add new entry for 'static_assert'
[diff.library] Update references to the main text.
[strings] Index cstd header synopses
[dcl.align] Avoid 'shall' for a requirement on the implementation (#1043)
[meta] Add cross-references to 'referenceable type' (#1041)
Replace 'sub-clause' by 'subclause' (#1040)
[meta] add cross-references to 'referenceable type'
[lex.ext] Add hyphen in index entry for 'user-defined literals' (#1039)
Late 42 (C++17 CD): [fs.op.file_size] Add missing argument for file_size
Add missing whitespace (#1035)
US NB-136 (C++17 CD): [util.smartptr.shared.cast] Remove repeated specification of the return value of shared pointer casts.
NB US-120 (C++17 CD): [variant.get] Remove redundant requirement that get<cv void> is not used.
NB US-96 (C++17 CD): [dcl.decomp] Rearrange to number elements from 0 instead of from 1.
[diff.special] Remove incorrect suggestion that volatile-qualified special member may be defaulted.
[string.require] Add note that traits::char_type is the same as charT for basic_string specializations. (#1029)
[expr.const] Avoid 'value' of a glvalue in definition of constant expressions. (#1028)
NB JP-21 (C++17 CD): [algorithms] Order elements consistently
[vector.bool] Excise use of undefined term 'conversion operator' (#1018)
[namespace.udecl] Remove stray newline in grammar production (#1026)
[expr.dynamic.cast] Remove redundant specification of value category for a dynamic_cast to reference type. (#1024)
[type.descriptions.general] Remove reference to undefined library concepts. (#1023)
[intro.execution] Adjust example to new rules for sequencing of expressions. (#1020)
[containers] 'const iterator' should be 'constant iterator' (#1012)
[dcl.type.simple] Add decltype(auto) to the table giving meaning to simple-type-specifiers. (#1016)
[any,thread] Whitespace for template parameter packs (#1014)
[class.ctor] Split into numbered paragraphs (#1011)
[facet.num.get.virtuals] Clarify 'fails to convert' for empty sequence (#1010)
[numeric.limits.members] Replace 'IEC 559' with 'ISO/IEC/IEEE 60559' (#1009)
Capitalize notes that consist of complete sentences.
[lib] Modernize closing template brackets (#1008)
[dcl.init] Clarify invocation of list-initialization for '= braced-init-list' (#1007)
NB US-91 (C++17 CD): [algorithm][numeric] Specify all parallel algorithms (#937)
[special] Clarify that we are using overload resolution to determine the corresponding constructor, not performing overload resolution "on" it (whatever that might mean).
[lex.literal] Consistent indexing of 'prefix' and 'suffix' (#932)
[basic.link] Consistent indexing of 'translation unit' (#931)
[cpp.cond] Remove stray brace (introduced in a8654e86734a3ca1348c7e4d3de0af703f049af0)
Use the "standard library" terms defined in [intro.refs]/2 and [library.general]/1 consistently. (#934)
[expr.reinterpret.cast]: requirement redundant with static_cast: a note it is (#996)
[lib] Replace \precondition by \requires
[lib] Replace 'Postcondition:' by 'Postconditions:'
[lib] Replace 'Remark:' by 'Remarks:'
[iostreams] Refer to int values as `nonzero` instead of `true` (#978)
[string.classes] Rename stable names 'string::*' (#999)
[istream.extractors] Rename stable name 'istream::extractors' (#1001)
Index entries for signed integer representations
Format references more consistently
[expr.prim.paren] Clarify that parentheses preserve all value categories, not just lvalueness. (#915)
[expr.call] Use a more idiomatic way to specify the expression has undefined behavior (#898)
[atomics.order] Remove redundant typedef-name for memory_order (#851)
[future.async]p3 Use neither/nor and capitalize sentences properly (#827)
[gram] Change "syntax" to "grammar". (#790)
NB JP-24 (C++17 CD): [alg.permutations.generators] Separate 'returns' from 'effects'
NB JP-22 (C++17 CD): [mismatch] Simplify specification of std::mismatch
[defns.referenceable] Clean up definition text
[string::compare] Replace 'smallest' by 'smaller' (#998)
[string.capacity] Improve max_size() description by copying from string_view (#994)
NB US-90 (C++17 CD): [algorithms.parallel.exec] Add cross-reference to section describing execution policies.
NB GB-8 (C++17 CD): [intro.object] Clearer definition for 'complete object' (#991)
[alg.reverse] Use ValueSwappable instead of swappable requirement (#993)
NB JP-18 (C++17 CD): [cpp.cond] Split up long paragraph and incorporate footnotes as notes
[intro.races] remove redundant constraint on modification order (#990)
NB GB-29 (C++17 CD): [intro.defs] Move definitions of 'block' and 'unblock' to Clause 1
Updated required package list. (#986)
[class.dtor] Add paragraph number (#987)
NB GB-48 (C++17 CD): [parallel.execpol.objects] Simplify stable tag (#988)
NB US-88 (C++17 CD): [execpol.seq] Rename "Sequential" -> "Sequenced"
NB US-39 (C++17 CD): [fs.def.parent] Remove meaningless note.
NB JP-12 (C++17 CD): [class.mi] Refer to figures by number
NB US-38 (C++17 CD): [fs.def.ntcts] Remove redundant definition.
[dcl.init] Don't mention expression where braced-init-list may appear (#985)
NB GB-33 (C++17 CD): [objects.within.classes] Change 'external behavior' to 'observable' (#983)
NB GB-32 (C++17 CD): [defns.additional] Make this clause a note in [definitions] (#982)
NB US-26 (C++17 CD): [class.ctor] Demote redundant "either no parameters or [all parameters have a property]" to a parenthetical.
NB US-13 (C++17 CD): [meta.unary.prop] Rephrase Condition for `is_destructible` to avoid use of `is_destructible<T>::value`.
NB JP-5 (C++17 CD): [conv.rval] Add missing semicolon
NB GB-11 (C++17 CD): [intro.memory] Add a footnote referencing CHAR_BIT
NB JP-3 (C++17 CD) [basic.stc] Use 'new-expression' instead of 'operator new'
NB US-12 (C++17 CD): [meta.unary.prop] Remove (subtly) redundant uses of bool_constant from definition of is_signed and is_unsigned.
NB JP-1 (C++17 CD): Update reference to C11
NB US-11 (C++17 CD): [meta.unary.prop] Replace has_unique_object_representations<T>::value with _v form in one place and remove ::value in another, for consistency with similar specifications.
NB US-9 (C++17 CD): [meta.type.synop] Add missing definition of has_unique_object_representations_v.
NB ES-3 (C++17 CD): [depr.static_constexpr] Change redeclaration to use 'constexpr' instead of 'const'
[meta.rel] Massage Comments for is_base_of to avoid unclear phrasing.
[diff.expr] Document that C++ does not support decrement on bool, unlike C.
NB GB-22 (C++17 CD): Replace references to "raise" with "throw" when describing exceptions.
NB GB-14 (C++17 CD): [expr.pre.inc] Remove vestigial references to increment of bool.
[basic.start.static] Add missing full stop.
[cpp.replace] Style 'replacement-list' as a grammar term
Use decay_t<> rather than typename decay<>::type. (#979)
[execpol] Remove '+' from policy name (#976)
[sf.cmath] Make headings and stable names more accurate
[re] Whitespace fixes
[re.syn] Synchronize regex_constants synopsis with [re.const]. (#866)
[execpol] rename "vec" to "unsequenced" (#972)
Improve comment formatting; includes replacing "file" with "translation unit"
[expr] Remove accidental whitespace
[associative.reqmts] Add missing qualification to 'mapped_type' (#968)
[syntax] Use a different example (#959)
[stmt.iter] Remove superfluous and incorrect note (#960)
[iterator.synopsis] Add specialization specified in [iterator.traits]/3 (#961)
[iterator.range]/1 List <string_view>, specified in [string.view.synop]/1 (#962)
[dcl.init.aggr] Replace incorrect "anonymous bit-fields" with "unnamed bit-fields". Move restriction that only non-static data members are aggregate elements into the definition of aggregate elements, and demote the other occurrence of this rule to a note.
[stmt.stmt] use grammar term "brace-or-equal-initializer" in condition rather than expanding it into two productions
[basic, class.this, algorithms] Remove parentheses around references. (#949)
[class.conv.fct] Add missing 'the'. (#950)
[basic, stmt, dcl.dcl] Move surrounding punctuation out of \grammarterm arguments. (#948)
[expr.reinterpret.cast] Remove unwanted whitespace after \indextext. (#947)
[algorithms.parallel.exec] Add hyphenation hints to impldef index entry
[rand.device] Rephrase index entry for impldef behaviour to be easier to compose
[string::copy] Remove duplicate \pnum
[basic.def.odr] Update references to [dcl.inline]
[class, class.derived, special] Write space in 'access control' consistently in index keys. (#942)
[extern.names] Use \tcode when referring to namespace std. (#941)
[thread.decaycopy] Format index entry for DECAY_COPY correctly and add a library index entry
[expr, except] Clean up index entry for terminate, unexpected
[cpp.predefined] Make description for __cplusplus non-redundant and consistent with rest. (#868)
[time.duration.nonmember] Add missing \tcode (#936)
[time.syn] Format whitespace more consistently with the rest of the WD (#935)
[depr.istrstream.cons] Add missing constructor. (#878)
[rand] Format "i.e." and "e.g." consistently
[any] Add parameter name for initializer_list<U>
[tables] Remove extraneous braces that make code in tables index and space differently
[futures.promise] Add missing 'noexcept' for swap itemdecl. (#889)
[class.local, facet.num.{get,put}.virtuals, temp.expl.spec] Remove stray whitespace. (#907)
[dcl.type.simple] Consistent indexing of "type specifier" (#929)
[index] Consistent indexing of "name hiding" (#933)
[meta] Add index entries for each type trait
[function.objects] Use formal Returns: clause for std functors (#909)
[whole standard] Audit index of implementation-defined behavior (#899)
[container.node] Move sub-clause to after [sequence.reqmts] (#850)
[thread.once] Move struct once_flag defintion into corresponding subclause (#920)
[thread] Index review clause 30 (#901)
[depr, exception.syn] Consistently move deprecated declarations to Annex D (#900)
[new.delete.array] Add missing []. (#924)
[iterator.iterators] Remove unmatched parenthesis, formatting (#926)
[class.base.init] Remove stray indentation in codeblock. (#923)
[thread.lock.shared] Apply conventional indent to shared_lock class definition (#921)
[cstdio.syn] Add missing 'std'
[lex.phases] Index and xref raw string literals (#902)
[dcl.type.auto.deduct] Correct ill-formed expression 'void{}' to the intended 'void()'.
[class.path][path.member][path.itr] Rename expos member 'pathname' to 'pathstring' to reduce confusion
[fs.op.exists] Move after [fs.op.equivalent]
[optional.object.ctor] Use injected class names (#910)
[intro.progress] fix typo: guaranteees -> guarantees (#906)
[source/{containers,lib-intro}.tex] Change permissions from 0755 to 0644 (#903)
[declval] Move example outside the \itemdescr and into its own, numbered paragraph.
[depr] Review of library index (#883)
[cstdlib.syn] Add missing extern-C/C++ overloads for at_exit, at_quick_exit (#890)
[intro.execution] Delete now-incorrect example: arguments to a function call are now indeterminately-sequenced, not unsequenced.
[basic.def.odr] Add missing "potential results of" in one case in the recursive definition of the set of potential results.
[diff.decl] Replace undefined term "compilation unit" with the intended "translation unit". In passing, fix awkward grammar.
[ostream] Demote ostream subheadings from level 3 to level 4, consistent with [istream]
[ostream.cons] Move description of move constructor above destructor, consistent with [istream.cons], and add synopsis comments
[set.cons, multiset.cons] Specify correct constructed type and add missing \tcode. (#896)
[util.smartptr.getdeleter] Remove broken 'std:' qualification on addressof. (#895)
Remove imports of unused packages: verbatim, fixme, and booktabs. (#894)
[istream] Move section "Rvalue stream extraction" to a more suitable place, consistent with [ostream]
[filesystems] Add missing "override"
[input.output] Review of library index
[iostreams.limits.pos] Add entry for index of implementation-defined behaviour
[thread.thread.id] Consistently use an lvalue reference for operator<<'s first parameter. (#885)
g/special math functions/s//mathematical special functions/ (#886)
[container.requirements.general] Use proper environment for note. (#887)
[any.modifiers] [memory.resource] [allocator.adaptor] Remove redundant 'this->'.
[filebuf.assign] [rec.dir.itr.members] Remove redundant 'this->'.
[string::compare] Remove redundant (and wrong) 'this.'.
[forwardlist.ops] [list.ops] [thread.thread.member] Remove redundant 'this->'.
[associative.reqmts] Add missing line break. (#888)
[temp.deduct.call] Don't nest paragraphs inside itemizations. (#882)
[memory.resource.private] Resolve LWG 2701 editorially
[depr.strstreambuf.cons] Remove stray period in footnote. (#875)
[depr.strstreambuf.cons] Don't use an itemdecl and index entry for a mere use of setg. (#876)
[meta.unary.cat] Use core term non-union class type (#873)
[depr.strstream.dest] Move rdbuf() to [depr.strstream.oper]. (#871)
[depr.{i,o}strstream.cons] Remove stray parentheses. (#869)
[re.traits] Remove excessive newlines from codeblocks. (#867)
[re.traits] Remove excessive parentheses in "Returns:" element. (#865)
[special, strings, localization, numerics] Add missing trailing periods in footnotes. (#863)
[re.tokiter.incr] Add missing \pnum for "Returns:" element. (#864)
[memory.general] Update outdated references
[numerics] Review of library index
[iterators] Review of library index
[strings] Review of library index
[utilities] Review of library index
[diagnostics] Review of library index
[language.support] Review of library index
[basic, memory, time] Use \impldef consistently. (#852)
[impldef] Improve hyphenation in index
[macros,impldef] Collate \tcode in- and outside listings
[numeric.ops.gcd] Don't format "that" as code in note. (#848)
[path.generic.obs] Escape backslash in string literal in example. (#846) (#846)
[file_status.obs] Remove stray \begin{itemdecl}. (#847)
[temp.deduct.call] Avoid line wrap in long comment. (#845)
[util.smartptr.getdeleter] Add missing \tcode
[support,utilities] More uses of \indexlibrarymember (#841)
[optional.object.observe] Add missing constexpr to detailed description of optional::value_or(U&&) &&
[impldef] Collate index correctly (#834)
[dcl.init.ref] Add missing \tcode (#838)
[thread] Use \indexlibrarymember macro
[atomics] Use \indexlibrarymember macro
[re] Use \indexlibrarymember macro
[input.output] Use \indexlibrarymember macro
[numerics] Use \indexlibrarymember macro
[iterators] Use \indexlibrarymember macro
[containers] Use \indexlibrarymember macro
[localization] Use \indexlibrarymember macro
[strings] Use \indexlibrarymember macro
[utilities] Use \indexlibrarymember macro
[diagnostics] Use \indexlibrarymember macro
[language.support] Use \indexlibrarymember macro
[macros] New macro \indexlibrarymember to create two index entries for class members
[hardware.interference] Use itemdecl instead of codeblock (#836)
[gram] Use 'extract' package for grammar summary (#816)
[dcl.init.ref] Add back function lvalues to [dcl.init.ref]/5.2.1.2 (#832)
[diagnostics] Consistently escape newlines in index entries in Clause 19 (#829)
[diff.basic] Improve clarity of "const implies inline" compatibility note (#789)
[path.type.cvt] remove redundant word (#828)
[support] Improve index entries for clause 18 (#823)
[strings] Break line in table caption better
[input.output] Index all member functions in clause 27 (#820)
Update configuration for building drafts after n4606.
Update configuration to build new working draft n4606.
Use proper tab: prefix for concept table labels. Remove non-tab:-prefixed labels for concept tables.
[stmt.if], [temp] Don't use code font for defined term "constexpr if statement". Use of code font here suggests that "constexpr if" is valid syntax, which it is not.
[meta.type.synop] Italicize placeholder text "default-alignment" to match formatting in detailed description.
[regex] Remove bogus indexlibrary entry
Make universal-character-name \grammarterm'd (#807)
[c.math] Change title of this subclause from "C library" to "Mathematical functions for floating point types" to match its contents; the special math functions in <cmath> are not part of the C library.
[objects.within.classes] Clarify what "exposition only" means for private members that are not data members. This applies the first portion of LWG2516 (voted into Lib Fundamentals) to the working paper.
Apply an alternative wording for LWG2683, which was adopted as part of 2016-06 LWG Motion 2.
[locale.codecvt.virtuals] Use \range and \crange for ranges (#818)
Rename [util.smartptr.weakptr] to [util.smartptr.weak.bad]. This section describes the bad_weak_ptr exception class, so the previous name was completely inappropriate.
[fs.op.relative] Replace "Returns A except B if an error is produced" with "Returns A, or B if an error is produced" to match similar wording elsewhere.
[func.default.traits] Remove inappropriate reference to [unord] (#819)
[variant.swap] Use math mode for variable "i"
[macros,gram] Simplify definition of non-copying grammar environments (#817)
[optional.object.mod] Escape ~ in destructor call
[19-26] Consistent use of _v (#783)
[ctime.syn] <time.h> is described in 7.27 in ISO C, not 7.17.
[/tools] Delete vestigial support files (#812)
[Makefile] Remove reference to deleted target 'xrefs'
[locale.codecvt.members] Add spaces between function arguments
[input.output,strings,utilities] Don't format informative 'see below' as code (#809)
[re.regex.construct] Use tcode instead of textit
[re.traits] Use tcode instead of textit
[alg.random.sample] Remove stray period.
[ios.base.callback] Add missing pnum
[re.results.form] use code font
[tuple.traits] Add missing pnum
[meta.unary.prop.query] fix whitespace in alignment_of row
[variant.visit] Remove stray colon (#810)
[dcl.spec.auto] Add 'The' to heading 'auto specifier' (#782)
[diagnostics] Make system_error synopsis more consistent (#795)
[macros] Replace cooked underscore with raw version (#770)
[stmt.if] Balance brackets and fix indentation in example.
[back] Install proper page marks for post-appendix backmatter
Generate xrefs as a glossary
tools/makereport: remove dependence on very recent bash feature
P0180r2 Reserve a New Library Namespace for Future Standardization
P0346r1 A <random> Nomenclature Tweak
P0371R1 Temporarily discourage memory_order_consume
P0336R1 Better Names for Parallel Execution Policies in C++17
P0394r4 Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling
P0392r0 Adapting string_view by filesystem paths
[filesystems] Add references to fs.def.pathres where "resolve" is used.
[fs.def.normal.form] Define terms normalized and normalization.
[fs.op.proximate][fs.op.weakly_canonical] Rephrase nonsensical wording.
p0219r1 Relative Paths for Filesystem
P0337R0 Delete operator= for polymorphic_allocator
P0174R2 Deprecating vestigial library parts
P0295R0 Adopt Selected Library Fundamentals V2 Components for C++17
P0209r2 make_from_tuple: apply for construction
P0163R0 shared_ptr::weak_type
[func.default.traits] Add cross-references
P0181R1 Ordered by default
P0083R3 Splicing Maps and Sets (Revision 5)
P0302R1 Removing Allocator Support in std::function (rev 1)
P0084R2 Emplace Return Type (revision 2)
[specialized.algorithms] Reorder synopsis and subclauses into more consistent order (default construct, copy construct, move construct, fill, destroy; non-execution-policy version before execution-policy version).
P0040r3 Extending memory management tools
P0258R2 has_unique_object_representations
[c.locales], [clocale.syn] Fold child clause into its parent and remove paragraph that is duplicated between the two.
[c.strings] Point the "see" comments for functions with different signatures in C and C++ to [library.c], which specifies how those functions behave.
[string.ops] Move basic_string::operator basic_string_view alongside data() and c_str() rather than putting it in its own section.
P0254R2 Integrating std::string_view and std::string
P0032R3 Homogeneous interface for variant, and and optional (Revision 3)
P0393R3 Making Variant Greater Equal
P0307R2 Making Optional Greater Equal Again
P0088R3 Variant: a type-safe union for C++17 (v8).
[meta.type.synop] Delete extra space before is_nothrow_copy_assignable
[headers] Update introductory text for the C library now that Clause 17 contains a C header synopsis.
[cinttypes.syn] Explicitly mark the intmax_t forms of abs and div as optional in the synopsis, to match the normative requirement.
[support.types.layout] Clarify that offsetof is based on the C standard library macro of the same name, now that we no longer explicitly say that all of <cstddef> is based on the corresponding C header.
Replace the anachronism 'int f(void)' with 'int f()' throughout the C++ standard library description and in a couple of examples.
Update declarations of NULL and size_t in C header synopses to refer to the place where C++ gives them different meaning from C.
[library.c] Clarify what we mean by 'restrict', since it doesn't exist in C++.
Add index entries for all C standard library entities.
[c.strings] Move descriptions of individual headers to the section for the respective header.
[ctime.syn], [date.time] Delete the latter and move the former into its place. We don't need two descriptions of the contents of <ctime>.
Consistency fixes for C library header descriptions.
[library.c] Consolidate the rules on the behavior of functions that change signature between the C standard library and the C++ standard library here.
[c.mb.wcs] Reorder after relevant C library synopses.
Move description of <cstdlib> out of [numerics] and into [library]. This is a bad home for it, but it seems to be the best bad home, as the portions of <cstdlib> are described in 5 different library clauses.
Add cross-references from <cstdlib> synopsis to places where pieces of it are described, and change those places to use the formatting style we normally use for library entity descriptions.
[cinttypes.syn] Add missing #include <cstdint> to synopsis.
[numerics] Integrate the special math functions into the <cmath> synopsis and add proper descriptions for the parts of the C standard library that we modify.
[numerics] Remove incorrect suggestion that <tgmath.h> is specified here rather than in Annex D.
[numerics] Apply P0175 (C Synopses)
[strings] Apply P0175 (C Synopses)
[input.output] Apply P0175 (C Synopses)
[locales] Apply P0175 (C Synopses)
[utilities] Apply P0175 (C Synopses)
[diagnostics] Apply P0175 (C Synopses)
[support] Apply P0175 (C Synopses)
More replacement of "Standard C Library" with the defined term "C standard library", and remove an outdated reference to the C Unicode TR. <uchar.h> is now incorporated directly from C11.
Replace uses of the phrase "Standard C library" with the defined term "C standard library" throughout the library clauses.
P0063R3 C++17 should refer to C11 instead of C99
LWG2728 status(p).permissions() and symlink_status(p).permissions() are not specified
LWG2727 Parallel algorithms with constexpr specifier
LWG2726 [recursive_]directory_iterator::increment(error_code&) is underspecified
LWG2724 The protected virtual member functions of memory_resource should be private
LWG2723 Do directory_iterator and recursive_directory_iterator become the end iterator upon error?
LWG2721 remove_all has incorrect post conditions
LWG2720 permissions function incorrectly specified for symlinks
LWG2719 permissions function should not be noexcept due to narrow contract
LWG2718 Parallelism bug in [algorithms.parallel.exec] p2
LWG2716 Specification of shuffle and sample disallows lvalue URNGs
LWG2709 offsetof is unnecessarily imprecise
LWG2422 std::numeric_limits<T>::is_modulo description: "most machines" errata
LWG2312 tuple's constructor constraints need to be phrased more precisely
LWG2725 filesystem::exists(const path&, error_code&) error reporting
LWG2711 path is convertible from approximately everything under the sun
LWG2704 recursive_directory_iterator's members should require '*this is dereferenceable'
LWG2687 {inclusive,exclusive}_scan misspecified
LWG2685 shared_ptr deleters must not throw on move construction
LWG2688 clamp misses preconditions and has extraneous condition on result
LWG2684 priority_queue lacking comparator typedef
LWG2596 vector::data() should use addressof
LWG2674 Bidirectional iterator requirement on path::iterator is very expensive
LWG2710 "Effects: Equivalent to ..." doesn't count "Synchronization:" as determined semantics
LWG2707 path construction and assignment should have "string_type&&" overloads
LWG2706 Error reporting for recursive_directory_iterator::pop() is under-specified
LWG2698 Effect of assign() on iterators/pointers/references
LWG2689 Parallel versions of std::copy and std::move shouldn't be in order
LWG2671 Errors in Copy
LWG2436 Comparators for associative containers should always be CopyConstructible
LWG2441 Exact-width atomic typedefs should be provided
LWG2309 mutex::lock() should not throw device_or_resource_busy
LWG2542 Missing const requirements for associative containers
LWG2426 Issue about compare_exchange
LWG2393 std::function's Callable definition is broken
LWG2310 Public exposition only member in std::array
LWG2550 Wording of unordered container's clear() method complexity
LWG2328 Rvalue stream extraction should use perfect forwarding
LWG2549 Tuple EXPLICIT constructor templates that take tuple parameters end up taking references to temporaries and will create dangling references
LWG2673 status() effects cannot be implemented as specified
LWG2670 system_complete refers to undefined variable 'base'
LWG2669 recursive_directory_iterator effects refers to non-existent functions
LWG2667 path::root_directory() description is confusing
LWG2181 Exceptions from seed sequence operations
Rebuild grammar and xrefs with updates from 2016-06 CWG motions.
P0398R0 CWG1518 Explicit default constructors and copy-list-initialization
[stmt] Move grammar and description of 'condition' up
P0305R1 Selection statements with initializer
[dcl.decomp] Use 'interpreted as' not 'taken as' to specify how a token sequence should be parsed, for consistency with similar wording elsewhere.
Update cross-references to decomposition declarations to point to [dcl.decomp] not [dcl.spec.auto].
P0217R3 Structured bindings
[dcl.type.auto.deduct], [dcl.type.class.deduct] Reverse the order of these two clauses so that [dcl.type.auto.deduct] is properly nested within [dcl.spec.auto].
P0391R0 Introducing the term "templated entity"
[dcl.inline] Consistently use teletype font when referring to the inline keyword and roman font when referring to the inline property of functions and variables.
P0386R2 Inline variables
[algorithms.parallel.exec] As instructed by P0299R1, replace all occurrences of 'thread' with 'thread of execution' throughout this subclause.
P0299R1 Forward progress guarantees for the Parallelism TS features
P0296R2 Forward progress guarantees: Base definitions
[dcl.spec.auto] Disambiguate which return statements are meant
[temp] Add cross-reference to "templated entity"
P0292R2 constexpr if: a slightly different syntax
P0283R2 Standard and non-standard attributes
[expr.call] Move specification of parameter sequencing out of the middle of wording on the conversions performed on parameters and into a separate paragraph. Restore note on the relative ordering of argument side effects and the evaluation of the function body now that it's no longer implied by the sequencing of the argument evaluations. Also fix bad "smart" apostrophe in example.
P0400R0 Wording for Order of Evaluation of Function Arguments
P0145R3 Refining Expression Evaluation Order for Idiomatic C++
P0137R1 Replacement of class objects containing reference members
[class.temporary] Promote footnote to note to avoid bullets in a footnote, and move it to later in the clause, to a place where it fits the flow of the surrounding text better.
[dcl.init] Correct "return object" to defined term "result object".
Add missing space in 'cv void'.
[expr.mptr.oper] The left operand of .*, not the right, should be required to be a glvalue.
P0135R1 Wording for guaranteed copy elision through simplified value categories
[dcl.type.auto.deduct] Remove unnecessary wording complexity from handling of return type deduction from void.
P0127R2 Declaring non-type template parameters with auto
[expr.type.conv] Remove defined but unused term from class template argument deduction in function-style cast.
P0091R3 Template argument deduction for class templates
Update all wording referring to placement new-expressions to use the defined term rather than some variation of it.
Use consistent style and order when listing predeclared, replaceable, and library-supplied overloads of operator new/delete, as suggested in a drafting note in P0035R4.
P0035R4 Dynamic memory allocation for over-aligned data
[class.copy] Replace example of guaranteed elision in constant expressions with one that is still correct when P0135R1 is applied.
P0028R4 Using attribute namespaces without repetition
CWG2171 Triviality of copy constructor with less-qualified parameter
CWG2145 Parenthesized declarator in function definition
CWG2137 List-initialization from object of same type
CWG2091 Deducing reference non-type template arguments
CWG2076 List-initialization of arguments for constructor parameters
CWG2022 Copy elision in constant expressions
CWG1861 Values of a bit-field
[associative.reqmts] use code font for q2 in Table 109
[unord.req] use code font for X in Table 11
[strings] Replace NULL with "null pointer value"
[iostreams] Replace NULL with "null pointer value"
[macros,intro] Present example/note formatting better (#763)
[temp.deduct.call] [temp.deduct.conv] Hyphenate top-level
[overloading] Make operators appear in code font (#764)
[diff.cpp11.special] Move to [diff.cpp14.special] (#767)
[diff.cpp03.containers] Use \effect not \effects
[strings,containers] Add iterators to index of implemenetation defined behavior (#754)
[18-20,27] Prefer to use 'override' where appropriate (#753)
Travis CI support (#635)
[iostate.flags] Remove name of exception object thrown
[filesystems] Hyphenate POSIX-based and Windows-based
[fs.norm.ref] Remove redundant reference to MAC OS
[meta.rel] Reformat "Type relationship predicates" table
[meta.trans.other] Reformat Other Transformations table
[reverse.iter.requirements] Avoid 'global operators' (#442)
[global.functions] Replace "global and non-member functions" with less redundant, but no less accurate, term "non-member functions".
[forward.iterators] Capitalize note
[lex.key] Move note after table
Refactored to use new note and example environments.
[utilities] Remove std:: from normative wording
[iterators] Remove std:: from normative wording
[strings] Remove std:: from normative wording
[dcl.enum], [class.mem] Clarify the definitions for layout-compatible and fix their index entries (#700)
[18,20] Consistent indexing of simple exception types (#750)
[libindex] Rename index entries from "bad_X, bad_X::what, implementation defined" to "bad_X, what, implementation defined" for consistency.
[bad.cast], [bad.exception] nest index entries consistently (#744)
[allocator.adaptor.members] fix index entry for destroy
[18-27] Remove tcode from index entries
[compatibility] Add compatibility notices for pp-number (#713)
[unord.req] p12 should refer to key_eq(), not key_equal()
[allocator.adaptor] consolidate memory utilities]
[18-30] Replace typedefs with alias-declarations (#704)
[fs.op.permissions] Combine adjacent tcode regions
[fs.op.permissions] Escape unary complement operator
[lex.pptoken] fix term
[class.path] escape backslash in character literal
[expr] Remove outdated, inaccurate, irrelevant note on the actual behavior of signed integer overflow on "most existing implementations".
Update configuration for building papers after N4594.
New papers n4583 and n4584.
Add N4583 (editor's report for N4582).
[util.smartptr.enab] make p6 appear in its own line (#728)
[class.virtual] This seems like it should be a note: it is the only standardese that mentions dynamic binding and object-oriented programming (#725)
[class.abstract] The intro para seems like it should be a note - nothing seems prescriptive about it. (#724)
[class.member.lookup] 'overloading resolution' sounds odd - every other reference to the process uses 'overload resolution' (#723)
[ext.manip] fix typo in put_money description (#717)
[algorithms] [numeric.ops] Crossref "writable" (#706)
[alg.random.sample] reword and add cross-reference (#705)
[meta.unary.prop] Consistent formatting for 'void' (#684)
Improve consistency of complexity descriptions (#636)
[diff.cpp11] Supply a compatibility note for CWG1560 (#530)
[directory_iterator.members] [rec.dir.itr.members] fix "skip_permissions_denied"
deque should not reference vector
Remove the semicolon in "Returns: expr;" (#718)
Revert "[memory.polymorphic.allocator] Coding style fixes (and minor rewording of p8)"
[expr.delete] Clarify how an "otherwise" binds and remove a redundant cross-reference.
[fs.op.permissions] Clean up apparent stray HTML formatting
Add name "high" to locale::narrow in [category.ctype]
Un-\term "allocation function" and "deallocation function" (#707)
Minor edits to library discovered while fixing \effects clauses
Use "As if by" in \effects which lack a code introduction (#694 part 2)
[re.results] Add missing reference (#201)
[temp.deduct.type] Add missing "of" (#217)
Un-grammarterm "parameter-type-list" (#213)
Hyphenate "default initializ*" (#337)
[basic.start.dynamic, temp.inst] Don't hyphenate "side-effects"
[unique.ptr.single.ctor, tuple.elem] Add "a" before "non-reference type"
[memory.resource.prot] Clarify that "it" is the dynamic_cast expression in the note in p7
[memory] Split up monolithic Latex lines for readability
[memory.polymorphic.allocator] Coding style fixes (and minor rewording of p8)
[memory.polymorphic.allocator] Add references and add/fix comments in synopsis (#699)
[class.directory_entry] Rename m_path to pathobject for consistency
[memory] Rename m_resource to memory_rsrc for consistency
[memory.polymorphic.allocator] Move description in synopsis to function details as a note.
[sf.cmath] Reference parameters in Returns clauses by adding "where $n$ is |n|".
[sf.cmath] Reformat clauses to be more consistent with the rest of the library.
[sf.cmath] Replace "Returns: The X functions return" with "Returns:" for consistency.
[string::find, string::rfind] Change "obtain:" to "hold:" for consistency.
Editorial fixes to 2016-02 LWG Motion 6, P0220R1 (except section 7)
[temp.deduct.partial, temp.class.spec.match] Italicise "at least as specialized" and add indexes to 'more specialized'.
[tuple.cnstr] fix the position of \end{itemdescr}
[dcl.fct.def.delete] CWG908 Deleted global allocation and deallocation functions
[tuple.helper] prefer to use tuple_element_t (#686)
[unique.ptr.special] prefer use of common_type_t (#685)
[intseq] consolidate <utility> docs (#682)
[meta.unary.prop] add missing \ in is_swappable. (#681)
[dcl.ambig.res] Combine example into the paragraph that it's an example of, to parallel the other paragraphs in this subclause.
[dcl.ambig.res] Avoid suggesting "disambiguation" that changes the meaning of the program. Remove redundant sentence that obscures the meaning of the type-id versus function-style cast disambiguation rule. Remove example that actually contains no ambiguity, and merge and slightly extend remaining examples.
[string.view] Revert a few editorial changes made to Effects clauses.
[index] Use case-insensitive sorting for index entries __cplusplus and __has_include relative to other __BLAH__ index entries.
[expr.prim] Update cross-references after splitting of [expr.prim].
[expr.prim] Add hierarchical structure to this subclause.
[intro.execution] Add missing paragraph number.
[namespace.def] Remove content-free introductory sentence.
[class.mem] Move sibling subclauses describing class members into [class.mem].
[class.mem] Clarify that member templates and their specializations are in fact class members, that static_assert declarations are valid within classes despite not introducing member names, and that alias-declarations can be used to introduce nested types. Give complete definitions for these terms:
Editorial fixes to 2016-02 LWG Motion 6, P0220R1: string_view (section 7)
[optional.object.swap] Clarify wording in throws clause from "P0220R1: optional (section 5)"
[fs.op.equivalent, fs.op.is_empty] Add \pnum after \begin{itemdescr}.
[sf.cmath] Rename section names to be consistent.
[func.searchers] Use bullets to clarify wording when two iterators are returned.
[new.delete.array] Add \brk to overlong lines
[allocator.requirements] Add \brk in table cell
[ifstream.members], [ofstream.members], [fstream.members] Place \ref consistently
[fs.op.file_size] Add parentheses around reference
[path.op.absolute] Add cross-reference to [fs.def.absolute.path].
[path.op.funcs] Add cross-reference to [fs.def.race].
[path.native.obs] Add cross-reference to [fs.def.native].
[path.construct], [path.assign], [path.append], [path.concat] Change references to [path.cvt].
[move.iterator],[unique.ptr.special] Use "Let ... denote" instead of "Let ... be" for consistency.
[unique.ptr.special] Move ',' outside of \tcode{}.
Use \placeholder{} for some placeholders variables used in library code.
[tuple.helper] Add missing pnum before remarks clause.
Consistently employ _t/_v suffixes when mentioning any type trait's resulting type/value.
Editorial fixes to 2016-02 LWG Motion 7, P0218r1
[string.view, alg.random.sample, numerics] Use \bigoh.
[sf.cmath] Use \indextext and \indexlibrary instead of \index.
[cpp.replace] Remove a bogus grammar term that make object-like and function-like appear to be definitions when they are not.
[numerics] Use simpler table for header content
Move index text
Index entries for [hardware.interference]
[expr.prim.lambda] Add index entry for example of *this capture.
[intro.object] Refer to 'name' as a term, not a grammar term.
[class.mfct.non-static] Remove bogus grammar term
[class.mem, class.mfct.non-static] Convert nonstatic to non-static since the hyphenated use is the more common term.
[inclusive.scan] Add missing template parameter.
[algorithms] Use \Cpp macro
[expr.prim.lambda] Replace EM-SPACE(U+2003) with space(U+0020)
[class.conv.fct] add \tcode{} around `*`
Replaced \note with \remark and \notes with \remarks.
[expr.new] Terminate a parenthetical
Make the entirety of [class.static.data]/5 a note
Update configuration for building papers after N4582.
[N4582] Update configuration for building new working draft.
Minor editorial fixes throughout the library found in review by Dawn Perchik.
[headers] Reflow header table to 4 columns.
[input.output] Add <filesystem> to summary of this Clause. [headers] Add <filesystem> to list of library headers.
[fs] Remove apparent claim that FAT is the only filesystem used on memory cards or flash cards. Even if that were true, it's not relevant to the C++ standard.
[fs] Minor fixes: formatting, style issues, over-reaching notes.
[definitions] alphasort remaining library definitions
[defns.const.subexpr] Place defintition in alphabetical order
P0272R1 Give 'std::string' a non-const '.data()' member function.
LWG2296 std::addressof should be constexpr
P0031R0 Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access
P0154R1 constexpr std::hardware_{constructive,destructive}_interference_size.
[func.not_fn] Use teletype font for concept name.
[alg.clamp] Add clamp to <algorithm> synopsis and reorder it before lexicographical comparisons to match the synopsis order.
[utilities], [containers] Replace 'is_nothrow_swappable<T>::value' with 'is_nothrow_swappable_v<T>' and likewise for 'is_swappable'.
P0185R1 Adding [nothrow-]swappable traits, revision 3.
[diff.cpp11.expr] Move removal of bool++ from C++14 compatibility annex to C++17 annex
[fs.def.parent] Split into two definitions using \\defncontext
Define \\definitionx for [fs.definitions]
[filesystems] Adjust table layout and references
Conversion of filesystem TS to LaTeX.
P0005R4 Adopt not_fn from Library Fundamentals 2 for C++17
P0033R1, Re-enabling shared_from_this (revision 1).
[expr.prim.lambda] Add missing linebreak before new   simple-capture ::= *this grammar production.
[expr.prim.lambda] Use \CppXIV instead of \Cpp14.
[lex, dcl.decl] Use \nontermdef and \grammarterm more consistently.
[strings] Formatting and whitespace harmonization
[valarray.members] add missing \end{itemdescr} and \begin{itemdescr}
[utilities] Add some hyphenation hints for long inline expressions
P0220R1: add new headers to header table.
P0220R1: algorithms (section 9).
P0220R1: memory resources (section 8), except for section 8.2 (shared_ptr and weak_ptr changes)
P0220R1: string_view (section 7)
Move all std::basic_string subclauses under [string.classes] in preparation for adding a sibling clause for string_view.
P0220R1: any (section 6)
P0220R1: optional (section 5)
P0220R1: tuple apply (section 3) and searchers (section 4).
P0226R1 Mathematical Special Functions for C++17, v5
P0024R2 The Parallelism TS Should be Standardized
Add missing "*" in example.
[macros] Make \Cpp work in PDF bookmarks again
[lex.ppnumber] Add p+ and P+ as valid components of a pp-number token. This edit was missed from P0245R1, but was intended and is a fundamental part of the proposal.
[lex.literal] Reuse hexadecimal-prefix and hexadecimal-digit-sequence to specify the form of a hexadecimal-literal.
P0138R2 Construction Rules for enum class Values
P0018R3 Lambda Capture of *this by Value as [=,*this]
P0170R1 Wording for Constexpr Lambda
P0017R1 Extension to aggregate initialization
P0212R1 Wording for [[maybe_unused]] attribute
[dcl.attr] Reorder [[noreturn]] after [[nodiscard]] to put attribute sections in alphabetical order.
P0189R1 Wording for [[nodiscard]] attribute
P0189R1 Wording for [[nodiscard]] attribute
CWG2180 Virtual bases in destructors and defaulted assignment operators
CWG2176 Destroying the returned object when a destructor throws
CWG2175 Ambiguity with attribute in conversion operator declaration
CWG2167 Non-member references with lifetimes within the current evaluation
CWG2163 Labels in constexpr functions
CWG2156 Definition of enumeration declared by using-declaration
CWG2154 Ambiguity of pure-specifier
CWG2153 pure-specifier in friend declaration
CWG2146 Scalar object vs memory location in definition of “unsequenced”
CWG2141 Ambiguity in new-expression with elaborated-type-specifier
CWG2140 Lvalue-to-rvalue conversion of std::nullptr_t
CWG2129 Non-object prvalues and constant expressions
CWG2122 Glvalues of void type
CWG1496 Triviality with deleted and missing default constructors
CWG2104 Internal-linkage constexpr references and ODR requirements
CWG2064 Conflicting specifications for dependent decltype-specifiers
CWG2047 Coordinating “throws anything” specifications
CWG1872 Instantiations of constexpr templates that cannot appear in constant expressions
CWG212 Implicit instantiation is not described clearly enough
CWG1638 Declaring an explicit specialization of a scoped enumeration
CWG1284 Should the lifetime of an array be independent of that of its elements?
CWG242 Interpretation of old-style casts
CWG2147 Initializer-list arguments and pack deduction
CWG2113 Incomplete specification of types for declarators
CWG2109 Value dependence underspecified
CWG2107 Lifetime of temporaries for default arguments in array copying
CWG2106 Unclear restrictions on use of function-type template arguments
CWG2098 Is uncaught_exceptions() per-thread?
CWG2096 Constraints on literal unions
CWG2095 Capturing rvalue references to functions by copy
CWG2085 Invalid example of adding special member function via default argument
CWG2079 [[ appearing in a balanced-token-seq
CWG2071 typedef with no declarator
CWG2069 Do destructors have names?
CWG2068 When can/must a defaulted virtual destructor be defined?
CWG2063 Type/nontype hiding in class scope
CWG2061 Inline namespace after simplifications
CWG2044 decltype(auto) and void
CWG2041 Namespace for explicit class template specialization
CWG2040 trailing-return-type no longer ambiguous
CWG2039 Constant conversions to bool
CWG2038 Document C++14 incompatibility of new braced deduction rule
CWG2033 Redundant restriction on partial specialization argument
CWG2032 Default template-arguments of variable templates
CWG2012 Lifetime of references
CWG1315 Restrictions on non-type template arguments in partial specializations
CWG238 Precision and accuracy constraints on floating point
CWG1992 new (std::nothrow) int[N] can throw
CWG2157 Further disambiguation of enumeration elaborated-type-specifier
CWG2130 Over-aligned types in new-expressions
CWG2124 Signature of constructor template
CWG2099 Inferring the bound of an array static data member
CWG2093 Qualification conversion for pointer-to-member handler matching
CWG2084 NSDMIs and deleted union default constructors
CWG2082 Referring to parameters in unevaluated operands of default arguments
CWG2017 Flowing off end is not equivalent to no-expression return
CWG2008 Default template-arguments underspecified
CWG2001 non-directive is underspecified
CWG1955 #elif with invalid controlling expression
CWG1930 init-declarator-list vs member-declarator-list
CWG1895 Deleted conversions in conditional operator operands
CWG1734 Nontrivial deleted copy functions
P0152R1 constexpr atomic::is_always_lock_free.
P0025R0 An algorithm to "clamp" a value between a pair of boundary values.
P0030R1 Proposal to Introduce a 3-Argument Overload to std::hypot (option #2),
P0077R2, is_callable, the missing INVOKE related trait.
P0245R1 Hexadecimal floating literals for C++
[diff] Use \Cpp macro
P0184R0 Generalizing the Range-Based For Loop
[macros] Change \Cpp macro to look nicer
P0036R0 Unary Folds and Empty Parameter Packs (revision 1)
LWG2585 forward_list::resize(size_type, const value_type&) effects incorrect
LWG2582 §[res.on.functions]/2's prohibition against incomplete types shouldn't apply to type traits
LWG2571 §[map.modifiers]/2 imposes nonsensical requirement on insert(InputIterator, InputIterator)
LWG2590 Aggregate initialization for std::array
LWG2586 Wrong value category used in scoped_allocator_adaptor::construct()
LWG2583 There is no way to supply an allocator for basic_string(str, pos)
LWG2581 Specialization of <type_traits> variable templates should be prohibited
LWG2579 Inconsistency wrt Allocators in basic_string assignment vs.  basic_string::assign
LWG2577 {shared,unique}_lock should use std::addressof
LWG2576 istream_iterator and ostream_iterator should use std::addressof
LWG2572 The remarks for shared_ptr::operator* should apply to cv-qualified void as well
LWG2566 Requirements on the first template parameter of container adaptors
LWG2565 std::function's move constructor should guarantee nothrow for reference_wrappers and function pointers
LWG2560 is_constructible underspecified when applied to a function type
LWG2559 Error in LWG 2234's resolution
LWG2557 Logical operator traits are broken in the zero-argument case
LWG2545 Simplify wording for bind without explicitly specified return type
LWG2520 N4089 broke initializing unique_ptr<T[]> from a nullptr
LWG2450 (greater|less|greater_equal|less_equal)<void> do not yield a total order for pointers
LWG2192 Validity and return type of std::abs(0u) is unclear
LWG2537 Constructors for priority_queue taking allocators should call make_heap
LWG2523 std::promise synopsis shows two set_value_at_thread_exit()'s for no apparent reason
LWG2276 Missing requirement on std::promise::set_exception
[lex] Remove spurious whitespace
Use textual angle brackets in body text
[dcl.align] Remove "other than <list of types>" from example that actually works for all types, per CWG discussion.
Unify the formatting of "Equivalent to" be consistent.
Delete the redundant 'update' when describing actions upon independent memory locations.  The definition of 'access' includes modifying a location per 1.3.1/access.
[futures.shared_future] Remove duplicated word "shared"
Uniform "ones' complement" and "two's complement"
[gram.key] Remove unreferenced original-namespace-name nonterminal.
[gram.key] Make BNF for namespace-name the same as in [gram.dcl] and [namespace.def].
Re-synchronize generated grammar.tex with grambase.tex.
Swap effects of `basic_regex::operator=` and `assign`
Remove incorrect "shall"
[support.types] Remove "field", which is not a defined term in C++.
[defns.const.subexpr] Remove superfluous words
Missing closing parenthesis
Adding a note about what a member subobject is
Making identifier label into a definition.
[expr.const] adjust note
[dcl.type.cv]/6 "program behavior" vs "behavior"
[stmt.label] Clarify what it means for labels to be in their own name space.
[c.files] cinttypes synopsis refers to SCNX* macros which do not exist
[macros, atomic] Align placeholders
[diff.library] add missing NULL <cstdio> and correct counts
[algorithms] Improve typographic consistency of complexity expressions
[complex] Clarify the range of return values of log
[complex.numbers] Make whitespace and capitalization more consistent
[alg.transform] Relayout list of requirements as itemization
[macros] Add space into \range and remove preposterous linebreaks.
[atomics] Remove incomplete mention of "inttypes.h" and reword table headers
[futures.async] Use code font for "std::async"
Typographic fixes, spacing after \opt
[lib-intro, utilities] Apply \placeholder macro
[iterators, locales] Apply \placeholder macro
[basic.link] Reword sentence to make it more obvious how it's supposed to be parsed.
Replace raw string 'C++' with the appropriate macro
[utilities] Whitespace fixes around punctuators
[diagnostics] Whitespace fixes around punctuators
[containers] Whitespace fixes around punctuators
[localization] Change bold-slanted font to simple italics. This removes LaTeX "missing font" warning and is also perfectly sufficient to mark "variable code". Apply consistently to a second use case, too.
[class.inhctor.init] Add missing closing paren from P0136R1.
[stmt.ranged] Repeat grammar snippet to clarify what we mean by a "range-based for statement", and improve formatting to match that of [stmt.for].
[containers] Make intra-synopsis comments consistent
[propagation] use code font for exception_ptr
[replacement.functions] Remove reference to sized nothrow operator delete functions, which were removed by LWG2458.
[xref] Update xrefs following 7bcdb21 and 3449445
[diagnostics] Turn synopses into numbered sections
[support] Turn synopses into numbered sections
[except.ctor] Remove broken and unnecessary index entry.
[time.clock.system] Remove periods from impldef index entries.
[defns.blocked] Use correct character for index subentry.
[dcl.ref] Move an index entry closer to what it indexes.
[over.over] Make index entry for overloaded function consistent with the one in [expr.unary.op].
[gram, gram.key, lex.ppnumber] Use \indextext instead of \index.
[locale.id] Add missing \tcode
[rand.adapt.general] apply ref fix from LWG 2181
[headers] Add <shared_mutex> to Table 14.
[time.point.cast] replaces braces with parentheses
[memory.syn] add default argument to owner_less
[allocator.requirements], [res.on.arguments] qualify std::move
[utility] Make spelling of 'cv void' more consistent
[class] Clarify 'cv-void class members'
[sequences.general] Promote header synopses to rSec2
Revert accidental mode change on strings.tex
[stack.syn] Move <stack> synopsis after <queue> synopsis
[dcl.init.ref] Replace normative note with actual note.
Turn off ligature formation in \texttt. In a couple of places, we were rendering << or >> as guillemets.
Use microtype package; this allows us to word wrap less often.
[util.smartptr.ownerless] Italicize "unspecified".
Remove unwanted spaces after /unspecified/ in library synopses.
Update configuration for building papers after N4567.
Update configuration for new working draft N4567, and build new papers N4566 (editor's report) and N4567 (new working draft).
[dcl.constexpr] Consistently describe rules for validity of constexpr function definitions as "requirements" so that the cross-references to this definition use the same term as the definition itself.
[cstdint.syn] <cstdint> defines no functions; don't suggest that it does.
[meta.logical] Improve formatting for consistency with other library clauses.
P0013R1 Logical type traits
P0074R0 Making std::owner_less more flexible
P0092R1 Polishing <chrono>.
P0006R0 Adopt Type Traits Variable Templates for C++17.
LWG2495 There is no such thing as an Exception Safety element
LWG2273 regex_match ambiguity
LWG2234 assert() should allow usage in constant expressions
LWG2224 Ambiguous status of access to non-live objects
LWG2492 Clarify requirements for comp
LWG2489 mem_fn() should be noexcept
LWG2487 bind() should be const-overloaded, not cv-overloaded
LWG2486 mem_fn() should be required to use perfect forwarding
LWG2485 get() should be overloaded for const tuple&&
LWG2484 rethrow_if_nested() is doubly unimplementable
LWG2483 throw_with_nested() should use is_final
LWG2477 Inconsistency of wordings in std::vector::erase() and std::deque::erase()
LWG2476 scoped_allocator_adaptor is not assignable
LWG2473 basic_filebuf's relation to C FILE semantics
LWG2469 Wrong specification of Requires clause of operator[] for map and unordered_map
LWG2466 allocator_traits::max_size() default behavior is incorrect
LWG2462 std::ios_base::failure is overspecified
LWG2447 Allocators and volatile-qualified value types
LWG2435 reference_wrapper::operator()'s Remark should be deleted
LWG2385 function::assign allocator argument doesn't make sense
LWG2384 Allocator's deallocate function needs better specification
LWG2380 May <cstdlib> provide long ::abs(long) and long long ::abs(long long)?
LWG2367 pair and tuple are not correctly implemented for is_constructible with no args
LWG2353 std::next is over-constrained
LWG2336 is_trivially_constructible/is_trivially_assignable traits are always false
LWG2259 Issues in 17.6.5.5 rules for member functions
LWG2250 Follow-up On Library Issue 2207
LWG2244 Issue on basic_istream::seekg
LWG2219 INVOKE-ing a pointer to member with a reference_wrapper as the object expression
LWG2218 Unclear how containers use allocator_traits::construct()
LWG2156 Unordered containers' reserve(n) reserves for n-1 elements
LWG2133 Attitude to overloaded comma for iterators
LWG2127 Move-construction with raw_storage_iterator
LWG2119 Missing hash specializations for extended integer types
LWG2111 Which unexpected/terminate handler is called from the exception handling runtime?
LWG2101 Some transformation types can produce impossible types
LWG2072 Unclear wording about capacity of temporary buffers
LWG1169 num_get not fully compatible with strto*
P0136R1 Rewording inheriting constructors
P0134R0 Introducing a name for brace-or-equal-initializers for non-static data members
P0061R1 __has_include for C++17
P0012R1 Make exception specifications be part of the type system, version 5
P0002R1 Remove Deprecated operator++(bool)
P0001R1 Remove Deprecated Use of the register Keyword
CWG2120 Array as first non-static data member in standard-layout class
CWG2101 Incorrect description of type- and value-dependence
CWG2075 Passing short initializer lists to array reference parameters
CWG2031 Missing incompatibility for &&
CWG2052 Template argument deduction vs overloaded operators
CWG2027 Unclear requirements for multiple alignas specifiers
CWG2026 Zero-initialization and constexpr
CWG2024 Dependent types and unexpanded parameter packs
CWG2019 Member references omitted from description of storage duration
CWG2015 odr-use of deleted virtual functions
CWG2006 Cv-qualified void types
CWG2004 Unions with mutable members in constant expressions
CWG2000 header-name outside #include directive
CWG1990 Ambiguity due to optional decl-specifier-seq
CWG1981 Implicit contextual conversions and explicit
CWG1975 Permissible declarations for exception-specifications
CWG1949 “sequenced after” instead of “sequenced before”
CWG1863 Requirements on thrown object type to support std::current_exception()
CWG1722 Should lambda to function pointer conversion function be noexcept?
CWG1391 Conversions to parameter types with non-deduced template arguments
CWG1274 Common nonterminal for expression and braced-init-list
[dcl.init.list] Update example to reflect that binding a temporary to a reference is ill-formed; this also applies to std::initializer_list initialization, which is specified as performing a reference binding.
P0013R1 Logical type traits
P0156R0 Variadic lock_guard (rev 3).
P0007R1 Constant View: A proposal for a std::as_const helper function template.
P0004R1 Remove Deprecated iostreams aliases.
[over.load] Added cross references to function/array vs. pointer in overloading
[expr] Add missing indexes for definitions, and make others consistent.
[gram.expr] Add an index to the definition of "composite pointer type"
[gram.expr] Add an index to definition of term "cv-combined type"
[unord.req] Change object to value to match cleanup after merge with LWG2059.
[diff.cpp11] Add a note that default member initializers for aggregates is a breaking change compared to C++11.
[temp.class.spec.match] Repeat a portion of an example so we don't separate the declaration and use of some template specializations by several pages.
[dcl.attr.grammar] Remove grammar ambiguity from balanced-token-seq.
Update some cross-references from [class.union] to [class.union.anon].
[class.union] Split wording for anonymous unions to a new subclause, [class.union.anon].
[class.union] Make terms "union-like class" and "variant member" indexed definitions.
[new.delete.array] Add missing changes from LWG206.
[temp.dep] Remove duplicate 'if'.
[thread.condition.condvar] wait() cannot timeout.
Change "typename decay<F>::type" to "decay_t<F>"
Refine "Index of library names" for operator<< and operator>>
[util.smartptr.shared.const] Add missing period.
[ext.manip] Replace a colon with a semi-colon.
[class.protected] Update example to match CWG1873.
cv-unqualified is not a grammar term in this context, similar to other uses in the same paragraph.
Another ODR spelling change. Should be the last one.
Unify the spelling of one-definition rule to be consistent.
Local definition of "char-like type" from Clause 21 referenced in Clause 28
[allocator.adaptor.members] Use code font for class name.
[allocator.adaptor.members] Add space after comma.
[dcl.fct.def.delete], [dcl.constexpr], [class.friend]: Replace "implicitly inline" with "implicitly an inline function", because the latter is the term defined in 7.1.2.
[namespace.udecl] Remove incorrect example.
[class.union] Change "but not" to "but it shall not have" as suggested by Hubert Tong.
Align declarations
Update Annex A and Annex F to reflect recent changes.
[ratio.arithmetic] Improve indentation of comment in example.
[except.spec] Remove spurious parens in example.
[streambuf], [istream], [iostreamclass], [ostream] These are class templates not classes.
[streambuf] Use injected class name for basic_streambuf.
[support.dynamic] LWG2458 remove correct signatures
Added papers N4527 (new working draft with post-Lenexa motions) and N4528 (editor's report for same), and updated config for building drafts after N4527.
Update configuration for building N4527.
N4508 A proposal to add shared_mutex (untimed) (Revision 4)
N4389 Wording for bool_constant, revision 1
N4387 Improving pair and tuple, revision 3
LWG2488 Placeholders should be allowed and encouraged to be constexpr
LWG2464 try_emplace and insert_or_assign misspecified
LWG2442 call_once() shouldn't DECAY_COPY()
LWG2420 function<void(ArgTypes...)> does not discard the return value of the target object
LWG2407 packaged_task(allocator_arg_t, const Allocator&, F&&) should neither be constrained nor explicit
LWG2063 Contradictory requirements for string move assignment
LWG2482 Table 73 mentions nonexistent functions
LWG2470 Allocator's destroy function should be allowed to fail to instantiate
LWG2467 is_always_equal has slightly inconsistent default
LWG2459 std::polar should require a non-negative rho
LWG2458 N3778 and new library deallocation signatures
LWG2455 Allocator default construction should be allowed to throw
LWG2454 Add raw_storage_iterator::base() member
LWG2448 Non-normative Container destructor specification
LWG2437 iterator_traits<OutIt>::reference can and can't be void
LWG2415 Inconsistency between unique_ptr and shared_ptr
LWG2378 Behaviour of standard exception types
LWG2369 constexpr max(initializer_list) vs max_element
LWG2239 min/max/minmax requirements
LWG2076 Bad CopyConstructible requirement in set constructors
LWG2059 C++0x ambiguity problem with map::erase
LWG2440 seed_seq::size() should be noexcept
LWG2439 unique_copy() sometimes can't fall back to reading its output
LWG2438 std::iterator inheritance shouldn't be mandated
LWG2434 shared_ptr::use_count() is efficient
LWG2433 uninitialized_copy()/etc. should tolerate overloaded operator&
LWG2428 "External declaration" used without being defined
LWG2427 Container adaptors as sequence containers, redux
LWG2425 operator delete(void*, size_t) doesn't invalidate pointers sufficiently
LWG2411 shared_ptr is only contextually convertible to bool
LWG2406 negative_binomial_distribution should reject p == 1
LWG2403 stof() should call strtof() and wcstof()
LWG2364 deque and vector pop_back don't specify iterator invalidation requirements
LWG2168 Inconsistent specification of uniform_real_distribution constructor
N4510 Minimal incomplete type support for standard containers, revision 4
N4366 LWG2228 Missing SFINAE rule in unique_ptr templated assignment
CWG1999 Representation of source characters as universal-character-names
CWG1988 Ambiguity between dependent and non-dependent bases in implicit member access
CWG1978 Redundant description of explicit constructor use
CWG1967 Temporary lifetime and move-elision
CWG1966 Colon following enumeration elaborated-type-specifier
CWG1963 Implementation-defined identifier characters
CWG1958 decltype(auto) with parenthesized initializer
CWG1952 Constant expressions and library undefined behavior
CWG1951 Cv-qualification and literal types
CWG1247 Restriction on alias name appearing in type-id
CWG1971 Unclear disambiguation of destructor and operator~
CWG1956 Reuse of storage of automatic variables
CWG1942 Incorrect reference to trailing-return-type
CWG1929 template keyword following namespace nested-name-specifier
CWG1926 Potential results of subscript operator
CWG1925 Bit-field prvalues
CWG1922 Injected class template names and default arguments
CWG1920 Qualification mismatch in pseudo-destructor-name
CWG1916 “Same cv-unqualified type”
CWG1899 Value-dependent constant expressions
CWG1888 Implicitly-declared default constructors and explicit
CWG1886 Language linkage for main()
[dcl.spec.auto] Deduction of auto in direct-list-initialization from a double-braced init list will always fail. Use a more specific term here to avoid suggesting otherwise.
Punctuation following canonical type strings, such as "pointer to int", go outside the quotation marks, because the quotation marks are part of the technical content. Punctuation stays inside other quotation marks.
[intro.defs] Formatting fixes and addition of some cross-references.
Remove unused file preface.tex.
LWG2160 Unintended destruction ordering-specification of resize
CWG1873 Protected member access from derived class friends
CWG1652 Object addresses in constexpr expressions
CWG1309 Incorrect note regarding lookup of a member of the current instantiation
CWG1875 Reordering declarations in class scope
[c.math] Add rand to index of library names.
s/template classes/class templates/
No qualified std::fclose call
Update intro.tex
[char.traits.require]: Use "class template" instead of "struct template".
[char.traits]: Use "class template" instead of "struct template".
[char.traits.specializations]: Use "class template" instead of "template struct".
[allocator.requirements]: Use "class template" instead of "template struct".
[support.exception] Add reference to [depr.uncaught].
[re.badexp] Remove redundant colon.
[containers] Minor whitespace and ordering improvements
[valarray.syn] Footnote should reference Annex B.
[containers] Consistency cleanups (cf. Issue #400): Ordering of members, whitespace
[strings] Add line break to table caption.
[unord.req] Made intro wording for Table 103 more consistent.
[associative.reqmts] Made Table 102 consistent in the use of u.
 [sequence.reqmts] Made Table 100 consistent in the use of u.
[allocator.requirements] Made Tables 27/28 consistent in the use of u.
[containers] Made phrasing for "a value of type X" more consistent.
[allocator.requirements] Removed unused variables V and v in Table 27.
[allocator.requirements] Removed unused variables r and s in Table 27.
[allocator.requirements] Removed unused variable t in Table 27.
[allocator.requirements] Removed unused variable a3 in Table 27.
Update configuration for building drafts after N4431.
Add papers N4431 (new working draft for pre-Lenexa meeting) and N4432 (the corresponding editor's report).
Add back redundant 'of arithmetic type' requirement at request of lib-37799.
CWG1531 Definition of "access" (verb)
Update CD cover to match latest ISO copyright notice.
[dcl.dcl] Use a less contentious example for static_assert.
Adding a bullet to [except.terminate] for condition variables
[support.start.term] Add missing semicolon.
Update Table 121. Rename [fstreams]. Move [fstreams]/2.
[file.streams] Change sub-clauses to rSec2, similar to [string.streams]
[iterator.operations], [is.heap] Remove indentation in itemdecl.
[basic.align], [syserr] Add missing semicolons.
Consistency cleanups in [containers] (cf. Issue #400). This part of the cleanup changes only whitespace: inserted before commas, removed after namespace braces, improved indentation consistency, removed some extraneous linebreaks for things that fit well on one line
[thread.lock.shared.cons] fix typos
[bad.cast], [bad.typeid] Remove indentation in itemdecl.
[bad.alloc] Remove indentation in itemdecl.
[futures.async] Use American English spelling of "behavior"
Correct link in basic_ostream::flush() description
[unique.ptr], [func.require] Remove hyphens from "lvalue-reference" and "rvalue-reference".
[locale.codecvt.virtuals] Use code font for integer literals.
[swappable.requirements] add comma
[string::assign] Add missing comma in expression. Thanks to tomalakgeretkal for reporting this.
[temp.deduct] Correct "void ()(const int, int[5])"
[template.valarray] Use injected-class-name in valarray.
[dcl.spec.auto] Add implied word "trailing-return-type" to clarify the meaning of this sentence.
[stmt.ranged] Change italics to grammarterm.
[{i,o}stream.manip] Remove redundant "namespace std"
[dcl.fct] Format '...' in fixed-width font in the grammar and when it's later referred to in the text.
[expr.sizeof] redundant wording
[re.regiter.incr] fix typo
Editorial fixes from review by Mike Miller.
Added missing line breaks for wording incorporated from N4230.
[func.wrap.func.inv] Add missing semi-colon.
Update configuration for building drafts after N4296.
Added papers N4296 (new working draft with post-Urbana motions) and N4297 (editor's report for same).
Rebuild grammar and xrefs.
LWG2325 minmax_element()'s behavior differing from max_element()'s should be noted
LWG2387 More nested types that must be accessible and unambiguous
LWG2217 operator==(sub_match, string) slices on embedded '\0's
LWG2106 move_iterator wrapping iterators returning prvalues
LWG2230 "see below" for initializer-list constructors of unordered containers
LWG2266 vector and deque have incorrect insert requirements
LWG2233 bad_function_call::what() unhelpful
LWG2365 Missing noexcept in shared_ptr::shared_ptr(nullptr_t)
LWG2376 bad_weak_ptr::what() overspecified
LWG2361 Apply 2299 resolution throughout library
LWG2212 tuple_size for const pair request <tuple> header
LWG2404 mismatch()'s complexity needs to be updated
LWG2354 Unnecessary copying when inserting into maps with braced-init syntax
LWG2408 SFINAE-friendly common_type/iterator_traits is missing in C++14
LWG2396 underlying_type doesn't say what to do for an incomplete enumeration type
LWG2401 std::function needs more noexcept
LWG2400 shared_ptr's get_deleter() should use addressof()
LWG2399 shared_ptr's constructor from unique_ptr should be constrained
LWG2377 std::align requirements overly strict
CWG1909 Member class template with the same name as the class
CWG1902 What makes a conversion “otherwise ill-formed”?
CWG1891 Move constructor/assignment for closure class
CWG1887 Problems with :: as nested-name-specifier
CWG1885 Return value of a function is underspecified
CWG1882 Reserved names without library use
CWG1878 operator auto template
CWG1874 Type vs non-type template parameters with class keyword
CWG1870 Contradictory wording about definitions vs explicit specialization/instantiation
CWG1866 Initializing variant members with non-trivial destructors
CWG1865 Pointer arithmetic and multi-level qualification conversions
CWG1858 Comparing pointers to union members
CWG1848 Parenthesized constructor and destructor declarators
CWG1838 Definition via unqualified-id and using-declaration
CWG1819 Acceptable scopes for definition of partial specialization
CWG1795 Disambiguating original-namespace-definition and extension-namespace-definition
CWG1672 Layout compatibility with multiple empty bases
CWG1813 Direct vs indirect bases in standard-layout classes
CWG1788 Sized deallocation of array of non-class type
CWG1774 NB CA-24 Discrepancy between subobject destruction and stack unwinding
CWG1719 Layout compatibility and cv-qualification revisited
CWG1696 Temporary lifetime and non-static data member initializers
CWG1630 Multiple default constructor templates
CWG1811 Lookup of deallocation function in a virtual destructor definition
CWG1596 Non-array objects as array[1]
CWG1397 Class completeness in non-static data member initializers
CWG1940 static_assert in anonymous unions
CWG1911 constexpr constructor with non-literal base class
CWG1892 Use of auto in function type
CWG1877 Return type deduction from return with no operand
CWG1846 Declaring explicitly-defaulted implicitly-deleted functions
CWG1708 overly-strict requirements for names with C language linkage
CWG1823 String literal uniqueness in inline functions
CWG1806 Virtual bases and move-assignment
CWG1633 Copy-initialization in member initialization
CWG1467 List-initialization of aggregate from same-type object Also fixes CWG1490, CWG1589, CWG1631, CWG1756, and CWG1758.
CWG1351 Problems with implicitly-declared exception-specifications Also fixes CWG1356, CWG1465, and CWG1639.
CWG1744 Unordered initialization for variable template specializations
CWG1603 Errors resulting from giving unnamed namespaces internal linkage
CWG1810 Invalid ud-suffixes
CWG1852 Wording issues regarding decltype(auto)
CWG1851 decltype(auto) in new-expressions
CWG1850 Differences between definition context and point of instantiation
CWG1843 Bit-field in conditional operator with throw operand
CWG1834 Constant initialization binding a reference to an xvalue
CWG1832 Casting to incomplete enumeration
CWG1830 Repeated specifiers
CWG1824 Completeness of return type vs point of instantiation
CWG1816 Unclear specification of bit-field values
CWG1814 Default arguments in lambda-expressions
CWG1809 Narrowing and template argument deduction
CWG1805 Conversions of array operands in conditional-expressions
CWG1804 Partial specialization and friendship
CWG1802 char16_t string literals and surrogate pairs
CWG1800 Pointer to member of nested anonymous union
CWG1799 mutable and non-explicit const qualification
CWG1797 Are all bit patterns of unsigned char distinct numbers?
CWG1796 Is all-bits-zero for null characters a meaningful requirement?
CWG1793 thread_local in explicit specializations
CWG1791 Incorrect restrictions on cv-qualifier-seq and ref-qualifier
CWG1782 Form of initialization for nullptr_t to bool conversion
CWG1780 Explicit instantiation/specialization of generic lambda operator()
CWG1779 Type dependency of __func__
CWG1777 Empty pack expansion in dynamic-exception-specification
CWG1766 Values outside the range of the values of an enumeration
CWG1757 Const integral subobjects
CWG1753 decltype-specifier in nested-name-specifier of destructor
CWG1752 Right-recursion in mem-initializer-list
CWG1751 Non-trivial operations vs non-trivial initialization
CWG1750 “Argument” vs “parameter”
CWG1748 Placement new with a null pointer
CWG1712 constexpr variable template declarations
CWG1705 Unclear specification of “more specialized”
CWG1694 Restriction on reference to temporary as a constant expression
CWG1686 Which variables are “explicitly declared const?”
CWG1615 Alignment of types, variables, and members
CWG1614 Address of pure virtual function vs odr-use
CWG1600 Erroneous reference initialization in example
CWG1591 Deducing array bound and element type from initializer list
CWG1573 Inherited constructor characteristics
CWG1571 cv-qualification for indirect reference binding via conversion function
N4089 Safe conversions in unique_ptr<T[]>
N4086 Removing trigraphs??!
N4295 Folding expressions
N4285 Cleanup for exception-specification and throw-expression
N4266 Attributes for namespaces and enumerators.
N4261 Qualification conversions and pointers to arrays of pointers.
N4259 Wording for std::uncaught_exceptions.
Introduce definition 'placement new-expression' and apply consistently
N4280 Non-member size() and more
N4169 A proposal to add invoke function template
N3911 TransformationTrait Alias void_t
N4279 Improved insertion interface for unique-key maps
[associative.reqmts] Italicise grammar term 'qualified-id'.
N4258 Cleaning‐up noexcept in the Library
N4277 TriviallyCopyable reference_wrapper
[basic.types] Replace "array of unknown size" with proper phrase "array of unknown bound".
[insert.iterators], [stream.iterators] Use injected class names.
N4284 Contiguous Iterators
N4190 Removing auto_ptr, random_shuffle(), And Old <functional> Stuff
[diff] Add subclause for incompatibilities with C++2014.
LWG2129 User specializations of std::initializer_list
LWG2340 Replacement allocation functions declared as inline
LWG2016 Allocators must be no-throw swappable
LWG2170 Aggregates cannot be DefaultConstructible
N4051 Allow typename in a template template parameter
N3922 New Rules for auto deduction from braced-init-list
N3928 Extending static_assert
CWG1807 Order of destruction of array elements after an exception
CWG1558 Unused arguments in alias template specializations
CWG1552 exception-specifications and defaulted special member functions
CWG1484 Unused local classes of function templates
CWG1446 Member function with no ref-qualifier and non-member function with rvalue reference
CWG1338 Aliasing and allocation functions
CWG1292 Dependent calls with braced-init-lists containing a pack expansion
CWG609 What is a “top-level” cv-qualifier?
CWG591 When a dependent base class is the current instantiation
CWG393 Pointer to array of unknown bound in template argument list in parameter
[vector.bool] Use code font for allocator_traits
N4230 Nested namespace definition
N4268 Allow constant evaluation for all non-type template arguments.
N2467 Adding u8 character literals.
[cpp.predefined] Stop trying to reuse a footnote for two different bullets; that breaks hyperlinking.
N4262 Wording for Forwarding References
CWG1998 Additional sources of xvalue expressions
[priqueue.special] fix typo
[temp.deduct.call] Give a name to the function parameter in an example.
[temp.arg.template] Remove some "call it"s.
[dcl.fct] Add paragraph breaks into overlong paragraph that covers several independent topics.
Remove space after \placeholder so can embed in code.
[diff.expr] replace "declare" with "define"
Replace 'prototype' with 'declaration'
Add papers N4138, N4139, N4140: New working draft and editor's reports.
Update configuration for building drafts after N4140.
Update configuration for building N4140.
[over.literal] Use a valid parameter-declaration-clause for a literal operator in example that claims to be "OK".
[temp] Add L suffix to literal value example definition of constexpr variable template 'pi', to address questions about whether it would do the right thing for 'long double'.
[dcl.enum] Use more natural and unambiguous phrasing around the definition of whether an enumeration type's underlying type is fixed.
[stmt.for] Dehyphenate for-statement; there is no such grammar term.
[stmt.for] Remove misplaced hyphen in "declarative region".
[ostreambuf.iter.cons] Null pointer is not a verb.
[stringstream.cons], [stringstream.members] Replace rSec2 with rSec3.
[ios.overview] Remove stray space
[thread.lock.algorithm] Use code font for try_lock().
[lex.comment] Slightly clarify what "terminates with" means in the context of a line comment.
[basic.def.odr] Use "is", rather than "shall", when describing the behavior of the implementation.
[thread.condition] Move index entry for library name from main index to library index.
[tuple.creation] Add library index entry for std::ignore.
Consistently use `constexpr explicit` rather than `explicit constexpr`.
[utilities] Use `{}` rather than ` = T()` to default-construct piecewise_construct and allocator_arg.
[iterator.traits] An implementation that provides __far pointers doesn't need the standard to tell it (non-normatively) how to implement them.
[expr.call] Change word order to clarify that it is only the main function that cannot be called, not any arbitrary function whose name is main.
[re.synopt], [re.matchflag] Use code formatting in definition of regex flag values.
[re.alg.replace] Add whitespace and bullets to make this paragraph more readable and disambiguate the binding of the "Then calls" clause in the third sentence.
[dcl.link] Use "obtained" rather than "gotten" in comment in example.
[bind] Delete the essentially-empty [bind] subclause and move its only contents, [func.bind], up a level. This removes the existing 20.9.9 and renames 20.9.9.1 to 20.9.9. [bind] used to group together other binders, but those are now in [depr].
[support.initlist] Don't claim that std::initializer_list is a type; it's a class template.
[expr.delete] Move footnote to more appropriate place.
[support.exception], [except.nested]: Attributes should be written after 'template<...>', not before.
[exception] Remove redundant description. Per [res.on.exception.handling]p4, destructors do not throw unless otherwise specified, and functions declared noexcept may not throw.
[except.handle] Add a missing ", or" after penultimate bullet.
[over.oper] Clarify that the 'has a parameter of class or enum type' constraint on overloaded operators only applies to the non-member case.
[over.inc] Add 'non-static' to the description of a member operator++ or operator-- to avoid confusion when comparing this wording to that of similar paragraphs in other clauses. The normative rule already exists in [over.oper]p6.
[basic.start.main] Don't use terminal font for comma separating a list of keywords.
Update editor details and configuration.
[cpp.predefined] Make double-underscore names searchable by switching from a thin space to a kerning gap between the underscores.
[expr.new] Avoid "heap allocation"
JP 04: [lex.icon] Consistently order descriptions of integer literals in increasing radix order.
[lex.ppnumber] Reorder grammar rule to make the similarities and differences between the digit separator and non-digit-separator productions more obvious.
JP 11: [thread.mutex.requirements.general] Remove outdated sentence.
[complex.ops] Reorder 'bool constexpr' to 'constexpr bool' for consistency.
[multiset.cons] Add missing parameter type.
JP 16: [thread.sharedtimedmutex.class] Add missing 'or' at end of bullet.
JP 14: [thread.sharedtimedmutex.class] Reformat synopsis for consistency with nearby subclauses. Add "// blocking" comment systematically to lock() on all timed mutex classes.
JP 06: [dcl.constexpr] Remove incorrect example.
[basic.lookup.classref] Use code font for `~`.
Replace all '\sim's with '\~'s, to give more consistent formatting for ~s.
Use a consistent size and position for all tildes.
[gram] Don't convert one space to two after a `.` or `!` in the grammar. These do not mark the end of a sentence.
[expr.prim.general] Use code font for ~.
[basic.types] Italicize the definitions of 'incompletely-defined object type' and 'incomplete type', and add index entries.
[util.smartptr.shared.const] [util.smartptr.shared.obs] Replace literal 0 with nullptr.
[refwrap] Use injected class name in reference_wrapper special member functions
[over.ics.rank] Correct the example in p3.1.5 to demonstrate that bullet; previously the example was ordered by 3.1.1 because one of the overloads did not require a qualification conversion.
[new.delete.single], [smartptr.util.getdeleter] Replace literal 0 with nullptr.
[adjacent.difference] Use code font for *i expression.
[utility] Add index_sequence et al to the library index.
[memory.syn] Change "template functions" to "function templates"
[futures.overview] Add ArgTypes... to swap declaration.
[util.smartptr.shared.const], [util.smartptr.weak.const] Remove "the"
Make the note for both two conditions, not for just the latter of two
Uniform notation of distance(first, last) to (last - first)
[global.functions] Clarify note by adding a cross-reference to make it clearer that we're quoting another part of the standard. Update the quotation to match, and clean it up slightly.
Do not number bullets within tables.
[atomics.syn] Replace comma with period
Remove bullet numbering for bullets outside of any paragraph.
[toc] Make room for page numbers >= 1000 in table of contents.
[rand] Use modern spelling of \frac and \binom to remove LaTeX warning.
[ratio.syn] Use digit separators to make large numbers more readable.
[class] Move paragraph breaks to improve vertical whitespace.
Parenthesize bullet numbers to make it more obvious that text after the bullets is part of the preceding paragraph.
[memory.general] Add missing `<` character to C header name.
US-1 Add numbering for bullets. Bullets are numbered within the surrounding paragraph or bullet, not within the relevant bulleted list, so that numbers are unique. The main text formatting is unchanged; bullet numbers are placed in the left margin, just like paragraph numbers.
Remove trailing blank lines at ends of grammar productions.
Tighten the words we use in "Throughout this [sub]clause" wording to introduce a set of requirements for template arguments based on their names, and make these paragraphs consistent.
Remove unused definitions of terms 'formal argument', 'actual argument', and 'actual parameter'. Unify uses of 'formal parameter' and 'parameter' to all use the vastly more common term 'parameter' and remove the definition of 'formal parameter'.
Remove paper.
[dcl.dcl] Split the introduction of *declaration*, *simple-declaration*, and *attribute-declaration* into three separate paragraphs, rather than having a single paragraph spanning a whole page.
Add 1ex of vertical space between numbered paragraphs.
[class.mem] Format definition of 'layout-compatible' as a definition, add it to the index, and unify spelling of this index entry across the three places where it is defined.
[expr.const] Add missing 'const' to examples invalidated by N3598.
[basic.lval] Correct example of xvalue to not suggest that a function call returning an rvalue reference to a function type is an xvalue.
[expr.alignof] Use "is", not "shall be", to express a requirement on the implementation rather than one on the program.
SFINAE is a Remark not Requires.
Remove indentation after line breaks within the same paragraph.
[refwrap] Remove stray period.
[temp.mem.enum] Add a paragraph break to remove unwanted whitespace at the start of an example.
instantiation -> specialization in [refwrap]
[atomics.types.operations.req] Hyphenate "non member".
[atomics.types.operations.req] Remove mention of atomic_address.
[lib.complex.member.ops] fix operator declarations
[basic.def.odr] Clarify the meaning of the set of potential results of an expression and how that relates to odr-use.
[temp.names] Add missing comma.
[gram] Rebuild grammar after eb18f34d.
[lex.ext] Fully-qualify std::size_t in example.
[temp.expl.spec] Update example to match core issue 374 / N3064.
[dcl.dcl] Add missing \terminal to alias-declaration grammar.
[temp.arg.template] Move example from p2 to more appropriate spot in p3, as discussed in core-24769 and core-24774.
shared_ptr : fix missing semicolon
Add date to editor's report N3938.
Add papers: N3936, N3938, source for the latter.
[tuple.general] Move tuple_element_t definition after last specialization of tuple_element.
[reverse.iter.opref] Add std:: qualification to addressof() use.
Update DIS cover.
Updated document number to N3936.
[class.union] Format ; in grammar correctly.
[cpp.include] Remove spurious comma.
Add my affiliation.
N3910 Formatting fixes.
[except.spec] Remove extraneous comma.
[temp.deduct.type] Remove space in front of footnote.
Formatting fixes for CWG1673.
[class.union] Formatting fixes.
[lex.ext] Unitalicize incorrectly italicized "literal".
LWG2304 Complexity of count in unordered associative containers
Revert "LWG2258 a.erase(q1, q2) unable to directly return q2"
LWG2258 a.erase(q1, q2) unable to directly return q2
Update xref.tex.
Update to draft document number D3936.
Update __cplusplus to 201402L.
2014-02 SG1 Motion 5.
2014-02 SG1 Motion 4.
2014-02 SG1 Motion 3.
2014-02 SG1 Motions 1 and 2.
2014-02 LWG Motion 6.
2014-02 LWG Motion 5.
2014-02 LWG Motion 4.
LWG2344 quoted()'s interaction with padding is unclear
LWG2332 regex_iterator/regex_token_iterator should forbid temporary regexes
LWG2329 regex_match()/regex_search() with match_results should forbid temporary strings
LWG2322 Associative(initializer_list, stuff) constructors are underspecified
LWG2315 weak_ptr should be movable
LWG2313 tuple_size should always derive from integral_constant<size_t, N>
LWG2263 Comparing iterators and allocator pointers with different const-character
LWG2360 reverse_iterator::operator*() is unimplementable
LWG2359 How does regex_constants::nosubs affect basic_regex::mark_count()?
LWG2357 Remaining "Assignable" requirement
LWG2356 Stability of erasure in unordered associative containers
LWG2350 min, max, and minmax should be constexpr
LWG2346 integral_constant's member functions should be marked noexcept
LWG2341 Inconsistency between basic_ostream::seekp(pos) and basic_ostream::seekp(off, dir)
LWG2339 Wording issue in nth_element
LWG2330 regex("meow", regex::icase) is technically forbidden but should be permitted
LWG2324 Insert iterator constructors should use addressof()
LWG2323 vector::resize(n, t)'s specification should be simplified
LWG2320 select_on_container_copy_construction() takes allocators, not containers
LWG2317 The type property queries should be UnaryTypeTraits returning size_t
LWG2316 weak_ptr::lock() should be atomic
LWG2314 apply() should return decltype(auto) and use decay_t before tuple_size
LWG2308 Clarify container destructor requirements w.r.t. std::array
LWG2306 match_results::reference should be value_type&, not const value_type&
LWG2301 Why is std::tie not constexpr?
LWG2293 Wrong facet used by num_put::do_put.
LWG2258 a.erase(q1, q2) unable to directly return q2
2014-02 LWG Motion 3.
2014-02 LWG Motion 2.
2014-02 LWG Motion 1.
2014-02 CWG Motion 6.
2014-02 CWG Motion 5.
2014-02 CWG Motion 4.
2014-02 CWG Motion 3.
2014-02 CWG Motion 2.
2014-02 CWG Motion 1.
Update copyright year to 2014.
LWG2299 "[CD] Effects of inaccessible key_compare::is_transparent type are not clear"
LWG2186 "Incomplete action on async/launch::deferred"
LWG2104 "unique_lock move-assignment should not be noexcept"
N3927 "Definition of Lock-Free"
CWG 1787 NB GB-2 Uninitialized unsigned char values.
CWG1786 NB GB-4 Effect of merging allocations on memory leakage.
CWG1759 NB GB-1 UTF-8 code units in plain char.
CWG1673 NB CA-5 Clarifying overload resolution for the second step of copy-initialization.
CWG1466 Visible sequences of side effects are redundant.
CWG1760 NB GB-3 Access of member corresponding to init-capture.
CWG1717 NB ES-7 Missing specification of type of binary literal.
CWG1769 Catching a base class of the exception object
CWG1747 Constant initialization of reference to function
CWG1746 Are volatile scalar types trivially copyable?
CWG1739 Conversion of floating point to enumeration
CWG1738 Explicit instantiation/specialization of inheriting constructor templates
CWG1737 Type dependence of call to a member of the current instantiation
CWG1732 Defining types in conditions and range-based for statements
CWG1716 When are default arguments evaluated
CWG1707 template in elaborated-type-specifier without nested-name-specifier
CWG1693 Superfluous semicolons in class definitions
CWG1689 Syntactic nonterminal for operand of alignas
CWG1687 Conversions of operands of built-in operators
CWG1666 Address constant expressions
CWG1660 member-declaration requirements and unnamed bit-fields
CWG1658 Deleted default constructor for abstract class via destructor
CWG1629 Can a closure class be a literal type?
CWG1598 Criterion for equality of pointers to members
CWG1691 Argument-dependent lookup and opaque enumerations
CWG1662 NB CA-20 Capturing function parameter packs
CWG1613 NB CA-16 Constant expressions and lambda capture
CWG1612 NB CA-17 Implicit lambda capture and anonymous unions
CWG1607 NB CA-3 Lambdas in template parameters
CWG1604 NB CA-30 Double temporaries in reference initialization
CWG1579 NB US-13 Return by converting move constructor
CWG1493 NB CA-23 Criteria for move-construction
CWG1376 NB CA-1 static_cast of temporary to rvalue reference
CWG1344 NB CA-29 Adding new special member functions to a class via default arguments
CWG1664 NB CA-18 Argument-dependent lookup of lambdas used in default arguments.
CWG1740 NB CA-27 Disambiguation of noexcept.
CWG1741 NB CA-28 odr-use of class object in lvalue-to-rvalue conversion.
CWG1764 NB CA-6 Hiding of function from using-declaration by signature.
CWG1765 NB CA-7 Overflow of enumeration used as enumerator value.
CWG1767 NB CA-8 Scoped enumeration in a switch statement.
CWG1770 NB CA-15 Type matching of non-type template parameters and arguments.
CWG1772 NB CH-5/CA-22 __func__ in a lambda body.
CWG1773 NB CA-14 Out-of-lifetime lvalue-to-rvalue conversion.
CWG1775 NB CA-26 Undefined behavior of line splice in raw string literal
Revert "s/> >/>>/ per the following guidelines:"
Revert CWG Motion 1 commits pushed directly to master.
[container.requirements.general] Remove semi-colons in container.reversible.requirements table.
[deque.cons] Clarified the complexity of deque's iterator range constructor.
[func.wrap.func.con] Added a missing period.
[array.overview] Added std:: to the definition of array::reverse_iterator.
[container.requirements.general] Added missing "u" to "u.get_allocator()" in containers.allocatoraware table.
[container.requirements.general] Added missing row separator in container.reversible.requirements table.
[tuple.creation] Added missing ... in description of tie.
NB CA-26 Undefined behavior of line splice in raw string literal
NB CA-14 Out-of-lifetime lvalue-to-rvalue conversion
NB CA-22 CH-5 __func__ in a lambda body
NB CA-15 Type matching of non-type template parameters and arguments
NB CA-8 Scoped enumeration in a switch statement
NB CA-7 Overflow of enumeration used as enumerator value
NB CA-6 Hiding of function from using-declaration by signature
NB CA-28 odr-use of class object in lvalue-to-rvalue conversion
NB CA-27 Disambiguation of noexcept
Skip headings in addmarkup.sed.
Tweak ctags settings.
Remove accidentally committed file.
Add support for LaTeXTools.
Add ctags configuration file.
CWG1684 Static constexpr member functions for non-literal classes
CWG1669 auto return type for main
CWG1674 Return type deduction for address of function.
s/> >/>>/ per the following guidelines:
Consistently employ _t suffixes when mentioning any type trait's resulting type.
CWG1691 Argument-dependent lookup and opaque enumerations
NB CA-18 Argument-dependent lookup of lambdas used in default arguments
N3910 What can signal handlers do?
LWG2288 Inconsistent requirements for shared mutexes.
[xref] Rebuild to include new [depr.alg.random.shuffle].
N3891 A proposal to rename shared_mutex to shared_timed_mutex.
LWG2213 Return value of std::regex_replace.
LWG2205 Problematic postconditions of regex_match and regex_search.
LWG2193 Default constructors for standard library containers are explicit.
LWG2188 Reverse iterator does not fully support targets that overload operator&.
LWG2182 Container::[const_]reference types are misleadingly specified.
LWG2132 std::function ambiguity.
LWG2112 User-defined classes that cannot be derived from.
LWG2003 String exception inconsistency in erase.
LWG1450 Contradiction in regex_constants.
[depr.alg.random.shuffle] Get this line to wrap in a less unreasonable way.
N3924 Discouraging rand() in C++14, v2
Make addmarkup.sed case-insensitive.
LWG2135 Unclear requirement for exceptions thrown condition_variable::wait()
LWG2285 make_reverse_iterator
LWG2280 begin/end for arrays should be constexpr and noexcept
LWG2278 User-defined literals for Standard Library types
LWG2272 quoted should use char_traits::eq for character comparison
LWG2271 regex_traits::lookup_classname specification unclear
LWG2268 Setting a default argument in the declaration of a member function assign of std::basic_string
LWG2257 Simplify container requirements with the new algorithms
LWG2252 Strong guarantee on vector::push_back() still broken with C++11?
LWG2142 packaged_task::operator() synchronization too broad?
LWG2291 std::hash is vulnerable to collision DoS attack.
NB CA-20 Capturing function parameter packs
NB CA-16 Constant expressions and lambda capture
N3887 "Consistent Metafunction Aliases"
Add a \placeholder command for placeholders for values in running text.
addmarkup.sed: Add support for code blocks.
CWG1778 exception-specification in explicitly-defaulted functions
[temp.mem.class]  "class member" -> "member class"
Add CWG issues HTML->TeX script.
[basic.stc.dynamic] Don't italicize "deallocated storage".
Add Mac OS X getting started instructions.
[dcl.init.list] Correct typo "orresponding".
[temp.expl.spec] Clarify contexts in which locations of partial and explicit specialization are relevant.
Editorial change missing from resolution DR739: update note to reflect that plain bit-fields are signed exactly when their underlying type is signed.
[refwrap.helpers] Add missing whitespace.
[re.synopt] Use code font for match_results.
[pair.astuple] Give names to function parameters.
[pair.astuple] Undo reference to tuple_element_t.
[util.smartptr.shared.const]/33 Add whitespace
[pointer.traits.functions] Add paragraph numbers.
[func.bind.isbind]/2 says "have a BaseCharacteristics"
basic_string::replace description : fix missing words.
Editorial fix - additional instances of 'an shared state'
[re.traits] Add whitespace in getloc()const
Editorial: fix typo 'an shared state' -> 'a shared state'
[util.smartptr.ownerless] should not be nested below [util.smartptr.weak]
Remove some glitchy spaces.
[re.results.const] Remove caveat for impossible condition.
[except.nested] Add missing paragraph number.
Add missing closing angle bracket.
Reset document number.
[rand.util.seedseq]/8 Move Throws clause to its proper location.
LWG2013 Apply correct wording from N3788 instead of N3754.
Add 2013 post-Chicago meeting papers.
Add document number: N3797.
Update grammar reference and section cross-reference.
NB US-15 (C++14 CD): Use the _t form of type traits.
NB CH-7 (C++14 CD) [intseq.general] Clarify purpose of index_sequence.
NB CH-6 (C++14 CD) [over.literal]: Mark reserved example as such.
N3778 Sized Deallocation
N3781 Single-Quotation-Mark as a Digit Separator
N3760 [[deprecated]] attribute
CWG1649 Error in the syntax of mem-initializer-list
CWG1618 Gratuitously-unsigned underlying enum type
CWG1601 Promotion of enumeration with fixed underlying type
CWG1595 Constructors ``involved in'' subobject initialization
CWG1593 ``Parameter type'' of special member functions
CWG1592 When do template parameters match?
CWG1587 constexpr initialization and nested anonymous unions
CWG1576 Discarded-value volatile xvalues
CWG1570 Address of subobject as non-type template argument
CWG1569 Deducing a function parameter pack before ellipsis
CWG1551 Wording problems in using-declaration specification
CWG1514 Ambiguity between enumeration definition and zero-length bit-field
CWG1509 Definition of "non-template function"
CWG1508 Template initializer-list constructors
CWG1460 What is an empty union?
CWG1424 When must sub-object destructors be accessible?
CWG1307 Overload resolution based on size of array initializer-list
CWG1608 Operator lookup in trailing return type
CWG1567 Inheriting constructors and copy/move constructors
CWG1287 Direct initialization vs “implicit” conversion in reference binding
CWG1417 Pointers/references to functions with cv-qualifiers or ref-qualifier
Revert "N3662 C++ Dynamic Arrays"
Revert N3639 (Arrays of Runtime Bound).
Revert N3672 (optional).
N3789 Constexpr Library Additions: functional
N3779 User-defined Literals for std::complex
NB GB-9 (C++14 CD): [c.files] Remove gets().
Remove cross references to deleted map.ops and multimap.ops.
NB ES-15 (C++14 CD) [associative.reqmts]: Remove unnecessary definition in table.
NB GB-7 [container.requirements.general] Apply general definitions to optional requirements table as well.
LWG2300 Redundant sections for map and multimap members should be removed
LWG2298 is_nothrow_constructible is always false because of create<>
LWG2284 Inconsistency in allocator_traits::max_size
LWG2275 Why is forward_as_tuple not constexpr?
LWG2159 atomic_flag initialization
LWG2120 What should async do if neither 'async' nor 'deferred' is set in policy?
LWG2100 timed waiting functions cannot timeout if launch::async policy used
LWG2097 packaged_task constructors should be constrained
LWG2078 Throw specification of async() incomplete
LWG2018 regex_traits::isctype Returns clause is wrong
LWG2013 Do library implementers have the freedom to add constexpr?
LWG2194 Impossible container requirements for adaptor types
LWG2180 Exceptions from std::seed_seq operations
LWG2150 Unclear specification of find_end
LWG2143 ios_base::xalloc should be thread-safe
LWG2087 iostream_category() and noexcept
LWG2085 Wrong description of effect 1 of basic_istream::ignore
LWG2247 Type traits and std::nullptr_t
LWG2246 unique_ptr assignment effects w.r.t. deleter
LWG2141 common_type trait produces reference types
CWG1648 thread_local vs block extern declarations
CWG1575 Incorrect definition of "strict pointer safety"
CWG1583 Incorrect example of unspecified behavior
N3776 Wording for ~future.
N3786 Prohibiting "out of thin air" results in C++14.
Update previous document number.
[depr.strstreambuf] Add missing closing parenthesis.
Capitalize "Effects: Equivalent to" consistently throughout the draft.
[cpp.predefined] Replace "integer constant" with "integer literal" throughout.
[diff.mods.to.headers] Remove redundant (and wrong) count of C headers.
[forwardlist.modifiers] Properly indent Returns: paragraph.
Remove affiliation from working draft cover.
internal change: Remove \exposr macro.
internal change: Remove unused \exposrc macro.
tools/sections: Ignore commented out section commands
Small improvements to sections.cpp.
Add a simple tool (written in C++11) to print out section numbers.
[string::assign] Add missing paragraph number and remove duplicate.
ranlux48 : fix typo
linear_congruential_engine : fix typo
Many sections: Use uniform placement of "*" following types.
[optional.inplace] Remove redundant explanation of in_place_t.
[dynarray.overview] Clean up ordering of members in dynarray synopsis.
[dynarray.cons] Move Throws: paragraph to be last, as is customary.
[class]/3 Format "identifier" as a grammar term.
[dcl.type.simple]/4 Add missing semicolon in otherwise-bulleted-list.
[istreambuf.iterator], [ostreambuf.iterator] Remove italics from sbuf_.
[istreambuf.iterator::proxy] Clean up exposition-only type.
[ostreambuf.iter.cons] Use proper idiom for ostreambuf_iterator constructor effects.
[thread.mutex.requirements.mutex] Unitalicize "synchronizes with".
README.RST spring cleanup
weibull_distribution : add missing semicolon
[intro.execution] Remove duplicate period
Typo in 14.2p5 code example
Replace NULL with null.
[futures.promise] Remove redundant qualification.
[allocator.adaptor.cnstr] Use code font for OuterAlloc.
[stmt.select] "type-specifier-seq" -> "decl-specifier-seq"
[c.math] Trade sorcery for clarity.
[temp.expl.spec] Correct underlying type in example
[thread.mutex] Correct call_once in <mutex> synopsis
[cpp.scope] Properly mark macro examples as such
[optional] Editorial fix
[class.friend] Hyphenate "nonclass".
N3692 - May 2013 Editor's Report.
Add N3691
[thread.lock.shared.cons] Formatting fix.
[thread.lock.shared.cons] Formatting fix.
[thread.sharedmutex.requirements] system_error in code font
[thread.general] Add header <shared_mutex> to overview table.
N3545 Editorial fix
N3672 Editorial fix
N3672 Bug fix
N3672 Bug fix
[dcl.spec.auto]/7 Combine first two sub-paragraphs to avoid ugly linebreak/indent.
[sequences.general] Add missing angle brackets around dynarray header.
Add std:: to size_t for consistency in type traits synopsis.
Editorial and bug fixes in optional
Update table of headers.
In integer sequences, format "see below" appropriately.
Update cross-references
LWG2185 Missing throws clause for future/shared_future::wait_for/wait_until
LWG2190 Condition variable specification
LWG2140 Meaning of notify_all_at_thread_exit synchronization requirement?
LWG2138 atomic_flag::clear should not accept memory_order_consume
LWG2130 Missing ordering constraints
LWG2098 Minor Inconsistency between promise::set_value and promise::set_value_at_thread_exit
N3659 Shared locking in C++, Revision 2
N3655 TransformationTraits Redux, v2
N3662 C++ Dynamic Arrays
N3672 A proposal to add a utility class to represent optional objects (Revision 4)
N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)
N3642 User-defined Literals for Standard Library Types (part 1 - version 4)
N3654 Quoted Strings Library Proposal (Revision 2)
N3656 make_unique (Revision 1)
N3671 Making non-modifying sequence operations more robust: Revision 2
N3670 Wording for Addressing Tuples by Type: Revision 2
N3658 Compile-time integer sequences
N3644 Null Forward Iterators
N3545 An Incremental Improvement to integral_constant
N3668 exchange() utility function, revision 3
[thread.req.lockable.basic] add missing paragraph number.
LWG2210 Missing allocator-extended constructor for allocator-aware containers
LWG2196 Specification of is_*[copy/move]_[constructible/assignable] unclear for non-referencable types
LWG2122 merge() stability for lists versus forward lists
LWG2203 scoped_allocator_adaptor uses wrong argument types for piecewise construction
LWG2128 Absence of global functions cbegin/cend
LWG2235 Undefined behavior without proper requirements on basic_string constructors
LWG2229 Standard code conversion facets underspecified
LWG2207 basic_string::at should not have a Requires clause
LWG2176 Special members for wstring_convert and wbuffer_convert
LWG2162 allocator_traits::max_size missing noexcept
LWG2149 Concerns about 20.8/5
LWG2148 Hashing enums should be supported directly by std::hash
LWG2094 duration conversion overflow shouldn't participate in overload resolution
LWG2093 Throws clause of condition_variable::wait with predicate
LWG2109 Incorrect requirements for hash specializations
LWG2209 assign() overspecified for sequence containers
LWG2231 DR 704 removes complexity guarantee for clear()
LWG2225 Unrealistic header inclusion checks required
LWG2222 Inconsistency in description of forward_list::splice_after single-element overload
LWG2211 Replace ambiguous use of "Allocator" in container requirements
LWG2200 Data race avoidance for all containers, not only for sequences
LWG2197 Specification of is_[un]signed unclear for non-arithmetic types
LWG2187 vector<bool> is missing emplace and emplace_back member functions
LWG2177 Requirements on Copy/MoveInsertable
LWG2175 wstring_convert and wbuffer_convert validity
LWG2174 wstring_convert::converted() should be noexcept
LWG2144 Missing noexcept specification in type_index
LWG2080 Specify when once_flag becomes invalid
LWG2172 Does atomic_compare_exchange_* accept v == nullptr arguments?
LWG2169 Missing reset() requirements in unique_ptr specialization
LWG2163 nth_element requires inconsistent post-conditions
LWG2147 Unclear hint type in Allocator's allocate function
LWG2145 error_category default constructor
LWG2092 Vague Wording for condition_variable_any
LWG2091 Misplaced effect in m.try_lock_for()
Update cross-references
Various bug fixes to application of wording.
N3638 Editorial fix
N3652 Relaxing constraints on constexpr functions
N3649 Generic (Polymorphic) Lambda Expressions (Revision 3)
N3638 Return type deduction for normal functions
N3651 Variable Templates (Revision 1)
N3667 Drafting for Core 1402
N3664 Clarifying Memory Allocation
N3653 Member initializers and aggregates
N3648 Wording Changes for Generalized Lambda-capture
N3639 Runtime-sized arrays with automatic storage duration
N3624 - Pointer comparison vs qualification conversions
N3472 Binary Literals in the C++ Core Language
Add missing dash to "non-volatile".
Remove spurious "CWG".
Editorial [over.match.oper] which -> that.
[special] fix formatting of "class-specifier"
CWG1507 - add reference to class.ctor
CWG1510 - Add reference to temp.param
CWG1482 - add missing paragraph number
CWG1539 - Add missing edit.
CWG496 - Move change to the right spot.
Update grammar reference based on 2013-04 CWG issues.
CWG974 Default arguments for lambdas
CWG1358 Unintentionally ill-formed constexpr function template instances
CWG1213 Array subscripting and xvalues
CWG903 Value-dependent integral null pointer constants
CWG1605 Misleading parenthetical comment for explicit destructor call
CWG1563 List-initialization and overloaded function disambiguation
CWG1507 Value initialization with trivial inaccessible default constructor
CWG1494 Temporary initialization for reference binding in list-initialization
CWG1487 When are inheriting constructors declared?
CWG1482 Point of declaration of enumeration
CWG1477 Definition of a friend outside its namespace
CWG1473 Syntax of literal-operator-id
CWG1471 Nested type of non-dependent base
CWG1462 Deduction failure vs “ill-formed, no diagnostic required”
CWG1464 Negative array bound in a new-expression
CWG1557 Language linkage of converted lambda function pointer
CWG1556 Constructors and explicit conversion functions in direct initialization
CWG1553 sizeof and xvalue bit-fields
CWG1550 Parenthesized throw-expression operand of conditional-expression
CWG1544 Linkage of member of unnamed namespace
CWG1543 Implicit conversion sequence for empty initializer list
CWG1541 cv void return types
CWG1539 Definition of “character type”
CWG1538 C-style cast in braced-init-list assignment
CWG1537 Optional compile-time evaluation of constant expressions
CWG1535 typeid in core constant expressions
CWG1533 Function pack expansion for member initialization
CWG1532 Explicit instantiation and member templates
CWG1528 Repeated cv-qualifiers in declarators
CWG1527 Assignment from braced-init-list
CWG1522 Access checking for initializer_list array initialization
CWG1516 Definition of “virtual function call”
CWG1515 Modulo 2^n arithmetic for implicitly-unsigned types
CWG1511 const volatile variables and the one-definition rule
CWG1510 cv-qualified references via decltype
CWG1506 Value category of initializer_list object
Minor spacing fix to CWG1504 changes.
CWG1504 Pointer arithmetic after derived-base conversion
CWG1503 Exceptions during copy to exception object
CWG1502 Value initialization of unions with member initializers
CWG1495 Partial specialization of variadic class template
CWG1489 Is value-initialization of an array constant initialization?
CWG1481 Increment/decrement operators with reference parameters
CWG1479 Literal operators and default arguments
CWG1476 Definition of user-defined type
CWG1475 Errors in [[carries_dependency]] example
CWG1472 odr-use of reference variables
CWG1456 Address constant expression designating the one-past-the-end address
CWG1442 Argument-dependent lookup in the range-based for
CWG1437 alignas in alias-declaration
CWG1435 template-id as the declarator for a class template constructor
CWG1425 Base-class subobjects of standard-layout structs
CWG1413 Missing cases of value-dependency
CWG1412 Problems in specifying pointer conversions
CWG1411 More on global scope :: in nested-name-specifier
CWG1330 Delayed instantiation of noexcept specifiers
CWG1328 Conflict in reference binding vs overload resolution
CWG1405 constexpr and mutable members of literal types
CWG1374 Qualification conversion vs difference in reference binding
CWG1320 Converting scoped enumerations to bool
CWG1318 Syntactic ambiguities with final
CWG1310 What is an “acceptable lookup result?”
CWG616 Definition of “indeterminate value”
CWG496 Is a volatile-qualified type really a POD?
CWG223 The meaning of deprecation
[alg.is_permutation] Remove colon after \requires
Change document number to N????.
[locale.time.get.members] Add missing exitnote command.
[util.smartptr.ownerless] Add missing exitnote command.
[ptr.align] Add missing exitnote command.
Add ctags files to gitignore
[associative.reqmts] Capitalize start of sentence.
[array.swap] Use code font for array::swap.
[thread.threads] Add lock tags to index of library names.
[adjacent.difference] Add missing paragraph number.
[thread.threads] Indent members of namespace this_thread.
[forward] Add missing Remark label and paragraph number.
[unord.set.overview] Remove bogus template parameters. [unord.multiset.overview] Remove bogus template parameters.
[re.regex.construct] Make constructors consistent.
[expr.static.cast] Undefined result -> undefined behavior.
[lex.ppnumber] "integral literal" -> "integer literal".
[memory.syn] Add missing declarations.
[pairs.pair] Remove duplicate "Requires:".
[lex.header], [lex.string] Hyphenate conditionally-supported.
[ratio.ratio] Move ratio::type after the types it uses.
[vector.bool] Add missing close paren in synopsis.
Remove trailing whitespace
[expr.cond]/3 fix typo rvalue->prvalue.
Update grammar summary to reflect various grammar changes/fixes.
[ios::failure] Remove spurious comma.
Remove trailing whitespace in Makefile.
[expr.call] Replace 'expression' with 'initializer-clause'.
[class] Hyphenate "standard-layout"
Remove two redundant bullets. These cases can never happen, because [class.mfct.non-static]p3 transforms these cases into implicit member accesses, which are handled by the first bullet.
[func.wrap.func.targ] Use 'class' not 'typename'
[associative] Remove redundant template arguments.
[futures.async] Remove redundant Remarks clause.
Use code font for erase.
[container.requirements.general] Remove type Q.
[deque.overview] add whitespace
Replaced "encoding schemes" with "encoding forms"
Update N3485
Update N3485
Update N3486 Editor's Report removing some duplicate edits.
Update N3486 editor's report
Update N3485
Add editor's report and set document number to N3485.
Add editor's report and set document number to N3485.
Editorial changes from review to Core changes by Mike Miller.
Library N3471 Constexpr Library Additions: utilities, v3
Library N3471 Constexpr Library Additions: utilities, v3
Library N3469 Constexpr Library Additions: chrono, v3
[complex.members] Editorial fix to N3302: add constexpr to item descriptions as well as the synopsis.
Library N3302 Constexpr Library Additions: complex, v2
Add constexpr to [array.tuple] functions in synopsis. Editorial fix to N3470.
Library N3470 Constexpr Library Additions: containers, v2
Library N3421 Making Operator Functors greater<>
Library N3462 std::result_of and SFINAE
LWG2005
[ostream.formatted.reqmts], [string.io], [ostream.inserters.character] refactor padding wording to avoid duplication.
LWG2011
LWG2011
LWG2081
LWG2058
LWG2049
LWG2056
LWG2048
LWG2123
LWG2110
LWG2105
LWG2103
LWG2099
LWG2086
LWG2083
LWG2074
LWG2071
Reset paper number
Tools: add "latexmk" and make instructions
CWG1431 DR "There are a number of places in the Standard that appear to assume that exceptions are only thrown by throw-expressions. Various other constructs, such as dynamic_casts, typeid, new-expressions, etc., can also throw exceptions, so a more general term should be coined and applied in place of throw-expression wherever necessary."
CWG1454 CWG1455 DR
CWG1321 DR
CWG1290 DR
CWG1261 DR
CWG1354 DR
CWG1428 DR "Dynamic const objects"
CWG1383 DR "Clarifying discarded-value expressions"
CWG1440 DR "The current wording of the Standard does not describe what happens when a decltype-specifier is used as a nested-name-specifier and the type denoted by the decltype-specifier is neither a class type nor an enumeration type. Such nested-name-specifiers should be prohibited, presumably somewhere around paragraphs 8-10 of 5.1.1 [expr.prim.general]. (The corresponding prohibition for named types is handled as part of lookup in 3.4.3 [basic.lookup.qual] paragraph 1.)"
CWG1458 DR "Address of incomplete type vs operator&()"
CWG1449 DR "As is made plain in the examples in that paragraph, a conversion of a negative value to an unsigned type is intended to be a narrowing conversion; however, the phrase “actual value after conversion” makes this intent unclear, especially since the round-trip conversion between signed and unsigned types might well yield the original value."
CWG1447 DR "This specification fails to allow for a bit-field lvalue operand, since the reference cannot refer to a bit-field. Presumably a temporary should be formed and the reference be bound to it."
CWG1438 DR "The current Standard says that any use of an invalid pointer value produces undefined behavior (3.7.4.2 [basic.stc.dynamic.deallocation] paragraph 4). This includes not only dereferencing the pointer but even just fetching its value. The reason for this draconian restriction is that some architectures in the past used dedicated address registers for pointer loads and stores and they could fault if, for example, a segment number in a pointer was not currently mapped.
CWG1392 DR "In 13.3.1.5 [over.match.conv], dealing with non-reference initialization, direct initialization considers as candidate functions only those that
CWG1388 CWG1399 DR "Missing non-deduced context following a function parameter pack"
CWG1385 DR
CWG1381 DR "It would be clearer if this description made explicit the intent that special member functions that invoke no other functions are to allow no exceptions."
CWG1375 DR "According to 9.5 [class.union] paragraph 7,
CWG1372 DR "It would seem that the cross-references should apply to the determination of the type “required as the result of the conversion” (i.e., A) instead of the return type of the conversion function."
CWG1359 DR "A constexpr constructor is required to initialize all non-static data members (7.1.5 [dcl.constexpr] paragraph 4), which conflicts with the requirement that a constructor for a union is permitted to initialize only a single non-static data member (12.6.2 [class.base.init] paragraph 8)."
CWG1312 DR "Although a reinterpret_cast is prohibited in a constant expression, casting to and from void* can achieve the same effect."
CWG1268 DR
CWG1416 DR "The requirement in 5.2.8 [expr.typeid] paragraph 5 that
CWG1415 DR "There does not appear to be wording that prohibits a block-scope extern object declaration from being a definition."
CWG1409 DR "Both paragraphs 3 and 4 (for non-aggregate and aggregate types, respectively) of 13.3.3.1.5 [over.ics.list] say that the implicit conversion sequence is a user-defined conversion sequence, but neither specifies that the second standard conversion sequence is the identity conversion, as is presumably intended. This makes ranking by 13.3.3.2 [over.ics.rank] paragraph 3 bullet 2 unncessarily unclear."
CWG1406 DR "ref-qualifiers and added parameters of non-static member function templates"
CWG1423 "Convertibility of nullptr to bool"
CWG1410 DR "Reference overload tiebreakers should apply to rvalue references"
CWG1408 DR Clarify "the same aggregate initialization" in [over.ics.rank].
CWG1457 DR Clarify undefined behavior in left-shift.
CWG1453 DR Literal types cannot contain volatile members.
CWG1450 DR / and % yield undefined behavior when the result of the quotient is not representable.
CWG1439 DR "Lookup and friend template declarations"
CWG1401 DR "Similar types and reference compatibility"
CWG1398 DR "Non-type template parameters of type std::nullptr_t"
CWG1394 DR "Incomplete types as parameters of deleted functions"
CWG1382 DR
CWG1387 DR
CWG1382 "Dead code for constructor names"
CWG1380 DR "Type definitions in template-parameter parameter-declarations"
CWG1370 "identifier-list cannot contain ellipsis"
CWG1363 DR Triviality vs multiple default constructors
CWG1302 DR "noexcept applied to expression of type void"
CWG1270 DR "Brace elision in array temporary initialization"
CWG1269 DR "dynamic_cast of an xvalue operand"
CWG1267 DR
CWG1227 DR
CWG1059 DR
CWG912 and CWG1024 DR
CWG739 and CWG675 DR
CWG631 DR Clarify what happens when jumping into a "then" clause.
CWG342 DR
N3323 - A Proposal to Tweak Certain C++ Contextual Conversions, v3
fixed typo
[thread.condition.condvar] Consistently use system_error instead of std::system_error. Thanks to Masayoshi Kanke!
[dcl.fct] Add missing semicolon to declaration statement in p12. Thanks to Masayoshi Kanke!
[dcl.type] Refer to a clause with "Clause". Thanks to Masayoshi Kanke!
[basic.type.qualifier] Reference correct section for alignment requirements. Thanks to Masayoshi Kanke!
[basic.scope.local] Rename to [basic.scope.block] to match new title. Thanks to Masayoshi Kanke!
[basic.fundamental] Reference <cstdint> instead of <stdint.h> when talking about uint_least16_t and uint_least32_t. Thanks to Peter Sommerlad!
Index: fix location of <scoped_allocator> entry in index.
[stream.iterators] Replace reference to non-existent "partial_sum_copy" with "partial_sum" in example. Thanks to Peter Sommerlad!
Repository: Add ignored files from latexmk
Remove a bunch of "is guaranteed" and "encouraged, but not required" and replace them with "shall" and "should".
[intro.multithread] Clarify read-write coherence to make it clear the the operation "B" modifies M. Thanks to Daniel Kruegler!
index: fix duplicate entry for numeric_limits, and make specific entry more specific. Thanks to Pete Becker!
[basic.fundamental] Use "signed and unsigned integer types" instead of "signed and unsigned integral types" to be consistent with the preceding sentence. Thanks to Thomas Plum and Mike Miller!
[dcl.fct.def.general] fix extraneous space in __func__ definition ('"function-name "' -> '"function-name"') and elsewhere.
[tuple] and [tuple.rel] Replace all uses of "iff", either with proper grammar in tuple.rel or with "only if" in comments pertaining to members that only exist under some conditions. There are no other uses of "iff" in the standard.
[locale.cons] Move description of the copy assignment operator for locale to the right place. Thanks to Bo Persson and Daniel Kruegler!
[tuple.rel] fix sizeof...(Types) -> sizeof(TTypes) in two places. Thanks to Andrew Koenig!
[ostream.rvalue] and [rand.eng.mers]: fix "<<" in inline code showing up as French double quotes instead of "<<". Thanks to Peter Sommerlad!
[expr.log.and] Remove redundant word "type" from "contextually converted to type bool". Thanks to Stephan T. Lavavej!
[temp.param] Add missing "struct" in example in last paragraph. Thanks to Mike Miller!
[class.inhctor] Italicize "using-declaration" in paragraph 3. Thanks to Mike Miller!
[dcl.init.list] Use code font for initializer_list<int> in comment. Thanks to Mike Miller.
[dcl.init.list] Mention that list-initialization can be used as a for-range-initializer in the non-normative note. Thanks to Mike Miller.
[dcl.dcl]/3 Don't italicize the trailing "s" in "class-names", "enum-names", or "enumerators". Thanks to Mike Miller.
[basic.stc.dynamic.allocation] Use the term "exception object" instead of long description of the same thing. Thanks to Mike Miller.
[re.alg.replace] Remove stray paragraph separator before last sentence of paragraph 1. Thanks to Pete Becker!
[locale.syn] Add missing declaration for isblank() to the synopsis. Thanks to Daniel Kruegler!
[allocator.adaptor.syn] Add missing ... to parameter for scoped_allocator_adaptor. Thanks to Alisdair Meredith!
[tuple] Change "class... types" to "class... Types" to be consistent with usage of the parameter. Thanks to Christof Meerwald!
Switch to basic regexen because sed's flag to turn on extended regex is non-portable.
[re.results] Add missing > to match_results declaration. Thanks to Pete Becker!
fix minor typo
s/free functions/non member functions/
[time] formatting fixes
[streambuf.virt.put] add missing itemdescr commands
[thread.condition.condvar] Replace references to timed_wait
[conversions.string] codecvt_utf8 is standard.
[conversions.buffer] Codecvt is not a template.
[conversions.string] Codecvt is not a template.
[conversions.string] use fixed-width typeface.
[re.matchflag] escape "\b" properly in description
[sequences.general] Add missing curly bracket to close namespace std in vector synopsis.
[dcl.link] Remove stray curly bracket in example.
[re.alg.replace] Remove stray curly bracket in declaration.
Revert normative changes to definition of literal type which were made as part of a set of editorial changes, to restore the definition which CWG intended.
[string.cons] Remove redundant template argument lists
[string.cons] Remove 'const' from rvalue parameter in table caption
[storage.iterator] Remove redundant template argument lists.
Acknowledgements in N3377
Clean .out files in Makefile
Minor fix for CWG712
Updated version of N3376
Small core wording fixes, as suggested by Mike Miller
N3377 Editor's Report
N3376 draft
Tweak options for latexdiff further in changemark script.
N3346
Recognize some standards-specific markup in changemark generation.
Ignore codeblocks when diffing
LWG2102
LWG2096
LWG2069
LWG2067
LWG2065
LWG2064
LWG2061
LWG2053
LWG2050
LWG2047
LWG2045
LWG2044
LWG2039
LWG2033
LWG2028
LWG2021
LWG2015
LWG2010
LWG2009
LWG1214
Revert CWG974/CWG975.
Notes for 2012 February motions
CWG1251
CWG1282
CWG388, CWG729
CWG1329
CWG1262
CWG1296
CWG1275
CWG1298
CWG1350
CWG535
CWG1345
CWG1336
CWG462
CWG1250
CWG1306
CWG1357
CWG1327
CWG1308
CWG1288
CWG1295
CWG1301
CWG1093
CWG1355
CWG1333
CWG1226
CWG577
CWG482
CWG1297
CWG1347
CWG1346
CWG292
CWG1265
CWG539
CWG1369
CWG1366
CWG1365
CWG1364
CWG1313
CWG1311
CWG1293
CWG1340
CWG1305
CWG483
CWG597
CWG1003
CWG1352
CWG1362
CWG1260
CWG712
Ignore .DS_Store
Hide overfull hbox messages
CWG1250
Typo fix related to CWG1333
CWG1306
CWG1357
CWG1327
CWG1308
CWG1288
CWG1295
CWG1301
CWG1093
CWG1355
CWG1333
CWG1226
CWG577
CWG482
CWG1297
CWG1347
CWG1346
CWG292
CWG1265
CWG539
CWG1369
CWG1366
CWG1365
CWG1364
CWG1313
CWG1311
CWG1293
CWG1340
CWG1305
CWG975
CWG974
CWG483
CWG597
CWG1003
CWG1352
CWG1362
CWG1260
CWG712
Add tool to generate changemark version of draft using latexdiff
[iterator.range] should not be a sub-clause of [stream.iterators]
Add a script to find misformatted requirements
HTML escaping fixes to N3338.html
Add N3337 (pre-Kona mailing draft) and N3338 (corresponding Editor's Report).
Editorial fixes from August 2011:
Switch draft->final mode to fix the PDF TOC amongst other things.
Move Makefile and some Makefile improvements.
Add extra package required on Mac OS X. Thanks to James Widman.
Declare unique_ptr::default_delete consistently as struct rather than class in <memory> synopsis.
Replace email address with cxxeditor@gmail.com
Add [final] option to listings package to always include code listings, even in draft mode.
Added entries to the .gitignore file
Added a GNU Makefile for building the PDF
Add acknowledgements to README
Add .gitignore
Add README and move instructions there
