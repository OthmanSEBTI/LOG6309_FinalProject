Simplified number regexes (#5430)
Support `1_000.toString()`; fixes #5427 (#5429)
Issue 5164: Allow capital E in scientific notation (#5242)
Update dependencies (#5416)
Update package-lock.json
2.7.0 (#5412)
Add `patchStackTrace` export; test that all named exports are detected by Node (#5411)
Update output
Don’t patch `Error.prepareStackTrace` if `--enable-source-maps` is used. (#5403)
Report browser test errors (#5408)
Remove always true `if` check (#5406)
Update dependencies (#5405)
CI: Ensure browser tests are up-to-date (#5396)
Import assertions (#5391)
Empty commit to rebuilt github pages
Add Integrations section to docs (#5334)
Handle triple-quoted JSX attribute values (#5353)
2.6.1 (#5381)
Named exports for Node ESM for `coffeescript` package (#5376)
Improve documentation of `jumps` in comments (#5375)
2.6.0 (#5374)
ci: Check that build steps didn’t change any files (#5373)
Support top-level await (#5371)
Add Node 16 to CI (#5372)
Support import.meta and import.meta.* (#5319)
Run browser tests in headless Chrome; replace Travis and AppVeyor with GitHub Actions (#5298)
Update dependencies (#5311)
2.5.1 (#5297)
Handle implicit object as end of outer implicit object property value (#5296)
Allow soaks and prototype shorthands in object splats (#5293)
Improve performance of location data compensation (#5294)
2.5.0 (#5284)
Allow linebreak/indent in destructured for variable (#5286)
don't return boolean from grammar rule
Update output from #5275
AST: Refactor marking nodes that return (#5275)
Make it clearer that we're adding a property to an object
Colons are apparently another token type that doesn't survive passing through the parser, so rescue any comments attached to colons
No need for separate ast returns method, as it's never overridden
AST (#5273)
Return Root from nodes() (#5274)
AST: Update with latest changes from master (#5270)
AST: numeric separators, BigInt (#5272)
Revert to more complicated lexing of numbers, as the Number constructor can't handle BigInts or numbers with numeric separators (#5269)
Numeric literal separators (#5215)
AST: interpolated string is computed key (#5267)
AST: splat param location data (#5266)
handle assignment to nested nontrailing splat (#5265)
AST: allow assignment to nontrailing splat (#5263)
AST: fix interpolated regex tokens (#5262)
AST: clean up AST tests (#5261)
AST: test compile errors (#5260)
AST: throw expected error messages (#5259)
astAsBlockIfNeeded(); eachName checkAssignability (#5258)
AST: comment after semicolon (#5257)
AST: token cleanups (#5256)
AST: object colon location data (#5253)
AST: add params to scope (#5252)
AST: recognize quoted constructor (#5251)
AST: mark implicit returns (#5255)
add mark argument to makeReturn (#5254)
Location data: compensate for stripped characters (#5249)
Compound assign location data (#5248)
AST: declarations (#5247)
AST: expose tokens (#5246)
handle empty program AST (#5245)
Add debugging information to error message test (#5239)
AST comments: include in blocks; heregex comments (#5233)
Reconcile ast branch with Prettier plugin: part 2 (#5234)
JSX namespaced name AST (#5231)
CSX namespaced tags and attributes (#5218)
Start reconciling ast branch with Prettier plugin (#5228)
Chained comparison AST (#5225)
super AST (#5226)
use OptionalMemberExpression/OptionalCallExpression (#5224)
Basic comments AST; PassthroughLiteral AST (#5220)
Compile heredocs to template literals (#5211)
Directive AST (#5209)
Class AST: bound/computed properties, executable body (#5208)
Class prototype property AST (#5205)
Allow computed class properties (#5206)
parse array ending in empty function (#5200)
Class AST: static methods/properties (#5199)
object property at LEVEL_LIST (#5197)
Don't publish .DS_Store to npm
Release 2.4.1 (#5195)
Actually publish the browser compilers to NPM (#5186)
basic class ast (#5194)
allow indented property index (#5193)
Preserve environment when calling coffee from test (#5191)
handle jsx element as expression (#5190)
JSX empty expression location data (#5189)
AST: "CSX" -> "JSX" (#5188)
ast for jsx content (#5187)
Version bump in lockfile
Release 2.4.0 (#5182)
Tagged template literal AST (#5185)
Index at LEVEL_PAREN (#5184)
regex ast (#5183)
Heregex AST (#5181)
ES module version of compiler for use in browsers; dynamic import() docs; revised Stage 3 policy (#5177)
dynamic import AST (#5180)
String interpolation AST (#5175)
Dynamic import (#5169)
AST: Preserve infinity literal (#5172)
For AST (#5173)
conditional else as simple expression (#5171)
MetaProperty AST (new.target) (#5170)
While AST (#5161)
If AST (#5160)
Return AST (#5157)
Remove extra word in comment in src/nodes.coffee (#5158)
AST: Track exclusive end line/column (#5156)
Code AST (#5155)
Switch AST (#5154)
fixes (#5152)
Try AST (#5140)
Root AST (#5137)
JSX fragment/attribute AST (#5138)
implement coffeescript.registerCompiled method (#5130)
JSX element AST (#5136)
Existence/Throw/Expansion AST (#5135)
Assign AST (#5126)
Object AST (#5124)
Import/export AST (#5123)
array ast (#5120)
Range/Slice AST (#5119)
Call AST (#5117)
Op AST (#5109)
Create helper to get the object for a Value AST node, including proper non-AST location data
Add helper for merging regular, non-AST location data
Add more comments, make consistent naming around Value overrides
super() when properties
Formatting
Improve comments
Refactor AST methods
comment
Refactor to use new mergeAstLocationData
Globalize helpers
Refactor our helper for merging AST location data to take two locationData objects and return a new, merged one
Make error message for location AST paths connect the path to the property we're comparing
Make AST test output browser-safe; improve output for failing tests; have output follow style of eqJS
Don't change style of functions defined with sequential arguments vs options argument; keep the focus of this PR on the AST work, not on unnecessary style changes
We don't need to abstract a new helpers file for just three lines of code, there's more code required to pull this in where it's needed than to just duplicate the two lines of code we need in both places where these 'shared' helpers are currently used
Release 2.3.2 (#5110)
updated Cakefile
test nested location data
use Object.assign
default to forceUpdateLocation
use new ast methods
test parens
force update location data in grammar
updated access grammar
AST generation hooks (#5099)
Babel 7 (#5105)
use exclusive ranges
include range in location data
AST tests (#5097)
Update dependencies; disable some babel-minify transforms to work around https://github.com/babel/minify/issues/893 (#5095)
Chained do IIFE: use grammar, not rewriter (#5070)
Preserve aliased operators (#5059)
Preserve empty interpolations (#5079)
Revert "fix momentum scrolling on iOS (#5083)" (#5084)
fix momentum scrolling on iOS (#5083)
AST flag/API option; generic AST output for all nodes (#5044)
Allow yield indented object (#5072)
2.3.1 (#5069)
Docs headings and changelog refactor (#5067)
Lexer, helpers and comments cleanup (#5063)
Normalize :: syntax (#5048)
Allow implicit call with class with no body (#5053)
fix JSX expression indentation bug (#5056)
Create CNAME
Delete CNAME
2.3.0 (#5043)
Remove references to Node's experimental modules support
Docs improvements (#5042)
Regular expressions `s` (dotAll) flag (#4880)
2.2.4 (#5025)
Make `node --harmony bin/cake test` pass on Node 9 (#5012)
Optimize 'for-range-by' loop when 'by' is literal number (#5016)
simplified test file skipping (#4996) (#5003)
2.2.3 (#5010)
Code of Conduct (#4992)
Pull request template (#4994)
Create issue template (#4993)
Update output
get/set example (#4990)
[update] copyright year to 2018 (#4988)
2.2.2 (#4986)
fix #4898 (#4899)
fix #4874 (#4888)
2.2.1 (#4885)
2.2.0 (#4873)
Update output
fix #4871 (#4872)
Update output
fix #3909 (#4861)
[Change]: Destructuring with non-final spread should still use rest syntax (#4517) (#4825)
Update output
fix #1403 (#4854)
Throw warning for unsupported runtimes, e.g. Node < 6 (#4839)
Update output
2.1.1 (#4835)
Use free variables for anonymous classes (#4826)
Set the context of executable class body wrappers (#4828)
2.1.0 (#4823)
improve elision output (#4824)
[Enhancement] Computed property keys (#4622) (#4803)
[Enhancement] CSX fragments syntax (#4802) (#4804)
Cache node_modules for AppVeyor builds (#4817)
AppVeyor (#4812)
2.0.3 (#4795)
fix #4580 (#4793)
2.0.2 (#4758)
Transpile REPL (#4729)
Allow applying 'get'/'set' property to a bracketless object (#4730)
2.0.1 (#4719)
Add example of comment include type annotation (#4705)
Update ASCII logo (#4718)
Docs fixes (#4707)
boom
fix the code popping
slightly less cramped code
Tweaking font sizes.
Removing slightly defensive and slightly incorrect 'why coffeescript' section
Update docs output for 2.0.0
2.0.0 (#4701)
CoffeeScript 2 announcement (#4695)
Update transpilation docs (#4700)
Option to transpile with Babel (#4697)
First pass at using Travis CI (#4690)
Update CS2 docs per #4688
2.0.0-beta5 docs
[CS2] 2.0.0-beta5 (#4682)
[CS2] Don’t require async/await support to run `coffee` (#4679)
[CS2] use _extends utility instead of Object.assign() for object spreads (#4675)
[CS2] Refine #4666: add parens to chained do IIFE with params (#4672)
[CS2] add parens to chained do IIFE (#4666)
Only unescape newlines for CSX; updated compiled output
[CS1] fix #4260 and #1349: splat error with soak properties or expressions (#4643)
refactor
improve  variable declaration
fix assign in nested properties
resolve merge conflicts
ensure Value; breaking test for {a={b...}} = c
fixed issue with nested properties
Docs: Define functions used in loop examples (#4653)
small fix
fix object spread destructuring bug: #4651
Update test to prove that there's no collision in generated variables
If compiling a function parameter creates any generated variables (e.g. `ref`), shift the declarations for those variables into the parent scope; fixes #4413
Clean up function parameter compilation to get name for scope
2.0.0-beta4 docs
2.0.0-beta4 (#4628)
[CS2] CLI: Propagate SIGINT and SIGTERM signals when node is forked (#4625)
[CS2] CSX spread attributes: <div {props…} /> (#4607)
[CS2] fix for “`do super` in constructor” bug (#4627)
[CS2] Comments (#4572)
[CS2] Support `await` in REPL without wrapper function (#4604)
[CS2] Add #! support for executable scripts on Linux. (#3946)
1.12.7 docs
1.12.7 (#4617)
Restrict indented return arg to object (#4605)
Spread syntax triple dots on either right or left (#4606)
fix #4577; renamed destructured parameters with same default value (#4596)
merge master (#4597)
Add more features to the list of reasons to check out CoffeeScript 2
Update v2 docs for 2.0.0-beta3
2.0.0-beta3 (#4594)
[CS2] Destructuring object spreads (#4493)
disallow inline chained call after func glyph (#4590)
[CS2] JSX documentation, Try CoffeeScript improvements (#4583)
[CS2] destructured nested defaults [fixes #4566] (#4574)
[CS2] CLI: Test option parsing for current CLI (#4565)
[CS2] Restore bound class methods via runtime check to avoid premature calling of bound method before binding (#4561)
[CS2] Support for CSX - equivalent of JSX (#4551)
2.0.0-beta2 docs
[CS2] 2.0.0-beta2 (#4550)
1.12.6 missing updated output
Comments and style fixes
1.12.6 (#4548)
[CS2] Module should be require-able in non-Node environments like Webpack and Browserify (#4546)
[CS2] Un-prefer global (#4543)
[CS2] Docs updates (#4536)
`return` and `export default` can now accept implicit objects (#4532)
[CS2] `return` and `export default` can now accept implicit objects (#4532)
Remove support for bound instance methods (#4530)
[CS2] Replace Closure Compiler with Babili, transform browser compiler into ES5-ish (#4523)
Keep unicode code point escapes as is when possible (#4520)
[CS2] Remove unnecessary utility helper functions (#4526)
We no longer need to wrap in quotes JavaScript reserved words used as properties (#4527)
Iss4248 unicode code point escapes (cleanup) (#4522)
merge master
fix 'future reserved words' test (#4518)
Write .coffee_history in $XDG_CACHE_HOME (#4472)
[CS2] Literate CoffeeScript without dependencies (#4509)
`cake build:browser` should just assemble the browser build, not also test it; add `cake build:browser:full` to additionally run the tests
If the tests fail, return a non-zero exit code
Update 2.0.0-beta1 docs
[CS2] 2.0.0-beta1 (#4499)
1.12.5 (#4495)
[CS2] 2.0.0-beta1 docs (#4494)
[CS2] Throw an error for ambiguous `get` or `set` keywords or function calls (#4484)
No longer throw an error on `get` or `set` function calls to objects with dynamic property names (introduces a way to circumvent our check for trying to avoid the `get` or `set` keywords, but not worth the complications for this tiny edge case)
Optimization
[CS2] Destructuring (#4478)
Revert "Allow `get` or `set` parentheses-less function calls when first argument is a string without a colon (so a plain string, not a property accessor)"
Allow `get` or `set` parentheses-less function calls when first argument is a string without a colon (so a plain string, not a property accessor)
Throw an error if get or set are used as keywords before what looks like a function or method with an interpolated/dynamic name
DRY up getting the previous token
Catch get or set keyword before static method
Code golf
Throw an error for ambiguous `get` or `set` function calls or ES5 getter/setter keywords, to warn the user to use parentheses if they intend a function call (or to inform them that `get` or `set` cannot be used as a keyword)
Bump minimum Node version to 7.6, which has non-harmony support for async/await; make async tests always enabled, not just for harmony mode
Added example, simplified text via suggestion from GeoffreyBooth
Remove language and add link to Wiki article- In the Wild.
Reduced overall size per section, cleaned up some style issues and fixed some spelling issues.
Looking for comments, Documentation of unsupported features, and suggested menu locations.  Separated Why Coffeescript out.  Yes I know I need to trim let/const down.
An explanation of why we don't currently support certain features within CS2. First draft.
Update v2 NPM installation instructions
Update NPM installation instructions
Teaser for CoffeeScript 2, link to 2 docs
Copy the generated output CS2 docs onto master so that GitHub pages can publish them
Rebuild release
Make test compatible with Firefox (though it still fails there while it passes in Node and Chrome)
Bump date
Ensure unique source maps’ sourceURL; closes #4126
Update changelog for 1.12.4
Update compiled output
Update changelog
Bump dependency version
Refactor Cake tasks (#4440)
Properly update location data when setting a call to use `new`
Place ending heregex tokens one index earlier
Updated compiled output for 1.12.4
Bump version to 1.12.4 and update changelog
cake build:watch, based on https://github.com/GeoffreyBooth/coffeescript-gulp
Cake task to cut a new release
Abstract out testing built code, to prepare for watching the build task
Refactor the build tasks to be more foolproof, including the parser unless it’s explicitly excluded
The cake documentation tasks should each have build and watch modes following the same form
Node comes with NPM nowadays, so there’s not really a reason to install CoffeeScript the non-NPM way
Remove hyphen in `coffee-script`
Prepare for new module name on NPM
Add breaking changes link to changelog; bump date
Update changelog for 2.0.0-alpha1
Update browser-based tests output
Update annotated source for 2.0.0-alpha1
Bump CoffeeScript version to 2.0.0-alpha1
Bump version of Closure Compiler, update browser compiler
Update docs for classes, breaking changes (#4438)
getSourceMap needs to pass literate flag to compile() (#4435)
Update async test to use new `super` syntax
[CS2] Compile all super calls to ES2015 super (#4424)
Update release date for 1.12.3
Add other 1.12.3 updates to changelog
Update generated docs for 1.12.3
Update browser compiler for 1.12.3
Bump version
Update documentation for 1.12.3.
Updated output
Apply SVG fill color through CSS
Trim the installation and usage sections; can backport to v1
Allow copying JavaScript from examples
Update docs per #4354
[CS2] Compile class constructors to ES2015 classes (#4354)
Show a simple object extraction before complex one
Update copyright range to 2017
Allow `@` values as indices in `for` expressions
Try CoffeeScript add play and link buttons
Try CoffeeScript first draft
Remove trailing whitespace in test/error_messages.coffee
Update output
Updated v2 docs generated output
Modernize various sections as relevant to v2; improve presentation of tables
Trim the installation and usage sections; can backport to v1
Embedded JavaScript should really be the last item in the language reference
Convert async docs text to markdown, add to sidebar
Add some v1-style ribbing
Updated output v2 docs
Update introduction for CoffeeScript 2
Add some links to header navbar; fix sidebar to work at various breakpoints, including navigating to anchors
Style blockquotes
Refactor docs resources section; reorganize outline; other minor corrections
Remove out-of-date info and dead link from Literate CoffeeScript section of the docs
Improvements to strings and comments docs; could be back-ported to v1 docs
Colors
Show header bar on all breakpoints
Add fonts
Line spacing notes
Updated compiled output
Add logo to top of content pane
Animated sidebar menu toggle button
On mobile, the code examples are stacked
Mobile off canvas sidebar nav that slides in
Mobile header nav with menu button
Rebuild for 1.12.2
1.12.2 changelog entry and version bump
Docs improvements: content in Markdown, organization into subtemplates, fixed tests (#4401)
DRY on the version number: it should be in package.json and nowhere else (#4400)
Update packages, including new highlight.js which supports our newer keywords and triple backticks (docs output is unchanged)
2 docs output, first draft
Wire up the buttons that run the code examples
Move code example HTML into a template where it belongs
Move the `codeFor` function into versioned folders, so that v1 and v2 docs can have different example code blocks/editors
Add CodeMirror for editable code examples; recompile CoffeeScript into JavaScript on change (WIP)
Move the `codeFor` function into versioned folders, so that v1 and v2 docs can have different example code blocks/editors
V2 docs starting point: jQuery, Bootstrap, basic layout, nav with scrollspy
Handle ids within the template, not in the Cakefile; remove marked’s auto-generated and conflicting ids
Use idiomatic markdown output for code blocks (<pre><code>)
Use idiomatic markdown output for code blocks (<pre><code>)
Update gitignore
Add marked
Revert "Split body into nav and body"
Watch subtemplates
Watch subtemplates
Split body into nav and body
Update output index.html
Get error messages tests to work in the browser
Move include logic into templates
Split building index.html and building test.html into two tasks; collapse the parts of `releaseHeader` into one compact function
Split apart index.html into components that Cakefile assembles, so that we can add in logic to include different files for v1 versus v2
Render the examples when we’re rendering index.html; they compile so quickly that there’s no need to pre-render them and save the intermediate .js files
Add a try/catch in the Error.prepareStackTrace implementation to make sure that it never throws. Resolves jashkenas/coffeescript#4391.
Update 1.12.1 release date
Documentation is now markdown, converted to HTML on compilation
Bump date
Improve docs (#4396)
Embed CSS; a bit unorthodox, but we’re a single page so there’s no point in separate .css files and their separate HTTP requests
Modernize favicon
Optimize SVGs; replace logo PNG with SVG
Replace tiny bitmaps with base64-encoded URIs
1.12.1, includes #4393 and #4388.
Detect when `from` in a `for` loop declaration is an identifier (#4393)
Allow imported module members to be named `default`
Runtime should support for...of (#4385)
Update broken links
Update 1.12.0 release date
Rebuild
Improve comments formatting for better output in annotated source
Improve tests and comments
Handle tagged template literals (and future CS2 interpolated strings) with “invalidly escaped” backticks or `${`—one backslash instead of two
Regenerate docs
Remove change log updates related to documentation and the compiler build system
Wrap HTML in comments in backticks, so as not to fool docco when generating the annotated source
Add Trix to list of examples; closes #4227
Escape backticks and `${` within template literals; fixes #4380
Add link to browser tests
Update annotated source for 1.12.0
Updated output docs for 1.12.0, including new browser compiler
Updated `lib` for 1.12.0
Docs examples with quotation marks were broken. Properly escape the quotes. http://stackoverflow.com/a/1082558/223225
Update size of browser compiler
Convert eligible HTML entities to unicode characters (a recommended practice: http://stackoverflow.com/a/436637/223225) and convert straight quotes to curly quotes
1.11.1 to 1.12.0 change log
Bump version to 1.12.0; pass through as a variable to index.html
Refactor the way test.html runs tests to be similar to how Cakefile runs them; most importantly, tests fail when the `test` function throws an exception, not when `ok` does (which happens intentionally a few times in the classes tests); this also produces a more accurate count of tests run
Exclude error messages from browser-based tests; watch test files
Polyfill missing helper functions from Node’s assert, one with CDN-hosted Underscore; handle .litcoffee correctly
test.html: better test failure output; add inexplicably missing `testingBrowser`
Abstract the `eq` and `arrayEq` functions, shared by Cakefile and test.html, into one file that can be included into both
Run literate
Add test description to error message
Refactor test.html to be part of the docs output, with the tests embedded inside it; update test.html styles; move UTF-8 comment test out of test.html and into test/comments.coffee where it belongs
Standardize on .html file extension; move test.html into its new home
Organize Cakefile: move helper functions that are only used by `doc:site` into the `doc:site` task
Replace Uglify.js with Google Closure Compiler, JS version; let NPM finally reformat package.json the way it likes (#4376)
[CS2] Output interpolated strings as template literals (#4365)
Browser compiler should convert the string to load to UTF-8, in case it is UTF-16 like the contents of a <script> block generally are (#4375)
Add `for…from` to list of ES2015 exceptions in the introduction (#4373)
Async example should follow its introduction
Docs for tagged template literals (#4372)
Docs for triple-backticks and escaping backticks (#4369)
Update Bower.json per latest spec (#4371)
Relocate example per new folder structure; update per final notes
Docs for `for…from` (#4368)
Docs shorthand object notation (#4356)
Docs improvements (#4367)
Triple backticks to allow creation of JavaScript blocks (#4357)
CS1 tagged template literals (and CS2 interpolated strings as template literals) (#4352)
Revert to http://coffeescript.org until GitHub pages supports HTTPS for custom domains (#4363)
move CNAME
Revert unintended changes to generated index.html
coffeescript.org goes HTTPS!
Even 1.x doesn’t need to limit generators tests to --harmony mode anymore; minor cleanup
Update `cake build:browser` to reflect new path to coffee-script.js
Update `cake doc:source` to output to new `docs/v{1|2}/annotated-source`; collapse `doc:underscore` into it and generate missing underscore.html (closes #4295)
Move v1 documentation under `docs/v1`, with `docs/index.html` symlinking to `docs/v1/index.html` (with `.nojekyll` file to hopefully make the symlink work)
Use Google-hosted jQuery
Update dev dependencies; update template rendering to use new Underscore syntax
Add a `for .. from ..` loop for generators, see #4306, #3832 (#4355)
keeping it simple
Compile splats in arrays and function calls to ES2015 splats (#4353)
eliminate utterance queuing
refine sound example
switch to interactive sound example
change async code snippet
change async code snippet
changed wording
doc fixes and updates
Add Implicit Async Functions (#3757)
Include generated } tokens when fixing closing token positions
Resolve conflicts with `2` branch
Selectively ignore CS-only keywords in ES imports and exports (#4347)
[CS2] Output ES2015 arrow functions, default parameters, rest parameters (#4311)
[CS2] Compile computed properties to ES2015 equivalent (#4338)
Properly set location for string tokens ending in a newline (#4344)
Upgrade dependencies
Commit generated files that should've been committed as part of #4313 merge
Bump version in other files (but not documentation)
[CS2] Require Node 6.9.1+ (#4341)
Node 7-nightly throws deprecation warnings when calling `fs` non-`Sync` functions without callbacks; but we always want the synchronous versions, so we should just call those in the first place
The CoffeeScript compiler should error on trying to export anonymous classes (previously we were outputting invalid JavaScript that the runtime was erroring on)
Define proper operator precedence for bitwise/logical operators
Change OUTDENT tokens to be positioned at the end of the previous token
strip \r (if present) before final \n
CoffeeScript 1.11.1
Add changelog for version 1.11.1
Minor cleanup
Pass through octal and binary literals as-is
Handle very large hexadecimal number literals correctly
Update the changelog for 1.11.0
Replace .npmignore with `"files": [...]` in package.json
CoffeeScript 1.11.0
Styling fixes for the documentation
Add changelog for version 1.11.0
Update CLI flags documentation
Don’t allow mixing different types of whitespace for indentation, per line.
Make sure the indentation is consistent with the previous level.
Add modules documentation (#4309)
Be much more careful about parsing `*` in import and export statements; handle export expressions that use `*` on the same line as `export`
Support import and export of ES2015 modules (#4300)
Add a test that tokens have locations that are in order
Improve naming of generated 'i-variables'
Improve inline source maps generation
Treat Infinity and NaN as reserved words
Split out properties from identifiers
Unify, simplify and fixup assignment errors
compile InfinityLiterals to 2e308
Refactor `Literal` into several subtypes
Change a bad link in documentation
Allow for external and inline sourcemap generation separately
Add inline sourcemap support
Build for #4178
Only allow `yield return` as a statement
Remove unnecessary brackets and empty spaces around yield
Add support for standalone yield
Remove uncaught error vars
Remove unnecessary .js files
Update date and fix formatting error in 1.10.0 changelog
CoffeeScript 1.10.0
Ensure that all source files end with a single `\n`
Git rid of the deprecated `<tt>` tag in the docs
Remove unnecessary blank lines at EOF in examples
Improve the documentation site on smaller screens
Document destructuring defaults
Implement ES2015-like destructuring defaults
Updated compile
Removing unnecessary assignment
Removing the unnecessary underscore now :)
Improved the tests and removed the hardcoded variable, according to suggestions.
Closes #4036: "Try catch" optimisation Let me know if there's something I should be doing differently as this is my first contribution to coffeescript. I fixed the reported issue where a generated variable could clash with a user-defined one in a try/catch block. I added a test for a few scenarios with different variable names for a try/catch, to confirm the fix and avoid regressions.
Reset @seenFor in lexer before tokenizing
don't copy arguments or caller from require
correct release date
redoc
Replace "instanceof Array" in transformer with "[object Array]" comparison
CoffeeScript 1.9.3
Commit compiled code that should have been in commit 378a04e4
Improved try/catch/finally to explain the options better.
Document `a for [b..c]`
Document `yield from` and `yield return`
Document interpolation in object keys
Improve modulo documentation
Document extra try/catch features
Save alias names in the origin of tokens
Add tests for implicit calls with implicit object
fix history file descriptor leak
fix write after FIN error when using repl via socket
adding new packt book at their request
#3942 -- revising changelog
build & docs for 1.9.2
added 1.9.2 changelog
bumped version to 1.9.2
add compiled lib/browser.js
optionally to read data-src out from <script>
Added checking on process.stdout to be compatible with browserify
Escape literal ] in REGEX
Revert "Escape literal [ in regexp"
Escape literal `[` in regexp
yield now behaves as expected around 'this' - fixes https://github.com/jashkenas/coffeescript/issues/3882
added descriptions to tests which only had Issue numbers
Delete README
Add link of changelog
Replace references to jQuery's 'bind' with 'on'
add -r/--require command line option
variable names
#3862 changelog
CoffeeScript 1.9.1
improved yield return test
fixed yield return producing incorrect output when used outside of the last line
fixed overly fragile repl test to work with 0.12, see https://github.com/jashkenas/coffeescript/issues/3855
added a lot of ES6 generator tests
fixed being unable to use 'yield throw'
Prevent writing the same file several times (fixes #3753)
Replace `last array` helper with `[..., last] = array`
Improve lexer error messages
Allow super in methods with dynamic names
Improve error messages for unexpected regexes
redoc
Name generated variables without leading underscore
Revert "move changelog"
move changelog
#3819 changelog docs
docs
more text tweaks
text tweak
CoffeeScript 1.9.0
removing the mkdirp test
rebuilt browser just for testing
Optimize the mkdirp test
Add test for mkdirp
Update index.html.js
Decouple "mkdirp"
Make regexes always uncallable
Make CoffeeScript work with jison 0.4.14+
Get rid of `Scope.root` hack
Better error message for unexpected CALL_END
Allow variables named like helper functions
Add test for reserved keywords as parameters
Point "missing )/}/]" errors to the unclosed (/{/[
Refactor interpolation (and string and regex) handling in lexer
include logo .svg files
added tests for yield in switch & for loop expressions
fixed yield keyword not working in switch & for loop expressions
add Die Alternative to books section
Removed "mkdirp": "~0.3.5" from bower.json
Added an initial bower.json configuration file
implemented proper precedence for 'yield'
Improved test readability + fixed integer divison
Added failing test case for the `yield` precedence
Use stdio option instead of customFds
Added test for jashkenas/coffee-script#3638
added tests for yield, yield from, yield return and yield in if statements
always wrap 'yield' in () to allow composability with all other operators
added 'yield return'
added 'yield from'
removed support for '->*" and '=>*'
Add Atom to Examples
Remove josh/nack from Examples
Quick spelling fixes
merged
CoffeeScript 1.8.0
Update changelog for 1.8.0
Rebuild docs
Exit with an error code 1 if could not write a compiled JavaScript file or a source map
Use '.js.map' as file extension for created map files Addresses jashkenas/coffeescript#3297
`bin/cake` will be in `coffeescript`
Add a test case for compiler error formatting.
Update link to "CoffeeScript Ristretto", fixes #3489
Update link to "CoffeeScript Ristretto", fixes #3489
Retina favicon.ico
Remove typo
Remove sudo from install command in introduction
remove docco as dependency (still a devDependency)
Make getCommandId() more readable.
Implement changes recommended in the pull request.
Handle dotless commands in the REPL.
Do not rely on properties order in scope tests
Add tests to check that the FOR variable is defined after the loop
command: deprecate --join
merged
now that github supports renames, coffeescript, not coffee-script
Export the CoffeeScript REPL.
Display compile errors - rebase from @jeremybanks
fix spell mistake on index.html.js
Package with preferGlobal as appropriate for command-line application
fix a spell mistake in cakefile
fix cake install; related: #3395, #3393
Update README.md
Update README.md
Delete README
Convert README to Markdown
remove editorialisation
typo: mult-dot => multi-dot
add newlines to end of files
Improved coding convention and messages.
changelog: use time elements for release dates
changelog: replace inline CSS
Rudimentary fix for jashkenas/coffee-script#3379.
changelog: add missing compare view URLs
changelog: add anchor to each section
Register .coffee extension by default on Cakefile
fixes #3363: modulo operator evaluation order
Improve installation documentation
Make patched stack traces’ prelude consistent with V8
Remove reference to never-defined .isUndefined property
Add tests for the optimization of trailing return statements
use npm-installed docco rather than relying on globally installed docco
update "latest version" documentation link to 1.7.1
recompile documentation with 1.7.1
CoffeeScript 1.7.1
update changelog for 1.7.1
rebuild annotated source documentation
add docco as npm dependency so it doesn't have to be installed globally
In docs, move commas, part 2
In docs, move commas out of code
index.html
index.html
Just a small typo in 1.7.0 changelog
Just a small typo in 1.7.0 changelog
CoffeeScript 1.7.0
Removed idle styles
Use actual _.template instead of custom one
Extras compiled with 1.7.0
Recompile source with 1.7.0 version
Recompile documentation js files with 1.7.0 version
Use Node instead of Ruby for documentation
Prepare 1.7.0 release
forgotten compilation from parent commit
Simplify modulo tests
Make modulo operator convert arguments to numbers
Added expansion to destructuring
Remove in empty array optimization
Improve error messages for generated tokens
add missing implicit object literal test
'yield*' now works as expected
updated lexer to allow 'yield*'
first attempt at including 'yield*'
CLI: Run index.coffee when called on a directory
'->*' and '=>*' now produce generators
first attempt at using '->*" and '=>*' for generators
Formatted utilities using single quoted literals
the page list only top 100 contributors
Back to non-naked constructor, @, preincrement, comprehension bracketing, idioms: calls, comprehensions, interpolations
add CoffeeScript.register method for require.extensions registration
fix auto and manual require.extensions registration; ref #3141
Add CoffeeScript in Action book link
Prevent loop collection in endAllImplicitCalls
fixed misspelling in Cakefile
Prettify `watch`
further improved readability of cakefile generator check
Remove unnecessary parameter
improved readability of cakefile generator check
entire generator test file is now ignored if generators are not available
improved readability of generator test
npm run-script test-harmony executes generator tests
removed yield from the reserved words
added a test for generators
Improve HEREDOC regexp
Added compilation regression test
Handle nested calls and function oneliners when chaining
Implemented method call chaining
Add negative slice end index into docs
Handle backslashes at the end of heredocs
Escape newlines in heredocs with backslashes
Simplify and rename `unwatchDir` (to `removeSourceDir`)
Make timeout callback in `watchDir` synchronous
Simplify `removeSource` and make it synchronous
Remove `path.exists*` as fallback for `fs.exists*`
Use absolute paths in CLI
Handle escaped backslashes
Don't rely on multiline in other tests
More test cases
Better method name and fixed regexps for IE
Changed multiline string literals
using 'yield' automatically turns functions into generators
added 'yield' to the unary keywords
removed 'yield' from the reserved keywords
Remove old Node pre-0.6 warning.
Revert "add: Stat polling support while `fs.watch` doesn't work."
Revert "mov: Change the option name `--polling` to `--watch-polling`, and only leaves the long option name."
Revert "fix: `opts.polling` changed to `opts[watch-polling]`"
Cleanup and extend `METHOD_DEF`
Remove unnecessary type conversions to Number
Remove unnecessary existential check
Avoid unnecessary wrapping of some bound functions
Refactor closure compilation
Code cleanup in Class
fix: `opts.polling` changed to `opts[watch-polling]`
Missing parentheses
Escapable linebreaks in heregexes
mov: Change the option name `--polling` to `--watch-polling`, and only leaves the long option name. opt: Optimize the comment of the `--watch-polling` option.
Escaped whitespace and slashes in Heregexes
add: Stat polling support while `fs.watch` doesn't work.
merged in stricter noncallables
CoffeeScript REPL should be able to require coffeescript files.
fixed ascii art inconsistencies in coffee's water vapor
accept all format of numbers in ranges
Forgot to update the .erb as well.
Add new Packt book.
accept all format of numbers in ranges
added more block-comment related tests for single-line block-comments and jsdoc-like @doctags-comments.
Make the REPL *CLI* use the global context so as to be consistent with the `node` REPL CLI.
Make the REPL *CLI* use the global context so as to be consistent with the `node` REPL CLI.
fix exit code when using --nodejs option
Improve license part of package.json ;)
Refactored inline-if into more readable multi-line statement.
Amended - Make the REPL *CLI* use the global context so as to be consistent with the `node` REPL CLI.
Make the REPL use the global context to be consistent with the node REPL.
Use coffee binary of coffee that overrode fork
Avoid using a getter for the compiler error's "stack" property
recompile
cleaning up mkdirp bit.
Using original existence check with mkdirp call on failure
Override the SyntaxError's "stack" property instead of deleting it
Change how error messages are shown
Disallow single-line `IF expr ELSE` without `THEN`
Update compiled JS
rebuild for PR #3012
simplify logic and changing less from before
remove logic redundancy
parallelized script loading in browser, yet order remain
Removed multi-line comment wrapping
Updated the Source Maps syntax
Avoid variable scope collision with extensions
check existence of "path" for browser execution
Speed up `updateLocationDataIfMissing`.
Better handling of initial indent at file start.
Made stack patch test less brittle.
Using more standard convention for patched stack line numbers.
Removed unnecessary source map generation during `require()` and made stack line number patching on by default.
Removed not used variable.
fix #3029
rebuild #3029
fix block comment
Move a try/catch from compile to loadFile
Bug fix. When coffee is invoked with the -c parameter and './' value, first two characters of the directory into which the compiled files are stored get chopped off. Example: if compilation invoked like this: 'coffee -o ../lib/ -cw ./', then Source file: ./OutputFolder/file.coffee, compiled output: ./../lib/tputFolder/ The code only expected '.' to mark the local folder. However, './' is equally valid.
renaming import test files to avoid risking the disfavor of .gitignore
Revert "remove `cake build:ultraviolet`"
CoffeeScript 1.6.3
Removing out of date testing cruft
merge
Merging in a monkey-patching of Module::load, unfortunately.
Removing Ultraviolet workaround
fixes #2934
remove `cake build:ultraviolet`
fix style problems part 3
Disallowed `for own in`
Didn't mean to commit testsymlink
Early exit + refactor findExtension
New tests for module importing
fix style problems part 2
fix style problems
use helpers.isCoffee in test runner
Patch node module loader to handle multiple extensions - fixes #2928 & #2855
Add test for .coffee.md loading
keep track of source map information for require()d coffee files
rebuild for some unneccessary parentheses changes
final style edits
partly revert 7be996c
remove jsl config file and the doc line about it
code cleanup
remove --lint. #2894 : rebuild and fix docs
give the `-l` flag to literate
Keep the js comment on a single line if the herecomment is on a single line.
#2900 -- parameter-less catch clause.
Move lastLine setter into conditional block to prevent .commands and blank lines from setting lastLine
Replace large comprehension with much simpler code; fix comment to reference maxSize instead of previous 10KB limit; only pop a history entry if the file size is actually bigger than maxSize; only add items to the history if they are different from the last item by storing the last line and loading it on startup.
Literate flag
Pop off partial line if input history file was truncated; make maximum input history file size configurable via repl start options
Use string interpolation for .history command; rename out variable to history an store the history in it as an array in the proper order so that printing it is just a join operation
Add power operator to the list of tokens that force a line continuation if they appear at the end of a line
fix #2846
Use separate variable for fd used to read history file; use string interpolation to print code lines; do not use unit test to remove temporary file and instead use a process exit event handler
Add unit test to read and run a line from the interpreter history file and remove the dummy history file after tests have completed.
Make history file optional and configurable via the opts passed to repl.start
Remove explicit catch that did nothing
Rebuild to remove debugging log statement
Add floor division `//` and modulo `%%` operators, and compound forms of the new operators
Add history to the coffee interactive interpreter that persists between sessions using a ~/.coffee_history file in a similar way to bash. Code based on repl.history and Node pull request 3178 with modifications.
Make power operator have higher precedence than unary operators: +, -, ~, !
Make power operator compilation use proper AST nodes
Add test for compiler errors on require()d files
encode unicode src, test added
quick-fix with a different approach
Rebuild.
More explicit window context in src/browser.coffee.
removing sourceColumn reset
better docs for source maps
better docs for source maps
better docs for source maps
slimming SourceMap slightly further
Big refactor of SourceMap class. Literate CoffeeScript. Purdy.
CoffeeScript 1.6.2
be a little more descriptive, as per @epidemian's suggestion
small stylistic change and optimisation to code from #2847
better naming by @michaelficarra
safer browser check
fixed lineno
use btoa as base64 encoder, inspired by @ashtuchkin
whitespace
fix path handling on Windows
Compiled JavaScript files for improved literal mode.
Test case for literal mode: Code blocks must be preceded by blank line.
Improve literate mode.
Apply modifications by @jwalton
found a linear shift of lineno, dirty patch for now
build
roll back to options.filename
minor cleanup of parent commit
added warning that we need node 0.8+ to run repl
Bump engines.node version on package.json to 0.8
manually add the newline at EOF
fix node v0.10 path
@epidemian typo
Add REPL scoping tests
accept override
port patchStackTrace from Redux
Keep REPL running on runtime errors
@epidemian typo
fix node v0.10 path
Add REPL scoping tests
rebuilt source code documentation with new version of Docco.
Add check for end of input on parseError handler
Reverting #2490
#2490. A bit more of the style.
#2490 -- implementing a conditional in terms of the guard style.
disallow multiple else blocks in if/guard syntax
Remove dead variables.
Rework API for sourcemap filenames and paths.
Add an additonal test, courtesy @matehat
merge
tests for `baseFileName` helper for files with only coffee-script extensions as the file name.
more test coverage for `baseFileName` helper.
fix: compiling `coffee.coffee` produces `.js` file.
Code inspect fixes from the inimitable Nami-Doc
Better fix for sourceRoot and relative path for .coffee files in source maps.
Remove column number from online editor error box
Removing debugging source location output from --nodes. It shouldn't have snuck in there.
Get rid of CompilationError and instead have a couple of functions on helpers.coffee
cleaning up the previous merge -- moving it out to helpers.invertLiterate
Add multiline horrible kludge for IE
Clean up unused parameter.
Move sourceMappingURL line to bottom of file
Improve locationData of implicit object braces.
Exclude preceding newlines from INDENT tokens.
CoffeeScript 1.6.1
refactoring to a baseFileName that can work in the browser, for later
Update compiled version
CoffeeScript 1.6.0
Make duplicate param name errors mark the actual duplicate parameter
Reverts 56fe211b793a115ffe74f571947014226cb85abf
Renaming --maps option to --map for consistency.
Remove a couple of TODOs (WONTDOs really)
Integrate error messages on the site editor
Minor API changes.
Remove PARANOID flag.
#2757, Allow non-significant commas at end of nested implicit objects
When printing out --tokens, hide the location data.
Integrate error messages on the REPL
Show colorized error messages
Patch child_process.fork to run .coffee files
Change some more "!"s to "not"s.  Make spacing consistent after periods in commnets.
Change compileWithSourceMap() so it returns an object instead of an Array, and return the SourceMap object.
Make error messages show only first line on multi-line errors
Optionally allow replacement of existing mappings in SourceMap#addMapping().
Minor API clean up, and make it so sourcemaps are pretty-printed to the .map file.
Moving path dependency back into 'command'
Merging in .coffee.md support alongside .litcoffee ... I think we'll keep .litcoffee as the canonical, however.
Removing duplicate 'CATCH'
Disallow implicit calls in cases like:
Add source map support
Add a couple of tests to document the behaviour of other typed constructors
Revert #2599
(Aside: For historical reasons we do make the filename extension optional, which is a deeply regrettable accident of history that I would not repeat, given the chance.)
Add support for text/literate-coffeescript in the browser
Modify extension handling to allow for .coffee.md
Hoist build function to top level of Cakefile
Improve the handling of implicit object and implicit call combinations by handling them together.
Add CompilationError.fromLocationData
Compile to an array of CodeFragments instead of to a giant string.
Optimized `repeat` and its tests
Use blank line regex from Redux
Add some error formatting tests
Improved compiler error messages
Remove redundant filename in error message
Pass 0-based indexes to CompilerError
Improved parser error messages
Improved lexer error messages
Remove unnecessary returns and use default parameters
expanding literate explanation
Adding a negative array loop example to the docs
Retina-ifying the CoffeeScript logo
merged
CoffeeScript 1.5.0
Merging in location data in the AST. Yee-hah.
merged
Removing Riak JS
#2702 -- remove more dead code
#2702 -- remove dead code
#2702 -- remove old code
Reverted b31cc70 -- putting Generated comment back up top. Why? Why not?
compile a320e1e53501f4aae1067e5eab4b9f816b9e6338
Revert "Moving the 'generated by coffeescript version X' comment to the bottom, to get it out of the way"
Use the newly compiled code when running tests under build:full
Simplify Value::unfoldSoak momoization code (only a bit...)
Remove unnecessary if statement
Make it more explicit that 'this' is the only possible value for `tag` in Value's constructor.
moving book link to the proper place to be rebuilt
CLoses #2700
Update js files.
simpler implementation of the previous commit
Removing variable indirection for simple steps
slightly better conditions for range steps
require a file name before checking for a fallback
Moving the 'generated by coffeescript version X' comment to the bottom, to get it out of the way
Merging in @epedemian's fix for #2359 -- disallow other-typed constructors
Adding a test for #2613
fix spacing in Rakefile
add license information to gemspec
Adding new coffeescript book per request
fix typo; thanks @Nami-Doc
final tweaks to REPL rewrite
Remove testing TODO
REPL tests based on direct interaction with input and output stream. Includes multiline tests.
fix some issues pointed out in 041033a51af086b48156ff2a9dafb4675b88d99c
finish multiline support for REPL rewrite
Multiline WIP
Single quotes
empty command evaluates to undefined
Initial commit of REPL based on node's REPLServer
fixing missing file finding logic for litcoffee
Add unit tests, fix last_column reporting.
Remove files committed by accident.
Add quick unit test for location data.
Put location data in token[2] instead of in token.locationData
do not try to compile traces of coffee within node_modules
Reverting the unthrow of the error.
Use .explicit when deciding whether or not to add location data.
fix tabbed literate code
fix 'litcoffee' extension support
revert broken parts of cdde576182a99335149d9144ba8732dd7cc419b9
rebuilding after cdde576182a99335149d9144ba8732dd7cc419b9
Syntax errors no longer report full stack traces ... just the error, please
adding one more compound operator test for #2627
doing the Scope in literate coffee ... just for kicks.
Correct line numbers in literate coffeescript syntax errors
add litcoffee to supported file formats
bumping version to 1.5.0-pre
Location test.
gh-2631 Update to uglifyjs's new API
Parse compound assignment followed by a terminator.
Hook up new token location data to parser.
Clean up TODOs
Add location data to tokens generated by the rewriter.
Lexer now adds location data, including first/last line/column to all generated tokens.
Add location data to nodes without passing it in constructors.
Remove debug logging from Cakefile.
Use 1-based line numbers instead of 0-based line numbers in nodes toString().
Add more descriptive line numbers to node toString()
Parser passes location data to each node in tree
tests for the repl: ignoring comments, output in inspect mode, variable saving
Prevent constructors from returning values
Remove return statement on auto-generated constructors
CoffeeScript 1.4.0
rebuilding nodes
Simplify Call.prototype.compileSplat based on how Traceur does it
Updated example using @epidemian's suggestion
pretty decent initial test.
fixing block comment indentation
first working version of literate coffeescript
start with comments...
removing export of RESERVED ... more progress.
ignore litcoffee files
rebuilding
Adding a CONTRIBUTING to CoffeeScript.
fixes #2521: line numbers in errors affected by newlines in backticks
updated compiled output
Adding Testing with CoffeeScript to books list
fixed broken compilation due to pull #2430
building #2430
Add test script to package.json.
Strip UTF-8 BOM when require'ing .coffee modules.
add documentation for using switch without a control expression
Correct incorrect line in blocks.coffee
Migrate from path.exists to fs.exists
removed duplicate "let" in RESERVED list
Add example of destructuring assignment in class constructors for options
rebuild after merging #2371
delete unused sentence
removing code that restricts duplicate key names and associated tests
typo in test case for #2333
finally put #2333 to rest by resorting to using indirect eval
correct spacing around operators in slice output
fixes #2349: inclusive slicing to numeric strings
fix repl completion and navigation
trying to commit built files again; here goes nothing
yet another small cleanup and obscure bugfix related to #2333
object key dupe checking again: support newlines and \a in strings
correcting broken fix for #2333 regarding string escape sequences
fix escaping in test for #2333
renaming `any` helper to `some`, reflecting `Array::some`
Finally rid eval from fix for #2333. I feel comfortable with it now.
another refactoring for #2333
issue #2333: removed gratuitous test, refactored
fix to #2333 greatly improved, but still depends on eval :(
fixes #2333: fix prohibition of duplicate object properties
corrected some SIGINT/EOT logic in REPL
more changes to REPL autocompletion as suggested in 8dcbe54e55cda4f3f157187020ec79a6fdfdf417
CoffeeScript 1.3.3
small refactoring of 66c751be1116688662cb3c317bed48cbe292e01b
package.json: changing license URL to new github raw URL format
fixed REPL to allow streamed input from stdin
CoffeeScript 1.3.2
added bugs to package.json
adding a rel=canonical
adding a rel=canonical
removing redundant cases in lexer; thanks @satyr
reverting premature start of solution to #2306
lexer/parser: split out `null` and `undefined` from `BOOL` token
Wraps up #2211 -- addresses invocations within destructured params
Reapply the removed patch from bugfix_1183 in PR 2252.  Include a test case to show it's required.
Adding a test for #2273
adding a link to the high-rez logo
adding a link to the high-rez logo
Hidden files no longer queued for --join (fixes #2263)
Intermediate version bump to 1.3.2-pre
corrections for octal escape sequences; allows "\0" alone; see #1547
See issue #2620
fixes #2255: global leak with splatted @-params
restore proper error messages
Add some commentary.
tests for fix to #2052, f3a1f466793ede9da1fe164111d482831392270c
now it works for all of #1183. This should do it.
sart work on a bugfix, but we're not covering the exact case in issue #1183
fixes #2052: don't manually assign constructors' `name` property
comments in the REPL should have no output, not `undefined`
CoffeeScript 1.3.1 (quick bugfix for compound assignment to a global variable
fixing compound assignments to global variables. oof.
resolving merge
CoffeeScript 1.3.0
REPL once again permits indented expressions
fixes #2239: REPL didn't accept expressions that were just comments
Octal and binary literals are more appropriately converted to hex
fixes #2224: various issues related to number lexing
build on Windows - fix spawn command by calling node explicitly
Issue #2211 -- splats in destructured parameters
abb11c80d1 didn't consider objects with [[Call]]
number literal error messages: more consistent, removed pluralisation
splatted constructors returning `null` should produce the new instance
Following symlinks when setting module.paths (fixes #2175)
Rebuilding browser lib
`eval`'s `options` argument should default to `{}`, even in the browser
start with 1, then 2 for reused vars.
merging in early error for compound assignment to undeclared variables.
Making bare the default for eval in the browser (fixes #2148)
building missed commit change.
link typo
link typo
fixes #1537: ignore hidden files/directories in watched directories
added help indicator for passing arguments to scripts run with `coffee`
merging/improving @rolftimmermans fix/tests for #2007
Improve section on heregexes
Issue #2105 refined
Issue #2105
Removing tab indentation.
Whitespace clean-up.
Indentation fix.
rake task creates/installs coffeescript.syntax
Documenting default slice indexes.
OptionParser and related tests needed a cleanup
Issue #2060 cleanup
Issue #2060 Disallow uppercase radix prefixes and exponential notation
Issue #2054 "{arguments}"
fixes #2055: destructuring assignment with `new`
committing compiled command.js
Oops -- changed bell char from still-octal to hex
Changed octal to decimal for escaped bell character
Beep on all --watched compile errors
Made --beep the standard watch behaviour, and debounced it
rebuilding REPL with newest CS compiler
typo
fixes #2001: spoof a REPL readline interface to handle piped REPL input
Issue #1547 'use strict' style tweaks, cleanup, and compiled output
Issue #1547 'use strict' Python-style octal literal notation 0o777
Issue #1547 'use strict' eval and arguments use restricted
Issue #1547 'use strict' future reserved keywords as identifiers prohibited
Issue #1547 'use strict' delete operands restricted
Issue #1547 'use strict' duplicate formal parameter are prohibited
Issue #1547 'use strict' duplicate property definitions in obj literals prohibited
Issue #1547 'use strict' octal escape sequences prohibited
Issue #1547 'use strict' octal literals prohibited
Issue #1547 'use strict' tests
Merging #2033; fixes #1534
cleaned up trailing whitespace; merging @geraldalewis's #2033
adding test for #2037; should've included it in the first place
fixes #2037: line terminators are incorrectly added after herecomments
CoffeeScript.run should be able to safely omit options
#1534 class then "use strict": modified strict error condition
#1534 class then "use strict": multiple directives support
adding test for #2037; should've included it in the first place
fixes #2037: line terminators are incorrectly added after herecomments
#1534 class then "use strict": herecomments fix
CoffeeScript.run should be able to safely omit options
#1534 class then "use strict" compiled output
#1534 class then "use strict" tests
#1534 class then "use strict"
allowing capital B in binary literals; see #2021; thanks @BrendanEich
fix the precedence test so it's actually meaningful
power operator + tests
fixes #1973: redefining Array/Object constructors shouldn't break helpers
Adding test to ensure that header is disabled by default
Early return from CoffeeScript.compile when header not enabled
Rebuilding -> our JS files now include the generated header
Adding header to files compiled with command.coffee
Adding support for a header with version number to CoffeeScript.compile (#1778)
fixes #1979: add multiline support to the REPL; press Ctrl-v to activate
removing out of date Windows instructions -- nothing extra needed now.
removing out of date Windows instructions -- nothing extra needed now.
fixes #1976: minor REPL tab completion bug fixes
unnecessary
Moving rewatch to end of function for scoping (thanks, satyr)
whitespace cleanup
fixes #1966: external constructors should produce their return value
getting rid of excessive spaces after `Class.name = "Class"` assignment
literals need newlines after them
making use of slicing syntax
Removing rewatchTimer (see discussion at #1964)
Rewatching files more liberally and consistently
Freeing compilation from 250ms delay
Rewatching on every file event, be it change or rename
Removing duplicate watchErr declaration (my bad)
appeasing Jeremy: switching prefix increments out for postfix equivalent
fixes #1910: loop index should be mutable within a loop iteration and immutable between loop iterations
Seperated Books and Screencasts and added Code School course
Allowing both end-points of slices to be implicit.
Added --beep option to command, to warn user on compilation failure with --watch
Adding test case: do (x = y) -> overrides existing x value
Exiting when users try to use --watch and fs.watch is undefined
bringing back an ol' line of docco.
Amending new do test.
removing unused DO from grammar
removing unused @name
fixing the borked previous merge
merging in Matt's generated tag for coffeelint.
bumping to 1.2.1-pre
CoffeeScript 1.2.0
style in command watch
merged
Preventing compileJoins when directory events do not affect source files
More ENOENT-catching
Avoiding duplicate compileJoins on directory deletion
pushing this waypoint...
Removing remaining ENOENT throws
Limiting watched file compilation to once every 25ms
Handling all ENOENTs potentially thrown by fs.watch (hopefully)
Preventing fs.stat from throwing ENOENT errors
tweaking documentation
prepping for 1.2.0
Got --watch with directory watching and addition / removal of inner subdirectories working...
reverting the closure wrapper removal again.
Revert "reverting to 26a28abcb572eef4ba20151ab415ba2dc5632055 behaviour"
Correcting and cleaning up --join ... now it works in conjunction with --watch
style fixes to command.coffee
Code review tweaks.
Mark implicit parens generated.
Marking indentation tokens generated with helper.
Adding generated token helper function.
Delete trailing whitespace.
reverting to 26a28abcb572eef4ba20151ab415ba2dc5632055 behaviour
removing the closure-wrapping-removal optimization, because it was incorrectly formatting the code it optimized.
refactoring rewriter to make the methods read consistently.
cleaning up super assignment.
style
Adding a more comprehensive test case for the previous commit.
fixing extra newline in the prelude
reverting 63ab88
tweaking dev dependencies
fixes #1509: compile initial comments/literals outside of safety wrapper
Documentation fix: s/traverse/traverseChildren/
fixed #1858 for real now
fixes #1858: top-level returns should force safety wrapper
removed excessive spacing
fixes #1924: CoffeeScript.compile shouldn't modify options object
more correct jison requirement
jison 0.2.11 requires node v0.4 - v0.5, which in turns makes coffee-script incompatible with node v0.6
fixes #1911: remove spacing around initial skipped comments/JS
huh.
making debugger an expression.
Stop treating `debugger` statements as jumps
amending the previous test
adding a test case for throw-as-an-expression.
Reverting conclusion of #1001 -- Throw should be able to be used as part of an expression.
Revert "Closes #1001. Throw cannot be directly used as an expression with parens, but can appear as a statement in an expression."
Document fat arrow in class definitions.
Use "index" for index variable in for loop
I'd rather have a long line than an orphan.
tests for 1840
rebuilt jison parser for 1840
fixes #1840: invocations followed by prototype property access now correctly compile
1e25c9da306f38ddf7bd3c63ed7c9540b75384e0#commitcomment-719177
Merging pull req #1826
Just showing the error thrown by OptionParser rather than parsing it
On second thought, just saying 'run cake' on error rather than listing all options
Prefacing task list with the relative Cakefile path
Showing task list on error
Using console.error for errors instead of console.log
Adding 'No such option' output to parallel 'No such task' (fixes #1862)
nodes: added missing jump-guard in While::makeReturn, fixing #1850
Warning when fs.watch is unavailable, rather than throwing errors
Forgot to build on previous commit
Bumping version to 1.1.4-pre
Ignoring exception thrown when trying to re-watch a file after rename
tiny cleanup in `/src/scope.coffee`
cleaning up tab calculation in last commit
fixes #1844: bound functions in nested comprehensions
fixes #1848: line number reported as NaN in interpolation parse errors
forgot to build 11544f271737146e38a97d0371076f52949820fa
Ensuring that fs.watch duplication does not occur
"Re-fs.watching files on rename event"
update link
fixes #1832: speed up `CoffeeScript.eval` in browser script
whoops.
change_log -> changelog
updating gh-pages
CoffeeScript 1.1.3
fixing relative path to jsl.conf
removing another process.binding() private snafu
Adding updated extras/coffee-script.js
cake test: change `eq` to use egal semantics, paralleling `arrayEq`
cake test: count number of complete tests that pass, not assertions
joyent/node#1914: REPL no longer hides `undefined` results
compiling @jashkenas' last commit: f0043468a071e9569f737b09f18f0b34fcdc31b2
removing process.ARGV from command.coffee, as it is gone in 0.6.0
Added AMD support.
trying with just the .org
adding a CNAME file for github pages.
Using process.stderr in command.coffee (fixes #1798)
rebuilding lexer.js
Using console.log and console.error in command.coffee (fixes #1798)
Whoops, mergefail; corrected
Merging current master
Cleaner style.
Unindent. :-o
Neater numberToken function.
One test; viz., for binary literal.
Binary notation integers (0b100 as 4).
fixes #1774: generate safety wrapper only when necessary. awesome.
removing old changes
using NODE_DISABLE_COLORS instead of flag
adding flag to surpress color in cake output
fixes #1754: support filenames starting with `-` by using `--` arg
fixes #1752: passing POSIX-style arguments to scripts through the CLI
Improved tests for #1627.
quick fix to part of new issue in #1099:
empty regular expressions with flags still need to be compiled to /(?:)/
`unless` is useful outside of single-line statements
Adopting coco-style efficient bound functions for the common case ... but not for class/prototypes.
Add tests for conditional assignment of variable in parent scope.
Prohibiting conditional assignment of undefined variables for #1627.
fixes #1724 for heregexen
fixes #1724: regular expressions beginning with `*`
fixes #1723: operator precedence in unbounded splice compilation
fixes #1722: operator precedence in unbounded slice compilation
Upgrade jQuery in documentation from 1.4.2 to 1.6.4.
merging in the try coffeescript linking patch from Jeremy Banks, and regen-ing source. The newline patch makes a *huge* difference on the documentation page.
Issue #1714 ... broken 'in' after raw range 'for'
too many newlines after errors in the REPL
Moving [Link] button's inline style to stylesheet.
Pulled Try CoffeeScript fragment prefix into a variable, other minor improvements.
experimental change -- comments wanted. writing out helper functions and assignments as a single line, to minimize clutter.
removing the extra newline that block comments take
big whitespace / readability change. join top level block with extra newlines, and class definitions as well.
Adds [Link] button to Try CoffeeScript interface.
fixes #1699
Issue #1703, - --x
Unified error handling in the lexer.
rewriter: followed up d03d288
fixed #1299: overhauled token pairings
split out Usage section
Issue #1687. Keeping a reference to __originalDirname in Cake tasks, after Node's __dirname
Issue #1682, futher refinements to command-line help.
style tweaks for #1687
sorting options in `coffee --help`
Remove extra call to path.exists when finding Cakefile
[docs] examples of using guards and indices in array comprehensions
Check parent directories for Cakefiles. Closes #1686
Edited src/command.coffee via GitHub
#1643: Bugfix in heredoc in test for 1643
#1643: compiled JS
#1643: Remove superfluous assignable check from destructured Splats
#1643: Updated tests
#1643: Tag subpatterns in Assign#compilePatternMatch to prevent appending reference to RHS
#1643: Clean up Assign#compile and Assign#compilePatternMatch
#1643: Add unwrap method to Splat
tiny edit
build to update lib
change phrasing of watch help text
change phrasing of watch help text
change phrasing of watch help text
removed a gratuitous comma
clarify --watch option in "coffee -h" output
closes #1669; loop results are now collected in the same way as auto-`return`s are generated
fixed #1102; lexer: cleaned up `unfinished`
Adding tests for CoffeeScript.eval
Allowing eval with a sandbox, but defaulting to global context
Bumping node dependency from 0.2.5 to 0.4.0
Restoring the ability to CoffeeScript.eval code in a sandbox
Bumping node dependency to 0.4.0 (see discussion at #1661)
Taking an axe to the sandbox (see discussion at #1661)
tests for #1195: lex out semicolons before newlines and at end of program
fixes #1195: lex out semicolons before newlines and at end of program
Another attempt to fix #1580... still haven't come up with a good way to test it, though. Hopefully the third time is... the one that works.
Reloading globals after every REPL command (actually fixes #1654)
Blacklisting certain globals from REPL rather than whitelisting (fixes #1654)
tests for #1643: splatted accesses in destructuring assignments no longer create obj.key var declarations
fixes #1643: splatted accesses in destructuring assignments no longer create obj.key var declarations
Adding a link to the change log to the current version, to make it easier to see what's changed.
tests for #1591: splatted expressions in destructuring assignment must be assignable
fixes #1591: splatted expressions in destructuring assignment must be assignable
alert(html) in the heredoc example
fixes #1633: error output when using `coffee -e`
compiled src/coffee-script.coffee
fixes #1630: `in` should check indices of the right operand when it can pass a `hasOwnProperty` check for them
Clarify `--watch` option on homepage.
Resolved an issue that could occur while compiling with the --join option which would cause the compiler to silently fail with no resulting output file.
reverting stylistic change from parent commit
(probably) expressing Jeremy's intentions
tests for #1513
fixes #1513 -- top level bare obj literals now wrapped in parens for unary and exists operations
#1568, new super in a function body.
Adding a test for #1595
Issue #1595, reusing a variable in a catch leads to missing declaration.
Issue #1598 -- enabling super() calls in static functions in class bodies.
Revert "Ensure test failures get fully outputted."
clarifying Cake on the homepage.
clarifying Cake on the homepage.
Add test for static `super` calls.
Ensure test failures get fully outputted.
revised tests for #1234 thanks to @michaelficarra
revised patch for #1234; consolidated Value#push and Value#concat into Value#add; removed unnecessary INDEX_PROTO
minor enhancements to tests for #1005
finishing up fix for #1009: class @do; it's a little bit ugly, but it makes sense to do it this way
fixes #1005: invalid identifiers allowed on LHS of destructuring assignment
test for #1234
fixes #1234 ... :: now creates an intermediary "prototype" Access node before any additional property accesses
fixes #580 by `delete`ing the compiler from `require.cache` and `require`ing it again
fix the output path too
fix path to grammar file
README: corrected compilation instruction; added execution instruction
repl: allowing tab completion of an empty line and masking `__X` reserved helpers from tab completion; fixes #1583
conditional compilation update as per discussion in a5ba0c27aea0453dbe8924d5269ff1e8a403ccf3
breaking long lines created by 803a7d06e304854396216bbdf983e9eefd40a1dd
removing errant line from changelog
allowing classes to extend expressions; fixes #1482
cleaned up block comment output; fixes #1186
fixes #1100: precedence in or-test compilation of `in`
output formatting cleanup; fixes #1254: improve `when` compilation; also causes single-line, single-statement conditional bodies to sit next to their conditions
fixes #1009: classes with reserved words as determined names
avoiding `require.paths` poison pill from newer node releases in `CoffeeScript.eval`
removed some unnecessary assignment; related: #1491
moved `src/coffee-script/*.coffee` to `src` as per discussion in #1246
Jison goes to 11
rebuilding the browser js with a new Jison-generated parser.
Add uglify-js and jison as development dependencies
bumping version to 1.1.3-pre for Trevor's sake ;)
Adding books + screencasts to the homepage
CoffeeScript 1.1.2
fix another long ternary in the lib
eliminate unnecessary assignment
test for #1464 ... bound class methods now keep context
fixes issue #1464 ... bound class methods now keep context
formatting and rewording a test
check existence of this.context. Avoid build error
changed uses of the `slice` method to CS slices in `nodes.coffee`
fixed #1322; block comments no longer get out of implicitly called implicit objects
Cakefile: build:full exits unsuccessfully when tests or builds fail; test failures now print full stack trace
Replacing heredoc in test with simple string
improving test for #1492
Using string interpolation when adding extension
Issue #1470: Cleaning up logic on extension detection
Removed a garbage code in `pluckDirectCall`.
Test implementation of issue #1470.  Assuming '.coffee' extension if file not found
arranged and formatted nonContextGlobals list in REPL
Added globals to the REPL that are (for a reason currently unknown to me) not provided by `vm.Script.createContext`
fixes tab completion in the REPL
Changing sentance structure in a grammar rule explanation
Removing 'the' from the CoffeeScript Compiler for Windows link
One more minor correction to main documentation
Small typo fixes in several files.  Completed some missing documentation in nodes.coffee
Minor edits to the main documentation.  Added a reference to @alisey's CoffeeScript Compiler for Windows.
allow Ctrl-C to escape an unwanted continuation prompt
Made line continuations in the REPL much, much nicer and moved all of the REPL-specific code out of CoffeeScript.eval and into the REPL function (thanks for the suggestion, @TrevorBurnham)
fixes issue #1490 ... jsl.conf is incorrectly npmignored.
More accurately emulating node's REPL behaviour with regard to `_` assignment. Also addresses `i for i in [1..3]` regression introduced by fff4c9c672b80e51d399afe5aa10547b4897a9d2 and noticed by @satyr
output a newline before exiting REPL
fixes #1478, documentation.
improved test for #1436
improved tests for #1416, fixed accidental scope leak in test for #1420
second part of fixing #1416
added another test for #1416
fixes #1416: don't omit one 'new' when compiling 'new new'
test for #1416: don't omit one 'new' when compiling 'new new'
fixed #1436
added a test for #1436, `for` etc. should work as normal property names
subliminally promoting the use of interpolation in the documentation
allow Ctrl-C to escape an unwanted continuation prompt
Made line continuations in the REPL much, much nicer and moved all of the REPL-specific code out of CoffeeScript.eval and into the REPL function (thanks for the suggestion, @TrevorBurnham)
fixes issue #1490 ... jsl.conf is incorrectly npmignored.
More accurately emulating node's REPL behaviour with regard to `_` assignment. Also addresses `i for i in [1..3]` regression introduced by fff4c9c672b80e51d399afe5aa10547b4897a9d2 and noticed by @satyr
output a newline before exiting REPL
fixes #1478, documentation.
improved test for #1436
improved tests for #1416, fixed accidental scope leak in test for #1420
combine conditions
compileJoin should happen once after all files are read
added one more test for #1150
second part of fixing #1416
added another test for #1416
fixes #1416: don't omit one 'new' when compiling 'new new'
test for #1416: don't omit one 'new' when compiling 'new new'
Another attempt to fix #1150
fixed #1436
added a test for #1436, `for` etc. should work as normal property names
fixes #1442: javascript literals should increase line count when they contain newlines
subliminally promoting the use of interpolation in the documentation
adding regression test for #1420; also cleaned up a little trailing whitespace in the function invocation tests
fixes #1420: `(fn() ->)` by causing the `Lexer::tagParameters` method to give up looking for a parameter list when it saw a `CALL_START` token.
enhancement for fix to #1409: when compiling as an array, ranges can't have been given steps (would be a SyntaxError) ... yet
removed trailing whitespace in source files
fixes #1409: creating large ranges outside of a function body
test for #1409
REPL blank line fix
fixes #1398: comments in the REPL
Revert "fixed condext during construction of bound functions; now using native"
Revert "switched to canonical two-space indentation in __bind helper"
Revert "__bind helper: caching ctor"
__bind helper: caching ctor
switched to canonical two-space indentation in __bind helper
fixed condext during construction of bound functions; now using native Function::bind when it is available. related: #1363
hopefully the last enhancement for my #1380 fix
removing accidentally-committed `console.log`
enhancement for #1380 fix
merging @TrevorBurnham's pull request #1314, enhancing `CS.eval`; closes #1314
fixes #1390: persistence of non-enumerable global properties in the REPL
fixes #1380: `super` with reserved names
test for #1380
fixes #1372: bound class methods with reserved names
fixes #1385: property access on parenthesized number literals
merging in @fjakobs's heregex line number fix; closes #1374
fix line numbers after heregexps
cleaned up and optimized fix for #1354 (d91ccd4003fea41b5a03312662d17e8d64c7e402)
removing unimportant changes for easy pull.
merging #1353
Issue #1354, 'in' with splatted arrays.
simplifying some string interpolation in Range#compileNode
Issue #1356 ... range comprehension optimization when a step is present.
fixing implicit invocations against inline try/catch.
Issue #1364, implicit calls against control structures.
fixing over whitespace-ing from the previous commit.
Issue #1368, block comment formatting.
Updated tests for #1216 and pull #1348
fixed behavioural change accidentally introduced by #1348, thanks @satyr
reverting tests from @geraldalewis's fix for #1216
rebuilding browser/source
Never return from a constructor.
CoffeeScript 1.1.1
fixed name of simple destructuring test.
adding another failing test case related to #1182
fixed 2nd scoping problem
Removed extra index variable left from code thrash
variadic arguments breaking out of scope (test)
some cleanup, renaming temporary variable from `_by` to `_step`
adding failing test case for #1182 execution order bug mentioned by @satyr
slightly improved fix for #1182 and #1313
issues #1313 and #1182: better class compilation in presence of externally defined constructors and inheritence via `extends`. Thanks to @stephank for the suggested approach.
command: JSLint => JavaScript Lint
`x = {} if x` -> `x and= {}`, per Michael's suggestion
Renaming `root` to `mainModule` in `run` method
Simpler method of getting the root module
fixing changelog -- it was a regression from an earlier commit, not a true fix.
s/process.mainModule/require.main
coffee-script 1.1.0
showing line number information for failed tests.
making end implicit tokens generated
fixing test.html
Using process.mainModule.filename instead of passing __filename
Making `process.execPath` point to `coffee` when running .coffee files
reintroducing a variant of kit's in-order script loading fix.
reverted @kitgoncharov's commits that broke the browser runner.
fixing unfoldSoak performance my memoizing. #1033
Updating README and website with -g instructions.
merging #1303 ... setting process.argv[0] to coffee for coffee's run.
slightly less sketchy fix for #1106.
Updated for npm 1.0: the -g option installs to the global npm bin directory.
removed "globals" option of CoffeeScript.compile and enhanced fix from previous commits
Better fixes for problem mentioned in last 3 commits. Also adds `_` special value (as in node's REPL) that always holds return value of last executed expression. Finally, fixes #1109
Recently discussed problem has been understood. Adding relevant values to the global scope upon `eval` in REPL.
Setting process.argv[0] to 'coffee' in the REPL (aesthetic)
Setting process.argv[0] to 'coffee' in 'coffee foo.coffee'
Making the naming of the --join'd coffeescript mandatory. Issue #1076.
Issue #1006, infinite loop in addImplicitParentheses.
#1106 test case: making sure `__proto__` exists in case v8 ever removes it
Issue #1182 -- subclasses with external constructor functions.
fixes #1106; __proto__ compilation
test for #1106
Edited documentation/index.html.erb via GitHub
Typo error, s/synax/syntax
Issue #1272 documentation
removing erroneous tabs from nodes.coffee.
#1256, documentation typo
expanding on the sentence that talks about standalone extends ... Issue #1258
Issue #1262, print filename in error messages for require module scripts.
merging in kit's in-order execution patch.
renaming wordy test titles.
Issue #1294, throw the error for a bad symlink reference when compiling a file.
be more consistent about ===
be consistent about triple-equals-equality.
merging issue #1127
Removing resources section from the homepage, in favor of linking to the Wiki. #1137
merging fix for #1124
Enforce script execution order in `browser.coffee`.
merging in #1268 ... michaelficarra's colored REPL.
merging in Josh's patch for Node 0.4.x module lookup changes.
full revert of 4ce374be25f9d4c0698288bd65f46d24ad707712
fixes #1274: `{}=a()` and `[]=a()` compile to `false` instead of `a()`
regression tests for #1274
improved fix for #1266
disabling colours for win32 and in presence of NODE_DISABLE_COLORS environment variable
pretty node-like output in the REPL
unnecessarily strict {in,}equality in existence checks
added a test
fixes #1124 (and uglifies generated JS)
rebuilt parser with Jison 0.2.4
enhanced tests for #1099 fix
fixes #1157: when compiling multiple scripts, compile them if at least one of them isn't empty
added a test (issue #1099)
fixes bug mentioned by @satyr in #1108
fixes #1099: instead of nothing, compile to false
Assign module.paths for node_module loading
improved range compilation
Adding CoffeeScript.mode
Bind not required for evalJS.
Use the newer Node.js binding for 'vm'.
missing space.
merging stable
merging jcoglan's splat declaration patch.
merged stable
stop trimming all trailing whitespace.
test-ified function_invocation
test-ified control_flow
test-ified comprehensions.coffee
testified compilation.coffee, removed empty command.coffee
removing empty test file for cake.coffee
continuing with the ol' refactorTests
removing over-hash-comment
fixes #1168: leading floating point suppresses newline (thanks, satyr)
test for #1168
Closes #1001. Throw cannot be directly used as an expression with parens, but can appear as a statement in an expression.
Closes #1082. Puts back use of function calls in parameter lists.
stricter array splat tests.
adding an array splat test.
merging in aeosynth's tweaks to package.json
add repository to package.json
add homepage to package.json
Console keyboard shortcuts
Disable spellcheck in the code editor.
merging stable
Setting `process.argv[1]` to equal the filename of the script being run (issue 1087)
Bumping version to 1.0.2-pre
#1085, adding CoffeeScript.mode to the docs.
#1085, adding CoffeeScript.mode to the docs.
Merging in stable at 1.0.1
CoffeeScript 1.0.1
Backporting the REPL fix for Node 0.3.7 and Coffee 1.0-stable
Issue #1071, parenthesizing undefined literals when accessed.
Issue #870 ... placeholders in destructuring assignment.
Issue #997 ... Maloptimized break suppression.
resolved merge
Issue #875 -- console.log in the REPL
changed 'when' example.
documenting 'when', a bit.
fixing version number to 1.1.0-pre ... to make it installable with npm.
Closes #1068. Don't know why CALL_START was in that file.
Swapping == with <, just in case.
Add backwards compatibility for older readline
Replace stdio with stdin/stdout pair for readline
Closes #973. New is more careful around the do construct.
Closes #970. Statements that use new are wrapped in parens to avoid the closure being used.
Closes #971. Existensial slices now supported.
I suppose there's no reason to ever call a prototype like a function.
Closes #1064. Dot accesses force the next token to be an identifier.
First draft of fixing shorthand objects mixed with regulars within arrays.
toTimeString -> toLocaleTimeString
Merging in donjones' implicit object fix, hooray.
merging in chetan51's Node 0.2.5 compatibility patch. Homebrew timestamps.
Making #1050 a syntax error.
Tests for call parameters after implicit objects
Check for invalid implicit values
Removed dependency on the util module in the coffee source files
Removed dependency on util to extend support to node v0.2.5
No assignment shortcut in implicit braces
Allowing an environment variable of MINIFY=false to disable minification of the build:browser cake task.
A bit more explanation of what's actually going on with build:browser
Implemented continuable lines in the REPL. Use a trailing slash. Multiline functions are now possible.
First implementation of autocomplete.
trailing comment.
Expressions -> Block
Issue #1038 ... optimize away trailing return / and return undefined
Leave out the 'Available Options' bit.
Merging in 1035 fix. fileName -> filename ... a bit of refactoring.
bump version to 1.1-pre
Decoupling --require flag processing from file compilation
#1026
Issue #1024.
Adding jEdit highlighter.
Issue #1027 ... leading indentation.
Removing Roast (deleted)
obeying coffeescript convention of a single space after every comma
mismatched issue number in test case for #1012
improving/minimizing the provided test cases for #1014
fix for issue 1014 - arguments object in ranged array - apply(this,arguments) instead of call(this)
fix for #1011
tests for #1011
merging in refactorTests.
adding tests for trailing commas and semicolons
removed `global ?= window` hack by actually giving tests a global reference to global
made sure all files were properly commented
finished reorganizing test suite
joliss, vertical-align top
final waypoint; remaining files to be sorted:   * _test_existence.coffee   * _test_pattern_matching.coffee
test reorganization waypoint 3
Consistently using == instead of === in conjunction with typeof.
test reorganization waypoint #2
Basic REPL autocomplete.
test reorganization waypoint
adding new (empty) classifications for tests
Issue #985.
Issue #986 ... Unicode identifiers.
coffee-script/test$ for file in .; do git mv "$file" "_$file"; done
New favicon.ico
ln -sfn ... part of Issue #971
Issue #980 ... improperly truncated --help.
Bumping to version 1.0.1-pre
CoffeeScript 1.0.0
Documenting and testing 'do'
Scoped comprehensions are back out, Do is back in.
reserving __bind and __indexOf
disallowing --watch and --join together for the time being.
Adding a test for the previous commit.
splice literals should evaluate to their right hand side, like any other type of assignment.
more work on site, down to arrays and objects.
splicing to the end of a one-time expression.
documentation waypoint
Documentation tweaks, up to Language Reference.
Issue #964. Super should trigger an implicit call.
slightly less parentheticals.
tagging more nodes as keys.
fixing mentionsArgs for accesses.
Remove seenFor in favor of a safe scanLineBack.
safer paren-wrapping for closures.
reinstating makeReturn for statement literals.
switch with debugger in a case should still break, afterwards.
Comprehensions over break and continue
forgot to inherit For::jumps from While::jumps
more docs... scoped loops, --join.
trailing file, uncompiled.
fixing test_literals
First draft of --join.
fixing arrayEq and arrayEqual in test.html
Updating test.html
Adding a comprehension/jump test.
Removed the last bits of pureStatements
removing containsPureStatement
waypoint
starting to move over isPureStatement to Coco style jumps()
last logo tweak (I promise)
change logo
just finishing up ranges_slices_and_splices.coffee
intro.
trying to shorten the table of contents.
sprucing up the error messages.
blackening the logo.
The load button now includes the snippet from the 'run' button, at the end (homepage)
Accurate positioning of the repl_bridge, hopefully.
new logo, credit to rampall.
Fiddling with For#compileNode.
Fiddling with For#compileNode.
Some Try CoffeeScript tweaks ... scrolling left-hand, opt-out load buttons, correct cursor.
being stricter about body-less scoped loops.
some cleanups for hasPure
Allowing the fat arrow to be used in scoped loops.
Updating documentation for has own key, value
Removing 'do', in favor of a trailing ->
first re-implementation of 'do'
Issue #959 (and countless others) Removing the  loop-block-scoped magic for once and for all.
Adding notes about Ubuntu and Windows installation.
Congo -> coffee-mongo
more existential.
drying up compileSplice
Issue #943 -- splices with expressions.
Issue #958. Removing UNLESS tokens to make them just inverted IFs.
More tweaks to Slice#compileNode
tweaks to Slice#compileNode
rebuilt parser with Jison 0.2.0
utils -> util (again)
Add additional test cases for implicit object calls
Exclude docs, examples, and tests from npm package
Take out object call rewriter condition
moving global identity function back into just the files in which it is used
removing start from balancedString.
updated comment for arrayEqual function, mentioning that it tests for functional equivalence
changed arrayEqual to arrayEq, added global identity function `id`
unterminated -> missing.
unterminated -> missing.
moving splats.coffee back to test_splats.coffee while it's in development
#923 ... correct interpolation.
1.0.0-pre, that is.
begun working on refactoring test_splats.coffee
Adding 'by' to the documentation.
Starting to use development versions. This one is '1.0-pre'
Issue #948. A plucked direct call should not have shared scope. (kinda defeats the whole point.)
Issue #910. Adding support for a --nodejs flag to forward arguments.
added --node flag for passing options through directly to node
bugfix for previous fix to #930 and added (almost) all tests to ranges_slices_and_splices.coffee
using `9e9` over `1/0` for compatibility
Pulling out a lastNonComment method.
fixing trailing herecomments with 'break'
finished converting tests to newer, cleaner format in test_ranges_slices_and_splices.coffee, just need to add some new ones
crap, forgot to remove a piece of temporary code
overhaul of last fix for #930, much better this time
refactored test_if.coffee, renamed to conditionals.coffee
changed occurrences of deepEqual to new, self-defined arrayEqual for recursively walking arrays and testing if their values are equal
tagged -> stable
pulling jQuery in locally, rebuilding docs with variable scope patch
Pulling in variable declarations closer to inner scope (after Coco).
forgot to rename test_helpers.coffee to helpers.coffee
Refactored test_helpers.coffee. Added now-needed deepEqual to browser test page; warning: was unable to test it, so it might be completely broken!
CoffeeScript.helpers.count now handles empty strings properly instead of going into an infinite loop
using deepEqual where I would have like to before, if I had known about it
minor enhancements to test/exception_handling.coffee
fixed error introduced when `testingBrowser` global was added to cakefile and test/importing.coffee. `testingBrowser` did not exist when running the test suite through cake:test.
fixing some site bugs.
Bumping site.
just fixing a single test in test_functions.coffee for now, so I don't forget my suggested fix
added try-catch around script eval so that errors that are NOT inside `test` calls (or syntax errors) are caught, and the test suite can continue on
prettifying coffeescript.org, part 3. Next up, Try CoffeeScript
prettifying coffeescript.org, part 2
first round of prettifications to coffeescript.org
refactored test_regexps.coffee
refactored test_importing.coffee
Merging in MichaelFicarra's refactorTests branch.
Adding an existential infix operator example.
updated comments.coffee to make use of new micro-framework
Issue #853. Normalizing values of ARGV and argv with Node.js
updated all completed test files except comments.coffee to the new testing mini-framework
a little extra enhancement to cake test
majorly enhanced test output
LEVEL_PAREN -> LEVEL_LIST
refactored test_try_catch.coffee
merging in 909
consistency: eq(expected,actual), formatting, etc.
refactored test_comments.coffee
fixes (temporarily) issue #908; line 1232 of src/nodes.coffee still needs a rewrite though
mention dynakey removal in the changelog
CoffeeScript 0.9.6
no-op.
refactoring Scope.
rebuilding browser coffee-script.js ... all tests pass.
Issue #901 ... allow constructor functions to maintain their position in the class body.
Issue #897 ... fixed leaking direct-call-plucked comprehension variables, due to shared scope.
utils -> util.
Issue #887 and #893. Adding timestamps to --watch --compile.
adding newlines after error stacktrace in REPL.
Adding warning about accidentally-comprehended-functions. Issue #896.
Issue #894: Strange interaction between class instantiation and splats
fix for bug introduced in 63cbb643
test for bug introduced in 63cbb643
simplifying generated output for common-case splices.
typo
redocumenting slices/splices ... issue #833
refactored test_break.coffee
refactored test_assignment.coffee
made reserved words available as CoffeeScript.RESERVED
using nonces more where applicable, also added tests for default arguments
refactored test_arguments.coffee
test_operations: removed the top-level closures that symbolized sections
test_operations: using `eq` instead of `ok` wherever possible, as per satyr's suggestion
refactored test_operations.coffee
style tweaks to previous patch.
Chained comparisons now properly apply DeMorgan's Laws. I couldn't believe there wasn't a test to remind me to toggle the {dis,con}junctions. Added that test.
Finally got `!==` and `===` back to inverting again (instead of wrapping in `!()`)
Issue #891: cannot safely invert `<` and `>` to `>=` and `<=` (or the other way around). Proper fix this time.
Reverted previous change to what was believed to be an errant test case. Also added a test for NaN safety
fix for #891: incorrect inversion of chained comparisons
added test for #891: incorrect inversion of chained comparisons; fixed a faulty test case in test/test_switch.coffee
Adding precedence change note to changelog
Coco 38aa762: rewriter: made addImplicitBraces consume multiple leading comments
disallow index mentions for range loops.
Issue #856. Invert
Issue #860. Nested classes.
Issue #878. Namespaced classes should not leak their function name.
Removing dynamic keys from objects.
reverting Scope#temporary simplification.
whitespace
console.{log,warn} → print{Line,Warn}
Removing unused garbage collection from Scope.
nested shared scopes don't clobber variables.
fixes #855; fix partially inspired by satyr/coco 3e37cf32
adding tests for #855
Updating rake task to pull version number and date.
Adding the coffee-script-source gem publisher to the Rakefile.
CoffeeScript 0.9.5
Switching default arguments to use an if instead of an and, more documentation.
removing some extra parens.
continuing to document the homepage for 0.9.5 ... removing an optimization for local variables within loops.
adding Lucida Sans Unicode back in.
tweaking coffeescript.org styles
preparing documentation for 0.9.5
Updating examples for 0.9.5
Revert "Coco 5622aef: grammar: POST_IF now has the same precedence as FOR/WHILE, making  work as expected"
Coco 5622aef: grammar: POST_IF now has the same precedence as FOR/WHILE, making  work as expected
Coco 9a917bb: nodes: removed NUMBER
Coco 16dcb4a: parenthesized expressions can now be indented
Coco ce2d08a: removed _argN temporaries for readability/consistency
slight reformats to cake bench
Coco f10291f: parens can now take a sequence of expressions: a = (b; c)
Coco ecd6aa4: Accessor -> Access
reordering __extends. Issue #848
Issue #843. If a for-body ends in a pure-statement, no need to try and return results.
Slice and Splice tests are back on master.
All tests passing again.
making empty loops compile newlineless
removing an accidental double-method
Using pluckDirectCalls again
CoffeeScript lints cleanly again.
first draft of range literals back...
rebuilding source docs with new version of Docco.
"cake bench" now shows total time spent
rewrote "cake bench" to time per parsing stage
rewrote "cake bench" to see more consistent results
"sudo npm" -> "npm". npm calls "sudo npm"ing "HOLY COW NOT RECOMMENDED!!"
coco fd028a0: closes #13; leading comments/literals are now placed before variable declarations
coco c6cf38a: lexer: refactored @balancedString
coco: cc71308 (partial) break continue debugger -> STATEMENT
coco 31ad9f0: nodes: made Op::invert more accurate
fixing Lexer#ASSIGNED
constructor: prefix is back for classes. punto.
coco 63d607f: made deep destructuring compile nicer
coco 19474b4: nodes: removed Base::collectChildren
making levels start at one.
moving up constructor definitions.
coco 02ee77c: nodes: fixed parenthesization in Op::compileNode
coco 2419207: coffee#840: fixed post-for precedence
removing an unused rule in Root.
coco 7222551: crushed __bind
done refactoring Class for now...
further refactors to Class
waypoint: part way through refactoring Class
adding back '@static: value' syntax for classes
Back to naked constructors.
Building with latest version of Jison.
Putting 'constructor' back. Improving constructor definitions.
merging in master
coco c39edf: braceless objects can now have trailing herecomments
removing extended in favor of static method inheritance.
merge
first draft of metaprogramming in class defn's.
dynakeys: work again on JScript
Added back instance-bound functions to classes ... all tests pass again.
a little further with the tests
a little further with the tests
resolving merge
first draft of coco's executable class bodies ... cleanups and tests to follow.
dynakeys: work again on JScript
switching to UglifyJS for browser version of CoffeeScript.
coco 8a8cc53: meta-heregex
better slash-w.
Adding IDENTIFIER and STRING to NOT_SPACED_REGEX
Hewing closer to JS' syntactic resynchronization for regexp lexing.
making REGEXP a bit stricter.
coco 03a9ac0: made tab characters consistent.
Revert "coco b8039b9: merged @closeOpenCalls and @closeOpenIndexes into @closeOpenPairs"
it's attr, not css.
fixed a bug where postfix `?` was incorrectly unwrapping its operand
coco b615379: optimized @ensureBalance
coco b8039b9: merged @closeOpenCalls and @closeOpenIndexes into @closeOpenPairs
coco 98271e6: made 'extends' chainable
coco 607fded: reinforced Op::INVERSIONS
_result -> _results
coco e8563db: tiny optimizations
combination of satyr's three comment patches ... comments are now statements, not expressions...
Remove trailing whitespace from README.
coco b82de20: removed Base::idt
coco dc8945c: less ternaries, more returns-from-ifs. More readable.
coco a503190 ... made postfix  invertible
fixing coffee -s ... (jannehietamaki)
Do not pass invalid filename 'stdio' to compileScript when compiling from stdin because it breaks fs.realpathSync at run.
lexer refactors
removing unused utilities.js
round 2, light refactors.
light refactors + tweaks
first draft of safe range comprehensions, upwards and downwards.
loosening the restrictions on functions that can be lifted out -- more tests.
Adding back in the closed-comprehensions tests.
fixing unsafe unwrapAll in previous commit.
First draft at loop block scoping again ... works for functions that mention 'this'
satyr 4e39e2e -- efficient closures in loops -- pulling them out.
nodes: filled in missing LEVEL_* in In::compile*Test
rewriter: no longer tries to include dynamic keys into braceless objects
modified satyr: allowed temporary variables to share names with ones on upper scopes
BY now closes implicit calls.
tweak to parser.lexer
modified satyr -- when now closes implicit calls.
modified satyr -- made temp vars be declared later.
satyr 1612b04 ... enabled break/continue in comprehensions.
safer splats with __slice where necessary.
More indentation, less one-liners.
satyr commit b2cf91 ... no more @tags
not-or to is-and ... positive side.
reverting ?= optimization, for the repl's sake.
Using default arguments in one more spot.
Now that ?= is optimized, reverting the expansion.
Optimizing default arguments and existential assignment.
reindenting grammar.coffee to the shared column, as much as possible.
merging satyr/defarg
merging in Trevor's --no-wrap deprecation
dynakeys: optimized and fixed a bug in caching
fixed a bug that compound assignments were declaring variables
tweaks to eval-fix
Accepting --no-wrap, with a warning
Removing the last Jison hack. (Jison 0.1.25)
CoffeeScript now compiled 'undefined' as 'void 0'
Issue #801 -- Empty catch statements immediately preceding outdents.
Removing one of the Jison patches, no longer needed with 0.1.24
merging in parity checks.
Patching Jison (again) to fix 'Unexpected 1' -> 'Unexpected EOF'
destructuring within arguments is now allowed as in SpiderMonkey
good practice for parity checks
Revert "aligned up some ifelses using leading `then`"
optimized splatting assignment
made `[a..., b...] = c` throw syntax error
defarg: `(options = {})` where possible
grammar: refactored Param
defarg: removed Splat::compileParam in favor of using the normal array destructuring against `arguments`
implemented default arguments
removed a redundancy in splatted assignment
lexer: removed unused UNARY tokens
test: merged "expressions" into "chaining" and "returns"
aligned up some ifelses using leading `then`
leading `then` is now valid
tidied up formatting I broke at ad79e142
refactored operator parsing
dynakeys: `{(x), y}` now compiles correctly
rewriter: `(a): (b): (c)` is now allowed
rewriter: `a: b: c` is now valid
nodes: @soakNode -> @soak
removed extra lines from the compilation of trailing `then` with `if`/`switch`
grammar: improved formatting consistency, using single quotes unless interpolated and wrapping lines that are too long
Comments are statements also, not just pure statements.
replacing mistakenly-deleted nodes.coffee
First draft of recompiling examples for 0.9.9
Using a typeof check in scope.
All examples now compile and lint cleanly.
top-level examples now compile and lint cleanly.
Removing breaks from the last switch case, and just disabling the lint warning instead.
Adding break to default switch clauses to pass lint.
Working towards new versions of the examples.
Removing extraneous semicolon, adding back in final break -- src now lints cleanly.
Removing/Reverting do ->
nodes: reformatted
nodes: removed Value.wrap
nodes: added Base::unwrapAll
assigning to bizarre things like `[a()] = b` now causes syntax error
optimized `switch` compilation
removing forgotten print's
invalid destructuring assignments like `{0} = x` now causes syntax error
Adding xqjs, CUP, and Congo to the resources section.
Expanding __filename and __dirname when running with the coffee command -- Issue #771
Switching parenthesized side in comprehensions.
further reduce predecence levels.
Issue #795 -- clean up low precedence levels
Removing -> and => from precendece-having operators.
Removing duplicate 'UNLESS'
typo
removed extra lines from trailing `then` compilations
Removing the mixed-in sys/util module. Switching from 'puts' to console.log
nodes: `continue while ..` over `while .. then`
ObjectLiteral -> Obj, ArrayLiteral -> Arr
Merging in dynakeys
rebuilt parser and rewrote the asserts wrapping loop in Cakefile using `do =>`
Altered bound functions with do to just use call(this) rather than binding.
Implemented rescoping with the do keyword.
Removing unnecessary parens and removing the sudo recommendation for npm in the readme.
dynakeys: can now do destructuring assignments
dynakeys: can now be braceless
Wrapping only the last line of comprehensions, allowing pure statements anywhere in between.
786: implemented dynamic object keys
Correcting version regex.
node 0.3 compliance
grammar: removed a remnant of Slice
removed an extra garbage
added/fixed/tweaked a few tests and merged test_compound_assignment into test_assignment
quit using __temp__ as placeholder name for anon class
merged == and != into COMPARE
Easing leniency on pure statements.
resolving merge conflict.
Reverting LEVEL object.
783: corrected chained comparison precedence
Making the LEVEL constants a bit more readable.
Revert "Passing the arguments object directly when generating a closure."
fixed a regression that for-in was failing to cache the source value
Passing the arguments object directly when generating a closure.
Spacing only + and - and only in a row.
Spacing multiple operators.
nodes: refactored and removed the notion of `o.top` in favor of LVL_TOP
nodes: introduced a notion of levels that streamlines parenthesizations
refactored and added a test for a8da321
fixed a bug where multiple trailing comments prevented returnification
nodes: removed some redundancies and unused methods
reverted "lexer: simplified tokenizers' responsibility" with magic numbers removed
Revert "lexer: simplified tokenizers' responsibility"
lexer: simplified tokenizers' responsibility
normalizing loop declarations towards common JS practice.
merging the range-killer to master
removed extra parens around simple values
Removing empty parens from the grammar.
refactored loop variable caching
implemented for-from-to and removed dotted ranges
fixed a bug where `in` malfunctioned in commaed lists
putting back arguments.
fixed/removed broken/redundant tests
indentation
tweaks to scope
Proper testing, this time.
Operators now respect new lines as being spaced.
made In node invertible
removed extra parens from `in`/`return` compilations
removed extra parens from array/index compilations
removed extra parens from soak compilations
removed extra parens from compilations with assignments or conditional operators
nodes: refactored to reduce parens
scope: refactored
Removing the utterly pointless splice in scope for the much more reasonable assignment.
resolving merge conflict.
let's try to merge these indexOf patches.
removed helpers.{indexOf,include} in favor of `in` operator
inArray -> indexOf ...
going back to the Closure Compiler.
compound assignments are now represented as Assign nodes (rather than Op) and have the same precedence as `=`
Restoring garbage collection.
Adjusting refactor to better emulate map.
Refactoring scope to use an array instead of an object, to make the IE bugfix significantly tidier.
Comment fix.
Reversing evaluation order of __inArray to reflect the ordering of the in operator.
One character fix, for the sake of consistency.
Tidying inArray utility.
Avoids unnecessary temporary in comprehensions with pure statements in them.
Whitespace fix for unstepPart (thanks, Tesco)
In `compileScripts`, run `base` through `path.join`.
Added the __inArray helper to clean up code and speed up searches.
Report errors when writing files in `coffee`.
Removing accidental superfluous temp variables.
Just catch alls for inner scoping now.
fixing resig link
lexer: made REGEX more efficient
nodes: Value.unfoldSoak -> If.unfoldSoak
nodes: soaking Call now converts to If using the same logic as soaking Accessor
765: -b/--bare <- --no-wrap
test case for #768
fixing #768, preserving execution order of `in` arguments when compiled to an `or`.
quit using sp?licing ranges
stripped a line from __extends
spelling tweak to index.html
simplified splatting `new` compilation
764: made boolean/number/regex indexable
browser: exposed `require` for debugging
lexer: reorganized JS_KEYWORDS
nodes: object literals are now parenthesized based on `@tags.front` (which indicates if the node leads an expression statement), fixing #542
test.html: string_interpolation -> strings
stripped out strings/regexes from test_literals; test_string_interpolation is now test_string
merged test_blocks into test_functions
destructuring assignment no longer uses a temporary variable for simple LHS
merging in the browser test suite.
followup to #717; made `new =>` actually work
added test.html that runs most of test/*.coffee in browsers
merging in sstephenson's test:browser
NEXT_ELLPSIS.test
Remove the window hack in test:browser.
tweaking compileWithDeclarations
Add test:browser task for running the test suite against the merged browser script.
switching to YUI compressor for the time being... ticket #575
rebuilding browser.js
rebuilding lexer
fixed a bug where `while` condition was compiling as statement
lexer: fixed a regression where assignmentError wasn't fired
grouped TRUE/FALSE/NULL into BOOL
grammar: removed extra arrays
fixed misdentation in `a?.b = c`
nodes: no longer uses helpers.indexOf
made `until` less parenful as well
`noWrap: true` -> `wrap: false`
Issue #748 -- trailing reserved idenitifer.
#749 -- adding CoffeeApp mention
lexer: made REGEX more accurate
soak accesses no longer consume corresponding operators
coffee-script: `tokens`/`nodes` can now take options as well
rewriter: detectEnd no longer passes `undefined` as token, fixing #750
fixing issue #745 ... precedence of huh operator.
removed YES/NO/ON/OFF from rewriter/parser
made `unless` less parenfull
quit caching `v` in `for all k of v`
Parenthetical -> Parens
nodes: removed `literal` helper
reenabled stricter caching on `For` compilation as well as reduced a line from it
Removed the silly 'Node' suffix from everything.
empty returns no longer return null
Re-enabling garbage collection of tempvars, only at function boundaries.
optimizing comprehensions source references
merge conflict
nodes: re{name,formatt}ed things
rebuilding documentation
whitespace
lexer now distinguishes between IN/OF and FORIN/FOROF to help grammar, fixing #737
nagated relational operators are now grouped into NOT_RELATED, fixing #720
lexer: had some aligning fun
s/lookahead/non-capturing
removing dollar-prefixed local vars (let's keep 'em for globals only)
testing issue 584
Merging in heregexes
redo-ing nodes.coffee with named classes.
First draft of named classes.
follow-up to d1bca636; fixed unrolling of the single case (`{@a} = o` -> `@a = o.a`)
All classes now named.
tweaking the previous commit's test.
tweaking the previous commit's test.
Enchancing pattern matching with @vars ... issue #721
fixing @property = value typo.
made `catch` optional
fixed over-escaping in here documents and addressed Stan's comments
disabled interpolations in normal regexes
heregex: now allows bare slashes and empty body
first stub at heregex
647: fixed quote/newline escaping in here documents
`[x] = [y] = [1]` works again
refactored rewriter
`[v] = a` now compiles to `v = a[0]`
fixed a regression where destructuring `for` miscompiles
conditionals with no alternative now evaluate to 'undefined' instead of 'null'
nodes: removed `o.chainRoot` which went unused
ensured `arguments` in each scope
removed remnant of 341f511b
made ForNode avoid needless cachings
#733: streamlined soak compilations and improved reference cachings
made --nodes output soak-aware
nodes: made ExistenceNode omit `typeof` for known variables
nodes: added THIS
Correcting contributor link in readme
Can't rely on Array.isArray ...
Turning off a couple more warnings we'd like to ignore in JavaScriptLint.
#713: destructuring assignment is no longer statement and correctly returns RHS value
Added a (failing) test that reproduces #723.
added `last` to helpers
Issue #706 -- enchancing empty anonymous classes.
linking to *all* the contributors in the readme.
merging in satyr's fix for #653
rebuilt the site with some IE fixes.
Removing 'where' from COFFEE_KEYWORDS, and adding a missing equals sign to a test.
made nodes cache more aggressively, fixing #653
updated tests toward fixing #653
"cake test" now wraps all of the "assert" module to update test counts
made --nodes output prettier
unary-new: built parser and `new =>` now works
unary-new: merged master
Merging in satyr's rewrite-lexer.coffee
adding a cake:bench task
Merging in satyr's helpers-refactor
lexer: enabled multiline interpolations
lexer: unrolled @extractNextToken/@match
lexer: more regexes fixes
lexer: fixed ASSIGNED
unary-new: added tests
(experimental) made `new` a unary operator
lexer: fixed broken logics (due to f051d088) and a snakecased variable
helpers: now directly exported
helpers: refactored and fixed comments
helpers: added test
added a test for JS literal
made simple strings shortcut
lexer: improved logics
lexer: improved consistency, preferring `charAt`, `slice` and single quotes
lexer: optimized regexes
merging in satyr/for-of-diet
merging Tim's filename branch.
Support for older revisions of Node.js for CoffeeScript.run()
Remove (compiled) from filenames, to keep __filename accurate
Heredoc indentation detector ignores blank lines without trailing whitespace.
removing the ability to force an if/else chain to be compiled as a statement. Ternaries will now be used as much as possible.
CoffeeScript 0.9.4
removed useless property accesses from for-of
Using the Array spaces trick to generate padding and indentation.
fixing up block comment indentation boondoggle.
Tweaks to browser.coffee
made browser.coffee override Node dependent exported methods
merged in satyr's leakless branch.
removed browser specific hacks from src/* by making "rake browser" provide fake `require` and `exports`
made wrapper function keep current `this`
removed global dependency from grammer
Re-compiling core with new temporary variable names, all tests pass.
Using old temporary variable name generation for single-letter types (e.g., i, j, k, and so on).
commenting out the failing test for the time being, to be fixed later.
fixing herecomment newlines.
Cleaner stack traces.
hacking around Jison patch to remove module dependency.
merging in Tim's registerExtension fix for the latest Node master.
Merging in Stan's temporary_junk improvements.
tweaking compiled tempvar names to satisfaction.
Add require.extensions support.
fix invalid testcase
Updating name for cached length temporary variables to '_length', 'length2', and so on.
Allowing temporary variables to be reused.
merging in Stan's temporary variables.
First attempt at allowing temporary variables to be reused.
Don't store `tempVars` as we can get the next available one from scope.
Refactoring temporary name generation in a separate method, no functional changes.
Part of previous commit: updating how temporary variables are generated. We no longer need to store the name of the last generated variable, instead we store the index.
Removing code added during the migration. `freeVariable(..)` is called with a `type` at all times.
Re-compiling core with new changes. All tests pass.
Updating nodes.coffee to make use of new temporary variables code generators.
Added generator for custom free variable types, e.g., '_cache', '_cache2', and so on.
s/tempVars/tempVars.general/ This should allow us to store more than one category of temporary variables.
fixing static class properties that are implicit objects.
tweak to block indentation test.
Merging in Stephank's fix for #692.
documenting 'invoke' in Cakefiles a little bit.
simpler default Try CoffeeScript scriptlet.
silencing another JavaScriptLint extraneous warning.
CoffeeScript 0.9.3
removing now-unused logic from the IfNode, that used to handle switch statements.
First draft of real switch statements for CoffeeScript switch statements.
moving addImplicitBraces and addImplicitParentheses next to each other ... perhaps they should interleave.
better error for external super() call.
simplifying previous commit
running cacheindexes on soaks that need them.
Issue #680. @::prop versus this::prop, fixed lexing regex.
using @containsType.
Partial fix for 653.
Actually caching the splatted constructor this time.
Ensuring constructors invoked with splats behave correctly, along with caching.
Adding Roast to the Resources.
Complexifying the indebt test, one more level.
Introducing the notion of 'indebt' to mirror 'outdebt', but for suppressed indentation with trailing operators etc. Issue #639.
Issue #665. Recompile on --watch when file changes size, or mtime changes.
throwing errs from fs.readFile in watch mode.
Adding a test for Issue #669
Issue #670. 'THIS' tokens should trigger an implicit call.
Bad variable name clobbers correct path in `compile` event.
simplifying RangeNode grammar a bit.
separate out browser.coffee from the core coffee-script module.
fix broken simplenum regex for rangenodes...
fixing broken doc link (satyr)
Adding unmatched 'then' to the list of things that closes a single-line implicit call early. Issue #611.
re-enabling the mis-dented call case. Issue #657
Merging in Tesco and rofrankel's soaks for function calls. A soaked check that fails will return undefined.
Treat 'debugger' as a pure-statement keyword, not and identifier.
built Tesco's fix for function soaks
added some tests for function soak
Wrapping existence tests on functions.
Existence checks on functions now supported.
Existence functions now parsing.
CoffeeScript 0.9.2
Issue #641. Rename __superClass__ to __super__
more tweaks and futzes to block comments.
more tweaks to the herecomment regex.
Issue #572. Flexible JavaScript block comments, compatible with JSDoc, YUI-compressor, and Google Closure compiler preservation syntax.
updating package.json for newer NPM.
Revert "Issue #619. 'new' operator misbehavior."
Issue #619. 'new' operator misbehavior.
Issue #572. Block comments now compile to // for aesthetic reasons.
Issue #633. 'not instanceof'
Updating Underscore to 1.1.0, fixing a hasOwnProperty glitch in Scope, and a double-semicolon bug in ParentheticalNode.
Updating contributors in README.
Using unbounded ranges in a couple spots in the compiler.
Issue #621. Added the ability to leave the start and end index off of arrays. list[5..] is now valid CoffeeScript, slicing to the end of the array.
Disallowing Splats outside of ParamLists and ArgLists ... where they belong. This is in anticipation of the next commit...
Adding a test for issue #631.
Issue #626. Making the isInvertible check a little stricter.
allowing empty parens.
removed noWrap (setTimeout evaluates on global)
Enabling bound functions as static members of classes... Issue #627
enabled remote scripts in browsers
a touch of safety from trailing catches falling off the end of the rewriter.
stop supressing left-hand whitespace in newline'd strings. Make 'em more literal.
'-r' should work with $NODE_PATH as well (where previously it was an absolute/relative path)
simplifying generated output for unless/is to (a isnt b) instead of not (a is b). Ticket #617
Issue #575. Allowing implicit objects to force implicit calls.
Issue #609. Slightly faster implementation of ||= and &&=
Further reducing amount of redundant parentheses.
Improving double-parentheses suppression. Issue #587
disabling javascriptlint's 'test for equality mistyped as assignment', because it's not relevant to coffeescript.
Adding a jsl.conf configuration file for JavaScript lint, and switching to == null for soaks, accordingly.
Core Compiler is JSLint-free again, after removing a couple extra semicolons that snuck in when if statements compiled at the top level.
tweaking existential compilation.
allowing more flexible whitespace-started regexes. You have to wrap 'em in parens or assign to 'em, but it's better than nothing.
Allow required files to change the input and output of compiled files.
fixing string interpolation docco.
Adding support for compound assignment to indented implicit objects.
Reduced the time it takes to build the grammar from 80 seconds to 15, by consolidating Operation terminals by precedence level.
removing bound functions from the Rewriter.
Issue #602. Adding JS's Bitwise Assignment operators.
CoffeeScript 0.9.1 is on the books.
adding other implicit indentation/call/object test.
fixing Issue #545 ... whitespace-only heredocs.
adding herecomment in class definition test.
refactor to simplify scanTokens method in Rewriter.
adding a top-level object literal test for Issue #542
New implementation of Rewriter#addImplicitIndentation, using Rewriter#detectEnd
New implementation of Rewriter#addImplicitParentheses, using Rewriter#detectEnd
New implementation of Rewriter#addImplicitBraces -- uses detectEnd..
adding options argument to cake documentation.
prefer the include() helper to 'in', except for array literals.
First step of the general rewriter refactor. Added a generic 'detectEnd' function which is expression-pair sensitive. Use it to reimplement closeOpenCallsAndIndexes
Use fs.realpathSync instead of something hacky.
Adding CoffeeScript as a globally-available object, when invoked from the coffee command-line, only.
Merging in Stan's patch for a --require flag that allows you to hook into CoffeeScript compiler events for on 'compile', 'success', and 'failure' ... a better way to extend the language or do growlnotify stuff. Issue #590
Add command-line compiler hooks. To invoke, pass a file after -r and listen for any of these events: 'compile', 'success' and 'exception'. Example:
Issue #587 ... Removing the Attempted Removal of Erroneous Double Parens.
Forbidding #interp-style interpolation ... Issue #581
first step towards requiring #{ ... } interpolation -- removing naked interps from the compiler.
compile empty coffee files to js anyway.
be more flexible about trailing commas in implicit object literals.
CoffeeScript 0.9.0
fixing Issue #569. Compiling empty source files to disk with --no-wrap on.
more additions to the documentation for 0.9.0
regenerating large swathes of the docs
git-go
fixing up compout assignment for ?=, which was using a sligtly different path.
Issue #559, renaming {source} option to {fileName}, on CoffeeScript.compile
using double-quotes for auto-quoted object keys and hash accesses. JSON-style. Issue #556
tiny thing.
better output when trying to force a pure statment to become a return
removing the last traces of half-assignments. Issue #541.
ported and regenerated examples.
finished porting over the examples.
most of the examples converted to symbology.
adding a test for Issue #550.
getting the whole codebase passing jslint again.
Prevented parameter contents from causing unexpected returns in the body.
moving nodes.coffee over to use Tesco's new auto-setter style.
merging tesco's branch for issue #535
Support for @-prefixed splats.
Implement @-prefixed parameters.
Removing now unnecessary braces from the grammar. Still compiles to identical JS.
removing extraneous tempvar declarations from range generation by re-ordering...
fixing broken range literal expansions.
one more range literal expansion test
merged in evilpie's fix for faster small range comprehensions
adding slightly optimized syntax for range comprehensions that could care less about the index variable. Issue #547
Adding anonymous class support (gets a temporary variable for a name.) Issue #548
Allowing classes to be better decorated with implicit calls. Issue #548
make the compiler use 'obj = or default' for default values.
bringing back half assignments, but just for 'a = or b' and 'a = and b'
finished moving over string and regex interpolation to use '#' instead of '$', Issue #544
waypoint commit with both # and $ performing interpolation. Issue #544
merging in symbology
making inline implicit objects more flexible ... can be used with trailing blocks.
a couple more implicit objects in the source.
fixing test for {} + {}
fixing issue 542. Parse error with leading object literal as part of operation.
fixing some implicit object parses for issue #541
merging master changes into symbology
adding nice support for fancy implicit hashes
Using an experimental version of new optional-brace object literals.
added and= and or= to the language.
tests are now passing on symbology
finished basic port to equality of the compiler
converted nodes.coffee. a big step
simplfy generated code for static ranges
optimizing the output of compiled splat arguments.
slightly optimizing return values of AssignNodes. Issue #539
fixing bound functions with an __bind helper.
Making the spacing of symbols on function declaration consistent. No-space when single-line. Spaced when block. (StanAngeloff)
_this to __this, for consistency. (StanAngeloff)
adding correct semicolons to bound functions
first bit of equals for symbology ... barely started on lexer.coffee
Changing implementation of bound functions to mirror sethaurus' suggestion for cleaner output. Issue #530. Tests pass.
fixing If/else-to-ternary with instanceof as an unparenthesized condition. JS operator precedence.
updating package.json to work better with NPM. Issue #522
updating documentation with correct variable names.
fixing extra spaces in nested empty functions. Issue #527
removing unnecessary parens from the setup part of a range comprehension. Issue #528
switching interpolateString's method signature to take on options hash.
fixing regex-interpolation-sans-flags issue.
making the 'cake loc' task reflect the lines of code in the compiler only.
`class B extends A` calls `A.extended(B)`
adding no-argument super calls.
Moving from '.addListener' to '.on' for Node v0.1.101
enhancements to range comprehensions, back to being safe -- and usable downwards without a 'by' clause, and optimized when working with integer literals.
Reserving __hasProp and friends, for safety's sake.
renamed #strings sectiong to #heredocs
Updating documentation with endtime's suggestions.
updating docco to better reflect lack of explicit ternaries. Issue #510
michaelficarra's suggestion to make object comprehensions' hasOwnProperty check a continue, instead of a wrapped if.
adding a new comprehension 'for all key, value of object', which compiles to the naked JS for..in, including enumerable properties inherited from prototypes.
fixing existential chains directly against a 'new Func()' call. Issue #503
adding 0.7.2 changelog to the docco, as per request.
fixing issue #497 try/catch/finally all empty.
slightly nicer implementation of SplatNode.compileSplattedArray
Turning --compile on when --output is set, because it's probably what was intended.
adding an instanceof test for constructors-called-with-splats
(cosmetic) removing occasional extra linebreaks in JS generated from class definitions.
enabling a variable number of arguments to be passed to constructor functions.
removing sudo from the npm install script.
bumping version to 0.7.2 for --options patch.
fixing bug in option parsing with flagged arguments and cake.
removing an errant mention of named functions.
rebuilding docs and compressed version for CoffeeScript 0.7.1
fixing optparse to behave nicely in the presence of hashbangs -- stop parsing after the first non-option argument, and pass the rest along -- and adding an OptionParser test.
making it possible to pass in command-line arguments to a hash-banged coffee script. Ticket #473
fixing previously-escaped-inner-quotes-in-double-quoted-heredoc-interpolations. Issue #479
fixing issue #485, unary minus following an existential operator.
better printing for OpNodes with running with --nodes
better formatting for top-level closured-values.
fixing inline-loop object-in-array tests for instance variables. Issue #481
fixing a comment/block-comment combination lexing regex issue. Ticket #478
adding wavded's gedit-coffeescript to the resources section of the docs
fixing return node squashing the possiblity of a ternary, when there should be one. Issue #475
fixing herecomment/indentation bugaboo ... issue #474
added dsc's coffeecup to the resources section.
fixing issue #427 -- incorrect stringification of reserved word
fixing Lexer::OPERATOR regex for non-spaced + unary arithmetic. Issue #471
fixing empty catch clauses ... Issue #470
fixing improper formatting in range-to-array expansion.
fixing improperly-formatted-output of pattern matching within comprehension arguments.
fixing the block comment test to use defined variables.
adding passed-through block comments back to the grammar/lexer/rewriter/nodes ... thanks, Trevor Burnham.
better syntax errors for tokens-not-in-the-grammar. Coming soon to a Jison near you (hopefully)
throw a syntax error if you try to use the fat arrow to define a class constructor.
fixing closurenode wrapping of bodies with bound function declarations inside -- this doesn't have to be mentioned explicitly.
allowing empty bodies in try blocks and in catch blocks
fixing html entity in the changelog
allowing paren-less instance creation, a la 'new Class'
fixing range literals (which had gone untested) oops.
adding a one-line exception test.
adding a one-line exception test.
updating readme with NPM install.
docs for the NPM install
CoffeeScript 0.7.0 is on the books.
removing our vendor'd copy of Jison ... you should install it from NPM now.
getting ready for a 0.7.0. cleanups and doc revisions, not quite there yet.
removing obvious redundant parentheses.
slightly simpler comment regex.
cleaning up the grammar rule for Super
fixing an improper-js-output bug when using a loop-compiled inarray clause as part of a larger expression
adding a test for trailing-comments-preceding-outdents
Big commit. First draft of stripping comments from generated JS output. Issue #41
slight simplification of the if-else grammar rules
Re-ordering lexer rules for fewer regex matches / slightly faster lexing.
adding a test for #454
fixing issue #454 single-line function with single-line if/else
removing extensions from CoffeeScript
using the new in-tests for the Rewriter.
switching 'a in b' to 'a of b', and adding an array presence check for 'a in b'.
Adding TrevorBurnham's suggestion for 'a not in b'
adding non-ASCII characters to test_literals.coffee for Node v0.1.99
Update package.json to allow for npm publishing and installation
changing a couple repetitions to DRY objects ... doesn't change the compiled output.
adding a test for holmsand's patch for Object.prototype-named variables.
Make sure variables named e.g. "constructor" are declared with var
Updated Cakefile from Tim_Smart with colorized, explained 'cake install'
mistaken camelCase 'nodeLibraries' from the great under_score purge ... now fixed.
more streamlined code generation for instance-bound methods ... keep the prototype method around, and just bind it in the constructor.
adding the ability to have classes with functions pre-bound to the instance, using the fat arrow, and the constructor-function-definition pattern, avoiding prototypes.
a bit more work on keywords-in-object-literals...
first draft at ticket #437 ... automatic quoting of reserved words and keywords.
fixing comprehensions to also close over the index variable, if used in an inner function...
Ticket #423. When functions are generated within comprehensions ... the comprehensions should close over the element instead of sharing it.
slight refactor to IfNode::ensureExpressions
switching to 'Compiled' messages after the code has finished compiling on --watch ...
adding another statement/expression/return test.
allowing implicit returns to be pushed down into each branch of computation, even when there's an explicit return nested more deeply. Issue #401
allowing a regex literal to be the last token in a file ... Lexer bug.
fixing issue #396 ... issue with nested if/elses getting mis-nested.
fixing a mistaken camelCase in the Cakefile
First draft of switching the CoffeeScript Compiler over to camelCase. Pour one on the ground for underscores...
linebreaks in the rewriter ... cosmetic.
yet another rewriter-based comment fix, this time for issue #403
Unsatisfactory patch that fixes Issue #394 ... comments that prefix spaced out if/else clauses.
slight simplification to if/else in the grammar.
adding a 'loop' keyword to CoffeeScript. Takes an expression or a block. Runs it until you break or return out.
Making the REPL the default behaviour of 'coffee', when called with no arguments, a-la Node and Python.
removing the <- bind operator from CoffeeScript...
simpler 'cake loc' task.
adding a cake task to check loc
new improved REPL, using Node's new 'readline' module...
adding a sentence about parentheses wrapping.
fixing the lexer so that leading commas surpress newlines
reworking parser for more permissive non-comma-separated array elements.
making block comments require their own lines for delimiters. Issue 379.
fixing block comments at the top of function blocks, and in other locations ... Issue #379
making the lexer more sophisticated about incorrect outdents ... a little safer for everyone.
adding copying header to extras/coffee-script.js
ahh, finally. switched up our Jison configuration to provide better syntax errors. Now you get the unexpected token, instead of the expected one.
removing call to deprecated sys.p() in the REPL, now it's 'puts inspect value'
allowing direct calls against numbers.
allowing Klass::['dynamic-property'] syntax. Issue #392
whitespace adjustments
one more range comprehension vs range literal test, for thoroughness.
adding a negative range comprehension test.
cleaner generated code for range comprehensions, but you have to use an explicit step to go downwards. Forked the code path for cleaner range literals as well.
enabling compilation of non-.coffee-extension files passed directly to the coffee command (Issue #391)
Moving all of the 'test_issues' tests from 'hiatus' to their proper locations...
Simpler stab at a fix for issue #397. Allow CoffeeScript-only keywords to be used as accessors, or in assignment.
moving issue #381 test to the proper spot.
reworking fix for Issue #383 with a more sensitive regex. (decimals without a leading zero)
refactoring name_access_type into tag_accessor
reworking Stan's nodes.coffee type/children work a bit for issue 386
FIXES #397: Can't use @variable in switch in instance method
FIXES #390: super() calls in constructor of classes that are defined as object properties
Whoops, forgot the extra condition before we perform the rewrite
Tests to ensure reserver words and operators can be used as object keys
Allowing operators as object keys
First steps in allowing reserved words as object keys
FIXES #383: Numbers that start with . not recognized
FIXES #380: problem with @ and instanceof
OOP love for nodes.coffee
Merging type, children and statement functions
Baby steps fixing #386
CoffeeScript 0.6.2
sprinkling toString() throughout, for Node.js 0.1.95 compatibility.
fixing heredoc indentation from herecomment tweaks
making regexes stricter about their flags.
better indentation handling for far-left heredocs and herecomments
better indentation handling for far-left heredocs and herecomments
Adding initial implementation of here-comments (block comments) Issue #368
Allowing more flexible linebreaks/indentation within object literals.
better test for sans-condition switch...
enabling condition-less switches.
fixing andreyvit's issue with parentheses not being applied to multi-operators as the condition clause of a switch...
merging in gfxmonk's cleanup to how children of nodes are determined. Removing some (so far) unused portions.
determine @children dynamically based on attribute names, instead of manual bookkeeping
adding support for calling variadic functions with less than the requested number of arguments.
further minor cleanup to varargs
minor cleanup to varargs
Added safe soaking on non-existent variables.
disallowing regex literals as implicit calls immediatly after ']', a rare case, I hope. Ticket #358
forcing spaces for implicit calls ... making '@ name' a call instead of an access. Ticket #353
making 'while' and 'until' have the same associativity and precedence as 'for', #356
recompiling annotated documentation
merged in Trevor Burnham's recursive coffee compilation, with some adjustments...
Removing obsolete delete calls.
Added missing or to IndexNode.
Wrapping all soaked chains that are involved in operations.
Stop anonymous supers.
Added recursive compilation and monitoring option to coffee command
relative requires...
Cleaned up IfNodes
add require statements to tests that depend on coffee-script modules
removing holmsand's cleanup
added a test for the multiple-functions-passed-sans-parens
Added a small part to the rewriter to allow a better two-function call.
Remove unused variable index_var from for loops
adding until loops as the inverse of while loops
changing 'filter' to 'guard' to get around Express' clobbering of Object.prototype.
rewriting the compiler using 'unless' blocks where appropriate.
adding 'unless' blocks
no newline on no_such_task for Cake
adding pattern matching for comprehensions.
Cleaning up.
Allowing pattern matching within for..loops
fail with appropriate error status if child process fails
rewriting the Lexer, CommandLine, Nodes, and Rewriter to take advantage of the new DRY object pattern matching.
Got the DRY object pattern matching style working properly, from Harmony. {name, age}: person now works correctly.
eliminating the IndentedAssignList nonterminal.
simplifying the grammar by replacing all of our trailing comma rules with an OptComma nonterminal.
Throwing an error when pattern matching has a non-identifier on the left-hand side.
merging gfxmonk's removed error event fix.
replaced nonexistant error event callback with a combination of stderr and exit events
removing yytext mentions for real this time.
Revert "removing yytext mentions from the grammar"
removing yytext mentions from the grammar
new version of Jison vendored ... rebuild the grammar, tests pass.
fixing Issue #328, parse error with indents and comments (StanAngeloff)
requiring helpers module in test_bind.coffee
making bin/cake install add CoffeeScript as a Node.js library, and creating an index.js file for the top-level inclusion.
Redoing Rewriter#add_implicit_parentheses to be more robust.
merging in gfodor's excellent Rewriter patch.
ignoring raw
adding 'coffeescript-idea' to the resources section.
fixing non-spaced function application.
allowing 'debugger' ... it should never have been a reserved word.
CoffeeScript 0.6.1, for Node.js v0.1.90
adding coffee-haml-filter to the docs
simplifying some unecessary interpolated expressions into interpolated values.
adding a test case for issue 309, interpolations with implicit calls.
merging Stan's recursive tokenizing fix for interpolations.
FIXES #309: Optional parens and interpolation.
Using anonymous callback for 'exit' event when running tests
fixing implicit-call-in-function-in-parens bug.
Battery of patches for compatibility with Node v0.1.90
generated closures should only call() or apply() when necessary.
safely preserving the arguments object through generated closure wrappers.
adding webchat to the doc page
Adding noonat to the contributor list
Renamed Lexer.tag() argument to new_tag, due to Rhino scope confusion
Realigning function arrows.
Added Statement to the grammar.
Interpolated strings are expressions.
Failing test for string interpolation. Interpolated strings need to be expressions, not values.
merging in Chris Lloyd's fix for optional descriptions on Cake tasks.
CoffeeScript 0.6.0 is on the books.
rebuilding the docs with the fixed highlighter for '@' and regexes.
merging non-func-constructor-fix, but a little more forgiving.
Throwing proper error when "constructor" is not a function within a class body.
Removing {@prop: value} from the grammar.
rebuilding the docs with new pygments, no errors on '@'
tiny tweak
cleaning up tests ... consolidation, consistency...
Merging Tesco's invoking-this-fix
Added a rule to prevent invoking THIS.
Added THIS to CALLABLE.
fixing parens-around-implicit-function-with-multiline-chained-chaser bug
fixing single evaluation of functions used in chained comparisons wrapped in parentheses.
merged tanob's fix for installing outside of /usr/local without a /bin
When installing in different prefixes, prefix + '/bin' may not exist.
stylistics: removing a bunch of unecessary parentheses
removing all of the 'type' tags from the Nodes. Simply using constructor.name instead.
rebuilding the source documentation with the new utility refactors
__extend back to __extends, as is the correct name.
reverting the grammar to the pre-slice notation.
removing __range, and all the slice behavior it enabled. If you can't do array[-1], then you shouldn't be able to do array[0..-1] -- it's just too inconsistent.
more cleanups, added a utility helper function to the  codegen
another reshuffle ... removed utilities.coffee entirely.
more refactors to utilities ... removing dependencies and the namespacing
simplifying the lookup of the top-level scope object
more utility simplifications
Utilities doesn't need to be a class, and removing __utilities.keys
modified shorter imlementation of bind
merged matehat's utility branch, arraySlice -> slice, removed dead dependency...
make JSLint happy about the while condition
Removed `__splice` in the same manner
Removed the `__slice` method, in favor of the native array slice method
Put back every utility functions on the global scope, automatically prefixed with `__` and set them dynamically as reserved on the lexer.
A set of improvements on previous code
Removing vendor specific files for measurement tests.
Removing commented code in compile_splice -- this is working correctly now.
Re-compiling the core using the new __slice and __splice functions.
Allowing for negative indices in slice literals.
Removed unused `__hasProp` assignment and declared `Coffeescript` a reserved name
Removed unnecessary check
Removed hard-coding of utility object name
Applied the utility factoring into a "Coffeescript" object to the core. All tests pass fast.
using the new static properties of class definitions in the CoffeeScript compiler -- it's hardly used.
adding class methods to class definition syntax, using '@'
more little documentation for the rewriter ... moving along
removing a case from Rewriter#add_implicit_parentheses that apparently never happens...
update internal documentation ... it's been a while
making the Rewriter's add_implicit_calls more sensitive of parenthetical arguments.
fixing single-line implicit call wrapped around function with trailing arguments
Removed unprocessed values on a for loop from the grammar.
Restricted class and extends values to simple assignments.
Addressing some assignment issues.
removing unused reserved variable 'source var' from range comprehensions
Revert "Added Unix-like piping. Allows chaining of function calls where every succeeding call receives as first argument the result of all preceding expressions."
Revert "removing the special case for | or"
Revert "typo for @compile_bitwise_or"
typo for @compile_bitwise_or
removing the special case for | or
Added Unix-like piping. Allows chaining of function calls where every succeeding call receives as first argument the result of all preceding expressions.
Minor modifications to the grammar to allow a single trailing comma for function call arguments, array literal and object literals. Adjusted tests accordingly
Optional sentence descriptions for cake tasks.
adding a test case for the explicit returns
fixing explicit returns of comprehensions (and probably other things as well)
added another language extension test for a << b into a.push(b)
make sure that the source-hacking docs mention to 'git checkout lib'
CoffeeScript 0.5.6
'=' -> ':'
improving readability a bit
Added splats positional flexibility to pattern matching
switching a couple of the half_assignment tests to ensure that : and = are still interchangeable
more half-assignment tests
rewriting the compiler to use half-expression assignment
fix and tests for half assignments... whew.
almost there with half-assignments
removing AND OR NOT IS ISNT from the grammar
one step at a time
one more step
one step further
nothing much
adding a couple of interchangeable tests
merging in gfxmonk's major refactor to the way that returns are pushed down into the interior of expressions
briefer test runner output
merging gfxmonk's cleanups
Cleaned up return logic
improve feedback when running the test task
fixing infinite recursion when compiling if statements containing pure_statements
resolving issues with comments in the middle of unfinished single-line expressions.
renaming test_curry to test_bind
removing the CoffeeScript.run named function from eval'd script scope by making it anonymous
adding a pattern-matching-on-expression test
merging in matehat's nice refactor to splats (in arrays and otherwise)
Added function call's flexibility with splats to array literals, factoring out splat compiling, and adjusted tests
fixing doubled semis
merging in matehat's curry branch. cleaning some loose ends up. adding some tests.
Slightly altered syntax, similar to Underscore's Function#bind form, highly simplified lexing and parsing and no polluted scope. Passing tests included.
Applied the new splat flexibility to function currying operator
Added some inline docs
Added the '<-' currying operator, as heavily discussed in #251, along with tests.
fixing a bug where the Lexer assumed that values would always be strings.
fixing off-by-one error in compile_splat_arguments
can't use indexing[] into strings cross-browser, use substr() instead.
merging matehat's flexible splats (at any position within argument lists)
adding interpolation to heredocs, using the same rules as for strings
Added the ability for function declaration to have a splat at an arbitrary position, not just at the end. Still restrict their number to 1. Adjusted tests accordingly.
Added the ability to put as many splats in a function call as one wants. Also optimized the assembly into static arrays. Adjusted tests accordingly.
pushing docs to the site
fixing trailing whitespace on the final line
fixing the relative path to 'grammar'
fixing incorrectly-rooted relative paths in bin/cake and bin/coffee
new docs for underscore
Added the possibility to end an identifier with '::', refering directly to its prototype.
comments and tests
tweakin'
updating module loading test
merging in matehat's registerExtension patch for direct-requires of CoffeeScript.
removing deprecated references to process.mixin in favor of helpers.extend for Node 0.1.32
moving the contains-a-pure-statement-means-no-closure logic into ClosureNode.wrap itself.
merging in the fixed branch for gfxmonk/break_issue
fixing issue with break statements and for loops and closures and the value of 'this'
merging in gfxmonk's fix for reporting line numbers for unclosed { [ ( opening symbols
report line number of opening token if a pair (eg bracket) is left open
fixed non-recursive traverse() for CodeNode
let's make that non-greedy
adding another language extension test, with %w{} style ruby word array literals
removing outdated arguments tests
removing arguments-to-arrays from the docs
removing arguments-to-array-conversion from coffee
removing fiddling with require.paths from CoffeeScript
using granular helper imports, for nicer within.
stop mixing in helpers (t(ticket #250) -- with a test
we don't need relative requires for the language
fixing 'cake test' to print out the name of the file with the failing test.
updating the Cakefile for the new tmbundle location.
removing the tmbundle from the main repository. See jashkenas/coffee-script-tmbundle for the new one
added another "invalid break" example, with code not on the top-level
added code to illustrate an issue with break statements
added a test case for broken "break" statement
fixed non-recursive traverse() for CodeNode
report line number of opening token if a pair (eg bracket) is left open
Added an extension on node's 'require' module so it can import .coffee module and added some tests to make sure it works.
no need to save the lookups
tweaks
removing the unused CallNode#push
removing the nearly-unused notion of 'operation sensitive'
fixing indentation for prefix while nodes
added two snippets for creating functions; matching tab/key triggers from JavaScript bundle
can set Grammar via Shift+Ctrl+Alt+C
adding more comment tests -- this terminator/comment as-block business really seems to have opened them up a bit
added Stan's fix for try/finally without catch
allowing terminator/comment as a block, so that you can have comment-only blocks
fixing exports for the browser
fixing broken multi-line optional-paren blocks
tweaks to the helper docs, if they're going to be published
updating the docco
CoffeeScript language extensions are now working.
adding the broken test
first draft of CoffeeScript language extensions.
fixing the nested-implicit-parens-on-a-single-line
big refactor -- pulled all helper functions into helpers.coffee to facilitate sharing.
making balanced_string accept an array of delimiters, in hope of using it in the Rewriter
scrubbing all carriage returns from CoffeeScript source before compiling for the benefit of Windows users.
minor refactors to balanced_string
fixing more bugs in balance/interpolate/regexp/string/etc
more refactors to interpolation
Regex interpolation highlighting
more regexp and string interpolation tweaks
waypoint -- going to try to clean up regex_token
removing the 'supress' option from the lexer, just look at the slash.
merged stan's interpolation_3, a couple of tweaks
adding documentation for var shadowing
Regular expression interpolations; fixed bug in string interpolations when all tokens were identifiers.
Match regex highlighting to how coffee parses it
doc tweaks
Include an extra line `process.mixin require 'sys'` on the top to let the .js output run using node (v0.1.31)
While loop can be a single line expressions so don't indent when it is
Indent function in symbol list based on indention in source
Add auto indent settings for textmate
scratch 'as seen above'
little tweaks to the docs
Don't highlight fresh[key]: val situations
Revert "Properly highlight fresh[key]: val situations"
CoffeeScript 0.5.5, with string interpolation and internal documentation
Properly highlight fresh[key]: val situations
Clean up some misplaced files
Finishing off the docs for nodes.coffee -- almost ready to roll.
making ThrowNode not a pure_statement -- it can jump out of the closure just fine
waypoint -- documented down to the ThrowNode
broke the flag for --no-wrap, fixed.
Empty expression interpolations evaluate as empty strings now.
Add variable assignment highlighting for textmate
Finishing off the docs for nodes.coffee -- almost ready to roll.
making ThrowNode not a pure_statement -- it can jump out of the closure just fine
changing from storage.type... to variable.assignment -- it was a little garish in most color schemes I tried.
waypoint -- documented down to the ThrowNode
Make variable assignment highlighting work in more cases
Make old style classes show up as a function and don't let $\d be highlighted as a number
Don't show object creation instances in symbol list for textmate
Add comment starter preference for textmate
broke the flag for --no-wrap, fixed.
Empty expression interpolations evaluate as empty strings now.
Identify functions for symbol lookup and correct lookbehind assertion
Add some TextMate triggers for string interpolation
Empty expression interpolations evaluate as empty strings now.
Allow $ to be the first character in a variable name for highlighting in textmate
Escape $ in regexes where it was meant as character and not end of line
Update highlighting for class definitions in textmate
Add string interpolation highlighting and Cakefile highlighting
waypoint -- docs halfway down through the OpNode
test tweaks
allowing naked interpolation of dotted properties. .property
unifying the CoffeeScript.compile and CoffeeScript.run apis to be the same -- source code and options hash.
adding source file information to all coffeescript compiles
adding a note about the 'git co lib' - build twice shuffle to the docs -- there's been more than one question about it already.
unifying all of the server-side evaluation under CoffeeScript.run -- this means that __filename and __dirname and relative requires should work from all angles under Node.js
merging in Zaach's Jison updates
waypoint -- docc'd down to the SplatNode
Rebuild parser, now with skinnier parse table.
Update Jison for table optimizations.
mention rlwrap in the docs on --interactive
adding coffee-mode and rack-coffee to the Resources section of the docs
waypoint on the documentation -- almost halfway through the nodes
first little bit of commenting the nodes.coffee -- with some slight refactors
documenting scope.coffee -- nodes.coffee is the next, and last up to bat.
documenting and cleaning up the Rewriter
updating to the latest docco
documenting optparse.coffee and repl.coffee
cleaned and commented the lexer (again) interpolate_string() continues to shrink
Rewritting lexer.coffee to accept nested string interpolations.
adding complete documentation for the grammar
documentation for command.coffee
making equality left-associative so that our chaining works properly with it.
moving command_line.coffee -> command.coffee
commenting coffee-script.coffee for documentation
Commenting cake.coffee for Docco docs.
Override process.argv as well as process.ARGV for eval'd scripts
updating the Function Binding docs with an improved explanation.
updating webserver example for node API
removing narwhal.coffee and narwhal.js, because I don't think that anyone was using them.
adding a doc:source Cake task to document CoffeeScript's internals
allowing relative requires of JavaScript from directly-eval'd CoffeeScript.
fixing line numbers in errors printed prior to parsing
Adding a starts() helper to avoid substring() calls for simple matches.
minor cleanups to balanced_group -> balanced_token, removing optional escaper (unused), and using it to implement interpolated javascript.
Improving performance by removing call to bound function for every character in a string. Added a third option to \`delimited\` to allow custom escape sequences.
updating CoffeeScript docs to require Node 0.1.31 +
Rewriting string tokenizer; allowing nested double-quoted strings inside expression interpolations.
implementing the CoffeeScript compiler using interpolation where appropriate.
implementing string interpolation using string interpolation
done converting nodes.coffee code generation to use string interpolation where appropriate
adding a test for intermingled identifier/expression interpolations
waypoint -- starting to implement nodes.coffee with interpolations, and fixing/shortening/combining the lexer implementation to allow identifier interpolations to be interleaved with expression interps
adding back parentheses wrapper around interpolated expressions -- we need it
allowing @properties to be referenced in naked interpolations
some edits to the interpolation path
Test line commented by mistake, no functional changes
Allowing expressions to be used inside strings; syntax is $\{...\}
Added string interpolation for identifiers
add proper spacing to optparse by default
Updating docs for CoffeeScript 0.5.4. Tag it and bag it.
Use new node api for resolving a chain of symlinks
updated command_line.js
fix: process.watchFile has moved to fs.watchFile
improvement to comment handling that should ensure that they have no effect on indentation
rebuilding extras/coffee-script.js
removing special rule from rewriter for naked functions in arrays
couple more tweaks to lexer.coffee
better commenting the coffeescript lexer as the first trial for docco
defining __filename and __dirname correctly as local variables for eval'd scripts
updating Underscore.coffee to Underscore.js version 0.6.0
a number of refactors to the Lexer. It should be a good bit clearer to read now.
allowing chaining of property accesses by indentation level (really nice for Node and jQuery work) ticket #221
fixing require paths in the Cakefile so that build:jison will work, even if you don't have it installed.
fixing heredocs with multiple double quotes (broken regex from the Ruby translation), with tests.
updating docs to say 'Node.js greater than 0.1.30'
removing the (now-unused) inherits helper, and adding a helper for creating LiteralNodes
If you don't specify a constructor, one will be provided for you by the state.
CoffeeScript 0.5.3, with classes
updating documentation for classes
reserving __extends and __hasProp
converting the remainder of the CoffeeScript compiler (Rewriter, Scope, Optparse) to use classes
super is now possible in nodes/Expressions, where it wasn't possible before.
updating the Lexer to use classes and some of the older documentation
making sure that the body of extends only gets defined once per file.
converting the nodes.coffee AST to use the new class system
making inner comments work within class definitions
first draft of adding classes to CoffeeScript
fixing multiple evaluation of splat sources, when it's an invoked function
fixing regexp literals versus division, with tests
fixing multiple single-line function forms on the same line
fancy new fullscreen version of 'Try CoffeeScript'
rebuilding the browser code in anticipation of a page push
adding a traverse method to the AST, so we can do fancy processing from external scripts.
making --run the default option for consistency. If you want to save the file, use -c or --compile.
adding the long-ago-needed documentation for constructors with 'return this'
finishing the second half of prefix installs. Using readLink to refer to the CoffeeScript installation reliably.
adding favicon to docs
caching the length property lookup for vanilla array comprehensions and rebuilding docs
moving some of the fs methods over to sync methods, where it's alright and where it makes things clearer
first draft of options for Cakefiles, using optparse.coffee, as well as a cake install task that takes --prefix. Still need to fix the lib/bin scripts
no outline on the Try CoffeeScript input for safari
hide the error div on initial page load
new live 'Try CoffeeScript'
allowing merged short flags in optparse.coffee, via normalize_arguments
raising an error on unrecognized options
updating docs with the new flags
moving -tr --tree to -n --nodes, and --no-wrap gives up its -n short flag.
improving errors for undefined options, and error messages for compile attempts on nonexistent files
using text instead of html to escape entities in the rendered JS for Try CoffeeScript
doc update
adding a test for nested pattern matching
fixing patternmatched assigns within assigns within calls
improving CoffeeScript in browser script activation, and updating docs
cleaning and shrinking the option parser
cleaning and commenting cake.coffee
adding return values for destructuring assignment.
docs for CoffeeScript 0.5.2, which is now out.
removing CoffeeScript.activate() simply including the tag will do for text/coffeescript
call it 'CoffeeScript' in the command_line, so that --run scripts may access it as such
implementing the inline javascript in the documentation page in text/coffeescript, switching from the closure compiler to the yui compressor for building the browser version -- the closure compiler had a bug for our input -- fixable by hand but not worth the tiny savings
adding a minified combined coffee-script.js. Include it on the page, after any text/coffeescript tags, and call CoffeeScript.activate(); to run it
moving print_tokens (the pretty printer) from coffee_script to command_line
adding documentation for --stdio
adding compilation over stdin/stdout. Use --stdio or -s, and pipe away.
upgrading the optparse library to avoid having to register callbacks for each argument. It just returns a simple options hash.
bumping to 0.5.1
adding existence soaks for indexed-lookup property accesses:  obj?['property']
adding conditional while loops with while ... when
fixing throwing an error string in the Rewriter, when it should have been an Error object
removing a shift-reduce error from the grammar that worked its way in
rebuilding with new for spacing
updating to the latest Jison
merging Tim-Smart's branch
going back to == undefined instead of == null to appease the angry JSLint.
nodes.coffee: ForNode: Small whitespace change in for_part
fixing issue 196, better handling of soak/existence chains
adding warning about Node.js/Windows to the docs.
Make trailing else on switch fix pass on to multiple when switches
fixing the trailing-else-in-switch-getting-sucked-in-bug, Issue 195.
doc updates
allowing checked out versions of the source to use bin/cake and bin/coffee from any directory.
fixing the build:ultraviolet task in the Cakefile
making the docs a little less jumpy with more stable menus
ensuring that we don't write --eval scriptlets out to disk -- they should print, if nothing else
Keep the correct state for watching files so the appropriate one is recompiled
wrapping up loose ends for 0.5.0
adding /usr/local/lib hardcoded versions of coffee and cake for the install script
documentation for Cake and Cakefiles
list padding for the docs
new version of the docs for 0.5.0 is done, or close to it.
one more documentation waypoint, now with running for Try CoffeeScript, and a recompiled Underscore.coffee -- wordsmithing next
removing the 'var' declaration from arguments-to-array conversions
waypoint on new coffeescript docs --they're coming along nicely
first working draft of the new documentation
updating to latest Node (0.1.3) API -- callbacks, not promises
re-enabling the --no-wrap flag, and cleaning up an unused method in command_line
rengenerating documentation
regenerating documentation
removing the build:parser -> build dependency in the Cakefile -- the asynchrony was breaking it anyway
removing commented-out parseerror
Allowing @[property] syntax.
Improving soaks to avoid uncessesary parentheses.
fixing an off-by-one error in Splat compilation
Revert "fixing api changes (no more promises) for node v.0.1.29"
fixing api changes (no more promises) for node v.0.1.29
merging cehoffman/master
removing redundant compile from command_line.coffee
using the new fs.writeFile API instead of fs.open -- much, much nicer
Simpler write method that assumes utf8 output like input reading does
No need to recompile the script for writing
fixing standalone @ references
adding syntax highlighting for standalone @ts
using '== null' to check for soaked accessor chains instead of '== undefined' -- shorter, and slightly safer
adding an extra pair of braces to the code produced by object comprehensions, so as to squeak by in JSLint's good graces
carefully categorizing JS keywords from JS reserved words from Coffee keywords, so that we can throw syntax errors at compile time if JS keywords are getting assigned to.
light refactor for repl.coffee
light refactors to scope.coffee
removing the 'remote' parameter from Scope::find -- it wasn't used anymore
just namespacing the coffeescript compiler
Revert "namespacing CoffeeScript in the browser, and sniffing the 'require' function instead of the 'exports' object"
namespacing CoffeeScript in the browser, and sniffing the 'require' function instead of the 'exports' object
removing traces of Ruby from coffee-script.coffee, redoing narwhal support to use the new compiler (but untested)
starting to cache fancy switch values -- fixing issue #171
making 'no such task' errors a little nicer
moving 'throw' to a slightly higher level of precedence
adding a test for parenthesized throws
allowing parenthetical nodes to wrap statements without necessarily expression-izing them -- tests are passing ... we'll see how this works in practice.
removing the '--' from /usr/bin/env node, until we can find a workaround for linux.
add a note about installing Node.js first
Updating fs module to the latest Node.js -- that's fs.readFile, not fs.cat, with string flags for fs.open
added experimental (but working) method to install CoffeeScript: 'sudo bin/cake install' -- once you've done that, you can take cake and coffee out of their bin/
reorganizing lib/coffee_script to plain ol' lib
we don't need relative require's because the paths are set up correctly -- removing the unused runner.coffee script
The Great Purge. Removing the Ruby compiler, and all of its accoutrements. bin/coffee is now CoffeeScript-in-CoffeeScript
removing all tasks from the Rakefile except for 'doc' ... we might need to keep that around for a while
adding build:ultraviolet and build:underscore tasks to the Cakefile
got a really nice --watch flag for bin/node_coffee going, thanks to Node.js' process.watchFile. Can be used with --print, --lint, --tokens, --run, or whatever your needs may be
fixing the extends keyword when the expressions are complex, and should only be run once -- not that it's good style -- ticket #143
Adding a CoffeeScript equivalent to Rake/Make/Jake (Cake, naturally), and implementing all of our build and test tasks in the Cakefile. Run bin/cake to see the tasks.
finished converting the test suite, to run it, do: bin/node_coffee -r tasks.coffee -- test
removed ruby tests, and started the process of converting the CoffeeScript tests over to use Node's assert() module
got a build script for rebuilding the compiler, too
removing underscore.js from lib, and from the docs page
removing underscore as a dependency for nodes.coffee -- let's be minimal
using node's process.compile for better filename reporting on errors
Implementing sethaurus' suggestion for better temp variable names -- getting rid of the numbers.
adding the list of javascript reserved words as syntax errors in CoffeeScript, so that no one uses them accidentally.
updating rewrite rules for jots multiline function case
fixing an overzealous access in the rewriter
use a temp var for range expansion, instead of 'i'
allowing keywords as identifiers, when used as identifiers, because we've got more keywords than JavaScript does.
beginnings of a build script
adding updated coffee.vim syntax file
fixed the while-loop-condition-with-implicit-function-call bug
switched from alphabetical __a __b temporary variables, to numeric _1, _2, which will be shorter in most cases
print_tokens should acutally, y'know, print
adding paren wrappers for property accesses directly on object literals
updating for Node.js' change from 'posix' to 'fs'
updating docs with #coffeescript channel
moving print_tokens into the actual coffee-script module, so we can use it separately from the command-line
fixing allowing empty functions like () ->
whoops, screwed up the definition order in the inheritance example
adding a note to the docs about colon/equals equality
updating the readme with a warning about the self-compiler
added hugs' webserver example
fixing long-flag-with-optional-part in optparse.coffee, and hiding bin/node_coffee --watch until we implement it
implementing grayrest's suggested cleanup for object comprehensions
updated the rewriter to use @prop instead of this.prop -- compiled JS doesn't change
update the highlighted underscore to 0.5.8
rename the repl id to try_coffe
removing the vendored optparse in favor of a pure-coffeescript optparse library
enabling the --eval option for the self-compiler
that's max-height
updating Jison
the improved error messages are still-to-be-improved
working 'Try CoffeeScript' in the docs
got coffeescript compiling in the browser
add a -- to let us parse our own flags
got the CoffeeScript-in-CoffeeScript REPL running, and boy is she fast
don't make the command-line so OOP-y -- it's just a script
display the usage message when called without arguments
Nicer-looking --tokenize, more in line with what Ruby's doing
nicer --tree printing, with values inlines to the right
after correctly recording objectnode's children, bin/node_coffee --tree is working pretty nicely
recording else_body as a child of IfNode, when added after the face
subtle bug in the order of the rewriter rules was causing some if/else chains to get confused by implicit indentation
use Underscore's flatten -- start to make a nicer tree printer
Use _.extend instead of the hand-rolled merge
using underscore's clone() for code generation
using Underscore's compact in the code generation, insstead of our home-rolled one.
Using underscore for an any() function.
fixing the lexer for indented files
moving Underscore.coffee from /examples to /src
updating underscore.coffee to 0.5.8
adding an if/else/chain test
The moment of truth: CoffeeScript has now compiled itself ten times over.
use parseInt to make octal numbers to keep JSLint happy
finally, think we have this if/else/if/else/else thing licke
alright, really fixing the comments this time
fixing object/comment printing
pulling the lexer and rewriter updates without the grammar change
Revert "one more bit to pass -- futzing with the if/else chains"
one more bit to pass -- futzing with the if/else chains
typo
added coffee --lint to the self-compiler's resume
adding the ability to write out compiled coffeescript to the command line
Happy Birthday, CoffeeScript-in-CoffeeScript, you just passed the entire test suite.
fix prototype_access lexing
fixing if/else rules
safer lexing for ruby, too
safer lexing at the start of the files
waypoint ... somethings still a little off with the parser
little further
self-compiling the arguments test
passing the funky comment test
self-compiling switch statements
self-compiling closures as expressions
self-compiling the existential operator
correctly self-compiling @references
Array comprehensions are alive and well on the self-compiler
range comprehensions are working smooth
recompiling with latest jison (modified) and passing codenode generation
Revert "upgrading to latest jison, rebuilding the parser"
upgrading to latest jison, rebuilding the parser
fixed heredoc lexing regex for JS, now passing test_heredocs.coffee
test_operations.coffee is now compiling successfully
test_functions.coffee compiles and runs successfully.
empty functions are legal code
updated to latest jison, rebuilt parser
waypoint -- jison has a reverse order of operations from yacc
added the ability to print the parse tree
self-compiling ranges and expressions
self-compiling pattern matching correctly
got pattern matching working
disabling traces in the jison parser fixes the performance problems -- ahh, much better
still not there
uncomment test
done for now
things are in motion -- bin/node_coffee is the new JS-only command line ... it can pass some of the tests
It's beginning to come alive.
and now with if/else statements, CoffeeScript-in-CoffeeScript is language-complete -- now for the shakedown cruise
now self-compiling array/object/range comprehensions.
self-compiler handles throws, the existential operator, and parentheticals.
self-compiler: handles try/catch/finally blocks
got about as far as I think I can with operator nodes for now, without zach's optimizations
raising the precedence level of delete, instanceof, and typeof
Self-compiler: now does while loops
Self-compiler can compile splats.
Self-compiler: can now compile functions.
Self-compiler: array literals
Self-compiler: object literals.
Self-compiler: array slice literals.
upgrading the test harness
removing the constructor safety check -- it wasn't safe enough (Issue 36)
CoffeeScript-in-CoffeeScript can compile @property references.
CoffeeScript-in-CoffeeScript can compile object[indexes]
CoffeeScript-in-CoffeeScript can compile dotted accessors
CoffeeScript-in-CoffeeScript is now able to compile subClass extends superClass
CoffeeScript-in-CoffeeScript is compiling function calls
CoffeeScript-in-CoffeeScript just had it's first self-compiled snippet.
removed an old now-impossible branch of execution from ReturnNode
finished up the CoffeeScript version of the Scope object
trying out a new organizational scheme, with a quickie 'inherits' helper function
nodes.coffee is continuing to roll along -- maybe a tenth implemented
bumping up the existential operator to the highest precedence level
allowing numbers to be used as object keys
CoffeeScript 0.3.2, just in time for the Github feature
merging jeff olson's work
waypoint -- parser.coffee can parse basic functions
waypoint -- it's beginning to parser
merging node into master -- you can now pass the --narwhal flag to use narwhal instead. All tests are executing successfully against both Node.js and Narwhal/Rhino backends
spacing
merging all narwhal integration into a single file, so we can merge the node branch without breaking narwhal compatibility
added a blocks example
merging master
adding 'by' to array comprehensions
adding assign and return like they should have been
merging master
removing arguments as a keyword -- we can detect its use at code-generation time.
work on nodes.coffee and adding scope.coffee
fixing assigning to @properties within an expression
remove parens
remove parens
merging in master
adding @property for this.property
it's puts in node, not print
merged in master
fixing bug with mixed dot and soak accessors
starting port of nodes.rb to coffee-script.. Node only, so far
simplifying order of operations a bit
adding precedence to the Jison parser
removing the peg grammar
the parser seems too big to compile
the rewriter is done
getting there with the rewriter
rewriter is halfway done, and working
first little piece of the rewriter
mixing in sys again, for the tests
more progress with the lexer, perhaps it's done
waypoint on lexing... parses basic strings, no indentation yet
a little further on with the lexer
first little bit of the lexer
made the path handling a little more robust
node conversion finished, narwhal removed.
implementing the Node REPL.
first draft of node.js REPL
updating resources section with rack-coffee
CoffeeScript 0.3.1, quick patch for 'instanceof'
fixing instanceof, with a quick test
updating documentation for 0.3
adding unary plus, new version of Underscore, still passes tests. Rebuilt Narwhal
complete implicit functions, I think these are done.
removing block literals in favor of implicit calls
first draft of whitespace-sensitive method calls and indexes.
make nested implicit indentation just a little bit smarter about outdents and stack levels
updated textmate highlighter for new function literal syntax
trying out new arrows for function literals -> is a function, => is a bound function
adding bound functions to the list of implicit call activator tokens
enabling passed functions to fire implicit method calls
tests passing with smarter block syntax with optional parens
first draft of mandatory parentheses around function definition param lists -- all tests pass
odd and even were backwards
moved CoffeeScript.tmbundle to extras and rewrote the installation instructions in plain text
adding line number info to unclosed parens, objects, arrays, and indents
fixing chained single-line if-elses with a smarter rewriter.
adding vim syntax file in a new "extras" folder - also added a VIM-SYNTAX-HOWTO.md readme file
changed the docs for optional parens
making all postfix forms close out implicit calls, as in Ruby
converted the tests to use optional parentheses -- lot's of little subtleties to work out
first draft of optional parentheses, with a couple tests ... more to follow
another poignant example
adding more examples to the computer_science folder, and fiddling with operator precedence
added test for lexical scope sharing through generated closure wrappers, something uncommonly used, but that was a regression
adding soaked method calls, with caching
added existence chains with '?.' -- soaks up attempts to access undefined properties, returning 'undefined'
removing 'this' rewriting in favor of correctly calling generated closures
added automatic safety closure wrapper for functions declared within for loops.
adding the compiled parser back into the repo (after all that) so that it can be used as the source for the narwhal package
fixing comments as the last line of a block
fixing bug with multiple linebreaks in heredocs
doc updates -- widened the code segments for the sake of the JavaScript
CoffeeScript 0.2.6 is on the books
ignoring the top-down parser that doesn't work
added binary search example -- chapter 6 of beautiful code
added bentley's chapter from beautiful code to the examples/tests -- quicksort runtime analysis
added the first chapter of beautiful code as a coffeescript example
edits for clarity
rename compile_double_reference to compile_reference
generating multiple calls to the same function should use compile_double_reference to ensure a single evaluation of the call itself.
fixing assignment-in-condition
reverting change
only let returns stop an expression from being closure-ified -- breaks and continues may be valid
the existential operator can now be used infix as well
abbreviating the existential operator
added the conditional existence operator
ensure that functions are only called once, when chaining comparators
removing redundant unary check
added Python's chainable comparisons, like: 10 > 5 > 1
simplification of function and prototype naming -- last_assign, immediate_assign, and proto_assign are gone, in favor of 'name' and 'proto' properties on CodeNodes
purely empty functions at the top level should be wrapped in parens, so as not to cause a JS syntax error
fixes for syntax highlighting assignments and regexes
arguments no longer is just a find-and-replace -- it'll fix the arguments variable at the top of scope if you use it in a function body
expression closure wrappers are now safer -- they won't be generated if there's a statement_only inside
added children macro to Node, using it so that all nodes now have a 'children' method -- used for safe references to 'this' within closure wrappers
never try to push a statement_only
adding coffee-haml-filter to the resources section
slightly shorter generated code for ==>
CoffeeScript 0.2.5 is on the books
with splats allowed in destructuring assignment
pulling out pushes into a pushnode
while loops can now be used as expressions -- they return an array containing the computed result of each iteration.
adding bound functions, with test
adding when clauses with multiple values
unified ParamSplatNode and ArgSplatNode into SplatNode
more safety type-checks in nodes.rb
fixing heredocs to use the left-most indent as the indentation guide -- not just the first line of the heredoc
removing commented-out bit
mistaken commit
nicer syntax error messages for newlines and indentation
nicer syntax error messages for newlines and indentation
using Object.prototype.hasOwnProperty.call instead of obj.hasOwnProperty, with an alias, for Rhino and java objects
adding and fixing test for empty strings
allow leading newlines in coffee scripts
CoffeeScript 0.2.4, with pattern matching and heredocs
heredoc docs
adding heredocs, with tests
documentation for pattern matching
got compile_pattern_match about as small as its going to get
a whole chunk of compile_pattern_match was redundant, axed it -- along with the array/vs/object split
a passing test for destructuring assignment (it needs a better name)
first draft of destructuring assignment -- working out the wrinkles -- not sure if we want to do the full spec
swapping around the order of variable declaration in array comprehensions, so that it comes out in the proper order: __a, __b, __c
adding note about parens-around-ambiguous-function-defs to the docs
little lexer tweak
CoffeeScript 0.2.3, with 'of', not 'ino'
added a whole slew of nice Potion examples from the pamphlet -- CoffeeScript stacks up pretty well.
more refactors to nodes
refactoring and commenting nodes.rb Expressions
rebuilt the narwhal interface
bumping the license to 2010
caught a close call bug with object comprehensions and not specifying the value
more docs, more tests
rebuilding underscore.coffee docs, adding a build task -- need to remember to copy over nicer headers
more docs for 0.2.2
updating comprehension speed test with the new normal comprehensions
adding '::' as shorthand for '.prototype.'
big commit -- adding back object comprehensions, using 'ino', versus 'in' for array comprehensions, fixing bug with dollar signs in identifiers
removing object comprehensions from CoffeeScript, they were necessitating the generation of too much ugly JS
better indentation for compile_closure
ignoring 'presentation' folder
allowing comments in the middle of switch statements
allowing chained calls broken up over multiple lines with periods at the front (jQuery-style)
adding test for body-less while, using null as the body so JSLint doesn't get in a tizzy
adding body-less while expressions
fixing calling super from constructors
making extends equivalent to the Google Closure version
separating out the --no-wrap and the --globals arguments, which shouldn't be jammed together
more node cleaning, using idt() instead of TAB
cleaned up nodes.rb indentation code with an idt method
weepy's new speedy comprehensions
mentioning the racc gem in the readme
adding automatic 'return this' for constructors: functions that start with a Capital Letter
added the constructor fix for capitalized functions
fixing the lexer to handle strings that end with a backslash character
adding a warning about parser.rb to the readme
printing a warning when the parser goes missing
ignoring the generated parser.rb
removing the parser.rb from revision control -- it's taking up too much space -- you'll have to generate it yourself with rake build:parser
adding empty return statements -- they return null
next time: don't copy the .tmDelta over the .tmLanguage
if we escape the close-brackets, it won't think single-line objects need folding
add folding for multi-line object literals
comments
adding the 'in' operator
fixing weepy's comment scenario
fixing range literals by making them values, not expressions, and adding tests
adding ranges as expressions, they get expanded into the equivalent array
ellipsis is the new splat
CoffeeScript 0.2.1
docs for arguments conversion
automatic conversion of arguments into arrays
alright, done fiddling. CoffeeScript 0.2.0
more docs
tweaking docs
more docs for 0.2 -- blocks and splats
adding the complete underscore.coffee example to the docs
first pass at 0.2.0 docs
minor doc updates -- let's try pulling in the underscore test suite
removed the whole messy notions of looking downwards for returns or children -- ForNodes now peek at top-level status, and if they're being asked to return a value from the outside
nicer scope inspects
more underscore
putting in a special check for returns within array comprehensions -- not very nice
pretty amazing -- fully functional draft of underscore.js 0.5.2, all in CoffeeScript
fixing a nasty little bug with not dup'ing a string in Scope.rb, causing later functions to start their free_variables where previous functions left off, because they shared their ancestor's @temp_variable string
more underscore examples raised a slight bug with a lexing ambiguity between leading whens (in switches), and trailing whens (in comprehensions) -- made two different tokens to distinguish them
mo' expression examples
 --
adding a statement-as-expression test, and returning null from while loops, if asked
updating fixtures -- all tests now pass -- back to master
logic error in Expressions was causing over-compilation by a factor of the depth of the tree
fixing comment-within-objecta-and-array-literal printing for the new expression regime.
change lexical scoping example to use var names that haven't been already defined
subtle call order bug was preventing variable declarations
lowering the precedence of if/else/while
removing the silly newlines from comments
beautiful -- all examples, tests, and docs are now compiling without JSLint warnings
All execution tests are now passing with statements everywhere
more progress -- you can wrap parentheses around statements now
first rough rough rough draft of kamatsu's closure suggestion -- test.coffee runs, but probably nothing else
bumping version numbers to 0.2.0 in anticipation of release soon-ish
adding a block test and using PARAM_SPLAT to remove the last shift/reduce conflict
Adding kamatsu's proposed block literal syntax
todo
adding splice literals, with tests
rebuilding narwhal uncovered a bug with named functions
fixing the food/eat array comprehension in the docs to not pretend like there's a made-up method on String.prototype
adding consistent highlighting to variable assignment, whether functions or values
better existence test, with tests
adding the notion of existence -- postfixing an expression with a question mark will check if to see if it's not null or undefined
commenting the lexer a bit more
expanding the list of tokens that regexes may not follow, according to the Mozilla JS 2.0 docs
adding steps to range comprehensions
fixing precedence order, so that you can nest range comprehensions
making range comprehensions compile safely, even when you assign to the same variable as your endposts.
 --
allowing indentation within function calls
adding a test for expressions in range comprehensions
test for uminus
allowing expressions within range literals
fixing the regex lexer to make it less agressive when we know it can't possibly be a regex
fix for multiple splats in a function call
adding splats as arguments to function calls
adding a note in the docs about how to build the parser and install the gem
comment about test_execution being the most important
reserving variables for splats the regular way, not through a custom 'var' declaration
adding splats to function definitions
expressions nested in expressions made for some indentation issues -- statements are now responsible for their own leading indentation
adding a test for multiline-array-comprehension-with-filter
enabling multi-line array and object comprehensions
adding a filtered object comprehension test
using push for comprehension results so that it works with object keys, and adding a test for object comprehensions
adding weepy's suggestion to use (for .. in) for array comprehensions, which means that they're now object comprehensions as well
done commenting the rewriter
detailed scan_tokens so that the calling function can indicate the number of spaces to move forward (or backward) in the token stream
making assignment token detection a regex like all the others
pulled out all token-stream-rewriting logic into the CoffeeScript::Rewriter -- let the lexer be simpleminded
adding a rake:ultraviolet build syntax highlighter task, and regenerating the docs with correct highlighting
adding a test case for named functions
updating docs -- need to get back on the computer that has the syntax highlighter for UV installed
updating tests for named functions
making all functions named functions, if children of an immediate assignment
adding proper auto-newline escaping
allowing any manner of indentation in the comments, by adjusting them in the lexer
don't print the confusing indentation numbers when raising ParseErrors for indentation
getting there, finally ... all tests are green for whitespace
the underscore example parses now -- added line number information to parenthetical nodes
moving the newline escaping detection up higher so indents don't overrule it
lex indents with higher precedence than comments
more fiddling with the lexer -- the indentation is super fragile
more fiddling with the lexer -- the indentation is super fragile
rolling back MULTI_DENT regex
regex cleanup -- eliminating some lookahead because Ruby regexps blow chunks (stackoverflows) when you look (ahead) at them funny.
fixed up the comment/assignment interleaving in nodes.rb
rewrote 'rewrite_closing_parens' with an explicit loop -- there was a bug when adding to @tokens in the middle of scan_tokens' while loop -- consider scan_tokens to be on probation until further notice
be more vigorous about  removing mid-expression newlines, 'when' closes implicit blocks, a better comment-detecting regex lexer that doesn't eat outdents
big milestone. examples/code.coffee now compiles correctly under the new whitespace regime
balancing parens closing single-line blocks
fixing up documents example
adding ')' as a SINGLE_CLOSER, although it's probably unsafe
parser and test tweaks for whitespace -- tests are coming along
removed the final shift/reduce errors -- back to zero for the first time in a long time
special case for 'else if' in the lexer
execution tests still pass -- more lexer block insertion and 2 shift/reduces in the grammar now
patching up the lexer and adding a test with trailing whitespace (it was too string for trailing whitespace before)
fixing up narwhal integration (again)
fixin up narwhal factory and adding more implicit blocks to the lexer
patched up lexer to add indentation to single-line flavors of statements -- let's expand this idea
merged in master branch again
fixing the double-printing bug with coffee -r
ignoring test.coffee
removing dots from whitespace examples
clean up a couple of test errors for whitespace
touch-ups cleanups to the lexer and rebuilding the narwhal libs from whitespace'd versions
implementing kamatsu's debt-based lexer for closing delimiters
whitespace parser down to 4 shift/reduce errors -- good enough for me
put the commas on the outside of expression closers
don't break trailing commas with rewrite_closing_parens
killing some newlines in the execution tests, to test the lexer's newline suppression
changing array comprehension filters from 'where' to 'when' to mirror case/when
allowing indentation in object and array literals
still some kinks to work out -- mid-expression blocks
using 'where' for array comprehension filtering, after kamatsu's suggestion -- execution tests pass now with significant whitespace
moving along with whitespace
first draft of kamatsu's rewrite rules -- finally got whitespace to be flexible enough, I think.
got lexer balancing parens, indent/outdents, brackets, and curlies
merging in master
removed unused example
fixing relative path for execution tests
stop shifting args
rebuilding narwhal libs
merging in tlrobinson's fix for package.json
Add package.json to gemspec files so Narwhal integrations works when installed as a gem.
removing broken accidental commit
Add package on command line in case it's not installed in a Narwhal packages path.
part of the way to supporting multiline array comprehensions -- the grammar and parsing is there -- the code generation is tricky
CoffeeScript 0.1.6 -- bugfixes
fixing paths for running coffee compiles CoffeeScript source files into JavaScript.
more underscore examples
more underscore and bugfix edits to code generation
more underscore, and removing custom_assign and return from conditional compilation
coffeescript 0.1.5, just for kicks
docs for range comprehensiosn
got negative ranges working with (much, much) uglier compiled code
that's it for now for significant whitespace -- I really just can't make flexible enough
smarter but uglier lexer -- now handles most significant whitespace cases. Clean it up though... (newlines after outdents)
removing no_paren -- it was optimizing away order of operations
removing no_paren -- can cause order of operations errors
got a lexer working along the lines of what kamatsu proposes
little more progress on whitespace
merging in master
adding newline escaping, with tests
docs
changed bin/coffee-script to bin/coffee
fixed range comprehension indexing
trading the cs> prompt for the coffee> prompt
added array comprehensions over ranges
docs for assignment-as-expression
major internal reworking -- all variable declarations have been pushed up to the first line of the block scope -- all assignment is now an inherent expression
started raising syntax errors for parens wrapped around expressions (they used to silently be ignored)
don't add the no_wrap key to the options hash unless we're going to use it
comment
documenting ranges and slices
reorganizing test fixtures and adding range literals for array slices
CoffeeScript 0.1.4
moved the coffeescript extension over from .cs to .coffee -- let's leave C# in peace. Changed array comprehensions to always return their mapped result, even when unassigned
stopped using __proto__, instead, using a variant of goog.inherits for extends and super()
ForBody is really the ForSource
cleaned up the for grammar and eliminated a shift/reduce conflict
make equals signs full equals of colons -- you can use them inside of object literals now too
allowing = to assign
going back to familiar operators +: is just too strange
added a test to make sure that chained calls work
allowing chained function calls, one right after another
bumping to 0.1.3 ... here we go
better error warnings on the command line
removed bin/cs in favor of a more comprehensive coffee-script command ... now with --interactive and --run
majorly cleaned up the CoffeeScript that defines the Narwhal integration
the narwhal integration written in JavaScript has been replaced with CoffeeScript, and compiler-generated variable names now start with '__'
sped up the execution test a good deal by running it all in one pass
making all assignment-y operators use a colon -- now it's +: -: *: /:, and friends
removed dependency on v8 in favor of bin/cs
Print compiler errors to stderr
fixed the bin/cs repl to save assignment between commands by using the new --no-wrap
the --no-wrap option now disables top-level var declarations
updating docs for isnt
trading aint for isnt -- let's be serious
allowing quoted strings within object assignment, a in JS and JSON
bumping to 0.1.2 to get the super()/extends fix out there
got extends back in the language -- use it together with super
fixing super() calls, thanks to tolmasky
removing the special-case std-reading in favor of '--eval'
document that -e can read from stdin
with a working -n --no-wrap option to disable the top-level function safety wrapper
 ...
outdent lexing is correct now, I think
Command line CoffeeScript
Narwhal support for CoffeeScript
Read from stdin if source is "-"
added and -> &&, or -> || to the docs (they were missing)
this might not work for ))) outdent cases
first, totally broken branch of significant whitespace -- it can handle examples/whitespace.cs though
docs for 0.1.1
bumping to 0.1.1
added the typeof operater as an OpNode
added the instanceof operator to the grammar as an operation node
another wish
docs
added a wish list to the docs
doc tweaks
changing switch/case to switch/when -- it's a better word
added comprehensive linting to the test suit
fixed the broken try/catch grammar
with a more comprehensive execution test that uncovered some missing spots
added some execution test
added readme
first draft of docs are done
waypoint
added git st with the new operator regex
ported over a little more underscore
added the ! sign as an allowed operator
...
more better super docs, better switch docs
added yes, no, on and off as boolean aliases and a nice aliases section to the docs
broken waypoint, but fixed line numbers with the new JS comments
broken waypoint, but fixed line numbers with the new JS comments
for whatever reason, don't need to force else-bodies to compile as statements anymore ... let them do what they want
removed all traces of 'extends' -- it's not any shorter or more convenient than just setting the prototype
got comments within object and array literals working out
first draft of parsing and printing along comments -- unfortunately, not yet working within objects and arrays
passing through comments as tags on Values, but not printing them out quite yet...
nice -- it's pushing down assignments properly (recursively) now
moderate refactor of nodes.rb -- tests pass and examples compile without warnings
clean up children at exit -- had about twenty processes all watching and recompiling the docs
documentation waypoint
added full complement of bitwise operators
added full complement of bitwise operators
making the each fixture a little more like underscore, and avoiding passing assignment into functions from the outside
added the verbose option to the CLI
more little fixes, lots of subtle things, added a verbose logging mode
lots of tweaks make the tests pass again
patched up array comprehensions somewhat. Parens are still a necessary evil, and there's still probably plenty of edge cases
little fixes more examples
adding css for syntax highlighting
todo to-done
finished the first draft of the parser test
adding comprehensive attr_readers to the AST for testing
parser test raises some minor improvements (remove unnecessary ValueNode arrays, etc
adding an initial lexer test
after a lot of grammar wrestling, got the if-else chains to parse unambiguously. Now you only need a single period to close chains of any length.
finally got the function/object/variable assignment indentation straightened out, I think
compiling if-else chains into nice flat ones
first major rework of the nodes -- still need more comments and templatish cleanup, but character tagging is all settled
renamed Nodes to Expressions
finished commenting everything but the nodes -- they're up next
finished commenting the grammar
many more comments, plus a fix for inner-assignment indentation
commented the command-line interface
moved the TextMate bundle into the gem, added a command to install it
added the 'delete' operator
removed the 'default' keyword in favor of an 'else'
removed class checks in favor of statement?
number examples
added exponential and hex numbers
added a nice --watch mode to continually recompile or relint (or reprint) your coffeescripts
cleanups getting underscore to compile
added nice syntax errors
passing through values with line number information that look and act like Ruby natives
cleaned up lexer in order to add line numbers
added the ability to super()
allowing inner slashes in regexes
supporting escaped quotes in strings
supporting escaped quotes in strings
multiline strings
multiline strings
built the first gem -- works just fine
completely reorganized for a gem and the 'coffee-script' command
--
down to the last shift reduce conflict -- leading and trailing whitespace
a smarter lexer brings us down to three shift/reduces
two more shift/reduces down, 8 to go
renamed it all to CoffeeScript
with an 'expect 10', chapter one of mysterylang is written
fixed a ton of shift/reduces by adding order of ops -- let's do more
--
got case statements wokring
 --
made array comprehensions into expressions
fixing object assignment indentation
 --
array comprehensions can pass the index
a bit more underscore
add free variable name lookup. Now that we have lexical scope, array comprehensions are greatly improved
got lexical scoping working -- even fancier returns with assignment as the last statement in a function body
with shelling out to javascript
got postfix if and unless onboard
more todos
more todos
first draft of array comprehensions, but they stink.
added break and continue
lots of goodies -- smart reducing of redunant parentheses, auto function returns now get passed down into statements.
with try-catch working
reduce/reduce conflicts are gone
one more reduce/reduce down
ignoring the parser debugging
back to code
simplified expressions heirarchy
not getting anywhere
more more, including &&=, ||=
moving right along
line cleaning -- arglists are broken broken
initial commit of the mystery language
