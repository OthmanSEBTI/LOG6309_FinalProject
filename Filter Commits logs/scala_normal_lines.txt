Reduce implicit search space for BuildFrom avoiding divergence
Restore IterableWrapper equals and hashCode
Tweak test for readability
Test roundtrips path.toUri.getPath for windows
construct URL in manifestAt directly
Upgrade to asm 9.4, for JDK20 support
Upgrade -Vprint doc and default to typer
Document: don't allow characters with unicode property Bidi_Class in source files
sbt 1.7.3 (was .2)
Eval class and enum constants
Careful interpolating windows paths
Partest realeasy warns about uncommitted check files
Partest realeasy mode
Update optimizer class path when release is set
Simplify TargetTest
Require element copies succeed
Accept -Vprint:all, -Vprint:~tailcalls
Test REPL valueOfTerm
Tweak compatible implicit check for refined type
Update sbt to 1.7.2 in 2.12.x
Ignore override type just for whitebox expansion
mailmap: condense Liang Yan entries
Tweak t12201 to run unoptimized
new reference compiler is Scala 2.13.10
Test for old crasher
Preserve tree attachment in the typer's Block/Apply inversion transform
Avoid parsing code comment twice
Replace "Traversable" by corresponding "Iterable" in doc comments.
Regression test
Regression test for view slicing, stack safety
Arg files are one arg per line
Restore -Vprint-args
Clarify spec of root contexts
Test for more deprecations suppressing deprecations
Xsource:3 respects refinements by whitebox overrides
Revert using mixin productIterator for case class
Avoid warning on setter in trait
Update package.scala
ValueOf: improve Scaladoc and implicitNotFound message
New reference compiler is 2.13.9
fix a tiny error in the spec
use MiMa 1.1.1 (was 1.1.0)
get rid of some warnings noise
fix scala/bug#12635
use modern sbt syntax in readme
Update jquery to 3.6.1 in 2.12.x
exclude more Jackson stuff from Steward
fix Scala Steward configuration
New reference compiler is Scala 2.12.17
Preserve null policy in wrapped Java Map
update .mailmap
Revert "Args files are 1 arg per line, fix -Vprint-args -"
Revert "Trim and filter empties in arg files"
Revert "process.Parser strips escaping backslash"
remove tasty escape hatch for 3.2.0-RC4
Prevent Function0 execution during LazyList deserialization
Trim and filter empties in arg files
Args files are 1 arg per line, fix -Vprint-args -
fix Median-of-three pivot selection in quickSort method
Update slf4j-nop to 2.0.0
Accessible lint less triggered for sealed, restricted owners
bump Scala 3 version in TASTy support (3.2.0-RC4, was RC1)
bump Scala 3 version in compileWithDotty test
Tests of Source are junit
process.Parser strips escaping backslash
Warn eta-expand to Java class with tweaked advice
Massage message for eta-expand functional interface
Use strip margin interpolator by import or package
Warn eta-sam under -Xsource:3 per Scala 3
fix settings.TargetTest on JVMs > 8
don't consider imports when typing package declaration name
[nomerge] on 2.12, -release should not set -target
Urgent Scaladoc for LinearSeqOps#isEmpty, head, tail
Warning about changed precedence in imports when migrating to 2.13
Check bridge for bad override induced by erasure
scala-xml 2.1.0 (was 1.0.6)
Java wrappers need not be case classes
Show expected -Wvalue-discard with type params
Add support for backticks in scaladoc links
[backport] Accept space separated argument in ChoiceSetting
in build, include more projects in root aggregate
add copyright header to tastytest sources
Test status quo empty multi-arg infix pattern
Add VBAR per eagle-eyed review
Mention type of unused value and mitigation
Tweak setInfo and do not warn on return of arg
Add -Wnonunit-statement and -Wnonunit-if
msys2 and mingw should also call cygpath on classpath
in -Wvalue-discard message, include type of discarded value
Better use of isJavaAtLeast in test
[backport] Align -release and -target per Scala 3
Handle case class deprecation more directly
Improve positions of async-transformed code
Update java-diff-utils to 4.12
Abstract parent copy does not suspend case copy
Strip cast to detect List.apply in CleanUp
Restore dealias Nil in Cleanup
Revert currentRun.isScala3 to a Boolean
Don't suspend warnings without position
test fixes
Restore deprecated boolean setting conversion
Remove setting conversion to boolean that boxes
Accept and ignore using in args
Allow security manager for partest on JVM18
Reflect future status of `App` in scaladoc (#10070)
sbt 1.7.1 (was 1.6.2)
simplify Actions config with setup-java@v3 caching support
Simplify macro exception stack handling for JVM18
Prevent Erasure from pushing an adapt onto matchEnd labels.
Accept and ignore using in args
handle multiple argument lists for annotations
only force some annotations this is because we can get away with not forcing most annotations.
test new exports in extensions
adopt new constructor scheme
stop SpecializeTypes for scala3Defined
debug failing tests
upgrade tasty versions
IndexedSeqOps overrides reduce/fold
Introduce a flag to enable Scala-3-style implicit resolution
Implement optimization from StrictOptimizedSetOps in immutable.Set[1,2,3,4]
Add a tree attachment to mark auto-applications
Remove a useless transform in LambdaLift, which damages patmat trees.
Add more bytecode tests with the status quo of codegen control flow.
Revert "Partest uses -release 8"
Only keep static members when looking up java static members
Don't set term symbol to Ident of type name
CommandLineParser is process.Parser
improve escaped-quote handling in sys.process and tools.cmd
When reporting unused import, check deprecations
Partest uses -release 8
Minor tweak in Erasure
AnsiColor is also triggered by println
Restore Seq.apply rewrite and partests
Revert "Sleep after travis failure to avoid truncated logs"
Explicitly type some implicit vals in the compiler
Explicitly type some implicit vals in the compiler
Sleep after travis failure to avoid truncated logs
chore: Set permissions for GitHub actions
addString returns the builder
StringBuilder append,delete,insert are this.type
Unary prefix operator must be unbackquoted
Only keep static members when looking up java static members
re-STARR onto 2.12.16
Vector{3..6}.prependedAll updates {len12..len12345}
Attachments for infix Apply and postifx Select
Use intercept alias for assertThrows
Position test for selections from block, xml literals
avoid unnecessary blocks for xml ASTs
fix start position of selections from blocks
fix start positions of xml trees
add range positions to blocks
Handle `If` in `BCodeBodyBuilder.genCond()`.
Handle `Block` in `BCodeBodyBuilder.genCond`.
Inliner: Load return values on the stack before jumping to post-call.
Optimize typical matchEnd() LabelDefs for LoadDestination.
Use explicit destinations in codegen to avoid uselessly jumping around.
Uninstate global.treeTpe
Add bytecode tests with the status quo of codegen control flow.
Update jackson-annotations, jackson-core, ... to 2.13.3 in 2.12.x
-Wunused:synthetics is first class
fix & 1 test case for #12561
Show tree diff under -Yprint-trees:diff
Deprecate Source.fromRawBytes
Chase further tweaks
fix reading symbol of Select qualifier
Add synthetic constructors only to Java annotations
Style improvements
Forward port improvements
Null type is trivial for warning
loosen unicode directional character check
JMapWrappers getOrElseUpdate is computeIfAbsent
Java ConcurrentMap wrapper updateWith is compute
quote path separator before split
Handle `If` in `BCodeBodyBuilder.genCond()`.
Handle `Block` in `BCodeBodyBuilder.genCond`.
Inliner: Load return values on the stack before jumping to post-call.
Optimize typical matchEnd() LabelDefs for LoadDestination.
Use explicit destinations in codegen to avoid uselessly jumping around.
Remove a fallback in InlinerTest.oldInlineHigherOrderTest().
Add bytecode tests with the status quo of codegen control flow.
Improve lookahead during java textblock
[backport] Error on source files with unicode directional formatting characters
Reduce warnings
VectorBuilder clear test
restrict experimental definitions
Partest based on java version
Error on source files with unicode directional formatting characters
=col Clear VectorBuilder more.
Only check accessible extension for non-empty refinement
Improve position of context bound, add type to error
Revert Scala 3 aliases
Add Scala 3 aliases, limit release, adjust target
Use colon arg uniformly
Align -release with Scala 3
Update sbt-header to 5.7.0 in 2.12.x
Upgrade to asm 9.3, for JDK19 support
Add checkFail for -target:jvm-7
Support JDK19
Maintain iteration order in SetOps.--
Adding tests for #9986
Safe lastOption for concurrent maps
Improve tests
[backport] Allow ? as a wildcard even without -Xsource:3
Remove the unused productIterator synthesis only
Further net reduction in line length
Prefer StandardCharsets
Use normal mixed-in Product.productIterator
Ignore conversion to type with inaccessible member
Regression test or example for changeOwner in macro
Avoid unnecessary update of a map when updatedWith changes nothing.
Update sbt-mima-plugin to 1.1.0 in 2.12.x
Using 'extension' rather than 'pimp'
Update sbt-mima-plugin to 1.1.0
Allow ? as a wildcard even without -Xsource:3
Prefer extending AbstractFunction
Consistent slice sorting
Desanitize comments and identifiers
Probe only for susceptible annotations
Refrain from adding ctor to class from ct.sym
Lift try blocks to methods in value class invocations
Update links to completed sips
Emit all bridge methods non-final
Explicit SerialVersionUID annotations for orderings
Correct typo in Scaladoc
Open package modules of user roots if needed
small spec cleanup
keep underlying exception when deserializing ModuleSerializationProxy fails
Comment and expand test of nil rewrite
Handle alias when checking for List.apply
Nicer error for bad -Ygen-asmp
Avoid extraneous conversion
make sbt version upgradable by Scala Steward
whoa there Scala Steward, hold your horses
Update jackson-annotations, jackson-core, ... to 2.13.2 in 2.12.x
then is future
Deprecations suppress deprecations
Check for windows device names
Use runReporting lint-performance
LamdaLift tweak
GroupMap benchmark
StringOps.collect
Possible micro-optimizations
Simplify test
minor typo
Avoid key lookup unless null is involved
expand GitHub Actions matrix (add Ubuntu, more JDKs)
Backport style points from refchecks forward port
Tests for abstract override check
Restore scope iterator optimization
Use fake dir entry in classpath for test
Avoid potential cycle in recent change to Unpickler
Backport improved sequence arg error messages
Doc for combinations includes different words
Reduce default capacity of classpath's pool of ZipFile for each JAR
Tweak version strings in Properties
Interpolators of string are whitebox for folding
Avoid NPE for annotation arg
update doc of `Seq.combinations`.
doc: fix -release versions
add -Vdebug-type-error option, with abbreviation -Ydebug-type-error
Tweak help text and usages per review
Require pattern selections in -opt:inline
Use subcolon args to simplify optimizer options
No warnings for you! Scaladoc
Stop the culling!
Import warnings have an origin
Issue warnings in silent mode
Remove stray unzip from Properties converter
[backport] make -target support JVM 8-18 with deprecated warning for 5-7
Hygienic StringContext under -Xsource:3
Check proper inclusion of arg err before blaming s
Improve error display of missing impl
Append maybe-matching sig to stub advice
Java default is never mismatched missing method
Remove legacy check for @PolymorphicSignature
optimize mutable.TreeSet#{max, min}
Update slf4j-nop to 1.7.36 in 2.12.x
fix small oversight in sbt-header config
Update sbt-header to 5.6.5 in 2.12.x
Lint is/asInstanceOf inferred type arg
Lint multiarg infix assignment
Scala 3.1.2-RC1 (was 3.1.1-RC2)
Improve error position and recovery for bad dollar
Backport simpler format interpolator
Restore partest crash handler
Update sbt to 1.6.2 in 2.12.x
Update sbt to 1.6.2
Make fields for locals caputred in traits non-final
Avoid crash when super accessor requires Java interface as direct parent
Update slf4j-nop to 1.7.35 in 2.12.x
minor cleanup: avoid importing language.experimental._
Bump dottyVersion to 3.1.1-RC2
Lint private[this] vars which are never set
remove now-unused JDK 6/7 code in backend
Avoid crash on message with missing type params
Prefer Boolean.getBoolean
Tweak function doc on details
Ignore .bsp
Update slf4j-nop to 1.7.33 in 2.12.x
Remove `.git` suffix from scm.url in POM file
Update sbt to 1.6.1
re-STARR onto 2.13.8
upgrade tasty reader tests for Scala 3.1.1
Update sbt to 1.6.1 in 2.12.x
bump copyright year to 2022
Prefer type of overridden member when inferring
Don't warn unused params for trivial RHS
-Wperformance lints *Ref boxing and nonlocal return
Clarify on key mutation
Add nullify test for PriorityQueue
Tweak PriorityQueue class doc
Normalize patterns before hash consing them for analysis
Client doc before implementation notes
Test for usage doc comment position
Use ArrayBuilder for line indices
Update junit-interface to 0.13.3
Update spec for assignment to prefix op expr
sbt 1.6 (was 1.5)
GroupedIterator uses ArrayBuilder
Improve stack depth test of ConcatIterator
Simplify grouped tests
GroupedIterator withPartial and withPadding are exclusive
fix spelling
Collapse positions in macro expansions after duplication
Update sbt to 1.5.8 in 2.12.x
Move two old partest to junit
Grouped iterator allocs and frees when it can
Simplify grouped buffer fulfillment, clarify docs
JQuery 3.6.0 (was 3.5.1)
[backport] eliminate warning when running partest
[backport] cut down on warning noise in 2.12 build
Tweak doc for ordering of SeqMap
upgrade all jackson libraries together
Simplify grouped next/hasNext
Avoid Option allocation
Update jackson-module-scala to 2.13.0 in 2.12.x
Update jackson-annotations, jackson-core to 2.13.0 in 2.12.x
Update org.eclipse.jgit to 4.11.9.201909030838-r in 2.12.x
Update ant to 1.10.12 in 2.12.x
Update sbt-mima-plugin to 1.0.1 in 2.12.x
Revert "GroupedIterator improvements"
Update sbt to 1.5.7 in 2.12.x
Update sbt-jmh to 0.4.3 in 2.12.x
Update jol-core to 0.16 in 2.12.x
Update org.eclipse.jgit to 4.6.1.201703071140-r in 2.12.x
Update ant to 1.9.16 in 2.12.x
Update sbt-header to 5.6.0 in 2.12.x
Update sbt-mima-plugin to 0.9.2 in 2.12.x
Update jackson-module-scala to 2.9.10 in 2.12.x
Update jackson-dataformat-yaml to 2.9.10 in 2.12.x
Update jackson-databind to 2.9.10.8 in 2.12.x
Update jackson-annotations, jackson-core to 2.9.10 in 2.12.x
Update biz.aQute.bndlib to 6.1.0 in 2.12.x
Backport nowarn advice tweak
bye bye Gitter, hello Discord
upgrade logback and slf4j
sbt 1.5.6 (was 1.5.5)
Tweak inferMethodInstance to consider if implicits are enabled
Rejigger missing methods check
Update sbt 1.5.5 to 1.5.6
Simplify check of _root_ usage
Deal with Object/Any impedence mismatch under -Ypickle-write-java
Minor cleanup for readability
Don't emit `releaseFence` for class params of specialized classes
GroupedIterator improvements
[bug#12473] Throw on unsigned type in `NumericRange#reverse`
Curtailed promise of symbol literal type
Trim Symbol class text
fix build (JDK 17 + bootstrapped + fatal warnings)
Followup improvements to RefChecks
[backport] RefCheck types uniformly, handle existentials and annotations
JLine 3.21.0 / JNA 5.9.0 (was 3.20.0 / 5.8.0)
RefCheck types uniformly - handle existentials and annotations
Improve supplementary char support
cleanup documentation for ordering
Document stack preserves iteration order
Stack popAll preserves order
Avoid negative remainder
Add comments to sliceIterator
Restore lazy iterator.drop
re-STARR onto 2.13.7
BigInt delegates for inputs not in domain
Remove unused code for NL before LBRACKET
Add comments and meaningful names per review
Warn on bracket after newline
Template with empty body/parents has good position
Add -h abbreviation to scaladoc help.
remove force of annotation constructor
add existential flag to wildcards
test inner class singleton enum
junit-interface 0.13.2 (was 0.11)
add test for given class; add printTasty script
update TASTy to 28.1-0, patch tests
Only truncate qualified types when full path is a shorthand type.
Add -Vimplicits-max-modules option to control how types are printed in -Vimplicits errors.
clean up deprecation warning suppression
Deprecate anyVal.formatted(formatString)
suppress JDK 17 deprecation warning in ModuleSerializationProxy
forward-port PR 9751 test case to 2.13.x
one more try at fixing spec publishing
ClassValueCompat to support systems without java.lang.ClassValue
Add `insertAll` benchmarks for `ArrayBuffer`
Update `ArrayBuffer#mutationCount` more precisely
[bug#12284] Ensure `ArrayBufferView` is consistent with its buffer
Add more addAll benchmarks for `ArrayBuffer`
[backport] emit deprecations for classOf arguments
Enhance warning message in the GeneratedClassHandler
Disallow toplevel wildcard type param
scala/bug#11846
sigh. fix spec publishing fix
revert bad change to spec publishing
AdoptOpenJDK is now Temurin
emit deprecations for classOf arguments
fix t2318 on JDK 17
clean up ToConserveTest
deprecate IterableOps.toIterable
reduce usages of toIterable
Windows CI: test on 17 final (not early-access)
test to ensure collection conversions conserve immutable
Revert "test on JDK 18-ea"
Module does not trigger missing interpolator
Minor cleanup of ScalaCheck properties
Remove unused AssertUtil.assert8.
test on JDK 18-ea
Avoid `case _: C[_]#K` type test for higher-kinded `C`
re-STARR on 2.12.15
re-encrypt SONA_USER and SONA_PASS
add comments to Travis-CI config
Change `private[concurrent]` for methods used outside `concurrent`
Optimise TrieMap methods by using eq
Use AssertUtil.assertThrows instead of try-catch
Refactor BTypesTest#typedOpcodes
ISSUE-12393: Parse concrete private interface methods in Java
re-enable bsp in root project to restore build.sbt support in IntelliJ
Small build cleanup
Prevent compilation of library/reflect/compiler on bsp import
skip a few projects in bsp export
Add specialized builder for s.c.i.SeqMap
refactor tasty sources
fix scala/bug#12449: keep ThisType prefix in more places
Extra help for stable ident pattern not found
Allow `case` in pattern bindings even without -Xsource:3
VM.RELEASE_FENCE catches NoSuchMethodException for java.lang.invoke.VarHandle.releaseFence invocation
Advertise that -Xsource:3 can be used to enable ? as a wildcard
Require backticks when defining a type called `?`
Allow `import x.{*, given}` under -Xsource:3
Allow `import x.{*, given}` under -Xsource:3
Do not compute size in TrieMap#isEmpty
[bug#12009] Make ArrayBuffer's iterator fail-fast
[bug#12121] Add test for inserting an ArrayBuffer into itself
Add ArrayBufferBenchmark
Update and reorganize benchmarks readme to be less confusing
fix scala/bug#12409: tasty - fix case class apply default params
fix scala/bug#12399: add tests
remove Whitesource
Only deprecate using a Scala 3 keyword as an identifier for definitions
Mark constructors that need a releseFence in specialize
Make fields assigned in specialized constructors mutable
Not-private fields are not final in bytecode
Allow `case` in pattern bindings even without -Xsource:3
Deprecate using Scala 3 hard keywords as identifiers
remove unnecessary asInstanceOf and move benchmark initialisation to setup method
Only issue 'unused nowarn' warnings when there are no errors
optimise ArraySeq.map
Clean up junit test
Deprecate ad hoc group names with Regex and .r
Align JNA version with that used in by latest jline
Change show-type shortcut to ctrl-alt-T
Align 'show type/AST' help with actual keybinding
fix scala/bug#12420: complete LambdaType param symbols lazily
Error on bad unapplySeq type
Advice 1:1 replacement
Teach backend to emit `iinc` instructions
Format typo in ClassfileAnnotation docs
Inline Lifted.apply in condOpt
Travis-CI: add JDK 17 (replacing JDK 16)
build: extend fatalWarnings setting to cover Java code too
JDK 17: get t2318 passing
JDK 17: suppress deprecation warning
JDK 17: suppress SecurityManager deprecation warnings
Windows CI: add JDK 17 (alongside 8)
JDK 17: fix testUncaughtExceptionReporting
JDK 17: fix StringLikeTest
make MultiReleaseJarTest pass on Windows
sbt 1.5.5 (was 1.5.4)
Accept supplementary characters in identifiers
Silence unused-nowarn warnings
Windows CI: add JDK 17 (alongside 8)
make MultiReleaseJarTest pass on Windows
fix StringLikeTest on JDK 17
Don't expand the name of accessors
sbt 1.5.5 (was 1.5.4)
make -target support JDK 18
upgrade to ASM 9.2, for JDK 18 support
upgrade to ASM 9.2, for JDK 18 support in optimizer
Specialize trait val setters (forward to overload)
support local sealed children
be more lazy in TastyReader
fix scala/bug#12369: do not force sealed child
trace nontrivial operations
add tasty unpickling tracing framework
refactor tasty reader logging
Avoid entering synthetic trees during specialization
Test case for 7970
Avoid deprectated DSL in SBT build in two more places
Add test for scala/bug#10016
Remove special case in maybeRewrap
When checking bounds fails, return original undetermined parameters
Make a home for Java reserved identifiers and fix a comment
Apply suggestions from code review
Make contents of scala-buildcharacter.properties deterministic
Configure OSGI bnd tool for reproducible builds
Emphasize PartialFunction.applyOrElse
[backport] Update to SBT 1.5.4 and its slash DSL
Update src/library-aux/scala/Any.scala
Normalize partests for classpath and stderr
scala/bug#12395 add default implement for `redrawLine`
Tweaks for readability, provisional test
union/intersection
More correcter type patterns in synthetic code
fix more uncheckable type args in the library
Tweak message if multiple unchecked args.
Update lib for uncheckable type args
Refactor checkable and use set
redo documentation of isInstanceOf with more details
Revert to JDK 8
Temporarily move to JDK 16 for Travis
Temporarily move to JDK 11 for Travis
[backport] avoid MiMa complaints on JDK 11/16
[backport] Make test suite work on JDK 11/16
Test & change package module deferred opening setup
[Library] Remove allocation overhead in Iterator#collect
Always generate Record constructor, unlink later if a matching one exists
Tweak test to wait for expiring thread
Annotations on generated accessors
Use `StringConcatFactory` for string concatenation on JDK 9+
Avoid IllegalArgumentException in JDK17+ for lambda deser.
Heed unused import warnings
Include -release arg in cache key for ct.sym classpath element
Speed up BSP import of project into IDE by skipping JMH source gen
Backport strip parens on future varargs
Simplify pattern3
Strip parens as needed for varargs expr
Retry sealed traits for relatedness
sbt 1.5.4 (was 1.5.3)
Remove workaround for scala/bug#5954
progression test: error stale reference inherited package object member
Add test for progression in compiler determism
Tests that require lazier loading of package.class
Consolidate productElementName test
Limit productElementName to productArity
Wildcard import cannot be renamed
[backport] Handle star in import selector
Delay package object decls entering to the package object phase
Avoid possible NPE after cancelled compilation
Avoid inlined varargs after named arg rewrite
Hide REPL wrapper details from type/tree hint output
Repl type-hint should Print inferred DefDef/ValDef tpts
Test for fixed issue
Don't introduce synthetic val res = in REPL completion
Make API / Type / AST help compat with multi-line iinput
Improvements to code assist in the REPL
More details to forward reference error messages
ArrayOps must convert to result array type
Generalize condition when to skip override checking for Java members
sbt 1.5.3 (was 1.5.2)
Regression test for varargs and seq override
Remove dead code path
Assert redundant boolean
Skip null check on unapply calls for value classes
Check that varargs is applied only to methods
re-STARR on 2.12.14
No protected accessor when accessing through self type
Adapted multiarg infix is just a tuple
Handle Scala 3 star in import braces
sbt 1.5.2 (was 1.5.1)
Restarr on 2.13.6
Restore SubstMap's public API (unsealed, constructors, etc)
support Scala 3.0.0 final
refactor Erasure
Address JMH warning about non-public @State classes
Add a benchmark on pattern matching vs alternatives
Upgrade Dotty to 3.0.0
[backport] Update instructions an automation for using JITWatch for benchmark analysis
[backport] Documentation and automation for using JITWatch to analyse JMH benchmarks
Upgrade to sbt-jmh 1.4.2
Remove obsolete build config from benchmarks
Handle Singleton types in patmat's outer prefix align testing
add copyright notice for BigInt#longGcd
optimise immutable.Queue.last in case `in` is nonEmpty
Override checks between Java-defined members only for mixins
Catch ClassCastException in Map.equals / Set.equals
Clarify the semantics of `Map.equals` and `Set.equals` in Scaladoc
single sym for specialErasure
Infix warn on migration
Backport Generalize isOperator and test for assignment op
Backport Refine condition of leading infix operator
Backport Allow infix operators on their own line
Postfix error doesn't suppress warnings
Test status quo for leading infix
Added comment about nonnegativity on BigInt.longGcd
Optimized BigInt operations
Introducing BigInt new storage scheme
Force every BigInt construction through the companion BigInt.apply method
Add BigInt constructor named argument syntax test
Adding BigInt benchmarks
Tweak ReusableInstance initialSize
Reusable is not thread-safe
Simplify class hierarchy for SubstSymMap
enable fatal warnings in manual subproject
Deprecate calling a type `?` without backticks
MiMa 0.9.0 (was 0.8.1)
partially revert scala/scala#9365 to preserve bincompat
remove INTERNAL flag
Mutable Symbol substitution to `cloneSymbols` and `copyRefinedType
Handle Singleton types in patmat's outer prefix align testing
add escape hatch for scala 3.0.0
handle invisible flag
add regression test for object access -also generate fresh wildcard name for wildcards
Refactoring
select non-privatelocal values.
add SCALA3X flag and optimise erasure
test intersection erasure with value class parameters,
Update to Dotty 3.0.0-RC3, fix tests.
Differentiate Scala 2 and Scala 3 wildcard identifier names
address reviews
Parse `+_` and `-_` in types as identifiers to support Scala 3.2 placeholder syntax
Gate `-_`/`+_` parsing behind `-Xsource:3` to guarantee minimal disruption to existing code
Update template.js
Generate attributed trees when creating bridge methods
Perform override checks again for two Java-defined methods
No access boundary check between two protected Java members
Differentiate Scala 2 and Scala 3 wildcard identifier names
Fully JIT inlinable settings/statistics enabled checks
Put all debug/developer behind an AlmostFinalValue false
Rework Statistics to be faster & avoid stale state
Benchmark and simplify AlmostFinalValue
bump copyright year to 2021
Shorten links in apidocs for Java
Revise workaround from ScalaCheck 1.15.1 update
[backport] fix back-quoted constructor params with identical prefixes
Adjust conversion of AbstractFile's name to TypeName
Avoid contention in classpath access
Cache JRT and --release (ct.sym) classpath elements.
Include --release version in cache key for classpath cache
Parse `+_` and `-_` in types as identifiers to support Scala 3.2 placeholder syntax
ScalaCheck 1.15.4 (was 1.15.3)
Rectify test code
Avoid attempt to load plugin from empty path
Support symbol literals under -Xsource:3
Fully JIT inlinable settings/statistics enabled checks
Put all debug/developer behind an AlmostFinalValue false
Rework Statistics to be faster & avoid stale state
Benchmark and simplify AlmostFinalValue
travis notifications on slack only for scala/scala
Cleanup benchmark files
Member records are static
sbt 1.5.1 (was 1.5.0)
Support writing `&` instead of `with` in types under `-Xsource:3`
Support writing `&` instead of `with` in types under `-Xsource:3`
SI-11908: support JDK16 records in Java parser
[forward port from 2.12.x] GitHub Actions: build and test on Windows
SI-12290: support JDK15 text blocks in Java parser
Partest: use a `// java: -flags` comment instead of .javaopts file
make some pre-jdk-8 tests more direct
test case for issue 9530
Partest tests can require a java version range
add travis notifications to our slack
Allow soft keywords `open` and `infix` under -Xsource:3
Support Scala 3 vararg splice syntax under -Xsource:3
Support Scala 3 wildcard and renaming imports under -Xsource:3
Support `?` as wildcard marker under -Xsource:3
Support `case` in pattern bindings under -Xsource:3
Add infrastructure for -Xsource:3 support
Cache -Xsource comparisons in currentRun
Rewrite TypeApply's type arguments to use explicit outer references
GitHub Actions: Windows CI: align with Travis-CI, use simpler bootstrap
Add null check for getURLs-method
Build and test mergely on JDK 16 (on Travis)
Upgrade Dotty to 3.0.0-RC3
mima filter for CharSequence.isEmpty mixin forwarder
allow reflective access to java.lang in tests
remove obsolete CI scripts
GitHub Actions: build and test on Windows
bump sbt to 1.3.13
Handle a few JDK deprecations
Allow soft keywords `open` and `infix` under -Xsource:3
Support Scala 3 vararg splice syntax under -Xsource:3
remove faulty assertion in backend
More accurate outer checks in patterns
Support Scala 3 wildcard and renaming imports under -Xsource:3
remove references to Bintray and JCenter
Revert -Vimplicits back to default false
Default -Vimplicits to true to see test impact
Clean up splain
Do not add self-invoke evidence in parser
Integrate splain – implicit resolution chains and type diffs in error messages
Tweak message for Scala main
Improve text alignment
Test status quo for Scala main
Drop old ScalaVersions
Check for bad param names on overload
Emit LocalVariableTable for mirror methods
Rework string switching to use less labels/gotos
Give run/string-switch-pos an alternative pattern case
Don't introduce dead code null assignments
async: Elide tryGet call if not needed by future system
Allow custom async implementations to elide try/catch in generated code
Minor cleanups in async phase
Use eq rather than == for sentinel check in async generated code
fix p12366
Support async trees fsm() as a sibling of class statemachine
Another test for semantics of local objects
Support class constants as invokedynamic boostrap args
Replace 0.asInstanceOf[B] with null.asInstanceOf[B]
sbt 1.5.0 (was 1.4.9)
scala/bug#11896
spec: include pattern matching function in block expression
Spec: add block expression to function application
Support `?` as wildcard marker under -Xsource:3
Upgrade Dotty to 3.0.0-RC2
Support `case` in pattern bindings under -Xsource:3
handle .inputtrc scala/bug#12269
Only when all methods are Deprecated should they be displayed `Deprecated` to users
clarify what it means to 'usually' evaluate in that order
test case for scala/bug#7994
fix #12357: enter late all inline methods from TASTy
Avoid classfile parsing of specialized variants just to unlink them
Don't pickle `@nowarn` annotations...
in user-facing contexts, call it REPL not interpreter
Typo in test
Make more annotations extend ConstantAnnotation
Spec for \" in interpolated strings
Allow \" in single-quoted string interpolations
include spec updates for change
allow $ escaping double quotes in interpolations
Convert enrichments tests to junit
Byte and Short get signed toHexString
check private[this] members in override checking
[backport] Another correct seeding of root entry
sbt 1.4.9 (was 1.4.8)
Test case for override access check when overridign Java methods
Try to fix the flaky patmat test
Make restarr <-> reload switching faster
REPL: Wrap annotated expressions in a "resN" result val
Tweak pattern for cntrl chars in REPL
Add note about top-level private templates in the section about modifiers.
Don't discard suspended parser warnings in REPL
[backport] Follow JDK 11+ spec for signature polymorphic methods
Follow JDK 11+ spec for signature polymorphic methods
Support scala STATIC methods in constant pool MethodHandles
[nomerge] Reuse `tasksupport` in CombinerFactory
Move suspended warnings back from CompilationUnit to RunReporting
Test case showing macro to summon an j.l.i.MethodType from a DefDef
Improve support for macros targeting invokedynamic
Backport fix for detecting jar
Store suspended warnings per compilation unit
Repl indents for alignment after regression
Enable parser warnings in REPL
Unfilter some exhaustivity tests
Simplify combineCasesNoSubstOnly & shift propagateSubstitution
Resolve or just remove some TODOs + dead code.
Remove some "2.10/2.11 compatibility" in patmat
Remove trailing references/infra for virtpartmat
Use -s option to decode junit test names
2.13.6 is next; re-STARR on 2.13.5
fix publishing: only use bionic in spec job, not main job
Revert "upgrade sbt-pgp to 2.1.2"
upgrade sbt-pgp to 2.1.2
RIP icode
update mailmap, post-2.13.5
Spec for name based and irrefutable patterns
cleanups
Add missing @SerialVersionUID on collections
MiMa whitelist for RedBlackTree internal changes
Add missing MiMa filters for NewRedBlackTree
Make sure isEmpty's type isn't constant folded
make literal true extractors irrefutable
allow literal true instead of Boolean as extractor type
irrefutable name-based extractors
bump JUnit and ScalaCheck versions
add regression test for selecting extension method
Upgrade Dotty to 3.0.0-RC1
refactor
update to Scala 3.0.0-RC1, re-enable tests
block extension method with 2+ type parameter lists
Update tasty reader for existing tests
Retain positions of SingletonTypeTree
Don't warnUnusedNowarn in scaladoc
Revert "Give Iterator.newBuilder an efficient addAll"
upgrade sbt plugin versions
Don't pickle `@nowarn` annotations...
Style tweaks
Work around dummy trees with no position
make -target support JVM 17
upgrade to asm 9.1, for JDK 17 support
upgrade to asm 9.1, for JDK 17 support
Forward port ClassTag caching from 2.12.x
Add some tuple + inexhaustive retroactive tests
Warn on total function for catch handler
Catch any expression
Cleanup and document testkit/AllocationTest
User test case
Use the upper bound of type skolems to enumerate subtypes
Enumerate subtypes by approximating type skolems to their upper bound
patmat: Break up enumerateSubtypes
Teach typedConstructorPattern to ignore non-redefining unapplies
Emit exhaustivity warning despite uninhabited types
Import from _root_
make -target support JVM 13, 14, 15, and 16
upgrade to asm 9.0, for JDK 16 support
Improve REPL output filtering for color escapes
upgrade to asm 9.0, for JDK 16 support
Use a stock URLClassLoader in the scala runner for parallel capability
IntelliJ readme: various small improvements
sbt 1.4.7 (was 1.4.6)
Refcheck throws on type
JLine 3.19.0 (was 3.18.0; 2.13.4 had 3.17.1)
Give Iterator.newBuilder an efficient addAll
Refcheck throws annotation
Drop "!grouped" guards in 3 cases of enumerateSubtypes
Drop commented out sign/signum in Rich*, leave a comment
Test size=23 unrelated/redefined unapplies
Cleanups from fixing a bug in typedConstructorPattern
Support ConstantAnnotation when extracting literal annotation arguments
... revert back to fix MiMa, regressing the tests
don't box primitive values  to call static methods on java.lang.Double/Float/Integer etc
Faster `Array[T](t)` for @specialialized T.
Adjust duplication with git blame
add test for inheritance
Avoid inferring Any old thing
refactor isModule check
don't allow module types for new, but do allow them for classOf
Accept consecutive if in for loop
async: await under synchronized is an error
Regression test per eed3si9n
Drop the "Name with" in Name's ThisNameType
update some antiquated language in our man pages
upgrade Redcarpet (avoid sec vuln)
Use Run reporter for wconf
Reduce nowarns that warn instead of unwarn
Convert cygpath after handling toolcp
document why OrderingOps can't extend AnyVal
Note warning category for unused nowarn
Handle higher-kinded type parameters in SpecializeTypes
less allocation on deserialisation of RedBlackTree (SortedMap) reuse deserialisation logic for map and set
Re-enable more serialisation stability tests
Reduce indent, avoid deprecation
JLine 3.18.0 (was 3.17.1)
reuse common code for filter/partition for RedBlackTree based Set/Map
Clean up SerializationStabilityTest
[bport] Move & truncate the MiMa filters
Parameter names are encoded
de-duplicate code code filter and partition is common other than the supplied function
Deletion from a TreeSet/TreeMap of a key that doesn't exist should not allocate pass the tree into balance/balLeft/balRight methods so that is can be reused is unchanged
re-STARR on 2.12.13
give sonatype more time to close staging repos
Update 04-basic-declarations-and-definitions.md
Tests on ConstantFolder
Ensure SingletonTypeTree#ref has symbol after typing.
mutable.HashMap should override 'foreachEntry' to avoid tuple allocation
Preserve kind of relativeInfo
bump copyright year to 2021
Enumeration documentation: remove nested class shadowing in "override" position
Correct bounds for higher-kinded GADT skolems
error uniformly on invalid unicode escape
sbt 1.4.6 (was 1.4.5)
[backport] move from travis-ci.org to travis-ci.com
new TRAVIS_TOKEN
move from travis-ci.org to travis-ci.com
REPL debug/trace is jline fine/finest
tasty-reader: support Scala 3.0.0-M3
Update Lightbend team in CONTRIBUTING.md
Handle repeated singleton types
Use a new prefixDirect in checkKindBounds0
Restore two blank lines bailing the REPL
Do a kind-check in inferPolyAlternatives
tasty-reader: complete symbols before selecting members
Compute isCompleted together with typeParams for kind-arity check
Advent of golf: loopiness
Tailcalls overrides enabled
Use HTTPS for links
Leverage improved Name.lastIndexOf
Improve Name.lastIndexOf further
Add doc for Array.equals and sameElements
Improve Name.lastIndexOf
Upgrade Dotty to 3.0.0-M3
Regression test
Better error for Java annotation nested in a Scala ConstantAnnotation
Don't re-run typer on already typed ConstantAnnotation
Typecheck ConstantAnnotations normally, not like Java annotations
[nomerge] silence warning on nowarn
sbt 1.4.5 (was 1.4.4)
add Georgi
Update README.md
add Dale, Som, and Jamie
lots of small README edits
fix regression in spec publishing
restore correct scala-dist artifact name
Set `-md md5` when decrypting credentials with openssl
[backport] backport .jvmopts from 2.13.x, sbt needs heap
give sbt more heap (2G instead of 1.5)
do not allocate OrderingOps in PriorityQueue
PDF spec generation script fixups, & add to Travis
Change math delimiter to ACUTE ACCENT (´)
Add scripts for generating specification PDF
Avoid printing a large stacktrace for a tastytest failure
sbt build: standardize on camel (not kebab) case project names
remove some tuples
make TASTy tests less noisy
Tab-complete relative partest paths (eg pos/t<TAB>)
Travis-CI: only compile benchmarks during PR validation
add jmh build
Remove non existing dependencies from scala-partest
Build scaladocs for partest to make sonatype happy
enable fatal warnings when compiling partest's Java sources
Remove dead code testing for Array[Unit] after Array[AnyRef].
handle polymorphic opaque type alias
[backport] Avoid silence during CI, which Travis finds unacceptable
fix benchmark
add scaladoc note to Unicode unaware methods
override diff on List for performance
TastyReader: enable opaque types and erase correctly
Re-remove the pramas
don't have literal control characters in source
Only look up the system prop controlling class tag caching once
remove empty files
Remove pack200 ant task to make 2.12.x compilable on JDK 15
add tests for select with target and infix
Support TASTy 25.1 (Scala 3.0.0 M2)
REPL intercepts feature warning
Test showing position bug with `var x = _`
add -V and -W parameters for
REPL shows boring explanations only once
Doc for mutable.Set#add
Jave Map wrapper respects put/remove contract
Use Any_== to compare case class elements
Travis-CI: give everything clearer names
Travis-CI: log everything at the default info level
Enable -Werror for junit build
Change nullary side-effecting methods to nilary
Travis-CI: move the Dotty thing to its own job
further speed up Travis-CI PR validation w/ caching
Enable linting and -Werror for specLib build
Enable linting and -Werror for tastytest build
Enable linting and -Werror for partest build
Enable linting and -Werror for testkit build
Lint option for unused context bounds
Upgrade to Scala 3.0.0-M2
Travis-CI: don't compile tests during initial build stage
REPL: tab completion: test case + code improvements
REPL: tab completion: Cleanups in completion results
Allow annotated literals inside as annotation args
sbt 1.4.4 (was 1.4.3)
Enable -Yvalidate-pos in our tests
Enable linting and -Werror for scaladoc build
Enable linting and -Werror for scalap build
Assorted warning conf and annotation cleanup
Upgrade sbt to 1.4.3 (from 1.3.x)
update testJarSize for 2.13.4 sizes
fix regression where Array[Unit].empty caused NPE
remove orphaned RedBlackTree checkfile
Tweaks for warnings
upgrade to ScalaCheck 1.15.1 (was 1.14.3)
upgrade to JLine 4.13.1 (was 4.12)
use slash syntax throughout build.sbt
uncomment an assert in compiler after re-STARR
warning suppression tweaks, needed post-2.13.4-re-STARR
Move & truncate the MiMa filters
Re-STARR onto 2.13.4
Logging
deprecate ArrayCharSequence
Catch exceptions
[backport] Make the CharSequence wrappers in Predef non-implicit, for JDK 15
reword warning about `equals` and cooperative equality
mailmap updates
Dealias val aliases to modules so they're =:=
Avoid use of binary incompatbile super accessors in SortedMap/Set
Update scaladocs
Avoid possible NPE in ClassTag cache's weak reference
Patterns under irrefutable extractors are fixed
Adapt toolbox/async test for 2.13.x
[backport] Make annotation typechecking lazier
Refactor ArrayBuffer.ensureSize for testing
fix flags file
Introduces ExecutionContext.opportunistic as a private[scala] instance as an escape-hatch for getting the original 2.13.0 batching global EC
remove broken links in docs
block scala.Tuple type
allow using classOf with object type
Additional test case for annotation cyclic errors
Notice this when linting for missing interpolator
Make annotation typechecking lazier
Revert "Restore Global.reporter()Reporter"
[nomerge] Emit warnings in the REPL
Switch off exhaustivity warnings for unsealed types (by default)
Resolve some exhaustivity warnings downstream from the compiler
Unsuppress exhaustivity warnings in the compiler
Unsuppress exhaustivity warnings in reflect
Unsuppress exhaustivity warnings in the library
Stick TASTy reading behind a -Ytasty-reader flag
Restore Global.reporter()Reporter
Add a regression test for scala/bug#12192
Upgrade to JLine 3.17.1
RedBlackTree with fast mutable builder
Travis CI: make a command error fatal
Make the CharSequence wrappers in Predef non-implicit, for JDK 15
support Scala 3.0.0-M1 nightly
test java generic erasure in tasty. Add infrastructure
Update dottyVersion to 0.27.0-RC1 and update test syntax
test Java enum types in tasty
flatten nested annotated types
add local syms for field accessors, enable tasty tests
enable java annotations - escape overload resolution
only forbid class mixin of traits with params
Block static annotation by addition of compileTimeOnly
Block alpha annotation by addition of compileTimeOnly
Block generic tuple cons type.
block large function types
Block opaque type aliases
handle polyfunction and contextfunction
remove unused import, fix the build
document branching strategy in readme
Un-deprecate some shadowing inner classes in compiler
Enable -Werror for compiler build
Remove -Xlint:valpattern exclusion from compiler build
Remove most -Xlint exclusions from compiler build
Enable deprecation warnings for compiler build
fix ClassTag cache leak
only compile on Dotty during PR validation
add some comments to build/CI scripts
mention scala-library-next in readme
Allow forks to run bootstrapped tests on Travis CI
Re-enable fatal warnings
Mention reachability warnings on `@unchecked`
Implement -Xnon-strict-patmat-analysis
Revert ExecutionContext.global to not be a BatchingExecutor
Disable fatal warnings in reflect
Disable fatal warnings in the library
Avoid spurious custom extractor warnings
Reverse -Xlint:strict-unsealed-patmat into -Xno-unsealed-patmat-analysis
language spec: document the un-updated status of the changelog
update nightly build information in README.md
ListMap is reverse oriented, so use that for foldRight
Update MiMa & add exclusions for new trait overrides
Never elide fields for `private[this] var` class parameters
Keep `private[this] var` class parameter fields that are only read
Restructure ListBuffer to build and insert chains
Further performance improvements to groupBy
Reduce allocations in groupBy
Benchmark for groupBy
Use unmixed backticks more uniformly
[bug#12009] Make ListBuffer's iterator fail-fast
Additional regression test
Java imports compete with level 4 definitions
Backport -Xlint:deprecation
All filters must match for nowarn
BooleanSetting takes a default
DirectTest checks compiler options
Partest logs fork errors
Warning summary respects -nowarn
More source compatibility tweaks for reporters
use full path in site and origin strings
support -Wconf in repl
empty filter is no filter
better Wconf doc
fix some warning categories
Add `@nowarn` annotation for local warning suppression
-Wconf compiler flag for configuring compiler warnings
Test remove(Int) and remove(Int, Int) separately
Use correct tree for child unapply context
Update a comment as suggested
modify css path
Always Emit mixin forwarders for readResolve/writeReplace
Enable -Werror for reflect build
Remove remaining -Xlint exclusions from reflect build
Enable feature warnings for reflect build
Enable deprecation warnings for reflect build
minor cleanups
Changes from som's branch
Review feedback
Simplify reporters
Move Severity out of Reporter
Allow uncheckedStable on defs, vars
Avoid exit
Avoid double-feature reporting
More dry refactoring.
Enable -Werror based on CI and for library build
Remove remaining -Xlint exclusions from library build
Global takes legacy reporter
Enable feature warnings for library build
Enable deprecation warnings for library build
Allow -Wconf configuration of non-cooperative equals warning
Display warning on equals comparing non-references
Prefer composition for defining reporter
Prefer internal.Reporter
bug#5674 Remove calls to System.exit/sys.exit
fix #11676 un-deprecate useful StringOps operations
Revert "Dealias when necessary to substitute symbols"
Update Syntax-Summary to reflect syntax laid out in previous chapters
Specialize attachments for common case of zero or one attachments.
Make sure counter-examples are distinct
Optimise factories for Array-based collections
Backport zip test fix to delete advisedly
review comments use a final val to inline constant value. Remove duplicate constants
review comments add documentation, remove some duplicate code and tighten visibility/naming
add some more tests
fix mutableWithKV to actually use the new value
update the current tree, not the original add some tests to cover this case
more ++ and -- implementation for TreeSet and TreeMap into respective classes
adjust for 2.12 key semantics in TreeMap & TreeSet. leave comment to explain the areas that need attention in the forward port to 2.13
fix TreeSet/TreeMap serialisation add SerialVersionUID to Set and Map proxy regenerate and record(int he test) the existing 2.12 serial format for TreeMap and TreeSet
add Mima excludes
fix a test add round-trip support for the new serialisation format,and read support for the old format
adjust sizing
minor improvements from profiling
use the TreeMapBuilder - align the mutable and immutable APIs - make immutable APIs that dont use mutable ones - add some dev time assertions - Builders extend Helpers
mutable RedBlackTree to reduce garbage
serialisation compatability before we change the red black trees
take control of the serialised form of a TreeMap/TreeSet
ensure forward/backward compatability for SortedMap/Set  WRT making RedBlackTree mutable
Make SeqView.Sorted slightly less lazy
Drop gnomic "It would fail on the following input: _"
Always check exhaustivity of custom extractors/guards
Check exhaustivity of case class unapplySeq extractors too
Avoid exhaustive warnings in try/catch
Update exhaustivity checking.
Exhaustivity with extractors and unsealed traits.
SI-5365 Check exhaustivity with guards, extractors
Try to parse Duration as Long before parsing as Double
Make LineNumberTest compile & pass
Update test/files/neg/t12155.check
emit error for selftype annotations in parens
More RootEntry
Backport tests and fix for Zip root entry
Unused imports
Reuse incoming tuple in immutable.HashMap1.update if it contains the existing key instance
Align immutable.{MapN,HashMap} key/value handling with 2.13.x
Expand SetMapRules test for SortedMaps
Enable more collection types other than key-preservation properties
Adapt SetMapRulesTest to 2.12.x
Backport SetMapRulesTest (initially commented out)
Never elide fields for `private[this] var` class parameters
Keep `private[this] var` class parameter fields that are only read
fix semantic merge conflict
Document scala.jdk package
Exhaustivity: don't widen & then warn on singleton types
Give partest some latitude when specifying test paths
Add missing asSeenFrom in checkKindBoundsHK
Remove special case in Typers for scala.{Seq, Nil, List}
Update Predef doc referencing List
ListMap is reverse oriented, so use that for foldRight
patmat: commented out a debug.patmat statement
patmat: Refactor away Test's "reuses" var
patmat: Refactor away 4 asInstanceOf casts
use a class and a val to avoid the allocation of a LazyRef when w know that we always need the value Inherit from AbstractFunctionX, rather than FunctionX to reduce bytecode
ListMap.last should not generate additional garbage Use Iterator.empty when iterating IndexedSeq and LinearSeq which are cheaply provably empty
upgrade jol (used in testing). It was 3 years old
Exhaust: no false positive putting enumerations in a tuple
Treat private "effectively sealed"
Ignore DeterminismTest testReferenceToInnerClassMadeNonPrivate
When partest diffs, make sure the outDir exists
Migrate some flag files
Avoid swallowing error message and crashing for X#Inaccessible
directly go to MacroImplBinding
Clean up some warnings
Use param name in unit specialization check
Support Windows in test and filter output on isWin
MiMa 0.8.0 & its static mixin forwarder problems.. :-/
Deprecate Buffer#trim{Start,End}
Add scalap to partest's IJ config
Drop bug compatibility with Java privacy of inner classes
Deterministic InnerClass attribute under joint/separate compilation
Refactor DeterminismTest to expose internals as an app.
Handle NestedAnnotArg from Java sources
Cleanup JavaParser.annotation
Restore binary compatibility for doc.Settings
[nomerge] no longer build external partest module in release scripts
Default Xscript is Main
Simplify typedAnnotation
don't box primitive values  to call static methods on java.lang.Double/Float/Integer etc don't box primitives to call hashCode/toString copy with trees with side effect add tests to verify no boxing
Upgrade the CI Dotty version to 0.27.0-RC1
Avoid NPE after error
Exclude unit value as literal type
Make async compiler output deterministic
Drop flagsfile support, port test suite
Move reflection-related utils from AssertUtil to new ReflectUtil.
Kill pos checkfiles
[nomerge][2.12] Welcome back Partest!
Leverage String.equals for type of pattern bind
Literal type patterns are literal patterns
Literals also claim equality with other types
simplify mima exceptions
Avoid NPE in typedFunction with inferred args
Adds a recursive warning to functions with empty parentheses, covering a method with an apply.
Widen abstract types to AnyTpe rather than crashing
Check all bindings exhaustively, e.g. tuples components
review feedback - use the ClassTag to hold the empty Arrays and WrappedArray
Propagate type of bind tree
Simplify flatten
Dealias when necessary to substitute symbols
Set the tpt of extension methods' DefDef explicitly
Map ++ without CBF should use the same optimised path as ++ with CBF also optimise for small map addition
Propagate type of bind tree
remove unneeded conversion
remove unused import
Teach patmat that unapplies can be customised
replace deprecated operator `/:` with `foldLeft`
Add version/scalaVersion info to onLoadMessage
Add restarr/restarrFull custom commands
Improve IntelliJ project configuration
move tests from pos to run
Support extending traits compiled by dotty
update dotty version to 0.26.0-RC1, update tests
Support macro defs in TASTy
Introduce TastyRepr
Enable -Yrangepos by default
upgrade JLine to 3.16.0 (was 3.15.0)
simplify signature
Don't use length in NumericRange.isEmpty
MultiStringSetting preserves remaining args
Prevent table length from integer overflow.
Support Dotty 0.25.0
erase scala.AnyKind to scala.Any
support Dotty 0.24.0-RC1
Emit method reference lambdas without helper method
bump sbt to 1.3.13 (was 1.3.12)
Use attachment for interpolation
Add doc string to Array.from
rename source file with illegal-on-Windows name
Clarify Position code with judicious inlining
Preserve tab in caret line
Unused import
Avoid defaults when recursing
Add same changes from the PR #7178
simplify Map.equals, plus small other cleanups
[backport] Exchange stack for Stack in assertNotReachable
[backport] Avoid race in test for firstCompletedOf
don't publish tastytest
Remove exploratory assertions
Stabilize order of synthetic modules in enclosing class decls
remove github actions
remove usage of extension methods in scala 3 sources
Bump to Scala 2.12.12
[bug#11021]
Avoid warnings
Exchange stack for Stack in assertNotReachable
Avoid race in test for firstCompletedOf
[backport] bring AssertUtil fixes to 2.12
Improve assertThrows, use it in NumericRangeTest
Find overloads by converting types to ErasedTypeRef.
Delay forcing annotations in template body until parents are added to class info.
Force annotations in TreeUnpickler and not Pattern Matching
Use java.util.Arrays.copyOf to extend or contract arrays, when  the content of the previous array is to be copied into the new Array
ArrayDeque.alloc doc: do not use macro syntax
TASTY is classfile attribute
[bug#10131] Stop leaking head in LinearSeqOps#tails
Refactor prior fix to module class symbol cache invalidation
Make LazyList.cons.apply lazier
add more refinement tests
Remove exploratory assertions
Stabilize order of synthetic modules in enclosing class decls
[bug#12059] Make MapView#values and #keys return Views
insert parens to nillary applications
eliminate Ident and Annotation from TastyCore
update documentation
rework documentation
add AnyVal erasure of enums test
create a single scripted runner for local tasty testing
add patmat test
add documentation
remove ScalacUnpickler, TreeSectionUnpickler and SectionUnpickler
Remove symbol creation for BIND tags
be more precise with flags from tasty
refactor erasure for singletons, test more of their behaviour
fix bytecode for dotty enum singletons, remove DottyEnumTag constant
enum values are now case objects
use commonSettings in tasty subproject
fix tasty/test
intellij
no more ui.
add CI conditionally
can visit either module or module class first
annotations use lazy val to compute tree
scan trees does not complete symbols
Update src/library/scala/collection/mutable/StringBuilder.scala
better logging
better semantics for symbol.not(flags)
remove TypeBounds dependency
move TastyFlags. Remove Scope dependency
refactor TastyFlags
refactor annotations
Simplify refined/rec types
ensure symbollic classes can be read from erasedtyperef
add headers
support export flag
Delete SourceFile.scala
remove CI from PR
Test open class, dependent methods, trait params
delete more code
reduce dependencies
require TypeName rather than pass boolean flag
only expose TastyName to TreeUnpickler
refactor
refactor error handling, test unsupported trees in annotations
Add mode to track when in an annotation and adjust error message to suit
avoid resolving ctor of parent
remove comment
match types and erased refinements are unsupported
make assertions about metaprogramming features
test when ErasedTypeRef is missing from class path
err on union in class tparam position
refactor, error handling in two steps now
unify attachTypeError with unsupportedError
remove module symbol cache from context
unify error handling and logging
refactor tasty name, add ErasedTypeRef, special case repeated class
Add test when annotation on top-level class is missing from classpath
Add test when type in a method is missing from classpath
Add TastyMode, test when parent is missing from classpath
Fail fast when select name from type is no symbol
This is a very disruptive change, affecting bytecode gen (could be avoided if I can time travel to change the info of a dotty enum constant for erasure)
refactor reading a member by name, enabling dotty java enums
delete dead code and comments, refactor
Cleanup warnings
add new github action to run on push to tasty_reader
re-enable tests
Support Dotty 0.23.0-RC1; opaque type aliases are transparent
Support TERMREFin and TYPEREFin, look for type members in type ctor
add test cases for TERMREFin/TYPEREFin
Add test for path dependent val refinement
support forward-referencing RECthis and type alias refinements
Tests pass for non-nested RECtype
Add nested RECtype test case
add test cases
add more idiomatic structural refinements
Support Implicit and Given flags on method refinements
Update to use repeated parameters
Support refinements for method, poly and values, support structural refinements
unpickle SUPER and SUPERtype symbols
support repeated method parameters
Test methodic refinements for REFINEDtpt
support val and nullary def in REFINEDtype
add path dependent type test on dotty enum constant
successful tests for REFINEDtpt including compound types
Add passing REFINEDtype run and neg tests
Add test case for refined types
Ensure paths are preserved for type member selection
support dotty enum constants
revert to in place update of variance flags
clone LambdaPolyType with new variances
Upgrade tasty version 19, drop variant names and adjust bounds
refactor
change to Dotty 0.21.0, update readme, simplify test runner
add more sbt tasks: code runner and dotty decompiler
add tasty/dotc and tasty/scalac tasks for ease of use
upgrade to TASTy version 18, refactor flags
add test to show flag disables annotations
refine symbol table settings type in TastyKernel
refactor lambdaTypeCompanion
refactor LambdaEncoding
improve error reporting
survive more pathological cases of type lambdas in bounds
refactor
refactor
error on curried type lambda
merge parameters of type lambdas in bounds
refactor
normalise typebounds in hk types
WIP, investigate bounds stripping for lower bounds with polytype
Add test that causes error when compiled with dotty
add more test
cleanup
normalise typebounds in hktypeparams, handle wildcard bounds, pretty print wildcard idents
simplify lambdatype canonical repr, handle contravariance
refactor to new mkTypeRef factory; test HK nest with covariant bounds
inherit typeParams from bounds of hk lambda types; add many more tests
test consuming (* -> *) -> * from TASTy
constructor returns type of owner
Add HKNest test to test higher kinded types
Add .keep file to neg-false/src-2
Drop package prefix from a class
Add `@compileTimeOnly` annotation to unpickled inline def definitions
temporarily store a module symbol to ensure its symbol survives, allow modules to be overloaded
identify crash with test
flush reporter in TastyTest
update README
try removing the push event
update README
use merge commit instead
fix #27: Add tasty-ci
fix #24: use custom nsc reporter in neg tests
fix breakages after rebase
remove todo document, direct users to issues
fix #25 - Handle a signed name in a TERMREF
Modify test functor; ensure folders are published
resolve arbitrary tree in ctor problem
avoid caching a LambdaType, put more complex expressions in parents
support NamedArg tree unpickle, begin support for match
Unpickle If (tested with an annotation)
refactor annotation logic
refactor typeref logic
unpickle singleton types correctly in arguments
signatures now look for module in mirror, restore ModuleInCtor
unpickle annotations, special case scala.annotation.internal.Child for sealed case enumeration
Read vararg trees
Tasty signatures now support array types
add pos-false test, resolve reachability issue, must solve exhaustion analysis
WIP
move extension method symbol generation
extract extension method symbol and type factorys
Unpickle extension methods
add to scolour test
Add regression test for empty package
Special case more names
unpickle default parameters
unpickle overloaded methods
more precise Intersection test. Assert that default arguments are unrecognised
can unpickle some backticked names, will have to wait until dotty 0.21.0-RC1 release for all
add support for unpickling unescaped operator names; unsuspend TestProd; add TestSetters
update TODO, add test for trait initialisers
dotty macros now have their own flag, stub factor10 intent library for testing macros
unpickle intersection types in type position
adjust scala 3 flags show output
improve error messages
unpickle inlineaccessor and superaccessor names
Add nameTagToString to TastyFormat
add Implicit flag not Given
Resolve intersection types
minimise type intersections issue. Identify dotty intersecion or union types
better logging output
ensure bynametype has function type. Allow to skip check on neg test
unpickle byname type param, move TestIO to pos
fix diff tools, prepare IO test
add different SColour test for run
move enum flag to TastyFlags. neg-false test for scala2 style enum pattern
support SHAREDterm, add neg-false test
downgrade to dotty 0.20.0-RC1
replace def forwarders to objects with forwarders to factory method
default canonical LambdaType now PolyType, add pos suites
unpickle is now extension method
make TastyUniverse a parameter not a parent
reduce dependencies on symbolTable
Reify Tasty Names, which allows to reduce coupling
Add Name ADT to scala.tools.nsc.tasty
add test output
depend on dotty with tasty version 18
correct PARAMS tag value
implement open modifier
implement PARAMEND
Update docs and remove pre from neg tests
Split up tastytest
add tasty/test to testAll; disable other tests
make sbt projects for tastytest, use new diff tool
update tests and README for dotty 0.20.0-RC1
Add positive super call test; suspend symbollic operator test
Protect against thrown errors in scalac and dotc; migrate all tests to Suite
invoke dotc in same jvm process
sync with standalone tastytest version
collective errors on Suite
Correctly capture thrown errors in run tests, experiment with test suite super class
refactor Runner
rework whitelisting sources
accumulate errors in TastyTest suites
Support neg tests in TastyTest and add an example neg test
make reframe TastyTest as a runner with multiple suite kinds
cleanup TastyTest
remove early initialiser in ScalacUnpickler
add -help to TastyTest, invoke scala compiler directly, add args for sources and package name
remove dependency on dotc and coursier on the path
create suspended TestJColour for j.l.Enum
Document TastyTest framework
create suspended TestExtensions
Restore TestPair, initial support for module TYPEREFs
test lazy val
cleanup TastyTest
Add simple regression test runner for tasty files
Restore TestEnum, do not unpickle typeParams for constructors
create suspended TestEnum
unpickle value class with private ctor
unify handling of hk params on methods and parents
support inheritance of object member
unpickle traits with abstract type members
unpickle inner traits and objects; restore TestInner
WIP: Inner classes
unpickle companions in same tasty file; suspend TestPair; replace EmptyProduct with Box
TestReader blocked by dotc
change TastyFlags to AnyVal
Avoid too precise type for TYPEREFsymbol; restore TestMonad
ignore Extension flag, suspend unpickling Monad
Update README and publish tests
Unpickle bounded variants of Functor
use typeSymbolDirect
unpickle Functor from TASTY
support template parents with type parameters
delete more code
Factor out dotc APIs to TastyUniverse
rename TASTY -> Tasty; delete unneeded code
Support curried overloads with signatures, WIP on HK signatures
Support for resolving overloaded signatures for methods that are not curried
Add signed name table; read signed name first
intercept java.lang.Object parent
correctly enter package
Add Ydebug-tasty
always ensure methods have params
fix regression in TASTYFlags
correctly enter constructor, use correct typesymbol for classinfo
reduce primitive ops in tastyflags
type constructor
optimise TASTYFlagSet
re-introduce error for incompatible dotc flags after type completion
protect against inline final val with non constant tpe
add map and show to TASTYFlags
reify dotc exclusive flags and store in the lazy completer
unpickle higher kinded type parameters
fix type bounds
unpickle methods with basic type params and implicit args
Unpickle symbols with correct forwarders
Can enter HelloWorld for real this time
stub readMember()
Marker: Try reading defs without creating trees
index within templates, correct root owner, debug more info
enter symbols up to requiring trees
add more symbols
flags forwarders, create some symbols
more precise NameTable
add symboltable implicit
more precise NameTable type
initialise unpicklers with symbolTable
read and match TASTY UUID
can find TASTY attribute in class
Multiarg infix application is behind lint flag
re-STARR onto 2.13.3
Print warning for ()(implicit ...) prefix unary operators too
Update warning message per review
Add a comment to HashMap.castToThat
fix typos
Deprecate empty-paren (nilary) prefix unary operator
[nomerge] small cleanups
[backport] Disable all reusable instances in runtime reflection
[backport] Rework recent, buggy change to immutable.TreeMap
Rework recent, buggy change to immutable.TreeMap
Disable all reusable instances in runtime reflection
Rework recent, buggy change to immutable.TreeMap
Test adjustments
tab completion: fix some isDeprecated false-positives
uncomment now-working tab-completion test case
HashMap bulk operations should retain existing keys
Add an additional test left-bias in for Set.+
Make isEmpty for IntMap / LongMap O(1)
fix an oversight
[backport] Refactor fix from prior commit
fix test flag
remove unused value
docs: corrected grammatical errors in the docs docs: Resolved PR comments docs: Resolved PR comments by removing extra include
Bulk ops on TreeSet/TreeSet or TreeMap/TreeMap prefer keys from the left
Refactor detection of ill nested await calls
Run DCE also on large methods
Update repository structure of source directory
Address review comments (remove dead/debug code, +comments)
[backport] Bulk ops on TreeSet, TreeMap prefer keys from the left
remove old ThicketTransformer
overhaul documentation of `LazyList`
Add StrictOptimized parents to jkd converters
Avoid generating dead code for terminal state
Rework async expression wrapping
Remove nullary warning of artifact symbols
Amend compiler flag advice for tests
Sanity check arg to string setting
Change fromResource exception to FileNotFoundException
Scaladoc on AnyRef#synchronized
[backport] decode html escapes in intellij dependency paths
Restore special cases for small operands in {append,prepend}edAll
Add instructive reminder for those unaware of nuances about rapidly evolving hashing algorithms.
Remove eta-expansion of SAM under -Xsource:3
Add missing source file headers
Preferred parens in junit tests
Avoid exotic use of Labels to gain Scala.js compat
Tweak names in generated code
Move some async test cases to partest
Add a Scala.js compatible smoke test.
Move async run tests to jvm category
Add an another example of a Writer/Option monad
Overhaul/fix live variables
Position synthetic trees accurately
Better integration with compiler fresh names
Support state getter/setter methods
Improve error reporting in asynj junit test.
await in by-name function arg is repoted as ill-nested.
Avoid VerifyErrors wrapping Try in Assign.
erasure: push casts into LabelDefs to simplify async phase
More granular fresh names.
Add tests from scala/scala-async#206
Add tests from scala/scala-async#210
Move ThicketTransformer to s.t.n.transform
Test and simplify ANF transform of Nothing-typed if/match
Allow compilation of async's partest suite in Junit
Local TypeDef no longer make it to the async phase.
Remove dead code or make things more private.
Don't insert null assignments for the terminal state.
Overhaul integration with front end macros
Be explicit about lambdaLift following the async phase.
StateSet: Allocate caseSet lazily
Inline case class Awaitable
More typed sub-trees avoiding working in `typed(...)`
Limit UseFields transform to relevent subtrees.
Avoid overload resolution in typing default case of state handler.
More efficient Contains-/No-Await cleanup
Comment out debugging toString.
Avoid logging string allocation
Avoid allocating containsAwaitTraverser so often.
Remove dead code.
Refactor addFutureSystemAttachment
Refactor asyncTransform
Use of AnfTransformer directly.
Move AsyncTransform code into AsyncPhase.scala
Remove dead cases from adaptToUnit
Remove unused imports.
Refactor field nulling.
Refactor lifting to to change owner sooner
Split some async implementation classes into files
Add a fast path to the async phase
Allow a nested TypingTransformer to use an existing local typer.
Remove unused imports
Remove legacy future system methods.
Remove PhasedTransform
Deal in typed trees in ExprBuilder.
Use compiler APIs.
Reinstate live variables test and fix null assignment
Use faster attachment lookups in ThicketTransformer
Reduce number of states in async state machine
Avoid overhead in tree attachments
Refactor and document UseFields transform
Integrate async's logging into debuglog
Harden Context.make debug logging against null trees.
Cleanup AsyncPhase's transformer
Use reporter.error directly
Sort cases by state ID
Reduce allocations in name freshening.
A simpler and faster ANF transform
Look for references in types as well as in terms.
Companion Detection should be post-erasure aware
Live variables: detect usages in Awaitable.expr
Deal with await in ArrayValue
We'll never see `isAsync` again in nested trees.
Convert tests to ScalaConcurrent Future System
Delete dead code.
Add tests from scala-async
Add JUnit support to partest
Move to scala.async.Async for compatibility with existing macros
Improvements to async phase
Implement async transform with a macro and a post-erasure phase
patch for async debugging
Import async
make xprompt work in sbt's scalac task
In case non-method is added to AnyRef
Cleanup & tweak some compiler Scaladoc
Replace Scaladoc with link to Javadoc
Scaladoc on AnyRef#wait
Cleanup PhaseAssembly/DependencyGraph/Node
-Xshow-phases/-Ydebug -> -Vphases/-Vdebug renames
Reusable instance for the Contains Collector.
reduce testcases
allocaton hotspot in small Map iterators
A jar or zip must be a regular file
Don't warnUnusedNowarn in scaladoc
Don't lint multiargInfix on synthetics
work around incorrectly unexpanded names
Lint non-matching overrides of nullary/nilary methods
Cleanup some ScriptRunner & Settings code
Promote implicit recursion to lint
Don't introduce parse error in probe for package
All filters must match for nowarn
Move library test to junit
Respect lints in partests
Tweak contributing guidelines for precision
Remove extraneous check file
Add links to contribution-related readmes
Clarify contribution workflow for new members
[backport] targeted fix for potential missing max' computations
BooleanSetting takes a default
ScriptRunner respects -d under -save
Settings outdir is canonical
Do not lint multiarg for mixed op def
Improve VectorMap.last complexity.
Fast-track deprecating auto-application
No returning
Tweak getParts and getClassParts
upgrade JLine 3 to 3.15.0 (was 3.14.1)
use sbt 1.3.12 (was 1.3.10)
generate test cases
more targeted fix for missing max' computations
Finer grained word boundaries for the REPL's line editor
Make the spelling of "type class" consistent
Improve documentation
Close Source.fromFile
Upgrade Dotty to 0.24.0-RC1
HashMap / HashSet: Add a little explanation of the structure.
Avoid rare StackOverflow in diverging implicits check
fix back-quoted constructor params with identical prefixes
[backport] Constructors handles private[this] var
Retain var class param if used
Deprecate multiarg +=
minor cleanup: 'delegate' isn't reserved in Dotty anymore
Improved scaladoc and actual parameter names in ArrayOps and StringOps
[nomerge] Revert backported RBTree changes that are 2.13.x only
Defer "pure expression .. in statement position" warnings until refchecks.
rebaseline scala-library.jar size sanity check
Relax allocation test assertion which was failing on CI
Be more efficient in RefChecks
Add MiMa exception for SortedMap super accessor
Tweak fresh name
Guard against unexpected flags files in partest
Forgo autoapplication, supply parens
Accommodate syntax changes
Forgo any2stringadd
Required parens in sys.process
make sortedMap and SortedSet #equals O(n) when comparing to similar
Benchmark for equals checking of RedBlackTree i.e. TreeSet and TreeMap
Add ILoop.internalReplAutorunCode
Silence warn-any in test
Increase laziness of #:: for LazyList
Java class literals on raw types are okay
Avoid slow patmat exhaustiveness analysis in a test
Java annotation array parsing fixes
fix regression in Map ++
consider structural sharing
Tweak Seq.isDefinedAt
Some tweaks in Typers
Hardcode macro annotation not expanded error for the common case
Improve mismatched arg list message for tupling
Unwind progressive "too many args" message
[nomerge] Convert implicit by-name error to a type error
Don't warn unused synthetic case copy defaults
Don't enter $isInstanceOf/$asInstanceOf
Optimise IndexedSeq.foldRight to use reverseIterator
Backport Ordering equality and other improvements
clamp down on warnings in REPL code
upgrade jQuery to 3.5.1 (was 3.4.1)
fix an unused import warning
in build, use sbt slash syntax throughout
Avoid boxing in ArraySeq.{appended,updated,prepended}
Tweaks per review
MacroAnnotationNames uses makeImportContext
add some comments, and avoid the equals call in some cases
Improved scaladoc for segmentLength methods
Optimise ArraySeq concatenation
Avoid multiarg infix warning on Subtractable
Avoid iterator allocation for empty Vectors
Don't warn multiarg infix if deprecated or unused
fix typo
Infix ops are not local defs
reduce allocations for SortedSet/Map
allocation test for SortedSet/Map
remove the allocation of `Some` from checking maps equality check consistent equality for Tree/Hash sets and maps
use compare rather than equals
Don't warn about implicit multiargs
Reduce multiarg infix applications
Lint multiarg infix operand
Respect uncheckedVariance in higher-kinded types
fix sameCBF in TreeSet and TreeMap
Fast-track emitting "eta-sam" warnings
Lint junit tests
Lint Java in junit
bump sbt-whitesource to 0.1.18 (was 0.1.16)
append trailing / when processing unicode escapes
Improve warning that parameter is Unit-specialized
un-deprecate default floating point `Equiv`s
minor cleanup in Equiv.scala
Avoid byte array allocation for non-vanilla source files
DirectTest checks compiler options
Partest logs fork errors
Warning summary respects -nowarn
Deprecate varargs -= in Shrinkable
Restore isWin exclusion to t10823 tests
Reduce allocation cost of dead code elimination
No longer use symbol literal syntax in Symbol.toString
Optimise ArraySeq.fold{Left,Right}
Reduce alloctions when loading packages from classpath
Reduce allocation in unexpandedName
Avoid some Some allocations in HashMaps
Workaround performance bug in Zinc
separate CanBuildFrom for each SeqFactory
Actually use the reuseable buffer/UTF-8 decoder
Honour @Deprecated in joint-compiled Java sources
Implement annotation parsing in JavaParsers.
PipelineMain: only close initialised compilers
A simple TreeMapBuilder
Optimize flag lookup in findMember
Zero is not leading zero for warning
build with sbt 1.3.10 (was 1.3.8)
Remove some statistics
[backport] Break up Symbol.info for JIT friendliness
Cache the depoly-ed type of ImplicitInfo.tpe
Use cache of implicit pt function arity more often
re-STARR onto 2.13.2
add mailmap entry
REPL: JLine 3: tab completion: indicate deprecated?, universal?, arity
bump JLine version to 3.14.1 (was 3.14.0)
[nomerge] Reimplement PipelineMain's sequencing to avoid races
[nomerge] "At least it's not a NRE"
REPL: JLine 3: bring back `-Xnojline`, but deprecate it
fix buggy Java version check in Scaladoc tool
simplify, streamline and document balanceLeft and balanceRight
Temporarily reinstate global.treeTpe for compat with scala-meta
Don't rewrite assignment of untyped qual
avoid creation of ListBuffers for small Seq.apply, like we do for List.apply
cope with a HashMapBuilder merging a two HashTrieMaps, where the builder contains an immutable compressed bitmap that doesn't contain the target bit of the first bit position to be merged
Add an option to override Zinc's automatic use of -YdisableFlatCpCaching
Optimize adaptInfos by devirtualizing Symbol.phaseWithId
Remove counter-productive use of cache and an unused parameter
Broken link fixed for magarcia's guideline
Optimize Name operations
microopt subtyping avoiding Symbol.{owner,needFlatClasses}
Remove exploratory assertion.
Reduce string allocations in JAR classpath elements
RedBlackTree should not allocation if the Key and Value are the same JVM instance
Unit test for previous backport.
[backport] Set class and module symbol associated files
Use Using in ProcessTest
Mostly more parens
Suppress Javac 8 output in test
walks though the tree the compare, with some ability to skip identical subtrees
Add a releaseFence before the builder publishes result
Create a HashSet builder with limited mutability
add a builder benchmark
reduce unuse constructor parameter
Elim erased value types from sammy bridges
Add a releaseFence before the builder publishes result
Create a HashMap builder with limited mutability
[backport] Avoid testing unreliable accessor in -Wself-implicit
REPL: JLine 3: fix handling of errors during tokenization
Don't move RHS of specialized trait val into ctor
make sortedMap and SortedSet #equals O(n) when comparing to similar
walks though the tree the compare, with some ability to skip identical subtrees
Tighten up reusable instance
Reusable Instance: replace single-var with a mutable Stack.
don't run a flaky sys.process test (t10823) on Windows
Benchmark for equals checking of RedBlackTree i.e. TreeSet and TreeMap
Reorder MiMi exceptions to align with 2.13.x branch
List CFB optimisation should apply to collection.Seq#canBuildFrom and collection.immutable.Seq#canBuildFrom
remove overwrite parameter from updateNth as it is constant
Heed -Ywarn-unused:privates,locals
Relax a few Java checks
@transient object
inline insertStabilizer
Rework insertion of stabilizing definitions
Serialization compatibility for #8725
Leverage scala.NoSuchElementException
Rework Sizes test
[backport] SetN / MapN optimizations
More efficient atPos under -YrangePos
No Unit.depends bookeeping if -Ytrack-dependencies:false
REPL: JLine 3: get display of method signatures working again
REPL: fix improperly indented code
REPL: JLine 3: don't try to complete non-identifier tokens
REPL: JLine 3: suppress errors generated during tokenization
REPL: JLine 3: reimplement readYesOrNo as line-based
REPL: add testing for call-method-on-previous result behavior
REPL: JLine 3: disable secondary prompt in paste mode
Microopts in FindMember
reduce the size of WrappedArray
basic sizes
Avoid allocation of TreeInfo.Applied
Add CODEOWNERS file
Don't evaluate suffix twice in LazyList#lazyAppendedAll
Add name to README
Exclude sig files in Symbol.sourceFile
Fast-track deprecating nullary method eta-expansion
Align package detection in Java with Java
Add mention of -Yrepl-class-based:false to error
Supply recommended parens
only one Mike Skells
better diagnostics from AllocationTest
Drop some unused partest output filters
Update neg/t7187-deprecation
use ++= to allow to builder optimisations use seq to work correctly with parallel collections
Drop duplicate CompilerTest
Reimplement PipelineMain's sequencing to avoid races
Make {Any,Object}.## nullary
remove stale mima exception
Disable event expansion in REPL JLine reader
More Scala.js-friendly Vector.apply and .updated
Do not rely on `ArrayIndexOOBE` in `Vector.{head,last}`.
JLine 3: use JNA not Jansi
JLine 3: be emacs friendly (adjust :completions support)
JLine 3: history handling improvements
use newer JLine version
Use JLine3
Kill 2.14, long live -Xsource:3
avoid creation of ListBuffers for Seq.empty and Seq()
Runtime mirror must follow class loader
Adjust error message for order of constructors
Optimize List#::: Optimize List#prependedAll Optimize List.from Property tests for List.from, ::: and prependedAll
fix check file (semantic merge conflict)
Stronger words for Xsource
Upgrade Dotty to 0.23.0-RC1
rename List.filterImpl to filterCommon
Xsource is Xfuture
Use warning category for nullary override
Also warn when parens are auto-supplied
Support macro annotation expansions in -Wmacros:MODE
Encourage alignment
Tokenize partest test flags
Restarr on 2.12.11
Support secondary constructors in macros and ToolBox
Trailing comma is parsed
No flags files
Use underscore for all phases, prefer -V
Miscellaneous test categories
More flag football, run with it
Flagless finally comes to jvm tests
Positively no flags files
Still selling sea shells, more neg flags
Unflagging efforts in neg tests
More accurate description of BitSet memory footprint in scaladoc
Clean up imports
Avoid reversals
Track unused import only when Namer makes context
Unroll for exprs in unused imports
Deprecated imports in tests
Move search test to junit
Improve message for bad super selection
simplify mima exception list, some tiny cleanups
Faster Vector filtering
Radix-Balanced Finger Tree Vectors
Don't inline from JDK in benchmarks
ArraySeq optimization
Take advantage of Map.foreachentry in some Map operations
Updated docs for `Constant`
[backport] 7768 completed future is not blocking
backport a benchmark. Adjust API for 2.12
avoid creation of Option for getOrElse
Silence outer pointer warnings in class-based REPL
Clarify -e != REPL but -howtorun has a repl option
use full path in site and origin strings
support -Wconf in repl
empty filter is no filter
better Wconf doc
fix some warning categories
Add `@nowarn` annotation for local warning suppression
-Wconf compiler flag for configuring compiler warnings
minor cleanups
gitignore for metals
Update spec for deprecated conversions
Switch to roundtrip-based conversion check
Don't populate Context.implicits for Java sources
Use Java semantics for imports in .java files
Revert "temp"
Don't check key equality in RedBlackTree
Backport 2.13 BedBlackTree to 2.12
Avoid recomputing key hashes in mutable.Hash{Map,Set}.hashCode
Backport releaseFence for internal use in collections
TreeMap is serialization compat with 2.12.10 again
"At least it's not a NRE"
Encourage alignment
Emit advice that compiles
[backport] Build intellij task: don't prompt for confirmation (#8670)
Dehoist many closures from Types
partially revert #8732 to remove problematic isEmpty checks
Expression for all zero bits
Align {add,merge}{Common,Distinct}.
more process tests to ignore
Update MiMa to 0.7.0
Conditional assert for bad unbox
temp
Enable selection of equals for case class
improve doc of bootstrapping in PR validation on Travis-CI
Deprecate numeric widening of Numeric Literals which are not representable with Float/Double
Document BooleanSetting can be default false
Reduce build noise
Tighten completion condition for typeDefOrDcl
Don't populate Context.implicits for Java sources
Use Java semantics for imports in .java files
add more benchmarks for the RedBlackTrees TreeSet and TreeMap
Avoid spurious shadowed import warning
Object override is dead
Exempt module classes from shadowing check
Use braces for mask-only import
message improvements
test unicode escapes don't terminate lits
test for unicode escapes for quotes in interpolations
improve error messages
Heed warning about cache invalidation after making object Serializable
Default true -Yrepl-{class-based,use-magic-imports}
no processing of raw unicode escapes under 214
axe -X-no-uescape
treat unicode escapes as any other escape
unicode escapes spec
Noise reduction
a simple TreeSetBuilder
More post-uncurry parens
Basic TreeSet/TreeMap benchmark
Dont create a TreeMap if the underlying tree is unchanged
if its empty already then there is no need to create more garbage
Lint for Unit-specialization of parameters
dont create a new TreeSet if there is no change to the underlying tree
fix some compiler warnings
Build improvement
remove some refs in TraversableOnce
repl: Nail the wrapper-cleanup phase ordering
Revert "Make -Yrepl-class-based set -Yrepl-use-magic-imports"
Opt VCs nested in modules out of class-based-repl
Un-deprecate default floating point Orderings, and change to migration
Contexts: reduce allocations in imports lookup
reduce the complexity of Enumeration lookups
Simplfy wrapper-cleanup REPL phase
add HasForeachEntry
remove a couple of forwarding method
Improve performance of HashMap merge and ++ (mostly).
add a benchmark
Avoid generic array access in loop in ScalaRuntime
Use a while loop in runtime support for varargs array conversions
Use alternative approach: no foreach.
Extract the call to updateAttachment as a lambda.
Be more selective in REPL dead backreference elimination
Revert to using magic imports in REPL serialization test
Make REPL dead backreference elimination work with nested wrapped
Types - copyRefinedType: reuse substitution maps.
Warn about unintended underscores
Warn use of a deprecated class' static method
Default false -Yrepl-{class-based,use-magic-imports}
Default -Yrepl-class-based to true
Make -Yrepl-class-based set -Yrepl-use-magic-imports
update checkfile
Switch unusedPrivate to not need private in REPL
repl: Error nicely on macros in class-based
repl: Handle value classes in class-based
repl: Always use .INSTANCE accessor
Clean unused temp vals in REPL wrappers and remove heuristic that ignores some imports
add HasForeachEntry
Deprecate nested class shadowing in "override" position
Colour REPL output, in the shell (UI)
Set scala.color=true on non-Windows
remove outdated JLine-related comment
Upgrade Dotty to 0.22.0-RC1
update check file to fix the build
Change OutputSetting so it isn't setByUser
Variances: replace lowerBoundStack with a single flag
Remove variance check for escaping locals
Add missing pattern match case in varianceInType
Plug many variance holes (pos and neg)
Restore warn-any improvement
Test for scala.xml.NodeBuffer literal
fix our Windows Jenkins job (sbt 1.3 upgrade broke it)
fix our Windows Jenkins job (sbt 1.3 upgrade broke it)
Restore a test for XML parsing
Try to keep dots aligned
11416 MethodType.toString prints in scala format remove => in NullaryMethodType updated nullary method type
Add test for deprecation setting
Partest accepts -opt flags
update intellij dependencies
Update Queue.scala (#8695)
Don't output to stdout
Tests for backticked infix
Allow infix operators at start of line
[nomerge] Update to sbt 1.3.8, remove workarounds
Update to sbt 1.3.8, remove workarounds
use fast intersect and diff where we can
Thoroughly typecheck Java sources for pickling
Clear my terminal of a pair of unused-import warnings
[nomerge] HashMap#transform reuses structure
Optimise HashSet bulk operations mostly focussed around ++ and union
don't create an IntRef in toArray
REPL summarizes warnings (#7756)
Mention `-opt:help` & `opt-warnings:help`
create less objects for zipWithIndex (#8685)
Optimise sameLength intersect.
Warn on inharmonic conversions [ci: last-only] (#8679)
test: Sanitise output from GraalVM's lambda names (#8675)
Avoid duplicate repl-jline.properties entries in compiler/packageBin
Make junit/test pass on JDK 14
create less objects for zipWithIndex
Add repl test
REPL summarizes warnings
Use ordinary warning to respect silent treatment
Deprecate numeric conversions that lose precision
Export underlying on non-copying conversion (#8674)
remove tupling for foreach in keySet/values of immutable HashMap and TreeMap
Update ScalaCheck to 1.14.3 (#8659)
REPL javap under JDK9+ (#8400)
Direct implementations of MapN.{filterImpl,exists,forall}
Optimized filter for immutable.SetN
Remove debugging println from the build
Update ASM to 7.3.1
test: Santise output from GraalVM's lambda names
Respect deprecation setting
A fine moment to enable xlint
[nomerge] Export underlying on non-copying conversion
Thread the needle of static handle ownership
Sort inline request before selecting according to method size limit
Add test for 8733 (#8667)
Improve error messages for numeric separators
Build intellij task: don't prompt for confirmation (#8670)
Don't assume overload alternative is method (#8669)
Build intellij task: don't prompt for confirmation
Use SBT interaction service for confirmation
Optimized iterators for immutable.SetN
Don't assume overload alternative is method
Demote new List.partition implenentation to a compiler util
Workaround Scaladoc @usecase bug with recent Zinc
Avoid intermittent "cannot create classes.bak" SBT error.
Add test for 8733
Switch back to ScalaCheck dependency
Revert invert type signature change (#8471)
build: Add missing directories for repl-frontend
remove unnecessary "TraversableOnce.alternateImplicit" reference
Update Scala' build dependencies junit,jol,jackson
Resort to old-school git HEAD detection in the build
Restore the working directory of partest, junit to the project root
Workaround SBT regression to avoid an empty-named JAR entry
upgrade to sbt 1.3.7 (from 1.2.8)
sbt 1.2.8 (was 1.2.7)
Various fixes for sbt 1.2 upgrade
Upgrade build from sbt 0.13.17 to 1.2.3
[nomerge] Update ScalaCheck to 1.14.3
avoid creating IntRefs and streamline some hashing operations
fix tests
More imports clean up (#8343)
Workaround SBT regression to avoid an empty-named JAR entry
Delete unused method
Only record import usage after picking an import
move to sbt 1.3, fix build on JDK 13+ (#8525)
upgrade to sbt 1.3.7 (from 1.2.8)
add test for :: type alias covariance
Make :: type alias covariant (#8642)
Reuse an instance of a TypeCollector used in hot loop in LUBs
Reduce allocations for one-sided usages of List.partition
Don't do overriding checks between java classes
Make sure Java type is cooked before override check
Avoid missing-interpolator lint
Avoid inferred Object, prefer iterator
Avoid inferred Object and prefer path over toString
Deprecations
Unused imports, more unusedness
Annotate dangerous destructuring
Avoid shadowing vars with constructor params
Avoid match warning
Cleaner unsafeWrapArray per review
Further lints
More lints
Lint collection
Lint repl-frontend
Lint partest
Extend nullary override test
Extend Java-defined exclusion for nullary override
Lint Vector
Lint RedBlackTree
Lint HashMap
Reduce higherKinds import
Stray unused imports
Mitigate recursion with default args in erasure
Avoid not specifying original is empty in Typer
Avoid overload with defaults in specialize
Bad recursion with default args in interactive
Syntax fixes
Lint recursion with default args
Make :: type alias covariant
Optimize Random.nextString
Beware of import qual without symbol (#8627)
bump copyright year to 2020 (#8636)
Test more file name collisions
Fail early if self-referential LazyList runs out of elements
bump copyright year to 2020
Beware of import qual without symbol
Scaladoc: disambiguate links to inherited members (#8607)
Don't clear PRIVATE/PROTECTED flags from Java inner classes (#8616)
Literals can form part of stable paths (#8617)
Ignore subpackage when collecting nested classes (#8624)
Get more precise error on load file (#8621)
Forward port REPL wrapper changes to 2.13.x (#8600)
Stabilize output in REPL tests between indy and inline lambdas
:javap in REPL deals better with nested modules
Small improvements to REPL -Yrepl-class-based
Augment doc for breakable
Optimize SeqView.Drop (#8615)
Clean up StackTracing and test (#8623)
New year, new tests (#8620)
Documentary test
Java allows importing from types (#8611)
Cook supertype for Java classes (#8610)
Apply `LazyRef#initialized` to empty args after uncurry (#8609)
minor tweaks to deconst (#8606)
Don't clear PRIVATE/PROTECTED flags from Java inner classes
Ignore subpackage when collecting nested classes
Use set to track exceptions in stackTracePrefix
Clean up StackTracing and test
Tests for t3899/t7686
Get more precise error on load file
remove dead code writeReplace check occurs before writeObject is called, so the HashSet.writeReplace via its proxy does the correct thing
Preserve position of argument of right-associative method
Literals can form part of stable paths
Optimize SeqView.Drop
Java allows importing from types
Cook supertype for Java classes
Apply `LazyRef#initialized` to empty args after uncurry
deconst improvements to CPU usage and a benchmark
Scaladoc: disambiguate links to inherited members
Upgrade Dotty to 0.21.0-RC1
Handle IINC instructions in AliasingAnalyzer (#8599)
Change VarInsnNode to IincInsnNode
Run some completions tests under -Yrepl-classbased and fix completion bug
SI-6623 -Yrepl-use-magic-imports avoids nesting $iw wrappers
Refactor Context creation
Simplify and micro-optimize divergent implicits checker
Bug fixes in divergent implicits checker
Handle IINC instructions in AliasingAnalyzer
Filter retracted apply from overload
Report original errors in adaptToImplicitMethod
Improve message with overloaded constructor (#8592)
Add JDK 9 constant types to the ClassfileParser
Say method not method value in message
Revert exploratory changes to default REPL wrappers
Enable -Yrepl-class-based to survey test failures
Stabilize output in REPL tests between indy and inline lambdas
Deprecate old-style constructor syntax
Improve message with overloaded constructor
Lint confusing by-name conversion of block result (#8590)
Lint by-name conversion of block after overload
Lint confusing by-name conversion of block result
Avoid length of list
Partially revert infer-any lint improvement aka realias all the… (#8586)
:javap in REPL deals better with nested modules
Spec grammar touchups pointed out by Ducanhta
Partially revert infer-any lint improvement
Small improvements to REPL -Yrepl-class-based
Run some completions tests under -Yrepl-classbased and fix completion bug
Enable magic imports unconditionally to survey test results
SI-6623 -Yrepl-use-magic-imports avoids nesting $iw wrappers
Refactor Context creation
Bump Xmx for type-tag-leak
faster equals for HashSet
Warn infer-any avoids extra work (#8577)
Wording fixes in documentation and spec
Throw on null env var (#8579)
Use Arabic numerals in compiler error summary [ci: last-only] (#8578)
Update check files
Drop redundant text from summaries
sys.env lookup falls back on System.getenv(_)
add equality benchmark
add allocation test add allocation counters for all primitive types
s.c.i.Queue optimizations for Queue.from, apply, and appendedAll
Check files
Numeric count, keep no for zero
Warn infer-any avoids extra work
faster HashMap equallity check
review comments use direct vals where no casting is required
REPL: `:type x` doesn't widen literal type of symbol `x`
[backport] Import travis caching config and JDK install from scala-dev
Import travis caching config and JDK install from scala-dev (#8562)
Import travis caching config and JDK install from scala-dev
Check if setter is shadowed for assignment (#8558)
Avoid testing unreliable accessor in -Wself-implicit (#8561)
Avoid testing unreliable accessor in -Wself-implicit
two more tests for apparently-fixed issues
review comments order matches in expected frequency order (Array, WrappedArray + associated builders, and ClassTag.newArray) avoid extra def in BitSets don't optimise for NoBuilder cases
Add from full location
Improve API doc of PathFactory and name of new compiler option
[nomerge] Backport windows test fix
Say cannot be accessed as a member, cf dotc
Test case to exercise Ypickle-write / -Ypickle-write-no-private
Factor out utility code from PipelineMainTest
Avoid temporary byte arrays when reading .class/.sig or source files from VirtualFile
Check if setter is shadowed for assignment
Override stringPrefix for SeqMap
Allow custom interpretation of path strings in settings
Add a mode to write separate .sig files without really private members
More styling
Revert "Test for fixed private this var ctor param"
Harden Array.apply optimizations against `{???; Array}.apply(...)`, etc
Test for fixed private this var ctor param
[nomerge] ConcatIterator.last advances
Advance ConcatIterator.last
Update code style for readability
Mention `enableOptimizer` and `setupPublishCore` in the README
Improve root import filter for universal members
Dealias chain all the things when looking for Any (#8538)
Extend varargs empty sequence optimisation.
Matching strings makes switches (#8451)
Property tests for BigInt
Augment test per ticket (#8540)
Bump Xmx for type-tag-leak
Test for inference ticket (#8544)
Test for inference ticket
Honor pluginsdir for jars containing plugins
Pick up plugins from jars in pluginsdir
Exclude universal members from root module import
Augment test per ticket
Dealias chain all the things when looking for Any
Integrate methods of `NameOps` directly in `Name`.
Get rid of the last implicit conversions from String to Names.
[nomerge] workaround for SDKMAN getting stuck
PickleBuffer: avoid middle stops when growing up
suggestions
one val
ignoring some useless things
spec: Replace "first-order types" with "proper types"
fix indentation for dotc (#8529)
fix indentation for dotc
No collections but the new
workaround for SDKMAN getting stuck
UnPickler: removing unneeded legacy stuff.
warnings patrol, 2.13.2 edition (#8527)
warnings patrol, 2.13.2 edition
ZipArchiveFileLookup: avoid Option.withfilter
[Scaladoc] scala.util.Using code samples are a bit simplified
`this(...)` ctor apply cannot supply type params... (#8476)
Upgrade Dotty to 0.20.0-RC1
Reduce allocations in inline info bookkeeping
use existing ClassTag
[nomerge] Avoid allocations of reusable CanBuildFroms
Remove well-intentioned yet incorrect assertion (#8515)
Remove well-intentioned yet incorrect assertion
Clean up sizeCompare
Reduce Tuple allocation in implicit part collection
Avoid awkward silences during CI builds to which Travis finds unacceptable
SourceFile: avoid using unboxed integers.
HasTypeMember: add specialised method query.
[nomerge] warnings patrol, 2.12.11 edition
UnPickler: avoid Boxed Integers and Tuple2 allocations.
Removes the use of a CountDownLatch in Future.never so ScalaJS will be able to use it
Show expected in AssertUtil.assertThrows
Avoid a :: allocation in singletonBounds
Override ArrayDeque.{head, headOption} to avoid iterator allocation
Refactor out mapToArray and remove cruft
Avoid List allocation in =:= (via paramTypes)
Avoid list allocation in callers of `Symbol.enclClassChain`.
Avoid List allocation in ErasureMap
Avoid closure allocation in Symbol.overriddenSymbol
Avoid List allocation in emitParamAnnotations
Avoid allocation in repeated calls to paramss
Reduce allocations in MethodBType
Avoid lambda allocations in BType lookups
Reuse StringBuilder used for printing BTypes. (#8480)
Upgrade Dotty to 0.19.0-RC1
Cache the wildcard substituted implicit type
Eagerly remove() the BType.toString threadlocal from the main thread
2.13 version of Map.hashCode optimizations
Reuse StringBuilder used for printing BTypes.
Introduce cache for lists of WildcardTypes to reduce allocations in compiler
Avoid Option.WithFilter allocations. (#8485)
Forward port javap support
Correctly seed root direntry for ZipArchives
Refactor Javap support to support JDK 9
Avoid Option.WithFilter allocations.
ByteCode Body Builder: avoid middle lists allocations.
Browse directly to unit
`this(...)` ctor apply cannot supply type params
Attend code review comments.
Scope: use direct iterator to checkNoAbstractMembers
Browse safely after erasure
Revert invert type signature change
Allow references to inner classes in java signatures
Reuse buffers in pickler
Type Comparers: reuse the `SubstSymMap` instances.
TypeHistory: use mutability to avoid allocations.
Split splitAt between take and drop.
Matching strings makes switches
Test case for scala/bug#10856 (#8461)
Test case for scala/bug#10856
Case class copy and apply inherit access modifiers from constructor
Specificity of overloaded constructor of generic class (#8458)
Mechanism to exclude l:none from -opt:_ (#8454)
Skip implicit class members in implicit search at super call (#8441)
Improve performance of BitSet.iterator
Make ClassBType.toString cache lazy
Specificity of overloaded constructor of generic class
Cache ClassBType.toAsmType
Cache descriptor strings of primitive/class BTypes
[backport] Optimize BType and BType.buildString
Refactor Try tests to junit
Test for opt-warnings:none
Mechanism to exclude l:none from -opt:_
Revert "Use travis-wait-enhanced"
Explain change to Symbol.info with a comment about TSAN
Add `hr` label for hours in Duration.timeUnitLabels
Queue.iterator reverses in lazily
Handle compilation cancellation in SBT's entry point
MiMa whitelist
Make SingleType's cache fields volatile
runtime reflection: Avoid (benign) data race on ph/per
runtime reflection: Avoid data race TypeRef.normalized with double checked locking
Add a Partest option to use a different compiler (#8407)
Add `m` label for minutes in Duration.timeUnitLabels (#8325)
Add a Partest option to use a different compiler.
Add `m` label for minutes in Duration.timeUnitLabels
Enable autoAPIMappings in build (#8364)
Avoid partition in case equals synthesis (#8388)
Add more termination notes (#8392)
Wait for it (#8402)
Remove immutable.RedBlackTree.countInRange (dead code) (#8414)
Don't warn-unused private ctor default args (#8406)
Improve performance of BitSet.toBitMask (and .range*) (#8412)
Remove RedBlackTree.countInRange (dead code)
Inline replaceAllLiterally and reduce ells (#8416)
Improve example for stable identifier vs variable patterns (#8435)
Improve example for stable identifier vs variable patterns
Skip implicit class members in implicit search at super call
Use travis-wait-enhanced
Replace println with reporter.echo in doc
Improve performance of BitSet.range methods (also solves #11748)
Extra help for bad Java selections
Dont create tuples when generating hashcodes for immutable maps
Increase Travis timeout for log output from 10 to 30 minutes
runtime reflection: Avoid data race with perRunCaches/UndoLog
Distinguish super calls from instantiations in `splitAtSuper`
Stricten @varargs check.
Bump starr to 2.13.1
[nomerge] Make compiler phase ordering unambiguous
Make compiler phase ordering unambiguous
Test status quo for crash on 2.10
Avoid dotty compiler crash
Don't use iterator to modify the underlying Map in `mapValuesInPlace`
Clean up test that test is not elided
Reachable check is more short-circuited
Make reachable test robust
Inline replaceAllLiterally and reduce ells
Make repl output source compatible
Use Path and support VirtualFile in sbt check
Revert "VectorBuilder avoids copying data if possible"
re-STARR onto 2.12.10; begin 2.12.11-bin- series
Upgrade Dotty to 0.18.1-RC1 and rewrite do-while loops in scala.collection.*
Improve performance of BitSet.toBitMask
Avoid NPE in pursuit of perfection
Accommodate windows path in sbt accommodation
Extend the Gradle / sbt 0.13 leniency to Windows
Don't warn-unused private ctor default args
Replace wildcardToTypeVarMap with identityTypeMap
softer timeouts
Update README.md
Add soft await and enable Blocking test
Don't wait for success, just a result
TestUtil.intercept is assertThrows
Stop warning on higher-kinded usage without -language:higherKinds
Wait for it
Revert "Remove wildcardToTypeVarMap"
Update jquery.panzoom to 3.2.3 which is compatible with jQuery 3.4.x
[backport] A more conservative fix for phase assembly performance.
[backport] Revert buggy phase assembly optimizations
Synchronize Symbol.typeSymbol in runtime reflection
mutable version of https://github.com/scala/scala/pull/8032
Precompile -i files for script runner
A more conservative fix for phase assembly performance.
Revert commits:  cb7e494fdb7d1567792dc0af2dd0f23e930fcdb5  e83ea4415bc42b02b3f3042563fd970967032458  759b9795e908a0098b18abc25a88c32d625304bd
Don't spawn for no-op just to close
Don't spawn a thread when inheriting stdin
Use Java 7 redirection for process input
Add more termination notes
Add Benchmark.
Remove the verbosity of some partests
Small optimisations to the lubList
Avoid partition in case equals synthesis
Enable autoAPIMappings in build
Ignore package-owned privates for unused warnings
adriaanm’s note re PartestUtil.scala & sbt build
More source compatibility tweaks for reporters
Avoid spurious "illegal cyclic reference" errors
Avoid memory leaks in Stream methods
Null out the local variable holding the result of an inlined method
give better suggestion for unused pattern
Add deprecated no-arg constructor for StoreReporter
Move files of utilities in the testkit package to the testkit project
switch annotation issues warnings, not errors
Avoid ObjectRef overhead for effectively final case vars
Avoid unnecessary toSeq conversions in Seq methods
Avoid ObjectRefs in two hot paths in compiler
Update readme resume
Changes from som's branch
Review feedback
lengthen timeout in concurrency test case
More efficient ArraySeq iteration
remove modernizr (unused JavaScript dependency)
Revert Stream.Cons to the 2.12 encoding
Change markdown code blocks to Scaladoc
improve -Xdev help text
Optimize the classpath implementation
remove tooltip license, we no longer use the lib
Add links to GitHub for Scala modules [nomerge]
Add links to GitHub for Scala modules
Avoid using the "lines" method. (#8333)
Avoid using the "lines" method.
Optimize setting initialization with large classpaths
Enable hyperlinking to Java docs
Benchmark for classpah lookup
Make test direct (#8344)
readme: no more circular module dependencies
hello Metals, so long Eclipse and ENSIME
Deprecate named arg to locally
Update checkfiles after patmat AST revert
Update checkfile for cyclic plugin failure
Use the first scalac-plugin.xml from the plugin classpath
Reduce allocations in the backend (#8342)
Make test direct
A foreign definition induces ambiguity
Make the empty method on TreeSeqMap respect the orderBy parameter
Simplify reporters
Escape dollar signs for variables in doc comments (#8339)
Reuse an instance of FindMember
[bug#11687] Don't rebuild scala.Seq to drop elems in unapplySeq
Escape $ in docs for undefined variables
Move Severity out of Reporter
Allow uncheckedStable on defs, vars
Safeguard TypeCollector against reentrancy
Hoist TypeCollector used by containsTypeVar in hot path in basetypeseqs
Further defence against plugin.xml from parent classloader
Choose the inner-most scalac-plugin.xml resource during plugin resolution
Avoid lambda allocation, null check in Typer.typed
Avoid Tuple2 allocation in hot parts of typed{Select,Ident}
Optimize traitSuperAccessorName usage
Cache the descriptor of this during class generation
Revert "Generate shallower ASTs in pattern translation"
test review
review part I
[nomerge] Use foldLeft instead of /:
Be more explicit in our compiler phase ordering
Log phase levels under scalac -Xshow-phases -Ydebug -Ylog:all
A faster compiler phase assembly algorithm
Optimize compiler phase assembly
Benchmark for phase assembly
Set `sourceFile` in specialization only for classes being compiled
add knownSize to appropriate Iterators
Disable expensive lookup of source file in classfile parser by default
there is only one Diego
re-STARR onto 2.12.9; begin 2.12.10-bin- series
[nomerge] Remove accidental partest file backported to 2.12
Reduce allocations inside Attachment.remove etc
use uppercase L for long literal
Namers, PolyTypeCompleter: reuse the list of typeParams.
SpecialiseTypes: do not get a keyset.
Replace map2 with foreach2.
knownSize of IndexedSeqViewIterator is equal to remainder
Avoid allocation of full owner chain in typer.
add documentation as requested
Douse an allocation hotspot in pattern matcher
More clarifying -Xlint:help
Escape $ in docs for undefined variables
Add JDK 9 constant types to the ClassfileParser
Blacken subtrees where necessary in RedBlackTree.take
Avoid more allocations in nested class collection (#8278)
setupPublishCoreNonOpt for quick local bootstrap
Parent implicitNotFound message is supplemental
Avoid more allocations in nested class collection
[backport] Scaladoc fixes [ci: last-only] (#8271)
Avoid allocation of log messages when -verbose isn't enabled
Manage token buf size
fix BeanProperty example code
Remove wildcardToTypeVarMap
[nomerge] escape special characters in SyntaxHigh.scala
[nomerge] Properly escape any HTML in string literals in Scaladoc examples
[backport] Restore flags of nested modules in resident mode
Call releaseFence in constructors of DelayedInit classes with fields
Tweak the PF from fn literal synthesis (#8266)
Scaladoc: avoid bad links in `protected[x]` when `x` is external (#8254)
add headers
add some customization to jar writing jar writer can be customised ( to generate a specialsed jar writer) Allow plugins to augment a jar manifest
Tweak the PF from fn literal synthesis
Neg test case for using non-accessible annotation
 Backport ListBuffer.+= optimizations
PartialFunction scaladoc layout
Show FunctionN/TupleN/ProductN in diagrams for all N
Scaladoc treats annotations more like classes. (#8054)
Scaladoc treats annotations more like classes.
Scaladoc: avoid bad links in `protected[x]` when `x` is external
Check parents for ImplicitNotFound message (#8072)
Doc to avoid Unit box and unbox (#8084)
align spec on which identifiers are taken as variable patters v… (#8110)
Add protected and private visibility filters to scaladoc (#8183)
[nomerge] Error trees conceal references
Error trees conceal references
don't document private members
Add -private to scaladoc settings
simplify localShouldDocument
Make visibility togglable independently so that all is not required
Add protected and private visibility filters.
Add many type annotations to public members (#8184)
Upgrade Dotty to 0.17.0-RC1
Do not toggle full content if symbol have no full content.
Option test suite in Java (#8243)
Add many type annotations to public members
fix mutable.HashSet.addAll: remove redundant call to super meth… (#8192)
Update jQuery used in specs page to 3.4.1
Remove spec reference to `StringLike` (#8255)
Remove spec reference to `StringLike`
Add a JUnit test for Java interop of scala.Option
Optimize writing of InlineInfoAttribute (#8249)
Generate shallower ASTs in pattern translation (Scala.js users,… (#8061)
Escape special characters in compiler options data.
Generate shallower ASTs in pattern translation
Better error messages when pickle extractor fails.
Avoid use of default classpath in PipelineMainTest
Optimize writing of InlineInfoAttribute
-Ywarn-unused:privates doesn't warn on unused locals (#8128)
Clarify what Null is a subtype of. (#8053)
Clarify what Null is a subtype of.
Intypolator (#8173)
Avoid temporary strings in backend for non-nested class descrip… (#8245)
Avoid temporary strings in backend for non-nested class descriptors
Ensure that DelayedInit fields are non-final (#8239)
Avoid allocation of LinkedHashSet in Refchecks for every member (#8244)
Avoid allocation of LinkedHashSet in Refchecks for every member
Inline toIterable's deprecation method
Ensure that DelayedInit fields are non-final
use 'in Compile' for new scalacOptions (#8235)
[backport] List.filter optimizations from 2.13.x (#8226)
[backport] Optimize some hot callers of Symbol.name to use rawn… (#8238)
[backport] Optimize some hot callers of Symbol.name to use rawname
Optimise ClassTag lookup
use 'in Compile' for new scalacOptions
[nomerge] use 'in Compile' for new scalacOptions
Hoist creation of SubstSymMap out of hot loop in deriveSymbols (#8230)
Optimize macro plugin infrastructure to reduce allocations (#8228)
Reduce allocations for virtual compilation units (#8229)
Optimize check for by-name expressions (#8231)
Optimise implicit search
Hoist creation of SubstSymMap out of hot loop in deriveSymbols
Reduce allocations for virtual compilation units
Optimize macro plugin infrastructure to reduce allocations
[11630] Iterator#flatMap#hasNext calls outer#hasNext 1 time, no… (#8220)
Reduce overhead of active analyzer plugins in hot paths (#8227)
Tweak URI creation in RootPath for better windows support (#8224)
Reduce lint warnings (#8219)
Reduce the overhead of active analyzer plugins
More lint
[backport] List.filter optimizations from 2.13.x
Tweak URI creation in RootPath for better windows support
[backport] Performance tweak - avoid mapList in isSubArgs
Optimize check for by-name expressions
Simplify Array creation
Remove test based on incorrect assumptions
[11630] Iterator#flatMap#hasNext calls outer#hasNext 1 time, not 2-3
Improve ArrayDeque resizing logic
Reduce lint warnings
Add benchmark for ArrayDeque
unset JAVA_HOME (#8216)
unset JAVA_HOME
[nomerge] remove unused import.
Backport: list all lambda methods in `$deserializeLambda$` (#8214)
[backport] Inline: list all lambda methods in `$deserializeLambda$`
Synthesize a PartialFunction from function literal (#8172)
Add SRI check to verify the resource is correct
Use jQuery from webjars so users can read scaladoc offline.
Remove the file no longer used
Updated to CDN-hosted jQuery 3.x
Do not use offset on invalid jQuery object.
Replace event handler shorthands with on/off.
Replace input.attr("value") with input.val().
Use browser-native tooltip instead of outdated plugin.
Use AdoptOpenJDK JDK 8 for testing [ci: last-only] (#7931)
add sbt-whitesource
[nomerge] add sbt-whitesource
Use AdoptOpenJDK JDK 8 for testing
Synthesize a PartialFunction from function literal
Remove redundant method parameter
optimize immutable.TreeSet#{max, min}
removed redundant call to super method
Werror is both warn option and standard
Simplify the expressions
Stabilize args of apply
Show MiMa logs at the end of testAll in case of MiMa failures
Reject incomplete implicit dictionaries
-W over -Ywarn in help text
[#11589]s.c.Map#values returns a strict Iterable rather than a View
[#11600] Vector.from(ArraySeq) copies elems rather than reusing unsafeArray
Doc to avoid Unit box and unbox
Tweak deprecation messages for Ordering[{Float,Double}]
Revert speculative assert syntax
Use background thread handling in tests
Suppress stack trace in test
[nomerge] set every sourcesInBase := false
-Ywarn-unused:privates doesn't warn on unused locals
Inline calls to static trait super accessors if trait method is trivial
decode html escapes in intellij dependency paths
remove unused private method.
fix typo (#8182)
Quote terminal symbols in EBNF
fix typo
Make to able search FunctionN, ProductN and etc for N > 2
Supplemental test cases
Move StringContext test to junit
Micro-opt of ArrayDeque.remove
t10729 annotation usuage should extend annotation and Seq won't slay compiler
Stop overriding stringPrefix (#8090)
Update Dotty to 0.16.0-RC3 (#8135)
Test library/reflect jar sizes in testAll
Avoid redundant field in TermName, reducing size 40->32 bytes
Add a compiler option to write .sig files to disk
Support Java 9 bytecode by adding "-target:jvm-9"
Add a test-case for issue 9352 (#8174)
Add a test-case for issue 9352
Backport changes to Names and ClassfileParser
Intypolator
Cache materialized TypeTags
Process exit code on script errors
Skip commit '3b25e05' for 2.13.x
Skip merging #7958 into 2.13.x -- optimization only, too many conflicts
Skip merging #8086 into 2.13.x -- optimization only, too many conflicts
Skip 1a16514 for 2.13.x
Skip up to e75815c for 2.13.x
Skip up to 12f03cf for 2.13.x
Skip up to 'b44abea' for 2.13.x
Skip commit '8257b83' for 2.13.x
Skip '3347caa' when merging 2.12.x into 2.13.x
[backport] +compiler/reflect the the bench classpath
Disable flaky tests for now
Improve assertion failure in bytecode diffing tests
Improvements to the IntellIJ config.
Integrate benchmarks into the main build
Use ClassTags instead of Manifests in `VectorTest`.
mark 2.12 spec as not current anymore
language spec: 2.13 is no longer an upcoming version
remove all "version" tags from Scaladoc
Java fields don't override each other
Test case for fixed Java interop bug
Improve IntelliJ project configuration
remove all "since" tags from Scaladoc
Switch PartialFunction's fallback from PF to => (#8016)
Dead code in partest (#8024)
allow publishing testkit
Update windows job to use default java (i.e., 8)
remove unnecessary compilerOptionsExporter project
Close .args file after reading
Optimize TypeMaps used for TypeVar.unrelatable & isRelatable
add print.css to scaladoc
Windows compat for PipelineMainTest, finally?
Avoid compiler crash in REPL with string interpolation
Convert lock to latch
Construct tree browser on event thread
Cleanups based on review feedback
Get declared fields from superclasses as well
Replace Xprint usage with Vprint, no code changes
bump baseVersion to 2.13.1
Awaitable.result should have a throws annotation of TimeoutException and InterruptedException as well as Awaitable.ready.
Prefer PartialFunction#runWith over isDefinedAt/apply
Simplify PartialFunction.Unlifted's applyOrElse
Simplify ReflectionUtils.unwrapHandler
Add more XML to partest suite
Dedup stringPrefix deprecation message
Restarr on 2.13.0
Correct Java signature for value classes appearing in type arguments
Avoid invalid paths in the pickle cache on Windows
fix formatting
Also deprecate backing field symbols.
TypeBounds: try to avoid creation of the type bounds.
RefChecks: avoid List allocations from flatMap and Map
Add StringOps#collect methods
add test
align spec with implementation
Added to the document about why it is 'unsafe'.
fix 11551. use == instead of equals in BitmapIndexedSetNode
Sleep longer to overcome shutdown hook concurrency
re-STARR and reset MiMa onto RC3
Simplify List.flatMap
Disabling DelayedExpansion during executable call in the Windows .bat file to avoid issues with ! in qouted strings
Enable new implementation by default
Introduce a new implementation of implicit shadowing
fixup mima
Add delegating override to s.c.i.StrictOptimizedSeqOps
Remove CollectionConverters.Ops, was only for Scala.js compat in RC2
Generalize MapOps signature for keyStrem / valueStream extension methods
Remove unnecessary type parameter on `IterableOnce#stepper` (#8083)
SeqView/IndexedSeqView/MapView tapEach returns SeqView/IndexedSeqView/MapView (#8099)
Rename to FutureConverters#as{Java,Scala} (#8094)
Update t7747-repl.check
Add `isFinite`-method to RichDouble and RichFloat
Add empty paren constructor for s.c.i.HashSet (#8096)
Add default IterableOnce#knownSize impl (#8093)
Un-deprecate `option2Iterable`
Update callcc-interpreter.check
ZipArchive isJarOrZip
Prefer Type.foreach to Type.filter
Require and target Java 8
Adjust ArrayDeque resizeIfNecessary
[squash] more tests
Optimize macro context creation
Cache macro impl binding lookup
Be lazier in assembling macro FastTrack mappings
Optimize symbol lookup from an import
Fuse freeTerms and freeTypes in post-macro accounting
Avoid building temp set in Attachment.remove
Add comments to test
Optimize macro reflection
Remove concat, ++ and + overloads from MapView
fix return type in docs
expand on sliding doc
[backport] Disable stack hungry test of deprecated PagedSeq
fix help text for multiple args to -opt-inline-from
Upgrade Dotty to 0.15.0-RC1
Backport ASM 6.2 upgrade to 2.11.x via 2.12.x (#6733)
bump versions: starr 2.11.12, jline 2.14.6
[backport] Determistically enter classes from directory into package scope
bump straight to sbt 0.13.18
run/classfile-format-52.scala, run on java8, needs -target:jvm-1.8
[backport] Update test case to changed JDK behavior
Test for backported fix in prior commit (pls merge forward)
[backport] Drop leaky encoding from JavaParser
Deal with unpositioned Javac diagnostic messages
PipelineMain: add test, make it more testable and less buggy.
Add experimental support for outline typing
Avoid typechecking val and def tpt-s twice
Check parents for ImplicitNotFound message
Try any expression
Update README.md
Deprecate the companionClass of any2stringadd
Reset MiMa to 2.13.0-RC2
Deprecate overriding deprecated APIs intended for overriding
Push ObjectTpeJava handling into a version of typeIsAny
ObjectTpeJava part 2
[nomerge] merge pull request #8051 from retronym/topic/sameName
Avoid bad generic signatures when mixin forwarders tparams shadow
Improve 'partest --help'
Partially apply BuildFrom to Factory
Deprecate option2iterable
Make Option extend IterableOnce
Some comments as follow up for #7966
Deprecate external access to Names.chrs
Avoid direct use of Names.chrs from Symbols
Rationalize subclasses of Name
Rework the way we unify Object and Any in Java/Scala interop
Change toString for lazy collections
Preemptively override s.c.i.HashMap#updatedWith in anticipation of future performance opt's
fix Duration scaladoc. avoid postfix
Avoid deep ASTs in StringContext rewrite.
Remove unused, duplicated copy of findMacroClassLoader
Improve timer-based eviction of classloader caches
Sync-up ScalaCheck to 1.14.0_sonatype@2e02142
Test cases
Revert "Emit mixin forwarders as bridges to avoid needing generic signatures"
Prepare MiMa filter
Revert "Stop generating generic signatures for mixin forwarders"
Revert "Test the interaction of mixin forwarders and overloads"
Revert "javac sees better types with new mixin forwarder scheme"
Revert "Don't emit mixin forwarders as final"
Replace `tail.nonEmpty` with `sizeIs > 1` as sources might be `Nil`
Remove code in compiler per TODO
Drop compat constructors in PathResolver and ClassPathFactory
OverloadedArgProto's toWild also nukes undets
Properties.versionFor private[scala]
Remove code in partest per TODO
four space indentation
fix xss by writing the input parameter properly to the dom
Optimize importedSymbol
fix XSS vulnerability in scaladoc search
Check template stats for wildcards.
Switch PartialFunction's fallback from PF to =>
[nomerge] Package LICENSE/NOTICE with jars
Show attachments in tree browser.
Make SortedSetOps#ordering not implicit
Use the correct Ordering in SortedSet#{min,max}
Un-deprecate left Either projections
Delete trailing whitespace
Deprecate scala.collection.mutable.MultiMap
Add lower type bound to AsComparable
Remove `@note`s referring to Iterator
[backport] Scaladoc: support setting canonical URLs
Allow negative initial size in ArrayBuffer
Ignore two unchecked warnings.
Drop uncheckedVariant type alias from BitSet
Return correct array in ArrayOps.sorted.boxed
Update instructions an automation for using JITWatch for benchmark analysis
correct jansi version in intellij setup
Add deprecated scala.jdk.CollectionConverters.Ops
change Scaladoc copyright notice to match main notice
remove @author tags from (mainly) src/library
Revert non-public Stepper implementations to invariant
Move FunctionConverters to javaapi
Move StreamConverters to javaapi
Move DurationConverters to javaapi
Move FutureConverters to javaapi
Move CollectionConverters to javaapi
Move OptionConverters to javaapi
Small doc comment cleanups
Scaladocs about java boxes on explicit conversion methods
Java test for StreamConverters
Add explicit keyStream / valueStream conversion methods to StreamConverters
java tests for Option / Function Converters
use java box types in explicit java converters
Existentially abstract unrelatable skolems only once
Avoid CCE with in seq-pattern on case class with lengthCompare
Limit string interpolation intrinsic avoid compiler SOE
[bug#11443] LazyList methods allow GC
Restore StringContext#standardInterpolator
Remove workaround for older dotty compiler
Upgrade the CI Dotty version to 0.14.0-RC1
dont generate a list and ListBuffer to add a single element to the list of annotations
Override `stepper` in VectorMap, ArrayDeque
Make Stepper covariant
Use ArrayStepper for ArrayBuffer, ArraySeq
Port FutureConvertersTest from java8-compat
Add missing overrides to FutureConvertersImpl.CF
add lampepfl org to CoC
Add more serializations tests
un-comment some tests that work now
Add missing shape classes for boxed Java primitive types
fix some typo
Don't emit mixin forwarders as final
Package LICENSE/NOTICE with jars
add CollisionProofHashMap to StepperTest
clean up StepperTest, clarify ORDERED flag
Don't use TableStepper for LinkedHashMap/Set
Remove workarounds
Test for Steppers
Port StepperConversionTest from java8-compat
Port StreamConvertersTest from java8-compat
partest: document '--debug' keeps generated files
Improve hash code of Names
[backport] Reduce allocations of NeedSigCollector
Reduce allocations of NeedSigCollector
As per Viktor's recommendation
Rough scalcheck tests for Accumulators
Wording for Promise to avoid memory retention
Types - isWithinBounds: avoid middle list
Eta lifts function before args.
re-STARR onto RC1
Re-enable MiMa
Test for scala/bug#11042
Improve message for infix nullary invocation
Scaladocs for Accumulator
Move Accumulators to scala.jdk
Make Stepper.trySplit/estimateSize/characteristics public
StreamConverters scaladoc
Improve scaladocs for steppers
Small cleanup after the IterableCC PR (7929)
Make *FactoryDefaults traits covariant
Refchecks must check all symbol pairs
Get rid of unsafe type alias IterableCC and co
Refine type returned by SortedMap#updatedWith
Add deprecated asScala/asJava for option converters
Address review feedback in FutureConverters
Add more Scaladocs for collection.SortedMap,immutable.{SortedMap,TreeMap}
[11440] ArrayDeque.empty#sliding(1) returns empty iterator
SpecializeTypes/Unify: avoid allocations
create trait collection.SeqMap
Duplicators: avoid allocations in call to invalidateAll
Avoid Changes that change semantics
Cleanup Tranforsm: reduce allocations.
Optimization in symbol pairs a bit less wrong again
Remove overridden productPrefix in case class equality test
Don't clear parent block context of AsyncBatch
provide map, flatMap, collect, concat that return CollisionProofHashMap
Add releaseFences before we return a freshly mutated Vector to client code
Vectors smaller than 32 allocate small arrays when possible. When creating from varargs, reuse underlying array
Optimizations for s.c.i.HashMap#keySet
keep TrieMapIterator non-final for parallel collections
fix to BitSetStepper
test that function converter wrappers are serializable (they are case classes)
avoid double wrapping in function converters
make JavaConverters more like it was in 2.12
override def stepper in Accumulator superclass
rename Accumulator.longSize to sizeLong for better IDE discoverability
make Accumulator extend mutable.Seq
Provide overloads for map/flatMap/collect in specialized accumulators
allow fromSpecific / newSpecificBuilder to build a non-supertype
override iterableFactory in accumulators
fix semantic merge conflict
work around dotty issue 6152
add missing stream converter
relax bound on stream type to make stream extensions compile on dotty
why is Any not poly-kinded in dotty?
workaround for lampepfl/dotty#6144
result type for implicit defs
add missing overrides in accumulators
minor docs
make StepperShape.Shape a value class
Rename collection.convert.EfficientSubstep -> collection.Stepper.EfficientSplit
Move shape type classes to where they're used
Move accumulator shape type classes to where they're used
Move EfficientSubstep, StepperShape to collection.convert
remove StepperOps, Spliterator.asScalaStepper
move Stepper to scala.collection
Optimize some hot callers of Symbol.name to use rawname
trySplit may return null
Slim down the Stepper interface
small doc clenaup
Add FutureConverters from java8-compat
Add duration converters from java8-compat
Add missing methods to OptionConverters
move OptionConvertersTest to jdk package
Move function converters to scala.jdk.FunctionConverters
Review feedback: move deprecated methods to JavaConverters
Review feedback
Create scala.jdk.StreamConverters object
fix tests
Change names of stream extension methods to include asJava
Add jdk.OptionConverters
deprecate collection.convert.ImplicitConversions
fix scaladocs of accumulator
Add jdk.CollectionConverters, deprecate collection.JavaConverters
improve scaladocs for ChainingOps
Accumulators are serializable
clean up steppers, operations more in synch with iterator
remove unused anticipateParallelism
use efficient table steppers for LinkedHashSet/Map
cleanups to accumulators
small cleanups for champ steppers
small cleanups for tree steppers
small cleanups for mutable hash maps / sets steppers
small cleanups to string steppers
small cleanups to range stepeprs
small cleanups to vector stepepr
non-overloaded BitSet.stepper method
Normalized accumulators to build like other collections.
Added steppers to HashSet and HashMap via ChampHashStepperBase.
Stepper that works on binary trees, plus impl for TreeSets/Maps
Covered mutable hash sets and hash maps with the same Stepper impl.
Wrote a Stepper for the new HashSet.
Added Stepper to String.
Steppers for Range and NumericRange.
Added Stepper to Vector.
Ported BitSetStepper (new name) to standard library.
Moved `stepper` into `IterableOnce`.
remove unnecessary upcast
Add seqKey/ValueStream and parKey/ValueStream extension methods to maps
fix substep in proxy steppers
Any collection where `stepper` returns EfficientSubstep gets `parStream`
Add keyStepper / valueStepper methods to maps
 extension method for spliterators
avoid boxing in Array(1,2).to(Accumulator)
add toArray to steppers
remove unused classes
move AnyAccumulatorStepper to AnyAccumulator
override className in accumulators
check for primitive consumers to avoid boxing
use addOne to prevent boxing
rename AccumulatorStepper -> AnyAccumulatorStepper
move AccumulatorFactoryShape, AccumulatorFactoryInfo to impl
Stream[Int].unbox extension method
Convert primitive steppers to primitive accumulators without boxing
toScala extension method for java streams
Bring Stepper.to method in line with collections
Rename Accumulator -> AnyAccumulator, AccumulatorBase -> Accumulator
Integrate accumulators into collection hierarchy
test for stepper / seqStream / parStream methods
stepper and seqStream/parStream methods for arrays
seqStream / parStream extension methods for steppers
seqStream / parStream extension methods for collections
Stepper (with EfficientSubstep) for IndexedSeq
Remove seqStream / parStream from Stepper subclasses
Add `stepper` to IterableOnce
Stepper and Accumulator from java8-compat
JavaConvertersOption
Add java function converters
Minor cleanups in source generators
Make our Travis scripts fail fast
s.c.i.Hash{Map,Set} concat/removedAll use shallow mutations
[backport] Avoid using bootstrap JARs in partest
Extractor methods must take a single argument.
Optimize formalTypes
Break up Symbol.info for JIT friendliness
Benchmark for Symbol.info
Modify tests that used JARs to use sources
Avoid IntRef in Array.apply
Namers: some small optimisations to avoid allocations
JavaMirrors: avoid the use of List flatten and map
Remove backwards compatibility from extension methods
Revert "GlbLubs polyTypeMatch: No matrix no transpose"
Revert "Add sym shorthand for Symbol" (#7917)
Reduce allocations in Hash{Map,Set}Builder.newEmptyRootNode
Add library support for future fix for scala/bug#11345
Avoid vararg boxing/iteration penalty in hot code in unpickler
Avoid allocation of Reporter.ERROR to determine !hasErrors
Remove deprecated opt opts
Move options exporter to build command
Werror and friends
Optimize s.c.i.HashMap merged implementation
Refactor super type handling in checkAccessible
Honour the TRIEDCOOKING fast path for overloaded symbols
Avoid the use of modifyInfo in maps
Update src/reflect/scala/reflect/internal/Types.scala
Really remove pesky -Y flags that have crept through merging/rebasing
Uncurry: avoid intermediate lists, remove ParamTransform ADT:
Update src/compiler/scala/tools/nsc/ast/parser/Parsers.scala
Don't zip AppliedTypeVar params and typeArgs
Small tweak: Avoid list allocation
Small tweak to "isHotForTs"
mergePrefixAndArgs: Small performance hack
Small improvement: bring test forward
Inline WeakReference get method
Replace a list of booleans by a mutable BitSet.
Type depth: avoid List.map when computing maximum over list.
Further refactor makeFullyDefined into a full TypeMap
Infer: replace List reverse by ListBuffer
Changed the handling of Map additions to incorporate the 2.13 deprecation of + on the Map trait and instead used an immutable Map
Submerge the Variance extractor function into the solve functions.
Avoid redundant computation of undetParams / refacator to avoid confusing similarly named idents
Update test/junit/scala/collection/mutable/PriorityQueueTest.scala
Refactor the ArrayBuffer imple closer to ArrayDeque
Add shrinking to ArrayBuffer
Promote `-deprecation` to `-Xlint:deprecation`
Empty PriorityQueue mapInPlace should not crash
Follow-up for #7847
Drop stray commented-out definition.
Drop leaky encoding from JavaParser
GlbLubs polyTypeMatch: No matrix no transpose
Rename foreachKeyValue to foreachEntry
Add Map.foreachKeyValue to avoid tupling penalty
Extension methods of overloads are themselves overloaded
Refactor adjustTypeArgs, giving its result record a name
RHS of var def is an expr
VectorBuilder avoids copying data if possible
Revert the implicit dummy params added for Dotty
Remove redundant final on objects
Remove incorrect @tailrec detected by Dotty
Update Dotty to latest nightly
Make canonical instance of scala.util.Using.Releasable be an implicit object
Add a generic bootstrap method for future use
mailmap me!
Don't give unhelpful unemptiness advice.
Update and improve LazyList docs
Remove unnecessary calls from LazyList#force
Recycle the hashset used for implicit shadowing
Converters among optional Functions, PartialFunctions and extractor objects
Override the bulk version of read for efficiency
Resort to old-school git HEAD detection in the build
Avoid using Names for fully qualified class names
Reuse the buffer for classfile reading
Eagerly read from the constant pool as a basis for lazy types java class/method
Avoid Names for descriptors, generic sigs, and string constants
Print name table size after compilation under -verbose
Deprecate `scala.Proxy`.
Replace "zipped" by combinators without list allocations.
Revert unwanted changes to imports
Revert unintented formatting change
Tailrec patrol: src/library
Tailrec patrol: src/compiler
Tailrec patrol: src/reflect
Remove artificial safeTagMarker in rendered StringLiterals
Clean up file at hand to prepare changes * added several simplifications of the syntax * changed mutable Map handling to reflect 2.13 deprecations
[backport] Prefer HTTPS over HTTP for pom.xml data
Optimisations: avoid List allocations in the RefChecks.
Remove List Allocations in the Checkable
Prefer HTTPS over HTTP for pom.xml data
Add Numeric#sign: T method
Add more test for Double#signum
remove newline.
Scaladoc comment on why IterableOnce doesn't extend IterableOnceOps
change Numeric#signum: Int to return T
Optimize Nil.unzip
Prefer Map.transform to Map.map in the specialize phase
Optimize MapN.transform for less tupling and more structural sharing
Definitions - SymbolSet class: deforest middle list.
Delay deprecating package object inheritance until 2.14
Superaccessors: merge several List method.
Optimisation: replace mapParamss with a foreachParamss
Replace the uses of map for substInfo
javac sees better types with new mixin forwarder scheme
Test the interaction of mixin forwarders and overloads
Stop generating generic signatures for mixin forwarders
Emit mixin forwarders as bridges to avoid needing generic signatures
Remove Type.boundSyms method, after deprecation cycle.
Backports Regression tests from 2.13.x to 2.12.x
Typers: by-pass the unzipped list of pairs.
Refactor to add result types and avoid more temporary Lists
Avoid the call to BaseTypeSeq.toList in type Unification.
intellij project templates for new testkit module
split out shared testing code into new subproject
Optimize ListBuffer
Don’t use setNext to implement ListBuffer#update
Review feedback from lrytz
Friendlier override/abstract error messages
add more `final` modifiers
Subclassing on traits does not imply suffixing for their linearisations
Add missing overrides for knownSize
cleanup in refchecks
Reduce allocations in Uncurry.transformArgs
Make varianceInType allocation free with a reusable instance
Reduce SAM lambda allocation within varianceInTypes
Extract the ContainsAnyCollector object out of loop.
Clean up length/size comparison methods
Remove use of List.map in the "varianceInTypes" function.
reduce postfixops in scalap
no postfixops in scaladoc
no postfixops in reflect
no postfixops in nsc
no postfixops in patmat
Avoid using List.zip in the SpecializeTypes unification
Minor refactor for readability
copyMethodCompleter: Replace map2 with foreach2
Uncurry: avoid using List.flatten
Scaladoc: support setting canonical URLs
Optimize attachment lookup and prefix stabilizer addition
Show constructor def strings TAB,TAB, as we do for methods
Optimize checkAccessible for super constructor calls
Assert that non-overloaded constructors don't need this type substitution
Add another layer of div to the Linear Subtypes and Known Subclasses expandable
conduct minor cleanup of Entity within scaladoc tool
Switches the implementation order of ExecutionContext.global and Implicits.global
Introduces ExecutionContext.parasitic
Use LinkedHashSet instead of ListBuffer: better query times
Add parentSymbolsIterator method. Use it instead of the info.
Avoid using List.flatten
Avoid trailing zero bytes in .sig files written in PipelineMain
restore compat for PathResolver, ClassPathFactory constructors
Avoid using List flatMap withi normalizeImpl
Avoid NPE during global initialization under -verbose/-Ylogcp
Avoid the parentSymbols method: less allocations.
Optimize BType and BType.buildString
Avoid hashmap lookup in isNumericSubClass
Allow List.isEmpty to be an invokevirtual
Selectively Backport some changes
reduce build noise in junit subproject
convert BoxUnboxTest from JUnit to partest
make partest subproject depend on junit subproject, not vice versa
Add cooperation between im/mutable HashMap/Set in respective addAll/subtractAll methods * immutable.HashMap.addAll(mutable.Hashmap) now uses the argument's elements' hashes * Add immutable/mutable HashMap/HashSet properties for concat/addAll/subtractAll/removedAll
Override List.last for efficiency
Prefer !isEmpty to nonEmpty for performance
Avoid CCE with no message
Restore deprecated bothnames method.
minor build cleanup: use `skip in publish`
Honour CachePolicy.None in classloader/classpath caching
Use file size as part of the cache invalidation
Remove outline typechecking for now
Remove the bothNames method from the Name class.
Typers: merge treesInResult with errorInResult
Clean up TODO in LazyListLazinessTest
Use modern Java API
Kill partest.nest.ConsoleRunner
Drop language feature forwarders in tools.cmd
Trim & drop tools.cmd & tools.partest.nest imports
Move most of tools.cmd package object to tools.partest
Move most of tools.cmd into tools.partest
Move cmd.Meta to partest.nest
Move tools.cmd.Property{,Mapper} to t7591
Compile the stdlib with Dotty as part of the CI
Make @deprecatedInheritance final
Override some collections methods in Range to use optimised implementations.
throw custom NSEE for empty ranges rather than Nil's
Improve Seq#sorted and SeqView#sorted
Whitelist some binary changes to internals of scala-reflect
Refactor PipelineMain
[nomerge] Restore findMacroClassloader into Analyzer for the 2.12.x series
Add lazy builder for LazyList
Remove usesMutableState from ScalaDocs
Mutable RedBlackTree improvements, tests & benchmarks
Quote terminal symbols in EBNF
Make scalaUtilChainingOps inline
Restore API in typer used by scala-meta
Complexity: fold map into the sum.
Add sjrd to the maintainer list, for interactions with Scala.js.
Small performance tweak to glbNorm.
Allow sorting of array slices
A mutable HashMap that degrades to red-black trees in the worst case
Remove text that states CDATA sections or PIs are not supported
Small optimisation in glbNorm function.
Performance: use disjunction instead of list concatenation
Back-ports changes to add upperBound, lowerBound.
Harmonizes exception handling for BatchingEC
Publicise PlainNioFile and implement underlyingSource
Revert "Disable parallelism in the scalacheck suite"
[backport] Nicer branch-sensitive nullness
[backport] Upgrade to ASM 7
Fast track `s` and `raw` string interpolators
readme: reorder maintainers, add Stefan and Viktor
remove inactive maintainers
misc minor readme tweaks
Make Seq#sizeCompare param name consistent
partest 1.1.9 (was 1.1.7)
Add missing copyright headers
[backport] Resource management for macro/plugin classloaders, classpath JARs
Valid URL for VirtualDirectory classpath
Driver to build a set of compile @argsfile-s in pipeline.
Experimental support for outline typing
.sig file support
Compute pickles for .java sources
Utility to extract Pickles from Scala compiled classes
Utility to abstract over JAR and directory I/O
unpickler cycle avoidance
Performance tweak to sameTypesFolded
Further optimize ListBuffer.addAll
Optimize ListBuffer.addAll
Update src/library/scala/collection/immutable/LazyList.scala
Added comments to the method force of class LazyList
Remove duplicated check for unit.isJava
Add scaladocs to scala.collection.Searching
Adding a fast-path for Await on already completed Futures
Time-boxed wait for test condition
Bump timeout in future-spec
Remove empty scala.runtime package object
Replace final object -> object
Future-proof the collections for Dotty
Add missing SeqView#knownSize
Support scalac -release on JDK 12+
Restrict DummyImplicit creation
fix comment according removed s.c.i.Node#sizePredicate
you might not know it now, but baby you're a STARR
Add Growable#knownSize with reasonable implementations in Builders
Use reflect.runtime.currentMirror
Test defect for reflection of private fields
Adding custom error messages that Promises&Future are not serializable
Improves performance and fairness of BatchingExecutor
Further improves performance of Futures via BatchingExecutor
Addresses both performance and correctness aspects of Future
Modifications to FutureBenchmark, for performance
Enabling performance optimization for synchronous BatchingExecutors
Significant performance improvements to Futures
Make inferred packedType-s determistic in bytecode
fix regression in handling of local `synchronized` methods
restore the by-name semantics of Stream.append. fixes scala/bug#11392
Un-deprecate eta-expansion of 0-ary methods
[backport] Use Java rules for member lookup in .java sources
Use Java rules for member lookup in .java sources
Minor adjustments to Option's doc
Use lazy Framework implementation for ScalaCheck
Eta-expand 0-arity method if expected type is Function0
Assert
Unused debugwarn
Remove forScaladoc flag
Remove forInteractive flag
Miscellaneous warnings
Annotate stringprefix
restore verbatim Apache license
Cache -Xsource comparisons in currentRun
Drop support for -Xsource:2.10
Use sentinel rather than null for missing file key
Some minor cleanups
Implementations of delegating collection factories do not recreate collections to be specific type they delegate to
Type-annotate & fully qualify ExecutionContext in its implicitNotFound message
Improve doc for Option
Test for already-working partial function inference
Deal with existential types in lambda arg type inference.
Unused imports and serial ID
Deprecate symbol literal
Widen mutable.BitSet operations to accept any BitSet
Setup Unit companion as CompileTimeOnly
Add `@transient` to make the serialization check happy.
Mix the productPrefix.hashCode into the hash code of case classes
Error on super accessor that would cause verify error
sbt 1.2.8 (was 1.2.7)
[nomerge] sbt 0.13.18 (was 0.13.17)
remove test specific to old collections
Undeprecates fold and scan, reverts #6866
Optimize s.c.m.{Map, HashMap}#filterInPlace implementations
Optimize s.c.m.HashSet#filterInPlace Add scala.collection.mutable.HashSetProperties
Add sym shorthand for Symbol
Comment Set.remove
Improved documentation around the use of Types#appliedType
Make unified collection serialization opt-in instead of opt-out
Use <:< for Option.unzip
Improve implementation of classloader caching
Use reflection to access j.l.management from diagnostic tools in scala-reflect.jar
fix typo
Optimize s.c.m.Set#filterInPlace
Conditional is always boolean
fix typo
resolve semantic merge conflict from 2.12.x merge
Added scala.collection.convert.WrapperProperties
s.c.convert.JSetWrapper#filterInPlace delegates to underlying#removeIf
[#11246] MapView overrides transformations to return MapView when possible.
Remove s.c.i.Node#sizePredicate
Port optimized s.c.i.HashMap#concat to s.c.i.HashSet#concat
Make all *.scala *.sbt *.txt *.md *.yml and README files end in a newline
Move isMethod virtual call after cheaper phase.flatClasses
ListMapBuilder#addAll optimized for case of Map,MapView
Add doc to Option on pattern matches
Remove ListMap#from_old
Optimize ListMap.from(IterableOnce[(K, V)]) for LinkedHashmap,Map,MapView
StrictOptimizedIterableOps#strictOptimizedConcat does not create iterators before forwarding to builder
Enumeration ValueOrdering is implicitly available
upgrade MiMa to 0.1.18 (was 0.1.15)
Take CR as line terminator in linesIterator
Eliminate LaTeX-style quotations from compiler output and comments
Add an immutable.StrictOptimizedSortedSetOps
Set#concat: avoid clashing overloads by adding a DummyImplicit
Make Set#++ take an IterableOnce like Set#concat
ProcessImpl: add missing () when calling take()
Avoid Dotty warning "final modifier is redundant for objects"
Implement `take` and `slice` in VectorIterator
Align specificity of `(a: T)...` vs `(a: T*)...` with mono case...
Promote stats flag to setting
Remove redundant `final` flag on objects
Rename JavaSerializableClass to SerializableClass
Lazy implementations of takeRight and dropRight
Improve the tuple adaptation warning message
Deprecate package object with extends clause
Constructor keeps ref to private local field
Retain empty parens as unit value
Lint pattern in vardefs
Deprecate 1l and lint 0755
HKT inference and GADT improvements
Bring back deprecated Symbol.isLocal method
Add missing bridge with self types, aliases
Simplify indy lambda call
Do not take wildcard wildly when backquoted
Remove -Xmax-classfile-length; hard-code to 240.
Drop toRight and toLeft from list
Improve wording of orElse and getOrElse
bump copyright year to 2019
Change "helper functions" to "methods"
Change LazyList to have a strict head
Don't specialize super accessors
hijack string interpolators during typer
Java classes may implement Java annotations
Don't check for escaping privates in Java sources
Annotations in Java may be inner classes.
Add IndexedSeqView overrides for view(from, until)
Remove dead code in LambdaDeserializer
Clarify Builder/ReusableBuilder semantics
Link useful Option functions
Distinguish backquote underscore as variable name
Better index checking in Seq.updated:
Strip OverloadedArgProto from view's expected type
More precise inference for overloaded methods when arguments types align
LMF only builds bridges for SAMmy
Add missing parenthesis in usage exemples for scala.util.Using
Get process exit code before doing anything
Tests illustrating need to deconst literal type
Deconst result type of non-getter method application
Deprecate unicode arrows `⇒`, `←` and `→`
Make HashTable a trait so that it can be used as a mixin.
Add immutable TreeSeqMap (a SeqMap implemented via a customized IntMap/HashMap pair)
fix LinkedList definition
Small Corrections to mutable.PriorityQueue
Performance tweak - avoid mapList in isSubArgs
Remove unused code.
Small tweak to "isHotForTs"
Small tweak: Avoid list allocation
Clean up `ControlThrowable`.
Define `reflect.Manifest` as an `object` rather than a `val`.
Clean up StrictOptimizedOps traits
Don't zip AppliedTypeVar params and typeArgs
Rename partitionWith to partitionMap; add to ArrayOps/StringOps
Add type annotation to `ProductN`,`TupleN` and `FunctionN`
Don't try to issue type mismatch errors for erroneous anon classes
Add regression test for Bugs 8584, 9485, 9963,
Add findLast method
Add splitAt to IterableOnce
Override LinkedHashMap.{last,lastOption,head,headOption} for performance
Remove TypeTraverserWithResult class.
Restoring efficiency of product based part of hash code in MurmurHash3.unorderedHash for collections with size > 30
Separate Type Folders from TypeMaps.
Add ArrayOps#copyToArray(Array)
Avoid existentials in `diff` and `intersect`
Add regression test for Bug 6962
Add regression test for bug 7891.
[backport] 11330: Port fix for byte array hashcode
Clarify comment
Add regression test for GADT partial function issue
Add regression test for specialized pattern match bug
Treat WildcardType as kind-polymorphic
Remove deprecated scala-reflect 2.10 compatibility layer
Remove deprecated Annotation APIs from scala-reflect
Annotation unused to suppress warnings
Don't Scaladoc scala.runtime
Update size in subtractOne method of UnrolledBuffer
Improve performance of the already deprecated varargs + methods
Delay filtering accessor/field annotations
Don't make lifted method static if it's synchronized
Remove unnecessary cast
Make non-abstract classes final in scala.runtime
Deprecate UnrolledBuffer.waterlineDelim, replace with waterlineDenom
Deprecate BitSet implementation classes
Don’t expose Map.WithDefault in return types
Scaladoc supports -Ymacro-annotations
Spec update for #6475
consider annotations in wrappingPos
Adds regression test for Bug 9451
Regression test for Scala Bug 4043
Regression Test for Bug t1021
VectorMap.empty reuses an empty VectorMap[Nothing, Nothing] value
Implemented fix on RangeIterator#drop so that it returns the iterator back immediately when value passed to drop is <= 0
Simplify overwrought mkString
Xprompt is readline not readchar
Prefer PrintReporter.displayPrompt
Add caching for Ruby to Travis config
Handle prompted abort
Size-restrict RangeTest lists
[11306] ListMap update order conforms to that of VectorMap
BitmapIndexedMap/SetNode use Array#clone rather than manually copying array
Implemented IndexedSeqView's Iterator and Reverse iterator `slice` operation with constant time complexity, and added tests for both type of iterator
Relax visibility of `ArrayBuffer`’s underlying `array` member
Eliminate LaTeX-style quotations from compiler output and comments
TreeMap#keySet creates a TreeSet
Escape hatch for expression in statement position
Suppress value discarding warning when ascribed to Unit
Change genprod to use an ISO-8601 timestamp
[squash] Stream too
Remove @noinline annotations from LazyList
Add regression test for bug 4889.
BitSet#partition uses filter and &~
Adds regression tests for Scala Bug 9061
Restore DoublingUnrolledBuffer, used by scala-parallel-collection
Don't indent when reporting errors in pastes
Remove "underlying" from being on primitive numbers
[backport] Scaladoc: Introduce new variables to create better links to source
Scaladoc: Introduce new variables to create better links to source
Provide a string matcher as the dual of the string interpolator
Introduce an ExistsTypeRefCollector abstract class
Optimizations for Futures and Promises
Remove unnecessary (& wrong) deprecation forwarding
traverse does not take an IterableOnce of Futures
Make PartialFunction#andThen properly handle upcast PFs
Introduce `andThen` / `compose` overloads to combine partial functions
Prompt change during replay
Add description `Predef.identity` method.
[11296] Implement ListMapBuilder which uses mutation during build phase for performance improvement
Forward port of ScalaClassLoader.asContext fix
Add optimized mutable.BitSet#filterInPlace
BitSetN diff and filterImpl return BitSet empty/1/2 if possible
BitsetN diff returns empty/Bitset1/BitSet2 if possible
Optimize BitSet diff and filter implementations
Add regression test for bug#11106
Optimize `List.from`
Return a more specific type in Random.shuffle
Unfinalise & deprecatedInheritance mark a suite of annotations
Optimize s.c.i.HashMap/HashSet # filter, removeAll by using structural sharing Also: * Combine diff and filterImpl new node creation into one method in SetNod * Add fast-path in HashSet#filter/diff for case where size == 1 * Add fast path for MapNode#filter where size == 1 * In immutable.HashMap#removeAll, create named class for SetNodeIterator which removes all elements from MapNode
Change Using to implement the loan pattern
Increase suppression granularity in Using.resource
Add type annotation to `scala.concurrent.duration.*`.
Deprecate `Channel`,`SyncChannel`,`SyncVar` and `DelayedLazyVal`.
Deprecate `scala.compat.Platform`.
Change Predef.$conforms type from A <:< A to A => A
Align generator with valdef
Optimise SortedSet#{min,max}
Add Ordering#reverseOf
Remove deprecated Java collection conversions
Accept numeric literal separators
Clarify syntax and evaluation of template
Apply consistent rules for key & value identities to maps and sets
remove duplicated judgement
[squash] improve test
Add docment to AnyRef#wait and sync with doc-root in scala-test.
Leading _root_ in qual is always root package
Add updateWith/updatedWith to update a map based on current value.
Simplify Symbol#name to read from a field (pre-flatten)
[11296] Implement VectorMapBuilder which uses mutation during build phase for performance improvement
Factor out BitSet#largestInt and BitSet#smallestInt
immutable.Set.newBuilder uses SetBuilderImpl
Deprecate usecase scaladoc tag
Make ControlThrowable a class
Improve refcheck note
Removed View.{PartitionWith, Partition, Partitioned, Unzip, Unzip3} and used View.Filter in place of View.Partitioned
Overload ++: in MapOps to return a Map
Reset access boundary of companion module symbols
Improve PipedProcessTest to use softer timeout
Test waits for thread to exit before destroy
Avoid allocation of *Ref objects for vars in Context#lookupSymbol
avoid some allocations in computing enclosingContextChain
upgrade all sbt versions to 1.2.7
Ensure laziness of LazyList object methods
Ensure laziness of LazyList methods
Upgrade sbt version to 1.2.7.
[11098] Add IterableOps#tapEach method
11113 allow literal before type apply
Rename immutable `remove` and similar methods to `removed`
Bump starr to 2.12.8
Add fields sorting (primitives first) in case class equals
Inline from classpath: list all lambda methods in `$deserializeLambda$`
Optimize Range min and max for case where ord eq Ordering.Int.reverse
GrowableBuilder forwards addAll method to its underlying growable
# This is a combination of 2 commits. # This is the 1st commit message:
Update Enumeration.scala
REPL checks for fatal parse warnings
Don't compactify Java inner class names.
Check for dynamic expansion before insert apply
Cope with adapted member name in dynamic invoke
Exclude process test from windows
Update README.md
Rename transformValues to transformValuesInPlace
[backport] Don't emit forwarder in mirror class for bridge methods
Update Scala' build dependencies junit,jol,jackson and sbt.
Display parsing warnings in REPL
Add Regression test for Bug t10228
Add a section for deprecated type members to be consistent with values
Iterator.flatMap clears reference early
[no-merge] Iterator.flatMap clears reference
A new mutable.HashSet and HashMap
remove unused imports
Start a new line for the `+(s:String)` method in GenerateAnyVals.
Make concat an alias to appendedAll again.
Add `final` modifier to annotations such as `native`,`specialized`,throws`,`volatile` etc.
Change immutable and mutable bitset linearization to ensure inheriting bitset specific method implementations
Only compare org, name and rev when finding ASM dependency for packageBin.
Conversion method for final implicit class cannot be overridden
Process parses command
Update advice on bug references
Align detection of implicit recursion with the SIP
Don't exclude macros when checking for implicit recursion
Make NextOfKin’s constructor private[Tombstone]
LinearSeq extension problem solved
Add Regression test for Scala Bug 7131
Templated copyright headers
escape special characters in SyntaxHigh.scala
Optimizing the implementation of DefaultPromise.submitWithValue (#7445)
Stabilize order of annotations in the class file
Add, move, and tidy up scaladoc variables around collections
Deprecate universal Equiv
Add implicit Equiv instances mirroring Ordering
Allow newline in JAVA_OPTS
Adds Regression for Scala Bug 8583
Add Regression test case for
=lib Change `Future#submitWithValue` to be tailrec.
fix primitive operations on Long with Float
re-STARR to fix non-bootstrapped serialization tests
Make access to current run during Run.<init> safe for Global subclasses
Elide releaseFence for trait field init in constructor of static module
Make object fields static, and move post-super init to <clinit>
Tweak inliner heuristic to treat GETSTATIC as potentially private
Extractor type may depend on (implicit) arguments
Workaround lampepfl/dotty#5418
Add missing empty parameter lists
Restore syncvar
Test and fix for sequential processes
=lib-aux add stub code to AnyRef#synchronized
Clarify which compiler/library testing uses
License.rtf parses
=lib Add return type for Exception#handling
Clean up t6488 and run forked mode
Zero net thread check in subgroup
Put output dir on class path for test
Handle bad process start and lazily
Spawn has a name
Import selector respects backquotes
Define Either.orElse
Finish re-licensing to Apache License 2.0
Minor cleanups
Show that scalac _doesn't_ close classloaders owned by build tools extending Global
Rename Either's `filter` method to `filterToOption`
Quote terminal symbols in EBNF
Nicer branch-sensitive nullness
Upgrade to ASM 7
Disallow repeated param except in method signature
Clarify SeqContextSensitive inheritance in parser
Test file update for IOOB exception message changes
Un-final:ing VectorIterator, deprecating instead.
Making VectorIterator a final class
Upgrade jekyll for spec
Set Xss
Upgrade jekyll for spec
Correcting the behavior of Try.recoverWith (#11242)
Use a java static to throw IndexOutOfBoundsException
Document scala.Singleton
Address review feedback
Bad access modifier doesn't short-circuit typing
Suggest possible names in NotAMemberError
Uniform message.
Revert unnecessary changes and uniform message.
Add helpful detail to IndexOutOfBoundsException where bounds is known.
Improve performance of some ArrayOps methods
override ListBuffer.last/lastOption to run in O(1)
[nomerge] No static forwarders for bridges implementing abstract methods
Make detection of polymorphic signature methods work with -release 8
Add cached hash code to each node in CHAMP structures
Simplify implementation of isDeveloper
Don't evaluate devWarning conditions unless under -Xdev
Ensure termination of BTS of RefinedType containing TypeVar
TypeMap more conservative mapping over TypeVar
Emit detailed compiler trace under -Yprofile-trace
fix jvm/strictfp checkfile now that compiler is deterministic
Collection hashCode performance improvements
Factor out tuple unlifting impl to reduce its AST size/depth
do not calculate the full size of the collection
Put @implicitAmbiguous annotation on the getter, not the field
Add doc for Option.apply factory
Update our scala option parser for the scala input task in SBT
Limit the loop of inlinnig and closure rewriting to max 10 iterations
Teach IntelliJ to insert our copyright header in new files
Improve scaladoc on inline/noinline
Add .jvmopts for sbt
Move <:<, =:=, DummyImplicits out of Predef
Define unzip and unzip3 for Option
Use correct closable registry
Make Global closeable
Avoid intermittent "cannot create classes.bak" SBT error.
Rework -Xprint-args to continue compiler and allow file output
Documentation and automation for using JITWatch to analyse JMH benchmarks
More thorough treatment of @strictfp.
remove VectorMap#keyIterator. use keysIterator
[backport] Review feedback
Review feedback
When parsing a Scaladoc table do not consume non-table content
[forwardmerge] Rework change to scalap
Add regression tests for fixed specialization bugs
Use proxy-based serialization for modules
10786 setting privateWithin for java protected inner classes and modules loaded by classpath, and created tests.
Revert scaladoc style change
Rework closure of macro classloaders
Read plugin descriptor via Classloader.getResource
Use recommended syntax for opt-inline-from
Update ENSIME links
Mention scalacheck
Allow special durations to be created from their toString value
Make quasiquote pattern matching deterministic
Don't copy the OVERRIDE flag in refinement decls
Defer parameter alias computation until the end of typechecking
Tone error down to a dev warning
Report an error on problematic use of unit.fresh
Stable names for lambda lifted method and fresh names
Update comment in test
ConstructorDefault.defaults need not be a var
Eagerly enter default getters into scope
Refactor default getter synthesis
Preserve order of decls through pickle/unpickle
Refactor pickle phase
scalap should not print class type param annots in decls
Unify scope lookup for companions and default getters
faster `sequence`, and fuse `sequence(xs.map(f))` into `traverse(xs)(f)`
avoid intermediate zipped list building
reduce allocation of Some objects for cached btype lookup
remove debugging assertion
flatten changeOwner arguments (it was only called with one pair)
reduce varargs allocation for appliedType
[backport] Do less in typedFunction after typer
[backport] Recover fun param types from (partial) eta-expansion
[backport] Pull out `argsResProtosFromFun`,
[backport] Factor typedFunction.
Port StructuralCallSite, LambdaDeserialize to Scala
Java sources in src/library now don't depend on Scala sources
Remove analyzer caching
fix tests
Ensure ClassBTypes for return types of inlined code are cached, required for stack map frame calculation
fix over-eager elimination of unbox calls (they may cause CCE)
don't inline accessors
fix bug, clean analyzer cache early enough
Limit method size when inlining. Improve inliner heuristics
Allocate fewer local variables in the inliner
fix BType.conformsTo, update BCode.adapt. Also fix isUnrelated in instanceof optimization
Inline array_apply/update after rewriting ClassTag(x).newArray
add some inline annots instead of special-casing in inliner
More optimizer settings for delaying class loading, assuming modules non-null
Allow build tools to customize plugin classloader creation
Move macro classloader cache to top level object.
Add setting to restrict macro classpath
Recover fun param types from (partial) eta-expansion
Replace Map[A,B] with Map[K,V]
[no-merge] Update types when treating parts
Update string constant types when treating parts
Don't forget to mapOver TypeVar.typeArgs
Pull out `argsResProtosFromFun`, drop impossible error check
Fully replace -Xfuture by -Xsource
Only eliminate loads of known modules, and add a compiler flag for this.
identify ClassTag.apply for all primitive class tags
fix some tests
fixes in cast / instanceof local opt
fix rootInlinedCallsiteWithWarning
Inliner hueristic to inline methods with an xRef parameter
Use a single type analyzer when building the call graph
Track params and function literals in Type analyzer. Move LMF extractor out of backend cake.
avoid multiple identical calls to Type.getArgumentTypes
some wip to special casing class tags, but not enough for partition. quick summary of other arrayops methods
Optimize Array[String].map
Optimize Array[Int].map, Array[String].foreach
clean inline throught Array.foreach
Null out local vars created by the inliner
log closure invocation rewrites under -Yopt-log-inline
Don't create inlined clones of methods with illegal access insns
Resolve invokespeical calls correctly
Keep inliner state across inlining inliner invocations
Track callsites that failed to inline across multiple inliner invocations
Ensure correct callgraph in rollback
Bring back inline logging. Remove stale test.
fix non-exhaustive match
Simplify UndoLog, track indyLambdaImplMethods more precisely
Run closure rewriting and inlining in a loop
inlining rounds done, still cleanups to do
rollback on failed inlines, clear analyzer cache
Treat inlined invokespecial calls specially, resolve statically
Remove post-inline requests
Multiple inlining rounds, not yet done
disable tests that need multiple inlining
remove println
don't treat invokespecial as statically resolved
Clear the analyzer cache more eagerly
Use existing nullness analysis in copy propagation if available
Don't use analyzer cache for single optimizations
Cache asm analyzers in the backend
Move AsmAnalyzer to static context, it no longer uses backend state
Branch-sensitive nullness analysis / optimization
Scala 3.0 will not auto-insert `()` argument list
Split TypeMaps with Variance
[no-merge] Make xml pos consistent with scanner after resume
rename ChampHashMap/Set scala files
Make xml pos consistent with scanner after resume
Optimized tail/init (+ derived methods) and partition for RedBlackTree
Remove suspicious conversion to Long
Propagate error for vparam without tpt
Require postfixOps feature setting
Optimized filter and transform methods for RedBlackTree
Do less in typedFunction after typer
Factor typedFunction.
Performance tweak: avoid traversals and shortcut.
Move sbt dispensation to reporting
Avoid postfix in partest
Join-based implementations of old RedBlackTree methods
fix mutable.ArraySeq#sorted
Add tombstones to VectorMap.
[nomerge] Auto-update headers in `src/`
[nomerge] license headers for generated sources
[nomerge] Apache License Version 2.0
Apache License Version 2.0
Build red-black trees from ordered sets in linear time
Don't lift try blocks into separate methods in boolean expressions
Take views off the fast path
JvmWiseLUB: A simple linear time algorithm
Bug 9151: Add Example case.
Decrement depth in LUB verification subtype check
Optimize info: precompute a phase-indexed table of InfoTransformer.nextFrom (#7099)
Convert some neg flags files
s.c.m.Buffer#patchInPlace accepts iterableOnce rather than s.c.Seq
Bulk operation optimizations
Convert more flags files
Convert more flags files
Convert some flags files
When matching views instantiate TypeVars to their bounds
Bulk operations for red-black trees
Mitigate warning on res/*.check
Partest warns about orphan flags or check
Add the name of recently added ContextMode to the name map
Remove orphan partest flags
Restore the working directory of partest, junit to the project root
Add another fast path to i.Hash{Map,Set}.equals
Remove orphan partest checks
reduce work if not running with verbose be explicit about start time reset phase on error improve resolution of progress message
Type Glb and Lubs for PolyTypes: factor out case for PolyType
Don't reject views with result types which are TypeVars
Replace a list of booleans by a mutable BitSet.
Code Review comments: use while loop to avoid boxing
fix t9400 test with JDK9+
mergePrefixAndArgs: Small performance hack
Add property tests for HashMap#merged
Mark with @tailrec so compiler will optimize.
Remove unused return value.
Add raw string literal support in code blocks in scaladoc.
Optimize RedBlackTree-based immutable collections
remove unused jarjar
Modify test to avoid warning which distracts from its intent
Simplify refchecks now that it succeeds patmat
Defer the pattern matching phase until after refchecks
avoid boxed primitive constructors. use `valueOf`
avoid java.lang.Class#newInstance. deprecated since JDK9
use linesIterator instead on lines in project/*.scala files
remove unnecessary pomDependencyExclusions setting for "forkjoin"
fix typo
fix typos/spelling
Bump version to 2.12.8, restarr onto 2.12.7
follow-up to sbt 1.x changes
Avoid javax.annotation.Resource in test
Add missing parameter lists
fix StringOpsTest.scala for JDK 9 or higher
Type.contains: small optimisation
Restore/use linesIterator to avoid conflict String.lines
Add unit test proving colliding hash map nodes return themselves when possible under transforms
Add prop test to ensure that HashMap#transform returns  when all values transform to themselves
Avoid allocating new BitmapIndexedMapNodes in HashMap#transform if possible
Small details.
Optimize HashMap#transform
Add overrides to HashSet preemptively
Add preemptive overrides for HashMap
Various fixes for sbt 1.2 upgrade
Enable more linting in build, fatal warnings too
Upgrade build from sbt 0.13.17 to 1.2.3
Revert "[mergeforward] Make nested implicit type error suppression unconditional"
Consider invariant type params in isPlausiblySubType
Optimize Any.##
Add short-cut for Type.contains implementation
existentialAbstraction: add shortcases and document code
HashMap#concat uses structural sharing to achieve sublinear performance
Attend Code Review Comments.
Small improvement: bring test forward
No check file for pos test
Delete empty pos check files
Conditional checkfile for pos tests
Modify existentialAbstraction to avoid calls to contains.
Add MapBuilder stateful testing
Delete spurious check files
No warn if explicit main is not this class
Tweak message for bad main
Add Orderings for other ordered Iterables
Deprecate Ordering for Iterable
fix scala.reflect.api.Types scaladoc
wip
Allow escaping Scaladoc table cell delimiter
override Range#sorted
override Range#map
use StringParsers in Numeric#parseString
Avoid scala runtime reflection in Html Tags DSL
Un-deprecate linesIterator
samOf is driven by type symbol and its info
Bug t10156: add two files for the test bug case
A quick and dirty fix for Scala Bug 10896
Attend Code Review Comments
Type depth: avoid List.map when computing maximum over list.
Cache samOf
Make Prototype an abstract class rather than a trait.
Microoptimization in isSameTypes
Micro optimization in base type seq
[8406] ProcessBuilderImpl catches exceptions thrown on background thread
make ConditionalReporting less lazy
fix NumericRange[BigDecimal]#sum
Avoid Some boxing in HashMap.apply
Heed TODO in Scope.filter
Optimize ArrayOps and ArraySeq sorting
[11149] HashSet#subSetOf does not perform any hashing
Do not bother checking for key/value reference equality on update, since it is almost free to update in place
Exclude spurious message from test
Emit bad main advice at its pos
Emit all advice for bad mains
Test for trait and bad main
Refactor main detection, augment test
[nomerge] [#11153] add null-check in ConcatIterator.advance
fix scala.reflect.api.Mirrors scaladoc
Make some methods protected that are used by scalameta's Typer subclass
Revert change that is binary incompatible with the 2.12.6 build of macro paradise
Avoid recomputing hashes in HashMap updates
remove Stream#headDefined. use nonEmpty
Implement @retronym's suggestions
VectorBuilder and Vector copyToArray/addAll use System.arraycopy
ForwardingReporter doesn't fwd counting methods
make private[this] if possible
make Stream.iterate parameter strict
Add prototype mapbuilder
Reduce allocations within HashMap iterator for small maps
remove Stream#cons and Stream.newCons
fix ArrayOps scaladoc
[#11153] add null-check in ConcatIterator.advance
Restore hasDefiniteSize to 2.12 semantics
Support GitHub Flavored Markdown version of tables in Scaladoc.
Avoid double evalution of predicate in Scope.filter
Remove OldHashMap and OldHashSet
use while instead of foreach
Faster equality for IndexedSeqs
Partest summation respects terse mode
Remove redundant collection conversion.
ListMap should return List as the ordered keys, instead of Set.
Inline WeakReference get method
fix LazyList.SerializationProxy scaladoc
Make the example valid and shorter.
fix Stream comments. s/LazyList/Stream/
Recommend string interpolation instead of toString
ArrayOps#startsWith should treat negative as zero, as similar as SeqOps do.
override Range#{tails, inits}
Optimize ArrayBuffer#copyToArray
override Range#grouped
Optimize array iterators
[mergeforward] Make nested implicit type error suppression unconditional
remove unused BooleanContainer
simplify ArrayOps#zipAll
update "Scala Language Specification" URL
avoid ArrayBuilder in some scala.Array methods
update SyntaxHigh.annotations
Mixin need not be an info transformer anymore
remove the equals method, revert ofRef part of #5551
Don't recurse without bound in outerPath.
Added actual error case.
Optimise equals checking for Vector
[10765] TrieMaps nwo handle null values and test tests TrieMap not TreeMap
Workaround lampepfl/dotty#4984
Test to close si-6317
Optimize non-sensical comparison check
Change flags from Int to Long, and remove hasFlag(flag: Int) method.
fix StandardDefinitions.scala scaladoc
Address binary incompatibility
remove "special deprecation policy for 2.12" now that it's passé
Optimize TypeRef.equals with fast paths for eq elements
Optimize check for enabled statistics by specializing machinery to boolean flags
Use dotted keys in dirs map in other use sites of getDir
Avoid temporary strings during classpath lookup
[mergeforward] Avoid leaking constraints between typechecking implicit candidates
Add equality for Orderings
fix adapting argument list warning in VectorMap
fix BigInt#isWhole
use AbstractIndexedSeqView instead of IndexedSeqView
update javadoc url
remove NumericRange#mapRange
simplify Tuple Ordering instances
use SAM conversion for Equiv instances
fix warnings. avoid IterableOnce deprecated methods
remove the always true canEqual
fix for equality of WrappedArray.ofRef
fix Either Projection warnings
fix https://github.com/scala/bug/issues/11122 Vector#prependedAll
fix procedure syntax warnings
Optimize check for enabled statistics by specializing machinery to boolean flags
Make internal methods in TypeMap more private/final/inlinable
Don't re-apply type maps to info of unchanged symbols
Use dotted keys in dirs map in other use sites of getDir
Address binary incompatibilities
include migration instructions in deprecation message
Replace Cloneable/Serializable traits with type aliases
Bootstrap with 2.13.0-M5
updates documentation of PriotityQueue
Optimize TypeRef.equals with fast paths for eq elements
Unfold yet another use of `bounds` case class
[nomerge] fix performance regression in mutable.HashMap#getOrElseUpdate
Add UpperBound and LowerBound methods to Type
Uncurry of Java varargs respects Java's universal trait nescience
Add travis-ci badge to README.md
fix scala.math package object scaladoc
Quick fix for VectorMap
use Iterable.single instead of Some(_). remove intermediate objects
remove collection.concurrent.RestartException
fix IsIterableOnce scaladoc
Eta expansion uses local owner for binders
Denote prefix of constructor pats in type params 2/2
Denote prefix of constructor pats in type params 1/2
Avoid temporary strings during classpath lookup
use AbstractIterator if possible
fix VectorMap#init and VectorMap#tail
Remove non-existing annotation
Widen access to Promise.Link since it leaks via DefaultPromise.linkRootOf
Drop Duration::isFinite parameter list
Remove procedure syntax
Workaround lampepfl/dotty#4989
Bug in unapplySeq from scala-xml
Remove hot assertion
Avoid repeated calls to Symbol.info
Avoid double call to `dealias`
Avoid List.equals in hot path
Make Name.start final
Use eq in lookupEntry
Avoid expensive call to `imports` in implicit search
Remove some indirections in Global and Typer
Avoid SeqFactory.unapplySeq in hot pattern matches.
Move Shadower to outer level
Avoid a virtual call for Phase.erasedTypes
Optimize Constant.{equals,hashCode}
Optimize caseFieldAccessors to avoid temporary object creation
Optimize MethodType.resultType
Avoid some virtual call overhead to get to Symbol.equals
Speedup some symbol lookups in Definitions
Avoid needless storage/lookup for constants in Scope
Changing s.c.i.Vector.iterator to return Iterator.empty on empty
Simplify Phase.erasedTypes even further
Remove now unused methods from TypersTracking
Explicitly call `toSeq` on wildcard-star patterns
[nomerge] Emit bridge method forwarders with BRIDGE flag
Remove hot assertion
Avoid repeated calls to Symbol.info
Avoid double call to `dealias`
Avoid List.equals in hot path
Make Name.start final
Use eq in lookupEntry
Avoid expensive call to `imports` in implicit search
Remove some indirections in Global and Typer
Avoid SeqFactory.unapplySeq in hot pattern matches.
Move Shadower to outer level
Avoid a virtual call for Phase.erasedTypes
Optimize Constant.{equals,hashCode}
Improve workaround suggestion for deprecated StringOps operations
Update intellij deps for compilerOptionsExporter
intellijFromSample; intellij; intellijToSample roundtrip
Optimize MethodType.resultType
Optimize caseFieldAccessors to avoid temporary object creation
fix typo. s/3nd/3rd/
Improve VectorMap equals performance
Attend code review comments
Remove call to Reverse.
remove some options in project/ScalaOptionParser.scala
Random.nextBytes return Array[Byte]
Detect CallerSensitive in Java 9+
Backport #6733 to 2.12.x
Rename IsXxxLike to IsXxx (e.g. IsSeqLike to IsSeq)
Add support for Views to IsIterableLike
Prune polymorphic implicits more aggressively
Test that regressed with 6644d68
Revert "[11053] Add lower priority BuildFrom[IterableOnce[_], A, IterableOnce[A]]"
Make PartiallyOrdered a universal trait
Combine VM with Statics, and rely on JIT inlining of releaseFence
More fences and commentary
Mixin fields with trait setters shouldn't be JVM final
add test case for t7917
add test case for t8012
add test case for t8093
add a simple test for optimised List.apply rewrite in cleanup
Rewrite List(a, b) to `new ::(a, new ::(b, Nil)`
Check size to short circuit
rename Left/Right.up to withRight/withLeft
Make scala.collection.AnyConstr private
Make List safe to share across threads without synchronization
Expose VarHandle.releaseFence (or the JDK8 equivalent) in ScalaRuntime
Make Vector safe to share across threads without synchronization
First attempt to write a jcstress test show List is not safely publishable
prepare to remove UninitializedError
fix Iterable#partition scaladoc
use AbstractIterator in VectorMap
Make CHAMP HashMap and HashSet the default
This update / revision of the Future and Promise implementation:
Add optimizations for Iterable.single
[#11065] optionToIterable users Iterable.single/Iterable.empty instead of toList
View.Single#iterator calls Iterator.single
[#10765] Add test coverage for TrieMaps with null values, fixes scala/bug#10765
[11053] Add lower priority BuildFrom[IterableOnce[_], A, IterableOnce[A]]
override methods on WrappedString to use String methods
Whack more moles in the fields
Revert linting until restarr
add test case for t10533
Add some missing View features
Add deprecated members `++:` and `repr` to `Iterable`
update intellij files to reckon with new compilerOptionsExporter project
Better `IterableOnce` support in collection operations
Replace default arguments in collection methods by overloaded methods
add test case for t9818
[11069] Upcast View[A]#iterableFactory to IterableFactory[View]
add test case for t8431
add test case for t10090
fix test file name
add test case for t9628
[squash] tests
add test case for t9371
[bug#10696] Make lazyLines fully lazy
Make Iterator.empty.knownSize == 0
add test case for t10785
add test case for t10907
Check unused function params
Introduce enriched WrappedString unwrap to avoid toString
Spec update: overloading resolution tweaks
Make WrappedString keep its self private
Add a test that ChainingOps's self is private
Add a test that ChainingOps#tap works with AnyVals
More precise prototype for args of overloaded method
ProtoType generalizes [Bounded]WildcardType
Make SeqMap specializations private
Prune polymorphic implicits more aggressively (#6580)
Cache size in ChampSet, and improve handling of == but ne updates
Make ChainingOps keep its self private
Make ChainingOps#tap return A
Exploit cached hash code in ChampHashSet.{hashCode,equals}
Cache size in MapNode
Cache full key hash codes in ChampHashSet
Remove temporary assertion
Cache full key hash codes in ChampMap
Add lazyZip to ArrayOps and StringOps
Move arraysEquals to scala.Array out of scala.runtime
Redesign LazyList to be fully lazy
Stop Stream from sharing implementation with LazyList
[squash] fix typo
Align {immutable,mutable}.ArraySeq more
Use BoxesRunTime.equals for ArraySeq comparison
Don't derive type var constraints from type param bounds (#6789)
Don't accept wildcard type bounds.
Support the old library by allowing for missing Product.elementName
[squash] scaladoc
Reflect review comments
[10791] Add more test coverage
[#10971] Add test coverage for already fixed bug in Stream#updated
[#10919] Deprecate Map.{filterKeys,mapValues} while undeprecating those in MapView
[11041] Deprecate Predef.{tuple2ToZippedOps,tuple3ToZippedOps}
[squash] contravariant Resource
[squash] add test that Using catches exception during resource creation
[squash] make constructor private; rename `close` to `release`
[squash] add null checks
fix t7668 test case on Windows
Vertical spacing tweaks for readability
Refcheck original of annotation
Handle unrelatable skolems in TypeVar bounds
Don't abort on glb/lub of TypeVar; ignore it.
Add deprecated `updated` method to s.c.m.Map
We don't need no double negations.
Make mutable Sets and Maps their own Builders
Prune polymorphic implicits more aggressively
PriorityQueue.dequeueAll returns an immutable.Seq
Add java varargs forwarders to mirror classes
Add a test to show a problem in switch pattern translation
Add a test to show a problem in switch pattern translation
Avoid allocations when traversing TypeRefs.
add Left#up and Right#up to upcast to Either
Mark workarounds for 10853 with deprecatedOverriding
Overriding pairs: consider redundant base classes by class, not by type
Revive productElementName to extract case class field names
Work around a local type inference limitation (fixes the build)
Improve `Growable.+=` and related methods
Disable tests for completions in member annotations
Support JEP 293 style long command-line options for scaladoc
Support JEP 293 style long command-line options
remove some lower bounds in ArrayOps
Adds AnyTap and AnyPipe
Add todo.
More descriptive name
DRY up some common remove utils from mutable.Queue to ArrayDeque Adds removeFirst(predicate), removeAll(predicate) to ArrayDeque Adds dequeWhile(predicate) to mutable.Queue
 `partitionWith` in `IterableOps`
lub/glb uses correct kind for higher-order type args
Downwards comparisons for implicit search and overloading resolution
Add synthetic value class companion near its class.
[11049] add test that new ArrayBuffer[Int].iterator.drop(1).next throws exception
[11049] Instead of catching thrown exception in IndexSeqViewIterator, proactively throw if the iterator is empty
[#11017] Various Map.WithDefault classes expose the more specific WithDefault class as return type of concat method
[#8469] IterableOnce#copyToArray returns number of elements copied (Int)
Collective imports
Internal picadillos
Unused elements in partest
Disable nonlocal return warning
fix ArrayOps#collect parameter name
Followup to #6984
Eta-expansion doesn't need full typer
Update line numbers in check file
Literal/constant-typed local lazy vals need refined values. (#6454)
Remove some abstract overrides
fix NegativeArraySizeException `StringOps#*`
Unsorted return the most precise collection (fix scala/bug#11037)
remove unused `@define` values in scaladoc
Avoid some virtual call overhead to get to Symbol.equals
Speedup some symbol lookups in Definitions
Tests that order matters in import nullification
No flags files
Custom root imports are not preamble
Update per review
Minor tweak for readability
Support -Yimports for implicit preamble imports
Use a dummy parameter to distinguish overload and override in AnyRefMap
Add Using for resource management
Compute knownSize only once
Rename Numeric.Ops and Ordering.Ops to OrderingOps and NumericOps
Normalise API for Auto-Application removal
Lazy values may not override a non-lazy value in Dotty
Workaround lampepfl/dotty#4742
Workaround lampepfl/dotty#4739
Add explicit result types to implicit definitions
Dotty only considers methods as implicit conversions
Rename `enum` to `enumeration`
Copy arrays that are explicitly passed as varargs with `: _*`
Make isByNamePt last ctor arg.
Add a default to ImplicitSearch ctor arg to unbreak shapeless
fix indent
Some lintings
Enforce some linting
Minor cleanup of StringBuilder
Move StringBuilder to its own file
Add size comparison methods to IterableOps
Avoid needless storage/lookup for constants in Scope
REPL load creates args
add "since" argument for deprecated annotation
add type parameter in foreachKey and foreachValue
fix any2stringadd warnings
Use applyOrElse for PartialFunctions
fix searching
Build speclib/instrumented.jar for partest
override Range#distinct
Deprecate early definitions
-Xlint:serial,implicit-not-found
More lint pushback
Update javaReflection check for jdk10
SAM conversion spec typo
StringBuilder micro opts
No truncation in REPL tests
REPL prints long results
Avoid truncation of REPL output
Optimize mkString and addString
Tweak Predef for copyright and import style
Correct link to StringOps, improve String doc
remove unnecessary ClassTag parameter of ArrayOps#collectFirst
update "Scala Language Specification" link
computeMacroDefTypeFromMacroImplRef is unused
Enforce explicit return type for macros
Minor refactor computeMacroDefTypeFromMacroImplRef
Iterator micro opts
Disrecommend postfix more explicitly
Pos test S1 progresses in 2.13
Respect BaseTypeSeq invar (3) symbols are distinct
Move mapInPlace from mutable.SeqOps to mutable.IndexedSeqOps
Enable boot delegation in OSGi reflection tests
Bump versions of OSGi testing dependencies for JDK 9 support
Trim stack trace in REPL print
change IterableOnceOps#toStream deprecation message
Reduce flags files
Unit test fixes
Accommodate jdk9+ in partests
Don't use JAVA_HOME in PropertiesTest
Non-sensical comparison check checks erased type
Enhanced the right set of type bounds
Undeprecate IterableOnceOps#toBuffer
Remove mapInPlace and flatMapInPlace from mutable Set and Map. Move transform from Iterable to Seq. Add mapValuesInPlace to Map.
Make quasiquote pattern matching deterministic
Add ++=: to buffer, add deprecated result() and mapResult to ArrayBuffer
Harden DisplayReporter against null messages
add more deprecated methods for IterableOnceExtensionMethods
Optimize generic array length
Adds missing method .compare in SortedOps
Add orderedCompanion method to mutable.PriorityQueue
Add missing methods to Iterator
Change @deprecatedName to take a String instead of a symbol
Minor code cleanups in Contexts
Drop by-name before creating ImplicitSearch, rather than internally
refactor lookup of vsyms in by-name implicit implementations
Perform substitution in a single pass.
Adjust owner of byname implicit RHS
Use TreeGen to create LazyDefns template
Position synthetic trees of by-name implicit desugaring
Use finer grained fresh name creators in by-name implicit desugaring
Implementation of byname implicits with recursive dictionaries
Reduce allocation and CPU usage in distinct
Use ordered pattern match to distinguish Array[BoxedUnit]
Deal with special case for Array[Unit] in Array.{copyOf,copyAs}
Added aliases for missing classes in collection.generic
adds deprecated methods append and appendAll to Buffer
Renames parameters in ArraySeq and ArrayBuffer
Adds deprecated companion to Iterable
Adds missing methods on immutable.Stream
Adds missing constructor on mutable.StringBuilder
Indicate number formats may also start with a `+` sign
optimize IndexedSeqOps#last
Add IterableFactory#concat
fix typo
Revert overides of knownSize and isEmpty in fromIteratorProvider
Restrict List.corresponds override to LinearSeq arguments
Add deprecated method keysIteratorFrom on SortedSet
Remove get method on mutable Set
Move ClassTagIterableFactory.iterate up
bug#10955 Add Iterator.unfold and IterableFactory.unfold
Add delegate for mutable.SeqMap to LinkedHashMap
use Iterator.single instead of Iterator.apply
Make mutable.Map transform signature match Scala 2.12
Add mutable.SeqMap plus make LinkedHashMap extend it
remove unnecessary ProcessBuilder comment
fix StripMarginInterpolator comments
Rename LinkedMap to SeqMap
Factor out strict implementations of transformation operations.
IterableOnce.copyToArray micro opt
Use by-name parameter for Properties.*OrElse
Use MathContext in BigDecimal operations
Drop scala.{Immutable,Mutable}
[nomerge] Backport test
Java annotations are not classes.
Adds benchmarks for findMember.
Speed up ArrayOps slice
Avoid ScalaRuntime for generic arrays that are refined to concrete arrays
Optimise rangepos checking use traverser rather than external iteration reuse temporary results where possible
Unit test for range position validation
add StringBuilder#length_=
Suppress debug output on start
Comment on our customizations to asm.tree.*Node
remove by-name-right-associative option
Reorder tests in Seq.equals
Immutable collections: test reusable empty instance / sharing of inputs of from
Add more empty tree fast paths to TreeMap.iterator variants
Simplify collection factories to avoid indirection through View.Elems
Reorder fast paths for same- and empty- source collection
Reuse empty iterators in LazyList and Stream Empty
Override and use isEmpty / knownSize more widely
Less boxing in iterators
Placeholder for future optimization in ChampHashMap.concat
Reuse empty iterator in Nil.iterator
Override corresponds in List to avoid iterator creation
continue to make StringContext's checkLengths available to clients
Update REPL help.
Shell banner unfurls again
[nomerge] Backport REPL big print fix
Simplify newBuilder
Remove LogContext, steps produce TestState
Support @Repeatable Java annotations.
Remove scala.Symbol literal singleton types
Add ordering on withDefault test
Add scaladoc for Iterator hasNext() and next() methods. Addresses scala/bug#10894
Add a few fast paths to equals/sameElements
Better performance, correctness for {mutable.HashMap, ChampHashMap}.getOrElse*
Separate IDE specific settings that most developer do not need to care.
Refactor.
Rewrite <_> to _. Without <>, it easier to be handled in HTML document
Rewrite `_' to `_` so that it can be highlighted in markdown
Disable splitting line
Move -Xlint to warning settings.
Move -optimise to standard settings.
Add abbreviations.
Add ScalaCompilerOptionsExporter
Apply additional changes
Align 'Set.union' signature with 'intersect' and 'diff'
Augment HashMapBenchmark
bug#10747 Document thread-safety of Enumeration
Override add/remove in mutable.HashSet
Unit test for HashSet add/remove
Add LinkedMap/VectorMap
don't expose implementation details
Make :: final.
Minor optimizations in implicit search.
bug#8664 Add Ordering for Symbol
X marks the terse mode failure
Add IndexedSeq.sortInPlace to mutable collections.
Implement concat, intersect and diff in BitSet for better performance - using the implementation from 2.12 - added tests
Add deprecated toTraversable
Improve usability of lengthCompare
Make PathSettings immutable
fsc is fsc.CompileClient
fix i/1 mix-up, added regression test
intellij config: build scalacheck (framework), run scalacheck tests
Repackage fsc
Don't expose underlying array in ArraySeq.toArray
Remove NestUI
Juicier language for language feature object
Customise label handling without needing to modify ASM directly
Move to the standard way of defining a custom asm.Attribute
Upgrade to scala-asm 6.2
Avoid performance problem after ASM upgrade in prod/cons analysis
Benchmark for ProdCons
[nomerge] Several entries with the same key in mutable.HashMap
added reference to willForceEvaluation to more collections - Seq, Set, LinearSeq
provide clear() for mutable map; https://github.com/scala/collection-strawman/issues/533
addressing https://github.com/scala/bug/issues/10941
scala/collection-strawman#534  implement subtractOne in mutable.Buffer
undeprecate append on mutable.Buffer fixes issue scala/collection-strawman#359
Allow the benchmarks to be run on 2.12.N/2.12.N as well HEAD
Improvements to the IntellIJ config.
Reduce allocations when gathering inner classes
Move range position validation behind a flag.
Add intended but missing Serializable in View
Observe some -Xlint recommendations
Avoid appearance of interpolation in StdNames
Avoid naming a term StringContext if it isn't one
Avoid complaining about implicit evidence
fix IterableOnce scaladoc
revert "substituteCo" changes
remove unnecessary asInstanceOf
Increase the counter while looking for the ScalaSignature annotation
Avoid Some boxing in the backend's BType cache
StringBuilder optimization
Micro optimization in specialization
Use @implicitNotFound on SortedSet and SortedMap
implicitNotFound: prettier printing for type funs
Support implicitNotFound on parameters
Remove obsolete lint of by-name-right-assoc
Some additional simplification of AbstractRunner initialization
Always show logs and diffs in partest when running only individual tests
Fold SuiteRunner into AbstractRunner
Enforce library/reflect restriction to compat1 profile
Drop testPosPres and testRun
Tweak eta-expansion function arity error message
Reverse direction of diff output in partest
Add number of arguments to error messages for functions
Bring eta expansion error messages in line
Make error message appear at first invalid argument
Give better error message when function arity limit exceeded
Simplify & cleanup some test task definitions (#6798)
Avoid tuple creating in mutable.*HashMap#update
Don't report feature warning on error type
Remove extra space in existential feature warning
Test of status quo when reporting feature on error
Scaladoc: show subpackages in main pane
Simplify mkString impl
Make more ValueSet operations return a ValueSet
Add string interpolation to specification. (#6761)
Use sliceIterator for Iterator.take()
Consider delayedInit$body classes as top-level for Java compatibility
add deprecated DefaultMap in immutable package object
Unsound match warning is now unused
More spec words for root imports
Removes buggy implicit logs
Use Option[Throwable] for Either[Thr,Boolean]
Yscriptrunner specifies how to run script
Refactor ScriptRunner
Default to no fsc
Drop references to unnecessary objects in ArrayBuilder
Refactor VectorBuilder.clear in terms of the existing method preClean
Avoid retaining refs to previously added items after VectorBuilder.clear
Revert to using ConsoleReporter during spin up
fix Windows-only test failure
Make methods in StringContext private
Add missing BuildFrom and Factory instances.
Adjust version message in the spec ("previous" / "upcoming")
generalize BasicIO.apply parameter type
override ArraySeq#equals for efficiency
override WrappedString#equals for efficiency
use WrappedString.empty instead of new WrappedString("")
fix IterableOnce#toMap deprecation message
[nomerge] Remove test that doesn't apply on 2.12.x
Parenthesize infix type constructors before using them as a prefix.
Test for 10935
Compare positions in `normalTypedApply`'s error advice by focus.
Upgrade code comment describing name binding
Clarify neg test for ambiguous import
Forgive import ambiguity at level 4 binding
Remove reflection-based class name computation for collections
Tests for issue 2458
Update spec for name binding
Tests for issue 9552
Tests for SI-2458
Follow precedence rules for name binding
Deprecate +(x: String): String on primitives
Cherry-picked into a different branch
Avoid double open when overwriting a classfile on non-Windows
Use faster way to lookup List.apply symbol
Rework named/defaults bookkeeping as a tree attachment
CommandLineParser improvements
One context field ought to be enough for Typer, don't you think?
Send Typer.checkUnused to the glue factory
Begone, toOrigin, approximateAbstracts, and AdjustedTypeArgs!
Run another runDefinitions field out of town
Jettison runDefinitions field from Typer
Remove the dyna field from Typer
Expunge the transformed field from Typer
Remove the checkNoEscaping field from Typer
Improve efficiency of dead code checks
Avoid allocation of Typer within typing transformers
Reduce allocations in Context.lookup
Faster implicit search: lazier error messages
Avoid needless LUB of the cases after patmat translation
Minor style changes and remove dead code
Move fields into local variables.
Solve Issue 492, "MethodTypes.isTrivial is allocation heavy"
Enhance performance of unapply method of ClassTag
Specialize hasImpureAtom for common cases of small collections
Reduce allocation further in TypedSubstitution.<<
Optimize patmat substitution
Optimize patmat substitution
Reduce allocation patmat Logic.simplify
Reduce allocation in patmat updateSubstitution
Avoid an array copy in the parser
Avoid eager error buffer creation
Optimize isStable by using normalize, which is cached
Optimize isStable
Rule out more implicit based on bounds of type parameters
Avoid creation of temporary Lists of imports during Context.lookup
Refactor typechecking of array instantiation for performance
Avoid allocation of ClassTags in hot code
Reduce overhead of enabling -Ystatistics
Avoid wasteful loading of unreferenced, high arity function and tuple classes
Optimize bookkeeping in specialization transform
Tree convervation in specialization
Simplify specialization transformer
Avoid nonEmpty in hot paths
Optimize generic sig parser
Optimize nested class collection
Use AnyRefMap in hot parts of the compiler.
Optimize IndexedSeqOptimized.toList
Minor refactor, more tests around dot
Revert SD-301 to improve skip count in test
Accept .5 for half
fix IsIterableLike example code
Microoptimization in List.equals
Bring back List filter/filterNot optimization to 2.13
override Stream#take
fix LazyList#withFilter comment
Optimize patmat analysis
Move array creation next to arraycopy to help JIT
Partest --no-exec skips runs
Prevent Int overflow in ArrayOps.slice size calculation
Rename Queue#enqueue(Iterable) to enqueueAll
Make ArrayOps.startsWith return true for out-of-bounds empty array
Avoid exit
Avoid double-feature reporting
More dry refactoring.
Global takes legacy reporter
Prefer composition for defining reporter
Prefer internal.Reporter
fix some typo in LazyList.scala
In the future (#6729) scala.Serializable will be a type alias to java.io.Serializable. To be able to bootstrap this change, we need a STARR that does not crash when this change is made.
fix LazyList example code
fix IterableOnce#flatMap example code
fix NumericRange example code
fix JavaConverters example code
Remove dead code in HashMap
Reuse existing hashmap when overwriting a binding with an identical value
use AbstractIterator instead of Iterator
avoid unnecessary array copy in some immutable.ArraySeq methods.
fix ProcessBuilder scaladoc. use LazyList instead of Stream
replace if/else with ||/&&
consistent space after if
remove unnecessary thunk in Stream.Deferrer
fix scala.sys.process package object examples
strings like ".Exxx" are not valid floats/doubles
Avoid allocating {Map,Set}Effect CHAMP in update/remove
Optimize mutable.HashSet
Optimize TreeSet/Map isEmpty
Add a fast path for empty Champ collections
Avoid more temporary Tuples in ChampMap
Efficient implemnentation of keys/valuesInterator in ChampHashMap
Override isEmpty in immutable.Set to avoid iterator creation
Updating sbt-jmh to 0.3.3
Add overrides for correct return types of `+` in some mutable maps
Enable postfix for sbt compat file
Make checkfeature more expressionistic
Make {Stream, LazyList}.Deferrer value class
cache lookup of any2stringaddMethod
simplify Stream.fromIterator implementation
Array.fallbackCanBuildFrom no longer exists
fix Predef.=:= example code compile error
Add version notice with error-ish style, since consulting older spec is usually error.
Add version string in page and title so that readers and crawlers knows the page is for what version.
fix Array scaladoc. mutable.ArrayOps does not exists
Make scaladoc member filter easier to read
Don't copy the OVERRIDE flag in refinement decls
Tweak variance of Ordering.min and .max
bug#10511 Add total orderings for Float and Double
fix some warnings
Deprecate scala.Predef.any2stringadd
fix procedure syntax
add space after comma
Extractor pattern no longer matches `null`
Reduce postfix ops in tests
Reduce postfix ops
Avoid NPE in replStringOf
bug#5674 Remove calls to System.exit/sys.exit
Runner reads scalac args from file.
Additional analysis of simple catch cases
fix typo in doc
Remove rassoc$n ValDef if the reference to it is constant-folded away
Test to close scala/bug#5075.
Backport #5640 to 2.11.x
Right-associative arguments don't lose singleton type
Deprecate override of stringPrefix
make private[this] if possible
Reintroduce PartialFunction.apply as PartialFunction.fromFunction
Warn on function literal as statement
Deprecate bit shifting by Long value
Deprecate nonsensical StringOps operations
Deprecate mutable.ListMap
Add forwarders for proper overloading of BitMap.flatMap
Use an extra-lazy Iterator for LinearSeq by default
Add deprecated `-` and `+` methods to collection.(Map|Set)
Remove element type from ArraySeq.(elemTag|array)
rename parseX -> toXOption
remove benchmarks
add optional parsing to Byte/Short/Int/Long/Float/Double
Update comment in test
Scaladoc: style <code> elements with monospace font
ConstructorDefault.defaults need not be a var
Eagerly enter default getters into scope
Don't compute `locations` in macroclassloader cache
More restrictive permissions for Range methods
Add disambiguating overloads to Enumeration.ValueSet.(map|flatMap)
Port macro-annot tests to partest
Use small Set/Map implementations in newBuilder
simpler flatMap arg in Either.flatten
Add a flatten operation to Either
Address review comments
Also convert interruption during source file reading into cancellation
Combine thread interrupt handling with Reporter.cancelled
Support cancellation by checking Thread.interrupted
 Honour interrupts in source file reading
Delete empty classfile if thread is interrupted during writing
Honour Thread.interrupt detected by NIO operations
De-aggregate the macro annotation subproject
Specialize hasImpureAtom for common cases of small collections
Tone error down to a dev warning
Report an error on problematic use of unit.fresh
Stable names for lambda lifted method and fresh names
Use named classes or objects for collection BuildFroms
Reduce allocation further in TypedSubstitution.<<
Optimize patmat substitution
Optimize patmat substitution
Reduce allocation patmat Logic.simplify
Reduce allocation in patmat updateSubstitution
Settings shim for repl-sync
Remove List.apply override
Add disambiguating overrides for MapOps.mkString methods
Assert that Views are serializable
deprecate either projections
Preserve order of decls through pickle/unpickle (#6285)
Refactor default getter synthesis
Override BitSet collect to avoid ambiguity
use collection.Seq instead of scala.Seq in Array scaladoc
Use a final module instance field, assigned in <clinit> where possible
Reduce allocations in Context.lookup
Proxy-based serialization for all collections
remove deprecated use of viewbounds using scalafix
Avoid double open when overwriting a classfile on non-Windows
More noise when going silent
Outer parameters have the ACC_SYNTHETIC flag in bytecode.
Safe Iterator.toString
Avoid side-effects in Iterator.toString
Avoid extra hasNext in trailing
scalafix ProcedureSyntax
fix scala.reflect.Manifest scaladoc
more procedure syntax
collections deprecations
procedure syntax
stream deprecations
Stream->LazyList deprecations + procedure syntax removals
add language import
replace deprecated use of Buffer#append
don't use unneeded postfix ops
Created StringOpsBenchmark
Setter rewrite uses symbol's name
Minor style changes and remove dead code
add an assertion for PhaseIndependentFlags
reduce number of getFlag and related calls, combine call to check multiple flags in a single call where applicable
use inheritance to avoid initialisation checks avoid varags in helper methods to reduce memory pressure make annotation helper functions final where appropriate adjust mima filters
use inheritance to avoid initialisation checks for privateWithin avoid repeated calls to privateWithin from the same method adjust mima filters
avoid unneeded operations on some Flag access, e.g. outer reference for phase and some bit twiddling adjusted mima filters for additional methods
remove duplicated code
Use faster way to lookup List.apply symbol
Move fields into local variables.
Solve Issue 492, "MethodTypes.isTrivial is allocation heavy"
center the logo a bit more under mac
Remove non existing dependencies from scala-partest
Remove deprecated view bounds
Drop old @version refs in docs
Drop old @version refs in docs
Revert error message refinement in NotAValueError.
Scaladoc: Better icon for annotations
use AbstractIterator instead of Iterator
Rework named/defaults bookkeeping as a tree attachment
Move diagnostic tracking of whether defaults are in play to ContextMode
Remove an unused field from Context.
Move starr to 2.13.0-M4, re-enable osgi tests
Create png version of diagram and remove ScalaObject from it
use foldLeft instead of /:
fix Set#-- deprecated message
fix procedure syntax
Position the Apply made for extra implicit args in update rewrite
Compare positions in `normalTypedApply`'s error advice by focus.
Throw some wrappingPos on the result of dyna.mkInvoke.
Handle rangepos of by-name right-associative applications properly.
Make Array.copyAs Scala.js-friendly.
move `isLeftAssoc` from `treeInfo` to `nme`, since it's about names, not trees.
Build scaladocs for partest to make sonatype happy
Enhance performance of unapply method of ClassTag
Add missing operations to ArrayOps
Make StringOps a pure value class
Rename WrappedArray to ArraySeq
Rename ImmutableArray to ArraySeq
Don't run macroAnnot tests for now
In-source scalacheck
use Iterable instead of Traversable
delete unsued scala.collection.concurrent.Debug
Add Iterable.seq and Iterator.seq
delete unused scala.collection.DebugUtils
Remove postfixOps usage in partest.TestKinds
Remove () from ArrayBuilder.make
Remove () from newBuilder
Add back the `updated` operation to collection.Seq
Dummy override map on BitSet to avoid ambiguity.
Drop commented code in partest.TestKinds
Remove unused partest.TestKinds.groupedTests
Remove unused partest.TestKinds.isTestForPartest
No more building modules in the bootstrap
Remove () from newSpecificBuilder
Remove () from iterator
Add a sufficiently lazy Iterator for LazyList and Stream
Remove sorting of implicit candidates by use frequency
Eliminate TypeVars and Wildcards early in glb/lub
Factor out duplicated logic from elimSub/elimSuper
Avoid wasteful loading of unreferenced, high arity function and tuple classes
Optimize bookkeeping in specialization transform
Tree convervation in specialization
Simplify specialization transformer
Prune -Ywarn aliased lint flags
Improve documentation on BufferLike::remove
Make Range.numRangeElements private again.
use Travis for (vastly simpler) PR validation
Xlint nonlocal-return
Yrepl-sync is unused and useless
CommandLineParser improvements
check system property in a Scala.js-friendly way
Add Iterator.duplicate from 2.12.x
don't let Travis-CI fail on every PR
minor fixups to macro annotation testing
One context field ought to be enough for Typer, don't you think?
Send Typer.checkUnused to the glue factory
Begone, toOrigin, approximateAbstracts, and AdjustedTypeArgs!
Run another runDefinitions field out of town
Jettison runDefinitions field from Typer
Remove the dyna field from Typer
Expunge the transformed field from Typer
Remove the checkNoEscaping field from Typer
Improve efficiency of dead code checks
Avoid allocation of Typer within typing transformers
Rename IndexedView to IndexedSeqView
Faster implicit search: lazier error messages
Use FUNmode and wild pt in typing the `m` in `m _`
Insert () before eta under -Xsource:2.13
Override dropWhile in LinearSeqOps
remove unused code for partest self-tests
Publish scala-partest artifact
IntelliJ structure
Update build for in-sourced partest
Move files from partest-extras into partest
Remove ant support
Implicit conversions from Array to Seq is deprecated in 2.13
Log debug and verbose messages to the un-captured System.err
Use a store fence to try to avoid race condition with sys.props access
Remove no-op stream capture around javac call
Address review feedback
Add a mode to reuse JVM for test execution
Pass the srcpath as FQN, test file as testSelector in SBT test events
Propagate exceptions and failure transcripts to the SBT test listener interface
Avoid scala.sys.process.javaVmArguments
Use readOptionFile and don't trim aggressively
Remove unused import
Avoid deprecation
remove unused code (fixing new warnings in 2.12.2)
Diff transcript shows correct order
Add synchronization when sending events to sbt (fix ArrayIOBException).
dont run all tests if there are invalid tests
remove ScalaCheck support
manually check for a .exe
Mixed Java/Scala compilation like sbt's "Mixed" compileOrder
Use the correct scalac options when run from sbt
Enable colors from sbt
Enable colors for terse output
Clean up the outer layers of partest
Parse `-Dpartest.scalac_opts` in SBT runner
SI-7696 --show-diff shows log on crash
SI-7696 --show-log on bad failure
SI-7696 Restore --show-log
Add javac tool args to javac invocation
SI-7786 Partest finds javac
Make nest.Runner#runCommand protected
Avoid "".lines ambiguity
Remove type alias for Classpath
Migrate to new Reporter API
Prepare for release 1.0.12
Print the transcript to the console when running with —verbose from sbt
Integrate sbt test framework more closely without reflective calls
Integrate scala-partest-interface for sbt into scala-partest
Honour --srcpath through the SBT runner
Report more errors on invalid .flags files
Locate partest-javaagent in classpath
Pass javaOpts into SuiteRunner and allow setting them from SBTRunner
Improved `makeStatus` to get exhaustiveness checking from scalac
improve mapping from partest's TestState to sbt's Status.
extract internal partest behavior from ConsoleRunner
Issue #25 use filtered check for git diff
make a Scaladoc warning go away
make a string interpolation warning go away
be compatible with more Scala versions
Bump versions, fix deprecation warning
Avoid use of propOrElse/envOrElse
javaOpts property for partest ant task
Expose partest.comp property to tests
SI-7566 Remove use of String=>TermName implicit
print all scalac opts in log, also those provided through -Dpartest.scalac_opts
Include compiler flags from system property when interpreting pragma
Properly quote regex replacement string in path canonicalization
SI-8382 Restore partest.debug
SI-8345 support both scalap 2.11.0-M8 and 2.11.0-RC1
Switch to scala-module-plugin, sbt 0.13.1
Add support for Java 8 in filtered check feature.
Remove trace macro. Too unstable.
Move to BlackboxContext
Hide banner under partest --terse.
fix scalacOptions and warnings
Upgrade to Scala 2.11.0-M5
Revert "ConsoleRunner: --> now returns Boolean, not Unit"
SI-7729 Does Par-Test work?  Absolutely!
Par-Test split checks work again
Log file is zapped before test run
ConsoleRunner: --> now returns Boolean, not Unit
comment for java opts
Newer scala-library fixed cmd line parsers
Build fixes; license; groupId = org.scala-lang.modules
Move SBTRunner to its own file.
Store partest version and show it (1.0-RC1)
Remove ant from standard test kinds
Remove --all option: it's the default
Simplify running from console.
Use classloader as main mechanism to specify test class path.
Remove dead code: `PartestRunSettings`
Locate library/reflect/compiler via classloader
Pass `testSourcePath` as `SuiteRunner` constructor arg
Consolidate `RunnerManager` & `DirectRunner` as `SuiteRunner`
Inline FileManager.JAVA_OPTS as it's used only once
Remove more dead code: timings
Remove FileUtil in favor of FileManager consolidation.
Reliable initialization of test source path
Further clean up classpath handling
sbt test-interface for partest
Reduce mutation, avoid Scala classes in test-interface
Simplify classpath handling a bit.
Remove SBTRunner -- replacement coming.
Remove classes specific to scala/scala
SBT 0.13 build
Support old info method in limiting reporter
Integrate macro paradise under -Ymacro-annotations
Avoid needless LUB of the cases after patmat translation
Forward more methods for reverse orderings
Replace UnApply to Apply in resetLocalAttris
Revert part of hastily merged #6449
No need to dealias for cast tree
Support underline markdown in scaladoc
Avoid an array copy in the parser
Avoid eager error buffer creation
Optimize isStable by using normalize, which is cached
Optimize isStable
Remove Float range and Double range
Avoid allocation of ClassTags in hot code
Defer parameter alias computation until the end of typechecking
Rule out more implicit based on bounds of type parameters
Avoid unneeded tree duplicate/reset in default getter, case class synth
Test case for fixed bug in mutable queues
Use Abstract* base classes consistently to save on classfile size
Drop flags that change language semantics
Split out NOTICE file from LICENSE
Unmangle the output of //print in the REPL
Clean up unnecessary strawman conversions
Better wording for 'copyToArray' scaladoc
Scala hasn't included sizzle for quite a while now
add code of conduct to root of repository
Flesh out the interfaces of <:< and =:= (#6261)
Prevent (LazyList|Stream).addString from forcing the stream
provide minOption and maxOption
Override setInst in AppliedTypeVar
Add partest for Unicode newline
bundle newer scala-swing version
Add XML tests to partest
bump version to 2.12.7, restarr onto 2.12.6
Move the patmat phase after superaccessors
Shorten `scala.collection.immutable.Seq` to just `Seq` in the REPL.
use a 2.13-specific partest version with no scala-xml dependency
Update partest to 1.1.8, should fix the travis build
Replace unsound `protected[this]` members with explicit `@uncheckedVariance` annotations.
rip scala-xml out of bootstrap (& other misc places)
Use dagre-d3 instead of pre-generating svg with graphviz
Drop scala-xml from scaladoc pt. 1
Update check file to fix the build
StringOps speedups (#6535)
[backport] Unmangle the output of //print in the REPL The old behavior is available as //printRaw Backport of scala/scala#6553
Replace UnApply to Apply in resetLocalAttris
remove Eclipse support
remove Ant support
bug#10834 Override SortedMap#transform
Deprecate procedure syntax unconditionally
Define zip on Option
Further optimization of Array folds
Add private[mutable] accessor to obtain the hash table in HashMaps/Sets
Make HashEntry and subtypes private[mutable]
Remove unused class HashTable.Contents
Deprecate Float range and Double range
Update test case to changed JDK behavior
Drop unused elements on flatMapInPlace for mutable Set and Map
Add deprecated `union` operation to `collection.Seq`
Add deprecated `copyToBuffer` operation to `IterableOnceOps`
Add deprecated `append` operation to `Stream`
Make remove operation of mutable.Set return a Boolean
Remove stale TODO
Implements missing scan left and scan right on ArrayOps.
Deprecate SortedOps.from/until
Don't emit forwarder in mirror class for bridge methods
Simplify Regex impl with tabulate
Avoid quadratic complexity in iterators created by Iterator.apply
Add Regex.matches (#10827)
Strip more thoroughly.
bug#10033 Remove scala.runtime.StringAdd
Integrate benchmarks into the main build
Act on collection ToDos to integrate with scala.collection namespace
Remove warnings about value discarding in sbt build definition
fix order of annotation arguments for deprecated tree traversal
Add ArrayOps.fold
Spec-ify the spec update
Spec: update dynamic selection
Spec: say "method" instead of "function"
[backport] restrict applicability to user defined methods
[backport] Remove mentions of named functions in Return Expressions
restrict applicability to user defined methods
No warn underscore in anon funs
Check unused function params
Singleton typed args/results don't interfere with tailcalls (#6420)
Evaluates start value of LazyList only once
Add deprecated TraversableOnce aliases
Rename lazyAppendAll to lazyAppendedAll, in LazyList and Stream
Add IterableOnceOps.fold
Remove mentions of named functions in Return Expressions
Remove unnecessary type ascriptions
Add test checking that LazyList is lazy in its head
Remove -sourcepath from the options of library/console
Integrate collection strawman scalacheck tests into main test suite
Ensure stability in `Typer.packedType`
scala/bug#8277. Adds regression test for local lazy val of type Unit
Don't assume unsound type for ident/literal patterns
Avoid indirection through the coll method
Prefer new Array for non-generic Array instantiation
More overrides for performance
Override List.equals for performance
Deprecate view bounds without -Xfuture
Integrate JUnit tests from collection-strawman
Remove sonatype-staging resolver, the custom scalacheck is now on maven
Disable OSGi tests for now
scalacheck/test passes
'partest --srcpath scaladoc' passes
Avoid infinite recursion on interactive.Global.ResponseMap
Update test/files/speclib/instrumented.jar
partest --jvm passes
Bring back StringBuilder.appendAll(IterableOnce)
Specify ListSet.className
BuildFrom instance for Iterable
Disable unstable part of neg/variances-refinement.scala
partest --run passes
Consolidate tests for invalid lubs
Remove t4332.scala
Make Iterator.++ final (it's marked inline)
Update IsIterableLike.arrayRepr
Tighten signature of WrappedArray.make
Tests cases for more robust type inference by joroKr21
Tighten signature of ImmutableArray.unsafeWrapArray
Clean up solveOne
GroupedIterator extends Iterator[immutable.Seq] (not just collection.Seq)
Use correct seed for ImmutableArray.hashCode
Specify HashSet.className
Specify BitSet.className
Update to Jline 2.14.6 (#6478)
partest --neg passes
partest --pos passes
Add `array.deep` extension method to partest-extras (used in tests)
Update starr to internal release with new collections
[nomerge] Streamline the bootstrap script
Build a new starr first
Streamline the bootstrap script
Add a `completions` command similar to the one found in sbt
Bump JarJar version to avoid invalid bytecode on Java9
Use temporary repository for bootstrapping
Rename attachment to NoWarn
Apply no warn attachment to binds
[nomerge] Use temporary repository for bootstrapping
Update wording according to discussion on the issue report.
Temporary fix for ListBuffer.update
xml and partest versions that compile with 2.13 collections
Remove scaladoc stub
No warn-unused:params for unimplemented method
Don't compute `locations` in macroclassloader cache
fix spelling, which has a parameter type
Partial unification unconditional; deprecate -Xexperimental
Added test of literal type folding
Required changes to build with new collection library
Migrate collection-strawman into standard library
Bootstrap with Scala 2.13.0-M3-f73b161
Select pgp signing key when publishing modules
persist more env across travis stages
Improve positioning of translated patterns
Add a test showing pattern matcher positions status quo
Update starr to 2.12.5
Allow compilation of files in empty package to a -d <symlink>
Windows friendliness for classpath construction
Don't drop line number nodes in dead frames
Restore callee line numbers in prologue of inlined code
Don’t expose Set{1..4} names via className / toString
Make notXXXX flags compile time constants
remove some cruft in bash scripts
Avoid using STARR on the scalacheck classpath
Treat JAVA_CONST names as snake for completion
Run clean before sonatype publishSigned
Some cleanups in the build.
Keep sbt's log level at info on travis / jenkins
Reverse the direction of mutable.Stack
More fixes from latest rebasing of Scala 2.13.x integration build
Clean better.
fix IVY2_DIR, and ensure functions cd back to WORKSPACE
Clear scala parts of ivy cache on travis
Mention in the README that new PRs should be addressed to the scala/scala repository
sbt fun: don't call `set ...` after `setupBootstrapPublish`
Set sbt-pgp settings in the bootstrap script
Build scaladoc in quick
Add tests for toBuildFrom implicit conversions
verify that ~/.credentials is not a directory
More fixes from latest rebasing of Scala 2.13.x integration build
Make toString in LazyList consistent with other collections.
Avoid ? in filename, not allowed in Windows
[backport] Add a custom test listener for usable JUnit XML reports
Update custom test listener to avoid CCE after framework internal error
Limit exposure to ConcurrentModificationException when sys props are replaced or mutated
[backport] Elide prefixes in printed types uniformly in runtime reflection
Use new mode of partest to execute in process
Some comments about re-typing implicit applications
Method values are always eta-expanded
Fold terms before converting to expected type
Add unzip3 to IterableOps (#497)
Remove Traversable
Check whether a directory can be read before trying to list its files while looking for classpath entries
Put back one-argument require for the convenience of downstream users.
Update to partest 1.1.7
Remove resource hungry tests
Support forthcominng unforked mode of partest
Reduce allocation and CPU usage in distinct
Disable macro/plugin class loader caching, by default
Minor cleanups
Constrain type parameters of LinearSeqOps
Handle escaping characters in URL -> file
Move documentation of take and drop in IterableOnceOps
Add test checking that we don’t evaluate the head of an iterable twice
Add test on laziness of Iterator#scanLeft.
Improve scaladocs on stability of sort methods
Improve scaladoc link refs and syntax
Optimize tails in LinearSeqOps
Add more tests for Iterator#range
Document thrown exception of min/may(By) on empty collections
Document take and drop in Iterable
Override getOrElse in immutable.MapX to avoid allocations.
Complete scaladoc of Iterator
Constructing a mutable BitSet with an empty array will return an empty instance.
Support multi-release JARs / compile for older platform (JEP 238/247)
Bring back List filter/filterNot optimization to 2.13
Exclude ScalaJS sub-projects from scala-xml in boostrap build
Travis: benchq webhook
Improve error messages for method references
travis: source scripts in publish stage...
Adapt method values more cannily, part 1
Trigger scala-dist after a successful build
Add missing methods to ArrayOps
`qual` is used in `qual.withFilter(fun)`, but `fun` is exempt
Serialize env vars more robustly to build/env
Add explicit result type to Builder.mapResult.
Add extra quotes to fix paths with spaces in them
Hopefully last round of cleanups
Cleanups, skip tests for now
More specific return type for transformation operations of IntMap, LongMap and AnyRefMap
Make transformation operations of WeakHashMap return WeakHashMaps
Threadsafe simple stats
Correctly synthesize `manifest[T]` when `T` is an alias
Simplify checking for already-published artifacts
Add Automatic-Module-Name attribute to library, reflect, compiler
Override knownSize in empty collections (#496)
Review feedback from lrytz
Add implicit BuildFrom and Factory instances for BitSets
Remove LinkedList and MutableList
Add back prependAll to buffer. Uncomment some ArrayDeque tests.
Add a JMH benchmark for ArrayDeque
Stabilizing definitions fixes
Exclude PR validation as a trigger
Pull structure of bootstrap script into .travis.yml,...
Define testAll's task labels inline
Switch to Travis CI for building releases
Make ArrayDeque compile
Adapt to changes in clean task in SBT 0.13.17+
Document how to run tests
Improve ImmutableArray operations
Update to Dotty 0.7.0-RC1
Introduce typeclasses making it easier to write generic extension methods (#478)
First commit of ArrayDeque for collections-strawman
Don't add original attachment for constant folded trees
Changes required to bootstrap the new collections library
REPL command completion is cursor sensitive
Disable parallelism in the scalacheck suite
increase indendation of override error message
Test completion of char literal
Enable implicits to check completion enrichment
Test to close scala/bug#6528.
Test to close scala/bug#5651.
Compile from irregular files
Set pointer-events to none in headings
Report an error when using an unstable qualifier in a type selection
Add a custom test listener for usable JUnit XML reports
Improve error message when using a Java class as a value.
Review: be less annoying, more conforming
Explicit type annotations and !isEmpty replace with nonEmpty
Compile only necessary projects for stability test
Remove .desired.sha1 files
Make MapWrapper.Entry's hashCode conform to the contract in java.util.Map.Entry's documentation
Add size methods to VectorBuilder
Actually remove @bridge.
bug#10033 Remove ClassManifest from Predef
bug#10033 Remove deprecations from scala.math
bug#10033 Remove deprecations from scala.text
bug#10033 Remove deprecations from scala.{sys, util, _}
bug#10033 Remove deprecations from scala.{annotation, beans, runtime}
bug#10033 Remove deprecations from scala.concurrent
Make MapWrapper.Entry's hashCode conform to the contract in java.util.Map.Entry's documentation
move safe last impl to TraversableViewLike
don't evaluate the head of a traversable twice
Remove early type members under -Xsource:2.14
Remove val in for comprehension under -Xsource:2.14
Introduce IterableOnceOps as common abstraction for Iterable & Iterator
Override HashMap.default in Seq.occCounts instead of using Map.withDefaultValue
Also augment assertion errors raised in reflect.
Avoid clearing arrays unnecessarily on copy
Intrinsify StringConcat.{s,raw} and improve string concat code gen
Compare positions in tryTypedApply by focus.
Additional methods and workarounds for Scala 2.12 and Dotty issues
Narrow scope of sensibility check for equals
Propagate fatal errors during macro expansion.
Warn also on mirror class clobbering.
Toggle comment if no text is selected
Make copyToArray useful
Take ArrayOps out of the collection hierarchy
Make deprecated + work for generic Set and Map
Specific C type parameter for StringBuilder
Remove temporary hack
Take advantage of IndexedViews in IndexedSeqOps
Implement some IndexedViews in terms of SeqViews
Failed attempt to fix Dotty compilation error
Optimize knownSize of small Maps
Add MapView and make View.MapValue a MapView.
Add SeqView. Make sure getting a View’s View is a no-op.
Relax type bounds
Move IndexedView in its own file
LazyList.force returns LazyList.  (#454)
Remove statistics reporting code from some hot paths
Test status quo nowarn for vanishing local
Use WrappedArray’s iterableFactory for ArraySeq
upgrade scala-xml to 1.1.0
Remove the boilerplate associated with the new design (and more)
Array.transpose
ArrayOps zipWithIndex overload
IsIterableLike for array
Iterator.copyToArray
include index in IOOBE
override sizeHint in Builder.mapResult
Iterator toString
deprecated mutable.IterableOps.transform
Clarifications for className
Add deprecated immutable.TreeMap.insert
review feedback
Unleash test of existential inference
Remove mapFromIterable and sortedMapFromIterable
add the bare and separator-only variants of addString to Iterator
improve wording in comment. reifiee => target
Bump sbt version & cache depdencies (#455)
Added type parameter to Iterator.empty and test cases (#450)
Issue macro expansion errors during "late expansion"
Remove octal escape literals
Review and cleanup of the code
Several changes to enable multi-threaded post-processing and class     writing for GenBCode
fix typo in .travis.yml
More minor bug and compatibility fixes from my integration branch
Remove the unmaintained list of supported collections and operations
Move new collections and operations to the Wiki
Update the status and roadmap
Deeply focus the qualifier before using it as the RHS of the stabilizing val.
Add missing @SerialVersionUID to serializable collections
immutable.Queue from the old collections library
mutable.ListMap from the old collections library
Remove ArrayLike
Add hashset benchmarks
Add back optimizations of HashSet
Restrict attachments for warnings
Warn when implicit is enclosing owner
Revert https://github.com/scala/collection-strawman/pull/356
Memoize IterableOnce source on first View traversal
Set @SerialVersionUID to 3L for all collections
mutable.PriorityQueue from the old collections
Add JMH benchmarks for distinct
Removed -Yliteral-types option and cleaned up docs
Make sure ArrayBuffer.clear dereference removed elements
ArrayBuffer.apply/update to ensure index is within bounds
Drop validation in View.Patched so that Buffer.patch does not throw IOOBE
Add old mutable.MultiMap Rename MultiMap (in contrib) to MultiDict
- Make “length” a (final) alias for “size” - Implementors of indexed collections implement a “finiteSize” member.
Test that ScriptEngine loads
Write unit tests for Buffer.takeWhileInPlace/dropWhileInPlace
Make Buffer.trimStart/trimEnd safe
Make Buffer.takeRightInPlace safe
Make Buffer.dropRightInPlace safe
Iterator.scanLeft is lazy at initial value
Make Buffer.dropInPlace safe
Make behavior of ListBuffer.remove(i, n) consistent with ArrayBuffer when n < 0
Make Buffer.takeInPlace safe
The UnrolledBuffer type from the old collections
Make LazyList.drop safe
Added try/finally around info save/restore
Increment end in Buffer.insert
Make Buffer implement SeqOps to retain original type
Add `->` alias for `Tuple2` to Predef
Reimplementations of immutable HashSet and HashMap.
Bring back collection.convert.ImplicitConversions
Don't leak sharpened bounds between implicit candidates
Avoid IIOBE in phase stack
First-class treatment of ClassTag-based factories
bundle scala-parser-combinators 1.0.7
Spot mistaken single-quote more broadly
Generalize LazyList to share the implementation with Stream
Overload unzip in ArrayOps
Make immutable.TreeSet serializable
Avoid creation of temporary Lists of imports during Context.lookup
upgrade sbt 0.13.16 -> 0.13.17
simple classpath tidyups
re-STARR on 2.13.0-M3
OpenHashMap from the old collections, now deprecated
Set version to 0.10.0-SNAPSHOT
Set version to 0.9.0
minor tidyup of files and paths
Refactor typechecking of array instantiation for performance
drop -Yuse-stupid-types
Add search methods from scala.collection.Searching
Update repl script engine factory class name
Allow statistics printing after arbitrary phases
Introduce Cloneable trait
Add Factory and BuildFrom instances for String and Array
Unify scope lookup for companions and default getters
Deprecate static forwarders along with their forwardees.
implicitNotFound for BuildFrom
Ensure that parameter names read from bytecode aren't obliterated by generic signatures.
Address warnings
Update a check file to fix the build
Add deprecated toIterator operation to IterableOnce
Add missing overload for collect in MapOps
Correct, stable position for mixed-in outer accessors
Make sure the code is compiled by Dotty
provide hook for external profiler
Add deprecated alias “append”, for “lazyAppendAll”, for better cross-compatibility
Pull up fill and tabulate factory methods to IterableFactoryLike
Add “updated” method overload to StringOps
Add collection.BitSet factory object
Add deprecated CanBuildFrom alias to BuildFrom
Add transform operation to immutable Maps
Add classloaders cache for macros
Avoid position tests when linting
Add copyToBuffer rule
Use partest 1.1.3
Cache classloaders for compiler plugins
Generalize `FileBasedCache` to accept `Seq[Path]`
Bring back WrappedString
Speed up creation of [Abs]TypeErrors.
Stabilize LHS of applications enabling dependent implicits
Update to Dotty 0.6.0-RC1
Create two distinct scalafix rules targeting 2.12 and 2.13
Various bug fixes, additional methods and deprecated forwarders
Pull up reverseIterator implementation from Vector to IndexedSeq
Add collections-contrib/test to CI
Removed stale check files.
Added test demonstrating Id[T] replacing T {}.
Remove -Yliteral-types flag and make everything unconditional.
Added clarification of the distinction between FoldableConstantType and LiteralType.
Reference to Symbol.apply is unambiguous so no need to filter.
Specify that an upper bound of Singleton on a type variable allows singleton types to be inferred.
Removed stale comments in spec.
null.type should not be accepted as a literal type.
Unconditionally enable literal types.
Updates to pickler to support scala.Symbol constants.
Align with spec: asInstanceOf should not check equalities.
Updated isInstanceOf[Singleton] to match SIP decision.
Updated is/asInstanceOf to match SIP and Dotty implementation.
An annotation should not prevent an inferred type from being widened.
ValueOf should be materializable for ThisTypes
Updated spec to include conditions under which singleton types are inferred.
When solving type variables always use singleton upper bounds.
Removed empty refinement on the result type of Predef.valueOf
Reworked handling of negated numeric literal types.
Don't widen default values when literal types are enabled.
If we've solved against an expected type yielding a singleton type, don't subsequently widen it.
Constant folder should both see through singleton types and also recognize literal typed vals.
Preserve literal types even when we can't fold terms due to possible side effects.
Added literal types test of new Any/Nothing checks
SIP-23 Implementation of literal types
Avoid accumulating ill-kinded bounds during unification
Remove uses of the @bridge annotation in compiler.
Don't emit a checkinit test for fields inherited from traits
Test cases for a few accidentally-fixed bugs.
Don’t force views elements prematurely.
Diagnostic for name conflict between package and other member
Be tolerant of name clashes when reflection needs a package
Comment on problem in isOverridingSymbol and subtlety of initOwner capture.
Remove deprecated scala.concurrent.Lock
capture more info on background threads update csv version to 2 include idle time
Expand test for classOf over value class to class tags
Use `gen.mkClassOf` in `reifyRuntimeType`
Documentation and cleanups around the pickle encoding
Make knownSize non final on Iterator
Use solved type vars to improve bounds of undetermined vars
More precise check for Any/Nothing, ruling out singleton types
When checking for a non-empty type intersection don't treat Singleton as final
Rename Growable.add to addOne
Use decoded name in error message
Improve error on absent import selector
Rename unordered to unsorted. (#329)
optimise use of indyLamdaMethods map use a java concurrent map for performance provide API to perform conditional operation based on presence
A port of mutable.Queue from the old collections
bump copyright year to 2018
Various Map implementations ported from Scala 2.12
Case also ends block stats in special cases
Enforce maxerrs more robustly
Improve scaladoc link refs and syntax
Simple fix for #9726
Make Typer#dyna.mkInvoke more accurate
Don't assume that class literals of value classes wrap TypeRefs.
Primitive array types in ArrayOps / ArrayBuilder / ImmutableArray
Deprecate subtype notation for trait extends
Remove deprecated MurmurHash
Make sure to override toXxx methods when it’s a no-op
Make updateDynamic work with context bounds
Set version to 0.9.0-SNAPSHOT
Set version to 0.8.0
remove ClassBType hashCode and equals, and adjust test cases
Allow Nothing sequence argument
Enable issue navigation for IntelliJ.
Patternly apply reduces apparent parens
allow per-run init to be used with java collections add tests for per-run init
Change "ns_per_<unit>" names in Duration.scala
Tail-recursive Tseitin model solver.
Avoid hard failure with older standard library
Reduce overhead of enabling -Ystatistics
Extra caution in namer treating parents
remove some redundant calls to Symbol.sourceFile SymbolSourceFile can walk a tree if not root so can be expensive
Remove unused, and soon-to-be dangerous, isListApply
Tighten up check for List() to Nil rewrite
Adjust recently added tests for recently changed type printing
Make `collections-contrib` and `junit` compile with Dotty
[backport] Use ":" as separator for sbt ScalaVersionSetting
use ":" as separator for sbt ScalaVersionSetting
Added neg test illustrating form of Cats/Scalaz failures.
When testing for presence of a Symbol in a Type don't skip aliases.
emit parameter names for static forwarders
Override isEmpty and nonEmpty in terms of lengthCompare, in Seq, to avoid instantiating an Iterator
Revert "optimise use of indyLamdaMethods map"
Make leaf types abstract class rather than traits. Also inline foldLeft call in List’s foldRight implementation.
Remove statistics reporting code from some hot paths
Add some missing API docs
Add collection.MultiMap and collection.SortedMultiMap, as well as both mutable and immutable implementations.
Avoid nonEmpty in hot paths
Optimize generic sig parser
Optimize nested class collection
Use AnyRefMap in hot parts of the compiler.
Optimize IndexedSeqOptimized.toList
Backtick underscore in REPL
Set version to 0.8.0-SNAPSHOT
Set version to 0.7.0
Revert "Migrate scala.Seq to strawman.collection.Seq"
Migrate scala.Seq to strawman.collection.Seq
Implement the rule for “import JavaConverters._”
Workaround for scalacenter/scalafix#478
Add failing test case (because of scalacenter/scalafix#478)
Remove rewrite rules that are not needed anymore
Revert "Type Alternative patterns as the lub of their branches."
Elide prefixes in printed types uniformly in runtime reflection
optimise use of indyLamdaMethods map use a java concurrent map for performance provide API to perform conditional operation based on presence
Remove reference to wall-time
Disable -Xfatal-warnings during bootstrap build of modules
[backport] improve benchmarking of multi-threaded compilation - an enabler for GenBCode (and other future) optimisations
allow perRunCache to support java maps and collections directly
combine classBTypeCacheFromSymbol and classBTypeCacheFromClassfile
Simplify warning for unset private var
Class literal is a usage
-Ywarn-unused ignores filter of refutable patterns
Disallow auxiliary constructors in ConstantAnnotations
Test case for constant annotations
Deprecate ClassfileAnnotation, introduce ConstantAnnotation
Deprecate PartialFunction.apply
[backport] Update ASM to 6.0
Revert "SI-3832 Extract tracking of under-construction classes to a mixin"
Remove redundant overrides of Type.mapOver
Avoid indirection through bridges
Favour direct use of Type.mapOver
Spread mapOver into invokevirtual of Type.mapOver
Spread Tree transform/traverse into virtual methods of Tree
Expand check for value-class-wrapping-value-class errors to include parents.
Update Dotty to 0.5.0-RC1
minor memory and inlining improvements
initialise ClassBType info field as part of construction ban external mutation of info provide memory barriers for late initialised info field
Add bridges for overridden methods in lambda indy call
Add `minAfter` and `maxBefore` to `TreeMap` and `TreeSet`
rework Symbol enclosingTopLevelClassOrDummy  run.compiles checks use the originalOwner not the owner. The owner may get adjusted in lamdalift to skip the class that a symbol was declared within, so the chain can direct to a class is apparently not compiled
optimise Lazy value generation and calculation Reduce memory and lock contention in multi-threaded jvm phase Single values for common eager values Predict if expansion is certain to be required, and eagerly generate in that case to reduce lock contention in parallel GenBCode compiles
Drop PagedSeq
Drop accidental field for validAliasFlags
Avoid lazy val, fix cache invaliation of isOverridingSymbol
Avoid retaining field for Symbol.initOwner
Rename TreeMapView and TreeSetView to avoid confusion with Views. (#301)
Warn-unused uses type alias in nesting check
cache the result of an expensive canonical file lookup
avoid repeated calls to associatedFile, which can walk owner tree
Add regression test for scala/bug#9220
fix missing interpolator in project/JarJar.scala
Optimize more operations in strict collections
Add TreeMap benchmarks
Comment out a few benchmarks to shorten their execution time
Set default scalaVersion to be 2.13.0-M2 Add missing suffix “-SNAPSHOT” to our current version Bump to Scala 2.12.4
make PreRunInit threadsafe
small readme addition about community build runs
Add MultiSet and SortedMultiSet.
Update IntelliJ project files
use java concurrent hash map for speed
improve benchmarking of multi-threaded compilation - an enabler for GenBCode (and other future) optimisations
Update ASM to 6.0
Utility method to ASMify an asm ClassNode
Warn when Object/AnyRef is inferred. Extends -Xlint:warn-any to also emit a warning when Object/AnyRef is inferred.
Proper laziness for by-name args of right-associative operators
Keep path-dependent types when typing HOF args in overload resolution
Remove @SerialVersionUID from traits.
Don't emit the serialVersionUID field on traits.
Move lazyFoldRight to collections-contrib
Add LazyList.lazyFoldRight
Move foldSomeLeft to a decorator
Fold Left While Comparison
Improve Scaladoc
Scalafix rewrite for lazyZip
Update contributing guidelines to mention scalacheck tests
Add overflow protection to the range method
Deprecations to prepare adherence to compact1 profile
Drop `scala.sys.process.javaVmArguments`,
Remove compiler dependency on `@BeanInfo`
Remove compiler dependency on `@remote`
Check bounds on implicit macro applications
Upgrade Scalafix to 0.5.3
Add missing parens
Copy annotations to bridge methdos
Enable Java converters for concurrent maps
simplify LRU for parsedClasses in the ByteCodeRepository
optimise flag generation - convert mkFlags to explicit bitwise or to reduce CPU and memory usage
set version to 0.6.0
TaskSupport respects specific FJP
Delay check for Object.class
Adapt to the removal of sun.boot.class.path
Remove old tests that have already been adapted to the strawman
Add back the non-deprecated Java collection converter APIs
Add lazyZip operation
Simplify toXxx methods on IterableOnce
Enable RedBlackTree tests
Enable TrieMap tests
Migrate ArrayTest
Move ASM sources back to the original location
Assignment operator rewrite finds setter
Document thrown exception of min/max(By) on empty collections
Document negative inputs for `take` and `drop`
Make ListBuffer and ArrayBuffer serializable. (#272)
Remove irrelevant comment to add .gitignore entry
Update -Ywarn-unused:params description
Add MiMa whitelist entries
Update to scala-asm v5.2.0-scala-2
Limit use of java file manager to JDK 9
Static calls to interfaces are only allowed with 1.8 classfiles
Support -target:jvm1.8, needed to call static methods on Java interfaces
[backport] SI-9393 fix modifiers of Java annotations
Compare using `getterName` instead of `name`, fixes scala/bug#10357
Add withDefault and withDefaultValue to Map types
Enable scalacheck tests.
Set scaladoc options
Backport suport for Java 9 platform classpath
A collection of smaller changes from my integration branch for better compatibility with the old collections library
Add scaladoc to updatedWith
Use Scala 2.12.4 as the reference compiler
Override getOrElse in immutable.MapX to avoid allocations.
Emit serialVersionUID fields as private.
Optimize Seq factory methods.
Add immutable.MapX cases to test/files/run/t8549.scala
Implement concat in terms of :++ in Seq so that it benefits from perf overrides
Add updatedWith method to immutable Map collections
Add updateWith method to mutable Map collections
[nomerge] Default getter is never assignment
Upgrade to Dotty 0.4.0-RC1
SI-9750 scala.util.Properties.isJavaAtLeast works with JDK9
Allow singleton group annotations in Scaladoc, fixes scala/bug#10078
Add OpenSans font variants for Scaladoc pages, fixes scala/bug#10235
fix empty iterator in NumericRange
Remove unused method memberToInlineCommentHtml reference was removed in https://github.com/scala/scala/pull/3685
Typesafe -> Lightbend, 2013 -> 2017 for 2.10.7
Move compilation daemon portfile under `~/.scalac/`
Add option -port to fsc
Document when the `scala` command starts/uses a compilation daemon
Use https in pull-binary-libs
Bump build number to 2.10.7
Revert "Deprecate Tuple[23]Zipped.invert, rename to Tuple[23]Zipped.transpose."
Upgrade to jline 2.14.5
Unbreak compilation daemon portfile writing
Move compilation daemon portfile under `~/.scalac/`
[backport] AnyRefMap dropped entries with one hash code.
Upgrade scala-asm to 5.2-scala-2
Ensure display order of note tags and others matches source definition
Address SethTisue's review feedback
Move compilation daemon portfile under `~/.scalac/`
lengthen timeout on some Future tests
Move equality implementations into collection classes
Revert "Remove implicit conversion from factories to BuildFrom"
Avoid intermetiate Set creation in pattern match analysis
Reduce the overhead of deferred macro expansion on typechecking
Only add SubstOnlyTreeMaker when dealing with an dep. typed unapply
Add more join operations
Optimize List#updated
Rename tests to make them more consistent with the new collections names
Revert "Add infer Product with Serializable linter flag"
Avoid repr call in ArrayOps
Make `completingStack` global
Avoid disabling statistics
Return in PartialFun relative to right enclosing method
Change name and description of `-Yhot-statistics-enabled`
Don't display hot counters if hot statistics are disabled
Higher-kinded type variable unification.
Allow `AnalyzerPlugin`s to hook into implicit search
Hot fix registration of timers and counters
Print timers of phases at the end
Add padding to implicits timers
Add statistics to scopes handling
Review #5876: OOPify
Complete decorators list
Set version to 0.6.0-SNAPSHOT
Set version to 0.5.0
Move WithFilterTest to test/junit subproject
Move BuildFromTest to test/junit subproject
Move GenericTest to test/junit subproject
Move flatten test to test/junit subproject
Move FactoriesTest to the test/junit sub-project
Implement Intersperse
Rename prepend & co to use past tense (i.e. prepended).
Push ++: and :++ down from collection.Iterable to collection.Seq and pull +: and :+ up from immutable.Seq to collection.Seq.
Massage performance with statistics optimizations
Add groupMap and groupMapReduce operations on Iterable
Conditionally lint macros and expansions
Skip #6089 in merging 2.12.x into 2.13.x
Skip #5657 merging 2.12.x into 2.13.x
Skip #5993 on merging 2.12.x into 2.13.x
Minor correction in Either.scala documentation
Add collections-contrib sub-project.
Allow interactive enabling/disabling of statistics
Initialize statistics per global
Make Lazy* classes serializable
Replace dummy `unapply-selector` by ref to real val
Simplify pattern expansion logic
Address lrytz's review feedback
Remove implicit conversion from factories to BuildFrom
Renamings
Separate BuildFrom and CanBuild.
Add LinkedHashSet and LinkedHashMap
Clean the original tree attachment in erasure
ticket: remove commented out code, move class variables into main (according to review comments) and properly indent the test code.
No warn unused import on macro expansion
Use `ArrayBuffer` for `completingStack`
Add original tree attachment
Adapt to change in Java 9 classloader heirarchy
Replace stray tab with spaces this really fixes the alignment instead of https://github.com/scala/scala/pull/6009/commits/29eaf2243cc80d6f9af37e931c54d4419d9f6acf
Remove logic to check if a named arg could be an assignment
Rename AssignOrNamedArg to NamedArg
Change default Xsource to 2.13
Changes to allow compilation with -Xsource:2.13
Make sure `@elidable` is only on concrete methods
Drop useless failing assert in `mkCast`
sample test
Deprecate assignments in argument position
ticket: cap test time with a two minutes timeout.
ticket: fix styling according to @viktorklang's review.
ticket: reduce test time by reducing number of iterations from 10k to 4k.
ticket/10513: introduce a failing test and a fix to memory leak associated to Future.firstCompletedOf when one of the futures is 'long lived'.
[nomerge] Deprecate assignments in argument position
Make View.from a total operation.
Add test case suggested by lrytz
Optimize statistics check via switchpoint
Enable collection of all statistics
Avoid toList conversion in regex unapply
SI-10159 spurious cyclic error in type selection
SI-10159 spurious cyclic error in type selection
Replace Level.Invocation with Level.Trial for all benchmarks and remove looping from create benchmark.
Don't build a hash set in removeEmptyExceptionHandlers
Update ASM to 5.2
Add distinctBy operation
increase timeouts on some sys.process tests
Uncomment temporarily commented lines in TrieIterator
`fill` does not necessarily repeat the same element, since `elem` can have state.
Add more scaladoc
Make thunk more explicit in View.fromIterator
Add `knownSize` method to `IterableOnce`
Change signature of fromIterable factory method
Disable test for JAR overwriting on windows
Don't eliminate redundant labels, the classfile writer does it
Mark reachable labels with a flag in label.status instead of a hash set
Use an access flag instead of a hash map for methods with DCE done
Access flag flag instead of hash map for methods with maxs computed
Put implicit resolution for abstract types under -Xsource:2.13,
Resolve implicit instances for abstract types, according to the spec.
SI-8521 No blind save of context class loader
SI-8521 ScalaClassLoader.asContext saves context
Add design documentation
Simplify benchmarks setup by removing excessive data, also add slice benchmarks.
Keep settings added in the console when running the setupXYZ sbt tasks
Add an enableOptimizer task to the sbt build
Optimize tailcalls even called with different type arguments.
Use non-deprecated optimizer flag now that starr understands it
Simplify skipping of private methods in the classfile parser
Optimize use of hash maps in makeLocal in the back end
Only cache ImplicitInfo erroneous status in isCyclicOrErroneous.
Avoid an AST traversal in the erasure phase
Use AnyRefMap in picker, we don't actually need a linked map
Don't serve stale JAR metadata from cache in classpath implementation
Update to Dotty 0.3.0-RC2
Add second usage example for extending Value with attributes - closes https://github.com/scala/bug/issues/4803 - see also https://stackoverflow.com/a/6546480
[nomerge] Avoid cycle in global init
[nomerge] Friendly REPL banner and help text
add missing back-quote in spec
Classes can access `protected static` members of their Java superclasses.
Pipeline code gen and post-porcessing if gobal optimizations disabled
Add cross-compilation with Scala.js 0.6.20.
Make Travis-CI check that PR authors have signed the Scala CLA
Add Iterator.nextOption
Set version to 0.5.0-SNAPSHOT
Set version to 0.4.0 and update README accordingly
Use a List rather than the varargs Iterator constructor
Explicitly annotate return types in GenBCode/PostProcessor
Additional comment about LazyVar
Upgrade to Dotty 0.3.0-RC1
scalacheck: stop using structural types
scalacheck: fix uses of procedure syntax
Add implementations of immutable Map optimized for small sizes
Move small-size-specialized immutable HashSet into Set
Small HashSets
reduce proposed default capacity to 4096 lines.
Provide capacity for ProcessBuilder.lineStream
Replace call to size with knownSize in bounds check in Patched to not exhausts iterator prematurely.
Move SI-10481 test into the junit project
Enable JUnit TrieMapTest
Check that an entry was found before trying to remove it from the underlying Map
Rewarding workaround suggested by @smarter
Add TrieMap
Upgrade to Scala 2.13.0-M2
Use LogarithmicAxis in the y-axis
Enable size 0 in the benchmarks
Improve the to[X] rules
Remove deprecated view bounds in library
Optimize java generic signature creation
Test case for InnerClass entry for reference in deserializeLambda
Prototype toX and to[X] conversions.
Unimport both augmentString+wrapString if either appears.
Unimport Predef conversions if used.
Improve documentation of the migration tool and fix the input and output files.
Improve documentation of the migration tool
Add dep on parent project.
Add a few more examples
Upgrade to M4.
WIP
WIP
WIP
WIP
WIP
Use scalafix.syntax.normalized instead of custom rolled.
Move replaceSymbol from config to rewrite
Upgrade to scalafix 0.5.0-M3.
Almost complete with rewrite.
Depend on collections project in output.
Add Range, Array and String examples
Add a few examples
Setup skeleton for rewriting with scalafix.
Bump 2.12.x version to 2.12.3
Also optimize filterNot in Iterable
Optimize diff operation of Map.KeySet and SortedMap.KeySortedSet.
Optimize filterNot operation of Iterator
Mention the low hanging fruit label in the contributing files
Simplify not empty checks in scaladoc
Don't skip the ValTypeCompleter in the AccessorTypeCompleter
Implement iterator in IndexedSeqOps. Remove TraversableLikeTest because we don’t have stringPrefix anymore in the strawman. Enable TraversableOnceTest.
Enable ArraySortingTest
Try something else for scalacheck tests
Disable scalacheck in the CI for now.
Enable CollectTest. Add collectFirst operation to IterableOps. Add withFilter, filterNot and collect to Iterator.
Enable BitSetTest. Add some missing operators to mutable.BitSet.
Partially enable SetMapConsistencyTest. Add update method on mutable Sets. Add mkString method on Iterator.
Remove `to` method on Iterator as long as https://github.com/scala/collection-strawman/issues/199 is not solved.
Add explicit Unit return type to abstract method.
Apply scalafix ProcudureSyntax on junit project
Enable TreeMapTest and TreeSetTest.
Enable VectorTest.
Enable SetLikeTest (renamed to SetOpsTest). Not really useful, though...
Enable HashSetTest.
Enable HashMapTest, ListMapTest, TreeMapTest and VectorTest.
Enable SeqViewTest
Partially enable ReusableBuildersTest. Make List builder reusable.
Enable IterableViewLikeTest
Enable LinearSeqOptimizedTest
Add scalacheck tests from scala/scala
Enable IndexedSeqOptimizedTest
Add JUnit tests from scala/scala
Move migrated tests to strawman directory
Enable ListTest and ListSetTest
Enable some Iterator tests. Add missing methods on iterators. Optimized concat.
Unable a two tests that compile without any changes
Typo and simplification.
Rename `iterable` to `toIterable`, make it public, and never refine its return type.
Move iterableFactory refinement to Seq type instead of SeqOps
Rename `seq` to `toSeq` and make it public.
Make IndexedView extend SeqOps
Pull up the `coll` member from `SeqOps` to `IterableOps`
Rename the `coll` member to `iterable`
Add mapInPlace to ArrayOps
Type Alternative patterns as the lub of their branches.
Remove obselete update benchmark from ListBufferBenchmark.
Replace concat (++) with appendAll (:++) where applicable.
Replace update benchmark with update_last and update_random.
Specialize prependAll method of Vector
Make ++ an alias of appendAll
Make zip and concat methods take Iterables as parameters rather than IterableOnces
Make concat final and inlined in IterableOps.
Add appendAll operator and generalize it (and concat) to accept IterableOnce (instead of Iterable).
Mention caught throwables for trait Future.failed
Add tests.
Rename benchmarks to better reflect the operations measured.
Added some type ascriptions to fix compilation errors on Dotty
Move tabulate and fill factory methods to a new SeqFactory trait. Add tests for factory methods.
move backend state from BTypes to components where it belongs
Deprecate Tuple[23]Zipped.invert, rename to Tuple[23]Zipped.transpose.
Move LazyVar to BTypes, synchronize on frontendLock
move PostProcessorFrontendAccess to a separate file
Use LazyVar for CoreBTypes
Move components from BTypes to PostProcessor
Make extractors return same collection type as source collection.
Add extractors for head/tail (+:) and init/last (:+).
clarify scaladoc of patch
Reuse old collections implementation for patch on Iterator
Override patch method in strict sequences for performance
Move patch implementation into a method in Iterator
Remove unrelated method calls from patch benchmarks
Rightful owners for stub symbols
Set encoding to UTF-8 for partest to avoid failures on windows
Bump benchmarks to latest sbt-jmh
avoid allocating unless needed avoid overheads of string interpolation
Optimize ImmutableArray.fromIterable
Add more factory methods
uncomment inline annotations
Bump dotty version to get typing improvements
Implement diff method in DefaultKeySet
Make filterKeys and mapValues lazy
Update README with implemented operations
Alternative solution, alternative error
Add immutable.Map operations
Add Map operations.
Tidied implementation; improved existing and added additional test.
Extend StrictOptimizedSeqOps optimizations to mutable collections
Position negative numeric literals starting at the minus sign.
Force superclasses through non-lazy module types.
Workaround to avoid bug on bindings in Tasty
Update bootstrapping version to 2.13.0-M2
Distinct operation should only be available in sequences
Some extra optimizations to 'distinct'
look at all parameter lists for error
Improve performance of 'distinct' when working with strict collections
Rework checks for max tuple/function arity in quasiquotes
Inline the synchronizing wrapper method in runtime reflection.
Add patch operation to immutable.Seq.
Propagate the DEFAULTINIT flag to the underlying field
Avoid IllegalAccessError with Java package-protected class
Decouple warning unused implicit parameters
move classfile writing code to context without global
upgrade to sbt 0.13.16
Unit test style (tabs and asserts)
Restore `isJavaAtLeast(Int)`
Accept `-Dscala.color`.
Add missing 'bundle install' step see https://github.com/scala/scala.github.com/issues/644#issuecomment-280123038
Simplify backend pipeline, move code to context without Global
new CodeGen component, move bTypes to GenBCode
Use Scala 2.12.3 as the reference compiler
Set version to 0.4.0-SNAPSHOT
Set version to 0.3.0
Prepare README for 0.3.0 release
Make withFilter sound.
Add missing methods on iterators. Optimized concat.
Port List optimizations to the strawman. All prependAll operation.
Add uncheckedVariance annotations for Dotty.
Make WithFilter inner classes.
Remove mention of SortedSet in SortedMap definition.
Switch to sbt mima plugin
Add StrictOptimizedSeqOps. Also override span and unzip in StrictOptimizedIterableOps.
Don't assume final member class in another comp. unit will stay final
Rename FromSpecificIterable to CanBuild
Implicit factories
Remove assertion in computing the EnclosingMethod attribute
Optimize jumps with constant conditions in LocalOpt.
Teach the optimizer about type tests on primitive box types.
un-inline to fix tests in Dotty.
Make `length` implementation final in LinearSeq.
Add immutable.LinearSeq, and make List and LazyList extend it.
Add withFilter
[nomerge] Cleanup threads created by parallel collections tests
Don’t create PartialFunction unless necessary (or hard to avoid)
Address reviewer comments.
Failing scalacheck tests fail build again
Extract some of MethodLevelOptsTest into BoxUnboxTests for mo' betta review diff
Explicitly pass the CanBuildFrom instance in the Scala TreeSet benchmark.
scala/bug#5961 Add Ordering composition methods
PipedSource should join Source thread to wait the exit value.
Translate appropriate JVM accessor flags into annotations.
Refactor withSuppressedSettings per review
Add infer Product with Serializable linter flag
Add Option.{when,unless}
Update README.md
No noisy options for REPL eval compilation
Clean up Match case Unreachable Warning
Do not pass -language:Scala2 to Dotty, no longer necessary
Do not pass -opt-warnings to Dotty where it doesn't exist
Add missing parentheses for nullary methods
Upgrade dotty to 0.2.0-RC1
Add missing parentheses
Add a bridge to LMF-generated lambdas with the instantiated signature
-opt-inline-from:<sources> to allow inlining from compilation units
Add substitute methods and tests
Don't lose track of imports in presentation compiler
Test case for already-fixed pattern matcher bug
Test case for recently fixed bug
Disable deprecation of nullary eta conditional under -Xsource:2.11
Disable adaptation by nullary eta expansion in 2.13
Disable tag driven release of the distribution
Expand test case to consider local modules
Improve help message for :kind in the REPL
Prevent `inferImplicitValue` from reporting false divergent implicits
Avoid calls to static initializers in runtime reflection
Add missing phase travel when searching a companion in the backend
Two fixes for overload resolution for PartialFunctions
Remove duplicate import
Add `@throws` annotations; fix iterators
Don't checkUnused java units
SI-9706 Add a fromString method to Numeric trait
Split Seq.scala file into Seq.scala, IndexedSeq.scala and LinearSeq.scala files
Remove dropRight and takeRight from Iterator. Keep IndexedView-based implementations.
Don't minimize reduntant parents used in super calls
Spec relaxed import, review
A bit of doc comments for our ClassPath implementation
Optimize Classpath.findClass
Spec relaxed import behavior
Set version to 0.3.0-SNAPSHOT
Set version to 0.2.0
Update README for 0.2.0
Set max-width for subpackage-spacer
Add collect
Use MultiStringSetting for -opt-inline-from
Different implementation of diff
Add Set operations.
disable compilation option to get rid of a bunch of warnings
Add most of missing Seq operations
Add most of the current methods of Traversable to IterableOps
Add most common operations of Iterable
Add most common operations of Iterable
Add most of the current methods of Traversable to IterableOps
Add takeWhile and span. Override methods for performance.
Add most of the current methods of Traversable to IterableOps
Consistently use parens for the `newBuilder` operation Consistently order the collection type constructor (`CC`) and collection (`C`) type in `SortedOps`
Retrofit `BuildFrom` into the new design
Tests for compilation with various -opt-inline-from settings
Extensive help text for -opt-inline-from
Add -opt:l:inline and -opt-inline-from, deprecate -opt:l:classpath
parser and checker for -opt-inline-from setting
SI-10120 ReplReporter handles message indent
Test case for scala/bug#10343
SI-10120 Extra advice on unclosed char literal
SI-10133 Deprecate unescaped single quote char lit
Keep default getters next to the original definition
Improve flattenTest
Review feedback, some performance-related cleanups
User-defined case companion apply: unlink default getters
flatten and flatMap with Options
continue supporting Exceptional.unwrap for now
[nomerge] Scala classes ending in `$` get a signature
Simplify completion hierarchy some more
Partial input only needed for completion
Improve repl error positions, tree gen
Prefer ArrayView over ArrayOps
Pull up append and prepend from Vector to immutable.Seq. Provide (inefficient) view-based default implementations. Also provide a view-based default implementation of the updated operation.
Prefer StringView over StringOps. Use immutable.IndexedSeq as a factory for StringOps.
Pull up the `updated` method to `immutable.Seq`.
Pull up the `reverseIterator` method to `Seq`
unable concat optimizations for Vector, with a runtime type test
Add Vector.
wrappingPos considers positions of annotations
Exit repl on first CTRL-d
Drop welcome message from repl test output
Review feedback from lrytz and retronym
Restrict shell's dependency on `IMain` to `Repl`
Move compiler-coupled commands to IMain
Reduce ReplReporter interface
Separate shell from compiler, reduce mutation
Split Scripted in frontend/repl
Use NIO in FileBackedHistory, drop dependency on repldbg
Reduce mutation, single-use abstractions
Deeper simplifications, correct error line number
In-source essence of sbt console interface
Split REPL into front / back; drop embedded jline.
Small cleanups in the REPL, preparing modularization
Build: command parser should include separators
Add apply methods to typeclass companion objects in scala.math
upper bound on the E type parameter of HashEntry
Add icon for alias
ScalaSigBytes is no longer a ClassfileAnnotArg
Invalidate symbols for artifact classfiles, refactor classfile parser
Remove unnecessary abstraction
Implement equality for Map collection type
SI-10081 Avoid diverging implicit scope search
SI-9937 find nested java classes if InnnerClass entry is missing
Parse signatures when collecting referenced nested classes
Don't emit generic signatures for types erasing to a primitive
Test for java inner class referenced in signature only
Move ClassNode traverser for collecting nested classes
Support serializable on MatchError
even more details in the roadmap
Move Java8Streams benchmark to the timeBenchmark sub-project
update roadmap
Modify as requested in review by @julienrf.
Privatize underlying values in value class
Add groupBy. The implementation is based on builders, as in the current collections.
Remove builders from mutable collections
Pull up the newBuilder method from Buildable to IterableOps. Rename newBuilder to newSpecificBuilder. Rename Buildable to StrictOptimizedIterableOps. Add XxxWithBuilder variants to all kinds of factories.
Prefer orNull library method
Create README.md
Acknowledge OSS licenses used
Remove unused format arg in interpreter echo
fix SeqExtractors scaladoc
Move buffer initialization to iterator hasNext/next for takeRight/dropRight.
Expose sha and commit date on VersionUtil
Drive bitmap computation from field, not accessor
Remove unnecessary imports and import braces
Remove unnecessary semicolons
Upgrade to jline 2.14.4
another nullary method fix
Add init, takeRight and dropRight to list of implemented operations.
Add comments describing algorithm used for takeRight/dropRight implementation.
Make takeRight and dropRight use mutable.ArrayBuffer instead of raw array to avoid creating unnecessarily large array when the requested count is much larger than iterator length.
Add Range
Improve presentation compiler with Shapeless macros
Incorrect value in docs for unary flag
add more info for contributors
Remove new modifier on case classes in compiler
Change implementation of init to use dropRight instead of drop.
Add optimized implementations of takeRight and dropRight to ImmutableArray.
Add default implementation of takeRight and dropRight to Iterable, Iterator and View.
Add test for init.
Add init operation #95
Add Scala 2.13.0-M1 to scalaCrossVersions.
Allow inlining into trait constructors
Clean up some testing in the backend
Update benchmark code
Split Travis publishing out to external script and simplify logic.
Don't attempt to publish if there's no private key.
Remove unnecessary refinement
remove unnecessary “override” modifier
Introduce factories with builders. Optimize optionSequence (in TraverseTest) when the underlying IterableFactory happens to be an IterableFactoryWithBuilder
Use “sorted” everywhere, for consistency
Remove default implementation of empty
Make traverse test compile under Scala2
Revive part of TraverseTest
Expose factories in collections.
Avoid calls to NoPrefix.member in rebind
Refactor method name
Inline Typer.isMonoContext
Optimize hasUnspecializable
Avoid allocation of :: on each atPhase
Avoid noop phase push/pop
Decompose implicit pt in to function arity in advance of checkCompatibility
Avoid findMember in early implicit candidate filtering.
Optimize case class namer
Avoid map lookup for fast track macros on every methodSig call
Manually assign positions in typedIdent
Defer calling pt.members for in anon class typechecking
Avoid non-local return in typedSelect
Underscore is lower case
Add explicit return types to immutable.List implementation.
Support for immutable arrays
Clean up :kind's error message per review
fix @switch annotation positions
Update REPL's :help text for :kind
Implement :kind handling for type lambdas
Improve :kind by only accepting type expressions
Add support for phase profiling generating inforamtion per phase:   - Wall Clock Time (ms) - wall clock time   - Idle Time (ms) - time blocked   - cpu time (ms) - reported cpu time   - user time (ms) - reported user time   - allocated (mb) - bytes allocated during phase   - retainedHeap (mb) - retained heap after phase (enable GC for more accurate counts)   - gcTime (ms) - time spent in GC.
In SortedMap, override the return type of map operations that are polymorphic in values only.
Print compiler args on -Xprint-args
Route errors and warnings to the ContextReporter.
Use convenient overload of String.substring
Optimize CommandLineParser to avoid exponential cost
Factor out implementation of fromIterable of mutable collections.
Remove FromIterable (we only need FromSpecificIterable, which is used by the `to` method). Harmonize the names in Factories.scala. Systematically use delegate factories for abstract collections.
Pull up mapInPlace to mutable.Iterable, so that it is consistently inherited by all mutable collections. Pull up flatMapInPlace and filterInPlace to mutable.GrowableIterable, which is a new trait extending both Iterable and Growable. Make mutable.Map extend GrowableIterable (and implement its newly inherited methods). Make GrowableSeq extend GrowableIterable (and remove inherited method definitions). Make mutable.Set extend GrowableIterable (and adapt its previous mapInPlace methods to match exactly their new signature).
Factor out the subtract method in a Shrinkable trait. Move method implementations in XxxOps traits.
Tune hierarchy of mutable collections - mutable.Map is a mutable.Iterable. - mutable.Set is a mutable.Iterable.
Add result type needed under dotty
Remove asInstanceOf.
Use delegation over inheritance to implement mutable.HashMap.
Add TreeMap implementation. Pull up the “empty” method of immutable.Map into the generic Map type. Introduce generic SortedMap type. Pull up the “clone” override at the top of mutable.Set and mutable.Map types.
Move Map factory traits to a dedicated source file
Add mutable.HashMap implementation
Move back concat and union into generic Set. Rename addAllInPlace method to addAll, in Growbable, to be consistent with the add method
Optimize Symbol.typeParams
Display raw type as existential in error message Before, when implementing a raw type in a method override in the wrong way, the error message always suggested a simple wildcard type. This commit changes that error message to always suggest an existential type that the user can copy paste into his code. To that end `typeParamsToExistentials` is changed to preserve the names of the type parameters instead of changing them to "?0".."?N".
Added latest ENSIME link for non-IDEA Editor. (#5894)
[backport] SI-5293 delete flaky collection performance tests
Avoid temp arrays during Block construction
Optimize visitDescriptor
Optimize ScalaSigBytes.fitsInOneString
Include the parts of a compound/refinement type in implicit scope.
Don't stripmargin source text
Optimizer: avoid inlining of accidental SAM types
Fine tune multiple filters and maps
Use delegation over inheritance to implement mutable.HashSet.
Implement get method of mutable sets
Use Arrays.copyOf instead of manually copying arrays
Simplify GrowableBuilder
Implement mutable.TreeSet
Dotty friendliness
Implement mutable.HashSet and mutable.BitSet Move concat method to immutable collections only Introduce factory delegation classes Add all the variants of mkString
enable dotty tests on CI
Upgrade to the latest version of the dotty sbt-plugin
Optimize typedArgsForFormals
Optimize Iterator.combinations
Add a unit test for Seq.combinations
Add Java8 benchmarks (boxed and primitive versions)
Improve benchmarks
Don't let IndexedView inherit from Seq
Add missing imports
Reword trailing commas explanation
Compute also isScala211 only once
Optimize dealiasWiden
Optimize implicit search for extension methods
New section name, newline & less definitions
Harmonization of from... methods
Move fromSpecificIterable to the leaves
Drop unused import
Sweeping changes with the aim to simplify
Short circuit type comparisons of type refs when eta-expansion is futile
Rework changes to specializedSym
Enable -howtorun:repl -i -e
Optimize erasure typer by avoiding tree hashcode
Use delegation over inheritance, in order to simply the inheritance graph. Don’t lie about parametricity.
Optimize overriding pair cursor by caching the low member type
bundle newer scala-parser-combinators (1.0.5->1.0.6)
Avoid needless baseTypeIndex call in superaccessors
-Xlint:unused -Ywarn-unused is intuitive
fix spec. there is a Function22
README: note about potential SBT plugin dependency issues
Explicit return type on Option.toRight/toLeft
development doc updates
More compact base type sequence lookup array
Rework baseTypeIndex to use linear, rather than binary search
Disable memberType cache in runtime reflection
Revert "Don't cache `MethodSymbol`'s `memberType`."
Minor refactor in elimSuper pattern match
Minor refactor of TypeRef.computeHashCode
Avoid repeating call to Symbol#typeParams in hot code
Avoid List.apply in favor of ::
Add a fast path to TreeGen to speedup synthesis of casts
Optimize TypeRef#equals
Optimize TypeRef#computeHashCode
Avoid calling member type in futile matchingSymbolInternal check
Optimize boundSyms by avoiding needless call to typeOfThis
Opt specializedSym, special case for WildCardType
Make Symbol.allOverridenSymbols tail recursive
Optimize type comparison around AnnotatedTypes
Optimize copyTypeRef to avoid hash consing in some cases
Avoid BoxesRuntime.equals in Type.unique
Optimize symbol substitution
Disable test line that does not compile under dotty
Update ticket references and bugtracker URL [ci: last-only] (#5859)
Update error message for t5717
Undo changes in TraverseTest
Get rid of constrained with Ev.
Add ArrayView benchmarks (and baseline)
Use 2.13 binary version for scalacheck
Remove dead code catch in LambdaDeserializer
Disable cross testing on CI
Bump version numbers after 2.13.0-M1
Remove useless setting
Improve serializability of lambdas that call methods in module
upgrade to partest 1.1.1
bump version to 2.12.3
Version bump on 2.11.11 release
make withoutReporting eligible for inlining
completeSilentlyAndCheckErroneous uses less memory
minor BTypes optimisations
Support cross building for both Scala 2.12 and Dotty
Review feedback: resurrect assertion, use LabelDefFinder.apply
Make Ordering.by create a new Ordering for performance
SI-8935 intp.valueOfTerm works with any template
No-op merge 2.11.x into 2.12.x
No-op merge 2.11.x into 2.12.x
SessionTest uses check file
Add BitSet implementation
Pick up latest nightly
Use partest 1.1.1
Add import
Actually retract clashing synthetic apply/unapply [backport]
Drop unused type parameter
Type annotation for ListBuffer
Add implicit value explicitly
Add uncheckedVariance annotation.
Get rid of early initializer
Make things compilable under dotty
Replace pattern matching with closure
Add support to compile with dotty
Actually retract clashing synthetic apply/unapply
#46 Provide alphanumeric methods with descriptive names as alternatives to symbolic operators
Remove BitOperations.
Revert some of ade53a123. Use completer factory methods.
Prefer library string manipulation to local reimplementation
upgrade to sbt 0.13.15
MathJax CDN change and version bump
Update README.md
Bump on 2.11.10 release
Stricter type parameters of HashEntry
Deal with undefined offset (#10255)
SI-2458 Make spec example live test
Revert "Optimize slice and take in ArrayOps, WrappedArray"
Revert "Optimised implementation of List.filter/filterNot"
Revert "Handle WrappedArray the same way as ArrayOps for binary compatibility"
Bye bye JIRA
Bye bye JIRA
Update README.md
Bye bye JIRA
t5717: test message, not just absence of compiler crash
Avoid `sys.process`
Avoid `sys.exit`
Avoid `sys.error`
Avoid `sys.props`
Avoid using code that will move to modules
Replace mkSysErrorCall by mkThrowNewRuntimeException
SD-363 Xlint no warn deprecated params, defaults
Boy scout mkTypeCompleter
Use CompleterWrapper for implicitFactoryMethodCompleter
Clean up copyMethodCompleter, capture less
Refactor to reduce assignSymbol indirection
Create scope only once
`CompleterWrapper` delegates `typeParams`.
SD-358 REPL power template more lint friendly
SI-8040 Defer deprecation of -Ywarn-unused-imports
SI-8040 Retreat on params
Improvements based on reviews by Lukas & Jason
Clarify spec of interaction of existing vs synthetic apply/unapply
Allow user-defined `[un]apply` in case companion
`CompleterWrapper` delegates `typeParams`.
Implement HashMap. Factor out common code of HashMap and HashSet into a Hashing trait. Implement ListMap. Implement TreeMap. Introduce ImmutableBuilder, ImmutableSetBuilder and ImmutableMapBuilder. Introduce MapValuePolyTransforms (operations that transform only the type of values of a Map).
Avoid excessive IO in classfile parser
Revert "Optimize slice and take in ArrayOps, WrappedArray"
Revert "Optimised implementation of List.filter/filterNot"
Revert "Handle WrappedArray the same way as ArrayOps for binary compatibility"
Make ImplicitInfo hashCode consistent with equals.
Optimize method descriptor creation
Remove expensive assertion in the backend
Cache ClassSymbol.javaBinaryNameString
Use AnyRefMap in labelReferences
Avoid excessive file stats during classfile writing
Optimize label defs finder in the backend
Implement TreeSet. Add `empty` method on collection.Set. Add `firstKey` and `lastKey` methods on collection.Sorted. Optimize HashSet.fromIterable in the case of a copy from a HashSet. Remove default implementation of `empty` method of XxxFactory because otherwise we would always want to override it…
Disable empty collections in benchmarks because charts generation fails
Override foreach, size, head and tail methods of HashSet for performance
Comment out unused parts of the benchmark
Optimize concat: inline foldLeft and remove if. Optimize last. Optimize splitAt: rely on take and drop rather than creating a view.
Optimize specializedTypeVars
Only do specialation definalization once per run
Optimize SpecializeTypes#satisfiable
Avoid needless work in the specialization info transform in the backend
Better diagnostic for failing jvm/future-spec
Improving ScalaDoc for ExecutionContext and Await.
Move build instructions into a CONTRIBUTING.md file
Bump versions on 2.11.9 release
Make Iterator.foldLeft final so that it can be optimized
Set scala.binary.version to 2.12 until 2.13.0-M1 is out
API to find random number in a range
Factor out common implementations of Set’s ++
make UnPickler advise you of missing scala-parallel-collections.jar
unbundle scala-library-all, scala-swing, scala-parser-combinators
Change the signature of WrappedArray.newBuilder[T] to return Builder[T, WrappedArray[T]]
Add HashSet benchmarks
Implement HashSet Add ListSet Add ImmutableSetBuilder and ReusableBuilder Add operations forall, last, sum, splitAt
Implement ListBuffer.isEmpty / nonEmpty efficiently
SI-10225 Either docs have more words and code
Describe trailing commas more closely to the impl
Disable stub warning by default.
Improve stub error messages (SCP-009 proposal)
Improve stub error messages (SCP-009 proposal)
`def run(log: ProcessLogger, connectInput: Boolean): Process` doesn't block until the spawned process exits neither does it return its exit code.
SI-10240 Additional scouting
Address review comments and make BitSet work with BuildFrom
Use the correct Context.
Improve List creation in BatchingExecutor
Remove unused 2.8.0 Scala version val
SI-10225 Either evinces good style
Drop trailing comma changelog entry
remove test/pending directory too
Respell elidable checking function and make more similar to namesake
rm -r test/{flaky,disabled*,checker-tests,support,debug}
remove orphaned checkfiles
remove two empty source files
fix typos
unset a stray execute bit
remove/privatize deprecated stuff from collection.concurrent.TrieMap
SI-10240 Better pos for infix type arg
Eliminate non-matching overloads early for partial function literals
Make source collection responsible for building
SI-10231 Skip outer parameter when classfile parsing java param names
Moved `Ev` from a generic type parameter to a member type in CIPT.
Add strict version of Build, unify Build & CanBuild
Remove FromIterable upper bound, add BuildConstrained
update stale comment
English. Do you speak it?
Use a single repository in the bootstrap job
Drop reference to the SIP
Remove parallel collections from scala-library
Correct brackets vs braces..
Rewire package to osgiBundle for OSGi-enabled projects
SI-10225 Either docs compile
SI-10226 REPL handles paste when colorized
Update the spec for trailing commas (SIP-27)
cleanups and clarifications in versions.properties
Adds three Java 8 new Constant Pool structures to scalap.
Make TraversableOnce.MonadOps a value class
SI-8040 No warn DummyImplicit
SI-8040 Xlint enables unused warnings
SI-8040 No warn args to super, main args
SI-8040 Avoid Null companion
SI-7860 No warn private implicit value class
SI-8040 Warn patvars in casedefs
SI-9839 Avoid crash in macro import selector pos
SI-8040 Warn unused parameters
SI-8040 Warn unused flags
SI-9158 No warn for comprehension patvars
SI-8040 Heeding -Ywarn-unused
SI-8040 Warn unused pattern vars
SI-8040 Improve unused warnings
Add tests for ConsoleReporter.
SI-6714 Preserve implicit args in update assign
SI-5621 Missing implicits are supplied by defaults
SI-6714 Update assignment preserves apply args
SI-9380 Remove Regex.unapplySeq(Any)
SI-8969 Accept poly+implicit for assignment syntax
Don't use `equals` for comparing java.lang.Double/Float
Adapt README to new version numbers
[backport] new repo, version numbers for integration builds
Abstractions for constrained collection types
new version numbers for snapshot and integration builds, new repository
Reduce boxing of scala.reflect.internal.Depth
Performance improvements for Map4 to HashMap nad Set4 to HashSet transitions
Add benchmarks for Map4 to HashMap and Set4 to HashSet transitions
pattern for entitylink was too narrow, cleaned up the tests
Make ClassBType components lazy, prevent forcing symbols unnecessarily
Remove non-essential fix for stub symbol failure
SI-10187 Support mutation of mutable.HashMap in getOrElseUpdate
Test case for SI-10206
bump copyright year to 2017
Improvements based on reviews by Lukas & Jason
make Predef.*CharSequence implicits public again
Split up cache for ClassBTypes in two, according to origin
Clarify spec of interaction of existing vs synthetic apply/unapply
Get commit SHA and date with JGit
fix markup
Allow user-defined `[un]apply` in case companion
Set version to 0.2.0-SNAPSHOT
Update readme with release informations
Sketch mutable and immutable BitSets
Consistent naming
Simplify implementation of builder factories
SI-10207 Error before update conversion
Add partest paths to the list of watched sources.
added missing Inline matches to inlineToStr so it is now exhaustive scala.xml.XML.loadString(tag).text will remove all html tags inside the HtmlTag
Bump up sbt-jmh to 0.2.21
Remove unnecessary methods in TraversableOnce
Make the different kinds of collection companions consistent together. Define an implicit CanBuild that can be used by end-users to retrieve a factory for a given collection type.
SI-10206 tighten fix for SI-6889
don't use Console.setOut: was deprecated, now deleted
increase timeouts on some sys.process tests
More predictable performance of SBT build startup, reload
GH-644: Remove static html styling of spec code blocks
Naming consistency
Reorganize imports
Add TreeMap
Add immutable Map base class
Maps
Make SetMonoTransforms extend IterableMonoTransforms
Overloading based implementation of Set and SortedSet
SI-9632 don't keep JarFile open in ZipArchive
moved Pattern and TagsNotToClose to a HtmlTag companion object
Revert "SI-10133 Require escaped single quote char lit"
SD-256 enable colored output by default on unix
SI-10102 REPL ignores sbt init errors
SI-8417 Check adapts of each param section
Ignore BoundedWildcardType in erasure type map
Remove the error recovery mechanism in RedBlackTree.TreeIterator.
Avoid forcing info transforms of primitive methods
Avoid stub symbol related crash in backend
Refactor implementation of lookupCompanion
SI-10148 Accept verbose zero
Optimized HashTable.nextPositivePowerOfTwo
SI-10178 Route reporter.echo to stdout
Ensure ordering for args to `choose` in DurationTest
fix recent regression: macro paradise + Java sources = MatchError
GH-644: Expand note regarding Jekyll versions
Faster and simpler Java 9 classpath implementation
update MiMa whitelist for infix annotation
Workaround bug in Scala runtime reflection on JDK 9
Avoid ambiguous overload on JDK 9
Adapt to change in ClassLoader in JDK 9
Bump scala-asm version
SI-10190 Elide string to empty instead of null
update Ant version info in readme
More reusable path for windows job
Update build to publish snapshots
Create charts for memory benchmarks too
Reduce scope of val and improve some names
fix annoying extra space in tab completion of sbt `partest` command
upgrade to MiMa 0.1.14
SI-10164 BitSet.tail zigs where it zagged
during bootstrap, don't build scala-parser-combinators or -swing
fix IndexedSeqTest to work in both Ant and sbt
EOL is System.lineSeparator
Changing deprecation warning to lineStream
Delete some unused scripts
Move sameElements to Iterator
fixed broken references after move from 'model' to 'base'
SI-10177 Override lazy operations to preserve TrieMap's semantics
Correct the AbstractVar error message
remove deprecated stuff from Predef, scala._, scala.runtime
run partest from sbt always, command line never
SI-9780 use @see annotations
SI-9780 qualify the reference links so they can be found and use @see annotations
SI-9704 don't add a closed HtmlTag if it is already closed
Bump Swing version for 2.0.0 release (#5678)
update and improve description of deprecation policy
Match error lengths
Nuance doc for sliding
SI-10173 Crash output shows true line number
SI-9519 removed the usecase section of the ++-method
Optimizations in immutable.Map.{get, contains}
Benchmark for immutable.HashMap.{get, contains}
Handle WrappedArray the same way as ArrayOps for binary compatibility
SI-9507 Make Stream #:: and #::: allow type widening
Make partest --grep glob paths, not just filenames
Finish resolving conflicts from rebasing commits within #5661
Add warning about non-sensible equals in anonymous functions
SI-9729 -Xmaxerrs to limit messages
SI-10030 - added quotes in case the path contains a space and an 8.3-compliant path is not available
Remove StableIterable
SI-8662 Repl completions
Add benchmark for List.mapConserve
Optimised implementation of List.filter/filterNot
Optimize slice and take in ArrayOps, WrappedArray
Test IndexedSeq, including ArrayOps, WrappedArray.
Avoid creating ListBuffer in List.mapConserve
Update IntelliJ template configuration
Move scalacheck test suite sources to folders corresponding packaging
Move Scaladoc's Partest base classes to partest-extras
run ScalaCheck tests directly, not through partest
adjust to partest 1.1.0's new mixed Java/Scala compilation
Show error bars
Produce charts from benchmark report
SI-1459 two bridges for impl of java generic vararg method
SI-9013 SI-1459 Tests for inherited @varargs annotations
SI-9464 Clarify spec on no final trait
Add universal equals to Set collections
Add universal equality
Add micro-benchmarks
Address reviewers comments
Improve Queue.++ when building another Queue
SI-10120 ReplReporter handles message indent
SI-10148 Follow Java for float literals
SI-10130 Ignore extra parse warnings
SI-8685 Warn on deprecated case ctor
Add base traits of collection hierarchy
Improve performance of Symbol marking
Calculate MB instead of MiB
First version to add mutable collections
SI-10137 Correct Queue.enqueue(collection.Iterable)
SI-10113 mutable.TreeMap.range does not work added missing overrides for TreeMapView
[backport] SI-6412 remove flaky test
Revert "Repl prints '\n' as newline, not "^J""
Upgrade to jline2 2.14.3
SI-9762 Remove workaround after upstream fix in jline
SI-9762 Update to JLine 2.14.3
Simplify creation of varargs forwarder symbol
Don’t run the uncurry info transformer on Java symbols.
SI-10071 Separate compilation for varargs methods
SI-8786 fix generic signature for @varargs forwarder methods
support --show-log for partest command
SIP-27 Tweak and test wildstar in REPL
SIP-27 Test varargs, "@", and ": _*"
SI-10120 Extra advice on unclosed char literal
SI-10133 Require escaped single quote char lit
Simplify HashTable.index further
Changed HashMap.getOrElseUpdate to only calculate the index once
Changed hashing bit rotation to use Integer.rotateRight
Changed modulo to bitwise AND in hash calculation
Optimized HashTable.index
SI-8774 Null link fields in mutable hash maps on removal.
Restarr on 2.11.8-18269ea
fix doc for walkfilter and walk
Update to scala-parser-combinators v1.0.5
Improved error messages for identically named, differently prefixed types
SI-9936 LinearSeqOptimized.indexWhere
[Backport] Modify ArrayBuilder and WrappedArrayBuilder to be reusable
More robust outer test for patmat
Small cleanups to pattern matcher
Override equals and hashCode for WrappedArray
SI-9636 More precise error pos on apply inference
Split code to several files. Introduce strawman.collection.mutable and strawman.collection.immutable packages. Seq is still in strawman.collection package because it is implemented by both mutable (e.g. ArrayBuffer) and immutable (e.g. List) concrete collections.
Make it clearer that the `iterator` method will return a fresh new Iterator at each call.
Use ClassTag instead of Manifest in AssertUtil.assertThrows.
use latest Scala & sbt versions
add a basic Travis build
add readme with links
SI-10097 Adapt unless -Xsource:2.13
SI-8704 Also warn if effectively multiple implicit
SI-8704 Error on bad implicit sections
SI-10097 Error if no non-implicit case class param
SI-4700 Make infix notation default for symbolic types.
SI-10068 Only permit elidable methods
SI-4700 Show infix types with as few parentheses as needed.
Modules w. serializable type alias "companions" are not serializable
Make SearchImpl a value class to improve performance
SI-9813: Complete addition of Java 1.6 and 1.8 java.lang.Math methods
 * restructure to groups new functions in scala.math package
New keypair for 2.13 spec forced command
SI-10086 NumericRange.min|max with custom Integral (#5575)
Compiler support for JEP-193 VarHandle polymorphic signatures
Support extra module references in the REPL
Update spec build to Jekyll 3.3
remove unnecessary ClassTag in Sorting.stableSort
SI-4986 SIP-27 Trailing Comma (multi-line only) support
2.12 -> 2.13 in the most important places
Upgrade MiMa to 0.1.13
SI-10072 cast Function nodes to environment in specialization
Changed hashing bit rotation to use Integer.rotateRight
add project/build.properties for benchmark project
Applied further cleanup to Vector
Changed >> to >>> in Vector to unify style
Applied suggestions to Vector cleanup
Deleted leftover code-comments from Vector
Deleted leftover debug method from Vector
Unified masks in Vector
Removed redundant casts from Vector
in spec generation, 2.12 -> 2.13 so we don't collide
SI-10093 don't move member traits to constructor body in constructors
bump version (now 2.12.2) + and STARR (now 2.12.1)
Drop annotations from trait static super accessor
SI-10075 annotations go to lazy val's underlying field
disable MiMa for now for 2.13
fix eBNF error by removing wrong closing brace
Revert existential infer part of #5376
Support Java 9 modular runtime images
Adapt to the removal of sun.boot.class.path
upgrade MiMa to 0.1.12
delete dead code
remove deprecated compiler flag "-Yinfer-by-name"
remove deprecated compiler flag "-Yeta-expand-keeps-star"
Revert temporary duplication of HashMap internals
Update to mathjax 2.6-latest [2.12.x backport]
Don't exclude super calls to trait methods from inlining
SD-275 Remove obsolete code from the unpickler
Refactor companion lookup methods after code review
SD-275 Further harden against refs to absentee classes
SI-8502 Rework handling of stub symbols in unpickler
Use https links to JS and CSS in the spec when serving from https
Clean up the implementation and output of Yopt-log-inline
Typevar experimentals now default; t5729 pos -> neg.
Address review feedback
Pattern matching virtualization now guarded by -Yvirtpatmat.
Partial fix for SI-7046
Support inlining under -Yrepl-class-based REPL
SI-8779 Enable inlining of code within a REPL session
SI-10009 Fields survive untypecheck/retypecheck
SI-9834 Show expansion of update on error
SI-9834 Improve error on failed op=
Better inliner support for 2.12 trait encoding
Simplify creation of varargs forwarder symbol
Don’t run the uncurry info transformer on Java symbols.
SI-10071 Separate compilation for varargs methods
little documentation fix
Optimized HashTable.index
Changed modulo to bitwise AND in hash calculation
Improve performance of REPL autocompletion
Whitelist the remaining changes since 2.12.0 that break all builds
Changed HashMap.getOrElseUpdate to only calculate the index once
Added benchmarks for Vector and HashMap
Updated benchmark dependencies
SI-10067 Don't speculatively emit outer tests for inner Java classes
SI-10067 Java defined inner classes don't have outer accessors
SI-10007 sys.process thread sync
Add language to code blocks in spec (#5502)
SI-9945 Don't warn imports in java units
SI-10059 reset the `DEFERRED` flag for Java varargs forwarders
Workaround a bug that rendered MiMa inoperative
Revert "SI-9750 isJavaAtLeast(Int)"
Restore binary compatiblity with 2.12.0
Avoid double-compiling junit sources
SI-9557 Backquoted id spec
String.replaceAllLiterally is String.replace
SI-8433 SI-9689 Progressive tests
Typo and spelling corrections
[nomerge] SI-10037 ASR/LSR switched in ICodeReader
Define the root sbt project's scalaVersion
Don’t include scala-asm.jar in scala-compiler.jar
Manually inlined all other instances of Platform.arraycopy to System.arraycopy to avoid the same kind of slowdowns that Vector was experiencing due to the less aggressive inlining by scalac.
Improved runtime speed for Vector, restoring previous performance.
remove old, now-unused MANIFEST.MF file
sbt build: omit `: _*` when calling `.settings`
improve top-level compiler/reflect doc text
Add “test”, “scaladoc” and “repl” projects to scala-compiler docs
don't mass-delete old nightlies at release time
Regression: Make Future.failed(e).failed turn into a success instead of failure
Avoid name table pollution with fresh existentials
Don’t rely on deprecated ScalaInstance methods
Silence SBT logging about macros and incremental compilation.
Added U+hhhh values for quote characters to clarify.
Avoid 2 more deprecated sbt 0.12 operators
avoid deprecated sbt 0.12 operators
fix starr version in README.md
Add regression tests for SI-10027
neg test for parsing constants in Java sources
Support implicit converstions from java literals
Revert "Temporarily insource Scalacheck 1.11.6"
Use 2.12.0 for STARR
Bump baseVersion to 2.12.1 (#5389)
SI-6734 Comment
doc: fix README link
doc: minor grammatical fix
move to latest Akka 2.3.x release
upgrade to sbt 0.13.13
SI-3236 constant types for literal final static java fields
Address review comments
For scala classfiles, only parse the scala signature annotation
avoid boxing
SI-6734 Synthesize companion near case class
SI-7139 test case, fixed by one of the recent commits
Minor style cleanups, no changes in logic
Robustly identify unpickling the current module class
Classfile parser and unpickler require class and module symbol arguments
Clean up cross-check in classfile parser, remove unnecessary assignment
Clean up lookup class by name in the classfile parser
Don't follow type aliases in getClassByName and friends
Ensure companionClass returns a class, not a type alias
SI-6412 remove flaky test
[backport] Replace println with log calls in BrowsingLoaders
assorted typo fixes, cleanup, updating of comments
re-enable (or simplify) various tests now that STARR is bumped
SI-9516 remove now-unneeded code
SI-9909: corrected stream example so it does not give forward reference error
SI-9915 Utf8_info are modified UTF8
Bump to 2.12.0-RC2 starr and modules
Factor out some more into ScaladocScanner
dogfood the new MiMa
DocScanner has doc-comment scanning hooks.
Keep `skipBlockComment` tail recursive
Replace println with log calls in BrowsingLoaders
Duplicate license in /LICENSE for GitHub
[backport] Bump sbt.version to 0.13.12, without breaking
Avoid use of legacy JVM MaxPermSize option in partest
SI-6978 No linting of Java parens
Drop repo_ref from jenkins.properties
Make stability test optional.
Make sbtBuildTask configurable in bootstrap
Restarr to fix InterfaceMethodRef after closure inlining
Detect clash of mixedin val and existing member.
SI-9832 -Xlint:help shows default
Replace deprecated conforms
Repl prints '\n' as newline, not "^J"
SI-9953 Any Any aborts warn on equals
SI-9946 don't null field in lazy accessors that turn out to be live
SI-9946 make nullification of lazy val dependencies module aware
Avoid tripping cyclic errors under -Ytyper-debug
SI-5293 delete flaky collection performance tests
SI-9943 final/sealed class does not yield SAM type
Change `...' to ‘...’ (Unicode quotes) in ENBF (per intent per README.md).
SI-9888. Prevent OOM on ParRange. Improve toString.
SI-9944 Scan after interp expr keeps CR
Test cases for super calls
Default -Xmixin-force-forwarders to true
Explicit SerialVersionUID for all ClassTags / Manifests
Don't clip descrip when -Ydebug
Shorten fields phase description
re-enable two tests (starr is up to date now)
Error message for super calls to indirect java parent interfaces
Update keypair used to rsync spec to chara
capitalize GitHub correctly
bump version number in spec from 2.11 to 2.12
make the 2.12 spec available on scala-lang.org
Add support for -Dpartest.scalac_opts to the partest command
Clarify docs, variable name
Emit local module like lazy val
Enable MiMa for 2.12.0
Bump sbt-jmh version to 0.2.16
don't deprecate Either.left and Either.right yet
use proper lightbend.com and scala-sbt.org URLs
Make some name suffixes constants
SI-4683 fix $outer accesses in class bodies extending DelayedInit
Including Lightbend in `-version` message.
Refactor into a standard scala.collection-like package
Restarr to JITtablity of generated synchronized blocks
SI-9920 Avoid linkage errors with captured local objects + self types
Make isSeparateCompiled... robust against rogue phase time travel
Cast more pro-actively in synthetic accessor trees.
Avoid mismatched symbols in fields phase
SD-233 synchronized blocks are JIT-friendly again
SI-9936 SeqLike.indexWhere starts at zero
expunge a stray reference to sbaz in the Scala man page
Optimize javaBinaryName callers
Turn IndexedView into a trait to avoid reflective access
Move out of object, into a standard class hierarchy
Start with Martin’s strawman 6 from Dotty
Do not build partest-javaagent and partest-extras for `pack`
Bump sbt.version to 0.13.12, without breaking
Make output of errors in testAll less verbose
SD-226 Be lazier in Fields info transform for better performance
SD-220 building without being in a git repository
upgrade to scala-xml 1.0.6
SI-4700 Add `@infix` annotation for type printing
Restarr on PR 5398, lzycompute performance fix
In ProcessBuilder docs, replace .lines w/ .lineStream
Rewrite TraversableLike.stringPrefix not to blow up code size in Scala.js.
Only compare group ID and artifact ID when looking for JLine JAR
SD-225 Use a "lzycompute" method for module initialization
Avoid omitting constant typed vals in constructors
No warn when discarding r.f(): r.type
SI-9918 object in trait mixed into package object
remove outdated ENSIME info
SI-9913 Tighten bolts on span iterator
bump STARR to 2.12.0-RC1
Store buildcharacter.properties in scala-compiler.jar
SI-9913 Lead span iterator finishes at state -1
SD-143 allow super calls to methods defined in indirect super classes
Spec typo: hide source comment in rendered version
remove various references to Ant build
Remove the ant build
More elegant holders for local lazy vals.
Add a -Xmixin-force-forwarders ChoiceSetting
Allow per-choice help in ChoiceSetting
Allow all settings to be helping
Emit mixin forwarders for JUnit-annotated trait methods by default
SD-143 error for super calls that cannot be implemented correctly
SD-210 don't generate invalid forwarders under -Xgen-mixin-forwarders
Disable stack hungry test of deprecated PagedSeq
Lazy val without local.
Cleanups after integrating lazyvals into fields.
SD-208 Restore 2.11 names for arrayOps implicits
Disable stack hungry test of deprecated PagedSeq
Use STARR library for ManMaker
Workaround sbt bug when partest itself throws
SI-9906: override ListBuffer.last/lastOption to run in O(1) time
sbt build: fix "unchecked" warnings when compiling Java code
Specialize erasure of `synchronized` primitive method
SI-9823 Collections perf: favor virtual call over instanceof
Ensure trait var accessor type is widened
SI-6967 Primitive ClassTag.unapply is removed
Decrease stack size for JUnit tests to 1M (same as the old ant build)
Local lazy vals: avoid boxing and mutable capture
Double-checked locking for local lazy vals.
Double-checked locking for modules.
Ensure access from subclass to trait lazy val
Move AccessorSynthesis out to its own file
Fields does bitmaps & synch for lazy vals & modules
Precompute bitmap info for lazy/init-checked vals
[refactor] strictly reorder definitions
[refactor] corral init bits some more
[refactor] corral checkinit logic
[refactor] lazy val expansion in mixins/lazyvals
optimize/simplify erasure of class info type
SI-8873 don't propagate primary ctor arg to case class's apply
Fields phase expands lazy vals like modules
asmutils
git ignore local.sbt
clean up genprod, get rid of warning  (#5361)
Address review feedback: comments, renames and extra test
supply missing execute bit on bootstrap script
increase stack size when running JUnit tests
SAM for subtypes of FunctionN
SI-9841 Regression test for init SO
Improve RefinementTypeRef#normalize
Minor changes after review
Address review comments
Unit test for recent bug fix in LUBs
Tone abort down to a dev warning
SI-5294 Use bounds of abstract prefix in asSeenFrom
Improved refinement type and existential type handling
Switch remaining uses of ant over to sbt
Editorial:  Italicized more defining occurrences of terms.
Type#contains should peer into RefinementTypeRef-s
Determistically enter classes from directory into package scope
SI-8079 Only expand local aliases during variance checks
SD-194 Tweak module initialization to comply with JVM spec
SI-9841 Progression test for SO on init
Partial fix for SI-7046
SI-2712 Add support for higher order unification
SD-192 Change scheme for trait super accessors
Javadoc: make parsing of java comments optional
Javadoc: fix problems in community build
Javadoc: java static name resolution
SD-128 fix override checks for default methods
SI-9885 Don't return offset past EOF
Propagate overloaded function type to expected arg type
Split “partest run” off from “partest pos neg jvm”
SI-7838 Document the multi-threading semantics of List and Vector
SI-9019  TraversableLike stringPrefix broken for inner classes
SI-8576 Minimal changes for `-Xcheckinit` compatibility
SI-8434 Make generic Set operations build the same kind of Set
Remove doc-version was too long warning
SI-8339 drop deprecated fallback `withFilter` -> `filter`
Review feedback from Jason & Lukas
Make fewer trait methods not-{private, protected}
Drive accessor synthesis from info transformer
Admit @volatile on accessor in trait
Mixed in getter needs NullaryMethodType too
Allow 'overriding' deferred var
Align double definition check with spec
LambdaLift emits paramaccessor syms and defdefs
Simplify erasure + mixin
Reduce flag fiddling
Address lrytz's review feedback
Uncurry's info transform: non-static module --> method
Don't cache `MethodSymbol`'s `memberType`.
Fields phase synthesizes modules
Test EnclosingMethod attribute for classes in lazy vals
Fields phase
Improve log output of the `testAll` task
SI-8786 fix generic signature for @varargs forwarder methods
SI-7187 deprecate eta-expansion of zero-arg method values
Cleanups after code review
SI-9068 Deprecate scala.collection.mutable.Stack
Do not add `@TraitSetter` -- not sure what it's for
SD-193 Lock down lambda deserialization
Typo fix in scala.sys.process.ProcessBuilder.
Deprecate values that had to be public in older versions...
Reduce deprecations and warnings
SI-9750 Remove isJavaAtLeast from util.StackTracing
Make sure sbt's exit code is seen as script exit code
SD-167 Fine tuning constructor pattern translation
Added tests for SI-482/SI-4914
Improve sbt-based IntelliJ integration in case of Windows
SD-121 Remove now-unneeded J{Function,Proc}N functional interfaces
SI-9560 Remove dependency on parser-combinators/json
SD-120 Non FunctionN lambdas should not be universally serializable
Disable stub warning by default.
SI-8774 Null link fields in mutable hash maps on removal.
SI-9750 Spec check major.minor.security
Switch Windows CI build to sbt (w/ some sbt build improvements)
Upgrade asm to 5.1
Minor cleanups in GenBCode
Deprecate scala.remote
SD-48 limit the lenght of inlined local variable names
SD-20 Inlcude static methods in the InlineInfo in mixed compilation
SI-9827 MatchIterator advances itself
SI-9750 isJavaAtLeast(Int)
SI-9750 Tweak tests for what is a number
SI-9691 BufferedIterator should expose a headOption
Improve Scaladoc for Either: - remove text on projections - add for comprehensions
Switch the bootstrap build over to sbt
SD-182 compiler option -Xgen-mixin-forwarders
Retain javadoc comments in scaladoc
Deprecated and rename Some#x to Some#value
Deprecate and rename Left#a/Right#b to Left#value/Right#value
SD-183 Make refinement classes ineligible as SAMs
SI-9750 scala.util.Properties.isJavaAtLeast works with JDK9
SI-9849 set privateWithin on default getters
Remove redundant 'the' in IntelliJ's README.md
SI-8829 Let reporter customize retry message
SI-8829 Defaultly scala -feature -deprecation
SI-9847 Nuance pure expr statement warning
SI-7301 Make tuple classes final
SI-6881 Detect reference equality when comparing streams
SI-6947 Better type parameter names for Map classes
SI-8561 named subclasses for known Manifest / ClassTag instances
Group math package functions
SI-9515 closure elimination also for non-Scala-Function SAM types
Bump STARR to 2.12.0-M5.
Use 2.12.0-M4-9901daf as STARR (see #5152)
Bootstrap skips scalacheck build step / partest dep
Emit trait method bodies in statics
Revert pruning of redundant Java parents
Don't minimize parents of java defined syms.
Remove stray .class file from version control
Better diagnostic for optimizer crashes
Remove nonsensical body for trait getter
Override `.slice` in ArrayOps to use arraycopy.
Temporarily insource Scalacheck 1.11.6
SI-9336 Enable paste detect in jline
doc: capitalize only works on BMP characters
Make removing forkjoin dependant on the organization key
SI-9817 forall and exists
Avoid triple-quoting triple quotes
Constant print control in unicode
Refactor triple quote quoting
Avoid triple-quoting triple quotes
Remove bnd warnings from log output
Use sbt for PR validation
If Range is sealed, it makes sense to have Range.Inclusive final.
Typo fix
SI-9245 Fresher name in Try and test
SI-9585 hide auto-implicit conversions from scaladoc
Remove TopLevelCreationFlags
Keep line numbers when inlining from the same compilation unit
SI-9256 check companions in same compilation unit only if same run
clear all flags when resetting a symbol
Store source file paths of classes being compiled in the bytecode repo
Avoid separate traversal in inliner to remove line number nodes
SI-7898 Preserve reader against subversion
Remove experimental status from sbt build in load message
SI-9737 [no-merge] Backport stringOf ParIterable
Prohibit @native method in trait
SI-9390 Avoid needless outer capture with local classes
SI-9104 Autodetect raw pastage
scala version in benchmark project
Drop local suffix in lambda impl method name
Compute constrParamAccessors once. It's expensive
opt: fuse some operations on `Scope`s
SI-9390 Emit local defs that don't capture this as static
Treat self parameter as non-null in the optimizer
Lambda impl methods static and more stably named
SI-9767 document and test behaviour of String->integer/float conversions
Relax the semantics of `Range.lastElement` for internal use.
Privatize the deprecated members of `immutable.Range`.
Avoid tree sharing with substituteThis
Don't pass -opt to starr / locker build in the bootstrap script
Add documentation to @deprecated
Add since arg to deprecationWarning and use it
Lower-case spelling of @deprecated messages
SI-9084 Add `since` (if available) to deprecation warnings
SI-9483 Add `since` to  `@deprecatedName`
Right-bias Either
SI-9794 Error advice uses decoded method name
SI-9789 use quadratic probing in OpenHashMap
SI-9382 Zippy clean-up in aisle 2 & 3
Fully qualify types in REPL generated code
SI-9382 Privatize enhanced x in Tuple2Zipped.Ops
Rename -Yopt to -opt, -Yopt-warnings to -opt-warnings
Use full braces style in AnsiColor example
Debug flag to print a summary of the inliner's work
SI-9522 release key reference when deleting from OpenHashMap
SI-7898 Label for parsing -i sources
-Xexperimental mode now only includes -Ypartial-unification
SI-2712 Add support for higher order unification
SI-7898 Report paste errors improvedly
Group Console and AnsiColor entities and add usage examples
SI-9688 Make merge in immutable HashMap1 work with null kv.
SI-9121 test case (fixed in new optimizer), SI-9179 test case
SI-7898 Quiet REPL at startup
Jarlist scala-library in build.sbt
Use jarlister in build
SI-9766 - allow ++ on empty ConcatIterator
SI-7898 Read user input during REPL warmup
SI-8044 Allow any id in explicit pattern binding
SI-8044 Test for quoted not-a-varid
SI-8044 Allow binding backquoted varid in patterns
Adapt naming convention for collection.convert null safety test
All JUnit tests pass without bootstrap (when run in intellij, sbt)
Split RunTest and BytecodeTest into parts, put in matching packages.
Cleanup in BytecodeTest
Small cleanup in JUnit test
Clean up bytecode testing methods.
Better abstraction for JUnit run tests
Better abstraction for bytecode tests. Also organize some imports.
Rename nsc.backend.jvm.CodeGenTools to testing.BytecodeTesting
Improvements to scala.concurrent.Future
SI-9781 Don't convert erroneous expression to assignment
Include missing web assets in scaladoc
SI-7916: ScriptEngine support
SI-9656 Range.toString distinguishes Numeric step
[backport] identical readme in 2.11.x as in 2.12.x
Test case for SI-5183, tagged primitives in case classes (#5144)
Generate static forwarders for object members in companion interface (#5131)
SI-9066 fix null.asInstanceOf[Unit]
SI-9671, SI-7397 fix null.asInstanceOf[Int] when pt erases to Object
SI-8756 Test to demonstrate the status quo
improve README (#5163)
SI-4625 Warn on first non-toplevel only
SI-5463 Check .jars before using them
Remove default value for sourcepath in scalac (ant version). (#5166)
Add SerialVersionUID to ListSet
Make ListMap and ListSet implementations similar
SI-2458 Clarify spec for package syms (#5151)
Improve performance and behavior of ListMap and ListSet
Move t8449 to correct place
SI-4625 Warn when discarding script object
SI-4625 Permit arbitrary top-level in script
SI-4625 App is a thing
SI-4625 Recognize App in script
Make Range.Partial a value class
[backport] sbt build targets build/
Eliminate major sources of daily noise in SBT build.
Reduce boilerplate in compiler JUnit tests (#5158)
SI-9361 fixed assert allowing display of improved error message.
SI-8667 Caret at bad arg
SI-8667 Improve too-many-args message
Add summary reporting to Scaladoc (#5063)
Add check to scala REPL package to improve feedback about implicits (#5159)
Improves the test cases for the scala-concurrent-tck
Bump to scala-partest 1.0.14
Correct off-by-one error in Product documentation (#5148)
SI-9397 Add "_root_" to "GenUtils.scalaFactoryCall" to avoid the scala package name conflits (#5150)
SI-9666: Use inline group names in Regex (#4990)
BitSet{1,2} conversion (#5127)
Publish usable Scala distributions to Ivy repositories
Added pos test with multiple cases; added neg tests.
Enable full compiler optimizations in JMH benchmarking.
SI-9045 Error on recursive ctor
SI-9045 Refactor to abuse of match
Address JMH benchmark reviewer's issues.
Improve the OpenHashMapBenchmark run times.
Add a JMH runner class to the library benchmark framework.
Benchmark the OpenHashMap memory usage. Also add sbteclipse to the benchmark project.
Add get() tests to OpenHashMap, reduce timing artifacts.
Add a reference to Doug Lea's benchmarks.
Add JMH to the benchmark framework. Add an example benchmark for OpenHashMap.
test PriorityQueue.reverse
SI-9740 Repl import fix -Yrepl-class-based
Remove abstraction layer in classpath implementation
Emit a warning when a constant expression evaluates to an ArithmeticException (#5123)
SI-9752 never ignore blank lines when parsing code blocks (#5125)
SD-142 Avoid noisy log output in backend (#5134)
Add examples to Exception object and group members (#5111)
SD-140 inline the correct default method
disable integrate/ide script on 2.11.x
SI-9762 Remove workaround after upstream fix in jline
SI-9762 Update to JLine 2.14.1
Avoid function chaining with reverse method
SD-129 Mark JFunctionN as serializable
More efficient code for deciding if a mixin forwarder is needed (#5116)
faster AggregateClassPath.findClass
remove recursive classpath implementation
Rename the (deprecated) implicit conversion methods in JavaConversions
Cleaned up Scaladoc for JavaConverters and non-deprecated friends
SI-9684 Deprecate JavaConversions
CI: hardcode java path in integrate/windows script
CI: hardcode java path in integrate/windows script
CI: fix integrate-windows script
CI: use java 8 for windows integration
CI: use java 6 for windows integration
Remove the duplicate implem of hash codes for numbers.
Bring Statics.doubleHash in sync with BoxesRunTime.hashFromDouble.
SI-9734 Narrow type when import REPL history (#5084)
SI-9735 REPL prefer standard escapes for code text (#5086)
Updating README.md Eclipse version reference. (#5092)
Automate Eclipse settings and update project files: (#5091)
scala-dev-113: Sync root package words to layout (#5107)
Added missing result type to test.
SI-6710 / PR 5072 follow-up: fix Unit.box / Unit.unbox
Ensure that lzycompute methods are entered into the scope
Ensure ClassBTypes constructed from symbol and classfile are identical
Clean up code gen for method invocations
SI-9749 REPL strip lead ws on dot continuation (#5097)
use Future#foreach instead of onSuccess in example code
Remove the unused scala.runtime.Boxed trait.
Remove plain old dead code in ScalaRunTime.
Do not rely on ScalaRunTime.{inlineEquals,hash} in JavaMirrors.
Move ScalaRunTime.box to typechecker.Macros.
Inline ScalaRunTime.arrayElementClass at call sites.
Move ScalaRunTime.isAnyVal to reify.phases.Reify.
Hide ScalaRunTime.isTuple inside stringOf.
Remove dead-code runtime hash() methods.
Inline ArrayRuntime methods in ScalaRunTime.array_clone().
Move test run/origins.scala to pending
SD-98 don't emit unnecessary mixin forwarders
Rewrite JUnit tests to avoid `@Test` methods in traits
Remove references to trait impl classes, mostly in doc comments
Delete unnecessary blank line
Generate AnyVal source stubs from sbt
General cleanups and less warnings during a Scala build
Remove unused optimizer warnings related to trait impl classes
Remove dead code in the optimizer related to trait impl classes
Bump STARR to 2.12.0-M4.
SI-6710 Clarify stub methods in primitive value classes
SI-6710 Clarify stub methods in primitive value classes
Add initial unit test for Catch and augment documentation
Clarify how/when typedFunction unrolls eta-expansion
typedFunction undoes eta-expansion regardless of expected type
Keep Function when CBN arg thunk targets a SAM
Bring back AbstractFunction parent
Keep SAM body in anonfun method in enclosing class
Add type and class/trait member search, fixes SI-9721 and SI-9722
Add search history for Scaladoc
At the end of a run, close macro runtime's classloader
LMF cannot instantiate SAM of trait with non-trait superclass
LMF cannot run trait's "initializer" (constructor)
Better detection of types LMF cannot instantiate.
Specialization precludes use of LambdaMetaFactory for SAM
Java types and type parameters can be annotated since JSR 308
Target FunctionN, not scala/runtime/java8/JFunction.
Use System.lineSeparator, rather than sys.props
Use Java's highestOneBit, rather than our own versions.
Note the availability of writableStackTrace in JDK 1.7+
SI-7474 Record extra errors in Throwable#suppressedExceptions
Delegate more primitive comparison to the Java stdlib
Avoid intermediate boxing in BoxesRuntime.hashCodeFrom
minor style updates for Scaladoc formatting
SAM conversion can be disabled using `-Xsource:2.11`
Refactor: simplify fallbackAfterVanillaAdapt.
SAM conversion precedes implicit view application (as in dotty).
Soften sam restrictions
Track Function's SAM symbol & target type using an attachment
Don't adapt erroneous tree to SAM type.
Jason's review feedback (ThisReferringMethodTraverser)
Refactor flag juggling. Review feedback from Jason.
Test bytecode emitted for indy sammy
Additional SAM restrictions identified by Jason
More fixes based on feedback by Lukas
Refactoring. Simplify inferImplicit's boolean levers
For backwards compat, sammy comes last
Refactoring. Decakify TypeAdaptingTransformer
Treat `Function` literals uniformly, expecting SAM or FunctionN.
Review feedback from Lukas
Set the scene for Sammy.
Refactoring. Sweep Sammy's backyard.
Remove deprecated Predef.error
SI-9449 sam expansion for explicitly eta-expanded method
Refactor typedFunction, rework synthesizeSAMFunction for sammy
SI-9415 Turn on SAM by default
Spec updates for Sammy.
Refactor. Extract mkLiteralUnit and mkUnitBlock
Remove dead code now that `genBCodeActive` is always true.
TypeHistory's toString time travels consistently
sbt build targets build/
scaladoc fix permalinks
SI-9314 No warn on ${nonid}
Add scaladoc comment about the case when Exception will be thrown by invocation of length method
Make some collection classes final or sealed
Inline super calls, as they are statically resolved
Support :require when using the flat classpath representation.
Enable flat classpath by default
SI-9488 - adds the same default toString format to Scala Futures as 2.12.x
Cleanup IntelliJ integration based on review feedback
Updates to IntelliJ files for 2.12.x
Update IntelliJ build for use with sbt
SI-9314 Ignore "${}"
SI-9314 Don't warn on "$pkg"
Added applyOrElse to MapLike
Update STARR after bootstrapping the new trait encoding
Remove manual mixins in JFunctionN.
New trait encoding: use default methods, jettison impl classes
Skip module docs in first round of bootstrap when STARR_REF is used
Update sbt version to most recent release
Add a `genprod` command to the sbt build
Resolve warnings related to SyncVar#set
* Replace isPackage with hasPackageFlag
Organise Predef members into Scaladoc groups
SI-9539 Specify charset when reading ScalaSignatures, ...
SI-9665 Backquoted vbar in extractor pattern
Skip merging 2.11.x's #5025 into 2.12.x
Skip merging #5000 from 2.11.x into 2.12.x
Change behavior of clear-button on input fields
Remove mention of deprecated I/O methods from Predef main comment
Remove unused classes from Scaladoc
Replace JoinIterator & improve ConcatIterator
Update sbt version to most recent that includes the compiler interface
Format collection conversions Scaladoc as code blocks instead of bullets
bundle a newer Akka actors jar
upgrade to latest scala-xml (namely 1.0.5)
bump versions after 2.11.8 release
Improved outer ref checking in pattern matches:
Add fallback typefaces for monospaced sections in scaladoc
SI-6886: Deprecate -expand-all-types
Typesafe -> Lightbend in more places
Document -Xxml:coalescing in scalac man page
fix bootstrap regression (module docs weren't being published)
Refactor transform of case apply in refchecks
Unclutter scaladoc entity members
Add package view to scaladoc
Typesafe is now Lightbend
explicitly specify insertion-order feature in docs
upgrade to sbt 0.13.11
[SI-9664] - Updating README.md's IntelliJ version reference.
Add doc annotation `@shortDescription` to enable explicit synopsis
Remove GIJ memory configuration advice from fsc, scala and scalac man pages.
[sbt] Allow system properties to override entries in verions.props
Add progress bar for search
Add better hover-text in search results
bootstrap: configurable starr, skip docs on first module build
SI-9347  Efficient head/tail, if possible, for immutable maps & sets
Update to partest 1.0.13
Update partest to 1.0.12, test case for reporting invalid flags
Replace UTF8 glyphs with the Material Typeface
Add package member filtering
Scaladoc: Add new search, featuring entity and member search
Remove -Y settings that are no longer used in 2.12
Clean up some bytecode tests
Tests for optimizing val patterns
Rewrite a few more tests to the new optimizer
fix smhasher url
SD-79 don't issue spurious inliner warnings under l:project
Avoid generating ACONST_NULL; POP; ACONST_NULL when loading null
SI-8790 test case
Generate leaner code for branches
thisInfo.parents also needs separate treatment
Less distribution of logic across TypeRef subclasses
SI-9540 typedFunction is erasure aware
Update to partest 1.0.13
Towards understanding `TypeRef`'s `transformInfo`/`baseType`
SI-9650 Refchecks on case apply transform
SI-9620: add doc annotation to hide specific conversions
Micro optimise Symbol#fullName
Add SBT tab completion for scala{,c,doc}
SI-9574 Prevent illegal overrides of members with module types
Enable IntellIJ smarts while editing the build
Add tab completion to the partest command
Scaladoc: fix duplicate implicits in Array
Add panzoom feature to Type Inheritance graphs
SI-9571 Avoid boxing primitives in string concatenation
Scaladoc: fix stray number in codeblocks for firefox
Convenient aliases for the SBT build
SI-9624 Improve documentation for TraversableOnce
test case for optimizing BooleanOrdering.compare
bump copyright year to 2016
Update partest to 1.0.12, test case for reporting invalid flags
Re-write and Re-enable optimizer tests
show erroneous compiler flags in junit compiler tests
rename -YoptTrace to -Yopt-trace
Improve simplifyJumps Improve simplifyJumps to rewrite
SI-9315 Desugar string concat to java.lang.StringBuilder ...
Extend BigInt with Ordered for java interop
Extend BigDecimal with Ordered for java interop
Document when the `scala` command starts/uses a compilation daemon
SI-9623 Avoid unnecessary hasNext calls in JoinIterator & ConcatIterator
SI-9542 Unify different reprs. of module type refs
Clarified and expanded which Builders were reusable
Added Properties.isLinux to compliment the isWin and isMac methods
tweak my own entry in the readme
SI-9599 Multiple @todo formatted with comma on separate line
Use invokedynamic for structural calls, symbol literals, lamba ser.
Avoid exhaustivity warning in typedTemplate
SI-9398 Treat case classes as one-element ADTs for analysis
SI-9572 Check for illegal tuple sizes in the parser
mutable.TreeMap instead of java.util.TreeMap in closure optimizer
Ensure bytecode stability in the closure optimizer
fix broken links to Scala CLA
SI-9534 Use BoxedUnit in all cases for creating Array[Unit]
SI-9437 Emit and support parameter names in class files
Improved EOL handling for scripts generated by the sbt build
Use portable Java APIs instead of calling chmod from sbt
Trim complexity in CommentFactoryBase
Link 'Future' scaladoc to 'Futures and Promises'
SI-9629 Emit missing 'pattern must be a value' error
Rename junit tests to end in *Test to make them run in ANT
Rewrite test: no local for underscore
Rewrite test: no null in patmat
Rewrite test: no type test on primitives in patmat
Rewrite test for SI-7006
Rewrite test for inlining higher-order functions
Rewrite test for inlining from sealed class
Rewrite copy propagation test
Rewrite test for SI-5313
Rewrite test for SI-6955
Rewrite test for SI-6956
-YoptTrace takes a package/Class.method parameter
Jump optimizations may enable more push-pop elimination
SI-8601 Don't treat newarray as dead code
Add partial appearance update of inheritence graphs in scaladoc
Harden methods to recognize method invocations to optimize
Use Windows classpath in sh scripts when building in sbt on Windows
Precompile some regexes used in the backend
Run DCE before the closure optimizer (fixes a crash)
Making commented example simpler for map
SD-70 Don't share footnotes across multiple calls to universe.showRaw
disable flaky presentation compiler test on Windows
Normalize Windows paths when calling JarJar from the sbt build
SI-8700 Exhaustiveness warning for enums from Java source
SI-9622 Native method may be private
Make StringContextTest pass on Windows
SI-9605 Searching does not use binary search for Array
Use sbt for PR validation builds.
[backport] SI-9616 False positive in unused import warning
add mobile CSS rules for updated scaladoc look
SI-8289 Scaladoc: Make the order of subclasses deterministic
add new look to scaladoc
Remove unused imports and other minor cleanups
Move copy propagation implementation to a separate file
Apply title case to Scaladoc buttons: By Inheritance & Show All
Harden push-pop elimination when eliminating constants
Apply local optimization based on nullness information
Ensure that `-Yopt:l:none` takes precedence, tidy optimizer settings
Eliminate unnecessary casts
Eliminate non-escaping boxes, tuples and refs
Make some testing tools from InlinerTest available to other tests
Rename test MethodLevelOpts -> MethodLevelOptsTest
Minor cleanups in eliminateStaleStores
Don't run closure optimizer on methods too large for prod-cons
Document JavaConverters conversion from java.util.Properties to Map
[SI-9454] Add isAlive method into sys.process.Process trait
change phrasing around eulers number for `log(x)`
SI-9583: Update SystemProperties.empty to return a mutable.Map to fix builders
Create partest.properties from the sbt build
Make all of partest work in the sbt build
Upgrade JarJar in the ant build
Create a full Scala distribution from sbt
Some small fixes for generated artifacts in the sbt build
SI-9507 Make ArrayStack an IndexedSeqOptimized
Apply some static code analysis recommendations
Build man pages and scala-dist.jar from sbt
SI-9110 Pattern `O.C` must check `$outer eq O` for a top level O
IntelliJ README improvements
Update some phase lists
Remove unused cunit parameter / field in GenBCode
Clarify source of f function
DRY-er trees in pattern matcher code gen.
[nomerge] Create a full Scala distribution from sbt
[nomerge] Some small fixes for generated artifacts in the sbt build
[nomerge] Build man pages and scala-dist.jar from sbt
SI-9363 - Add empty serializable
Update number of subsections in Value Conversions
Align DotRunner dot restart count with command option description
Avoid tree sharing in lazy val translation
Refactor excluded qname test to be more data like
upgrade to MiMa 0.1.8
Add two missed scaladoc commands into scaladoc specific help section
Remove notes about -doc-title and -doc-version not being used
SI-9178 Test for the status quo of eta-expansion to Func0
Support specialized functions in closure optimizer
Attacking exponential complexity in TypeMaps
SI-9555 Refactor SystemProperties to avoid mutable map
Clean up a bit more in Constructors.
Sbt-compatible implementation of `isPastXXXPhase`
Annotation filtering & derivation in one place.
Refactor AddInterfaces triage of impl v iface member
Also mutate module *class*'s owner in ChangeOwnerTraverser
it's Scaladoc, not "ScalaDoc" or "Scala doc"
LazyVals looks for local vals in all term trees
Revert suspicious widening of getter's result type
Cleanups, debuglogs, small refactorings
Replacement javap in AsmUtils
Review feedback from lrytz: better comments
Constructors: encapsulate whether to memoize a val
Constructors: further clarify which defs are added & when
Constructors: mutate less
Constructors: consolidate `ValDef` cases in `transformed`
Constructors: narrow interfaces of its components
Clean up optimizer settings.
Copy propagation, remove unused values (closures!) and local variables
Clean up DCE: remove eliminated callsites from call graph earlier
Remove InstructionResultSize (subsumed by InstructionStackEffect)
for 2.12, bump JDK version (6 -> 8) in IntelliJ sample config
less confusing wording for a dependent method type error
Improve version handling and scaladoc generation in sbt build
Test added
Minor cleanups
Use BTypes when building the lambdaMetaFactoryBootstrapHandle
Simplify InvokeStyle
Remove the rest of ICodes
Remove ICode's TypeKinds, use BTypes in the backend instead
Build scaladoc sets from sbt
Sets source for newly created lambda class
Allows to propagate fatal errors when output folder not found.
[SI-9503] Deprecate scala.collection.immutable.PagedSeq
Multi output problem with delambdafied compilation
Create usable “quick” and “pack” builds from sbt
"macro" is a reserved word since Scala 2.11
SI-9545 De-option SyncVar
SI-9545 Correct doc for SyncVar.get(t)
Remove ICode
add doc for log, sqrt
[trivial] import Opcodes._ in two files, move a utility method
Track aliases of primitive values in AliasingFrame
Create shaded JLine in sbt build
SI-6162 Make @deprecated{Inheritance,Overriding} public
Remove ThreadPoolExecutor fallback in ExecutionContextImpl
Remove GenASM, merge remaining common code snippets
Repaired the alphabetical sorting of standards set
Improve collections documentation and prefer () to {}
SI-7566 Remove some private, deprecated remnants from scala-actors
Use a single Int for the prod / cons values of InstructionStackEffect
Support JSR / RET in computeMaxLocalsMaxStack
More efficient way to compute maxLocals / maxStack
SI-9178 Don't eta expand param-less method types to SAMs
Remove unneeded overrides from ReplGLobal
SI-9535 correct bytecode and generic signatures for @throws[TypeParam]
SI-4950 Test reduction
f interp test is junit
Add Extractor and apply Method for SoftReference
Conform foreach tparam to majority naming convention
Clean up CoreBTypes, consistent names, remove unused entries
Simplify and correctify calculation of the InnerClass attribute
Allow @inline/noinline at callsites (in addition to def-site)
Correctly handle post-inline requests of non-existing callsites
Simplify post inlining requests
Rename filter to withFilter in RightBiasedEither
Don't create inline requests for callsites that cannot be inlined
merge 2.11.x onto 2.12.x, Oct 16 2015
Suppress unneeded import.
Remove two lingering `println`s in non-debug methods of the library.
SI-9508 fix classpaths in Eclipse configuration
Document some OpenHashMap internal methods.
SI-9513 decrement "deleted" count in OpenHashMap.put() when slot reused
Windows CI: don't hardcode Ant path quite so hard
Rename forall, exists and find predicate and operator params.
Bump starr to 2.12.0-M3
add note to readme about Windows build
add comment about Cygwin trouble to test/partest
add experimental Windows script for testing
more readme improvements
Windows: make get-scala-commit-sha/date scripts work on Cygwin
fix t7634 to work on Cygwin
Desugar module var and accessor in refchecks/lazyvals
misc upgrades to README
SI-9506 suppress Scala IDE-generated files in the Eclipse project dirs
SI-9501 link README to Scala Hacker Guide
explicitly specify insertion-order feature in docs
Minor fixes to Scaladoc of implicitAmbiguous
SI-9506 suppress Scala IDE-generated files in the Eclipse project dirs
Enhance scaladoc-diff tool for Ubuntu.
SI-9502 Update Eclipse classpaths for scaladoc project.
Use InternalCallbackExecutor in Future.sequence
Script to compare the current scaladoc with the parent commit's doc
Improve implicits wildcard imports in the IDE
tiny fix to spec (pattern matching section)
SI-9495 Add note about configuring Ant for HTTP proxies
SI-9498 Centralize and bolster TypeRef cache invalidation
SI-9498 Avoid caching bug with pattern type variables
SI-9492 Line trimming paste
SI-9492 REPL paste here doc
add missing newline at eof in Scala source
fix bug in partest-extras causing test failures on Windows
fix bug where -Xprint-icode leaked an InputStream and a file handle
add comments warning of InputStream leaks in scala.io.reflect
SI-9472 make Git use LF line endings on Windows
Make AnyRefMap serializable
fix indentation
Improve presentation compilation of annotations
Support completion in erroneous string interpolation.
Add view/context-bound parameter ordering rule
SD-33 Consider methods annotated @CallerSensitive not safe to inline
Add $deserializeLambda$ when inlining an indyLambda into a class
Move addLambdaDeserialize into the BTypes assembly
Rename the Analyzers backend component to BackendUtils
Remove the old REPL tab completion implementation
[backport] SI-9375 add synthetic readResolve only for static modules
SI-9473 Cleaner references to statically owned symbols
SI-9029 Remove unused method
bump required Ant version in README.md
Remove used param and document positionDelta
SI-7850 Additional tests for name based patmat
SI-8127 Remove dead code in Uncurry
SI-8989 Better error message for invalid extractor pattern
fix t9370 so it works on Windows too
use latest partest (1.0.9)
[backport] Include owner in ErrorNonExistentField message
bump copyright year in `scala -version`
Bump version number one last time?
Test inliner warnings for callsites not annotated @inline
First version of inliningh heuristics that prefer higher-order methos
Emit exception handlers for inlined methods in the correct order
remove old partest.bat batch file
fix partest to work on Cygwin
Avoid running data flow analyses on very large methods
Don't run unreachable code elimination when building the call graph
Run computeMaxLocalsMaxStack less often
Minor fixes in the optimizer
Cleanups and performance fixes in Nullness analysis
Improve the performance of analyses tracking aliases
Remove stack values from aliasing set when being dropped
Avoid re-computing argInfos after inlining and closure optimization
In the call graph, rename higherOrderParams to samParamTypes
Reduce component nesting in backend
Revert workaround for SI-8334
Tone down inliner warnings for callsites not annotated @inline
Store information about function literals in call graph
SI-9475 Dependent PolyTypes are dependent types
Abort Ant build if Ant version is <1.9
Update README for Eclipse setup
Update Eclipse build files
SI-9429 fix filtering in scaladoc after focusing on a package
sbt build: appropriately restrict scope of ScalaCheck dependency
sbt build: remove redundancy w/ versions.properties
sbt build: bring versions up to date with versions.properties
upgrade sbt from 0.13.7 to 0.13.9
Include owner in ErrorNonExistentField message
Restore missing element type to List class documentation
Workaround JLine bug for mid-line tab completion
Improve drifted URLs
SI-9081 Deprecate public implementation details in TrieMap
Hide some completion candidates on the first TAB
More liberal matching in REPL autocompletion
Exclude <byname> and friends from REPL completion
Camel Case and JavaBean completion
SI-7155 Remove deprecated private s.c.m.AVLTree
Update links to docs, codehaus and citeseer
Sort completion proposals
Don't offer `asInstanceOf` et al as completions in a fresh REPL
Add the prefix the autocompletion results (Scope-, TypeMember)
Remove unneeded code
unset inappropriate execute bits
Update Java and Sun URLs to replacement Java and Oracle URLs
Review feedback from retronym
Simplify decision whether to derive accessors
Streamline MethodSynthesis & Namers
Use the presentation compiler to drive REPL tab completion
Add a convenience method to Symbol to "resugar" fields
REPL depends on presentation compiler
Publicize method in the presentation compiler
Add a higher level completion API to the pres compiler
Add an option to let pres compiler user manage threading
SI-5408 Prompt after incomplete script paste
Update power mode banner
Try harder to avoid reporting unpositioned errors
Link to completed value classes SIP page instead of pending version
SI-4438 FindAll implicits after error
Improve implementation comments in Option.collect example
SI-8647  Used immutable scheme for mutable.BitSet to resolve canBuildFrom
SI-9379  Added toString to .zipped to allow Stream etc to short-circuit
SI-9424  Clarify behavior of PriorityQueue toString
SI-9407  Vector implementation bit-shift bugfix
fix assorted typos
fix trivial error in spec
Include information about higher-order methods in the call graph
Ensure the call graph contains all inlined callsites
Inline post-inlining requests
SI-9381 remove last vestiges of sun.misc.Unsafe
Make sure to inline only callsites in classes being compiled
Introduce a type for inline requests
move current inliner heuristic to the InlinerHeuristics class
Store SAM information in ClassBTypes
SI-8346  Re-established soundness of toSet (element type widening)
Uncurry does Literal RHS for ConstantType def, not Constructors
Clean up Constructors a bit.
Add link to online version of Programming in Scala
Re-enable tree checkers
Sync commit advice to README.md and fix Scabot URL
Remove unnecessary dependency on parallel collections in ScalaRunTime.
Extend documentation contacts
Format and content enhance README.md
Revert "SI-8346 Rebuild invariant sets in #toSet, avoiding CCE"
Separate hash maps in the code repo for classes being compiled or not
Move call graph and code repo building to the same place
Group call graph by method
minor clenaups
Unfinalize the class DefaultPromise
SI-6806 Add an @implicitAmbiguous annotation
Allow BCode to emit default interface methods
Don't generate specialized overrides in traits
Test case for the status quo in specialized traits
tool-unix: support environments with TERM=cygwin
SI-3623 Improved error message for "filename too long" build errors
Performance optimization - Iterator span, collect, dropWhile
Performance optimization - Iterator flatMap, find, indexWhere, indexOf
Wait until the cat process is finished.
Avoid unnecessary implicit view on String
Stop mapping to Unit when executing finally code.
Include jline on quick.bin tool path
Delegate null test to Option
add @deprecatedName
rename argument f of LinearSeqOptimized.reduceLeft to op in accordance with scaladoc
rename argument f of LinearSeqOptimized.foldLeft/foldRight to op in accordance with scaladoc
SI-9425 Leave Companion.apply if constructor is less accessible
add support for MSys2 to bin/scala shell script
SI-9375 add synthetic readResolve only for static modules
SI-8362: AbstractPromise extends AtomicReference
ScalaDoc fixes for compiler
ScalaDoc fixes for reflect
ScalaDoc fixes for library and library-aux
SI-6938 Use mutable red-black tree in TreeSet
Upgrade scala-asm to 5.0.4-scala-3
fix readme for death of typesafe.artifactoryonline.com
merge two reviewers lists in readme
Remove redundant 'val' from case class params.
SI-9365 Don't null out dependencies of transient lazy vals
SI-9270 Default xml coalescing off in 2.12
SI-9403 fix ICodeReader for negative BIPUSH / SIPUSH values
Cleanup in Refchecks
Rename the ENUM / DEFAULTMETHOD flags to include JAVA_
SI-9393 fix modifiers of ClassBTypes for Java annotations
[backport] SI-9392 Clarify the workaround comment and introduce a devWarning
[backport] SI-9392 Avoid crash in GenBCode for incoherent trees
[backport] SI-9393 Temporarily disable two assertions in GenBCode
[backport] Refactor the ClosureOptimizer, run ProdCons only once per method
[backport] Integrate the LMFInvokeDynamic extractor into LambdaMetaFactoryCall
[backport] Small refactoring to the closure optimizer
[backport] Accessibility checks for methods with an InvokeDynamic instruction
[backport] Support methodHandle / invokeDynamic constant pool entries in scalap
[backport] Skip mirror class when invoking deserializeLambda
[backport] Prevent infinite recursion in ProdConsAnalyzer
[backport] SI-9376 don't crash when inlining a closure body that throws.
[backport] `deserializeLambda` should not use encoded class name
[backport] Java parser: default methods in interfaces are not `DEFERRED`
[backport] SI-6613 fixed in GenBCode
Ignore OpenJDK warnings in partest filters
SI-9408 Avoid capturing outer class in local classes.
Refactor to avoid duplicated work in Constructors
SI-9408 Record known subclasses of local classes
Query methods in api.Symbols for Java flags
Rename the ENUM / DEFAULTMETHOD flags to include JAVA_
SI-9393 fix modifiers of ClassBTypes for Java annotations
remove temporary XML coalescing hack we used to build M2
remove legacy bincompat stuff in Predef.scala, Stream.scala
Align noTraceSuppression val names to system property name
SI-8502 create PackageClass instead of Class symbol stubs for pkgs
SI-8554  Two-arg remove throws exception on large count
SI-8911  scala.collection.convert.Wrappers$MapWrapper not serializable
SI-9409 Scaladoc: remove link to nonexistent diagram doc
SI-9406 fix doc for Range.takeRight
bump copyright year to 2015
SI-9383 Name the function for implicit importing
bump versions.properties now that 2.12.0-M2 is out
tighten up CONTRIBUTING.md a little
readme/contributor's guide tweaks
Remove further references to forkjoin
SI-9401 Avoid SOE with array + missing classtag
tiny readme fix
merge in text from pull request policy from old wiki
Remove our fork of forkjoin. Java 8 bundles it.
opt-in to Travis's newer/faster container-based infrastructure
use newer Redcarpet to build spec
Improve some names (t-v)
SI-9392 Clarify the workaround comment and introduce a devWarning
drop in pull request policy from old wiki
contributor guide: add a morsel salvaged from GitHub wiki
SI-8744 fix version.number in scaladoc.properties
SI-9396 Runner computes path only once
remove -XX:MaxPermSize=128M; it doesn't exist in Java 8
SI-9392 Avoid crash in GenBCode for incoherent trees
SI-9393 Temporarily disable two assertions in GenBCode
Refactor the ClosureOptimizer, run ProdCons only once per method
temporarily disable failing indylambda test
SI-9383 Improved unused import warning
Update scaladoc for Any.scala#equals()
Address review feedback
Bootstrap scala-xml using `-Xsource:2.11`
add test coverage for SI-8627 (Stream.filterNot)
Spec: Implicit parameters with context/view bound is allowed since 2.10
Test warnings when an indy cannot be inlined
Integrate the LMFInvokeDynamic extractor into LambdaMetaFactoryCall
[indylambda] Improve test coverage
[ SI-7514 ] Introduce Source.fromClassPath(resource) method
Small refactoring to the closure optimizer
Accessibility checks for methods with an InvokeDynamic instruction
SI-1931 Hide Predef.any2stringadd in REPL
Support methodHandle / invokeDynamic constant pool entries in scalap
Update Eclipse classpath entries
Warn when combining settings for the old optimizer with -YGenBCode
Set -Xsource to 2.12 by default
Enable the new optimizer when building scala
SI-9373 Restore the test for t8960 with IndyLamba enabled
Skip mirror class when invoking deserializeLambda
Prevent infinite recursion in ProdConsAnalyzer
SI-9376 don't crash when inlining a closure body that throws.
SI-9377 Update ScalaVersion error text
SI-9377 ScalaVersion init no longer fails if versionless
SI-9350 Preserve exceptions
Correct init order between Pasted and ILoop#pasted
Include sources for scala-java8-compat instead of jar
Prepare build for inclusion of java8-compat
`deserializeLambda` should not use encoded class name
Java parser: default methods in interfaces are not `DEFERRED`
SI-9370 Xplugin scans plugin path for descriptor
Update README with required ant version on Java 8
SI-8140 Documentation references java.lang.String directly
fix README. 2.12.x branch require Java 8
SI-9350 Command option -Xreporter
SI-6810 Spec reflects literal parsing literally
SI-6810 Test for CR
SI-6810 Disallow EOL in char literal
Improve method names (m-o)
GenBCode: fix incrementatal compilation by mimicing GenASM
Improved message for missing argument list
SI-6613 fixed in GenBCode
 Default to delambdafy:method and backend:GenBCode
add note to contributor's guide about branches
minor tweaks to contributor's guide
SI-9206 De-perk the welcome message
SI-9277 Downgrade marginal javap features
SI-9206 Update REPL welcome message
Bump versions after 2.11.7 release
Bump swing version to 2.0.0-M2
SI-9206 REPL custom continuation prompt
SI-9206: REPL custom history file
SI-9206: REPL custom welcome message
Cast arguments where necessary before rewriting closure invocations
SI-9206: No REPL message on :silent, unless -Dscala.repl.info
SI-8777 Avoid redundant disambiguation in error messages
SI-6895 Test cases to explain the limitations in tcpoly inference
Rewrite closure invocations to the lambda body method
SI-9253 avoid IndexOutOfBoundsException in TypeMaps.correspondingTypeArgument
Producers / Consumers Analysis
Spec: Add lost references, cleanup
SI-9206 Local refactor to save eyesight
SI-9206 Accept paste with custom prompt
Traits mistakenly set as 'Case Classes' subsection
Pin to non-crashy redcarpet
SI-9206 Verbose REPL prompt for info mode
SI-9206 REPL prompt is more easily configured
SI-9206 BooleanProp if set and not untrue
SI-8930 - Vector updated, +:, and :+ slow when typed as Seq[A]
SI-9339 Support classpaths with no single compatible jline
make BigDecimalTest.testMathContext a bit easier to understand
SI-6131 doc: remove broken show member link from all scaladoc pages
SI-8543 doc: Move TODO out of NumericRange's scaladoc
SI-8858 doc: fix note about PartialFunction in Function0, F1 and F2
Centralize dependencies on jline
SI-9356 more careful assertion in back-end
Improve API documentation for ListBuffer and Try
Clean implementation of sorts for scala.util.Sorting.
SI-9354 ScalaDoc members added via by-name view
spec: Add 'Default Arguments' heading, sentence, example
SI-7747 More tests and logic according to our conclusions on #4522.
SI-7773 Restore phase id to icode filename
Better names for length values
Clarify the definition of inheritance closure
Compiler option for disabling nullness analysis
SI-9343 Xlint less strict on pattern sequences
Applying inverse index instead of reversing a List
[sbt] Allow the REPL to be run from the SBT build
Clean implementation of sorts for scala.util.Sorting.
SI-4147 Add an implementation of `mutable.TreeMap`
add more test for testMathContext
StringLike.split fixed for surrogates and doc
add unit test for MathContext lost
SI-9144 Scaladoc: Make generated HTML files POSIX-compatible text files
SI-9332 Iterator.span simplified
SI-9332 Iterator.span exhausts leading iterator
fix typo
fix BigDecimal loosing MathContext
Require and target Java 8
SI-9322 Elapsed times in compiler calculated with System.currentTimeMillis and System.nanoTime
Update README.md
Make two tests work under -Ydelambdafy:method
SI-7747 Limit previous change to imports of REPL vals
SI-7747 Make REPL wrappers serialization friendly
SI-9326 Binding to existentials can discard the prefix
Address review feedback
Enable nullness analysis in the inliner
fix typo
Nullness Analysis
Update to scala-java8-compat 0.5.0
SI-9321 Clarify spec for inheritance of qualified private
Optimize `implicit def Predef.<???>ArrayOps`
Remove traces of scala-actors
Document -target:jvm-1.8 in the man page
Avoid inefficient specialied lambdas w. delambdafy jvm-1.8, GenASM
Update README.md
Compile & run partest-extras using quick library
SI-9286 Check subclass privates for "same type after erasure"
[indylambda] Enable caching for lambda deserialization
[indylambda] Support lambda {de}serialization
Move a Scaladoc sentence to the correct method
[indylambda] Relieve LambdaMetafactory of boxing duties
Remove ASM sources
intellij project files for ASM removal
Inlcude ASM as a dependency in sbt build
Include ASM as a dependency in ANT build
Update to scala-java8-compat 0.4.0
Subst repo.typesafe -> dl.bintray, use jcenter cache
Add @throws annotation to GenSeqLike.updated
[backport] Follow HTTP redirects when downloading bootstrap binaries
[backport] Remove existing builds from private-repo before building a release.
[backport] Revert back to Scalacheck 1.11.x, fixes to bootstrap script
[backport] remove references to private-repo.typesafe.com
[backport] Update versions.properites
[backport] Documentation and some updates for the release build script
[backport] Comments in versions.properties
[backport] Remove starr.use.released property (not in use anymore)
SI-9302 -Xdisable-assertions raises elide level
Update versions.properties after 2.12.0-M1
Avoid `Set` instantiation.
Move test files to the right place.
SI-8679 Add support for ScalaLongSignature attribute in scalap
Remove unused, mostly commented out doc/html/page/Source.scala
Follow HTTP redirects when downloading bootstrap binaries
Update intellij project files for IDEA 14.1 and latest Scala plugin
PR validation publishes zinc to $prRepoUrl
Remove existing builds from private-repo before building a release.
Revert back to Scalacheck 1.11.x, fixes to bootstrap script
Remove akka-actor from scala-library-all
remove references to private-repo.typesafe.com
Remove references to the old PDF version of the specification
Update versions.properites
SI-9285 Don't warn about non-sensible equals in synthetic methods
spec: Remove obsolete rules related to scala.NotNull
SI-9282 Avoid obscuring an exception during classfile parsing
Spec improvements
Documentation and some updates for the release build script
SI-9279 Improve performance of bash runner script
Remove the 2.12.0-M0 bootstrap script - that was a mistake.
Remove scala.actors and the actors migration module dependency
Remove the continuations plugin module dependency
Comments in versions.properties
Remove starr.use.released property (not in use anymore)
SI-4476 add an index of deprecated members to scaladoc
Small refactorings and additional comments in Delambdafy
Update internal documentation in Delambdafy phase
Remove stdout/stderr output from Junit tests
Avoid unwanted boostrap JARs in the subproject classpaths
Avoid wildcard ignorance of files named 'target'.
Support specialized method-handle based lambdas
Add scala-java8-compat to scala-library.jar
SI-8359 Update a test to work with indylambda
SI-8359 Emit invokedynamic for lambdas
SI-9268 Be robust against absent classfiles during signature parsing
Align how ant builds asm & forkjoin
Script that diffs `build/` and `build-sbt/`
`test/it:test` runs partest regression tests
`test` task runs Junit tests
Tweak formatting of build.sbt
Projects for partest-extras and junit
Rework library dependencies
Always fork in run.
Generate shell scripts.
Included required resources in jars
Add "scala-" prefix to the name of a subproject.
Document sbt build as experimental.
Root project shouldn't compile any sources.
Exclude transitive scala-library dependency
Avoid circular deps: override `scalaInstance`
Compiler jar includes interactive, scaladoc & repl
Scaladoc
Asm and fork/join: no docs, publishing,...
Split `commonSettings` into smaller chunks.
Introduce `buildDirectory` setting.
Change project's base to src/$name
Generate .properties files, pack in jars.
Package jars into build/pack/lib directory.
Introduce sbt build
Make lambda body public rather than using static accessor
Derive repository info from (jenkins) env vars
Don't crash GenBCode for value classes with a self declaration
SI-3368 Default to coalescing for 2.11
SI-9273 Avoid unpositioned error for bare classOf
Disable -Ydelambdafy:method for specialized FunctionN
Upgrade Ruby / Jekyll versions used to build the spec
SI-3368 Review
SI-3368 Promote xml option to -Xxml
SI-5699 Use ParserTest
SI-3368 CDATA gets a Node
Error message improvement 'may be not be' -> 'may not be'
SI-8336: add `fold` & `toEither` to `util.Try`
grammar it's -> its
SI-9264 An even-better diagnostic for an unexplained crash
Patmat: efficient reasoning about mutual exclusion
SI-8627 Two-argument indexOf does not work for Iterator
[nomerge] SI-7601 Scaladoc: img elements must have an "alt" attribute
SI-5795 empty scaladoc tags should be omitted from output
fix scaladoc issue with parsing of empty tags
fix Scaladoc html display when there are empty tags
release script for 2.12.0-M0
SI-9139 don't inline across @strictfp modes
Test case: cannot inline a private call into a different class.
Don't inlinie if the resulting method becomes too large for the JVM
Don't force the GenASM backend when passing -optimize
Apply local variable index shift when inlining iinc instruction
Clean up the way compiler settings are accessed in the backend.
Don't try to inline native methods
Eliminate unreachable code before inlining a method
SI-9197  Duration.Inf not a singleton when deserialized
SI-8254  List SerializationProxy fails to default(Read/Write)Object
SI-9254  UnrolledBuffer appends in wrong position
Bump partest to 1.0.6
Command-line flag to control inlining heuristics
Make class Invalid a ControlThrowable
SI-8731 don't issue a @switch warning for two-case matches
[backport] SI-8689 Make a Future test case determistic
SI-8689 Make a Future test case determistic
Performance improvement: collectFirst in TraversableOnce
SI-9252 gets rid of custom logic for jArrayClass in runtime reflection
SI-9038 fix scaladoc syntax highlightning to leave unicode alone
SI-9174 test case
Don't define the wiki syntax in multiple places
SI-7601 Scaladoc: img elements must have an "alt" attribute
SI-9174 Try extends Product with Serializable
Removed warnings
new{Term,Type}Name→{Term,Type}Name, tpename/nme→{type,term}Names
Deprecations: Use of isPackage, hasSymbol, getter, setter...
SI-9239 fix java generic signature when traits extend classes
SI-7741 Tread more lightly during classfile parsing
fix typo in scaladoc
Improve diagnostic error on failed genLoadIdent
SI-8359 Adjust parameter order of accessor method in Delambdafy
Move all modifiers to the same level
Resurrect a test for type inference
SI-9223 By-name constructor params should not be aliased
SI-9231 Don't attempt implicit search for erroneous parameter
Upgrade ASM to 5.0.3
Clarifications to src/asm/README
SI-9219 Stream toString returns unexpected result
Don't inline methods containing super calls into other classes
SI-9020 Avoid spurious value discarding warning post-typer
Test case for SI-9111 workaround.
Ensure to re-write only trait method calls of actual trait methods
Issue inliner warnings for callsites that cannot be inlined
Limit the size of the ByteCodeRepository cache
Cast receiver if necessary when rewriting trait calls to impl method
Inline final methods defined in traits
Workaround for SI-9111
Don't crash the inliner in mixed compilation
After removing a live handler, need to re-run unreachableCode
Looking up the ClassNode for an InternalName returns an Option
Integrate the inliner into the backend pipeline
Build a call graph for inlining decisions
Reuse the same compiler instance for all tests in a JUnit class
Tools to perform inlining.
Find instructions that would cause an IllegalAccessError when inlined
Emit the ScalaInlineInfo attribute under GenASM
SI-9102: Improve test
SI-9102: Reflect method invoke with mixed args
SI-8861 Handle alias when probing for Any
Quote `_` properly in lexical syntax.
2.10.5  is it for 2.10.x
SI-9170 More flexible SessionTest
SI-7775 Exclude nulls when iterating sys props
Set scala.full.version during bootstrap,
Bump versions after 2.11.6 release.
Bring back improvements from `SI-6942` that were lost during the switch to Tseitin's transformation, e.g., use
Add a check to ensure that if the formulas originating from the exhaustivity / reachability analysis are too big to be solved in reasonable time, then we skip the analysis. I also cleaned up warnings.
SI-7784 Extend test with enum constant
SI-7784 Allow a singleton type over a constant value defn.
Publish to sonatype staging.
SI-8575 Avoid use of unitialized field in a test.
SI-9134 Verify Stream#withFilter#map lazy in tail
Port old 2.10 release script to new CI.
better errors for macro applications with wrong number of arguments
SI-9173 Either extends Product with Serializable
SI-9172  FlatMapped views throw exception on filter
fixes pluginsEnterStats
SI-9127 Xlint doesn't think spaces are significant
SI-9167 Clarify ScalaVersion parsing
SI-8990 Allow GC during lazy evaluation of Stream#withFilter
Scaladoc js location synch more robust
Scaladoc js location synch more robust
Performance optimization - SeqLike
SI-9126  Missing .seqs causes problems with parallel GenXs
SI-8801 Another test for fixed exponential-time compilation
SI-9113 Converting `null` collection Java<->Scala yields `null`
Correct dependency for test.junit.comp
Use if/then/else to avoid box(unbox(_))
SI-9157 Avoid exponential blowup with chained type projections
Remove incorrect completions: implicits can't add type members
SI-9153 More complete and stable results for completions
Cache name for dummy argument used in implicit search
Optimization of IterableLike.scala
[backport] SI-9060 Backpatch fifth-edition names
SI-4959 - UNIX bin scripts now work for paths with spaces
SI-8917  collection.mutable.BitSet's &= operator doesn't clear end
SI-9059 Random.alphanumeric is inefficient
Simplify `ClassTag.unapply`
Scala.js-friendly `ClassTag.unapply`
Some notes on reviewing.
[backport] SI-4339 Event errors and attribute fix
SI-9148: Appends companion type to link tooltips
SI-8759 bump jline: support alt-gr-based keyboards
The talk-to-a-human option
SI-7660: Document behaviour of Set#++ for duplicate elements
SI-9116 Set.subsets has a param list
SI-9140 Minor refactor for readability
SI-8818 FreshName extractor forgives suffix
Backported fix for SI-7753 to 2.10.x.
SI-9140 Allow omitting pleonastic parameter name
SI-9140 Allow deprecating current parameter name
SI-8918 Unary ids are plain ids
Test java reflection on scala library / reflect / compiler jars
IntelliJ project file fix
SI-9124 fix EnclosingMethod of classes nested in implOnly trait defs
IDE setup section
Declare FiniteDuration.toCoarsest to return a FiniteDuration
Load balance across CONTRIBUTING/README
Rewrite contrib guidelines: shorter & friendlier
Scala doc update (sliding method). Added info about default step set to 1. Reading this doc (having no code) can be ambiguous.
SI-8689 Avoid internal error in Promise after sequence of completions
New CI validation scripts
Silence a feature warning in JUnit test code.
SI-9133 Harden against infinite loop in NoSymbol.owner
Refactor transformStats impls for consistency
SI-9041 Avoid unreported type error with overloading, implicits
Punt on IDE validation in 2.12.x...
SI-9095 Memory leak in LinkedHasMap and LinkedHashSet
SI-9123 More coherent trees with patmat, dependent types
Refer to 2.12 in new release scripts
SI-8642 Enable OSGi tests under Java 8
Add an IntelliJ module for the Pax Exam based OSGi tests
IDE validation: run on last commit
SI-7623 Trailing sequence wildcard warning
New PR validation
SI-6502 Convert test to asserts
SI-9097 Consolidate test
SI-9097 Remove spurious warning about conflicting filenames
SI-9072 Vector ++ concatenation of parallel collection cause inconsistent results
fix definition of TRY in the language spec
Address review feedback
Construct ClassBTypes from parsed classfiles
Cleanup asm-to-string debug helpers
Remove an unnecessary hash map in BTypesFromSymbols
Type alias for InternalName
Make ClassBType independent of the name table
REPL: Tread EOF a "no" in the "yes"/"no" prompt.
SI-6502 More robust REPL :require
SI-9089 Another REPL/FSC + specialization bug fix
Added package scaladoc for the concurrent package.
SI-6778 scala.math.random should have parenthesis
SI-8988 Escaping character in StringLike.split(c) prevents usage of optimized String.split code path
SI-8462: Integral shift Long result type corrected
SI-7128  copyToArray(xs, 0, 0) should not fail
SI-7770 mutable.BitSet.toImmutable isn't immutable
SI-9057 - fix `showCode` to put backticks around names including dots
SI-9067: Enumeration withName improvement
Bump versions for 2.11.5 release.
TODO notes for release script
Update 03-types.md
Towards travis-style CI
Import scripts verbatim from jenkin-scripts
Add unit tests for Tseitin CNF conversion.
Bugfix: Implement missing `equals` method for `Sym`.
Spec update for signature polymorphic methods
SI-5154 Parse leading literal brace in XML pattern
Update scala-partest dependency to 1.0.3
Run dead code elimination by default in GenBCode
SI-8538 Document extension
update to scala-parser-combinators 1.0.3
SI-9011 Speculative fix for CCE in Scala IDE
SI-9043 ArrayBuffer.insert and insertAll are very slow
fix ByteCodecs scaladoc
SI-8538 Test or example for Source.report
Suppress match analysis under -Xno-patmat-analysis
SI-8999 Reduce memory usage in exhaustivity check
SI-8841 report named arg / assignment ambiguity also in silent mode.
[nomerge] SI-9030 don't call private BoxesRunTime.equalsNumChar
SI-9030 make BoxesRunTime.equalsNumChar public
intellij module repl depends on asm
SI-8976 MutableList.tail.iterator.size is length
SI-8950  SeqView and StreamView allow indexing out of a slice
SI-8691  SeqView throws exception when prepending a collection
SI-5817: Add header to language.scala and languageFeature.scala
SI-9015 Reject 0x and minor parser cleanup
Upgrade to scala-xml v1.0.3
Turn off flat classpath by default, mark one of its classes as sealed
Add benchmarks to compare recursive and flat cp representations
Cleanup and refactoring - semicolons, unused or commented out code
Create possibility to skip flat classpath caching
Integrate flat classpath with the compiler
SI-9027 Backport xml parser fix
SI-9027 Parser eagerly consumes space on multi XML elements
SI-7965 Support calls to MethodHandle.{invoke,invokeExact}
SI-7683 Enable -Ystop-before:typer
Remove completely commented-out test/run file
Remove commented-out debugging code in PriorityQueue
SI-7981  toSeq on immutable Map and Set return ArrayBuffer
Refactor scalap's main
Create dedicated path resolver for the flat classpath representation
Create base classpath factory and an implementation for the flat cp
Add flat classpath implementation using ManifestResources
Add flat classpath implementation for zip and jar files
Add flat classpath implementation for directories
Add the flat classpath type aggregating flat classpath instances
Define interface for flat classpath and add package loader using it
Use new asClassPathString method and create FileUtils for classpath
SI:7988 - scala.collection.JavaConverters spelling mistake
add 0X...hex number literal in syntax summary
add 0X... for hex number literal
Abstract over ClassPath and ClassRep
SI-8502 Improve resiliance to absent packages
SI-8946 Disable flaky test for reflection memory leak
SI-8924 don't hold reference to list in iterator
SI-9000  equals for immutable collections should check identity
Update ScalaDoc code examples not to use deprecated constructs
SI-8754  linear seqs aren't
SI-9006 Scaladoc: explicit companion and package links
SI-9003 Eagerly capture more potentially mutable binders
SI-8819  Range slice does not return a Range
SI-8727  Map.filterKeys result's contains and get are inconsistent
SI-8519  collection.immutable.Map.apply is inefficient
SI-8765  immutable.HashSet exposes internal updated0 method
SI-8814  mutable.LongMap loses its LongMapness when adding with +
spec: Add a link to the sources from the main page
SI-5205 Finish applying octal deletion
SI-8695  SeqLike has unintuitive implementation of combinations
SI-6519  PagedSeq is not lazy enough
SI-8951  SeqView and StreamView stack-overflow on negative index after flatMap
SI-8783  MultiMap documentation for addBinding is incorrect
SI-8970  hashCode of BigDecimal and Double do not match
SI-8251 Remove ListBuffer.readOnly as deprecated
SI-8597 Expand documentation of CheckabilityChecker
SI-5639 Predicate bug fix on -Xsource:2.12
Add curly brace (zero-or-more) in grammar for Bindings
No list of subclasses for Any in scaladoc, it's useless.
SI-8948 resurrect the scaladoc for Any/AnyRef/Nothing/Null.
SI-7459 Handle pattern binders used as prefixes in TypeTrees.
SI-7444 docs: null Executor allowed in ExecutionContext factories
SI-8981 Tweak REPL help
SI-8835 Lazier slice for Iterator
SI-8835 Update iterator tests
Let users specify a different location for build repos than user home
SI-8944 A more resiliant naming scheme for case accessors
SI-8977 remove duplicate decoder.properties from scalap
SI-8835 Iterator tests can be junit
SI-6502 Refactorings suggested by review - Moves mergeUrlsIntoClassPath from Global into ClassPath - Revises and documents AbstractFile.getURL
SI-5938 Test for a FSC bug with mixin, duplicate static forwarders
SI-5665 Test case for fixed private[this], trait crasher
SI-5413 Test for fixed owner-corruption bug with names/defaults
SI-8597 Improved pattern unchecked warnings
SI-8534 Avoid crash in erroneous SelectFromTypeTree
SI-8967 Only add JARs and dirs from $SCALA_HOME/lib to classpath
[sammy] support repeated params
SI-8965 Account for corner case in "unrelated types" warning
Make t8960 pass under delambdafy:method
[sammy] use correct type for method to override
SI-1994 Test case for fixed overriding problem
SI-7750 Test case for fixed spurious existential feature warning
SI-5730 hide constructors of sealed abstract classes in scaladoc
SI-8966 Allow use of jvm-1.8 via the Ant scalac task
SI-8933 Disable static Symbol literal cache in traits
Address review comments
More uniform treatment of package objects
SI-7602 Avoid crash in LUBs with erroneous code
Correct collections variable definitions to avoid many scaladoc warnings.
SI-8954 Make @deprecated{Overriding,Inheritance} aware of @deprecated.
[sammy] eta-expansion, overloading (SI-8310)
SI-7596 Curtail overloaded symbols during unpickling
SI-8947 Additional layers of defence against EmptyTree mutation
SI-6502 Moving methods concerned with the state of Global from IMain to Global
Addresses review comments
Adds tests that programatically generate jars
SI-6502 Addresses comments by @som-snytt
SI-6502 Addresses @som-snytt's feedback
SI-6502 Addressing review comments
SI-6502 Reenables loading jars into the running REPL (regression in 2.10)
SI-8960 Bring back the SerialVersionUID to anonymous function classes
cleanup @throws tags in library and reflect
SI-6626 make @throws tags create links to exceptions
SI-8931 make generic signature consistent with interface list in classfiles
SI-5217 Companion privates in scope of class parms
SI-6541 valid wildcard existentials for case-module-unapply
SI-8922 REPL load -v
SI-8898 javap -fun under new style lambdas
GenBCode: Compact local variable slots
GenBCode: Tests for combined method-level optimizations
GenBCode: Command-line flags for enabling cleanup optimizations
GenBCode: Eliminate redundant labels and line number nodes
GenBCode: Simplify branching instructions
Debugging utility to print ASM instructions
SI-8925, SI-7407 test cases, fixed in new backend
SI-6051 Test case, the issue seems to be fixed.
IntelliJ IDEA files for version 14
SI-8893 Test tailcall transform for mix of tail/non-tail recursion
SI-8893 Test case to show that tailrec continues to work
SI-8947 Avoid cross talk between tag materializers and reify
SI-8943 Handle non-public case fields in pres. compiler
SI-8941 Deterministic tests for pres. compiler idempotency
SI-8941 Idempotent presentation compilation of implicit classes
Reduce compiles for global-showdef test
Make global-showdef a DirectTest
Avoid the `CNF budget exceeded` exception via smarter translation into CNF.
Debug printing for Any, not AnyRef, to include primitives
And, Or take sets of Props Remove redundant UniqueSym class.
Bump version to 2.11.5 in build.number file.
SI-8875 showCode should print all class constructor modifiers.
SI-8916 Revert addition of -Ywarn-unused[-import]
SI-8916 Further fixes with -Ywarn-unused included
SI-4950 Add tests, looks like it has been fixed earlier
Bump version number in build.number to 2.11.4
SI-8927 Update OSGi stuff to get rid of bndlib warning
Delete zipfile-bug.txt
SI-8849 Makes `ExecutionContext.Implicits.global` ambiguous
Add missing canonical combinators:   - `def transform[S](f: Try[T] => Try[S])(implicit executor: ExecutionContext): Future[S]`   - `def transformWith[S](f: Try[T] => Future[S])(implicit executor: ExecutionContext): Future[S]`   - `def flatten[S](implicit ev: T <:< Future[S]): Future[S]`   - `def zipWith[U, R](that: Future[U])(f: (T, U) => R)(implicit executor: ExecutionContext): Future[R]`
SI-8926 default visbility RUNTIME for java annotations
fix typo. s/represenation/representation
SI-8910 BitSet sometimes uses exponential memory.
SI-8900 Don't assert !isDelambdafyFunction, it may not be accurate
SI-8907 Don't force symbol info in isModuleNotMethod
Add option -port to fsc
SI-8711 ScalaVersion.unparse doesn't produce valid versions
[nomerge] SI-8899 Revert "SI-8627 make Stream.filterNot non-eager"
Ensure delambafy:inline for anonymous function class javap test
Ensure closure elimination test runs under -Ydelambdafy:inline
Update check files for -Ydelambdafy:method
SI-5091 Move named-args cycle test from pending to neg
SI-5454 Test case for another ticket fixed by the previous commit
Avoid wasteful array creation in backend
SI-8893 Restore linear perf in TailCalls with nested matches
Wider use of mapConserve and the like in TailCalls
Avoid needlessly deep chains of ClonedTailContext
Optimize tail calls to avoid findMember calls
Update 04-basic-declarations-and-definitions.md
SI-8890 handle reference to overload with error
SI-6613 Make Java enums work in FSC / REPL
Update 12-the-scala-standard-library.md
Update 10-xml-expressions-and-patterns.md
Update 08-pattern-matching.md
Update 06-expressions.md
Update 04-basic-declarations-and-definitions.md
Update 03-types.md
Update 03-types.md
Update 02-identifiers-names-and-scopes.md
SI-8894 dealias when looking at tuple components
SI-5583 Remove the workaround for specialization bug
Use color REPL after writing a def
SI-4788/SI-5948 Respect RetentionPolicy of Java annotations
Avoid ClassfileAnnotation warning for @SerialVersionUID
Update stripPrefix/StringLike docs to talk about no op case
SI-8888 Avoid ClassFormatError under -Ydelambdafy:method
SI-8731 warning if @switch is ignored
SI-8843 AbsFileCL acts like a CL
Cleanup `LinkedHashSet` fixes and replace them with `Set` (i.e., back to initial implementation).
Make Scaladoc actually exit with non-zero exit code in case of errors, as its docs say it does.
Revert "Disable flaky presentation compiler test."
SI-8267 Avoid existentials after polymorphic overload resolution
SI-8217 allow abstract type members in objects
SI-8845 Control flow pot-pourri crashes GenASM, but not -BCode
Increase REPL startup timeout to avoid test failures
SI-8869 Prevent ill-kindedness in type lambdas
SI-8624 PriorityQueue documentation is not clear enough
SI-6192  Range: to, until and end are confusing
Don't remove elements from a map during iteration.
SI-8087 keep annotations on mixed-in private[this] fields
SI-8445, SI-6622 test cases, already fixed
Better ant / junit interaction
Cleanup a few flags in test/files/
Bump timeout in interactive tests from 10s -> 30s.
Avoid test fragility to changes in Predef
Add color to severity in REPL reporter
Get rid of Platform.doLoad method.
Rename ClassPath.findSourceFile to ClassPath.findClassFile
spec: a header that links to the index, with a scala logo
spec: a print stylesheet to remove the TOC when printing
[backport] SI-7756 Uncripple refchecks in case bodies
HasSet to HashSet typo fix
spec: generated TOC with linkable headers
Make compiler.properties fall back to prefixed
SI-6502 Repl reset/replay take settings args
SI-6502 Remove cp command as unworkable
Color REPL under -Dscala.color
Particular formatting improvement in the spec
SI-8852 Support joint compilation of Java interfaces w. statics
SI-8459 fix incorrect positions for incomplete selection trees
spec: fix broken links and anchors, including examples
spec: remove trailing whitespace everywhere
spec: fix latex formatting all over the place
spec: add syntax highlighting for scala code with highlight.js
spec: use the yaml title as the HTML title
SI-8680  Stream.addString is too eager
isAnonymousClass/Function for delambdafy classes is not true
SI-8815  mutable.LongMap makes different choices for splitAt vs etc.
SI-8817 Correct scaladoc for scala.sys.addShutdownHook
This ensures that typechecking custom unapplications in silent mode doesn't leak uncatchable errors. Interestingly enough, the problem only manifested itself for custom unapply methods, not for synthetic ones generated for case classes.
moves the impl of quasiquotes to scala.reflect
Address review feedback.
SI-8398 - unused warning reports lazy val as a method
Remove stale local variables and exception handlers after DCE
SI-8568 unreachable test now passes in GenBCode
Clarify why we emit ATHROW after expressions of type Nothing
Tools to run the compiler in JUnit tests
JUnit tests for dead code elimination.
-Yopt mulit-choice flag
Eliminate unreachable code in GenBCode
Removed empty class, unused imports
-Xfundep-materialization => -Yfundep-materialization
Change Synchronized(Set|Map) to Java concurrency
Removing deprecations
Bump versions for Eclipse .classpath. Remove cruft in repl.
[nomaster] SI-8764 fix return type of case class productElement under Xexperimental
Make MultiChoiceSetting.compute easier to understand
Address PR feedback, fix MultiChoiceSetting.contains
SI-8764 remove Xexperimental special Product members for case classes
Prefer scala.Serializable to j.io.Serializable
Use Enumeration for MultiChoiceSetting
SI-8806 Add lower bound check to Any lint
SI-8786 disable part of test that's failing the jdk8 build
SI-8113 allow a newline between a link target and title
SI-8810 scaladoc: fixed code block indentation normalization
-Ystatistics accepts a list of phases, cleanups in MultiChoiceSetting
SI-7931 fix Dscala.repl.vids and some string interpolation typos
SI-8410 Summarize if warnings and not disabled
Small cleanup in toTypeKind.
Don't traverse all trees in delambdafy phase if delambdafy:inline
SI-8410 Don't warn fatally on disabled flag
SI-8828 fix regression in Xlint visibility warning for sealed classes
SI-8627 make Stream.filterNot non-eager
SI-8823 Exclude specialized methods from extension method rewrite
[backport] SI-8787 Backport Regex doc
SI-5254 running an empty scala script should succeed
Translate to jUnit test cases
SI-5227 make fsc notify its client upon compiler crash
SI-1264 fsc compiler output should go to stderr, like scalac
Add support for running a specific Junit test/method.
SI-8474  Inconsistent behavior of patch method
SI-8498 @compileTimeOnly should be aware of bridge methods.
SI-8803 generate super accessor for super[A], if A is outer superclass
Integrate CoreBTypes by composition (not inheritance), non-var fields
Minor cleanups, integrating review feedback
Add the ACC_DEPRECATED flag in javaFlags, instead of each call site.
Remove Tracked, add type information to ClassBType
Set currentUnit while generating bytecode.
Scaladoc: the value of an id attribute must be unique within a document
SI-8787 Addressing feedback, additional periods.
SI-8512 Infer Any for the q
SI-8512 Infer a type for f"$args"
[backport] SI-7710 fix memory performance of RegexParsers in jdk7u6+
SI-5691 lint warning when a type parameter shadows an existing type.
test for InnerClass and EnclosingMethod attributes
[backport] Rewrite explanation of doc-source-url option more clearly, and fix encoding to show euro-sign correctly.
[backport] Update javadoc tag to new scaladoc tags.
[backport] Refactored example to Option.collect method.
[backport] Did not know of the fix for SI-8672. Followed the recommendation given by som-snytt.
[backport] [scaladoc] Changed align of example code to Option.contains and Option.collect methods.
[backport] SI-8705   Added example to Option.contains method.
[backport] Added example to Option.collect method.
[backport] Change StringContext scaladoc
[backport] som-snytt's update to wording
[backport] Revised comment to appeal to lchoran's and som-snytts comments
[backport] Update PartialFunction documentation to include the fact that the caller is responsible for checking 'isDefinedAt'
[backport] Update PartialFunction documentation to include the fact that the caller is responsible for checking 'isDefinedAt'
[backport] Make comment consistent with code
[backport] Update AnyVals.scala
SI-8787 Update doc for Regex
mutable.LongMap.fromZip takes collection.Iterable
SI-8787 If you love nulls, so does Regex
remove jline sources from src/ now that we use a released jline.
SI-7350 Prevent resource leaks in PipedProcesses.runAndExitValue()
SI-8781 Avoid double-expansion under -Ymacro-expand:discard
Encapsulate creating SilentResultValue/SilentTypeError.
Separate statistics from functional code; optimize.
Towards more privacy for _reporter.
Work around weird AbstractMethodError
Orphan check file
a few missing deprecations in proxy collections.
Prevent SI-8314 by adding a test
Prevent SI-7905 by adding a test
SI-4563 friendlier behavior for Ctrl+D in the REPL
Refactored example to Option.collect method.
Bump versions for Scala 2.11.2
Better error message than 'bad symbolic reference'.
Also update jline.version when update.versions is set during build
Remove "throws InvalidEscapeException" from StringContext.raw doc
SI-8736 Error if no arg and no default
SI-8736 Restore -language to former glory
SI-8738  Regression in range equality
SI-6476 Unitize ALL the procedures!
SI-6476 Unitize procedures, readability
SI-6476 Documentation
SI-6476 Improve error on escapement
Cleanup ContextReporter hierarchy
s/reportBuffer/reporter
Remove dead code: mode setting
Encapsulate reporting mode as class of reportBuffer.
Clarify that ThrowErrors is the default
repl depends on jline-2.12
SI-8525 MultiChoice takes a helper function
SI-8525 Multichoice help
Configure `checking` mode in `rootContext`.
Remove `def error(pos: Position, err: Throwable)`
Introduce `AbsAmbiguousTypeError`.
Untangle reporting of ambiguous errors.
Reduce Context iface: remove dead code.
Reduce Context iface: make contextMode mutators private.
Reduce Context iface: inline internally.
Reduce Context iface: encapsulate buffer manipulation.
Reduce Context iface: inline complex forwarders.
Reduce Context iface: inline trivial forwarders.
Make more explicit that TypeError is being thrown.
Rely less on intricacies of `contextMode`-based reporting.
Restrict `contextMode` fiddling to `Context`
Encapsulate `TryTwice` as a class, move to `Context`.
Extract the `makeNonSilent` method.
Clarify divergentError comment
Add errorCount to wean partest off Reporter$Severity
Concretize diagnostics: one boolean suffices for now.
Simplify (ambiguous) error issuing.
Remove another redundant forwarder
Move more parsing hooks out of reporting.
Regularize `comment` hook method
Minor cleanup in AbstractReporter.
Eclipse project: repl depends on compiler/lib projects
Remove invalidation from Global.scala
SI-8525 Clarify usage of -Xlint:_,flag
SI-8557 make scaladoc normalize paths of external jars.
Update javadoc tag to new scaladoc tags.
Add SerialVersionUID to SerializedTypeTag and SerializedExpr
SI-5919 TypeTags and Exprs should be serializable
Bump jline version to 2.12 (Re: SI-8535)
Did not know of the fix for SI-8672. Followed the recommendation given by som-snytt.
SI-8608 f-interpolator inlines StringOps
SI-8608 f interpolator emits constant strings
Address pull request feedback
SI-8590 Expand doc comments for ExecutionContext
Rewrite explanation of doc-source-url option more clearly, and fix encoding to show euro-sign correctly.
SI-8525 No anonymous lint
prevents some reflection APIs from destroying rangeposes
relaxes attachment-matching rules
SI-8525 Add -Xlint:-warn-missing-interpolator
SI-8616 Error on -deprecation:true,false
SI-8610 -Xlint is multichoice option
som-snytt's update to wording
Documentation for isModuleClass
Support writing classfile of version 52
Clean up and document some usages of flags in the backend
Pattern matching on ClassBType extracts the inernalName
Remove unnessecary check when computing InnerClass attribute flags
Comment summarizing the JVM spec for InnerClass / EnclosingMethod
Minor cleanups and comments in GenBCode
Restore reporter forwarders in CompilationUnit
[scaladoc] Changed align of example code to Option.contains and Option.collect methods.
Use countElementsAsString for summarized warnings.
Encapsulate deprecation warning message synthesis.
Remove deprecationWarning, currentReporting from Reporting
Rip out reporting indirection from CompilationUnit
Route type checker reporting through context
Track symbol that caused a deprecation warning.
Uniformly route reporting through reporter.
Move reporting logic into Reporting trait
Pure refactor: reorder definitions
Unclutter Reporter. Move truncation to ReplReporter.
[backport] SI-8677 Duration: Zero - Inf should be MinusInf
[backport] transformers no longer ignore UnApply.fun
pull request feedback
SI-8705   Added example to Option.contains method.
Document SuperAccessors
[backport] SI-7470 implements fundep materialization
SI-8703 add support for blocks with just a single expression to quasiquotes
Added example to Option.collect method.
SI-8292 report error when scaladoc fails to find doclet.
SI-8690 BufferedSource.mkString mistakenly skipped the first char.
SI-7115  JMapWrapper.get can incorrectly return Some(null)
SI-8677 Duration: Zero - Inf should be MinusInf
SI-8335  List.++ avoidably burns memory
SI-5200  Incorrect advice for implementing mutable.Set in scaladoc
SI-8638  Empty UnrolledBuffer hangs on prepend.
Revised comment to appeal to lchoran's and som-snytts comments
scala.io.Source now implements java.io.Closeable
SI-7562  Regex.findAllIn does not report all matches
SI-7577  Incorrect documentation: current default isn't Vector
SI-8675 Add another test case for swallowed type errors
SI-8657 don't miss tailrec defs in more positions
SI-8675 Avoid unreported error after second try using implicit view
Change StringContext scaladoc
SI-8672 Better end-of-sentence detection for Scaladoc
SI-8589 Performance improvement for ArrayCharSequence.toString
Update PartialFunction documentation to include the fact that the caller is responsible for checking 'isDefinedAt'
Update PartialFunction documentation to include the fact that the caller is responsible for checking 'isDefinedAt'
SI-7372 make binarySearch methods use the same parameters for the same things.
Remove now-redundant condition in sealedness checking
SI-8611 Avoid accidental patmat unification with refinement types
Refactor `enumerateSubtypes`
SI-8631 Treat `A with Sealed` as enumerable for pattern matching
Java 8 support for run/repl-javap-app.check
Test: classfile reading during inlining works if there is dead code
Make test repl-javap-app independent of precise constant pool indices
Tone down the noise in the output of t7974
Don't crash on dead code in ICodeReader
Support Java 8 in the checkfile for neg/t6289
Java 6-8 agnosticism for a test
Disable OSGi tests under Java 8
SI-7372 fix wrong insertion point for binary & linear search.
Add documentation to parts of scala.concurrent.
Update AnyVals.scala
Unit tests for reflect/internal/Names
Unit tests for new BType classes
Rewrite BType to a type hierarchy.
Make comment consistent with code
SI-6409  Stream flatMap leaks memory if mapper returns many empties
SI-8637 fixes toolbox phase corruption
SI-8503 -version is info setting
SI-8503 Clean up interpolation of help message
Include scalap in the distro.
SI-8630 lineToString no longer long by one at eof
SI-8475 GroupedIterator is also lazy when padded
SI-8625 fix unreachability analysis for boolean expressions
Optimize enforcement of dependent method type restrictions
Fast path in Namer for methods without defaults
Optimize nested scope creation
Eliminate some N^2 performance in type checking
SI-8346: Rebuild invariant sets in #toSet, avoiding CCE.
SI-8617 Avoid rangepos crash for OptManifest materializer
To have effect, @deprecated needs to be an annotation.
SI-6678 Make currentMirror macro hygenic
SI-8494 Javap filter includes specialized
SI-8494 Restore filtering javap output
macro args now correctly preserve range positions
Bump version number to 2.11.2
adds MacroPlugin.pluginsIsBlackbox
SI-5905 Clarify test case
Move class BType to separate component, include it by composition.
More cleanups and commenting in GenBCode
Re-use the exsiting range of the name table when using subName.
Cleanups in Names.scala
Minor cleanups and commenting around BType.
Cleanups for tracing in GenBCode, improve some comments
SI-8607 Generalize previous change to preErase
Upgrade ASM to 5.0.2
SI-8601 Test that static LOAD_FIELD is not eliminated
Bump versions for Scala 2.11.1
SI-8601 Test that `null.synchronized` NPEs under -optimize
SI-8601 Don't treat newarray as dead code
Add a test for array load
SI-8601 Avoid over-eager optimization of LOAD_FIELD
SI-8601 Don't treat int/long division, or arraylength, as dead-code
Revert "SI-8601 Don't treat int/long division, or arraylength, as dead-code"
Revert "SI-8601 Avoid over-eager optimization of LOAD_FIELD"
Revert "Add a test for array load"
Revert "SI-8601 Don't treat newarray as dead code"
Revert "SI-8601 Test that `null.synchronized` NPEs under -optimize"
Bump akka-actor version to 2.3.3 (ref SI-8549)
SI-8601 Test that `null.synchronized` NPEs under -optimize
SI-8601 Don't treat newarray as dead code
Add a test for array load
SI-8601 Avoid over-eager optimization of LOAD_FIELD
SI-8601 Don't treat int/long division, or arraylength, as dead-code
SI-8574 Copy @SerialVersionUID, etc, to specialized subclasses
SI-8591 Scaladoc: Problem with scrolling under Safari on iOS
SI-8587 Explicitly document forall/exists for empty collections
SI-8185 Correct grammar for single-warning compilation run
Deprecation of @BeanInfo
Move t8582 to test/files/jvm
SI-8582 emit InnerClasses attribute in GenBCode
Allow tracing methods and classes in GenBCode
SI-8507 Avoid lazy val in StringContext
SI-8582 Pending test for InnerClasses bug in GenBCode
SI-8553 WrappedArray throws exception on lastIndexWhere when index out of range
SI-8578 Avoid another potential fresh name clash
SI-8578 Avoid fresh name clashes under -Ydelambdafy:method
Make PartialFunction.OrElse extend AbstractPartialFunction.
SI-8576 Temporarily disable part of serialization test
@inline Predef.identity[A].
Disable run/t7974 under checkinit
Clarify and clean up trait getter / setter generation
SI-8570 set the checkinit bit for unit-typed fields of traits
TypeTree printing modified (SI-8447)
Revert "SI-5905 Clarify test case"
Re-added the scala.util.parsing package import, with optional resolution.
SI-5905 Clarify test case
BCodeICodeCommon through composition rather than inheritance
SI-8531 Better space efficiency for patmat analysis
Disable 'unreachable' test for GenBCode
Refactor FastTrack to use composition instead of inheritance.
Get rid of Platform.doLoad method.
Make partest to depend on Scala compiler Eclipse project.
SI-8325 Spec accepts infix type *
SI-7852 for GenBCode
SI-8546 Pattern matcher analysis foiled by over-widening
Respect -Dpartest.scalac_opts when running the test suite through ANT
Use 2.11.0 as the MiMa baseline for 2.11.x
Refined package imports for scala modules.
Disable MiMa on the 2.12.x branch
Bump version for 2.12.x
Add JavaSE-1.7 to set of required execution environments.
SI-6988 Test case for non-literal / non-constant SerialVersionUID
SI-8549 Enforce serialization stability for selected collections
SI-8325 Accept infix star type outside patterns
SI-8549 Honour the @SerialVersionUID annotatation
IntelliJ project files
SI-8550 fix scaladoc for the default s.c.LinearSeq.
Restrict Import-Package for scala.*
SI-8504 fix NPE in the Java wrapper for a Scala Map.
SI-8537 Puts SI-8157 fix under Xsource
Use named class for UndoPair.
Restore linking to source from scaladoc.
makes bundles friendly to -Ywarn-dead-code
Another spot to fully cross version continuations plugin
Re-enable typechecked types part of quasiquote test suite
SI-8514 Remove scaladoc html inconsistencies
master now targets 2.11.1-SNAPSHOT
Bump versions after release of 2.11.0-final
Bump Akka version to 2.3.2
Bump versions after release of Scala 2.11.0-RC4
Correction in the documentation.
Render scala.full.version to versions.properties.
SI-8461 -Xsource:2.10 mode for macro signature checks
Update references to quasiquotes guide
Further tweak version of continuations plugin in scala-dist.pom
SI-8466 fix quasiquote crash on recursively iterable unlifting
 SI-8463 Avoid unpositioned errors from search for views
Refactor rankImplicits, add some more docs
Refactor: keep DivergentImplicitRecovery logic together.
Rebase #3665
Refactor handling of failures in implicit search
Disable more of the Travis spec build for PR validation
Don't mention C#
Minor typographical fixes for lexical syntax chapter
Reducing overlap of code and math.
Simplify CSS, bigger monospace to match math
SI-6054 Modern eta-expansion examples that almost run
SI-6069 Preserve by-name during eta-expansion
Stubs for references chapter, remains TODO
Number files like chapters. Consolidate toc & preface.
Minor cleanup in aisle README
Skip step bound to fail in Travis PR validation
Remove scala-continuations-plugin from scala-library-all
Start ssh-agent
Disable strict host checking
Import markdown spec under spec/
Jekyll generated html in spec/ directory
SI-8451 quasiquotes now handle quirks of secondary constructors
Add language to code blocks. Shorter Example title.
SI-8450 no "implicit numeric widening" in silent mode
#9 try to avoid double slashes in url
require redcarpet 3.1 for user-friendly anchors
use simple quotes, fix indent, escape dollar
liquid requires SSA?
sort pages in index
base url
formatting
TODO: number headings using css
mathjax escape dollar
TODO: binding example
fix indentation for footnotes
allow math in code
redcarpet
formatting
Jekyll 2 config for redcarpet 3.1.1
SI-8388 consistently match type trees by originals
introduces Mirror.typeOf
SI-8387 don't match new as a function application
SI-8350 treat single parens equivalently to no-parens in new
SI-8437 macro runtime now also picks inherited macro implementations
SI-8442 Ignore stub annotation symbols in `AnnotationInfo#matches`
SI-8200 provide an identity liftable for trees
SI-8430 Less non-determinism in patmat exhautiveness warnings
SI-8428 Refactor ConcatIterator
[nomaster] typecheck(q"class C") no longer crashes
SI-8411 match desugared partial functions
Bump version to 2.10.5 for nightly builds.
Bump versions for 2.11.0-RC3
RC3 will ship with akka-actor 2.3.0
SI-8341 minor fixup for comments in test
SI-8341 Refine handoff of undet. params from implicit search
SI-8425 don't create double-dollar names in c.freshName
SI-8420 don't crash on unquoting of non-liftable native type
SI-8329 Better hygiene for patmat partial functions
SI-8415 Exception handling in REPL init
SI-4492 More informative error when class not found on classpath
SI-8144 permalinks in scaladoc
SI-8368 respect user-supplied scala.usejavacp
That was fun: fix internal links.
formatting
fix some links
wip: jekyllify
SI-6054 don't use the defunct List.map2 in example
Printers tests uncommented
SI-8086 follow-up that fixes the problem with `setter`
Minor fixes in test. The equals method always returned true.
SI-8407 "symbol not found" in Scaladoc use cases: warning only
SI-5136 correct return type for unapplySeq
SI-6195 stable members can only be overridden by stable members
SI-5605 case class equals only considers first param section
SI-6054 correct eta-expansion in method value using placeholder syntax
formatting: tables and headings
SI-5155 xml patterns do not support cdata, entity refs or comments
SI-5089 update definition implicit scope in terms of parts of a type
SI-7313 method types of implicit and non-implicit parameter sections are never equivalent
SI-7672 explicit top-level import of Predef precludes implicit one
SI-5370 PartialFunction is a Function with queryable domain
SI-4980 isInstanceOf does not do outer checks
SI-1972 clarify getter and setter must be declared together
SI-5086 clean up EBNF
SI-5065 val/var is optional for a constructor parameter
Remove "will not terminate" from toStream doc
SI-5209 correct precedence of infix operators starting with ! =
formatting
SI-4249 try/catch accepts expression
wip
SI-7937 In for, semi before guard never required
SI-8265 Restore 2.10 variance behavior under -Xsource:2.10
SI-8395 Regression in pattern matching with nested binds
github markdown: tables
github markdown: use ###### for definitions and notes
github markdown: use ###### for examples
SI-4583 UnicodeEscape does not allow multiple backslashes
SI-8195 Test case to show this is a dup of SI-8196
SI-8196 Runtime reflection robustness for STATIC impl details
SI-8392 Guards QuasiquoteClass against non-availability in scala-reflect
SI-8368 respect user-supplied -Dscala.usejavacp in Windows runner
formatting
Mention WIP in README
Catch up with latex spec.
convert {\em } to _..._
github markdown: numbered definition
github markdown: code blocks
github markdown: drop css classes
github markdown: headers
github markdown: numbered lists
SI-8386 fixed
Add more tests for partial functions
SI-8366 make partial function and match trees disjoint
SI-8363 Disable -Ydelambdafy:method in constructor position
SI-8376 Better type printing for Java varargs
SI-8377 - Clarify the asynchronous requirement of ExecutionContext
Move extra tuple placeholder case to reifyTreePlaceholder
Address pull request feedback
SI-8331 make sure type select & applied type doesn't match terms
Update quasiquote debug output minimization pass
SI-8385 make sure $quasiquote$tuple gets reified properly
Addresses pull request feedback
SI-8369 resetAttrs now correctly accounts for skolems
SI-8367 revert SI-8192's change to primaryConstructor when isJavaDefined
SI-8370 fixes an infinite loop in repl init
SI-8368 respect user-supplied -Dscala.usejavacp in unix runner
SI-8375 saner binary incompat errors for macros
SI-8372: unspliceable type printed in error message
SI-8364 fixes cxTree lookup for imports
Test case for SI-8372: issue with ArrayOps.unzip
[backport] no longer warns on calls to vampire macros
Remove distribution building from ant build, see scala/scala-dist.
No longer generate deprecated dists/maven/latest/build.xml
Check library/reflect bincompat against 2.11.0-RC1
SI-5905 Restore -language:_
SI-8332 implicit class param unquoting in quasiquotes
SI-8275 allow to directly extract block contents of the case def
SI-8266 Amend advice for deprecated octal 042
SI-5905 Sanity check -language options
SI-8333 can't use modifiers if class is in a block
SI-8285 use correct kind of map for quasiquote positions
SI-8281 check for unbound placeholder parameters in quasiquote parser
Bump versions for 2.11.0-RC1
Update ant build's update.versions mechanism.
test case that verifies SI-8352
Bump akka-actor version to 2.3.0-RC4
Selectively revert "SI-8315 Better debugging facility for ICode"
SI-4728 test case
minor typos in the doc of applyOrElse
SI-8197 clarify overloading resolution with default args
SI-3235 math.round() returns wrong results for Int and Long
SI-8240 Consider rolling back optimizations for List
SI-6455 util.Try supports withFilter
SI-6455 under -Xfuture, don't rewrite .withFilter to .filter
SI-8251 deprecate `ListBuffer::readOnly`
Address pull request feedback
SI-8330: Mismatch in stack heights
Add ScalaDoc to Quasiquotes and Liftables parts of api
SI-8324 fix permutation in test filename
SI-7962 Scalac runner does not work within Emacs's terminal
SI-8197 Only consider immediate params for defaults, overloading
more clean up in the macro engine
more tests for macro bundles
more helpful bundle error messages
prohibits polymorphic bundles
bundles now reject invalid context types
SI-8321 whitebox bundles are now recognized as such
minor code cleanup in the macro engine
SI-5479 link to release notes instead of jira query
SI-8316 SI-8318 SI-8248 reintroduces resetAllAttrs
Tweak signature for quasiquote's apply
SI-8315 Better debugging facility for ICode
SI-6675 deprecation warning for auto-tupling in patterns
SI-5479 deprecate DelayedInit outside of App
SI-8197 Overload resolution should not consider default arguments
PrintersTest commented
fixes for wrappingIntoTerm
block wrapping for trees modified
block processing fixed for syntactics in typechecked trees
printOwners support added to Printers; whitespaces removed
move methods for typechecked trees processing to TreeInfo
CodePrinter: TypedTreePrinter merged with ParsedTreePrinter
lazy vals printing fixed for typechecked trees
printers flag processing improvements: printRootPkg flag fixed, comments to flags metadata printing added
Attributed val/var processing for syntactics (SI-8180) TypedTreesPrinter added changes based on pull request comments: print root packages flag; tests for syntactics; SyntacticEmptyTypeTree added to Printers
SI-1503 don't assume unsound type for ident/literal patterns
SI-8306: handle SWITCH nodes with just default case
SI-4577 singleton type pattern test should use `eq`, not `==`
SI-7788 Avoid accidental shadowing of Predef.conforms
SI-8229 Source compatible name for implicit any2stringadd
Optimization: remove assertion from SubstMap constructor
SI-7932 Exclude PolyTypes from Java generic signatures
SI-5565 Test case for fixed delayed init bug
SI-8072 rationalize public implicits in scala parallel collections
SI-5134 Test case for fixed DelayedInit / structural type bug
SI-5165 separate compilation test Java annotations bug
undeprecates typeSignature and typeSignatureIn
improves situation with auto-init
makes sure compat._ provides full compatibility with 2.10.x
reverses SI-6484
tests for SI-8300
SI-8304 Allow volatile-typed Idents as stable ident patterns
SI-8301 fix regression with refinement subtyping, wildcard type.
Group settings should honor user-set individual options
Expose a means to disable boolean settings
SI-7707 SI-7712 Exclude unused warnings from -Xlint
Revert "SI-5920 enables default and named args in macros"
README.md: Add link to CONTRIBUTING.md
SI-6566, unsoundness with alias variance: document fix
better deprecation message for Symbol.companionSymbol
Avoid storing source file contents twice
adds missing signature of appliedType
adds more tests for enclosingOwners
SI-3452 GenBCode version of the static-forwarder signature fix
SI-3452 Reduce low-hanging duplication bewteen GenASM and GenBCode
SI-3452 Refactoring code in GenASM
SI-3452 A better fix for static forwarder generic sigs
updates deprecation hints in compat
some extension methods that I forgot to expose
fixes compat for tree and type extractors
Made ParFlatHashTableIterator private vars private[this].
exposes scope mutation APIs
SI-6785 exposes Symbol.flags, setFlag and resetFlag
exposes Symbol.setOwner
better appliedType signatures
makes internal.decorators signatures work
upgrades typingTransform
exposes additional TreeGen methods
introduces Flag.STABLE
staticXXX now throw ScalaReflectionException
provides extension methods for internal
addresses pull request feedback
Type.companionType => Type.companion
addresses pull request feedback
renames some methods in ReificationSupport
SI-7044 deprecates Symbol.associatedFile
moves Symbol.pos to public API
addresses pull request feedback
some renamings
SI-8264 scala.collection.immutable.HashSet#- returns broken Set
adds internal.subpatterns
adds internal.typingTransform
introduces c.internal
adds internal.changeOwner
adds Context.enclosingOwner
adds initialize and fullyInitialize
adds Symbol.alternatives
reflection API compatibility with 2.10.x
establishes scala.reflect.api#internal
cleans up Trees a little bit
deprecates api#Name.decoded and api#Name.encoded
deprecates String => Name implicit conversions
SI-6732 deprecates internal#Symbol.isPackage
Add an extremely well-commented test
SI-7711 Test for args in script
SI-7711 Do not emit extra argv in script body
SI-8283 mutation-free bound inference for existentials
SI-8177 tidy up in type reification
SI-8188 NPE during deserialization of TrieMap
SI-6441 removes Symbol.isOverride
SI-8086 addresses problem with calling Symbol.getter
SI-6931 cleans up the position API
SI-6814 adds typechecker modes to c.typecheck
SI-8118 simplifies Annotation down to a plain Tree
ValOrDefDef.name is now TermName
sane semantics for Symbols.companionSymbol
adds Type.companionType
SI-8063 exposes much needed conveniences for Type
adds Type.typeArgs
splits Type.normalize into dealias and etaExpand
adds showDeclaration(sym: Symbol): String
SI-8194 adds Universe.symbolOf[T]
SI-6484 adds Universe.typeOf[T](x: T)
SI-8192 adds ClassSymbol.isPrimaryConstructor
SI-6379 adds MethodSymbol.exception
additional class tags for reflection API
SI-8190 erasure identities for types in reflection API
fixes indentation in Annotations.scala
does away with implicits in StandardLiftables
SI-8187 api#Symbol.name now has precise type
SI-8177 specializeSym must use memberInfo on high side
SI-6632 ListBuffer's updated accepts negative positions
SI-6908 FlatHashTable and things that depend on it can't store nulls
SI-8276 Test for cyclic error caused by (reverted) SI-1786 fix
SI-8280 regression in implicit selection.
SI-5900 Pending test to show that SI-7886 persists
SI-8153 Mutation is hard, let's go shopping with an empty list
SI-8270 unconfuses bundles and vanilla macros
SI-7753 InstantiateDependentMap narrows type of unstable args
SI-8177 refine embeddedSymbols
SI-8177 co-evolve more than just RefinedTypes
A test case for a name binding progression
typecheck(q"class C") no longer crashes
proceeds with the quest of removing `local` from names
disambiguates uses of “local” in internal symbol API
SI-6733 LOCAL, isLocal, and private[this]
SI-7533 Adds Symbol.isAbstract
SI-6565 Adds missing flag values to reflection API
SI-8263 Avoid SOE in logicallyEnclosingMember
SI-261 private vals in traits depend on composition order
SI-8266 Deprecate octal escapes in f-interpolator
Revert "SI-1786 incorporate defined bounds in inference"
Add a great test case.
Tweak parser entry point for pq
SI-5994 battling implicits for String.lines
SI-8167 readLine shold flush output before reading input
SI-7475 Address review comments in FindMembers
SI-7475 Private members are not inheritable
SI-7475 findMember and findMembers: estranged no more
SI-7475 Refactor findMember computation into a class
SI-8129 Crack the case of the curiously incoherent Context
SI-8129 Make Object#== override Any#==
SI-8219 Pending test to show suspicous overload in == in AnyRef
SI-8219 Pending test case for unpositioned implicit error
Start the PC thread only after initialization of required symbols.
SI-8258 Revert "SI-7335 Remove special case for import of Predef._
Make handling of tuples more consistent in quasi-quotes
SI-8226 Deduplicate Scala's Tokens and JavaTokens
SI-5920 enables default and named args in macros
introduces -Yshow-symowners
deduplication in Symbol.nameString
standardizes checks for default getters
standardizes prefixes used in named/default desugaring
SI-6260 Adddress pull request review
SI-6260 Avoid double-def error with lambdas over value classes
SI-6169 TODO: consolidate with fix for SI-1786 (#2518)
SI-7374 Test cases for fixed Java interop problem
SI-3452 Correct Java generic signatures for mixins, static forwarders
Optimation: use AnyRefMap in GenASM javaName caches
Optimization: use AnyRef map for Namer -> Typer tree handoff
Reasonable Range operations consistently work when overfull.
changes the order of whitebox typechecks. yes, again.
SI-6736 Range.contains is wrong
SI-8154 AnyRefMap iterates its way to ((null, null))
Improve support for patterns in vals
Move null check case higher to avoid NPE
Move placeholder construction logic into Placeholders
SI-8202 bug compatibility with SI-8211 for quasiquotes
SI-8237 Avoid cyclic constraints when inferring hk type args
SI-8092 Review cleanup, no qq
Add support for a more straightforward alternative to import selectors
Use more specific return type for SyntacticFunction
fix typo
renames resetLocalAttrs to resetAttrs
SI-8248 kills resetAllAttrs
Better comment for SyntacticEmptyTypeTree
does away with resetAllAttrs in typedLabelDef
does away with resetAllAttrs in the reifier
further limits discoverability of resetAttrs
Represent tq"" as SyntacticEmptyTypeTree rather than TypeTree()
Rename EmptyTypTree into SyntacticEmptyTypeTree
SI-6948 Make the Abstract* classes public.
addresses pull request feedback
SI-8207 Allow import qualified by self reference
Add repl as dependency of test-junit Eclipse project.
SI-6169 initialize before .typeParams -- just in case
SI-6169 more accurate check for raw java type encoded as existential
SI-6169 Refine java wildcard bounds using corresponding tparam
SI-8215: Correcting typo and splitting a long sentence in MatchIterator doc
SI-8239 don't loop forever in ContextTrees.locateContextTree
SI-8030 Restore thread safety to the parser
SI-8170 Posing outstanding questions as TODOs
PR #3233 cleanup
SI-8092 Refactor f-interp
SI-4014 Scaladoc omits @author
SI-8173 add support for patterns like init :+ last to quasiquotes
SI-8228 Avoid infinite loop with erroneous code, overloading
SI-8134 Address pull request feedback
SI-8215 Documenting the possibility of IllegalStateExceptions when using MatchIterator
SI-8215 Removing ASCII art class diagram in Scaladoc for Regex
Optimize use of methodTypeSchema
turns off the gilSynchronizedIfNotInited optimization
Optimize lookup of tree/symbol attachment search.
More overrides for SetN
Implicits: Move shadowing checks after plausibility checks
Optimization in InstantiateDependentMap
SI-4997 deprecate StringLike.linesIterator for StringLike.lines
SI-7266 Stream leaks memory
SI-7124 make macro definitions prettier in scaladoc
Avoid work in GenICode#run when inactive.
Optimization in Uncurry
Avoid needless Name creation
Optimize generic signatures utility method `dotCleanup`
Optimization in TailCalls
Optimize tailcall elimination
Don't try to eliminate tail calls in constructors.
Optimize the pickler phase
Optimize typedDefDef: disable some checks post typer
Typers#stabilize is a noop in erasure's typer.
Optimize TreeInfo#isMacroApplication.
Optimize isSelfSuperCall
Avoid generic collections operations hot paths
add -Xsource:version to scalac man page
SI-7700 @unspecialized, Part Deux: Now Working.
SI-7933 REPL javax.script eval is cached result
Improve ExecutionContext implicitNotFound and docs
SI-8213 AnyRefMap.getOrElseUpdate is faulty
SI-8205 [nomaster] backport test pos.lineContent
SI-8205 Don't include CR in line
SI-7322 Interpolator idents must be encoded
SI-8205 Avoid long, slow march to AIIOBE in SourceFile#lineContent
SI-8199 Account for module class suffix in -Xmax-classfile-name
update mailmap
SI-8092 More verify for f-interpolator
SI-8182 Avert crash due to type args in pattern
Addresses feedback from Jason
Prohibit views targeting AnyVal
[nomaster] corrects an error in reify’s documentation
corrects an error in reify’s documentation
SI-7328 FieldMirrors now support value classes
unifies method and constructor handling in JavaMirrors
SI-2066 -Xsource:2.10: lenient treatment of variance in <:<, =:=
updates the test for by-name value class parameters
SI-6411 reflection is now aware of posterasure
SI-7919 Newline after empty string interp
SI-8171 make tq"" an alias for empty type tree
Use more precise return types for objects
Reify all blocks as syntactic blocks
SI-7570 top-level codegen for toolboxes
Versions of modules part of Scala 2.11.0-M8.
Address pull request feedback
SI-7275 allow flattening of blocks with ..$
Refactor reification of high-cardinality holes
Tag synthetic unit with attachment
addresses pull request feedback
SI-6879 improves Context.freshName
an optimization for c.eval
Expose seq field for variable arity definitions
fix to partest.cross
Remove cruft from pom.
Scaladoc jars should go to /api.
Add cross suffix customizability for modules
Make abstract-report2 test less dependent on std library.
Work-around for partest failure due to JDK bug.
SI-5954 Add a TODO comment with an idea for future work
SI-8131 fixes residual race condition in runtime reflection
Add support for Java 8 in our build.
deprecates resetAllAttrs and resetLocalAttrs in favor of the new API
moves analyzer.ImportType into scala.reflect.internal
removes non-determinism in reflection-sync-potpourri
SI-7445 ListMap.tail is returning wrong result
SI-5954 Invalidate TypeRef cache when opening package object
temporarily disables the toStringSubjects cache
addresses pull request feedback
capitalizes “s” in tostring
FromJavaClassCompleter is now flag-agnostic
Revert "synchronizes pendingVolatiles"
a note about Symbol.typeSignature
introduces failsafe against endless type printing
SI-8158 compiler hangs printing out fancy types
fixes a typo in Types.scala
quasiquotes no longer evaluate debug logs when debug logging is off
Improve naming of ReadStdin
Don't trace the low-level details of ResetAttrs under -Ydebug
Avoid cycles in Symbol toString under -Ydebug
SI-8157 Make overloading, defaults restriction PolyType aware
Problem with EOL in tests for Printers is fixed
SI-6253 HashSet should implement union
deprecates c.enclosingTree-style APIs
SI-8076 improve support for implicit argument list
SI-6844 restrict splicing in parameter position
SI-8126 Puts SI-7335 fix behind a source level flag
SI-8126 Puts SI-6899 fix under a source level flag
SI-8126 Add a '-Xsource' flag allowing compilation in e.g. 2.10 mode
Test edge cases of literal lifting
Give better names to UnliftHelper1 and UnliftHelper2
Lift Some, None, Nil, Left, Right not just supertypes
Remove redundant asInstanceOf for liftable
SI-8148 fix anonymous functions with placeholders
SI-4370 Range bug: Wrong result for Long.MinValue to Long.MaxValue by Int.MaxValue
Repairs unexpected failure of test t6200.scala
SI-6200 - HashMap should implement filter
SI-6196 - Set should implement filter
SI-8151 Remove -Yself-in-annots and associated implementation
[nomaster] Update MiMa and use new wildcard filter
SI-6457 ImmutableSetFactory.empty results in StackOverflowError
Improved documentation of HashTrieSet internals
Implements specialized subsetOf for HashSet
[nomaster] SI-8152 Backport variance validator performance fix
SI-8146 Test cases for typechecking decidability
SI-8146 Pending test, diagnosis for bug in decidability of <:<
Quasi-comprehensive BigDecimal soundness/correctness fix.
SI-8081 unzip/unzip3 return wrong static type when applied to Arrays
SI-8143 Regressions with override checks, private members
SI-8015 Refactor per code review
SI-7544 StringContext.f docs update
SI-6615 junit test
Backports library changes related to SI-6566 from a419799
toCode renamed to showCode
removes Scala reflection-based macro runtime
prohibits constructor overloading for macro bundles
changes bundles to be classes, not traits extending Macro
*boxContext => *box.Context	, *boxMacro => *box.Macro
fixes run/macroPlugins-namerHooks.scala
SI-8131 Move test for reflection thread safety to pending.
SI-8129 Plug a leak in perRunCaches
SI-8135 Disabled flaky hyperlinking presentation compiler test
Remove temporary binary compat scaffolding from AbstractPartiionFun.
[nomaster] SI-8114 Binary compat. workaround for erasure bug SI-7120
SI-8035 Deprecate automatic () insertion in argument lists
SI-7469 Remove misc. @deprecated elements
More clear implicitNotFound error for ExecutionContext
Removes unnecessary generality in the macro engine
Use macro expandee, rather than expansion, in pres. compiler
SI-8064 Automatic position repair for macro expansion
Test to show the bug with hyperlinking in macro arguments
More robust hyperlink tests for the presentation compiler
SI-7859 fix AnyVal.scala scaladoc.
SI-7491 deprecate overriding App.main and clarify documentation
SI-8015 Carat => Caret
SI-8015 Unprintables in messages
SI-8015 Count lines by EOLs
Update man pages for scala and scalac.
SI-4827 Corrected positions assigned to constructor's default arg
SI-8111 Expand the comment with a more detailed TODO
SI-4841 CLI help update for -Xplugin
License formatting tweak, RTF version.
ExistentialTypeTree.whereClauses are now MemberDefs
untyper is no more
awakens default getter synthesis from the untyper nightmare
SI-8120 Avoid tree sharing when typechecking patmat anon functions
Code cleanup based on pull request comments
Annotated trees processing is modified
SI-8102 -0.0.abs must equal 0.0
SI-8111 Repair symbol owners after abandoned named-/default-args
SI-6563 Test case for already-fixed crasher
Printers code refactoring and cleanup
Tests for ParsedTreePrinter
toCode is added to Printers
Removes TODO comments that are no longer applicable
SI-8058 Better support for enum trees
SI-7974 Clean up and test 'Symbol-handling code in CleanUp
SI-7974 Avoid calling nonPrivateMember after erasure
val showOuterTests is removed
Variance annotations printing
SI-6615 PagedSeq's slice throws a NPE if it starts on a page that hasn't been computed yet
SI-6364 SetWrapper does not preserve performance / behavior
SI-7837 quickSort, along with Ordering[K], may result in stackoverflow because the code uses '==' instead of 'equiv'
Finalized some case classes, for better static checking.
Eliminated some dead/redundant code based on review.
hooks for naming and synthesis in Namers.scala and Typers.scala
unprivates important helpers in Namers.scala
manifests that Namers.mkTypeCompleter is flag-agnostic
humane reporting of macro impl binding version errors
hooks for typecheck and expansion of macro defs
unprivates important helpers in Macros.scala
removes some copy/paste from AnalyzerPlugins
gives a more specific signature to `computeMacroDefType`
macroExpandApply => macroExpand
SI-8107: Use Regex.quote
SI-8107: Add Regex.quote
SI-7443 Use typeclass instance for {Range,NumericRange}.sum
makes well-known packages and package classes consistent with each other
[nomaster] codifies the state of the art wrt SI-8104
codifies the state of the art wrt SI-8104
SI-8006 prevents infinite applyDynamicNamed desugarings
SI-6355 SI-7059 it is possible to overload applyDynamic
SI-7777 applyDynamic macro fails for nested application
Remove commented out code from HashSet and HashMap
Added .ant-targets-build.xml to .gitignore.
Improved testing framework for sets and maps.
SI-8100 - prevent possible SOE during Stream#flatten.
SI-8045 type inference of extracted value
fix Stream#flatten example
Invalidate <uptodate> checks on edits to build-ant-macros.xml
SI-7406 crasher with specialized lazy val
Explicit jline dependency.
Always copy man/* and doc/tools/*.
cosmetic changes to liftables
duplicates arguments to macro typer APIs
scala-library-all: dependency for those who want it all
scala-dist: all you need to roll your own scala distribution
Prepare maven-based distribution building.
Remove obsolete diagnostic error for SI-6231
makes boxity of fast track macros configurable
SI-7680 Update the ScalaDoc entry page of the Scala library
SI-7492 Make scala.runtime.MethodCache private[scala]
Remove spurious resurrection of src/swing.
Remove the unused test.continuations.suite.
Test demonstrating SI-8085
Dotless type application for infix operators.
duplicates macro arguments before expansion
SI-6120 Suppress extra warnings
Use t- prefix instead of si- prefix for test files
SI-8047 change fresh name encoding to avoid owner corruption
overzealous assert in BCodeBodyBuilder rejected throw null
removing defensive code made obsolete by existing fix to SI-5604
SI-7850 CCE in patmat with invalid isEmpty.
SI-7897, SI-6675 improves name-based patmat
SI-8017 Value class awareness for -Ydelamdafy:method
Improvements to partest-ack, plus partest-paths.
overzealous assert in GenBCode
removing dead code in BCodeSyncAndTry
there's a reason for this code in GenBCode
GenBCode version of "not eliminate loadmodule on static methods."
GenBCode version of "Updating Position call sites" commit
Modularize the swing library.
Modularize continuations plugin.
SI-7971 Handle static field initializers correctly
SI-7546 Use likely monotonic clock source for durations
SI-8042 Use Serialization Proxy Pattern in List
Report error on code size overflow, log method name.
SI-4827 Test to demonstrate wrong position of constructor default arg
SI-4287 Added test demonstrating hyperlinking to constructor's argument
Presentation compiler hyperlinking on context bounds test
SI-8030 force symbols on presentation compiler initialization
Test case for recently improved unchecked warning
SI-8024 Improve user-level toString of package objects
SI-8024 Pending test case for package object / overloading bug
Partially revert f8d8f7d08d.
SI-8059 Override immutable.Queue#{+:,:+} for performance
SI-6780 Refactor Context#implicitss
SI-6780 Better handling of cycles in in-scope implicit search
Address minor pull request feedback points
Test possible quasiquote runtime failures
Revert "SI-6426, importable _."
Test usage of SubpatternsAttachment from a macro
drops the redundant typecheck of blackbox expansions
whitebox macros are now first typechecked against outerPt
refactors macroExpandApply
Update README, include doc/licenses in distro
Test unliftable not found scenario
Test tuple lifting and unlifting
fix typo in error messages
SI-7789 make quasiquotes deconstruct UnApply trees
Introduce support for Unliftable for Quasiquotes
Refactor Holes and Reifiers slices of Quasiquotes cake
Provide a way for unapply macro to obtain a list of subpattens
Move Liftable into the Universe cake; add additional standard Liftables
SI-6842 Make splicing less sensitive to precise types of trees
SI-8009 Ensure that Idents preserve isBackquoted property
SI-8016 Ensure that q”..$xs” is equivalent to q”{..$xs}”
typeCheck => typecheck
SI-8046 Only use fast TypeRef#baseTypeSeq with concrete base types
SI-8008 Make q”f(..$xs)” only match trees with Apply node
deprecates macro def return type inference
Add attribution for Typesafe.
Remove docs/examples; they reside at scala/scala-dist
Remove unused android test and corresponding license.
Do not distribute partest and its dependencies.
SI-8060 Avoid infinite loop with higher kinded type alias
SI-7912 Be defensive calling `toString` in `MatchError#getMessage`
SI-8019 Make Publisher check PartialFunction is defined for Event
SI-7618 Remove octal number literals
streamlines refchecking undesired symbol properties
Pending test for SI-6161
SI-8052 Disallow `macro` as an identifier
SI-8050 [Avian] Skip instrumented tests
[backport] SI-7439 Avoid NPE in `isMonomorphicType` with stub symbols.
SI-4841 Plugins get a class path
[nomaster] better error messages for various macro definition errors
undeprecates c.parse
SI-8029 Avoid multi-run cyclic error with companions, package object
SI-7995 completion imported vars and vals
SI-7982 Changed contract of askLoadedType to unload units by default
add method dequeueOption to immutable.Queue
SI-8013 Nowarn on macro str interpolation
SI-8027 REPL double tab regression
better error messages for various macro definition errors
SI-7373 Make the constructor of Vector non-public
SI-8023 Address review comments around typedHigherKindedType
SI-7458 Pres. compiler must not observe trees in silent mode
SI-7548 Test to demonstrate residual exploratory typing bug
SI-7548 askTypeAt returns the same type whether the source was fully or targeted type-checked
Better error messages for common Function/Tuple mistakes
SI-8022 Backwards compatibility for Regex#unapplySeq
Remove unused android tests.
SI-2066 Plug a soundness hole higher order type params, overriding
Use -Dupdate.versions to update versions.properties
SI-7984 Issue unchecked warning for type aliases
Rename build-support.xml to build-ant-macros.xml.
SI-8004 Resolve NoPosition error for applyDynamicNamed method call
SI-7463,SI-8003 Correct wrong position for {select,apply}Dynamic calls
Removes Gen*View and Par*View
SI-8011 Test case for recently fixed value class bug
SI-4332 Plugs the gaps in views
No longer support unreleased STARR.
Move all macros in build.xml to build-support.xml.
Deprecates Par*View and Gen*View
SI-8002 private access for local companions
SI-8001 spurious "pure expression does nothing" warning
Special treatment for local symbols in TypeTreeMemberType
Refactor away duplication between -Ydelambdafy:{inline,method}
Substitute new parameter symbols into lambda body
Symbol substutition must consider ClassInfoType#parents
SI-7872 Plug a variance exploit in refinement types
Test in quick mode for ant build
Revise paragraph (a revised #3164)
Update Eclipse classpath files
SI-7999 s.u.c.NonFatal: StackOverflowError is fatal
[nomaster] teaches toolbox about -Yrangepos
SI-7967 Account for type aliases in self-type checks
SI-6329 Graduation day for pending tests for tag materialization
deprecate scala.Responder
[nomaster] SI-7280 Scope completion not returning members provided by imports
[nomaster] Adds test cases for scope completion
[nomaster] Test infrastructure for scope completion
Handle TypeApply(fun, ...) for symbol-less funs
SI-7987 Test case for "macro not expanded" error with implicits
2.11.0-M7 starr, 1.11.1 scalacheck, bump modules.
Prepare upgrade to scalacheck 1.11.
deprecate Pair and Triple
SI-7280 Remove unneccesary method
SI-7221 rewrites pollForWork non-recursively
use more specific cake dependencies
No-op merge of 2.10.x into master
SI-7985 Refactor parsing of pattern type args
SI-7985 Allow projection of lower-cased prefix as pattern type arg
SI-7985 Allow qualified type argument in patterns
Account for a variation of package types in Implicit Divergence.
Code reformatting in Implicits
SI-7915 Corrected range positions created during default args expansion
SI-7969 REPL variable columnar output
Removing deprecated code.
Remove deprecated constructor from the migration annotation
New AnyRefMap fixes SI-5263 to the extent practical.
New mutable hash map with Long keys: partially solves SI-5263 and is relevant to SI-6825.
fix typo
Tidy up the Uncurry component of delambdafy
refactor out fresh name prefix extraction logic
SI-7969 Refactor to trait with test
SI-7280 Scope completion not returning members provided by imports
Adds test cases for scope completion
Test infrastructure for scope completion
SI-7915 Corrected range positions created during default args expansion
Added information on how to launch and debug scalac inside Eclipse
fix IntMap#foreachValue and LongMap#foreachValue scaladoc
SI-7969 REPL -C columnar output
Revert "temporarily disables run/reflection-sync-subtypes"
Updated Eclipse .classpath for partest and scaladoc projects
correctly fails implicit search for invalid implicit macros
Revived tests that once depended on xml
more precise isMacroApplication check
blackbox restriction #4: can't customize pattern matching
blackbox restriction #3: can't affect implicit search
blackbox restriction #2: can't guide type inference
blackbox restriction #1: can't refine the official return type
blackbox and whitebox macros
Refactoring to prepare modularization of the compiler.
SI-7958 Deprecate methods `future` and `promise` in the `scala.concurrent` package object
Make parameters to implicit value classes private
add comments that explain FreshName extractor from Quasiquotes cake
add comments that explain new for loop enumerator encoding
test legacy .filter support in for loop resugaring
re-implement hasAttachment directly in raw attachments
add support for for loops and for enumerators to quasiquotes
implement inverse transformation to mkFor
add syntactic combinators that represent enumerators
move for loop desugaring into tree gen
change intermidiate representation of for loop enumerators
make fresh names compare similar in quasiquotes
add support for importable attachments
simplify imports in quasiquotes scalacheck tests
add some post-typecheck tests for quasiquotes
add hasAttachment utility method to the internal api
make internal implementation of universe.build less restrictive
deduplicate tuple tree creation code
Filter dependencies from partest and scalacheck.
Use an intrinsic for the next power of two calculation and also return the input as is if it is already a power of two
Upgrade pax-url-aether to 1.6.0.
M6 modules, partest depends on scala as provided.
SI-7568 Adding PriorityQueueTest
SI-7747 Support class based wrappers clean up
SI-7747 Support class based wrappers as alternative through switch -Yrepl-class-based
SI-7568 Adding Serializable to ResizableArrayAccess inner class of PriorityQueue
[backport] Add buildcharacter.properties to .gitignore.
Add buildcharacter.properties to .gitignore.
Parser stack reduction peekingAhead
Parser stack reduction discussion
Rewrites the parser stack reduction logic.
A value class for Precedence.
Address review comments
Avoid needless TypeRef allocation during erasure.
IDE needs swing/actors/continuations
[backport] SI-7776 post-erasure signature clashes are now macro-aware
SI-7678 Don't cache member symbols of TypeTags in Definitions.
Add a per-run cache for member symbols
Cache ImplicitInfo#isCyclicOrErroneous
Fast path for ByNameClass in isImpossibleSubtype
IDE needs actors/swing/continuations publish for validation.
More useful ant targets for faster pr validation
Extra repository hook via `extra.repo.url` var
Collections library tidying and deprecation.  Separate parts are listed below.
Updated instructions for setting up Eclipse for Scala development
Removed Eclipse .project and .classpath for `plugintemplate` project
Updated Eclipse .classpath of partest and scaladoc projects
Render relevant properties to buildcharacter.properties
Force several tests to run using inline delambdafication. The differences when running with method based delambdafication aren't important enough yet to create specialized versions that use method based delambdafication.
Create test variants where delambdafication alters signatures. This commit includes several tests where there's a variation in signatures between inline delambdafication and method based delambdafication.
De-duplicate logic in maven deployment.
Enforce consistency of pack, docs, osgi, maven tasks.
Make specialization aware of anonymous functions. During development of late delmabdafying there was a problem where specialization would undo some of the work done in uncurry if the body of the lambda had a constant type. That would result in a compiler crash as when the delambdafy phase got a tree shape it didn't understand. This commit has a fix and a test.
Make GenASM not eliminate loadmodule on static methods. During development of delayed delambdafy there was a problem where GenASM would eliminate a loadmodule for all methods defined within that module even if those methods were static. The result would be broken byte code that failed verification. This commit fixes that and adds a test.
Flesh out the Delambdafy phase.
Refactor Erasure for delambdafication. This commit is purely a refactor. It pulls code needed to adapt a tree of one type into a tree of another type (by casting, boxing, coercing, etc) out of Erasure and into common locations that will be usable from the Delambdafy phase.
Adds a setting to delay delambdafication. If set then uncurry lifts the body of a lambda into a local def. Tests are included to show the different tree shapes.
Allow retrieving STARR from non-standard repo for PR validation
Allow publishing only core (pr validation)
Render relevant properties to buildcharacter.properties
SI-7634 resurrect the REPL's :sh command
SI-4012 Mixin and specialization work well
SI-7776 post-erasure signature clashes are now macro-aware
from Issue #3098
SI-6546 InnerClasses attribute refers to absent class
Add a skeletal Delambdafy phase. This commit adds a do-nothing phase called "Delambdafy" that will eventually be responsible for doing the final translation of lambdas into classes.
Make future-spec tests not spawn threads in constructors. The future-spec tests were spawning threads in object constructors which meant they were on the ragged edge of entering deadlock from the static initialization lock acquired during the static initialization blocks we use to construct object reference fields. My work on restructuring lambdas pushed it over the edge. This commit refactors the tests to use class constructors rather than object constructors.
Don't use runtime reflection from the batch compiler.
Collections: remove redundant calls to .seq
SI-7944 FOUND: stray undetermined type params in vicinity of implicits
SI-7938 - parallel collections should use default ExecutionContext
Microptimization in implicit search
Remove tools/*{cp, _scala, _scalac}, and tools/*pickled
Remove tools/remotetest
Remove tools/test-renamer
Remove tools/updatescalacheck
Remove outdated build scripts.
Remove tools/make-release-notes
SI-6385 Avoid bridges to identical signatures over value classes
Remove orphaned check files and flags files.
Remove empty check files and flags files.
Bundle source and class file bundling in osgi bundling.
Tidy pom xml files.
Fail build on error in signed maven publish.
More clear implicitNotFound error for ExecutionContext
Update description of explicitouter phase.
SI-7605 Deprecate procedure syntax
SI-3871 Testing protected access against the spec
SI-7519: Additional test case covering sbt/sbt#914
[nomaster] SI-7519 Less brutal attribute resetting in adapt fallback
Prevent useless filter operation in docs
SI-7928 Favour module accessors symbols in rebind
Build cleanup. Prepare for scaladoc module build.
temporarily disables run/reflection-sync-subtypes
better macro impl shape errors
Targets for publishing core to maven.
Towards minimal build for publishing core to maven.
SI-7020 Deterministic warnings for pattern matcher, take 2
Support publishing to maven from main build
Simplify packing, align maven-deploy and pack-maven.
Inline src/build/pack.xml into build.xml.
Continuations plugin gets its own osgi source bundle.
Generate scaladoc for each subproject.
Untangle classpaths related to doc targets.
Remove dead target: locker.actors
Clarify comment.
Correct license to 3-clause BSD in poms.
Moving disabled tests to their rightful home.
Platform independence for SI-6240 test case
SI-7519: Additional test case covering sbt/sbt#914
hotfix for reflection tests on Windows
SI-6840 fixes weird typing of quasiquote arguments
fixes handling of fancy nested classes in runtime reflection
hotfix for runtime reflection
[nomaster] SI-6026 backport getResource bug fix
SI-6026 REPL checks for javap before tools.jar
pull request feedback
makes all locks and tlses private and lazy
need to synchronize Symbols.recursionTable
replaces locks over numbers with AtomicIntegers
thread locals instead of locks for vars in Types.scala
runtime reflection: death from thousand threads
removes the assertion in missingHook
synchronizes pendingVolatiles
synchronizes toolboxes
SI-7045 reflection now auto-initializes selfType
optimizes Scala reflection GIL
SI-6240 introduces GIL to Scala reflection
tests for fancy classloader configurations
improves OSGi test runner in Ant
eagerly initializes lazy vals and objects in runtime reflection
cleans up initialization of runtime reflection
reflection no longer uses enteringPhase and friends
synchronizes symbols
moves Symbol#SymbolKind to Symbols
annotate return type of the implicit fresh name creator
use more descriptive types instead of ints in the parser and scanner
use concurrent hash map with atomic integers
re-wire fresh name creator to currentUnit.fresh at compile-time
use NameTransformer.encode for fresh name prefix sanitization
eliminate isCaseDefEnd override by moving the logic into stock parser
decrease duplication of fresh* function definitions
move fresh name creator into scala.reflect.internal.util
rename selfdef into selfType
fix minor regression in quasiquote reification
better name for isCaseDefStart
make q"f(..$xs)" deconstruction symmetrical to q"f[..$xs]"
advanced fresh name reification
changes some manual tree constructions in macro tests to quasiquotes
deprecates raw tree manipulation facilities in macros.Context
Use overwriting copy uniformly in our build.
fix uptodate checking for osgi.done
Skip more under ant -Ddocs.skip.
Test cases for SAM restrictions.
Disable tests for SI-7020
Disable flaky presentation compiler test.
Filter JVM debug output for custom options in partest
IterableLike.grouped() : More explicit documentation
use regular macro expansion logic for unapply quasiquotes
minor changes due to typos
SI-6841 SI-6657 add support for packages into quasiquotes and toolbox
refactor out range position utility constructors
refactor out common logic between various statSeq-s in parser
harden test case to avoid parsing failure when name is keyword
SI-7899 Allow by-name inference under -Yinfer-by-name
Aesthetics in Trees.
Aesthetics in GenTrees.
Eliminate redundant pickling code.
Tree traversal: more uniform and granular.
Mappings between classes and pickler tags.
Add -Xdev to the runtime-visible settings.
Convenience method findSymbol.
SI-7239 A bonus test case from [scala-user]
An ant property to skip building docs
SI-3346 implicit parameters can now guide implicit view inference
IterableLike grouped : fix documentation
SI-3871 Missing test case for protected bug.
SI-7985 Typecheck args after failure to typecheck function
SI-7895 Issue all buffered errors after silent mode.
SI-7895 Avoid cascade of "symbol not found" in pattern matches
Remove stray debug comment
Single Abstract Method support: java8 test
Extract SerialVersionUIDAnnotation. Make SAM body synthetic.
Don't pursue SAM translation after an arity mismatch.
SI-7899 Don't infer by-name types during, e.g. eta-expansion
Extract isStable and isVolatile from Type.
Generalize OverridingPairs to SymbolPairs.
Single Abstract Method support: synthesize SAMs
Single Abstract Method support: synthesis helpers
Clarify findMembers, add reverse engineered docs
Simplify partest.task target, fix typo in comment.
no longer warns on calls to vampire macros
SI-7883: Added a comment per CR feedback from @adriaanm, @Ichoran
Describe type parameter interpolation in @implicitNotFound documentation
Correct build command for scala-ide
Rework cff8b569 to heal the windows build.
macro bundles are now usable in repl
gets rid of randomness in virtual filenames for bundles
clearly establishes what macro bundles are
Removing unused code.
Remove 'hasDefaultFlag'.
SI-6680 unsoundness in gadt typing.
SI-7886 unsoundness in pattern matcher.
SI-7883 - don't iterate over all keys in MapWrapper.containsKey()
Bump version to 2.10.4 for nightlies
SI-7859 Value classes may wrap a non-public member
Updating Position call sites.
Some refinement of -Xlint interpolation warning.
SI-3971 error message carat mispoints at curried methods.
SI-6762 rename emptyValDef to noSelfType.
SI-6120 multiple warnings at same position.
Add -Yno-load-impl-class disabling loading of $class.class files.
refactors ToolBoxGlobal wrappers
A .mailmap entry for @huitseeker
SI-7877 Only look for unapplies in term trees
SI-7783 Don't issue deprecation warnings for inferred TypeTrees
transformers no longer ignore UnApply.fun
SI-7876 Less dealiasing in Scaladoc's type printing.
SI-7876 Scaladoc crasher due to regression in isFunctionType.
Remove octal escape literals from the codebase
SI-7629 Deprecate view bounds
SI-4742 Make -Xcheckinit aware of constants.
Add position check for regression introduced by #2957
SI-7848 Xlint no warn on $sym with params
SI-7870 Detect default getter clashes in constructors
Move logic checking valid names from ClassPath to ClassPathContext
Add back the newClassLoader hook in SymbolLoaders.
[nomaster] SI-7862: MANIFEST.MF file for Scala sources
SI-7868 Account for numeric widening in match translation
SI-7864 Harden "looks like an interpolated String" warning
Update of Eclipse project files
SI-7861 Don't execute internal callbacks on the user Executor
SI-7725 - Vector concatenation is unreasonably slow
SI-7862: MANIFEST.MF file for Scala sources
Follow good interrupt discipline in Response
add test case for SI-6719
Upgrade: starr=M5, partest=RC5, xml=RC4, parsers=RC2.
Convenience methods from Try[T] => {Future, Promise}[T]
Don't avoid to load trait impl .class without inliner.
Add trait keeping comments across new Typer runs
Uses a WeakHashMap to constrain memory footprint of docComments
Require Ant >= 1.8.2
SI-7848 Xlint no warn on $sym with params
SI-7855 No missing interpolator warning post-typer
SI-7854, SI-6768 better parsing/positioning in parser
Position#show prints the point.
add syntactic extractor for assignment-like trees
SI-7852 Refactor null-elision tests to be more focussed
Type housekeeping.
SI-7852 Omit null check for SomeModule.==
Cull extraneous whitespace.
SI-7853 A less ad-hoc place to call memberType
SI-7853 An unsatisfying fix regression in explicit outer
Silence pos/t3960's -Ycheck output.
Longer timeout for repl test.
SI-7848 Xlint says what looks interpolated
SI-7852 Test to show status quo of for SomeModule.==
SI-7852 Omit null check for "".==
SI-7852 Test to show the status quo bytecode for "" == ...
SI-7841 More robust unspecialization of names
SI-7841 Remove AnyRef specialization from AbstractPartialFunction
SI-7847 Static forwarders for case apply/unapply
SI-7845 Disable test for JSR 233
SI-7841 Remove commented out AnyRef specialization from Function{0,1}.
SI-7844 Intellij setup.sh is not working for Ubuntu 12.04
SI-7843 Restore JSR 223 service entry
Reducing variation of tree creation methods.
Widen type of outer accessor.
SI-7839 Final val breaks checkinit build
Corrects behavior of finalResultType.
Remove build.number.maven
Removed deprecated calls.
Consolidate Position classes.
refactor variable arity definitions
SI-6489 parsing in macros should provide proper positions
Deprecate -Yinfer-debug
SI-7223 More finesse in setting INCONSTRUCTOR
SI-7007 Test case shows we disallow premature `this` access
SI-3832 Don't lift methods in aux constructor trailing stats as STATIC
SI-3832 Extract tracking of under-construction classes to a mixin
SI-1909 Move tests from pos to run
Todo promote to partest
SI-7834 Type equivalence of C.this and C.super.
SI-7304 improve deprecation warnings for tree factory methods
SI-6701 add SYNTHETIC flag to the reflection api
Revert a tiny recent refactoring in SelectiveCPSTransform
SI-7356 - Source.mkString performs painfully slow (...)
Build partest-extras under `pack.done`
SI-7398 Enable test for Java 8 source parser under Java 8
SI-7825 Consider DEFAULTMETHOD when refchecking concreteness
Avoid spurious tree checker warning for higher order type params
SI-7708 - Improve Bitset foreach performance
SI-7817 Tests to show the foibles of mkAttributedRef
Noise reduction + minor enhance in TreeCheckers.
Avoid needless Type stringification when logging is disabled.
SI-7767 Test case for Scaladoc on early initializers
Update scaladoc's .classpath to new name of partest project
SI-7767 avoid rejecting Scaladoc comments in early initializers
SI-7815 Dealias before deeming method type as dependent
SI-7805 REPL -i startup
SI-7643 Enable newPatternMatching in interactive.
SI-7818 Cast our way out of extended existential angst
streamline implementation of annotation splicing
unify handling of references to scala members for functions and tuples
make the postfixOps warning go away
better support for ValDefs, VarDefs and DefDefs
rename TupleN and TupleTypeN into SyntacticTuple and SyntacticTupleType
SI-7723 better support for deconstruction of new expressions
SI-7803 support for matching of anonymous function literals
first-class early def splicing and extraction support
extract out isHole(name)
SI-7814 Updates the instrumented version of ScalaRuntime.
SI-7814 Avoid init cycle between Predef, `package`, ScalaRuntime
add support for function type splicing and extraction
reify ScalaPackage symbol with the help of ScalaDot
refine block and applied/typeapplied splicing/matching semantics
SI-7196 add support for refineStat splicing and extraction
reduce amount of clutter on -Yquasiquote-debug
minor changes to TreeGen.mkTemplate
move mkNew from tools.nsc.ast.TreeGen to reflect.internal.TreeGen
use NoMods and NoFlags for reification of empty values
merge flagsFromBits and FlagsAsBits into FlagsRepr
rename mkAnnotationCtor into mkAnnotation
add missing copyTypeDef utility function
refactor definition tests into separate subsuite
add toolbox-based utility methods to quasiquotes' tests
SI-7791 Line number table reflects underlying file
Eliminate TypeTrees with null original.
Modify perRunCaches to not leak WeakReferences
SI-7149 Use a WeakHashSet for type uniqueness
SI-7150 Replace scala.reflect.internal.WeakHashSet
Change Scala license to unmodified 3-clause BSD.
Change Scala license to unmodified 3-clause BSD.
SI-7810 Reflect private constructor
SI-7781 Comments to SessionTest
SI-7781 Improve test and add comment
Target junit.clean to clean junit artifacts
SI-7781 REPL stack trunc shows cause
Lock down methods in Names
SI-4760 Parser handles block-ending import
Correcting scaladoc for all classes defining withDefaultValue method. The description of the single parameter seems to be a copy and paste mistake from withDefault method.
Commit .gitignore directly
Paring back the scope of our shared .gitignore
Include xml and parsers in dist, tool classpath.
[nomaster] SI-7652 REPL extended quest for tools
[nomaster] SI-7652 Bad tools fails loudly
Restore --show-diff to partest-ack.
Limit bad advice given for erroneous pattern.
Removing orphan check/flag files.
update typesafe.artifactory-online.com to private-repo
[nomaster] SI-7790 No ScriptEngine in 2.10 build
SI-7269 Rework MapLike#retains to account for desugaring change
SI-7763 Don't eliminate CHECK_CAST in dead code elimination.
SI-7763 Avoid dropping casts in erasure
typedAnnotated no longer emits nulls
Don't use sonatype to resolve jars relevant to a release.
deprecate early type defs
Remove scala-xml and scala-parser-combinators
A better diagnostic error for corrupt or missing JARs.
Echo the location of JUnit test failure reports in `ant test.junit`.
Prepare removal of scala-xml, scala-parser-combinators
update typesafe.artifactory-online.com to private-repo
SI-7785 Preserve TypeVar suspension through TypeMaps
SI-7782 Derive type skolems at the ground level
SI-7775 Harden against the shifting sands of System.getProperties
Logging cleanup.
Value class Depth.
Overhaul of partest-ack.
Stackless implementation of TailRec in constant memory.
Alter TailRec to have map and flatMap
SI-7779 Account for class name compactification in reflection
SI-942 A test case, five years adrift.
SI-6240 Synchronizes Names
SI-7622 Scaladoc and error message polish
SI-7622 Clean Up Phase Assembly
SI-7622 Plugins can be not enabled
SI-7622 -Xshow-phases can show disabled phases
SI-7622 Phases are enabled or not
SI-7622 -Xgenerate-phase-graph is an info option
SI-7622 Phase assembly is testable
Use scala-partest 1.0-RC4
GenBCode: decouple ClassDef traversing from ClassNode building
GenBCode: decouple ClassNode building from encoding as byte array
GenBCode: decouple ClassNode building from classfile writing
SI-7407 fixed in GenBCode but beware, it remains a bug in GenASM
SI-7486 More tests for cycles triggered by implicit search
Move partest to https://github.com/scala/scala-partest
ProcessBuilder.lines(log) *does* throw an exception.
No longer crash on NoSymbol.owner.
SI-7740 Trim stack trace before printing in REPL
SI-6797 Test case for already-fixed DelayedInit bug
SI-1980 A lint warning for by-name parameters in right assoc methods
Refinement of name-based unapplySeq.
An unapplySeq-via-String test.
Refined name-based patmat methods.
Revert "Minor improvement in pattern typer inference."
SI-6507 completely sidestep handlers in REPL when :silent in on
Finish segregating patmat cps hacks.
Reworked MaybeTypedBound.
Pull translatePattern entirely into BoundTree.
SI-5903 extractor macros
Move more pattern logic into BoundTree.
Introduced case class BoundTree.
New tests for name-based pattern matcher.
Pattern matcher: extractors become name-based.
Introduced classes to encapsulate extractor info.
Stylistic cleanups in patmat.
Simplify management of pattern vars.
Cleanups in Typers.
Add some logging to instantiateTypeVar.
Expanded logic in formalTypes.
SI-4425 do some validity checking on unapplies.
Move most of Typers#Typer#typedTyped into PatternTypers.
Turned TreeMaker into case class.
Compressed central TreeMaker pattern match.
Pulled pattern typing methods from Typers.
Broke up typed1's giant pattern match.
Deduplicate mkZero in pattern matcher.
Simplified the MaybeBoundTyped extractor a bit.
Segreated CPS hacks in pattern matcher.
Remedied glaring omission in error output.
An Unapplied extractor.
Minor improvement in pattern typer inference.
Add checkability condition.
Cleanups in Unapplies.
Cosmetic cleanup in the matcher.
Positioned variations of inform/warning/globalError.
Removed some dead code in Uncurry.
Pushed some noisy logging down to debuglog.
Add a helper method drop to ScalaRunTime.
Expand the understanding of bytecode tests.
Some general purpose methods.
SI-7501 Pickler: owner adjustment for param syms in annotation args
Add some standard names used in pattern matcher.
Make memberType less crashy.
Repair NPE in -Ytyper-debug output.
Crasher in symbol tracer.
kills introduceTopLevel
SI-7603 Remove diagnostic code for annotation error
SI-6507 do not call .toString on REPL results when :silent is on.
SI-7756 Uncripple refchecks in case bodies
SI-7757 add additional test case with annotation on the next line
SI-7757 disallow constructor annotations on traits
SI-7716 Exclude patmat synthetics from bounds checking
SI-7564 [Avian] Whitespace fixes to run/tailcalls.check
SI-7630 [Avian] Skip test run/repl-javap-outdir-funs on Avian
addresses feedback regarding new junit tests
Whitespace fixes in scala/tools/scalap
SI-7624 Replace new{Term,Type}Name with {Term,Type}Name
Formatting fixes for AnyVal
SI-7752 Don't disambiguate type parameters of overloaded alts
@compileTimeOnly now works for symbols from the empty package
@compileTimeOnly now works for annotations
marks Expr.splice and Expr.value with @compileTimeOnly
Clean up imports in s.t.n.interpreter.IMain
SI-7681 Remove scala.tools.nsc.io.DaemonThreadFactory
[nomaster] macro expansions are now auto-duplicated
moves compileTimeOnly to scala-library
SI-6843 well-positioned syntax errors for quasiquotes
SI-7331 remove all the wrapping code from toolbox
refactor repl to use new new parser entry point
refactor parser entry points and extract a few methods out
SI-7731 make CannotHaveAttrs more consistent
add assertThrows testing utility function
SI-7014 Annot arg may refer to annotated class's member
SI-7694 Add @uncheckedBounds to the library
SI-7694 @uncheckedBounds, an opt-out from type bounds checking
SI-7020 Determinism for pattern matcher warnings
Added a warning from scala runner script.
SI-7470 implements fundep materialization
[nomaster] SI-7733 reflective packages now more consistent with scalac
SI-7715 String inpatternation s"$_" for s"${_}"
SI-7690 ghost error message fails compile
SI-7737 Regex matches Char
DefDef.name is now TermName again
currentRun.compiles now correctly works in toolboxes
[nomaster] macro errors now always have positions
showRaw now prints symbols of def trees
Log file is zapped before test run
SI-7729 Does Par-Test work?  Absolutely!
Golfed about 20 lines into the sand trap.
skipping trips to specializeTypes when not necessary in constructors
separation of concerns: guard non-specialized ctor-stats in constructors
better encapsulation in constructors phase
readability for intoConstructors transformer
separation of concerns: eliding param-accessor fields in constructors
separation of concerns: delayed-init in constructors
method transformClassTemplate() turned into class TemplateTransformer
eliding what the constructor phase elides but with less effort (2 of 2)
eliding what the constructor phase elides but with less effort (1 of 2)
how stuff works: elision of param-accessor-fields and outer-accessors
handling AnyVal special case early on to simplify logic afterwards
warn about uninitialized reads (in constructors), self-contained check
Remove unused private[scala] def ScalaRunTime.checkZip
SI-7658 Prevent StackOverflowError in ScalaRunTime.stringOf
Par-Test split checks work again
Make map2Conserve occupy constant stack space in spirit of SI-2411
Move map2Conserve to a new home, next to map2.
SI-7331 tb.parse returns unpositioned trees
StringContext#checkLengths reports bad args count
In tests, interpolation is no longer -Xperimental.
SI-7544 Interpolation message for %% literal
Add sample to SymbolTableTest using custom symbols and type.
Bug fix ! , if $color_opts is unset partest script does not work.
SI-7265 javaSpecVersion, adjust isJava... tests
new build options
updated README.md
rendering error fix
Address TODOs around SymbolLoaders and SymbolTable.
Clean up ConsoleRunner, --> returns Boolean ...
Add some explicit return types to s.t.c._
Rename t7636-neg.check to the standard t7636.check.
Add deprecation warning to lock class
Scrubbing up the IntelliJ Config
SI-4907 SI-4615 scala.bat honors -J and -D options.
SI-7455 Drop dummy param for synthetic access constructor
Add example of SymbolTable unit test.
Make junit runner quiet when tests pass.
The `test-junit` Eclipse project depends on `scala-compiler`
Refactor the cake so SymbolTable does not depend on Global
Update sbt interface version to 0.12.4.
Deprecate Platform.BinaryRepr.
Remove dependency on typer phase in ClassfileParser.
Move ICodeReader-specific logic out of ClassfileParser.
SI-7695 Macro debug output on -explaintypes
fix typo. s/Universes/Universe
fix Promise scaladoc
Removing unused things from scalap.
brings JavaMirrors up to speed with ClassfileParser
SI-7687 Handle spaces in %COMSPEC% path in scala.bat.
SI-7681 Clean up scala.reflect.internal.util.TableDef ... now that scala.tools.nsc.Phases is gone.
SI-7681 Remove scala.tools.nsc.Phases
SI-7681 Remove s.t.n.d.Changes (dead code)
SI-7681 Remove dead code in s.t.n.s.AbsScalaSettings
SI-7679 Remove deprecated StandardScalaSettings#make
SI-7592 Deprecate s.c.m.DefaultMapModel
Make -Ytyper-debug output readable.
Cleanups in type printing.
STARR: use 2.11.0-M4, built with 2.11.0-M3
Commit .gitignore directly
Update README.md
Update README.md
A smaller readme, with content moved to our gh-pages
SI-7488 REPL javap finds new style delayedEndpoint
SI-7650 No bang expansions in REPL jline
SI-7668 Better return type inheritance for dep. method types
SI-6811 Deprecate scala.text
SI-7657 clarifies the "macro overrides method" rule
SI-4684 Repl supports raw paste
SI-4684 Repl supports whole-file paste
SI-7487 Revert "Removed -Ymacro-no-expand."
macro impls can now return subtypes of c.Tree
precise return type for FlagsAsBits.unapply
backward compatibility for TreeBuilder
SI-7592 Remove scala.tools.nsc.util.MultiHashMap
SI-6574 Support @tailrec for extension methods.
SI-7617 typedAssign no longer expands lhs
scaladoc needs xml and parser-combinators
fix typo in BigInt/BigDecimal deprecation messages
tests for quasiquotes
introduces unapply macros for internal use
implements quasiquotes
introduces extensibility hooks into the reifier
moves template creation logic from nsc to reflect
adds the lookahead routine to the parser
extensibility hooks for parser
moves TreeBuilder into the parser
SI-7638 Superaccessor lookup after specialization
SI-7638 Superaccessor lookup after specialization
SI-7336 - Link flatMapped promises to avoid memory leaks
SI-7614 Minimize the times of evaluation f in TraversableOnce.maxBy/minBy.
Updated eclipse project files.
Add meta-information for dbuild.
Unfork jline: use vanilla jline 2.11 as a dependency.
Spin off parser combinators to scala-parser-combinators.jar.
Spin off src/library/scala/xml to src/xml/scala/xml.
No more duplication in maven-deploy.xml.
SI-7265 General test for spec version
SI-7637 Repl edit command
SI-4594 Repl settings command
SI-4594 Enable mutating mutable multi settings
Use forward slash in #2637's test on windows
SI-7591 Make s.t.p.n.ConsoleRunner use s.t.c.CommandLine
SI-7591 Minor cleanups
SI-7591 Move command-line spec usage demo to tests
SI-6419 Repl save session command
fix typo
makes it more convenient to work with SuppressMacroExpansionAttachment
SI-7344 Specialize methods in private scopes
SI-7620 Remove floating-point-literals-without-digit-after-dot
GenBCode: Eliminate needless Options
more informative name for backend-selection via command-line
catching up with a fix in master after this PR was submitted
Move some code from s.t.n.io to s.t.n.interactive
Less noise on a partest failure.
Adds equals and hashCode to three classes that implement Ordered.
Adds a hashCode method to the Settings class for Ant.
Seals some case class hierarchies.
Unseal a uselessly sealed case class.
Updates .gitignore files.
additional documentation for GenBCode
SI-7599 [Avian] Prevent TCO in test to inspect stack
Remove dependency on combinators from CommandLinerParser.
SI-7344 Specialize methods in private scopes
SI-7590 TreeSet should fail fast if Ordering is null
SI-7603 Speculative fix for annotation binding error
Get rid of raw types which cause unnecessary warnings
SI-7600 [Avian] Skip tests r/stream_length and r/t4294
SI-7511 Remove indirection of numeric methods
SI-3936 - add test case to show that SI-3936 is already fixed
SI-6855: REPL emits error on partial pastie
Set scene for Predef.$scope's demise.
Remove dependency on xml in ast.parser
Remove dependency on xml in MarkupParsers
Remove dependency on xml in plugin loading.
Remove dependency on xml in ScalaRunTime.
Remove dependency on xml in sys.process.
Refactoring to the scala-concurrent-tck.scala   - there were numerous logical issues with the former implementation     - failed assertions may not fail the build   - there was a lot of ceremony and noise
Cleaning up method implementations in Future     Optimizations:     1) Avoiding isDefinedAt + apply and using applyOrElse to allow for optimizations later     2) Reducing method sizes to be more JIT + inliner friendly     3) Reusing core combinators to reuse inliner/JIT optimizations and be more code-cache friendly
SI-7571 Allow nesting of anonymous classes in value classes
SI-7592 Replace s.t.n.u.TreeSet with s.c.m.TreeSet
SI-7582 Only inline accessible calls to package-private Java code
SI-7582 ClassfileParser: populate privateWithin of Java module class
Move WeakHashSetTest to junit tests.
SI-7584 Test and spurious warning fix for by-name closures
Add Eclipse project for JUnit tests.
Add support for JUnit tests
SI-7439 Avoid NPE in `isMonomorphicType` with stub symbols.
Removed sbt build.
SI-6221 inference with Function1 subtypes.
Removed redundant `retypedMethod` in `Duplicators`
SI-7479 Make test/files/run/tailcalls.scala pass on Avian
Add Duration.toCoarsest method
[backport] relax time constraint in duration-tck.scala (for Windows VMs) (cherry picked from commit 3e0fbc0193f0b6f58dc16dae3824677e9902dc7b)
SI-6747 Deprecate Range#{numRange,last,terminal}Element{s,}
[backport] SI-7498 ParTrieMap.foreach no longer crashes
SI-7364 Allow raw types in parent position in Java sources
SI-7505 Test case for pattern matcher + type alias bug
Eliminate needless Options.
unifies handling of T's in various analyses of Foo[T]'s
fixes a crash on a degenerate macro definition
SI-7151 Emit final in bytecode for final inner classes.
SI-6811 Remove scala.annotation.cloneable
SI-5031 fixed in GenBCode
Document exceptions thrown in some conversion methods of String
SI-2464 Resiliance against missing InnerClass attributes
Cleanup of crash output.
SI-7479 Add avian option to partest's diff filter...
SI-5022 Retain precise existentials through pattern matching
SI-6308 Specialize methods that have some unspecialized params
SI-7264 Initialize owner when searching for companion.
SI-7418 Avoid concurrent use of compiler in REPL startup
SI-6899, prohibit dangerous, useless implicit conversions.
Refactor testing logic for only running under certain JDK versions
Modify perRunCaches to not leak WeakReferences
SI-7149 Use a WeakHashSet for type uniqueness
SI-7150 Replace scala.reflect.internal.WeakHashSet
Revert "SI-7517 type constructors too eagerly normalized."
cleans up 82f0925
refactors IMPLPARAM_xxx constants into value classes
more refactoring and explanations in importers
two bytecode tests atune with bytecode by GenASM
new bytecode emitter, GenBCode, for now under a flag
an ICode InvokeStyle can now answer whether it isSuper
SI-7375 ClassTag for value class aliases
Finalized math.E and math.Pi.
SI-7520 bug in subtyping.
SI-7517 type constructors too eagerly normalized.
Eliminated the shared logic.
New method typeRelationPreCheck.
Add a TriState value class.
Revert "SI-6039 Harden against irrelevant filesystem details"
SI-6309 Test case for early-init / private[this] crasher.
SI-7498 ParTrieMap.foreach no longer crashes
Test for reading JDK 8 (classfile format 52) class files.
SI-7516 Revert "SI-7234 Make named args play nice w. depmet types"
SI-7399 : Take scala.concurrent.context.maxThreads into account
SI-7474 Parallel collections: End the exception handling madness
applying Jason's aesthetics suggestion
changes some definitions to use Symbol.map
refactors macro runtimes
refactors macro compilation
refactors importers
refactors macro tests
macro engine refactoring
SI-7461 c.typeCheck(silent = true) now suppresses ambiguous errors
less magic in fast track macros
new starr that supports macro ???
SI-7088 Array crasher in erasure.
Make all numeric coercions explicit.
A test case for a recent LUB progression.
Golfed about 20 lines into the sand trap.
Reversing reversion of ac6504b8c4.
skipping trips to specializeTypes when not necessary in constructors
separation of concerns: guard non-specialized ctor-stats in constructors
readability for intoConstructors transformer
separation of concerns: elision in constructors
separation of concerns: delayed-init in constructors
method transformClassTemplate() turned into class TemplateTransformer
eliding what the constructor phase elides but with less effort (2 of 2)
eliding what the constructor phase elides but with less effort (1 of 2)
how stuff works: elision of param-accessor-fields and outer-accessors
handling AnyVal special case early on to simplify logic afterwards
warn about uninitialized reads (in constructors), self-contained check
Temporary reversion of a bit of d8b96bb858.
Print raw types correctly.
SI-7198 Par-Test uses filters files
SI-7519 Less brutal attribute resetting in adapt fallback
SI-7003 Partest redirects stderr to log file
SI-7421 remove unneeded extra-attachement in maven deploy
SI-7469 Remove deprecated elements in Java{Conversions,Converters}
SI-7287 include all compiler sources in -src.jar
A couple additional simplifications.
SI-7486 Regressions in implicit search.
SI-7509 Avoid crasher as erronous args flow through NamesDefaults
SI-6138 Centralize and refine detection of `getClass` calls
Concision contribution.
Avoid caching different types in TypeSymbol.
PathResolver uses platform EOL to mkStrings
SI-7410 REPL uses improved tools.jar locator
SI-7473 Bad for expr crashes postfix
Cache the most recently created SubstTypeMap.
SI-6811 Deprecate scala.util.parsing.json
SI-7502 removing non-existent element from ListMap returns same map.
Added another test.
SI-7436 Varargs awareness for super param aliasing.
SI-3425 erasure crash with refinement members.
SI-7499 Additional test case for SI-7319
Increase build.number to 2.10.3
SI-7391 Always use ForkJoin in Scala actors on ... ... Java 6 and above (except when the porperty actors.enableForkJoin says otherwise)
Swabbing exprTypeArgs.
Help makeFullyDefined allocate fewer ListBuffers.
Tried to follow own advice with isCoercible.
Wipe some dirt off protoTypeArgs's face.
Splashed soap and water on checkAccessible.
Pull some big chunks out of checkAccessible.
Remove isPossiblyMissingArgs.
Make cookJavaRawInfo return this.type.
Annotated return type of a method.
Commented out code from 2008.
Commented out code from 2007.
Commented out code from 2006.
Scrubbing up inferPolyAlternatives.
Moving on to checkBounds.
Cleaning crew moves down the hall.
Cleaning up isApplicable and neighbors.
Harden partest against duplicate paths.
Moves AbstractFileClassLoader to scala-reflect.jar
SI-7494 Tests for status quo
An attempt to make tests deterministic.
SI-7427 stop crashing under -Ydebug.
Reimplementing much of the DefaultPromise methods Optimizations: 1) Avoiding to call 'synchronized' in tryComplete and in tryAwait 2) Implementing blocking by using an optimized latch so no blocking ops for non-blockers 3) Reducing method size of isCompleted to be cheaper to inline 4) 'result' to use Try.get instead of patmat
SI-7494 Each plugin must only be instantiated once.
SI-7201 scaladoc url in scala-(library,actors,swing,reflect) pom
SI-7486 regression in implicit resolution.
SI-7492 Remove -Ystruct-dispatch and associated code
Unprivatize methods in SyncVar.
Revert "SI-7469 Remove @deprecated MurmurHash elements"
Prevent slash duplication.
SI-7484 Indentation and whitespace fixes
SI-7484 Add @SupressWarning(rawtypes/unchecked)
[nomaster] unbreaks test.bc
SI-7464 allows FieldMirror.set to update vals
No longer cache all subclass templates.
Remove self types check suppression usage from scaladoc.
Incorporated reviewer feedback.
SI-7482 Don't cook raw types after erasure.
remove unused methods: checkStable, isStableExceptVolatile
SI-6815 untangle isStable and hasVolatileType
make treeInfo more globally visible
[backport #1727] SI-7359 cyclic nested java class
SI-7469 Remove @deprecated scala.util.logging
Deprecate parameter names in scala.concurrent
Improve code style in the Scaladoc implementation.
Read-eval-print : the script engine does not need print so make it lazy
ScriptEngine.eval() forwards Error instead of new ScriptException
SI-6488 Interrupt i/o threads on process destroy
SI-5886 Remove check for packed type conformance.
SI-3943 Test case for already-fixed Java interop bug
No bounds-driven inference for the named.
SI-6424 Scaladoc: Use mapNodes.get(_) to avoid NoSuchElementException
SI-7476 Add documentation to GenericTraversableTemplate
SI-7469 Remove @deprecated scala.util.parsing.ast
SI-7469 Remove @deprecated MurmurHash elements
SI-7469 Remove deprecated elements in s.u.parsing.combinator
SI-7469 Make @deprecated elems in scala.concurrent private[scala]
removes duplication in inferImplicitValue
SI-7047 fixes silent for c.inferImplicitXXX
SI-7167 implicit macros decide what is divergence
macroExpandAll is now triggered in all invocations of typed
SI-5923 instantiates targs in deferred macro applications
SI-6406 Restore deprecated API
SI-1786 incorporate defined bounds in inference
Actual SI-6555 fix, Scaladoc filter works WITH keyboard shortcuts too
easy way of writing not implemented macros
Incorporated reviewer feedback.
Refactored stabilize.
Eliminated HKmode.
Eliminated RETmode.
Eliminated SNDTRYmode.
Started eliminating modes.
Corralling Modes into a smaller pen.
[nomaster] removes duplication in inferImplicitValue
[nomaster] SI-7166 catches DivergentImplicit in c.inferImplicitXXX
[nomaster] SI-7047 fixes silent for c.inferImplicitXXX
[nomaster] SI-7291: No exception throwing for diverging implicit expansion
[nomaster] SI-7167 implicit macros decide what is divergence
[nomaster] macroExpandAll is now triggered in all invocations of typed
[nomaster] SI-5923 instantiates targs in deferred macro applications
[nomaster] temporarily breaks SI-5353
SI-7442 Update bundled Fork/Join pool (JSR166y)
fixes a checkfile breakage in 2.10.x
pull request feedback
Par-Test includes log in transcript of failed exec
Boil out some duplicated parser logic.
Flesh out copyMemberDef methods with copyModuleDef.
SI-7383 - Call ExecutionContext.prepare in Future.apply to allow for capturing local context like ThreadLocals and then re-establishing them prior to execution, as per intention of EC.prepare
replaces inferBootClasspath with a simple lookup at sun.boot.class.path
c.typeCheck(silent = true) now suppresses ambiguous errors
removes the traces of always on debug diagnostics
fixes a crash in ReflectionUtils.systemProperties
SI-6039 Harden against irrelevant filesystem details
Limit unnecessary calls to Type#toString.
fix typo in comment
Scaladoc: fixing small typo in PartialFunction.scala
literal() now assigns a position to the tree it produces
SI-7325 cleans up corner cases of percent handling in StringContext.f
Hardening against nulls for deserialization.
Absolutized paths involving the scala package.
SI-5734 Allow setting of socket timeout for remote actors
Partest can --show-diff again after incremental report.
SI-7441 Don't ramble on about inapplicable implicits.
SI-6091 overeager warning for reference equality
SI-7409 Par-Test: A crash is not a DNC for neg tests
Partest has an optionable wait period.
SI-7349 Partest supports test-interface
Update ScalaCheck to 1.10.1.
Partest testnum field width is sensitive to total tests
SI-7358 Partest fails on scalacheck failure
More useful checkfile output in interactive tests.
SI-7362, crash in presentation compiler.
use relative symlink in distpack
SI-7432 add testcases
SI-7385 crash in erroneous code
SI-5634 eliminate overly verbose error message
SI-6532 emit debug info in compiled java.
SI-7432 Range.min should throw NoSuchElementException on empty range
Route -explaintypes through reporter.
indentation typo
Address a deprecation warnings in scala-swing.
SI-6784 Localize feature imports in scala.swing.
SI-6863 root cause fixed using factory of scala.runtime.*Ref
SI-7271 fixes positions of string interpolation parts
BytecodeWriters.BytecodeWriter doesn't need to fiddle with Symbol
compiler flag -Ygen-asmp to emit .asmp textual files for bytecode
SI-7426 Crash in pickler.
Documented lateMETHOD flag.
Call method rather than duplicating method.
SI-7398 Add support for java8 default methods
no need to manually clear perRunCaches in GenASM
deprecation cycle for definitions.NPEConstructor
Refactor DirectTest so java can be tested.
maps in GenASM guaranteed mem-leak-free by perRunCaches
SI-7291: Remove error kinds.
SI-7291: No exception throwing for diverging implicit expansion
SI-7422 GenASM populates and clears its maps within a Run
role played by magic constant in ScalaSigBytes
another GenJVM remnant that goes away
removing remnants from the GenJVM era
static methods may have local variables too, some day
improved naming of variables in constructors phase
SI-7421 remove unneeded extra-attachement in maven deploy
Corrects link in README.rst
SI-7403 Stream extends Serializable
Update links to old website, in preparation for launch.
Created utility function for dropping by-name-ness.
check added instruction to ASM MethodNode
SI-6943 warn on value class miscomparison.
translation for DelayedInit keeps more code in original class
avoids multiple evals of isSubClass DelayedInitClass
for null outer pointer, NPE via throw null
SI-7367 scaladoc crash on constructing the model for annotations.
Updated jline and rebuilt.
SI-7402 List extends Serializable
SI-6771 Alias awareness for checkableType in match analysis.
SI-7369 Avoid spurious unreachable warnings in patterns
Minor overhaul of lub-producing typer methods.
Simplify some checks in Refchecks.
Added ensureFullyDefined.
Added orElse to Type.
Disabled failing bitset test.
Eliminated the accumulated feature warnings.
Eliminate a pile of -Xlint warnings.
Taught -Xlint about @implicitNotFound.
SI-7355 Handle spaces in paths in Windows batch files.
Warn on selection of vals from DelayedInit subclasses.
SI-6898 Document AnyVal box and unbox implemention by BoxesRunTime
Reverting changes to AnyVals generated classes in 9a82fc0
SI-4365 nondeterministic failure in asSeenFrom
Par-Test allows redefinition of srcDir by Ant
AbstractFile.getDirectory does not return null when outDir is "."
SI-6675 Avoid spurious warning about pattern bind arity.
SI-7324 jvm not cool with 255+ parameters
SI-7345 Address review comments.
SI-7345 Improved Context.toString
SI-7345 Eliminate the `depth` var.
SI-7345 Drive by refactoring of pattern matching for `arg: _*`.
SI-7345 Factor out method to clear and restore undetparams.
SI-7345 Remove unneeded warning.
SI-7345 Doc and TODO comments around Context.
SI-7345 Produce Context#imports from the context chain
SI-7345 Refactor manual iteration to use foreach.
SI-7345 Move `inSilentMode` from Infer to Context.
SI-7345 remove unused methods.
SI-7345 Prefer using a throwaway silent context over buffer flushing.
SI-7345 More refactoring and documentation in Contexts
SI-7345 Exploit named/default args   - Collapse overloads of `rootContext`   - make `atOwner` more concise
SI-7345 Encapsulate warning and error buffers in ReportBuffer.
SI-7345 Add Context#isLocal, akin to Symbol#isLocal
SI-7345 Use combinator to find next enclosing non-template.
SI-7345 Remove comment that appears obsolete.
SI-7345 Rationalize overloads of Context#make
SI-7345 Represent the boolean modes in Context in ContextMode.
Add :kind command to REPL
Simplify type bounds.
-Yshow-member-pos, print the positions of members.
SI-7319 Remove unused method.
SI-7377 Remove special treatment of `stableFun()` in patterns.
SI-7314 Partest locates tools.jar and javac
SI-7388 Be more robust against cycles in error symbol creation.
Quiet down overloaded implicit warning.
SI-7376 Bad doc variable error is positioned at the variable.
SI-7376 Additional trivial Scaladoc format corrections
Absolute path in error message.
Rewrite TailCalls for performance and immutability.
SI-7376 Unmoored doc has correct position
Interactive scaladoc: mark new typer run when done.
Change unrecognized scaladoc comments to C-style
SI-7376 Scaladoc warns when discarding local doc comments with API tags
SI-7319 Clear error buffer during Typer reset.
SI-7335 Remove special case for import of Predef._ in Predef.scala
SI-7360 Don't let a follow-up TypeError obscure the original error.
Remove scaladoc deprecated option.
SI-6286 IllegalArgumentException handling specialized method.
Reifier -> AST Node test.
SI-7330 better error when pattern isn't a value
SI-6386 typed existential type tree's original now have tpe set
SI-7289 Less strict type application for TypeVar.
SI-7335 Sharpen up comment about implicit prioritization.
SI-7335 Add logging for a now-impossible* case in Symbol#exists.
Reduce visibility of implicit class tags.
SI-7335 Don't import Predef._ in Predef.scala
SI-7335 Mandate that parents of Predef must be defined in Predef.scala
Revert "SI-6387 Clones accessor before name expansion"
SI-7329 duplicate default getters for specialized parameters.
SI-7080 improve boundary value checking for BitSet
SI-7337 Error out on missing -d directory.
Transcendent rewrite of isSameType.
Centrally unify module class representations.
Optimization/logic improvement in Scopes.
if starr.use.released fetch Scala ${starr.version} for STARR
assume build.release when maven.version.suffix is set
make quick.done depend on quick.bin again
SI-7300 single line comment in multi line comment
SI-6289 Paulptest demonstrating javac errors
SI-6289 Partest in technicolor and showing javac errors
Add float version of the double NaN tests
SI-7292 Deprecate octal escape literals
SI-7321 Memory leak in specialize on multiple compiler runs.
SI-6937 core type tags are no longer referentially unique
Take the N^2 out of the compiler's TreeSet.
Add () to side-effecting u1/u2/u4.
Reduce duplication in JavaMirrors.
Brought some structure to the classfileparser.
Cleaning up error handling.
Fleshing out comments on JavaAccFlags.
Abstract over java.lang.reflect.{ Method, Constructor }.
Value class to represent jvm flags.
Added ensureAccessible to reflection library.
comments to address reviewer feedback
Simplify interplay between Uncurry Info- and Tree-Transformers
Refactor existential related code out of types.
Add a cautionary comment to TreeSymSubstitutor.
SI-7237 Always choose ForkJoinTaskSupport
SI-6715 Shouldn't return "" from TermNames.originalName
Backport #2289's TermNames.unexpandedName as TermNames.originalName
formatting
Preliminary support for zinc.
Regularity for build.xml: 1 output dir / project
SI-7147 Diagnostic for unexplained assertion in presentation compiler.
get rid of args element in staged-scalac
SI-7315 Test @deprecatedInheritance / @specialized interplay
SI-7312 @deprecatedInheritance now ignores same-file subclasses
Strip version suffix from diffutils.
Use java-diff-utils for diffing in partest.
SI-7110 Warn about naked try without catch/finally
Optimization: avoid call to exists in PlainFile#iterator
Optimization: avoid isDirectory call in DirectoryClassPath traversal
Add counters to File#{exists, isFile, isDirectory}.
Clean up pack targets. Better dependency tracking.
SI-7261 Implicit conversion of BooleanSetting to Boolean and BooleanFlag
SI-7261 Implicit conversion of BooleanSetting to Boolean and BooleanFlag
SI-7302 importing from Any.
ant clean only zaps the quick stage
Run test.scaladoc before test.suite. Fail fast.
SI-7186 Slim down some TypeRefs by 8 bytes.
SI-7290 Minor cleanups driven by review comments.
Iterator.++ no longer blows the stack.
SI-7200 Test case for fixed type inference error.
Scaladoc: Load scripts at the bottom, and with a defer attribute
doc fix for Types.baseClasses to match spec definition of Linearization 5.1.2
SI-6793 Don't use super param accessors if inaccessible.
Improve testing interactive experience.
Let continuations library sources determine docs.lib's actuality
Preparation for faster PR validation
Remove duplication in java builds of fjbg/asm/forkjoin
Formatting. Introduce {asm,forkjoin,fjbg}-classes props.
remove unused ant targets: test.ant, test.classload, test.positions
run test.bc as part of tests on 2.10.x
restored dependency of pack.done on quick.bin
Overhauled local/getter/setter name logic.
SI-6387 Clones accessor before name expansion
An IntelliJ Module for the recently modularized REPL.
SI-6168 Retain prefix when parsing types in JVM signatures
Log when invokedynamic instruction is encountered
SI-6580 Scaladoc: Should not close void elements
SI-7299 Improve error message for eta-expanding 23+ param method
SI-7296 Remove arity limit for case classes
SI-7296 Avoid crash with nested 23-param case class
Correct sorting example for Ordering in scaladoc
Cleanup obsolete options in CodeGen.
SI-7294 Deprecate inheritance from TupleN.
SI-7294 Treat TupleN as final under -Xfuture
Allow getting STARR via maven, also: locker.skip
Use stage/project for taskname instead of scalacfork
Sanity for build.xml: exscriptus&positus delendus est.
SI-7246 Make $outer pointer elision Java aware
SI-6210 Test case for already-fixed pattern matcher bug
Expand test for SI-6124 to demonstrate cause of SI-7285.
SI-7290 Discard duplicates in switchable alternative patterns.
SI-5717 error when bytecode cannot be written
The script engine is given a better binding mechanism and reflexive access
Bypass determination of protection domain when resource is not in a jar
SI-7102 Specialize isEmpty for bitsets
Doc -> C-style comments for local symbols to avoid "discarding unmoored doc comment" warning when building distribution for scala itself.
fixes the craziness in JavaUniverse.log
SI-5699 correct java parser for annotation defs.
an amazing discovery made by Iulian
removes duplication in FreeDef extractors
Reduce duplication and increase verbosity in MiMa execution.
SI-7251, compiler crash with $.
SI-7253: update comments and naming
Remove fragile code, made redundant by previous commit
SI-7253: respect binary compatibility constraints
removed a redundant var in JavaWriter.flagsToStr
SI-7258 Don't assume order of reflection values in t6223
[backport] SI-7237 Always choose ForkJoinTaskSupport
Add positive and negative testcases for SI-6123 (-explaintypes)
SI-6123: -explaintypes should not explain errors which won't be reported
Read version 51 (JDK 7) class files.
Cleanup of constant optimization
Eliminated containsNull.
Completely remove isNotNull/notNull.
SI-7247, deprecated NotNull.
Remove -Xcheck-null setting.
Removed -Ynotnull setting.
SI-7249 Reign in overzealous Function0 optimization.
Restore sketchy dependency to quick.bin.
SI-6921 SI-7239 Tread lightly during exploratory typing
SI-7236 Deprecate ThreadPoolTaskSupport and friends
Update sbt.latest.version to sbt's latest version.
Optimize rebalance method by using null optimized list implementation.
update eclipse projects (partest, repl & scaladoc)
Warn about locally identifiable init order issues.
Removed dead src directory.
Eliminate a bunch of -Xlint warnings.
Warn about forgotten string interpolators.
SI-7240 fixes language feature lookup
SI-874 actual JSR-223 implementation
SI-874 reflect.io improvements
Close after slurping (fixes SI-7244)
Modularized the repl.
SI-6601 Close access loophole for value class constructors
SI-5513: add inplace set-theoretic operations for mutable bitsets.
Moved some numeric subtyping logic closer to center.
Simplified the widening logic.
SI-7228, bug in weak subtyping.
Add eclipse projects for interactive, scaladoc.
IntellIiJ module definitions for scaladoc, interactive and continuations-*.
SI-7233 Account for aliased imports in Erasure
SI-7233 Account for aliased imports in eta expansion.
a typo corrected
SI-7328 Bail out of names/defaults if args are error typed
SI-7132 - don't discard Unit type in interpreter
Deprecated custom ant task 'Same'.
Eliminated all forInteractive/forScaladoc uses.
Moved interactive code into src/interactive.
Moved scaladoc code into src/scaladoc.
Give interactive tests their own target.
Give partest its own classpath in build.xml.
Teach partest the magic of abstraction.
Moved interactive sources into separate directory.
Moved scaladoc sources into separate directory.
Enabling commit for interactive/scaladoc modules.
Bring some sanity to the stability test.
SI-7234 Make named args play nice with dep. method types
reifier is now aware of SI-7235
SI-6725 `f` interpolator now supports %n tokens
SI-5710 has fixed itself
SI-7006 Cleanup from code review
Analyze constants to remove unnecessary branches
SI-7006 Prevent unreachable blocks in GenICode
No-op merge for [nomaster] part of 2.10.x.
Add option to disable optimization
Carve up Types.scala
SI-7214 outer check based on dealiased pattern type.
Check named-args-for-clarity incur no extra bytecode
Name boolean arguments in src/library.
Name boolean arguments in src/reflect.
Name boolean arguments in src/compiler.
Remove unused symbols and imports from the library.
Since the problem in SI-6758 is fixed, it's ok to move checking for unused imports to Analyzer. This allows the check to be used in the IDE.
Eliminated separate RangePositions trait.
Disentangled RangePositions from interactive.
Cleanup in isHKSubType0.
Add some logging to sinful typevar methods.
Added methods debuglogResult and devWarningResult.
Always at least log devWarnings.
[port] SI-7183 Disable unreachability for withFilter matches.
simplify dependencies between patmat components, remove self types
better names for components of MatchTranslator
move sat solving to separate file
Renamed type param to be consistent with convention.
Establishes what's up with widening in asSeenFrom.
SI-7132 - don't discard Unit type in interpreter
Simplified correspondingTypeArgument based on reviewer feedback.
Require firstKey and lastKey on IntMap to be tail recursive.
added tex source build
SI-7185 Avoid NPE in TreeInfo.isExprSafeToInline
[nomaster] SI-7195 minor version mustn't introduce warnings
test.done again checks bin compat (using mima 0.1.5)
SI-6816 Deprecate -Yeta-expand-keeps-star
Revert SI-6240 synchronization for runtime reflection
Refactors AsSeenFromMap to expose extension point.
Tone down a soft-warning to only show under -Ydebug.
SI-7159 Distinguish between assignability and sub typing in TypeKinds
No-op merge of [nomaster] subset of 2.10.1.
SI-7190 macros no longer give rise to bridges
SI-7159 Remove erroneous INT <:< LONG in TypeKinds
SI-7159 Prepare to remove erroneous INT <:< LONG in TypeKinds
adds some comments to resetAttrs
SI-7159 Remove unreachable cases in GenICode#adapt
SI-7181 Eliminate unnecessary duplication of finally blocks
SI-7126 Eliminate a source of malformed types.
relax time constraint in duration-tck.scala (for Windows VMs)
Reconcile definitions of stability.
SI-7181 Prepare to remove duplicated finally blocks
SI-7006 Simplify jump-only block destination determination
SI-7006 Eliminate unreachable blocks
SI-7006 Recognize more jump only blocks
SI-7006 Improve jump-elision code in GenASM
SI-7183 Disable unreachability for withFilter matches.
SI-7126 Account for the alias types that don't dealias.
Address some Scaladocrot
Modernize legacy backquotes in comments.
Remove redundant explicit returns.
Don't wrap an array just to get its length.
Remove redundant 'val' from case class params.
More explicit empty paren lists in method calls.
Reorder to avoid code appearing like a forward reference.
Banish needless semicolons.
Be explicit about empty param list calls.
Don't override empty-paren methods as paren-less.
SI-7109 SI-7153 Generalize the API to get docComments: allow to force docTrees for given fragments. Don't type-check when forcing doc comments, but rather  do it directly. Test the new functionality as well as better tests for the old one.
fixes the test for SI-7112
fixes the test for SI-7112
fixes the test for SI-7112
SI-7171 Consider prefix when assessing type finality.
SI-7015 Cleanup from review of null duplication
Typographical adjustments
Over-wide line fix for types grammar
Replaced build script with make file
Minor pagination tweak
please ant with filenames, add comments
SI-7015 Removes redundant aconst_null; pop; aconst_null creation
SI-7164 - Removing NotImplementedError as Fatal from s.u.c.NonFatal
Additional test case for Lukas' fix to annotated originals.
Miscellaneous cleanups:
fix poorly labeled section links fix over-wide grammar text
Use the original type faces
bump build number to 2.10.2
Boxing cleanup: erasure, post-erasure, value classes.
set Luxi Mono and Heuristica (Utopia) as the default fonts for monospace and main text respectively for PDF output.
Adjust layout
use \sigma instead of raw unicode character in math mode, as it does not render in the PDF otherwise.
Extracted abstract implicit vals from Types.
added build step for ebook
PDF building now working with pandoc 1.10.1
using standard markdown for numbered lists (hopefully better rendering on github) added note on todo command conversion
fixed reference to class diagram fixed undefined macro
fixed inline code block
fixed inline code blocks fixed math array for PDF output
fixed inline code blocks removed LaTeX labels converted TODOs to comments
fix for undefined macro
fixed undefined macros and converted comment block
fix for unicode character conversion error in producing PDF fix for grammar code block (duplicate style annotation)
SI-6576 Workaround / diagnostic for IDE NPE.
unit test ide-t1000567 exercises SI-5063, aka #1000567.
Additional test case for Lukas' fix to annotated originals.
Removing disabled, unneeded futures tests
resetAttrs now always erases This.tpe
Shadowed Implict typo (fixes no issue)
SI-5744 evidence params are now SYNTHETIC
remove unused imports
make Future scaladoc examples up-to-date and compilable
SI-7134: don't require doc.Settings in base api of scaladoc.
SI-7120 Erasure must honor typeref prefixes
SI-6642 Code cleanup from review of iteratorFrom
SI-6642 Refactor mutable.TreeSet to use RedBlackTree instead of AVL
SI-6642 Adds iteratorFrom, keysIteratorFrom, and valuesIteratorFrom
SI-6642 Code cleanup on RedBlackTree#TreeIterator
check scala-swing for binary compatibility
[nomaster] Revert "Added a Swing ColorChooser wrapper"
[nomaster] Revert "Added a Swing PopupMenu wrapper"
[refactor] move some logic-related code
[refactor] better name for symbolicCase
[refactor] make hash-consing more robust
drop Cond in favor of Prop
[refactor] prepare migration from Cond to Prop
[refactor] type analysis consolidation
[refactor] move PatternMatching.scala to transform.patmat
re-align 2.10.x's pattern matcher with master's
SI-6355, weakend implementation restriction on applyDynamic.
Maintenance of Predef.
SI-7091 Don't try to put a protected accessor in a package.
runtime reflection: death from thousand threads
removes the assertion in missingHook
synchronizes names
synchronizes pendingVolatiles
synchronizes toolboxes
SI-7045 reflection now auto-initializes selfType
optimizes Scala reflection GIL
initializes lazy vals and inner objects in advance
introduces GIL to Scala reflection
cleans up initialization of runtime reflection
reflection no longer uses atPhase and friends
synchronizes symbols
removes the crazy extraneous log
moves Symbol#SymbolKind to Symbols
silences t6323a
SI-6514 Avoid spurious dead code warnings
[nomaster] Revert "SI-6548 reflection now correctly enters jinners"
SI-7091 Add a diagnostic for the "no acc def buf" error.
Application is deprecated. Replaced with App
[nomaster] inline importPrivateWithinFromJavaFlags into SymbolTable
[nomaster] Revert "cosmetic renamings in runtime reflection"
[nomaster] refactor AdaptedForkJoinTask, uncaughtExceptionHandler
[nomaster] can't add new class BatchingExecutor
[nomaster] bring back SerializeStart from fa3b8040eb
[nomaster] duplicate tailImpl as a private method
[nomaster] Revert "SI-4664 Make scala.util.Random Serializable"
[nomaster] run mima both ways, filter out failures
Tolerate symbol sharing between accessor/field.
Expanded bytecode testing code.
SI-6158 Restore compile error output under partest --show-log
SI-6935 Added readResolve in BoxedUnit When deserializing Unit, it would return an instance of Object, but not a Scala Unit. By adding readResolve, the deserialization of Unit will work.
SI-5675 Discard duplicate feature warnings at a position
SI-6370 changed ListMap apply0 method to produce correct error message when a key is not found Current implementation of apply0 relies on tail method to iterate over all keys. When the list gets to its end, tail produces an 'empty map' message in its exception, which is thrown by ListMap. This change checks if the collection is empty before calling tail and provides a more appropriate key not found message.
accommodates pull request feedback
term and type reftrees are now reified uniformly
SI-6591 Reify and path-dependent types
SI-7096 SubstSymMap copies trees before modifying their symbols
SI-6961 no structural sharing in list serialization
SI-6187 Make partial functions re-typable
SI-6146 More accurate prefixes for sealed subtypes.
SI-5082 Cycle avoidance between case companions
SI-6113 typeOf now works for type lambdas
SI-6807 Deprecating the Actors library.
SI-7026: parseTree should never return a typed one
[nomaster] Revert "SI-5017 Poor performance of :+ operator on Arrays"
SI-7070 Turn restriction on companions in pkg objs into warning
Update src/library/scala/sys/process/package.scala
Update src/library/scala/sys/process/ProcessBuilder.scala
Add a request to presentation compiler to fetch doc comment information. Refactor scaladoc base functionality to allow it to be mixed in with Global in the IDE.
[nomaster] SI-6773 Makes the SI-6150 changes binary compatible with 2.10
introduces an exhaustive java-to-scala test
[nomaster] verifies compat with 2.10.0
[nomaster] Revert "refactors handling of parent types"
[nomaster] Revert "introduces global.pendingSuperCall"
SI-6773 Changes IndexSeqFactory to be "since 2.11"
SI-7060 More conservative dead code elim marking
SI-6888 Loosen criteria for $outer search.
[nomaster] Revert "DummyTree => CannotHaveAttrs"
[nomaster] Revert "more ListOfNil => Nil"
[nomaster] Revert "s/SuperCallArgs/SuperArgs/"
[nomaster] revives BuildUtils.emptyValDef
[nomaster] removes Tree.canHaveAttrs
[nomaster] doesn't touch NonemptyAttachments
SI-6989 privateWithin is now populated in reflect
reflecting @throws defined in Scala code
pullrequest feedback
[nomerge] SI-6667 Demote a new ambiguity error to a lint warning.
Revert "SI-6422: add missing Fractional and Integral alias in scala package"
Class symbols can't be contravariant.
Analyzer Plugins
SI-1803, plus documentation and cleanups in Namers, mainly in typeSig
Keep annotations when computing lubs
Allow for Function treess with refined types in UnCurry.
case module toString is synthetic
replace symbols correctly when subtyping dependent types
SI-6017 Scaladoc: Show all letters without dangling links
SI-6017 Generate Scaladoc's index links in Scala side
SI-5313 Minor code cleanup for store clobbering
SI-5313 Test clobbers on the back edge of a loop
SI-6666 Catch VerifyErrors in the making in early defs.
Broader checks for poisonous this references.
Add a test case from the comments of SI-6666.
SI-6666 Account for nesting in setting INCONSTRUCTOR
Removed -Ymacro-no-expand.
Cleaning up after brutal merge of 2.10.x into master.
SI-7033 Be symful when creating factory methods.
SI-7022 Additional test case for value class w. bounds
[backport] SI-6482, lost bounds in extension methods.
SI-7039 unapplySeq result type independent of subpattern count
evicts javac-artifacts.jar
SI-7008 @throws annotations are now populated in reflect
SI-7029 - Make test more robust
SI-4714 Initialize history while initializing the REPL's reader
Overhaul of tools/partest-ack.
SI-2818 Make List.foldRight always do a reverse/foldLeft flip
SI-3353 don't extract <unapply-selector> into named-arg local val
SI-5151 - Add firstKey and lastKey to LongMap.
SI-7029 - Makes sure that uncaught exceptions are propagated to the UEH for the global ExecutionContext
SI-6941 tests
SI-6686 drop valdef unused in flatMapCond's block
no type test if static type <:< primitive value class
don't store subpats bound to underscore
no null check for type-tested unapply arg
refactor: prepare null check redundancy analysis
support testing bytecode similarity in ByteCodeTest
bytecode diffing support in ByteCodeTest
SI-7046 reflection now auto-initializes knownDirectSubclasses
[backport] Removed restriction on final vars, SI-2418.
SI-6812 scaladoc can opt out of expanding macros
changes the flags to not depend on partest
the scanner is now less eager about deprecations
evicts eponymous packages and objects from tests
SI-6539 moves @compileTimeOnly away from scala-reflect
SI-6669 Add . to the default scalap classpath
SI-6516, macros comparing types with == instead of =:=.
Expanded the comment on Type#normalize.
SI-7009: `@throws` annotation synthesized incorrectly
SI-5313 Eliminate more stores by replacing clobbers with null stores
Remove gratuitous var
SI-6726 Further optimization of pattern analysis
SI-6726 Hash consing for Pattern matching Sym-s
SI-6726 Add benchmark used for testing pattern matcher.
SI-6595, lost modifiers in early defs.
SI-6584, Stream#distinct uses too much memory.
SI-6426, importable _.
SI-6072, crasher with overloaded eq.
SI-5604, selections on package objects.
SI-5859, inapplicable varargs.
SI-5353, imperfect error message.
SI-5130, precision disappearing from refinement.
SI-4729, overriding java varargs in scala.
SI-2418, remove restriction on final vars.
Test case for SI-7009.
Add Bytecode test (ASM-based) to partest.
SI-6551 Expand test case into uncomfortable areas.
SI-6651 Substitute `this` in extension method sigs
Changes many calls to normalize to dealiasWiden.
Renames normalize to normalizeModifiers.
Pending test for SI-5459.
SI-6963 Add version to -Xmigration
[backport] Disabled SI-6987.
Optimization in AsSeenFromMap.
SI-6572 Test case, originally fixed in a3680be.
[backport] SI-6301 / SI-6572 specialization regressions
SI-5313 Do not eliminate stores that potentially wipe referenes
Revert "SI-6811 Misc. removals in util, testing, io, ..."
[backport] SI-5378, unsoundness with type bounds in refinements.
SI-7035 Centralize case field accessor sorting.
Move a test from pos to run to highlight bytecode deficiencies.
SI-6968 Simple Tuple patterns aren't irrefutable
SI-4602 Disable unreliable test of fsc path absolutization
A test case to guide the eventual fix for SI-6601.
Update a checkfile from a recent fix.
SI-4733 - fsc no longer creates a single temp directory for all users.
Disabled SI-6987.
Bumped partest MaxPermSize to 128m.
Make sure typed isn't called with an erroneous tree.
Put back a method which sbt is using.
A very interesting checkfile update.
Add PolyType to Infer#normalize.
Cleaning up dummy applied types and friends.
Removing superfluous method parameters.
Renamed methods to be less ambiguous in intent.
Added test for untested nested annotation restriction.
SI-6083, misleading annotation error message.
SI-5182, no position on annotation error.
SI-2577, SI-6860: annotation type inference.
[backport] SI-3577 BoundedWildcardType handling
Laying groundwork for a followup ticket.
SI-4859 Retain MODULE_LOAD in dead code elim.
SI-4859 Don't elide qualifiers when selecting nested modules.
Wider use of isTopLevel
Introduce a new Symbol test: isTopLevel.
SI-4859 Don't rewrite CC().CC2() to new CC2
SI-6556 Remove unneeded workaround in erasure.
Ill-scoped reference checking in TreeCheckers
Make value classes TreeCheckers friendly
Revert "SI-6601 Publicise derived value contstructor after pickler"
SI-4602 Make fsc absolutize source file names
SI-6853 changed private method remove to be tail recursive. Operations += and -= on mutable.ListMap rely on the private method remove to perform. This methods was implemented using recursion, but it was not tail recursive. When the ListMap got too big the += caused a StackOverflowError.
SI-6969, mishandling of SoftReferences in method cache.
Do not recompute stack frames when instrumenting bytecode.
Set `canRetransform` flag to `false` in instrumentation.
Correct whitespace in `ASMTransformer.java`.
SI-6434 Pretty print function types with by name arg as (=> A) => B
[backport] SI-6567 Warning for Option(implicitView(foo))
SI-6987 Tests fsc verbose output
Use the same default scalac options in all three partest frontends
SI-6932 Remove Batchable trait plus minor clean-ups
Removed class files.
SI-6231 Report unsupported free var capture by a trait.
SI-6811 Move scala.util.{automata,regexp} ... ... to scala.xml.dtd.impl and make it private[dtd]
SI-6811 Remove scala.xml.include.sax.Main
SI-6666 Restrict hidden `this` access in self/super calls.
SI-6994 Avoid spurious promiscuous catch warning
Addressing warnings.
Grammatical fix
Remove the term "pimp" from the repository
SI-6439 Avoid spurious REPL warnings about companionship
SI-6902 Check unreachability under @unchecked
Disable MIMA in master.
SI-6811 Remove scala.ScalaObject
use ArrayBuffer instead of Array to build Formulae
SI-6942 more efficient unreachability analysis
SI-6811 Remove the scala.annotation.target package
SI-6811 Misc. removals in util, testing, io, ...
SI-6811 Remove deprecated elements in scala.collection
SI-6811 Remove parts of scala.concurrent not needed by scala.actors
SI-6811 Remove the scala.util.grammar package
SI-6811 Remove scala.collection.mutable.ConcurrentMap
SI-6811 Remove primitive widenings and /:\
SI-6811 Remove deprecated constructors
SI-6811 Remove usages of scala.annotation.cloneable
SI-6811 Remove scala.annotation.serializable
SI-6601 Publicise derived value contstructor after pickler
align partest script with ant
SI-4976 Scaladoc: Add a source link to package objects
There is no "letters" method in this branch
Forgot to cherry-pick the .check file
SI-6443 Expand test coverage with varargs, by-name.
SI-6443 Widen dependent param types in uncurry
SI-6017 Scaladoc's Index should be case-sensitive
SI-6979 Small optimization in lub
Closes SI-6952: add correct error positions for Dynamic feature check.
use Constant::isIntRange even if it's NIH
SI-6956 determine switchability by type, not tree
SI-5568 Comment improvements for getClass on primitive intersection.
SI-6675 Test new warning under -Xoldpatmat.
SI-6675 -Xlint arity enforcement for extractors
Granted scaladoc its own Global.
Modifies "maybeRewrap" to focus more on the maybe.
Tweaked meta-annotation error based on feedback.
remove hack for old patmat unnecessary in 2.11
SI-5189 detect unsoundness when inferring type of match
SI-6375, warn on lost annotation.
Cleaned up meta-annotations.
SI-6905 - Switch to sneakyThrows instead of Unsafe.throwException as per new jsr166y to avoid issues with Android
Remove EqualsPatternClass.
SI-6963 Deprecates -Xmigration switch
SI-5954 Implementation restriction preventing companions in package objs
SI-6479 Don't lift try exprs in label arguments.
SI-6082 Conditionally expand @ann(x) to @ann(value = x)
SI-6126 Test case for varargs of tagged primitives.
SI-5440 Test case for exhaustiveness check
SI-5340 Change println to log
SI-6964 Remove build managers, both simple and refined.
SI-6955 switch emission no longer foiled by type alias
Restore pending repl-javap tests that now succeed under java 6.
Moved repl javap tests into pending.
SI-6955 switch emission no longer foiled by type alias
clean up synthesizePartialFunction
rework partial function synthesis
SI-6925 use concrete type in applyOrElse's match's selector
SI-5189 detect unsoundness when inferring type of match
SI-6946, SI-6924 Greatly improves IsTraversableLike docs
Made "mode" into a value class.
Renamed isTrackingVariance to trackVariance.
SI-5378, unsoundness with type bounds in refinements.
SI-6566, unsoundness with alias variance.
Boosted test coverage.
Handle variance exclusions in a less ad hoc manner.
Eliminated redundant validateVariance.
Sweeping up in Variances.
Move isFinalType logic to Symbol.
Move escaping local logic into VarianceValidator.
Eliminated VariantTypeMap.
Functionalization of Variance code.
Moved VariantTypeMap into Variances.
Moved Variances into SymbolTable.
Relocated redundant variance checking code.
Incorporated Variance value class in Variances.
Created value class Variance.
Repl javap decodes various synthetic names for us (fixing SI-6894)
macroExpandAll is now triggered by typed
SI-5923 adapt macros when they are deferred
generalizes macroExpand
typedPrimaryConstrBody now returns supercall
more precise errors for macros
parentTypes => typedParentTypes
changes isTermMacro checks to something more universal
fixes printing of AppliedTypeTree
adds Trees.replace(Tree, Tree)
makes macro override error more consistent
refactors handling of macros in repl
SI-5903 extractor macros do work
adds c.macroRole
SI-6555 Scaladoc's class filter shouldn't drop the last character
Backport of SI-6846.
SI-6641 Deprecate SwingWorker
SI-6641 Cull scala.swing.SwingWorker
SI-6930 adds documentation to reduceLeft in TraversableOnce
SI-6912 Avoid a typer cycle in overload resolution.
sbt-git-plugin has moved.
SI-6928, VerifyError with self reference to super.
SI-6923 Context now buffers warnings as well as errors
SI-6803: do not use java.net.URI, even more so incorrectly.
SI-6918 Changes REPL output from "defined module" to "defined object"
SI-6916 makes FlatHashTable#remove a Boolean not Option[A]
SI-6908 Cleanup of FlatHashTable nulls based on review
Made Symbol#associatedFile always return non-null
adds c.introduceTopLevel
SI-6915 Updates copyright properties to 2002-2013
avoid reflect overhead of certain array instantiations
proper elementClass for WrappedArray
SI-6908 Removes cannotStoreNull from FastHashSet/HashSet docs
comments on avoiding closure allocation in Global's assert() and require()
SI-6911, regression in generated case class equality.
SI-6908 Makes FlatHashTable as well as derived classes support null values
Updated copyright to 2013
SI-6897, lubs and varargs star.
SI-6896, spurious warning with overloaded main.
nested closures are flattened by calling supplementErrorMessage() directly
cleans up usages of <init>
New starr based on b7840d6b41.
LinearSeq lengthCompare without an iterator.
SI-6415, overly eager evaluation in Stream.
SI-6846, regression in type constructor inference.
Cleaning up type alias usage.
Shored up a hidden dealiasing dependency.
fixes the typedIdent problem for good
Removed dead implementation.
fusion of loops in Range.foreach() and Range.validateRangeBoundaries()
changes the flags to not depend on partest
Remove -deprecation from partest default options.
Eliminate allocations in Types.
Eliminate allocations in Trees and Symbols.
Eliminate allocations in Specialize.
Eliminate allocations in Trees.
Eliminate allocations in uncurry and the backend.
Eliminate allocations in BaseTypeSeqs.
Eliminate allocations in CPSAnnotationChecker.
Eliminate allocations in TypeMap.
Eliminate allocations in Growable.
Eliminating allocations in typeDepth.
Eliminating allocations in Codec.
Eliminating more allocations in the collections.
Eliminate allocations in ClassfileParser.
Eliminate allocations in ListBuffer.
a few performance improvements for toArray
SI-6194, repl crash.
bind + argc specialization = 20x perf boost
Removed old pattern matcher.
macro expansions are now auto-duplicated
enclosures are now strongly typed and are no longer vals
renames c.fresh to c.freshName
Changes reflection tests to use shorter name constructors
Changes tree pretty printer to use shorter name constructors
Changes reifier to use shorter name constructors
Adds extractors for TypeName, TermName and Modifiers
the scanner is now less eager about deprecations
showRaw can now print positions
adds Tree.nonEmpty
Moves annotationError outside typedAnnotation
SI-6829, SI-6788, NPEs during erroneous compilation.
Rewrote FastTrack for clarity.
SI-5017 Poor performance of :+ operator on Arrays
Remove stray debugging output line.
Remove stray debugging output line.
standard library chapter converted
converted xml expressions and user defined annotations chapters
fixed minor math layout and unsupported commands
Converted pattern matching chapter
Implicit Parameters and Values chapter converted
Stream.zip naturalsEx example does not compile => remove extra zip call
Do not recompute stack frames when instrumenting bytecode.
Set `canRetransform` flag to `false` in instrumentation.
Correct whitespace in `ASMTransformer.java`.
Eliminating var-like setter tpe_= on Tree.
Implicit vars should have non-implicit setters.
PluginComponent contributes description to -Xshow-phases.
Optimization in SpecializeTypes.
Integrate isNameInScope in Contexts.
Deprecate `scala.tools.nsc.Phases` because it's dead-code.
scaladoc Template: remove duplicate code and several usages of Option.get.
adds scala-reflect.jar to MIMA in ant
Test showing the absence of a forward reference
Deskolemize type skolems before pickling.
update mailmap
Remove dead code from `Global`.
Cleanup MemberLookup. Better explain ambiguous link targets.
SI-6809 Forbids deprecated case class definitions without parameter list
typedIdent no longer destroys attachments
fixes incorrect handling of Annotated in lazy copier
Removed some dead tests.
Removed src/detach.
simplifies checkBounds
Recurse into instantiations when stripping type vars.
Normalized TRUE/FALSE trees in the pattern matcher.
Eliminated some sources of tree sharing.
Cleanup in module var creation.
Extract base scaladoc functionality for the IDE.
Expand pattern match position tests.
SI-6288 Remedy ill-positioned extractor binding.
SI-6288 Position argument of unapply
Cleanups of reifyBoundTerm and reifyBoundType
SI-5841 reification of renamed imports
SI-6795 Simplify errors related to "abstract override" on type members
SI-6795 Adds negative check for "abstract override" on types in traits
Share the empty LinkedList between first0/last0.
SI-4922 Show default in Scaladoc for generic methods.
prevents spurious kind bound errors
s/SuperCallArgs/SuperArgs/
DRYer crash reports.
SI-6555 Better parameter name retention
SI-6614 Test case for fixed ArrayStack misconduct.
SI-6690 Release reference to last dequeued element.
SI-5858 xml.Node construction ambiguity is gone.
SI-5789 Use the ReplTest framework in the test
Support "javap -" for lastvar, move JavapTool into JavapClass.
SI-5789 Checks in the right version of the test
Small cleanup work done during my initial visits to the code.
SI-5789 Removes assertion about implclass flag in Mixin.scala
cosmetic renamings in runtime reflection
SI-6548 reflection now correctly enters jinners
SI-6766 Makes the -Pcontinuations:enable flag a project specific preference
Restore unmangling but add -raw; massage options to support tool args like -raw and combined -pv, and not pass through arbitrary options.
more ListOfNil => Nil
DummyTree => CannotHaveAttrs
evicts assert(false) from the compiler
introduces global.pendingSuperCall
refactors handling of parent types
unifies approaches to call analysis in TreeInfo
TypeApply + Select and their type-level twins
SI-6696 removes "helper" tree factory methods
Surgery on MANIFEST.MF.
Misc touchup after purging msil/fjbg/genjvm.
Cleanups of reifyBoundTerm and reifyBoundType
SI-6766 Create a continuations project in eclipse
SI-5841 reification of renamed imports
SI-6338 fixes the unchecked warning in quick.comp
Expunged the .net backend.
SI-6769 Removes GenJVM backend
Now the test suite runs MIMA for compatibility testing.
Warn when generated classfiles differ only in case.
SI-6770 Removes unused and unusable review scripts
Addtional test cases for tail calls in catches.
Expand test with a stably qualified example.
SI-5894 Don't emit static forwarders for macros.
Remove some low-hanging duplication beween GenJVM / GenASM.
SI-1672 Catches are in tail position without finally.
SI-5361 Refactor in accordance with review comments.
SI-3995 Exclude companions with an existential prefix.
SI-5390 Detect forward reference of case class apply
SI-5361 Avoid cyclic type with malformed refinement
SI-5877 Tweak the check for package object owner.
tests for idempotency issues in the typechecker
SI-5877 Support implicit classes in package objects
Adds debug logging for synthetic registration.
SI-6535 Step back from the precipice of a cycle
SI-4664 [Make scala.util.Random Serializable] Add test case
SI-6549 Improve escaping in REPL codegen.
Don't return unimportables from importedSymbol.
Split test case to workaround incomplete error report.
Remove TermName -> String implicit.
Javap for repl output.
SI-6547: elide box unbox pair only when primitives match
SI-6558 Expand test case for annotation typos
SI-6631 Handle invalid escapes in string interpolators
Remove Name -> TermName implicit.
SI-4664 Make scala.util.Random Serializable
SI-6685 fixes error handling in typedApply
Test cases for SI-5726, SI-5733, SI-6320, SI-6551, SI-6722.
Asserts about Tree qualifiers.
Add convenience attribute operator to NodeSeq
neg test added
SI-5753 macros cannot be loaded when inherited from a class or a trait
SI-5678 Bad return type for [Use Case] docs in Range
Take advantage of the margin stripping interpolator.
Adds a margin stripping string interpolator.
SI-6667 Abort after any ambiguous in-scope implicit
SI-6718 fixes a volatile test
Disabled part of a test.
Account for existence of scala's ClassfileAnnotation.
Eliminate some one-arg asserts.
Updated asm to 4.1.
Mark pattern matcher synthetics as SYNTHETIC.
Set symbol flags at creation.
SI-6023 reify abstract vals
Refactor use of SearchFailure in implicits.
Removing controversial `either` method from Futures API.
SI-6695 Test case for fixed Array match bug
findEntry implementation code more concise and DRYer.
Remove code from compiler central.
Remove code from misc bits of the compiler.
Removed code from scaladoc.
Removed code from the typechecker.
Members removed in scala.reflect.
Members removed in the backend.
Members removed from partest.
Members removed from scala.reflect.io.
Members removed from the repl.
Some files removed in their entirety.
Removing ancient comments and pointless comments.
Revert "Commenting out unused members."
Commenting out unused members.
applyOrElse is a synthetic method.
Deal with possibly spurious warning in Macros.
Remove unused imports in library.
Remove unused imports in continuations.
Remove unused imports in partest.
Removed unused imports in swing.
adds comments to standard attachments
SI-6673 fixes macro problems with eta expansions
Refactoring of adaptMethod
Restore the opimization apparently lost after merge.
SI-6677 Insert required cast in `new qual.foo.T`
SI-6624 set info of case pattern binder to help find case field accessors
Scaladoc update for collection.mutable.MultiMap
Added -Xdev setting... you know, for devs
SI-6663: don't ignore type parameter on selectDynamic invocation
SI-6551: don't insert apply call in polymorphic expression.
SI-6661 - Remove obsolete implicit parameter of scala.concurrent.promise method
Error for SI-6355, overloading of applyDynamic.
Lower confusion levels in typedApply.
SI-5330, SI-6014 deal with existential self-type
SI-5330, SI-6014 deal with existential self-type
SI-6648 copyAttrs must preserve TypeTree#wasEmpty
sane printing of renamed imports
Update comment.
SI-6646 `ident` or Ident is always new binding.
Address obvious bug in MutableSettings.
SI-6440 Address regressions around MissingRequirementError
better error when typetagging local classes
-Yshow-trees-compact respects other options
Refine the message and triggering of MissingRequirementError.
SI-6640 Better reporting of deficient classpaths.
SI-6644 Account for varargs in extmethod forwarder
Restore briefly awol // 3 in explicitouter
A utility function to summarize an exception.
Cleanups to the previous repl commits.
Moved IMain ops requiring stability into implicit class.
Massively simplified repl name resolution.
Massively simplified repl initialization.
Minor tweaks in Types/Scopes.
Hardened JavaMirrors against linkage errors.
Update tools/epfl-publish
fix t2318.scala
Associate correct names to e-mails, correct or not
Remove hostile code from explicitouter.
show developer guidelines on opening pull request
show developer guidelines on opening pull request
Refine @compileTimeOnly
New starr based on 4f98d50bc2 .
Treat name in getResourceAsStream as resource path
Warn about unused imports.
More principled tree copying.
A few straggling unused imports.
Optimize primitive Array(e1, ..., en)
Deprecation patrol.
Removed unused imports.
SI-6539 Annotation for methods unfit for post-typer ASTs
comment / question in typers
Revert "Expand optimization of Array(e1, ..., en) to primitive arrays."
Revert "Refactor guards checking for a particular overload of Array.apply."
SI-6616 Check that unsafe operations are only called on the presentation compiler thread.
Revert "Convenience method commonSymbolOwner."
SI-6448 Collecting the spoils of PartialFun#runWith
Refactor guards checking for a particular overload of Array.apply.
Pull request feedback.
Expand optimization of Array(e1, ..., en) to primitive arrays.
SI-6611 Tighten up an unsafe array optimization
expressions chapter converted, some math-mode errors still exist
Restored a scaladoc val body.
SI-6567 Warning for Option(implicitView(foo))
conversion of classes and objects chapter
Removing unused locals and making vars into vals.
Expanded unused warnings.
Comment to link code to a relevant JIRA ticket
Brings copyrights in Scaladoc footer and manpage up-to-date, from 2011/12 to 2013
Brings all copyrights (in comments) up-to-date, from 2011/12 to 2013
SI-6606 Drops new icons in, replaces abstract types placeholder icons
SI-6132 Revisited, cleaned-up, links fixed, spelling errors fixed, rewordings
Labeling scala.reflect and scala.reflect.macros experimental in the API docs
Typo-fix in scala.concurrent.Future, thanks to @pavelpavlov
Remove implementation details from Position (they are still under reflection.internal). It probably needs more cleanup of the api wrt to ranges etc but let's leave it for later
SI-6399 Adds API docs for Any and AnyVal
Revamp import ambiguity logic.
The improvements made possible by the scope changes.
Convenience method commonSymbolOwner.
Hardening scope lookup against wrongness.
Remove unused private members.
Warn about unused private members.
Removing actors-migration from main repository so it can live on elsewhere.
Implementation of Stream#dropRight.
Minor tweaks to logging approach.
silences optional logs in reflection
SI-6578 Harden against synthetics being added more than once.
SI-6556 no assert for surprising ctor result type
Removing actors-migration from main repository so it can live on elsewhere.
Modification to SI-6534 patch.
SI-6581 fixed by inlining `Actor.self`.
An option for real repl output.
Make LookupNotFound a case object.
Use Typed rather than .setType
Wider use and a new variant of typedPos.
SI-6575 Plug inference leak of AbstractPartialFun
converted syntax summary
basic declarations and definitions chapter converted, needs second-pass review.
types chapter fully converted. Added link to jquery and some experimental code for a fixed pop-out version of the table of contents, which is currently disabled.
SI-6488: Stop I/O threads prior to Process destruction
New take on SI-6534, value classes.
Tests for SI-3160, SI-4537, import precedence.
Adding some comments and clearer naming.
Switch typedIdent to use Context's lookupSymbol.
Simplifying Typer.
Added some symbol lookup convenience methods.
Made SilentResult more monadic.
Adds the core symbol lookup logic to Typers.
Introduces some structure for name lookups.
accidentally committed OS resource
MathJAX configuration for inline math inside code blocks
Remove compiler phases that don't influence scaladoc generation.
interim commit of conversion of types chapter
Disabled generation of _1, _2, etc. methods.
SI-6526 Additional test case.
- Grouping of text for examples in Lexical Syntax chapter fixed - Style of examples elements changed to delineate grouped examples.
Identifiers, Names and Scopes chapter converted. Minor CSS tweaks to make examples and inline code look better.
Removed .disabled files.
avoid single-art assert where harmful in duration-tck
removed some stray LaTeX commands from Lexical Syntax chapter, and a back-reference from the expressions chapter.
Crash on missing accessor (internal bug in the lazy vals implementation) instead of trying to recover from the bug
experimental restyling of examples to try and look a bit more like the original spec.
fixed missing newline between example text and delimited code expression
Incorporated changes suggested in code review
Added one more test for SI-6358
Closes SI-6358. Move accessor generation for lazy vals to typers.
preface and lexical syntax chapter converted, other chapters split into their own files
SI-6526 Tail call elimination should descend deeper.
Remove unneeded calls to substring()
Changes Tree and Type members from vals to defs.
Warn about more misplaced expressions.
SI-6388 Remove Application
Removed redundant containsUncheckable.
JavaUniverse
Moved @contentDiagram in Symbols
Adds lots of new documentation for TypeTags, Mirrors, Universes and more
runtime.JavaUniverse - put ungrouped members at the top
Forgotten annotation in Annotations
Diagram tweaking
Grouping for reflection and macros
fixes a typo
scala.reflect.api.Symbols documentation
Symbols docs cleanup, mostly moved to guide
scala.reflect.api.Position documentation
scala.reflect.api.StandardNames documentation
scala.reflect.api.Constants documentation
removed docs for internal TypeCreator and TreeCreator
simplified reflection docs for trees
Rearranged some reflection docs, moving things to the guide
reflection docs improvements and moves to doc page
docs for reflection and macros
SI-6509 Correct @template owners
SI-6155 Scaladoc @template diagrms
SI-6501 Scaladoc will correctly link to @templated
SI-6495 Scaladoc will pick up group from owner
SI-6487 Scaladoc can link to inner classes
Scaladoc knows the package structure of the libraries, so don't include them in external documentation setting.
SI-6453 Documentation links for @switch are broken
SI-6099 - Scaladoc for scala.concurrent incomplete
Deprecated instrumentation API
SI-6440: Revert change to `TraversableLike.filterNot`
Incorporated pull request feedback.
Experimental option -Ybreak-cycles.
Crash on missing accessor (internal bug in the lazy vals implementation) instead of trying to recover from the bug
Incorporated changes suggested in code review
Added one more test for SI-6358
Closes SI-6358. Move accessor generation for lazy vals to typers.
Proposed fix for SI-6490.
Possible fix for continuations bug.
removes strongly-typed Constant.value wrappers
SI-6485 stops creating extmethods for macros
SI-6388 Remove some remaining, minor deprecations
SI-6388 Remove deprecated item in scala/swing
SI-6388 Remove first parts of deprecated @serializable annotation
SI-6388 Remove deprecated items in scala/math
SI-6388 Remove deprecated items in scala/collection
SI-6388 Remove deprecated items in the compiler jar
SI-6483 Prohibit super[T] references in value classes.
Make reads in CommentFactory slice from the underlying buffer
MethodSymbol.params => MethodSymbol.paramss
 using  existing scala.tools.nsc.util.stackTraceString
 fixed trivial error with printing of exception stack trace in verbose mode.
A little more housecleaning in ExtensionMethods.
Incorporated pull request feedback.
Responded to comment about how many isCoercibles there are.
Incorporated pull request feedback.
Moved a bunch of passing tests out of pending.
Moved some disabled test to the right place.
Eliminated pattern matcher warning.
Worked over inferMethodAlternative.
Replaced some <code> comments.
SI-6471 Update jquery from 1.4.2 to 1.8.2
SI-6467: Zero element in aggregate now by-name
upgrades showRaw
introduces api.JavaMirrors
moves Attachments from api to macros
introduces macros.package.scala
removes extraneous methods from api.StandardNames
removes extraneous methods from api.StandardDefinitions
removes extraneous methods from api.Trees
hides internal methods of api.Printers
removes extraneous methods from api.Mirrors
removes extraneous methods from api.Scopes
removes extraneous indirection from FlagValues
removes extraneous methods from api.Constants
removes EmptyTermName and EmptyTypeName
renames macros.ReificationError to ReificationException
renames macros.TypeError to TypecheckException
renames macros.ParseError to ParseException
turns on documentation of scala.reflect.runtime
Renamed hasSymbol to hasSymbolField.
undeprecates manifests for 2.10.0
SI-6451: Rename classes in `unchecked-abstract.scala` test.
Put more implementation restrictions on value classes.
Revised restrictions for value classes and unversal traits
SI-6436 Handle ambiguous string processors
Overhauled documentation and structure of tpe/tpeHK/etc.
All the actual changes of tpe to tpe_* or tpeHK.
Hardening in appliedType and Subst*Map.
Cleanup in old Typers code.
Defanged dummy type arguments.
Removed obsolete migration test.
Improved the `scala.language` documentation
fixes a bug in a weak cache in runtime reflection
More retrofit of scaladoc model factory.
Recovered a bunch of deleted tests.
Added utility function shortClass.
Test case for SI-6311.
Revert "SI-4881 infer variance from formals, then result"
SI-6422: add missing Fractional and Integral alias in scala package
SI-6442 - Add ActorDSL object for actor migration kit
SI-6449 Adds version arg to @deprecated usages (non-compiler sources)
Some cleanups in Macros.
Purged DebruijnIndex.
add a bit about unicode to scaladoc.
fully initializes symbols on `typeSignature`
Implementations of isValueType and isNonValueType.
SI-6417 correctly reifies non-value types
showRaw no longer crashes on NoSymbol
Bump version number for next dev cycle.
Added logic and tests for unchecked refinements.
Moved isNonRefinementClassType somewhere logical.
Moved two tests to less breaky locations.
Nailed down the "impossible match" logic.
Finish docs for string interpolation.
moves Context.ParseError outside the cake
revives macros.Infrastructure
moves Context.runtimeUniverse to TreeBuild.mkRuntimeUniverseRef
a more precise type for Context.mirror
gets rid of macros.Infrastructure
simplifies Context.Run and Context.CompilationUnit
exposes Position.source as SourceFile
removes extraneous stuff from macros.Infrastructure
merges macros.CapturedVariables into macros.Universe
merges macros.Exprs and macros.TypeTags into Context
removes front ends from scala-reflect.jar
PositionApi => Position
hides BuildUtils from Scaladoc
MirrorOf => Mirror
docs.pre-lib now checks for mods in reflect
no longer docs scala.reflect.io
no longer docs internal scala.reflect packages
SI-6412 alleviates leaks in toolboxes, attempt #2
Simplifications in typedIdent.
Comments explaining some brokenness in Namers.
Expanded an error message from the backend.
Pending tests for SI-5954, SI-6225, SI-5877, SI-4695.
hardens DirectTest against missing -d settings
Move -Xdead-code out of the standard -Xlint.
Privatize some collections internals.
Refine an -Xlint warning.
Explicit type application in cps plugin.
Don't overload implicit methods.
Don't write public methods with non-public parameters.
Don't write side-effecting nullary methods.
Avoid relying on auto-tupling.
Restored warning for impossible type tests.
SI-6277 fixes flags, annotations & privateWithin
Yet more tests for unchecked warnings.
Annotate non local returns with @unchecked.
Don't call `updateInfo` during typing.
Added a Swing ColorChooser wrapper
Added a Swing PopupMenu wrapper
Generate links to external projects in scaladoc. Review by @VladUreche.
Additional new tests for unchecked warnings.
Improvements to unchecked warnings.
Pass a more precise type to checkCheckable when it's available.
Moved isVariableName to StdNames where it belong.s
Added exists3 to fast collections.
Move checkCheckable out of Infer.
Update check-file for SI-6344 test.
Improves SI-6409 - Add note to string flatMap about evaluation.
SI-6410 add test cases.
Removes discrepancy between SIP 15 and compiler
Moving actor migration to separate dir.
Revert "SI-6412 alleviates leaks in toolboxes"
Additional Actor Migration Tests.
Support for scala.concurrent for the ActorRef.
SI-6305 fix.
distinguishes flag-agnostic completers
fixes mirrorThatLoaded in JavaMirrors
SI-6412 alleviates leaks in toolboxes
SI-6412 fixes leaks in Types.uniques
SI-5918 fixes the ConstantType ugliness
A wrapper for selecting tests for partest.
minor cleanup for reflection
Remove BoxingConversions from the scala package.
partest now always produces log files with LFs
SI-6380 #1 Add @throws[Exception]
Changed implementation comments from /** */ to /* */, so ScalaDoc remains reasonable
A couple CRLF normalization stragglers.
fix scala.collection.TraversableLike scaladoc
fix Subscriber scaladoc
LinkedHashSet scaladoc fix after FlatHashTable->HashTable transiton
A couple minor .gitattributes additions.
SI-6381 Honour -Yrangepos in the REPL
Normalized line endings.
New .gitattributes file.
Disabled failing build manager tests.
New test case for SI-6337
New test case for closing SI-6385
Value classes: eliminated half-boxing
Cleanup of OverridingPairs
Use faster download URL now that artifactory is fixed.
don't try to create tags w/o scala-reflect.jar
some small remaining fixes
SI-5943 toolboxes now autoimport Predef and scala
SI-6363 deploys the updated starr
SI-6363 removes scala.reflect.base
SI-6392 wraps non-terms before typecheck/eval
SI-6394 fixes macros.Context.enclosingClass
Error message improvement for SI-6336.
Adjustments to scala.concurrent.duration.
prepping for the refactoring
fixes NameTypes in base names
move Duration (incl. DSL) into scala.concurrent.duration package
Additional OSGi tests.
SI-6390 removes Trees#ArrayValue from the API
improved/fixed reflection docs based on comments
Scaladoc cleanup. Review by @VladUreche.
improve performance of integer multiplication overflow check on Duration
Adds very simplistic reflection in OSGi test.   Provides the framework to discover important reflection bugs in OSGi containers.
Add RedBlackTree tests for take/drop/slice.
Retain Ordering in drop/take/slice signatures.
test case closes SI-5770
SI-6336 Now also catches return types
clarify caveats of App trait
test case closes SI-5418
Remove `@static` annotation from the library.
existentially typed expansions now work fine
New starr that does not depend on `@static`.
enable integer multiplication/divison on FiniteDuration, see SI-6389
improved reflection documentation
Removed many @inline annotations and final modifiers.
pull request feedback
SI-5692 better error message
SI-5942 toolboxes now reset front ends
SI-6287 fixes synthetic symbol clashes in toolbox
Revert "Implement @static annotation on singleton object fields."
Revert "WIP add private/lazy checks and a few tests."
refactors java reflection tests
SI-6374 Reflection now works for anns with enum fields
Reflection no longer produces faux existentials
SI-6374 Scala reflection now supports Java CRTP
Revert "Added constant empty array to the companion objects."
Moved constant empty arrays into Array companion.
moves isImplicit from TermSymbol to Symbol
SI-6336 Disallows value types in structuralal refinements
Reworking of annotation arg parser.
SI-6356 reflection now supports Java annotations
extinguishes some magic from scalac
More relative path elimination.
SI-4478 Replaces wrt with (hopefully) slightly improved wording.
SI-6356 reflection now supports Java annotations
SI-6362 & SI-5924 removes caches in the macro API
SI-6342 cleans up toolbox API
SI-6360 revises naming of AnnotationInfo and its members
SI-6372 cleans up the API of Attachments
SI-6371 adds comments for Trees#UnApply
SI-6369 removes Type.narrow from the API
SI-6365 removes Symbol.hasAnnotation from the API
SI-6373 removes Trees#ApplyDynamic from the API
Optimization in ZipArchive.
Added constant empty array to the companion objects.
Eliminate breaking relative names in source.
"Hot fix" for broken build.
Made 'def clone()' consistent with parens everywhere.
accommodates pull request feedback
SI-6310 redeploys the starr
SI-6310 AbsTypeTag => WeakTypeTag
SI-6323 outlaws free types from TypeTag
SI-6323 prohibits reflection against free types
improvements for reification of free symbols
removes build.newFreeExistential
Make the scalac Ant task recognise -Yrangepos
SI-6359 Deep prohibition of templates in value class
Better error message for pattern arity errors.
Rescued TreeBuilder from the parser.
Pending test for SI-3943
Test case for a bug fixed in M7.
magic classes are no longer entered twice
SI-6306 Remove incorrect eta-expansion optimization in Uncurry
SI-6315 fixed.
improve Promise.tryAwait by converting to match statement
restrict Deadline to finite durations (would have to throw otherwise)
Additional Actor Migration test cases.
make private methods private[this] to avoid conflicts when importing Duration._
retronym had one more improvement hidden up his sleeve for Duration
factor out more constants in Duration, thanks paulp!
A little cleanup along the Any to AnyRef trail.
Avoid spurious warning for `def foo = x.foo`.
two more minor cleanups to Duration
improve docs and Promise impl
Disable test t2868
Pull request feedback
Rescues @deprecated{Inheritance, Overriding}
Adds @deprecatedInheritance to BigInt and BigDecimal
SI-6162 Adds @deprecatedInheritance/@deprecatedOverriding
Minor cleanups of code/comments related to value classes
fix usage of Duration in Promise impl
SI-6345 Remove scala.runtime.ScalaRunTime.Try
SI-6278 fixed: synthetic implicit def must sort with its associated implicit class
SI-6276 Warn on def or val that trivially loops infinitely
More tests for SI-6335.
SI-6335 More precise location of the implicit class synthetic method.
Improve Constant#hashCode
Test for consistency of Constant#{equals, hashCode}.
fix two minor issues in Duration
Refine equality of Constant types over floating point values.
SI-6331 Avoid typing an If tree with a constant type.
Makes getClass of a value class work.
fix some one more issue in Duration
second round of Duration cleanup
Minor code style alterations and performance fixes.
SI-6318 fixes ClassTag.unapply for primitives
test suite for SI-6329
fixes Manifest.Nothing and Manifest.Null
SI-6246 deprecated apis for core class tags
removes isLocatable from the public API
removes Type.isConcrete
More fix for invalid companions.
Sort files to see if we get reproducible testing results across linux/mac
several fixes to scala.concurrent.util.Duration
Removing duplication from Duration.
Remove extraneous null check in RedBlackTree
Test case for SI-6301.
Cleanup makeShadowingTable, save some memory. Review by @VladUreche or @heathermiller.
SI-6295: Introduced NoExternalID, fixed DocType's documentation.
Allow nested calls to `askForResponse` in the presentation compiler.
Made Dynamic extend Any.
Clear undo log after each unit has been type-checked to prevent 300M memory lost in scaladoc. Review by @adriaanm.
Used methods according to @paulp suggestions.
Formatting cleanup in def typed.
Large logging cleanup effort.
Took measures to quiet down specialization logging.
Worked around SI-6161 by annotating abstract type.
Added a heuristic to the inliner.
Better errors for Any/AnyRef issues.
Suppressed 'possible cause' mis-warning.
SI-6278 fixed: synthetic implicit def must sort with its associated implicit class
More useful -Xlog-implicits output.
Culling debugging code.
Hardening specialization and others.
Minor library changes to help overloading issues.
Eliminated more overloaded types after typer.
Don't synthesize trees with overloaded calls.
Actual fix for SI-6301, specialized crasher.
Rewrite of GenICode adapt.
Workaround for SI-6301, @specialize crasher.
Warn when overloaded types are seen after typer.
SBT build now works with SBT 0.12.
On --grep, partest must dir.list to descend into subdirs (fixes SI-6296)
Use proper Option methods instead of .get in scaladoc ModelFactory. Review by @ureche.
Removed previosuly uncommented code, added more diagnosis output to REPL.
Made instrumenter more robust by looking at tokens
Removed dead code.
Two fixes for the worksheet instrumenter
Reflection tuning
Two more value classes.
Expanded the reach of value classes.
Added/fixed test files for SI-6227
Two fixes for the worksheet instrumenter
Closes SI-6227
Making public methods of FlatHashTable protected
hotfix for SI-6293
Commented out assertions
Rank based take/drop/slice.
definitive way to learn if a symbol is a val/var
Exposes Symbol.sourceModule
rehash of source file information for Symbol
removes AbstractFileApi
Exposes ToolBox.classLoader
exposes MethodSymbol.isPrimaryConstructor
Exposes Symbol.deSkolemize to macros
adds Symbol.isJava
adds ClassSymbol.baseClasses
exposes Symbol.children
SI-5767 fix + small HashSet/HashMap fixes
removes Symbol.kind and Type.kind
Add missing tests for SI-6190
SI-6281 macroArgs for defs with implicit args
SI-6280 Scaladoc: Reloading preserves anchors
Added test to ensure that ListMap.tail is O(1)
Made ListMap.tail O(1) instead of O(N)
Deprecate unmaintained/old classes for removal in 2.11
SI-6052 - fix groupBy on parallel collections
Automatically highlight and scroll to linked-to members
SI-6272 Support lazy vals defined in try in template.
Mention BoundedWildcardType in "a standard type pattern match".
Make RefChecks#validateVariance aware of BoundedWildcardType.
SI-3577 Make varianceInType aware of BoundedWildcardType.
SI-6258 Reject partial funs with undefined param types
pull request feedback
Eliminated a metric ton of allocations.
SI-4857 fixes showall/hideall Scaladoc interface bug
SI-6170 Revert #456 "Upgrade jQuery from 1.4.2 to 1.7.2"
PartialFunction polishing
Improved fix for SI-1987, overloading in package objects.
Ensure implicit conversions to concurrent map are unambiguous
Also check that Stream.toSeq gives the right result.
Improve test for Stream.withFilter.{map,flatMap}
reverts changes to ClassTag.Nothing
adds weak_<:< to the API
exposes absTypeTag and absTypeOf
exposes the notion on overriding in the API
fixes non-determinism in reflection-sorted-decls
Extended test to also check proper handling of collisions
Added test that tests that correct classes are being created when removing elements
Added assertions for tree consistency
Rewrote makeHashTrieMap so that objects are created in a consistent state
Check if subNew is the only child and if it is a leaf.
Move code to create two-element HashTrieMap into utility method and make use of it from HashMapCollision1.updated0 as well
Cleanup testcase
Remove unnecessary check for merger eq null
Prevent creation of a HashTrieMap with one child unless the child is a HashTrieMap itself
Prevent creation of a HashMapCollision1 with one element
Remove commented out code
Make Stream.withFilter.{map,flatMap} run in constant stack space
rebuilt the starr after performance optimizations
JavaConversions: Restore source compatibility with 2.9
Adding test for try-catch library unification.
Unify scala.util.control.Exception with scala.util.Try
Improve doc comment on adaptTypeOfReturn in CPSAnnotationChecker
Attempts to improve inlining behavior for map, flatMap.
Slightly less drastic disabling of statistics.
Reverted closure hoisting except for functions returning a Boolean result
Some more closure hositing/elimination
Made all statistic code disappear unless built with Statistics.canEnable = true
Partial revert of itransform commit.
Reverted addition of 5 specialized method from LinearSeqOptimized to List.
Manaul inling of `UndoLog.undoUnless`.
Optimizations to SymTree and transform
Specialize hashCode in TypeRef from the generic MurmurHashCode3 implementation.
Moved five methods from LinearSeqOptimized to List
Don't allocate closure in List.hashCode.
Rework synchronization scheme of `UndoLog` for performance.
Mark logging methods in `SymbolTable` with `@inline`.
Make Array creation more efficient in hot places.
Optimizations to cut down on #closures created
Made hashCode a method on Type to avoid megamorphic dispatch
No longer uses generic hashCode in UniqueType, since case class hashCode is now the same and faster.
Optimization to atOwner
Replaced isTrivial lazy vals by custom scheme to save space.
Optimizations of isTrivial fields and methods
More method splitting
Method splitting for erasure, genJVM, parsers, scanners, uncurry
Second part of typed1 optimization
First half of typed1 reorganization, to make it smaller and faster.
Splitting large methods into smaller ones.
More method hoisting.
Compilespeed improvements: Exists arguments and others
pull request feedback
SI-5788 correct test and symbol update
Added test that should cover all code paths of the changes done in SI-6220
Improve efficiency of updated
cleanup for macroExpand
Modified SI-6150 fix again.
Restored lastNoSuccess to Parsers.
Use rawflags for checking FINAL flag.
Hunting down eliminable :: allocations.
Absolutize tools.nsc => scala.tools.nsc.
more cleanup for typedMacroBody
shaves more than 150 lines off typedMacroBody
Modified SI-6150 fix to use intended ReusableCBF.
Optimization in SubstMap.
Added test that should cover all code paths of the changes done in SI-6220
removes dead code
pull request feedback
more macro cleanup
further cleanup of transformTypeTagEvidenceParams
macroImplSigs => macroImplSig
Dominik's comments on api.Mirrors
phaseId(currentPeriod) >= erasurePhase.id
materializeImplicit and implicitsOfExpectedType
cleanup of reflection- and macro-related stuff
adds the `skipPackage` attribute to Scaladoc
SI-6167 Override SeqLike#isEmpty for better performance
Add Scaladoc flag to specify hidden implicit conversions
don't catch StackOverFlowError: kills performance
don't crash on unsupported pattern -- diagnose
accommodated the feedback for the pull request
HIDDEN => ARTIFACT
macro implementations must be public
SI-5940 impls are no longer in macro def pickles
Rewrite of transformTypeTagEvidenceParams.
Improve efficiency of updated
.ensime template for compiler development
Simplify the adaptation of types of return expressions
More resilience to missing classes.
Added make not private logic for @inline accesses back to ExplicitOuter.
A little less indirection.
Improvement for SI-2251, failure to lub f-bounds.
Added test to check that removing all but one element from a HashTrieSet yields a HashSet1 as it should
Added test for SI-6198
SI-6201 minor fixes in key points
Warn about catching non-local returns.
Made -Xfatal-warnings less immediately fatal.
a follow up on e01ec05a1e
some more copyright cleanup for 2012
refines api.FlagSets
Warn when Any or AnyVal is inferred.
Ensure that a.merged(b)(null) always chooses a in case of collisions
Removed hot statistics call in normal path.
Only create a HashTrieSet if necessary.
Made inliner work for @inline methods that access private variables.
Revert "Add missing cases in tail return transform"
Support per-group flags files in partest
Add missing cases in tail return transform
SI-6022 cleaner model of variable equality modulo <:
SI-6022 refactor to clean up model of variable equality modulo <:
accommodates reflection meeting feedback
Allow skipping the xz archives
SI-6184 don't introduce dummies in checkableType
Create a HashSet1 in case ks1 contains just one entry
Renamed elem to head and next to tail
SI-6204 reifier no longer causes cyclic errors
SI-5756 correctly reifies local module classes
an important fixup for macro universe API
Moved inline logic before pickler.
Better pattern matcher error message.
Replace CheckCPSMethodTraverser with additional parameter on transformer methods
SI-5314 - CPS transform of return statement fails
SI-6205 make pt fully defined before inferTypedPattern
SI-5739 (bis) vals for subpatterns unless -optimize
SI-5947 works around getDeclaredClasses
SI-6040 error on unauthorized extension Dynamic
Doc fix on exec ctx prepare method, fix to tests
SI-5933 testcase for Adriaan's pullreq #980
SI-5933 do the new patmat translation for scaladoc
SI-6186 TypeTags no longer supported in macros
Enable inlining in constructors.
Added tests, removal of unnecessary methods, fixes prepare
Removes AnyRef specialization from library
SI-5498 completes ModuleMirror.instance
accommodates Martin's comments
Makes all private variables accessed from an @inline method non-private.
SI-6183 don't crash on type error in outer test
SI-6145 lax typing of args to synthetic case-labels
update and normalize copyright notice
Restored :warnings to working order.
SI-6199 unit-returning methods now return unit
mirrors now support overriden fields and methods
sanity check for reflectConstructor
SI-6181 method mirrors now support by-name args
SI-6179 mirrors now work with value classes
SI-6178 reflective invocation of magic symbols
test case for SI-6102
SI-6102 avoid emitting illegal exception table range
SI-5788 Tailcalls LabelDefs correctly duplicated
SBT compiler interface now compiled in ant build.  Ensures those still using ant don't break the interface.
SI-6157 don't inline callee with exception-handler(s) if potentially unsafe
compatibility stub for SBT 0.12.0
adds more tests for api.Symbols
better error messages for Symbol.asXXX methods
SI-6188 ICodeReader notes exception handlers, Inliner takes them into account
adds deprecation annotations on manifest incantations
Temporarily skips failing test due to optimizer bug SI-6188
SI-6185 - add "prepare" hook to ExecutionContext
Basing Futures on Try instead of Either
Clear uniques via perRunCaches.
SI-6074
staticTpe => staticType, actualTpe => actualType
Want a 25% partest speedup?*
SI-6175 reflect over classes with symbolic names
Better worksheet support.
Don't know how git merge loses a whole brace.
updating resolveDups() to use MethodTFA.mutatingInterpret()
first stab at serialization of exprs and tags
deploys a new starr that knows reify is a macro
moves Expr from api to base
evicts last traces of makro from our codebase
reflect.makro => reflect.macros (Step I)
removes -Xmacro-(.*)-classpath compiler options
prepares our macro defs for refactoring (Step II)
prepares our macro defs for refactoring (Step I)
more refinements of reflection API
SI-5888 Mirrors now have sane toStrings
renames asType to toType and asXXXSymbol to asXXX
miscellaneous refinements of reflection API
navigation between fields and accessors
moves most of symbol tests in API to descendants
simplifies flag API
SI-5732 members and derivatives now return Scope
minor fixes scaladoc
SI-5751 cleans up toolboxes for the release
I actually managed to hit the limit of Scala signature annotation not fitting into a single string (high five everyone) and entered the undisovered region of arrEncode in GenASM. arrEncode returns Array[String] so asm.AnnotationWriter is not going to like it.
Added more variants to achieve getLinkPos
Made worksheet output wrap around after custimizable # of output columns.
Checkfile update.
SI-5764 Honor -language:_
Removed resolveOverloaded
SI-5866 Support casting null to value classes
ClassTag.Nothing now throws an exception
SI-6064 Add method contains to Option.
SI-5799 Secondary constructors in value classes not allowed
Closes SI-5878
Promote unchecked warnings into being emitted by default.
Closes SI-5882
Closed 6029 ...
SI-4023 Testcase closes issue with inner classes/getDeclaredClasses
New Worksheet mixing scheme
Raw string interpolator
Adds method askForResponse
Disable interrupts during code instrumentation
New Executor.
Eliminated all the current feature warnings.
Changed isHidden condition back to isSynthetic.
Eliminated remainder of "catches Throwable" warnings.
Cleared the remaining unchecked warnings in trunk.
Improve unchecked warnings a lot.
Renaming files to please ant.
SI-6142: warn @inline-methods ending up not inlined (rightfully or not)
A missed checkfile for pull #949.
Removed restriction on final vars, SI-2418.
Refined isEffectivelyFinal logic for sealedness.
Avoids loading scala.package and scala.reflect.package from source if a classfile exists.
`ScriptSourceFile` should not hard-code `OffsetPosition`.
Instrument all classes in `instrumented` package.
SI-5958 This deserves a stable type
Remove typesafe-config as dependency for library.  Akka-actors will draw it in.
Optimization in List.
SI-6140 Scaladoc infinite recursion in wiki parser
hotfix for TwoWayCache
SI-4560 - improved test
Revert "tentative fix for RC5 lift build problem."
Revert "Closes #4560. Review by dragos." (introduction of safeREF)
Revert fix part of "Closes 4560. Review by dragos."
SI-6112 exposes symbol mutators in macro universe
SI-6075 cleans up api.StandardNames
SI-6058 makes JavaMirror caches weak
use hasAllFlags to detect gadt skolems
SI-5930 don't warn about dead code in jump to case
SI-5897 don't check sensicality in match
move synthetic case symbol detection to treeInfo
docs related to fix for SI-6111
SI-2038 make pt fully-defined when typing Typed
SI-6111 accept single-subpattern unapply pattern
Small changes to reflection API to make it safe for IDE use.
SI-4440 workaround: avoid outer accessor that'll vanish
SI-4881 infer variance from formals, then result
Improve unchecked warnings.
Improve unchecked warnings.
SI-6089 test file for pt2
Removed "core classes first" logic.
Missed a couple test case renames.
Tweak to symbol tracer.
Renaming files to please ant.
Handle multiple packages in one source file in the presentation compiler.
SI-6090
SI-6089 pt2: _ is tailpos in `_ || _` and `_ && _`
Linked the PR policy in the README file.
Scaladoc: Removing forgotten debugging info
address "this would catch all throwables" warnings
SI-1832 consistent symbols in casedef's pattern&body
Removes redundant outers
Use `findMember` to lookup the static field in the host class.
update docs for (partial) fun synth in uncurry
SI-5999 a real fix to the packageless problem
evicts calls to reify from our codebase
an improvement based on Adriaan's comment
SI-6031 customizable budget for patmat analyses
SI-5739 address @retronym's feedback, more docs
SI-5999 staticXXX is now friendly to packageless
SI-5949 updates documentation of staticClass
SI-5999 removes the macro context mirror
more meaningful name for a missing hook method
SI-5999 deploys a new starr
SI-5999 removes Context.reify
improves docs of scala.reflect.api.Mirrors
SI-5984 improves error reporting in JavaMirrors
Renaming phase time-travel methods.
SI-4897 derive expected value from single type
Expanded use of HIDDEN flag.
Switch to 1.6 target for all javac invocations.
Clean ups in impl.Future
Critical bugfixes/leak fixes/API corrections + ScalaDoc for SIP-14
Print the stack trace.
Deprecate all JVM 1.5 targets and make 1.6 default.
Shield from InterruptedException in partest.
Scaladoc: Adressed @hubertp's comment on #925
SI-5784 Scaladoc: Type templates
Scaladoc: Groups
Better debugging output in GenASM.
Updated list of targets allowed in Ant's scalac.
WIP add private/lazy checks and a few tests.
Removes Float.Epsilon and Double.Epsilon
SI-5939 resident compilation of sources in empty package
Scaladoc: Typers change
SI-6104 support This pattern
Make  field strict and private.
Implement @static annotation on singleton object fields.
SI-6089 better tail position analysis for matches
SI-5695 removes Context.enclosingApplication
SI-5892 allow implicit views in annotation args
SI-6095, SI-6098 - clean up public API, add deprecations
SI-5739 store sub-patterns in local vals
Increase partest timeout and emit warning when it hits.
SI-5731 a few fixes for value classes
uses weak_<:< from Types to solve this issue
changes error message generated by compiler
move test files that fail spuriously to pending
SI-5856 enables use of $this in string interpolation
SI-5895 fixes FieldMirrors
fixes a typo in macro classloaders
SI-5784 Scaladoc: {Abstract,Alias} type templates
test case closes SI-6047
SI-6086 magic symbols strike back
Scaladoc: Refactoring the entities
SI-5533 Skip scaladoc packages from documentation
Scaladoc: updated type class descriptions
Scaladoc: Reducing the memory footprint 2
Scaladoc: Reducing the memory footprint
SI-3695 SI-4224 SI-4497 SI-5079 scaladoc links
SI-4887 Link existentials in scaladoc
Scaladoc minor fix: Typos in diagrams
SI-4360 Adds prefixes to scaladoc
Scaladoc: workaround for untypical Map usecases
SI-4324 Scaladoc case class argument currying
SI-5558 Package object members indexing
SI-5965 Scaladoc crash
Scaladoc: Inherited templates in diagrams
SI-3314 SI-4888 Scaladoc: Relative type prefixes
SI-5235 Correct usecase variable expansion
Changes suggested by @retronym and @jsuereth
Add `partest` and `scalap` Eclipse project definitions.
SI-6035: Specialization and separate compilation.
Closes SI-6072, crasher with overloaded eq.
SI-6011 switches: unreachability, guard-free form
Partest: add `instrumented` test category.
updated intellij project files
Simplify raw types logic.
SI-6028 Avoid needless symbol renaming in lambdalift.
A test case that scrutinises lambdalifter's output.
With -Yno-generic-signatures, exit GenASM.getGenericSignature early
SI-6077 more conservative TreeMakersToConds for CSE
changed line endings in GenASM from Windows to Unix
Variation #10 to optimze findMember
Attempt #9 to opimize findMember.
Attempt #8 to opimize findMember.
Attempty #7 to optimize findMember
Attemmpt #6 to optimize findMember
Attempt #5 to optimize findMember.
Attempt #4 to optimize findMember
Attempt #3 to optimize findMember
Attempt #2 to optimize findMember
Attempt #1 to optimize findMember
Moved two tests to preserve path uniqueness.
Avoid conflict with String's apply.
Removed AestheticSettings.
Changing to scala.concurrent.context. as namespace for the system properties for the global execution context
Squashed critical enhancements to SIP-14: daemonizing global EC, giving EC to DelayedLazyVal, removing currentExecutionContext, removing impl.Future.isFutureThrowable, implementing asExecutionContext, giving a decent fallback if ForkJoinPool cannot be created
enabled patmatDebug
SI-5956 trigger copy generation with correct namer
  New make release notes script, this time scala-ified for more POWER, cap'n.
fix Right,Left and Either scaladoc links
SI-5957 enable direct parsing of nested java class classfile
SI-5906 Search for sorted sequences
Further optimization of asSeenFrom.
Optimization in asSeenFrom.
Removed EXISTENTIAL special case in unpickler.
SI-4763 Deprecated the `cloneable` annotation
Moved cloneable class to package `scala.annotation`.
starr sources to move cloneable class to package `annotation`
Bump version number for new nightlies.
SI-6061 adds weakly conformance for number types to resolveOverloaded
Pickled flag reorg
polymorphic value classes
statistics: print millis instead of micros.
don't crash on syntactically incorrect value classes
SI-6015 assertion (in Type-flow analysis) that wasn't, valid counterexample found
SI-6022 model type-test-implication better
SI-6032 Enhance TaskSupport documentation.
Eliminated more logic.
Eliminated actors from partest.
FIXING THE SAME MISTAKE BUT IN STRAP.  Yay for copy-paste ant-magic
SI-6052 - fix groupBy on parallel collections
Revert "GenASM: pipeline disk-write with building of classfiles"
bandaid in GenASM for SI-6049
Collection of updates to SIP-14 (scala.concurrent)
Removing the actor migration undeterministic test.
improved resolveOverloaded docs fixed few mistakes, easier explanation of prefix type, more regular argument descriptions
Added scaladoc for resolveOverloaded.
New logic for TermSymbol.resolveOverloaded
Added a HIDDEN flag.
scalac ant task now supports all GenASM targets
SI-6042 Improve type selection from volatile type error
raise compile time error about impending VerifyError due to unsorted lookupswitch (SI-6011)
Eliminated some code in asSeenFrom.
Tweak test to pass under java 7.
Implicits to encourage more Name-dropping.
Knocking off a few catch _ => warnings.
SI-6036 yet again makes sense of magic symbols
removes special case for BigInteger
SI-6025 fix for GenASM, GenJVM-based fix pending
GenASM becomes default backend, 1.5 classfiles remain as default
Added opt variant to replacestarrwin
stringinterpolation macro test files
adds the sha1 files of the new starr / stringContext.f
macro-based string interpolation formatter
SI-2442 sealedness for java enums non-experimental
refactor to implement @retronym's review
Updates scala.util.control.NonFatal documentation, as suggested in code review
SI-6033 Closed. Provides implicit conversion from java.math.BigInteger to BigInt
SI-5974 make collection.convert.Wrappers serializable
SI-5981, SI-5979, SI-5973 Closed. Maintenance to Try.
SI-6008 use static knowledge of success of type tests
SI-4691 exhaustivity: `unapply: Some` = irrefutable
introduce -Ypatmat-debug (no new functionality)
SI-5907, SI-5009 case-class copy defaults only for first param list
Allow attachments for symbols, just like for trees.
Enhanced presentation compiler test infrastructure
Adds `Type.resultType` to reflection API
tags for AnyVal and AnyRef
SI-5959 type equality now accounts for mirrors
SI-6013 Disallow deferred members from intermediate java parents.
SI-5830 switches: support guards, unreachability
Better explanation for SI-5969. The comment should now better reflect the joys of tryTwice as discussed during the code review.
SI-5990 u.build now correctly invokes missing symbol hooks
Update README for Eclipse project files.
Closes SI-5969.
The `reflect` project now depends on the `scala-library` project.
Diagram tweaks #2
Diagram tweaks #1
Documented SyncVar
Scaladoc class diagrams part 2
Scaladoc class diagrams part 1
Reorganized scaladoc model
Scaladoc diff-firendly output
reify no longer dealiases symbols and types
miscellaneous cleanup
removes ClassTag.String and TypeTag.String
further improves reflection printers
Improves backward compatibility of manifests
better module classes support in the reflection API
moves reflective compiler into scala.tools.reflect
GenASM gets a 10% performance boost via switch
GenASM: pipeline disk-write with building of classfiles
readability of MethodTFA.mutatingInterpret()
SI-5489 Avoid accidentally adding members to Object in erasure.
SI-5932 Tone down non-sensible == warning with refinements.
SI-4176 A repeat dose of repeated parameter type sanitization.
SI-2807 Avoid catch all warning for Stable Id patterns
Renaming convertTo to to on GenTraversableOnce.
Split @milessabin HasRepr into IsTraversableOnce and IsTraversableLike type class-ish things.
Revert pull request #720 (CPS: enable return expressions in CPS code if they are in tail position)
Parallelize convertTo in parallel collection.
make tests independent of compiler api
Test that closes SI-5839. Bug itself most probably fixed by #602
Updated Eclipse project files for `asm`, correcting a small typo in linked source folders.
Closes SI-5148.
SI-2796 Warn if early definitions are used with a trait.
SI-5899 exhaustiveness for non-class types
exhaust unit: consider Unit as sealed
SI-5914 handle null in classtag extractor
SI-2442 fixed by virtpatmat -- test files only
better fix for SI-5189 pt1
minor cleanup in patmat and typers
SI-5761: fix up #774 (missing check file)
Added new project files for using the compiler and library inside Eclipse and removed the old ones.
Added test for SI-5761. Seems that my cleanup of SI-4842 also fixed that one. Review by @paulp or @retronym.
fix for SI-4935
refactoring to functional style Inliner's isStampedForInlining()
inliner makes fields public only when actually inlining
Statistics improvements and bug fixes.
Minor followup on SI-4842: remove awkward condition. Review by @retronym.
emit JVM InnerClasses attribute for bean info classes
LongMap: Made life a bit less scary for those doing source archaeology.
IntMap: Made life a bit less scary for those doing source archaeology.
Adds missing closing curly brace to ScalaDoc code example.
Added a key comment.
SI-5968 Eliminate spurious exhaustiveness warning with singleton types.
Exported new packages in the MANIFEST file.
Don't swallow `Throwables` while parsing bytecode. Print a warning and go on.
removes pre-M4 compatibility stubs for the IDE
Making Actor Migration Tests deterministic.
SI-2807 Resurrect and refine the promiscuous catch warning.
adds `narrow` to the reflection API
Updated scalacheck sources.
Statistics reorganization
improves showRaw
Final clean up to get the build/testing working again.
Migrate build to @odersky's suggestion of convertTo. * Move method into TraversableOnce from Iterator and Traversable to make the build pass. * Udpate IDE tests with new collection methods. * Rewire default toXYZ methods to use convertTo.
Rename copyTo to build based on consensus of 3
Use `ThreadLocalRandom` in `TrieMap.size`.
Adding copyInto and toVector methods to collections.
enables reification of anonymous classes
fixes checkinit, now it's for real
Revert "Scaladoc class diagrams part 1"
Revert "Scaladoc class diagrams part 2"
Revert "Documented SyncVar"
SI-4842 Forbid access to in-construction this in self-constructor args
SI-4989 Reject super.x if an intermediate class declares x abstract.
SI-5617 Better error message for "x overrides nothing".
exposes extra tests for symbols as discussed on reflection meeting
classtag => classmanifest conversion no longer requires runtime universe
Remove unneeded use of Tree#id
Replace context stack of AnnotationChecker with new mode for typing returns
Remove unused type parameter.
fastlocker target for ant
fixes SI-5912
Removing erronous quoting of implicitNotFound
Remove stray comment
CPS: enable return expressions in CPS code if they are in tail position
Adding JDK7 friendly build with new partialdist(-opt) tasks.
More fixups.
Adding backticks to code in deprecation messages in Predef
Documented SyncVar
Scaladoc class diagrams part 2
Scaladoc class diagrams part 1
SI-4270 Refactor for efficiency and clarity.
Refactoring and temporary commit before finishing the fix.
rework Future.dispatchFuture a bit to fix bugs / optimize
Remove NPE when `compileLate` sees sources during initialization.
Don't require symbols to be loaded in the parser.
Don't use the BrowsingLoader for Java sources.
Don't crash if cpsParam is not on the classpath.
A tribute to https://github.com/scala/scala/pull/414
Clarifying deprecation for implicit and explicit usage of the x2y's in Predef
Clarifying deprecation messages for numeric conversions in Predef
fixes a checkinit problem
Suppress non-local return unchecked warnings.
Breaks.break should return Nothing, not Unit
MSIL now build as part of compiler.
Forkjoin and fjbg are now always compiled in the build.
SI-5162 Exclude super.foo from the erasure cast of SI-4283
SI-5696 Detect excess constructor argument lists.
SI-4270 Disqualify in scope implicits that are shadowed.
better unreachability for selections
An IntelliJ module for reflect.
test case, closes SI-5840
test case, closes SI-5881
test case, closes SI-5816
test case, closes SI-5738
test case, closes SI-5742
SI-4270 Rename implicits to avoid name clashes.
A quickfix for 09bf95675b
A remedy for Illegal class modifiers in locker
fixes a bug with bat files invocation from ant
Avoids cyclic reference error in AddInterfaces.
Reduce time spent in lubs
tests and fixes for the mirror API
a quickfix for test/partest
don't warn about abstract types that are checkable
turn unchecked type patterns into checked ones
de-duplicate isUncheckedAnnotation/isSwitchAnnotation
unapply may be called on arbitrary tree
pull out doTypedUnapply from doTypedApply
the final touch: scala/reflect added to scaladoc!
Reverting 22c8dec5 and preventing bootstapping in scaladoc
fixes some issues with reflectField brought up today
quickfix for a nasty assertion
TypeTag => AbsTypeTag, ConcreteTypeTag => TypeTag
removes array tags
backward compatibility bridges
Introduces scala-reflect.jar
repairs the tests after the refactoring spree
moves positions to scala.reflect.internal.util
miscellaneous cleanup, mostly fighting with feature warnings
brings reification up to speed
brings macros up to speed
removes tags and their incantations from Predef
ClassTag.erasure => ClassTag.runtimeClass
The new reflection
preparations: always explicitly provide type tags
preparations: removes DynamicProxy
macros: refactoring of fast track infrastructure
macros: now use Java reflection
macros: -Xmacros is now retired
improves traces and error messages
REPL bells and whistles: -Dscala.repl.maxprintstring=<Integer>
REPL bells and whistles: -Dscala.repl.vids=<Boolean>
REPL bells and whistles: -Dscala.repl.autoruncode=<JFile>
REPL no longer hangs after initialization crashes
typers: simplifies original calculation in typedAnnotated
typers: dubious line in adaptType
typers: fixes error handling in checkStable
counterpart in GenASM to 241c7606d0bf5f3209b9d549fb75
Add the first iteration of the `util.hashing` package.
Generate abstract methods in scala.Byte and friends.
Updated tools/*cp scripts.
fixes typos in scaladoc of Orderes.cala
Switching the the Akka-contributed Unsafe detection to support more platforms, like Android
Add configuration for ExecutionContext
SI-5313 Revert to two traversals in substThisAndSym.
Revert "#653 -- no lub for statement exprs' types"
Don't compute least upper bounds for expressions in statement positions inside blocks.
SI-5683 Fail gracefully when transposing a ragged type arg matrix.
incorporate @retronym's review comments
SI-5167 An impl class method should refer to its own parameter symbols.
Closes t5399. Review by adriaanm
Made parser less hostile to inspection.
Remove Equality in favour of Equiv.
Add Hashing and Equality typeclasses.
allow disabling patmat analyses: -Xno-patmat-analysis
fixing bug found by unreachability
Unreachability analysis for pattern matches
support for repeated approximation of treemakers
patmatdebug
construct typed trees in TypeTestTM
all treemakers need positions for unreachable error
allows printing .icode files after any optimiz phase
More robust findScalaHome in bash scripts. See SI-5792
skipping unnecessary work in GenASM when emitting 1.5 classfiles
Partial redesign of incremental compiler invalidation.
Implemented functionality to invalidate classpath entries, to enable incremental compiles.
fix t5843
handle approximating alternative of empty pattern
don't check exhaustivity involving user-defined unapplySeq
SI-5845 Advances the example from a crasher to an inference failure.
SI-4579 Yoke the power of lisp.scala as a stress for the optimizer.
Handled some of our new exhaustiveness warnings.
Orphan checkfile remover.
Help our new exhaustiveness checker.
SI-5652 Mangle names of potentially public lambda lifted methods.
Test case closes SI-5041.
Test case closes SI-4911.
Test case closes SI-4818
SI-5318 Make implicit divergence checking PolyType aware.
don't error when not emitting required switch
Removing non-deterministic actor migration tests.
Move implicit ExecutionContext to be determined by lexical scope
Closes SI-5821.
Cleaning up some code introduced for the old presentation compiler long time ago. Review by @dragos
fix SI-5829: refinement typeref has a prefix
Added lock by default and did a minor amount of cleanup.  More to come hopefully.
ASM now compiled once in the build.
Widen types in names/defaults transformations.
Creator for superconstructor tree.
Usability improvements to Origins.
Pending and passing tests.
Cleanups in Treecheckers.
Make phase fmask a public val instead of a private var.
Relax -Xlint warning for implicit classes.  Closes SI-5809.
more tests for SI-3761
Minor fixes for the Actor Migration Kit
SI-5779: Wrong warning message (comparing Number)
Better diagnosis for the SI-5044 fix
For the benefit of future debugger users, let the context print some more useful information about error reporting
Last minor cleanup
Exhaustivity: TreeMakers as boolean propositions
TreeMaker approximation refactorings and bug fixes
More consistent solution for errorenous situations when infering the alternative. From now on we specify explicity which attempt is tried and setError on the tree depending on that. Relying on the context was a nice idea to avoid that but was fragile when we were in the silent mode (like checking named arguments).
SI-3761: Overload resolution fails on by-name parameter (amended per lrytz)
SI-2405 Confer implicit privileges to renamed imports.
SI-5779: Wrong warning message (comparing values of types Float/Double and Number using `==' will always yield false)
fix for SI-5672
SI-3761: Overload resolution fails on by-name parameter
Closes SI-5735, this could also potentially fix a SO problem that @adriaanm was experiencing in IDE but could not reproduce it.
SI-5760: Improve error message for package$Klass conflict with Klass
Consider method-scoped companions in the implicit scope.
Test case closes SI-3880.
Pending test for SI-3899.
Improve test for SI-5125.
Actually fixes SI-5055. Scaladoc now a zillion times less annoying
Adds ability to navigate Scaladoc with arrow keys
Minor fix to Tab-switch keyboard shortcut
Added Scaladoc keyboard shortcut: tab toggles between panels
Adding the Actor Migration Kit.
Further fixes SI-4717.
better feedback for SI-5044
fixes resetAttrs
Added infrastructure to enable easy enrichment of GenTraversables.
A band-aid solution for SI-5803.
An IntelliJ module for test files.
SIP-14: clean ups and fixes
Missed a stash
Test case for SI-3844 - fixed by #virtpatmat @adriaanm
Corrects links in API documentation
Putting back things sbt noticed were gone.
Removing more unneeded code.
mutable.MapLike: override $mapNote to reflect actual require mutable api
Test adjustments.
Removing extraneous files.
Enumeration#maxId: fix documentation to reflect reality
Add more logging.
Missed a straggling doc comment.
Small documentation fixes & small fix to Scaladoc @see formatting
Tweak to avoid value classes in modifier check.
New starr with adriaan's fix from 1b198fadd1 .
Debugging output tweaks.
No-op changes.
Better fix for SI-5676. Review by @paulp
suspend type vars in SubTypePair's equals
fix SI-5384
Closes SI-5796.
Removed an unnecessary self type.
Added test case for commit f7d5f45 (re SI-5552)
Specialize lazy vals (closes SI-5552)
Test case closes SI-5137.
Address doc comment rot in the standard library.
Tweak to the runner to deal with the big bad world.
Deprecated some classes.
Test for SI-5394.
Test case closes SI-5037.
Clutch modification to tree printing.
Confirm extractor based pattern matches don't explode exponentially.
NSDNHAO need not tell us in which version it resides.
A REPL pattern matching crasher that crashes no more.
Another bug bites virtpatmat's dust.
cherry-picking important macro fixes from topic/reflection
Test case closes SI-5407
Test case closes SI-4124.
Test case closes SI-5165.
Recognize java enums as constants from source.
fixes a problem with an extractor object overloaded by a regular def
Remove the Plugin nature in the Scala compiler project file.
Use TreeInfo#isSelfConstrCall, rather than the hand-rolled version.
Removing redunant/passing tests from pending.
Test case closes SI-2435.
Forbid forward refs from self constructor invocations.
A whole bunch of checkfile updates.
Checkfile update.
Test cases.
Impl classes printed more accurately.
Quieted down a developer warning.
Be discriminating about custom hashcodes.
More useful crash reports.
Tweak to deal with reflective mirror.
fix test so that new patmat is tested
more defensive bridging to extractor: consider boolean
Move resolver and resolveEither to impl.Promise
Don't regenerate properties file if skip is true (i.e. locker/quick is locked)
Everything now builds.  Partest is bombing about reflection issue.
Don't forget to execute pending interrupt requests when shutting down the presentation compiler.
A bunch of fixes for positions when dealing with partial functions
Another test for SI-2296.
Custom hashCode methods for case classes.
Revert recent commits.
Checkfile update.
Restored portion of code removed in a7f68ce32c .
fixed typo
removes redundant hash implementation from BoxesRunTime.java
imporved comment related to SI-5178
Added an additional test case rather than leaving it in my REPL.
Added tests for SI-4190.
fix SI-1247: don't create a thunk for a by-name argument if the argument expression is a Function0 application
Test case for SI-5378
Appendix. Typo that wasn't covered by the test suite.
Making the locator more robust in the face of weird originals. And changed positions in AnnotationInfo to avoid position-less trees there.
Add test-case for SI-5564.
GenASM activated via -target:jvm-1.6 or -target:jvm-1.5-asm
Changes scala.math.signum to return negative zeros.
glue ASM <-> GenASM, the only part of scala.tools.asm to maintain manually
subset of the ASM framework, re-namespaced as scala.tools.asm
compile Java files under src/compiler
make strap build use exact same compiler options as quick build
Part IV of the Lazy Vals Saga: Optimized local vals. That's all folks.
documentation about BasicBlock and Inliner
BytecodeWriters can do without the FJBG dependency
Add test for t5564 in pending/pos
overriding rather than pattern matching in icode.Opcodes
A little sketchiness in recent commit.
Test case closes SI-3798.
test for SI-4560
test for SI-5534
test for SI-4728
test for SI-5503
test for SI-5585
test for SI-5521
test for SI-5654
test for SI-5610
test for SI-5722
tests for SI-5726
minor tag-related fixes
Add test for t5579 in pending/pos
Part III of the Lazy Vals Saga: Inliner strikes back. Or at least let's hope it will.
Test case for SI-2066
Add test files for t5639 in pending/pos
Add test for t5695 in pending/run
Add test for t5708 in pending/presentation
Test case for SI-1557
Add test file in pending/pos
Add missing methods to GenTraversableLike.
Test case closes SI-4568.
Test that primitive arrays aren't accepted as a Java generic array.
Don't hop to the first enclosing, non-silent context when typing refinements.
Don't admit primitive arrays as a generic Java varargs param.
Test case closes SI-1785.
What did you bring me Santa?
Working around the VerifyErrors.
A couple checkfile updates which snuck by.
Removed some tests for a "not a bug".
Put corresponds on Iterator.
Have ArrayCharSequence reuse its Array.
Updated Symbol to record classfile origin.
Reluctant surgery on partest.
run patmat after typer, but not *right* after
Part II of the Lazy Vals Saga: Saving bitmap by the Three Musketeers: Byte, Int and Long. And Boolean (hey, he also deserves some credit!).
Test case for SI-5106.
Pushing ClassfileParser toward a new day.
Improving organization of classfile parser.
Clarified the status of SI-13.
Moved passing tests from pending to files.
Test cases for SI-5472, SI-5399, SI-5685.
Test case closes SI-5655.
Removed BackquotedIdent.
Hardening implicit classes.
Moved a warning behind -Xlint.
SI-5703: normalize refined types more
SI-5720: Qual block doesn't update sym owner
Remove newPromise method
Resolve merge conflicts
Eliminating reflective calls.
Part I of the Lazy Vals Saga: Bitmaps are no longer inherited.
Unanchored regex extractors.
Test cases for si-4536.
Pending test for si-4683.
No one define sh_highlightDocument
Test case for si-5198.
Pending test for si-5240.
Pending test for si-5514
Test case for si-5559.
remove -Xoldpatmat where test no longer needs it
Changes scaladoc of trait Dynamic
Test case for si-5606.
Add a link to "z" in Scaladoc
Test case for si-5618.
cleaned up partialfun synth in uncurry
fix SI-5682
SI-5542 closed by test case
Pending test for si-5676.
Add pending test for si-5698.
un-cps expected type in translateMatch
Add pending test for SI-5018.
SI-5729: TypeVar experimentals iff -Xexperimental
partial fun synth typing under correct pt
moving patmat to its own phase
move more of match translation out of typers
small tree attachment refactoring: firstAttachment
fixed typo in documentation of @cpsParam
tpe -> tpeHK here and there.
Workaround for scaladoc failure.
Look at all the Strings which no longer are.
Hackaround for people who like to instantiate the uninstantiable.
A little clarity for AddInterfaces.
Refactor Unsafe related stuff in scala.concurrent.
Upgrade jQuery from 1.4.2 to 1.7.2
Refactor OnceCanBuildFrom to check the collection type.
Widen types in signatures of Future companion methods, refactor OnceCanBuildFrom.
De-duplication in Contexts.
Optimization of Predef implicits.
Add promises tests.
Presentation Compiler tests for visibility of members.
Fighting bitrot with typing.
Eliminate useless type parameter.
Removed all the imports of the bridge annotation.
@unspecialized annotation.
Removed a few more @deprecated members.
Removes @bridge methods.
SI-5543: Ctor default arg wrongly scoped (revised)
Another tedious day at Checkfile Ranch.
Porting akka future tests.
Revert "Moved ancillary methods off specialized traits."
fixes broken eval tests
Maybe this will fix the test on windows.
fixes SI-5713
essential information about macro expansion
SI-3755: catch exception thrown by adaptToNewrun
SI-5702 Pattern parser halts on star
Better position printing in NodePrinters.
A brand new, fast classfile parser.
clean up typedMatchAnonFun
SI-5690: no-selector match in function yields function
cleaning up macros, one step at a time
Trying to set an example in the land of macros.
More style tips for team macros.
Reverts 211df62491 .
diagnostics for SI-5692
fixes SI-5693
removes Expr <-> Tree implicits
Minor tweaks to reifier logic.
Some long overdue conveniences.
Added a Presentation Compiler test for hyperlinking.
updated tests now matches aren't translated if forInteractive
fail gracefully on very messed up source files
don't translate matches in the IDE
fixes SI-5707
fixes SI-5706
Moved ancillary methods off specialized traits.
Reordering genBlock match cases by frequency.
Update checkfile with more backticks.
fixes SI-5704
updated check file
TODO: use tree attachments instead of subclasses
copy BackQuotedIdent trees (don't copy as Ident)
generate well-formed patterns in parser
Back from the dead, it's ScalaObject!
Express flags as bit shifts.
"@returns" is not a Scaladoc tag
$op_name, $op_names, $plus and $eq are not macro
Make scala.language vals lazy.
adds isStatic to Symbols API in macro context
Removed FlatArray.
interop between manifests and tags
resurrects manifests in their pre-2.10 glory
migrates stdlib and compiler to tags * all usages of ClassManifest and Manifest are replaced with tags * all manifest tests are replaced with tag tests
rethinks tags * introduces ArrayTag and ErasureTag * all type tags now feature erasure
poor dummy, what have they done to you
minor fixes to reification
Scaladoc's tests should work with test/partest
Reflection and reification: Names and Symbols.
fixes SI-5689
scala.reflect.api: Reporters => FrontEnds
Good-bye, scala.dbc.
a deprecated method that I forgot to restore
fixes SI-5680
minor fix to macro tracing
change com.typesafe.config dep to version 0.4.0
suppresses warnings introduced in a2115b2352
Minor optimizations with nested list operations.
Sigh, sbt needs this one too.
fixes tests
reintroduces prematurely removed manifest factories
assorted stability fixes
adds a dummy mirror
adds erasures to concrete type tags
big fat error message, reloaded
Try to fix sbt.
Unbreaking tryComplete + Future.apply since resolver must be use both for boxing of callback and for execution
Changing impl.Promise to return this.type
Another checkfile update.
One more checkfile update.
New facility: TypeDestructurers.
Inliner won't touch private/protected fields anymore
Adding FIXME to ExecutionContext.fromExecutorService
Cleaning up DefaultPromise.onComplete
Removing the wrap-method from Promise
Rewriting the doc message for tryAddCallback so it reflects the semantics
Removing some verbosity in Promise.tryComplete
Removing a lot of residue and superfluous method declarations. Moving out newPromise to the implementations instead of having it inside impl.Promise
Introducing tryCompleteWith for symmetry and for the possibility to treat racing completeWiths as a problem or not.
Streamlining calls so success/failure go through complete, also made sure completeWith doesn't crash on multiple attempts.
Updates forkjoin.jar sha1
Resolve feature and deprecation warnings in scala.concurrent
Clean ups in futures based on review by @heathermiller and review by @viktorklang
big fat error message for default mirror failures
don't emit tiny switches: optimizer chokes on them
restore typedMatchAnonFun in all its glory
work around optimizer bug SI-5672
Revert "change com.typesafe.config dep to version 0.4.0"
removes obsolete macro tests
implements reification of tough types
Added preliminary doc comments to language object.
change Application to App in scaladoc sample code
work around optimizer bug SI-5672
Changes to access modifiers on Unsafe and NonFatal, adds/fixes doc comments
Made checkFeature conditionally run immediately. Adapted Macros to make use of it.
Move primitive widening implicits to companions.
Reimplemented shadowing between class members
Adapted implicits testsuite for SIP18
no longer need -Yvirtpatmat
Added NameTree Tree interface.
virtpatmat on by default; chicken out: -Xoldpatmat
virtpatmat: initial CPS support
wip: put skeleton for typetag-based typetests in place
more prudent bridging to unapply[Seq]
synth PartialFunction in uncurry
cleanup in refchecks
print labeldef's parameter types
restores some disabled macro tests, makes checkFeature synchronous when used for macros
One more macro test to disable for SIP 18.
disabling scaladoc tests. Don't know how to fix them to make them work under SIP 18.
one more macro test sdisabled that lipped through the net before.
DynamicProxy: improved docs, fixed EOL style
disabled failing macro test; needs to be adapted to new scheme.
change com.typesafe.config dep to version 0.4.0
Disabled macro neg tests that no longer make sense in this form
implemented DynamicProxy as portrayed by the Scala reflection team
Fine-tuning of isRepresentableWithWildcards and wildcard printing.
SI-5663: Tweak warnings on case class equals
Renamed seven files.
Added languageFeature annotation (was missing before). Resolved problem with late loading of nested classes in Definitions. Resolved handling of deprecated idents `then` and `macro`. Massaged test flags.
Improved formatting/display of documentation.
enable implicit enrichment when typing patterns
parse patterns, not exprs in interpolatedString's holes
rule out sequence arg to applyDynamic
implement SIP Type Dynamic
Adds most recent iteration of the ForkJoinPool, and updates it to now run on JDK 1.6
Adds test and check files for SI-5666. Covers common non-newable types.
Adding FIXME about putting mixed beans in the EC-basket
Adding NonFatal matching as to not catch anything that should terminate the JVM, also adding EX.reportFailure where it makes sense
Added missing objects.
Replacing all ⇒ with => in Promise.scala and harmonized def value to use same match approach as def isCompleted
Making sure that the ScalaDoc for Future.apply has the right names
Adding NonFatal and Unsafe to scala.concurrent.impl
Updating to latest version of Akka's DefaultPromise
Small cleanup in typeref toString
Touching the untouchable.
Portability changes to binary-repo-lib.sh.
Introducing some whitespace before colons.
Scaladoc feature that shows implicit conversions
performance counters for macros expansions
Enabling postfix ops feature warning, and working on libs to avoid them.
Various improvements to SIP 18 diagnostics. Made scala library and compiler feature clean.
Adjustment to recent fix.
Add managed blockers to execution contexts.
SI-5510: string interpolation: parser no longer hangs on unclosed string
Cache consistency checks for starr binary repo.
fixes petty macro tests
Workaround for SI-5657.
Workaround for SI-5583.
fixes petty macro tests
Making changes in the scala.concurrent package.
Reconfigure build.xml so -Xmacros isn't lost.
Revert "Enabled continuations plugin by default."
New starr with implicit classes and macros.
Moving Duration DSL to a separate package.
Disabling failing tests.
GroundTypeTag => ConcreteTypeTag
Implementation of SIP 13 take 2.
Implementation of SIP 13 - implicit classes
Next generation of macros
new annotation targets for companion classes/objects/factory methods.
Implementation of SIP 18. We still need to get rid of the warnings caused by it. Before we do that, I'd like to check in the SIP 13 implementation.
changed applyDynamic explanation in trait Dynamic
This change enables the alphanumeric method to be called from SecureRandom
fix for get-scala-commit-* on Windows (tested with Windows 7)
SI-5571: adds @volatile to field Enumeration.vsetDefined
fix field init problem in NoStackTrace
Cleaning up some repl mechanisms.
Less laborious type application.
Make specialize check cheaper and consistent.
Bumped the number of samples of the memory leaks test to 50. This should make it much more resilient against spikes. Also removed usedmem file dumps.
More Symbols and Flags.
Small simplification of commit 87c9fc0df0f0e74d3a07f95634356d6425877091. eqTypeCode(Number) is equivalent to typeCode(Number). CHAR code is impossible because java.lang.Character is not subclass of java.lang.Number.
make PresentationCompilerThread a daemon
Flag performance and Name management.
Style tweaks to b28ece2f4b .
SI-4134: abstract override crasher if lacking super impl
fix memory leak in Iterator.++
Make NumericRange# O(1) instead of O(n).
Moving flags around for performance.
A little BoxesRunTime fix.
Disable dysfunctional inline annotation.
Giving HotSpot a better chance at BoxesRunTime.
A boatload of work on Symbols and Flags.
Test case for overloading resolution during reflection.
Added overloading resolution to reflect.api.Symbol
Symbol activity tracer.
avoid field init prob: make NoTreeAnnotation a def
Add some ExecutionContext factories.
Added Option#fold.
Unify "object Foo" and "Foo.type".
Add tests for future combinators: map, flatMap, filter, collect, foreach, recoverWith, zip, fallbackTo
Added an incredibly hacky way for us to override the default sbt compiler interface.
avoid memory leak by avoiding default arg
Added presentation memory leak test.
Remedies Try/Either signature disparity for source compat. w/ Akka
SI-5627 BigInt.equals(Number) and BigDecimal.equals(Number) should implement equality in mathematical sense
Pushed Symbol/Type creation partitioning further.
More principled unwrapping of types.
Cleaned up "isTupleTypeOrSubtype".
Maven repository dependencies are now added to distributions.
Build.xml can now resolve artifacts from maven central and use them in the build. * Artifacts are resovled from maven central after the STARR repostiory * All maven dependencies are added to aux.libs (every classpath) * Typesafe config library is added by efault.
Tagged builds now display tag version. (maven = canonical).
remove unnecessary classpath entry
Remove blocking from execution contexts.
specialization: see outer contexts to fix symbols
virtpatmat support for the new partialfunction
old patmat support for the applyOrElse partial fun
a fast, functional PartialFunction implementation
Cleaning up logging in specialization.
A couple tests for pending.
Adds links to parallel collections overview in API docs
Add withFilter and mapTo to futures.
Add methods in the Future companion object.
Revert the lisp test.
Never write final fields outside of constructors.
Revived the lisp test.
Work on source compatibility between akka and scala futures.
SIP-11 String Interpolation Simplification
SIP-11 String Interpolation Simplification
Add JavaConversions and JavaConverters concurrent.Map support.
String interpolation bug fix
Rename ConcurrentTrieMap to concurrent.TrieMap.
Workaround for "package is not a value".
Remove sbaz and references from master repository.
Removed git from source repo generation.
Updated README for latest installations
No longer generate SBAZ documentation as part of distribution.
Added latest link for sources so we can include them in distributions.
[vpm] smarter type inference on when virtPatmat is on
[vpm] suppress refchecks in matches
Syntactic/organizational optimizations in Settings.
[vpm] error message on missing parameter type
[vpm] skolemize result type in translateMatch
Slight comment tweak for more colloquial English.
Removing some foolishness.
Scaladoc is now pointing to sources in github
Close issue #SI-4488
Broke up def bridgeDefs.
Ctor default-getters unique name and are typed in constructor context
[vpm] defend against null in erroneous type pats
further tweaking packing magic
splice in typed, dup'ed, trees for TRUE and FALSE
less invasive packing of types in branches/cases
[vpm] need cast in one for GADT magic
typedMatchAnonFun's missingCase call use apply's arg
[vpm] be more careful about swatches
do nothing when closing closed block in ignoremode
[vpm] avoid verifyerror: leave jump to tail-pos label
don't throw error in setError when -Ydebug
[vpm] typeMatchAnonFun improvements
Adapted scaladoc test
Changing URLs for svn and issue tracking.
Document regex replacement strings behavior.
Regex improvements
[vpm] be more careful about swatches
do nothing when closing closed block in ignoremode
[vpm] avoid verifyerror: leave jump to tail-pos label
don't throw error in setError when -Ydebug
[vpm] typeMatchAnonFun improvements
Undo the revert.
Test case for cause of previous commit's reversion.
Revert "Made changeOwner more robust; now also deals with return expressions."
Scaladoc: improved usecases, display full signature. Closes #5291
Test case closes SI-4987.
Increased the timeout from 5s to 60s to make the presentation compiler shutdown test more resilient on slow machines.
minimalist refactoring to allow annotating trees
disable version numbers on windows, they're broken.
An illustrative delayedInit test.
Overhaul of JavaConver{sions,ters}.
Clarifying MethodSynthesis.
Allows now private primary constructors in value classes.
Overhauling mixin.
Restore irrefutability commits.
Lots of tedious warning and tree printing work.
Tweak to string coloring.
Revert irrefutability commits.
Prepared actors hierarchy for migration.
[vpm] pack types of if branches before lubbing
[vpm] fix half of my existential troubles
[vpm] typer synths Function{} for empty-sel match
specialize symbols for labeldef params
[vpm] tailcalls support for jumpy vpm
[vpm] label-based translation of matches
[vpm] TODO note: make unapply type list stricter
[vpm] test file for regression on old patmat
Deprecate scala.parallel.Future and privatize a few classes.
Cleaned up Duration for the standard library.
optimise flag should be shown in scalac.args info
Yet another attempt to make the version a  good one
Test cases closes SI-4574.
Spiced up the irrefutability tests a bit.
Discovered filter was still being generated.
Finally did something about broken irrefutability.
Adapted usecases to full signature display
Adapted indentation in scaladoc code blocks
Chill out repl ctrl-char filter.
Overhaul of NodePrinters.
Tree adjustments.
Separating Scala Actors from the Scala Library.
SI-5189: refined GADT soundness fix
Add 2 benchmark sources.
First cut at a release notes tool to help generate them.
Library for ansi color management.
Added +: and :+ extractors to mirror append/prepend.
Eliminating warnings in Cleanup.
Testing compiler asSeenFrom directly.
Added alternate test for SI-5545.
Simplify check for transient fields in mixin.
Revert "More uniformity for the parser."
Finished migrating to new versioning scheme
properties loading is now maven/osgi version aware. yippie.
Modified build for new versioning scheme.
Moved to Mirco's versioning idea.
Adapted tools/verify-jar-cache for Ubuntu
Renamed concurrent trie source files.
Renaming Ctrie to ConcurrentTrieMap.
Finish fixing range positions.
More uniformity for the parser.
New option -Ypos-debug, and fixed range position breakage.
Tweaked deprecation annotations to avoid warning
Space/Tab cleanup script - run before committing
Re-fixed 2.10-style literals.  Oh, silly Windows and your line endings.
SI-1118: * Use new-style deprecation annotations * Slightly less cutesy test text * Move t1118.scala to the right directory
Cleaned up failed manual patch
SI-1118 WIP
SI-1118 WIP
create relative symlinks in ant scripts
Remove confusing nightly.checkinit target that was setting checkinit in optimise params
Remove some custom serialization boilerplate.
Whitespace and a couple checkfile updates.
The rest of the inline classes.
Eliminate build-breaking import.
Disable transient field checks in checkinit.
Cleaning up stray ScalaObject references.
New starr to support new fundamental laws of reality.
Removed "Todo: test" where a test exists.
Updated flow for creating new STARRs.
Add symbol to Manifests.
shortening Name-String-Name-String conversions to just Name-String
SI-5189 fixed: safe type infer for constr pattern
SI-5189 1/2: inferConstrInst uses correct variance
cleaned up inferConstructorInstance; same behavior
rather than info.parents, superClass and mixinClasses are enough
Wider net on final fields.
Changed printlns to use debugwarn.
Allows case classes as value classes
dynamic dispatch instead of map lookups or equality tests
fewer lastInstruction lookups
readability
readability
mechanically applying the above recipe
there goes the pattern matching of CJUMP
same story: inspector method beats pattern matching
replacing pattern matching with isWideType invocations
Force .info before creating new synthetic syms
New starr which has java.io.Serializable as a universal trait
Make scala.io.Serializable a universal trait.
leveraging isIntSizedType
the idea is to cut down on checkcast instructions
de-specialcasing
readability
factoring out repetitive work
readability
Closes #SI-5554
readability
readability
fewer hops to emit ASTORE and ALOAD
Closes #5553, review by dragos
#SI-5546 fixed: refine refined typing for getClass
Updated checkfile for retronym commit.
Added check that primary constructor of a value class must be public.
new and updated test cases for value classes.
making indentation IDE-aware
Now spots double definition after erasure errors involving value classes.
Make task support implementations public.
readability
Oops, all the preceding meant SI-5541.
Revert attempt to limit private types in lubs.
Overcame trait/protected/java limitation.
Test case closes SI-4777.
An old patch on pattern matcher exhaustivity.
readability
avoiding fjbg's JClass in getFile()
Handle empty format specifiers in the formatting interpolator.
Adding execution context based task support implementation.
calling a side-effecting boolean-returning method last in condition
More consistent use of atPhase.
Another try to quiet the inliner.
Changes to appease the inliner.
Lift only *non-local* returns of try expressions.
Whitespace commit.
Better fix for presentation compiler memory leaks, take 2. The previous fix (explicit call to `perRunCaches.clearAll()` introduced subtle bugs since maps in `Namer` *are* needed between runs.
Added comments to local definitions. Closes 5527
Reworking synchronized patch.
Test for SI-5529.
Don't print underlying type of modules.
Improving error message.
Specialized NonLocalReturnControl.
Added tool for verifying jar cache.
Workaround for scaladoc bug SI-5527 that crashes the build when mixed with range positions
Update pull-binary-libs.sh to cope with curl not installed
Some logging cleanup.
Toward a higher level abstraction than atPhase.
New forkjoin jar as described in 76e9da2ca4 .
Mainstreaming phase awareness.
Added updated ForkJoinPool, w/ necessary updates to Scala Actors.
Better fix for memory leaks in the presentation compiler. Switched to perRunCaches and call clearAll from the presentation compiler
-Xplugin value passed by the Eclipse IDE are incorrectly parsed when it contains whitespaces.
Fleshed out the @elidable documentation.
Followed up on two aged todos.
update api docs for @elidable to match the behaviour more closely.
Moved and edited tests.
Make partest not fail over code.jar's placement.
One more to derive trees.
Change time constants in test to avoid failures.
Add tasksupport as a configurable field in parallel collections.
Add test for AbstractionFromVolatileTypeError.
Add tests for QualifyingClassError.
Add test case for ParentInheritedTwiceError.
Added test case for FinitaryError.
Add test for ConstructorPrefixError.
test for DependentMethodTpeConversionToFunctionError
test for TooManyArgsPatternError
test for OverloadedUnapplyError
Methods to derive ValDefs and Templates.
Made new automatic version of mkCast more robust for non-standard compilation setups by refining the logic what it means to be after a phase.
Methods to derive new DefDefs.
One last nudge for elidable.
Reworked and restored elidable.
Revert recent elidable commits.
Disabled one failing test.
Made 3 classes in the standard library into value classes.
New binaries to support value classes in standard library (the ones two commits ago were a mistake).
Compiler now ready to accept value classes in standard library. Time for a new STARR!
More use of perRunCaches.
Don't populate the concreteSpecMethod set in presentation compiler runs. This is safe because the presentation compiler never runs the tree transformer (where this map is needed). This is a source of serious memory leaks in the IDE, but it wasn't visible before because the IDE didn't run the info transformers far enough. Interestingly, this is not a leak in batch runs: each element of the set is removed when the tree is transformed.
Enable derived value classes with an underlying field of a type parameter. They are too useful to ban.
Make this substituter on trees also act on types, just as the other tree substitutres do.
Split StringAdd into StringAdd and StringFormat
Deprecate Refined Build Manager. It contains bugs that we are no longer planning to work on, sbt is a recommended approach (see integration with scala-ide)
Add 2 benchmarks for Ctries.
Updatwd check file.
Changed erasure boxing/unboxing scheme to support value classes that wrap reference classes.
Allowing for protected methods in value classes.
Made more traits universal.
Moved mkCast and derived method from reflect.internal.TreeGen to tools.nsc.ast.TreeGen. Made mkCast generate the "right" version of casts according to current phase.
Made TreePrinters print classes that extend from AnyVal. For Paul to check if OK and remove commented code if that's the case.
Made changeOwner more robust; now also deals with return expressions.
Test for SI-5171
Test for SI-5316
Disallow eliding when Nothing is expected
Added the SYNTHETIC flag for BRIDGE methods. The Eclipse Java compiler complains about duplicate methods otherwise.
Eliminating duplication in zero creation.
Speed up deployment using combined deploy settings.
Removed dead code in RefChecks.
Added the ability to publish signed artifacts.
Javadoc + Source jar generation is now complete for maven deployment.
Renamed "inline class" to "derived value class"
Removed one more stone the parser threw at me for daring to have new value classes in the Scala library.
A better error message for inheritance conflict.
Streamlining skolemization, specialization.
fixes SI-5506. better cps type propagation for polymorphic and multi-argument list methods.
Specialize Tuple2 on more types.
Implemented super access in value classes, restrictions for value classes.
More specialization tests.
More on SI-5500.
Cleanup in aisle New.
Closes #5497. Chain contexts by sharing the error buffer, unless you explicitly create a silent context. Review by @odersky
Optimizations.
significantly faster Inliner, with extensive documentation.
Move code to a better place.
 Closes #5452.  Instead of trying to track the fallback attempts we rely on the  context state to inform us which fallback is the last one.  setError cannot always be called in NoBestMethodAlternativeError  because inferMethodAlternative relies on side-effects.  Review by @paulp.
New FlatArray scheme for handling value classes.
[vpm] simpler implementation of switch emission
[vpm] PF's missingCase, cleaned up isDefinedAt gen
[vpm] avoid triggering virtualized matching
[vpm] generate proper isDefinedAt for switches
[vpm] working type switch for try/catch
remove unused `tree` argument from typedCases
replace methods containing a synchronized body with synchronized methods
Disable execution context and futures implementation in the default package.
Prevent extaneous output in SI-5005
Added test files to verify previous commit.
Major rewrite of sys.process documentation.
Close file descriptor leak in sys.process.
let fjbg know about the synchronized flag
test to check for proper synchronization in generated code
Test cases which motivated preceding reversions.
Revert "Make fix for SI-5452 not break other things."
Revert "Restored scala.reflect.Code."
Apply the fix for si-5293 to hash maps.
Restored scala.reflect.Code.
Trying generic value classes. Does not work yet, but fixed on bug already.
Refactor Ctries to eliminate "Cannot inline method" messages.
Makes multiline interpolation work finely
Improve handling of final and @inline in specialization.
Updated check file.
Implement `remaining` method in ParCtrie splitter.
Add parallel size computation for ParCtrie.
New scheme for "Rows" of value classes.
Add lazy size evaluation to Ctries.
Changed array erasure scheme to never unbox elements of inline classes.
Add `dup` method to ParCtrie iterators.
Specialization action.
Eliminating trailing whitespace in AnyVals.
Remove stray "desired" sha1.
Disables typechecking that precedes reflective compilation
Made speclib less of a maintenance headache.
Preprocessing for reifees
Changed erasure behavior of arrays to use always boxed representation.
Refactoring to control the effects of inline erasure, restricting them to just the erasure phase and its actions.
Modified repository deployments to point to OSSRH
changed repo id to denote new credentials for new serer.
Make fix for SI-5452 not break other things.
Man, these one argument asserts.
Modest deverbosification of recent commit.
Existential printing, plus more compiler testing infrastructure.
Modified repository deployments to point to OSSRH
Setting up things to demonstrate a swallowed type error in manifest generation.
Added missing files from last commit
All steps of value class proposal implemented. Most restrictions are now enforced. Super calls and specialized still missing.
Deprecating /:\. Fold should be used instead.
reifyAnnotations
Updated existentials test with non-working parts.
Another existential problem down.
Overcame long-maddening existential issue.
Failing tests for pending.
Added back `internal.Symbol.toplevelSymbol` to resurrect the IDE for trunk.
Remove alphanumeric characters from the major part of the Scala version number.
Updated information about desugaring of macros
wip. Getting started on erasing inline classes.
Removed Code.scala
Rename isValueClass -> isPrimitiveValueClass
Making the Meter test expand and compile.
Added test case.
fix maven publish version numbers
new starr based on v2.10.0-M1-167-g0ccd295a78
Added a rootdoc page for the compiler API scaladoc
Scaladoc @usecase annotation overriding / SI-5287
Removing unnecessary AnyVal code.
Added hook in erasure.
Added the "nofail" flag to the scaladoc ant task
Assorted fixes
Automatically fetch jars as needed
A first bunch of Any-extending traits.
Removing AnyVal as a source class. Removing automatic addition of ScalaObject. Undoing wrong fix in ExtensionMethods.
Definitions are now initialized in reflection (was missing before).
Different treatment of Null <:< T, to allow for Any-extending traits. Without the change,
Revert "Added a rootdoc page for the compiler API scaladoc"
Revert "Scaladoc @usecase annotation overriding / SI-5287"
Refining the reflection api.
Reimplemented Modifer.
Scaladoc @usecase annotation overriding / SI-5287
Added a rootdoc page for the compiler API scaladoc
added reference equality checks to improve structural sharing
Replaced LiftCode with a function in MacroContext
one less TODO and null check
All tests passed... not counting scaladoc.
A couple more checkfiles and comments.
Made a typer hack less hacky.
Hardening in Constructors.
A little msil I missed un-reverting.
Removed now superfluous bootstrapper script.
Hardened/documented AnyVal constructor switcheroo.
Checkfile output update for AnyVal class.
Tweaking parent printing a little further.
Establish more baseline tags.
Time-traveled get-scala-revision to 3-way merge base.
Restored msil.
Utilizing convenience methods martin hasn't discovered yet.
Making AnyVal into a class instead of a trait.
Simple test manipulating Any-derived traits.
Having Proxy extend Any as well.
Guard List_apply from premature forcitude.
Made Any parents work more.
Updated checkfiles to subtract ScalaObject.
Updated bootstrap script.
ant and diff friendlier msil-disabling.
An IntelliJ module for the root directory.
Injecting epfl-publish into merge-base.
Temporary bootstrapper script.
New shas for bootstrap libs.
Disabled all things MSIL.
Eliminated ScalaObject.
Mostly eliminated ScalaObject.
Updated and added some runners.
Change the default reportFailure implementation.
Add tests for parallel Ctrie.
Restored build.number.
intermediate work towards a new starr for value classes.
Updated Flags toString/documentation.
Cleanups in classfile parser symbol creation.
Misc optimizations with zip.
Create a reference tag if none exists.
Extremely hacky tweak to deal with printf portability failure.
matchesType fixup.
[vpm] factored out optimizing codegen
[vpm] __match determines match semantics; virtualization
[vpm] factored out reusing treemakers (used by CSE)
Add parallel Ctrie parallel collection.
Miscellaneous fixes to reification
Incorporate Ctrie into standard library.
Hardens reification against rare kinds of Constants
Hardens classToType logic
Update RoundingMode.
Updated get-scala-revision to use git describe.
Add the Ctrie concurrent map implementation.
Added getPackage to the repl classloader.
Remove ParIterator and SignalContextPassingIterator.
Added a test-case for switches with Yvirtpatmat.
Convert values to Int in switchable patterns.
Generate default case for switches.
Get rid of unused import.
Add support for combiner sharing to parallel collections.
Tweak to repl debugging output.
Unfold pattern alternatives in genicode.
Rename to recoverWith and fallbackTo in Future.
Tests for https://issues.scala-lang.org/browse/SI-5427
Test case closes SI-5352.
Improved warning for insensible comparisons.
Replaced Either with Try throughout scala.concurrent.
First steps towards erasure of inline classes.
New trait for erasure of inline classes.
Introduce getAnnotations that triggers symbol completion
More work on inline classes.
Have ant notice starr out of date.
Pushed new starr and updated desired shas.
Synthesize getClass method for AnyVal children.
Removed obsolete checkfile.
Eliminated 2500 lines of whitespace changes.
Working AnyVal#getClass.
Print compound types legibly.
A couple power mod conveniences.
updated check file; got accidentally dropped from last commit.
Moving getClassReturnType out of erasure.
Add some missing methods, remove obsolete methods in futures.
Refactor the Try monad a bit.
Resinstantiating anyval-children test. Getting he complete build to run.
Changed the serialVersionUID in List serialization start marker.
Changed the comments a bit, removed on* methods on Try.
New phase that creates extension methods for inline classes.
Added first cut of Try type, refactored from twitter util.
Closes #4336. Some of the type params might already be instantiated if explicit type application is done. Review by @adriaanm
Test case closes SI-4515.
inline method expansion code
Test for https://issues.scala-lang.org/browse/SI-5418
Bonus test case for SI-3999.
More method synthesis unification.
Cleaned up polymorphic method creation.
Scalacheck test in order to ensure AVL invariants are respected.
Added benchmarking files, in order to easily compare various implementations performances.
Use of polymorphic dispatch instead of pattern matching. Use a specialized iterator.
Unsealed AnyVal.
-Yshow-symkinds: prints kinds next to symbol names This very situational option proved to be very useful when debugging https://issues.scala-lang.org/browse/SI-5415
Test case closes SI-3854.
Changed partest to use UTF-8.
Make 'illegal' characters less annoying.
Revert "-Yshow-symkinds: prints kinds next to symbol names"
-Yshow-symkinds: prints kinds next to symbol names
Implement the ensure and andThen methods on futures.
Change the implementation of the future failed projection.
Disabled "not found" suggestions.
Performance improvements for CommentFactory.
Intercept assert and require calls.
Set fields in immutable hash maps and hash sets to vals.
Put a stake in partest-alternative.
Dropping what looks like debug output from error message. Before the change, writing `class C extends AnyVal` in the REPL produced a compiler crash due to a NPE.
Added caching to binary resolution.
Refine fix for SI-5374 - make list deserialization backward-compatible.
Tightening of constructors in Symbols, to force everyone to use the factory methods that take account of synchronization when run under reflection.
More work on making reflection thread-safe.
Protecting the constructors of Scopes and Symbols so that everyone is forced to go through the factory method, which adds on synchronization when run under reflection.
Making Definitions thread-safe by replacing a bunch of vars with lazy vals.
Making reflection thread-safe.
Cleanup and better documentation of reflect.api.Symbols trait
Added doc comments to Names trait.
Scalac fork no longer dumps stacktraces on compilation errors
Use context for buffering errors that cannot/shouldn't be reported in the given moment (instead of throwing type errors). This avoids previous problems where we were creating fake error trees in some incorrect places like in type completers in Namers etc. Implicits relied heavily on type errors being thrown but performance should stay the same due to some explicit checks/returns.
Renamed a method and made it more available.
Eliminated redundant function.
Cleaner range counting.
Got out in front of catastrophic failure.
Created NoAbstractFile.
Moved some code.
Removed TODOs.
Update for fix for SI-5377.
Removed the nondeterministic implicit. Added rescue.
Made partest fully support locker-based distribs
Simplified emitSwitch in PatMatVirtualiser.
Custom implementations of drop/take/slice.
Test files for SI-5262, which was fixed by SI-5374.
Figured out the "$class$1" problem.
Linked up $class visibility to symbol redefinition.
Temporarily disabling debug traces in macro tests
Add test case for SI-4835 (https://issues.scala-lang.org/browse/SI-4835)
increased realiability
Custom coded version of range/from/to/until.
Made typeConstructor applicable for some.
A better REPL context classloader.
wip
Test case for already closed SI-4271.
Test case for already closed SI-4176.
fix to avoid loading what shouldn't be loaded
Add implicit for duration.
Made the binary push script a bit friendlier for humans
further reduction in inlining time. This time, 40%
Quick fix for one of the macro tests
Progress with macros
Improved performance of TraversableLike.dropWhile, which now stops re-evaluating the predicate after it once evaluated to true.
Closes SI-5066
Avoid calculating similar strings sometimes.
Add NonDeterministic evidence needed to call nondeterministic methods.
Made edit distance case-insensitive.
Add implicit conversion for futures that enables calling nondeterministic methods.
Deprecating some traits in scala.concurrent.
Added implementations for any and find on collections of futures.
Making sbt build work.
Upgraded the implementation of showRaw
Make specialization pick up opportunities when the specialized method has additional (non-specialized) type parameters.
The SpecializeTypes part of symbol cleanup.
Improved a cyclic reference error message.
Made a couple programmer functions more available.
Less regressive package object fix.
Symbol creation followup.
Refactor concurrent package and execution contexts.
A string interpolation implementation of SIP-11.
Work in progress.
bringing down -Yinline time by 33%
Add execution context implementation to akka futures.
Make AnyValManifest not a sealed class.
Getting rid of closure creation occuring for each rebalancing. Tail recursion is not necessary here.
Optimized implementation of TreeMap/TreeSet#to method.
Test case backing spec.
Putting some of the symbol potential to work.
Preserve attribute order in inline XML
Symbols making friends with Polly Morphism.
Toward the elimination of setInternalFlags.
Corresponding changes in ICodeReader.
Flattening the java flags -> scala logic.
Reword confusing explanation
syntactic error correction
Migrate akka promises. Changes to some of the interfaces.
Improve description of flatten, flatMap
Explain Function1 vs PartialFunction
Work in progress on porting akka promises and futures.
Removed some unsociable exception behavior.
Port of akka Future implementation in progress.
Disambiguate some type printing.
Streamlining output of -Yinfer-debug.
Refactor await calls for awaitable objects to ready and result calls.
Refactor blockable to awaitable on several places.
Add mutable tree sets to the standard library.
Changing trait CanBlock name to CanAwait.
Update Future.onSuccess to take a PartialFunction.
Optimizing TypeRef, starting with Symbols.
Disabling some scaladoc tests.
Inlining in Parsers.
Updated checkfile with IndexedSeq signature.
Rescued some import-related code.
Traitified JavaConverters.
Revert "Accept prefixed xml attributes with null value"
Remove maven deply from epfl-publish script.
Revert "Restored an implicit."
Restored an implicit.
Better error reporting regarding main methods.
Added toString to Codec class (uses Codec.name).
Test for maximum height of red-black tree.
Don't hard fail over missing classfiles.
Cleanups in Cleanup.
Made type constraint propagation off by default.
TypeConstraint/TypeVar refinement.
Made Array manifests return type arguments.
Tests for takeWhile/dropWhile/span.
Accept prefixed xml attributes with null value
Renamed object RedBlack to RedBlackTree.
Remedy spurious bounds conformance failure.
Output improvements for TypeVar tracing.
Restore old RedBlack class to maintain backwards compatibility.
Deprecate TreeMap.isSmaller and TreeSet.isSmaller.
TypeVar tracing.
Error message improvement.
Init order issue in Manifest toStrings.
More consistent use of Names.
Optimization in refchecks.
Consolidated misc collections helper methods.
Optimization in genjvm.
Optimization in Constructors.
Optimizing findMember.
Moved Origins into scala.reflect.internal.util.
Don't mark mixed in methods as bridges.
Add implementation notes. Consistently use eq/ne to compare with null.
Move nth method to RedBlack. Inline factories for tree nodes.
Don't infer protected members into lub refinements.
Optimize foreach and iterators.
Closes SI-5354.
Closes SI-5354.
Use null to represent empty trees. Removed Empty/NonEmpty classes.
Added forall to Option.
Optimization/robustness in the backend.
updated gitignore.SAMPLE, moved removed . from .project.SAMPLE to be in line with the other files.
Added option -Xlog-reflective-calls.
Added -Xlog-implicit-conversions.
Changed boxing of free mutable variables to be flexible wrt when liftcode takes place.
Hardening of adaptoNewRun to survive issues in presentation compiler.
Changed boxing of free mutable variables to be flexible wrt when liftcode takes place.
Implemented range without using pattern matching.
Implemented deletes without pattern matching.
Moved key/value/left/right fields up to NonEmpty class. Don't rely on pattern matching for updating the tree.
Hardening of adaptoNewRun to survive issues in presentation compiler.
More uniformity for the parser.
More performance work.
Low-level optimization.
Created VariantTypeMap.
Creator for existentials which flattens.
Better hunting for tools.jar.
Optimization in refchecks.
Optimization in backend.
Optimization in Flags.
Optimization in method synthesis.
Optimizations in typeref creation.
All projects can be locked now.
repl power mode improvements.
Minimize number of calls to ordering.
Added some tests for TreeMap/TreeSet.
Improved performance of RedBlack.NonEmpty.nth (helps take/drop/split/etc).
Performance improvements for iteration (foreach and iterator).
TreeMap/TreeSet no longer keep track of the size (the RedBlack tree already does so).
Made RedBlack private to the scala.collection.immutable package. Use ArrayStack instead of Stack in TreeIterator for slightly increased performance.
Make sure the redblack test compiles and runs.
Use single shared Empty instance across all RedBlack trees.
Changed abstract class RedBlack to singleton object.
Moved type parameter A from RedBlack to Tree.
Moved from Empty case object to case class in preparation of moving type parameter A.
Moved from implicit ordering value to implicit parameter.
Switched from isSmaller to ordering.
Implemented takeWhile/dropWhile/span to use tree splitting. This changes the operation from O(n log n) to O(n) and allows for more structural sharing.
Implemented drop/take/slice/splitAt/dropRight/takeRight for TreeMap/TreeSet by splitting the underlying RedBlack tree. This makes the operation O(log n) instead of O(n) and allows more structural sharing.
RedBlack.scala: Change count from 'def' to 'val' in NonEmpty tree to ensure TreeSet/TreeMap 'range' operations are O(log n) instead of O(n).
Optimized implementation of init/tail for TreeSet/TreeMap.
Optimized implementations of head/headOption/last/lastOption for TreeMap/TreeSet.
Use custom implementation for iterating over RedBlack trees. Raw performance is much better than '++' based iterator.
Use RedBlack.iterator to create iterators for TreeSet/TreeMap. This turns iterator creation from an O(n) operation into an O(log n) operation. Unfortunately, it halves actual iteration speed (consuming the iterator fully), probably due to the many by-name closures that are needed.
Tone down insensible-equality warning.
buildlocker for ant
Consecutive type application.
A handful of tests for closures under reification
scalacheck now also has pre-scalacheck and its personal timer
Addresses a bug in SimpleDateFormatter
Optimizing at the Name/String boundary.
Optimization in ZipArchive.
fixes #5104 and related NaN ordering inconsistencies
[vpm] when there's a default case, don't throw matcherror
[vpm] lambdalift becomes less NSDNHO-prone
[vpm] emitting switches -- BodyTreeMaker
[vpm] better codegen, especially for alternatives (suggested by Tiark)
[vpm] common sub-expression elimination for conditions
[vpm] optimized codegen avoids option-boxing
[vpm] unapplyProd: faster matching for case classes
Tests for recently submitted SI-5334
Documented emptyValDef field
global.abort calls global.error.
Hardening of resetAllAttrs.
Hardening of isJavaClass.
Omit non-essential TypeApply trees.
Hardening of resetAllAttrs to work in the case where TypeTrees refer to locally erased symbols.
Hardening of isJavaClass to survive IncompatibleClassChange errors.
wip
Non-essential TypeApply trees must be omitted, or they will cause a typecheck error
Type checking now puts tree to be typed in local context
Made -Ystop-after:parser work correctly
Attempt to fix classloader issues
Removing local linux sbt scripts.
Renamed .project to .project.SAMPLE, just like .classpath.SAMPLE.
Renamed .project to .project.SAMPLE, just like .classpath.SAMPLE.
Test case closes SI-5119.
unzip(3) on view now returns view.
Restored some methods to List.
Intermediate range commit.
Improve quality of scalacheck range tests input and output.
Brought version detection up-to-date.
Native SHA1 calculations.
Improved error output.
Make base TCK more uniform with Akka TCK
Add test for recover to Akka TCK
Force output of exception in assert. Add tests for recover.
Add tests for blocking/await to Akka version of the TCK
Change promise method signature.
Add Akka version of Futures TCK.
Rename block->await. Add more tck test cases.
Faster char2uescape.
Add stubs for future combinator tests.
Test case closes SI-4063.
Test case closes SI-4273.
More build.xml massaging.
Added cast to ParRange.
Range.foreach optimization.
Tweaking build string some more.
More on get-scala-revision.
typeParams now performs one more completion
Change promise fulfill and break to success and failure.
Adding the tck test file.
Syntax changes for the scala.concurrent package and some cleanup.
Print out more useful info in ant.
More on get-scala-revision.
Hardening get-scala-version.
Hardening get-scala-version.
Making path to settings.xml configurable.
Boiling more logic out of jenkins.
Parallelize sha resolution.
Batch files no longer swallow exit codes
Added per-file stats to -Dscala.timings.
Disabled another presentation compiler test.
Swimming with the jenkins current.
Separated build and publish scripts.
Unified 2.8.x and 2.9.x build scripts.
Moved jenkins build script.
MSIL now part of layered compiles
Add global scheduler with default implementation
Clarify scala.collection.immutable.Map#withDefaultValue() docs.
Deleted the sbt 0.7 project.
A minor doc issue with timeouts.
Binary resolution limited.
Added local cache for project jars.
Ensure sha files don't go to production
Added Future companion object, with all method.
Clean up standard/swing library by deprecating/moving code examples
Migration message and version cleanup
Restructed Enumeration a little.
More warnings eliminations.
Changed shadowed constructor parameter names.
Add promise implementation. Move fork/join implementation into default package. Factor commonalities of promises and tasks into Completable.
Some docs fixes.
Add tests for future callbacks
Minor changes with the docs.
Add future method to ExecutionContext trait. Log uncaught exceptions to stderr.
Reflective compiler now crashes properly
The isTimedout on fj futures fixed.
Got the futures and execution contexts related code to compile.
Implementation of the fj task and future.
A slight refactoring in promise and task factory methods.
Gave Option its own nonEmpty.
Update scaladoc links to collections overview.
Adding some comments to block on. Removing timeout parameters.
Adding SHA resolve to the SBT build so that we don't need the push/pull binary libs script anymore.  Only pull is implemented.
-Ydump-classes: the option to dump the generated bytecode
*.properties files are now generated more often  (on git SHA change *and* clean instead of just clean)
Disabled non-deterministic tests.
Enhanced scaladoc of collection classes with links to the relevant pages of "The Scala 2.8 Collections API" overview.
Completed default implementations of monadic ops on futures.
Don't generate redundant interfaces.
Another test pack for reflection
The default implementations for some of the future methods.
Tweaks to get-scala-revision.
Add Akka's future implementation for reference
Step one towards using project revision to build
Migration of scala.concurrent to clean fork of new Scala repo.
A minor fix to -Yreify-copypaste.
Use git-describe to create build string.
Enabled continuations plugin by default.
Test pack for various flavors of reflection.
Add a mnemonic to help remember what's the difference between +: and :+, plus one for ++:.
Reification of classes now produces trees that can be compiled and run.
Tweaked ident suggestions.
Added -Ysuggest-idents.
Eliminated redundant error message.
Delegate to Java's implementation of signum for Long and Int.
Tweaking ant bootstrap download.
Have ant auto-download the bootstrap libraries.
Test case closes SI-4758.
Test case closes SI-5084.
Add pull-binary-libs.sh warning.
Add filter/withFilter method to Parser
Add withErrorMessage/withFailureMessage to Parser.
Add withErrorMessage and withFailureMessage to Parsers.Parser, which can be used to reliably override the default no success messages.
Add filter/withFilter method to Parser, to complement map and flatMap when used in for comprehensions. This is required when pattern matching is used on the result of the generators.
Make Enumeration.ValueSet Serializable
Makes Range#sum an O(1) operation instead of an O(n) one.
Enumeration and Enumeration.ValueSet improvements
Added better warning message if you've forgotten to run pull-binary-libs.sh after initial checkout.
Tests for SI-3481.
Improve performance of BitSet.size
svn revision to sha-1 mapping.
Makes it possible to use env(1) to run scala scripts, by dropping the requirement of a !# line when using it. This is how some other languages, such as ruby, are run.
Re-enable RedBlack's ScalaCheck test, which was disabled at r21829.
Port of SBT 0.11.x build.  Things appear to be working well.
Improved BitSet implementations
Special treatment of emptyValDef in reify
Removed the word Subversion
A bit of ascii art from @skyluc.  This should make the README.rst prettier for showing the directory layout.
Modified README to rst for github move
improve cps handling of if-then-else. no review.
Moved the test for SI-5230 from files to pending
Added the check against UnitClass in freeLocals...
Test for SI-5230
Attempt to fix #5230. Review by burmako.
Small change to get rid of naming awkwardness f...
-Yreify-copypaste: the copy/pasteable mode for ...
Revised macro defs, added a test case.
Reflection toolboxes now respect settings that ...
test case for SI-3566
Experimental version of macro definitions.
fixed logic error in ant tests
added support for ant tests to partest
updated test cases for Scala Ant tasks
attempt to fix reopened SI-5196
Annotations reacquainted with reification.
low-hanging optimization fruit for virtpatmat
Fast PartialFunction # orElse.
Reduced accumulation of repackExistentials.
Minor restructuring in Implicits.
Optimization of typedArgs.
Refinements of "def seq" and murmurhash.
AnnotationInfo inertia takes me into continuati...
New starr based on r26060.
updated some code examples
fixed deprecated number syntax
- fixed code lifting of String, Int, ...
Slightly revised version for the new starr.
Preparations for new version of AbstractPartial...
Enabling the use of 'compilerarg' with 'scalacf...
Reworked AnnotationInfo patch.
New starr based on r26049.
type test optimization now takes GADT hack into...
optimized typedSubst
optimizing type tests and related stuff
a wider variety of treemakers
optimized version of cond
fixed extraneous output. no review.
Changed the way use cases are handled in scaladoc.
Make partest work with spaces in the path (from...
Compiler part of fast orElse.
More beautiful fast orElse infrastructure.
First part of campaign to make orElse on partia...
Move allDeclarations to make it available to al...
Long-standing performance mystery solved.
Implemented manifest-based class-paths.
Always build command lines in partest as Seq[St...
Use larger Java memory sizes from partest on Un...
Disabling failing javap test.
moving tree making to the TreeMaker factory
Partial cleanup and generalization of tree prin...
further clean up in virtpatmat
Cleanups in TypeApply creation and casting.
Bringing a bit of order to symbol substitution.
Enable the use of spaces in paths for the Scala...
Revert "Enable the use of spaces in paths for t...
Enable the use of spaces in paths for the Scala...
Reverted changeset r26024.
Removed some obsolete javacmd, javaccmd etc.
Updated/fixed the following two Scala Ant tasks:
another theory on the windows build
Revert "Testing a theory about the windows build."
Disabled broken test, review by odersky.
Reverted ProductN parent for case classes.
Added missing file from last commit
Towards better reflection APIs.
Amending my previous commit with a comment expl...
Made LazyType fail more graciously with incompl...
Changed reflection to allow getting a Scala Sym...
factoring more into ProtoTreeMakers
got rid of unsafe in typedSubst
minor cleanup in virtpatmat
null-robustness for presentation test
revert r25877. no review
Turning line endings to unix.
behold ExtractorCall: encapsulating extractors
Added functionality to clear project files from...
Minor virtpatmat cleanup.
Sin some more.
Testing a theory about the windows build.
scala.bat expansion with quotes and spaces.
Delayed expansion in scala.bat.
More defense against spaces in paths.
Working on the runners.
Made windows less aggressive about failing.
Makes -toolcp available on windows.
Enabled Presentation Compiler test for IDE tick...
Changes the fork join pool detection for JVM1.7...
Work in progress on #4541.
Enabled Presentation Compiler test for IDE tick...
Small changes to reflection prompted by code re...
Deprecated ambiguous dot syntaxes.
Cleanup around typeref creation and rebinding.
A comment answering one of adriaan's philosophi...
Allow to load $class classes using Scala reflec...
Better virtpatmat situation.
More refinements for the scratchpad.
Removed reflect.{Type, Symbol, Tree, Print} for...
(1) Made ReflectionUtils an object, to take its...
refactoring virtpatmat into modules, cleaning up
Unified binary representations under AbstractFile.
Updates for the ten tests I broke recently.
Distentangled platform specific code from loade...
smarter bridges to unapplies
Third collections commit from Todd Vierling.
Next collections commit from Todd Vierling.
Dropped about 1.5 Mb off scala-library.jar.
Closes IDE-1000567, SI 5013. No Review.
A couple bits of r25957 lost under time pressure.
Another round of pleasing the gods of init order.
Closed SI-5135
Changed presentation tests to use .flags instea...
Added akka.opts file (for presentation compiler...
Minor change to get closer to building under -X...
Attempt to fix failing test.
More elaborate error message.
More repl work.
Some modest optimizations and beauty treatments.
Repl deadlock fix.
Trying to fix sdt core build.
Reflection classloader adjustment.
ScalaClassLoader changes.
Begone t1737...
attempt to bring trunk build to normal state.
Added script to run ant and resolve dependencies
Whitespace fix for continutations tests.
Added *.log and build/ to gitignore so partest/...
Made some minor change in the presentation comp...
Revert r25648 by michelou, it brakes partest
Clean result of function type.
Code to locate currently transformed unit in ca...
Closes #5127. Review by extempore.
Test case closes SI-4875.
Test case closes SI-4957.
Test case closes SI-102.
Disabled test.
Overhaul of getter/setter synthesis.
Tentative fix for IDE #1000663.
Closes t5121. Review by szeiger.
Repl output fix.
Better report on missing methods.
Hopefully a fix for the hyperlinking problem.
Some readability for typer.
First end-to-end implementation of a runtime re...
Trying to fix getLinkPos problem reported by Mi...
Test case for SI-1100/SI-5108.
Reverted r25886.
Added a -Yno-productN option.
Changed typo on doc of scala.collection.Seq.
Pushed NPE defense in NoSourceFile.file out ano...
made compileUnits work from given start phase.
Debugging note.
Overhaul of Namers continues.
fixed svn props in test directory
Warn about surprising shadowing.
Positions fix.
Test case closes SI-5105, no review.
More overhaul of Namers.
Disabled failing "code" test.
Overhaul of Namers.
Towards runtime code generation. No review.
Isolated name change. No review.
made virtpatmat codegen type-directed
virtpatmat, hidden behind -Yvirtpatmat
explicitouter support for virtpatmat synthetic ...
setting the stage for the virtualizing pattern ...
misc fixes while working on virtualizing patter...
infer singleton when asking for it
more flexible inference wrt type skolems
5033: align bound syms when comparing method types
dependent methods types are now always enabled
no need to add an x field to everything
eternalized Paul's findings wrt thisSym
cleaned up addEvidenceParams a bit
More decomposition of Namers.
AbstractPartialFunction.
Overhaul of mixin.
Cycle defense.
Tweaks to Any and AnyRef documentation, courtes...
Documentation to Namers.
Shutdown hook modification.
Overhaul of Namers.
Reverting r25787 (caused test.scaladoc failures...
Cleaning up debug logging.
Do not depend on java.rmi.* when not necessary.
Big improvements to scala.Either.
Addendum to previous patch.
revise and expand root-level Scaladoc
Donated some parens to Any.
Test case closes SI-3898, no review.
Harden the typer against surprise unapply types.
Changed a power mode import.
removed quotes in partest.bat, added svn props
Another swing at r25823.
Better error when abstract methods are missing.
Reverted r25823 as it breaks specialization of ...
Renamed isPureExpr to isExprSafeToInline.
Adjustment to @switch.
Added back reporting of comment tokens from the...
Propagate self-type to specialized subclasses.
Throw different exception.
Added check file for test.
Simple test case for string interpolation.
Presentation compiler: let ShutdownReq propagat...
Batting back a java.rmi.* dependency.
Avoiding String.isEmpty.
String interpolation added as experimental feat...
Moved meta annotations to annotation.meta, plus.
Minor update of the PC's testing framework.
Flipped varargs eta-expansion behavior.
Big improvements to the documentation of collec...
Added ??? and NotImplementedError because this ...
Added parameter keepSrcLoaded to askStructure's...
Fallback on stale type parameters in forInterac...
Add "Google tokens for Scala" for symbolic name...
Closing soundness hole in variance checking.
Imprison the lisp test, no review.
Use normal Global with RangePositions instead o...
Adding debug output to track down override mark...
Consistent hashCode for Symbol.
Massaging type printing and package objects.
Restores XML entity fix.
Add a small "template engine" and separete HTML...
Add some basic tests for Scaladoc.
Missing test closes #4494. no review
Partest now correctly parses -Yrangepos (previo...
Removinf reinstantiated Flags because it's not ...
Repairing bitrot with serialization.
Reinstatiated Flags because its removal caused ...
Selective dealiasing when printing errors.
Shuffling classes around.
Cleanups involving name encoding and decoding.
First untested attempt to create a runtime comp...
Removed redundant test
Elininated previously deprecated package reflec...
Massively simplified caseFieldAccessors.
My suspicion that unsafeTypeParams was "double-...
Reflection classloader hack.
Removed special comments on Martin's request
Following Paul's detective work, fixed Java cla...
A few pending refinements to SyntheticMethods.
Improved an error message.
BigDecimal adjustments.
Hand specialized SettingValue.
Pulling wool over ant's eyes.
More consistent usage of atPhase.
Oops, can't even revert right.
Put back the XXX line in partest.
Adding latest failures to code.scala test.
Added Paul's failing scenario to test file.
More fixes to reflection; cleaned up output.
Removed a log file from the test dir.
Made needsJavaSig method public so that it can ...
Correcting resolution of top-level objects in r...
Added new test file for reification/relfection,...
removed redundant test
more fixes to reflection.
Stripped a bunch of hostile code.
ProductN, and method synthesis toolbox.
More fixes to reflection and code lifting.
Disable currently failing pos/code.scala.
Added test for the completion problem in the pr...
Making toolboxes more useful.
Added missing file.
Getting liftCode to work.
updated man pages, fixed svn props, did some cl...
Cleanup in aisle superaccessors.
Handling Freevars in Importers and discovering ...
Now correctly handles moduleclasses in Importers
Back to square one.
Removed devirtualize.
fixes variance of param in type constructor
more tweaks to symbol importing; not done yet
Corrected resetErrorBits in Trees
More performant encoding of tree errors.
Removed duplicate class.
Started work on compiler toolbox that can compi...
Removed dead package
Added module for importing trees and symbol tab...
fixed svn props and scaladoc tags, did some cle...
Two argument asserts please.
Changes to Liftcode to use new reflection seman...
Rooting out mismatched zips.
Added tool for analyzing forwarder classes.
Deprecation and convention adherence patrol.
fixed svn props, did some cleanup
ListBuffer.size should be O(1).
Constants in io.Codec become Codecs, not charsets.
Scaladoc enhancements to continuations package ...
Small changes to the API documentation of the A...
Improved API documentation for scala.compat.Pla...
Hugely improves the API documentation for JavaT...
Scaladoc now hides members with @bridge annotat...
Improves PagedSeq API documentation.
Adds ability to document root package, as well ...
More work on error trees.
fixed svn props, did some cleanup
Removed leading tabs in build.xml
Get svn revision on Windows
Reworked error trees.
Amend previous commit by suppressing type error...
Better behavior with problematic sources in the...
Added new disabled test for eclipse scala-ide t...
Removed parens from calls to Name#toString.
Create Type hashcodes at construction.
Minor cleanup in Uncurry w/ NullaryMethodTypes.
Removed redundant UnCurry transform (now in Lif...
Reworking TypeMaps to avoid allocations.
updated scaladoc comments, did some cleanup
Refine lub calculation.
Remove assert that fails for IDE. review by Mirco.
Improved getFiles/getDirs in PartestTask; did s...
Partially reverted r25636 change (forget notice...
Removed unused import.
Report erroneous tree instead of Error tree in ...
Method to zip value params and args.
Helping Proxy equal itself.
Improvement of incompatible == warning.
Brought back unrelated type comparison warning.
Added parens to many methods.
added missing getExcludedFiles in <scalac> Ant ...
Allow for the overriding of objects.
Refinement of murmurhash implementation.
Another problem solved for reflexive compiler.
I missed inlining warnings - need to get better...
Some cleanup related to last commit
First refactoring related to Error trees.
Tighten the CPS plugin constraints.
Added footer command line option to ScalaDoc so...
Improves the usability of Scaladoc when images ...
Removed erroneous throw which was stealthily ki...
Intersection types made specializable.
more reflect changes
More refinements to reflection and the reflecti...
Moved test for scala-ide ticket-1000508 under /...
Created test cases for tickets that need to be ...
Offer warning when demonstrably non-side-effect...
Removed the type parameter from sliding, no rev...
Docspree documentation for Stream from Derek Wyatt
Some great AnyVal class hierarchy documentation...
Updated copyright notice in scaladoc. No review.
Made it possible to supply a custom Global to t...
Document the usage and methods of scala.sys.pro...
Small tweak to reflection to make package types...
Better handling of presentation compiler shutdown.
More fixes to reflection and reflective compiler.
Twist to make crashes more robust :-) (by avoid...
removing more debug output from reflection.
Added extraneous test where classes are verifie...
Added copyright notice to all scaladoc pages.
Added package object support to reflection fram...
More changes to get Reflect compiler working.
Gave partial function an empty member.
Another bit of stray debugging output involving...
Replaced various now-unnecessary casts with str...
Removing debug output that slipped into main co...
More fixes/debug code for reflection.
Always include `liftcode` phase in a compiler run.
Some kind of scaladoc quoting fix from the sbt ...
Recent icode checking tests were leaving a bit ...
Made -Xprompt more useful, less crashy and more...
Sorting test output so it passes on java7, no r...
Renamed tests named bugXXX to tXXX, no review.
Class that can be used for memoizing types in r...
reflection refactoring so that we can now have ...
Refactored everything that's clean in nsc.Main ...
Removed and consolidated several redundant test...
Some 11th hour modifications with the dual purp...
Modified scala.reflect package object not to th...
New reification code for symbols and types.
applying patch provided by Topher, fixes #3501.
Created infrastructure for testing icode + sett...
corrected misspelled type params (capitalized n...
Some cleanups in inline exception handlers.
Bug in optimizer eliminated potentially excepti...
Set the partest encoding to UTF-8.
Improved documentation for scala.collection.imm...
Maybe that last commit was closer than I thought.
Reverts previous commit.
Kludge: don't let getClass make it into bytecode.
Improves documentation of scala.Predef.
Replaced Application with App in ScalaDoc.
Shows modifiers before kinds.
Moved files to welcome our ant overlords, no re...
[recommit] Backend optimization: Inline excepti...
Literals now take Any as argument (used to repr...
fixed svn props and presentation check files
New utilitly method to create scope with some e...
Major rewrite of the testing infrastructure for...
Added --presentation flag in the help message
Looks like I broke -nobootcp at some point.
Improved the error message given when a concret...
Removing the code which has been deprecated sin...
A conceivably pretty bad performance bug in bui...
Reverted r25440 (update of forkjoin library) un...
Split up adapt in some smaller methods; added c...
Added debug output to track down Fregor's "fail...
Linked Manifests up with Reflection.
Reverting changes in r25491, it is Java 6 stuff.
Added some missing methods to ListView.
Allow null components in split pane. Closes #3929.
Pulled up the SuperMixin that calls closeOperat...
Added GraphicsConfiguration to window, frame, d...
Applied patch by Gordon Tyler. Closes #4823.
Install mouse moves listeners lazily.
fixed text in error message
Turned up the defense against compiler exceptio...
Expanded the range of a warning, and made suppr...
Reversed the values of "is" and "is not" in rec...
Optimizations for Seq's implementations of sequ...
Moved the classes and objects which are defined...
Hugely improves Regex documentation.
Improves Benchmark documentation.
A big improvement to Ordering documentation.
Adds more documentation to Array.
Adds documentation to the scala.math package ob...
Another "great moments in java5 vs.
Oops, let some local test code slip in, no review.
Don't discard deprecation/unchecked warnings re...
Big cleanups in the tracing utility and its usa...
Removed unused import in collection.immutable.W...
Test update to go with the previous patch.
Looks like there was a little baby in the parse...
Made the thread behavior of the repl a little b...
When I tried to remove the old for comprehensio...
Better error message for case class/object matc...
Avoid some spurious errors after a cyclical ref...
Improved structural type error messages, and ot...
Disallowed implicit modifier on auxiliary const...
Don't want to chase NPEs around for the rest of...
Attacked classpaths to get "." off of it when i...
Some "synthetic" code don't have RangePosition.
Adds support in Scaladoc for @todo tag.
Oops, let unnecessary boxing creep into that la...
Rewrote the case class synthetic equals method ...
Reverting the inline exception handlers while I...
Backend optimization: Inline exception handlers.
Cleanups in synthetic method generation, no rev...
Issue a warning about classes/objects inside pa...
Cleanups in Namers and AddInterfaces emerging f...
Update fork/join framework to JDK release 1.7.0
Added a command line script to ~/tools to count...
Adds version information from @migration and @d...
Finished up some backend cleanups I'd had lying...
Took a different tack on avoiding unnecessarily...
Made error messages like "object List is not a ...
Minor changes to the Scaladoc stylesheets, as s...
Rename a file to celebrate our glorious ant ove...
A couple low impact cleanups/optimizations, no ...
Tired of ugly-printing in the repl, I sort of f...
Sped up traversal over mutable maps by a factor...
Working on jar creation infrastructure.
Some additions to definitions for recognizing m...
LiftCode works again, now integrated with new r...
README updates, no review.
One last build fix for our poor java5 build ser...
Getting LiftCode to work.
- Update Scaladoc for LinkedList and for some o...
Move vector descrition from the obejct to the c...
Moved test out of pending, closes SI-3628, no r...
Following up on things that -Xlint told me, som...
Disabled all the old scala.reflect._ tests whic...
Quieting down mr. lifty, no review.
First steps towards lifting
Discovered through jsuereth's work that a file ...
Added two new compiler options:
Turned off the notFINAL flag which was applied ...
Expression type argument instantiation should n...
New starr based on r25394 to make the starr lib...
Test case for SI-4603, no review.
Remove sigint handler on repl exit as a sanity ...
Closes #4603. Review by extempore.
Scaladoc shouldn't drop type arguments to alias...
Changed forwarders not to generate final method...
Test case closes SI-4172 - I think the output i...
Some tweaks to repl thread creation based on sp...
Debug output to help with signature issues.
A few tests for pending and non-pending, no rev...
"Freed the lisp test." Tweaked partest defaults...
Adding the missing ParMap and GenMap methods.
Discard empty strings in option position, but n...
Add test for SI-4839. No review.
Enable implicit parameters in the presence of v...
Scaladoc should decode symbolic type alias name.
Always escape control characters when printing ...
Updated documentation for testing.Benchmark.
Since trunk seems to be undergoing all kinds of...
Start of an attempt to abstract above some hard...
Reflection refactoring.≈ç
Small fix to mirrors in treatment of primitive ...
Should not set the parameter name's width on CSS.
As per discussion documented in SI-1799, brough...
Adding mirrors top connect reflection to someth...
Fleshed out Scala -> Java mapping; dealing with...
4th round of clean ups (see r25293, r25285, r25...
Fleshed out reflection that now also correctly ...
One more package rename that broke the IDE nigh...
Restored test case for SI-2873 which hubert had...
Sprinkled some quiet dust on the compiler.
Refactored infoTransformer functionality from n...
Modified erasure so we have enough information ...
Small babystep to show Scala -> Java mapping in...
Workaround for scalacheck calling System.exit d...
Brought scalacheck up to date with scalacheck t...
Re-de-case-classed scala.xml.Text as described ...
Removed classes and methods deprecated before 2.8.
Reverting recent type constructor patch until I...
Test case for ticket #4582.
document scala.util.control.Breaks methods
collection docs: fix copy-paste errors in GenTr...
Changes to reflection.
Some post-facto patch cleanups, no review.
Fleshed out scala.math.Ordered documentation.
Basic scaladoc for some scala.math classes.
Basic scaladoc for Vector.
Documentation and examples for Regex.
Added Vector class documentation.
Added documentation for RichInt.
Make IterableLike.toIterator more efficient
A whole bunch of documentation on Trees, arrest...
Beginning to document scala.util.continuations ...
Add documentation to Boolean.
Additional documentation for the Array type, wi...
Some minor scaladoc tweaks and deletion of inco...
scaladoc fixes and improvements
3rd round of clean ups (see r25285, r25292)
2nd round of clean ups (see r25285)
Added the new packages to MANIFEST.MF to enable...
Adding some Sets/Maps to perRunCaches, and elim...
cleanups (scaladoc 2, deprecation warnings, tra...
Get rid of structural type in Iterator.scala
prohibit case-to-case inheritance instead of is...
Don't enter into same line infinite recursion w...
Test case closes #3371, no review.
Test case closes #1432, no review.
Restored partest behavior of keeping output dir...
Bounded wildcard types arising during pattern t...
Catch type projections even when they disguise ...
A response to adriaan's last lub commit of the ...
Suppressed an error in type constructor bounds ...
Making power mode startup a little less glacial...
A bunch of repl stuff.
Seeing about getting trunk building again, no r...
More work done on implementing reflection.
Seeing about getting trunk building again, no r...
Misc smoothing of tree creation, no review.
Implemented workaround for SI-4789, no review.
Minor, mostly agreed upon changes to reflection...
Baby-steps towards getting actual runtime refle...
Making empty streams serializable.
Refactored reflection into reflect.api and refl...
Moved a warning behind -Xlint.
ByteCodecs move to reflect.internal.
fixed svn props and file headers
Made scratchpad use replToString.
Created simple infrastructure for creating muta...
Removed redundant field. No review.
Test case for #4737, no review.
Minor fixes to Scaladoc man page.
Add a test for #4421 and clean up a little.
Adds support for @throws in ScalaDoc.
Changes semantics so that protected access rule...
scratchpad works in interactive REPL; ready to ...
Reverts r18939.
Don't populate 'originalOwner' in presentation ...
corrected typo in scaladoc comment
quick fix to get the build going again on Java 1.5
Towards a scratchpad functionality for the IDE
Discovered another impressive source of unneces...
Hard to explain garbage led me to this innocent...
Looking forward to working positions.
Modified return type inference not to allow T* ...
Logic bug in repl :paste parsing, no review.
evalOnce needs to pack the type before using it...
Test case for #4757, no review.
Existentially quantified symbols, when read by ...
Stable hashCodes for case objects.
Keep BufferedSource from losing buffered data w...
Further refinement of the tiark RefinedType patch.
Restored tiark's RefinedType-exclusion fast pat...
Having established that r25051 is not responsib...
Small change to doCookJavaInfo, to have it run ...
Oh yeah.  Backward compatibility stubs, no review.
Warning! Warning! Yes, that's what's in this co...
overeager optimisation caused timeout in neg/t3...
Use the correct encoding in the browsing loader...
Export correct packages from MANIFEST.MF.
Revert "Check that 'info' is only called on the...
slight improvement to lubList so that the simpl...
Check that 'info' is only called on the present...
Profiler suggested it would be worthwhile to sh...
Continuing to press on RefChecks, discovered wh...
Suppressing a failing assert which isn't accomp...
Don't infer anonymous classes.
Profiling revealed a suspiciously heavy consume...
Avoided a ton of unnecessary garbage by creatin...
Generalizing some TreeGen machinery on an oppor...
Test cases close #2782, #2171, no review.
Cosmetic removal of redundant toList call on it...
Another one I missed which was fixed by r25149.
Defined tpeHK in a manner consistent with tpe s...
Integrating feedback from adriaan, changed anot...
Another one brought to compilation by r25149.
A test case from recently closed #490, no review.
Added sanity check to lub calculation to preven...
getting the revamped getClass to work on Java 5
Overrode contains and apply in mutable.HashMap ...
Notice when erasure is trying to cast something...
Added a -Y option to resolve namespace collisio...
Playing defense against NoSymbol in scaladoc, n...
Noticed while working on getClass that most of the
A line missed from spear thrust, no review.
Thrusting spear into darkened alcove attempting...
New theory: fails running on java 1.5.
Moved test for #4727 to where it was supposed t...
Everything builds for me, but apparently not fo...
A total rewrite of "runtimeClass", discarding t...
Test case closes #4727, no review.
Updated a test with GenSetLike.
Removing the package-private modifiers on Gen*L...
Removed "isInterpreterWrapper" from the conditi...
Relaxes a typer check which fails valid code wi...
Documented what happened with the implementatio...
Routed Stream.+: through cons to avoid some tru...
Added test case.
Putting in a fix for #4713.
Performance-motivated work: going through Speci...
Quoted the windows runner path so "c:\program f...
Removed an unused method.
Deprecated BigInt#~ in favor of unary_~.
Some tests for pending, no review.
Test case closes #4601, no review.
Small changes to docs only. No review.
Reverts r25085 ("Performance tweaks for Abstrac...
Moved a test to pending.
Disabled failing test.
When TypeVars were given higher-order abilities...
Separete index.js to parallelize downloads.
Upgraded jline to use jansi 1.6 in the belief i...
Formatting fixes for scala.collection.JavaConve...
Further ScalaDoc fixes.
The usual unbreaking of broken builds, no review.
Formatting fixes for scala.util.
Formatting fixes for Parsers.
Took a hint from -Xcheckinit to make some patte...
Go back to printing the message that transcript...
Deprecated scala.reflect.generic, except for By...
Suppressing the ability to suppress stack trace...
Speeding up stack trace suppression.
Eliminating accumulated dead ends from the patt...
Triumph over various unsolved mysteries of the ...
Bytecode inspection reveals the pattern matcher...
closes #4692: unification in type constructor i...
got rid of grotesque isCompat closure in exprTy...
A last little IO cleanup, no review.
Update manually created tree which was calling ...
More batched performance improvements for io.{ ...
closes #4547.
Documented what I could figure out about late f...
Performance tweaks for AbstractFile, no review.
Test case for implicits which unwrap typeclasse...
Views using methods implemented in terms of isE...
Marked some more by-name-argument-using methods...
In the interests of unbreaking the ide, changin...
Revert r24960, "Change Types#narrow to create a...
We migrated the Scala wiki from Trac to Conflue...
We rename Trac and start using JIRA as the issu...
The '#' sign may easily to lead to problems, So...
Disabled the addition to isImpossibleSubType wh...
Don't issue unchecked warnings on higher-kinded...
Reverts r25051 due to witnessed movement of sca...
Informs the bootstrap code which preferences ce...
A third round of optimizations from Tiark, no r...
A few additional (but less dramatic) optimizati...
Tiark's main batch of optimizations to implicit...
Making some recent changes less breaky so sbt c...
A test case demonstrating some of the issues wi...
Compilation of spec-List enters an infinite loo...
Tweaks repl tests to enforce -Yrepl-sync and ot...
Reverts r25036, "Altered the positioning of XML...
A somewhat more realistic attempt to fix the bu...
First of what might be several attempts to fix ...
Modified erasure not to generate instance tests...
Lisp test wins again, no review.
Proliferating the number of debugging modes bec...
Realized most of the remaining methods in Optio...
Working on the inliner, discovered that a few k...
Carved out access exception for java protected ...
A few more items so that all may enjoy power mo...
More polishing up repl power mode, no review.
Misc accumulated repl work.
More adjustments to repl parsing to accomodate ...
The eagerly awaited companion commit to r23622,...
A getter with type params is still a getter.
Restored the lisp.scala test.
Cleaning up power mode import issues (and the a...
Working on the finer points of the Total Repl E...
Moved some pure string manipulation functions o...
Created AbstractOrMissingHandler for the repl t...
Adds support for @note in ScalaDoc.
Now :t types declarations as well as expression...
Give some feedback on invalid :type expressions.
Each of the three commits preceding this are to...
Altered the positioning of XML literal trees.
Updated jline build to use xsbt 0.9.9 and rebui...
Yikes, prependToList was violating List immutab...
Overcoming limitations of the repl, multiple-tr...
Repaired regression in Set causing Set ++ to be...
Altered IntSetting help syntax to be more indic...
Rebuilt jline with some navigation improvements...
Finished reverting the misbegotten r23262, no r...
Reverts a change as a tribute to the performanc...
Created named subclasses not nested inside obje...
Regression in Enumeration caused some nullary m...
Making Range creation less slow, no review.
Now that I've convinced myself getOrElseUpdate ...
Commented out a bug workaround which seems to b...
Cleanup in scriptrunner, no review.
Created a PlainDirectory subclass of PlainFile ...
Array[Byte] => Array[Char] => String => Array[C...
Eliminating more calls requiring filesystem acc...
Wow, ZipEntry#getTime is expensive! So that's h...
Uglified an unpickler method based on profiler ...
Moved scala.reflect.Chars to scala.reflect.inte...
Removes SUnit (long deprecated!) from the stand...
Suppress unwanted noise generated by javac when...
Apparent assumption that Literal(0) would be ad...
Specialized keySets for immutable and sorted ma...
slightly better handling of .tar, .tgz, .txz
Small change to keep WinZip happy.
Added a forwarder for object Chars.
Segregate deprecated members into a titled sect...
Error reporting when the generated code size ex...
Eliminated an unnecessary second traversal of j...
Deleting the empty files git is not too cool to...
Yet more work on ZipArchive.
Renamed scala.reflect.common to scala.reflect.i...
And the remainder of the scala.reflect refactor...
Phase and Error handling code, no review.
Flags and Pickler related code, no review.
Switched nsc.util to point to reflect.util, no ...
Settings code into common.settings, no review.
Some largely self-contained utility classes int...
This patch and the several to follow represent ...
Closes 4560. Review by dragos.
Removing two more @bridge methods because they ...
Removed ill-fated bridge method.
After numerous red herrings, I think I find my ...
Temporarily sending lisp.scala to be interprete...
An ill-advised change to an equals method resul...
Confusingly, I am restoring the method "getArch...
Change Types#narrow to create an existential ra...
Some minor cleanups in the inliner, no review.
Removes long-deprecated "for (val x <- ...
Added flatten to Option so Some(Some(x)).flatte...
Reverting the rest of it until I can look with ...
Reverting a little of that last patch, no review.
More optimization.
Fairly ruthlessly optimized ZipArchive.
Regenerated automated tests for inner objects.
Renaming the inner objects test file. no review.
Reverting r24927
Further narrowing down the applicability of Hub...
New test. No review.
Closes #4565.
Closes #4560. Review by dragos.
close #4441. no review
Another round of optimization.
Takes 30+% off the startup time for scala/scala...
Made -Yno-predef work again, also in the repl.
Good, I got the whitespace wrong, trying to emb...
My estimation of what will fix fsc on cygwin/wi...
Made GenTraversableOnce public.
Attempting to make the :javap test pass on wind...
Tightened a condition to avoid a self-referenti...
Finally figured out what was going on with a ce...
Special case Array[Unit] printing in the repl t...
Help :javap find nested repl-defined objects.
Issue some repl imports comma-separated rather ...
Be silent when compiling the repl extraction ob...
Makes BigInt's isValidThing methods make some k...
Changed an identifier to be more to iulian's li...
A better test case for #4537 than the one r2488...
close #4524 and close #4425, review by odersky.
fix #4502 and fix #4430. review by odersky.
[scaladoc] Unify template and package header.
Moved unapplySeq down to SeqFactory.
Closes #4537. No review.
rewrite of nested objects implementation.
Looks like the :type command was a casualty of ...
Figuring it couldn't hurt if more people had a ...
Added a @bridge'd $scope back to scala package ...
Reducing the sbt launcher footprint by eliminat...
Realized how noisy the @deprecated-takes-two-ar...
Since I don't want to commit anything "interest...
Don't issue a deprecation warning if the deprec...
A few minor cleanups involving logging messages...
Completely to my surprise, found that fixing al...
Don't crash the pickler with erroneous types.
After having to update the code for someone els...
Making further unapply regressions less likely,...
removed legacy library code (package scala.mobile)
Issuing warnings with detailed info when we enc...
Second version of trying to avoid the lift cras...
Ignore type errors raised in later phases that ...
Closes #4457. Review by odersky
remove now redundant check (see #4426).
I wrote a warning when nullary methods return U...
Improved the error message for another of the m...
Improvements to the AST browser contributed by ...
Upgraded -d so you can output classes directly ...
Cleaned up some hopelessly atrophied documentat...
Trying out a different strategy for restoring t...
Trying to fix the pattern matcher took me into ...
A little cleanup on a repl command, no review.
More bridges in collections. Review by prokopec.
Some solid progress on the pattern matcher, no ...
Temporarily moving interpreter.scala to pending.
Added a bunch of bridges to make ameliorate bin...
Added warning when someone tries to return a no...
Removed restriction on case classes having only...
Enclosed the out of bounds index with some IOOB...
New starr based on r24814, no review.
Updated a bunch of @deprecated annotations to h...
Refined handling fo @bridge methods.
Working my way through pattern matcher sequence...
Shows migration and it's message.
Reverted a jline commit which had broken histor...
Strip unused pattern variable bindings out befo...
Introduce new request for informing the present...
New starr based on r24804, no review.
Some more tweaks to the bridge scheme.
Added bridge method capability to compiler.
Made FreshRunReq a traceable exception, so that...
There is still all kinds of code in the pattern...
One of the blips in the performance charts seem...
Some tweaks to slice to make it run faster, no ...
[scaladoc] kindFilter should switch show/hide a...
[MSIL] finer-grain debugging (steps one sub-exp...
Shows deprecation message only once.
Makes entire package area clickable in the left...
Removed GenTravOnceLike and TravOnceLike, put t...
[scaladoc] Removed some drop shadows from CSS, ...
[scaladoc] Change URL when navigating Scaladoc,...
[scaladoc] CSS tweaks, changes to display of li...
Further optimizations of implicits.
Trying to get build times down by refining impl...
Revised that last botched commit.  No review.
Added releaseVersion and developmentVersion to ...
Added a script in tools for deploying maven art...
[scaladoc] Strike-through for deprecated symbol...
Couple of fixes to the usecases in docs.
Having been tortured by remorse ever since tiar...
Some mopping up having to do with deprecated ga...
Various addenda to soc's patch: regenerating Pr...
Adds "since" field to @deprecated.
Some patches to jline, and new jar.
Adding some docs refactorings.
Of late the test which fires up the window serv...
This time, fixed #4283. no review.
Closed #4454.
Doing a little polishing on the parallel collec...
Tests which run have to be called "Test".
Revert "Closes #4283.
New starr based on r24749.  No review.
Added test case for #4459.
Further fixes #4405.
Refactoring the collections api to support diff...
Closes #4283. no review.
Warn when the jar file cannot be found when loa...
Test cases for #1071 and #4275 since I don't se...
An alteration to r24740 to fix failing test fil...
An alteration to r24740 to fix failing test fil...
closes #4426.
Closes #4432. review by dragos
Added test to pending.
Closes #4275.
[scaladoc] Closes #4452 again. Review by malayeri.
Made the 'onCompilerThread' flag a field, corre...
Ensured invariant that notPRIVATE can be set on...
Pulled daemonized from the process API based on...
Closes #4402. Review by plocinic.
[scaladoc] Forget to add test case at r24732.
[scaladoc] Closes #4452. Review by malayeri.
[scaladoc] Add missing file. No review.
[scaladoc] Improve visual design and layout of ...
FreshRunReq's are no longer suppressed when thr...
Closes #4390, unfortunately by taking the stric...
Deleted debug output that made it into previous...
Closes #4380. No review.
Closes #4396. No review.
Tighten the visibility of interactive.Global.
Found there was still all kinds of detritus rem...
Improving the repl help infrastructure, and mad...
Changed scala.io.Position into something other ...
More fun with xml and elements not appearing eq...
Made the reading of y/n a little more robust.
Added :imports command, no review.
Factoring the imports related code out of the m...
Closes #4431. Review by extempore.
[scaladoc] Don't generate long comments if they...
[scaladoc] Separate sections for "linear supert...
[MSIL] handling of volatile fields.
Made power mode more configurable.
[scaladoc] Don't generate an attributes block i...
[scaladoc] Make links to classes and traits not...
Added a comment to Dynamic sharing that if you ...
Deleted SourcelessComments.
Clamping down on some more breakage which snuck...
The beautification of repl pasting had the prob...
More refinements to avoid deadlocks systematica...
Update documentation of MutableList.
[scaladoc] Reduce horizontal lines in html outp...
Set "synthetic" flag for methods $asInstanceOf ...
Misc cleanups and crash avoidance, no review.
Some accumulated cleanups around the interprete...
Forgot a import in the last commit. no review.
better handling of on-same-thread calls.
Wrapped exceptions coming from calls to 'ask' i...
make natives test run on win64. no review
Enhancing the repl-testing code by turning it i...
Added a long overdue warning for when people de...
[scaladoc] Updated trait, package, class, and o...
Some localized code cleanup.
[scaladoc] Make object/template name be a link ...
[scaladoc] Change div id's of abstract and conc...
Every tag element (even @define and @usecase) e...
[scaladoc] Minor CSS tweaks. No review.
[scaladoc] Add missing files.
[scaladoc] Add explicit link to show linear sup...
A double completion whammy: crasher for edge co...
On Scaladoc, we should escape meta characters b...
Finding myself wanting a working -Ystop, I did ...
Put "\n" between superclass's comment and subcl...
Since somewhere before 2.8.0 shipped scalac has...
A less ad hoc infrastructure for generating Any...
Working on the documentation of core classes.
A quick fix for the weird string output one get...
Separated abstract and concrete value members i...
Printing refinement types in scaladoc.
recommitted 24578: All compiler control methods...
Added some null checks in swing.
Emptiness check in swing, closes #1578 no review.
One breakage too many, this test is a pest -> d...
Allow the presentation thread to terminate when...
[scaladoc] Don't link to syntetic companion.
Don't create a new thread on each presentation ...
Some minor sensibility improvements to previous...
Making the scaladoc command line help look as p...
Incidental work on scaladoc while trying to fig...
Modified some typer logic to allow annotation a...
[scaladoc] Scaladoc should expand macros recurs...
Warn about unqualified names in scaladoc links ...
Addressing most of the warnings revealed by the...
Issue warning when doccomments have $variables ...
fix get-scala-revision script for the case when...
Wanting to deprecate -make, first I had to writ...
Excluding presentation test from sbaz-packaged ...
include files/specialized/*.txt in the set of f...
A change to a test to defend against output cha...
Transcript pastes now work with leading whitesp...
Disabled all the script tests.
A bunch of scaladoc cleanups.
[scaladoc] Don't create broken link to private ...
[scaladoc] Cleanup code. No review.
[scaladoc] Add a test of colon and parentheses ...
And so my attempt to have a performance test dr...
Polishing the programmatic interface to the rep...
Made ScalaRunTime.stringOf more general by sepa...
Eliminated option -Xwarninit, which is warning ...
Removed some bitrotted ant directives which wer...
Looks like another java5/java6 difference gets ...
Expanding the test which tries to use the colle...
Added some implicitNotFound annotations to comm...
[scaladoc] Remove whitespace around colon and p...
Don't analyse symbols with error types.
msil.jar updated with changeset 24614
(1) The msil library can now parse modreq and m...
Learned an interesting lesson about having an i...
A paltry 570 cases failing in -Xcheckinit due t...
Trying to get fsc doing the right thing with re...
Made :javap less crashy on windows, no review.
needed when compiling the (jdk2ivkm'd) Scala li...
Revert "All compiler control methods now do som...
Introducing xz compression in nightly builds.
Suppressed unnecessary checkcasts on Throwables...
Cleaning up util.Tracer and its usage in Erasure.
Some accumulated work and polish on classpath a...
Added some explanatory output when jline reader...
[scaladoc] Cleanup tests. No review.
[scaladoc] Closes #4371. Review by pedrofurla.
[scaladoc] Add a test for #4180. No review.
[scaladoc] Stop wiki syntax parsing inside HTML.
Figured out why -Ydebug has been such a deathtr...
Set the original tree for TypeTree in self-type...
I guess windows can show a < 500x difference an...
for Scala.NET bootstrapping.
All compiler control methods now do something s...
[scaladoc] Changes to template.css based on sug...
Added synchronous version of askStructure, need...
Moved Dynamic support to -Xexperimental.
Three things to make Eclipse more robust agains...
Added a temporary fix for #4351, but disabled i...
Added implicit TaskRunner parameters to scala.c...
Deprecated unused members in scala.concurrent.
Moved failing tests to pending after having dia...
Changed App-using tests to use main() to see if...
Discovered Range.foreach inlining was broken du...
Looks like I accidentally committed a test log,...
Restoring my higher-kinded-Array signature chec...
Spiced up the signature test infrastructure a b...
Moving signature tests to pending, because they...
Simple test case to see whether Java understand...
Squashing the signature  bugs.
sn.OClone caused checkinit failure when assigne...
My early attempts to implement non-integral ran...
Better signature avoidance. Review by extempore.
Adding some tests for #3651.
Implementing foreach to work in parallel in Par...
Adding the `seq` method to all collections.
Added test that signatures conform to their era...
Added headers with copyright messages.
closes #4345.
closes #4205: quick&dirty fix to force loading ...
[scaladoc] Closes #4366. Review by pedrofurla.
Not yet learned my lesson about partest and emp...
Oh the irony, disabling the failing test made t...
We need a successful build, not sure why this h...
[I'm laptop only so there's some chance this wi...
removed gpl
license files.
license files
One hundred! One hundred times slower on window...
[scaladoc] Add a test for #4306.
Closes #4202 again, closes #4363.
[scaladoc] Add a test for #4361.
[scaladoc] Add HtmlFactoryTest and reorganize d...
The last checkin caused a test to time-out, but...
for .NET bootstrapping (more coming).
minor fix for -Xmax-classfile-name. no review
Commented #3928 patch.
Restored erasure warning for isInstanceOf tests.
Oh yeah, now I remember why I started with leng...
I'm going to assume the patch I dropped off fiv...
Prevent a divergent implicit from terminating i...
Removed long deprecated and obscure CloneableCo...
Added a :type command to the repl, no review.
Some boundary conditions in range.
A couple more minor tweaks to power mode, and m...
[scaladoc] Closes #4357. Review by dubochet.
[scaladoc] Closes #4361.
rytz's patch for making our crazy long names a ...
Little tweak for failing test, no review.
A minor overhaul of power mode.
Removing toPar* methods, since we've agreed the...
Improved the error message when one gives inval...
Accumulated work on fsc.
minor changes
Reworked windows batch files; should fix #2671.
close #4041. review by extempore
Disabled test not actually doing anything anywa...
Reenabled the commented out bits of the test fo...
Always forget that checking system properties c...
bumping up the version number in trunk.
Rebuilt jline for java 1.5.  No review.
[scaladoc] Closes #4306. Review by extempore.
Removed uniqueness annotations. Review by rytz.
Undoing some much too hacky code to implement a...
Deprecation patrol.
Leveraged having a place to put some useful imp...
Brought all the collections pure interfaces up ...
Closes #3838. Review by prokopec.
improved documentation for annotations in scala...
Slight tweak to case class deprecation message,...
Deprecated scala.dbc.
Addresses the issues swirling around Double.Eps...
Various chronic annoyances with the repl addres...
Closes #4163. no review
Applied second patch by asloane.
new test.
Removing everything in trait Dynamic.
Closes #4300. No review.
Changed Super to fix #4300
Raised the threshold for the test looking at vi...
A small addition to the library to address some...
Added a callback to Global.Run for fine-grain p...
A patch for views.  Most relevant change:
Added askStructure method.
Added assert that deferring cases of askLoadedT...
Removed the `par` method from numeric ranges.
Adding special take and drop for numeric ranges...
Avoids continuous background compiler running
closes #3446 and improves parsing speed by enco...
One last build break and unbreak so I can be fo...
Cleaned up PC logix dealing with waiting respon...
Moved SeqDerived into an Ordering.Implicits obj...
Reverted r24388.
Added StringLike to the list of things the repl...
Added documentation in annotation.unique packag...
An overhaul of slice and related implementation...
Closes #2239.
One more attempt at fixing the windows build.
Closes #4314
Added few lines of clarification in the docs of...
Modify BufferedSource to use a BufferedLineIter...
Rename io.Code.toUTF8 and io.Code.fromUTF8 so t...
Made the .opts file in presentation compiler te...
Better workflow + debug logs in presentation co...
Clarify documentation of Position.includes, clo...
More signature fixes and tests and generally be...
Raised the scariness of the case class deprecat...
More signature work arising from actually looki...
Closes #3987. Review by extempore.
One more log in presentation compiler
And extempore's original plan carries the day: ...
Another corner involving generic signatures and...
Re-enabling the disabled signature test along w...
Some naming clarifications and a test rewrite.
Specialized ArraySeq.  Closes #2996, no review.
Upgraded to latest maven-ant-tasks jar
Clarified behavior of Map.withDefault
Insert missing braces. No review.
Changed class name from `Main` to `Test` in a f...
Renamed some methods in icode exception handler...
Note to self: travel with laptop and server.
Reverting some recent signature code and tempor...
Test case closes #1364, no review.
A swing at fixing the remaining test without ta...
Some test massage which goes with the last commit.
Seem to have made a breakthrough with signature...
Added an innocuous java BigDecimal -> scala Big...
Made Stream.collect collect instead of filter.
Added cycle detection to getParts.
Another lap around the track with generic signa...
More debug output for -Ylog-classpath
Long overdue rehaul of presentation compiler te...
Break 9 tests, fix 9 tests, realize you broke t...
Test case closes #3613, no review.
Attempting to fix half my recently imposed brea...
Altered a check for impl classes to look at the...
A fix for ListBuffer's iterator not to blow up ...
Made mkString work correctly on views.
make classpath access lazy. no review
lazy val calls shouldn't be included in pure ex...
Reversion of r24319 for causing #4291.
[scaladoc] Comments for lazy vals are printed i...
[scaladoc] No companion linking is attempted fr...
[scaladoc] Specializes upper and lower bounds o...
[scaladoc] The "inherited" filter work correctl...
[scaladoc] Unsightly hack in Scaladoc to close ...
[scaladoc] Changed TreeFactory so that it doesn...
Partial revert of r24325; tryToSetFromPropertyV...
[scaladoc] Fully commented the Scaladoc model.
Added daemonized() method to ProcessBuilder so ...
Removed an invalid files.
exclude sourcepath from classpath.
Closes #4202 and removes empty TreeHashMap (sup...
Changes to startup.
changed test output and comment, because mixed ...
Renamed Application to App.
Attempt to fix #4214 by avoiding signature gene...
new test for Application behavior.
Moved delayedInit Application to App; reinstant...
Closes #4146.
More work on symbol trackers.
Making parsing more interruptible + better timi...
Moved unlift to the Function companion object, ...
Observed that some historical issues with packa...
Cleaned up some horribly rotted xml doc comments.
Hid repl value rebinding behind power mode.
Based on the frequency with which I hear questi...
Test case closes #3137, no review.
Rediscovering that transpose sometimes throws a...
Test case closes #3861, no review.
Test case closes #2070. No review.
[scaladoc] Closes #3681. Review by dubochet.
Added a missing test case for the previous commit.
Made the unification algorithm for specializati...
Revert "Added missing string prefixes for names...
Applying davetron5000's actors docs patches.
Applying Davetron's enum doc cleanup patch.
Another fix for a broken test case involving ne...
Another docs patch submitted by Davetron, this ...
Applying davetron5000's Console docs patch.
Added missing string prefixes for names of map ...
Refixing SyncVars, fixes #4094.
A fix for #4243.
solved hyperlinking problems caused by making p...
Test case closes #4173.  No review.
Added new setting -Ygen-javap, which takes a di...
Removed generation of no-op checkcasts for Object.
Closes #3140, #4245. no review
corrections after recent comment to not parse o...
More tweaks to rawToExistential to avoid pile-u...
made parsing lazy to decrease blocking times of...
I chased a lot of ghosts before finding the rea...
This addresses a few long standing irritations ...
Created invisible setting to expose empty packa...
In support of project "A Better IDE...
Made cooking dependent on a flag rather than a ...
After seeing the 481 line diff I had to apply t...
One bug fixed.
Adding an implicit builder factory to wrapped  ...
Made a lot of operations in interactive.Global ...
Correct doc comment.
Reverting failed attempt to add more debugging ...
Changed get for a with-default map.
Removed unspecced condition for delayedInit.
Updated docs. No review.
Filter completion proposals so that SDT need no...
Partial revert of last commit.
cleanup.no review
A missing test.
Applied a few more fixes for specialization and...
Some fixes in specialization.
Test case uncommented.
Added a test case for anyref specialization.
Changed AnyCompanion to SpecializableCompanion.
Changed the dummy specialization parameter Ref ...
Added normalization to specialization.
Got anyref specialized member selection to work.
Further specialization work.
Specialization work in progress.
Improved an error message involving overload+de...
Added a system property which disables stack tr...
Some cleanup from investigating #4041, with a c...
[scaladoc] Don't hide AnyRef's methods on the A...
[scaladoc] Simplify selectors. No review.
Added compiler crash recovery to the repl.
vector concat stubs
Closes #4215. review by odersky
Closes #3986 plus some cleanup. no review
Made after-type-delay configurable in Eclipse.
New option: Ypresentation-delay, to wait with t...
Working on fsc.
redesigned error message handling for presentat...
[scaladoc] Tweaks to CSS for comments. No review.
Added missing file to last commit.
Towards better error handling in the IDE.
Guess I can't have a javap test with no javap.
Added all the javap command line options to :ja...
The comment for isCoDefinedWith has long said
A bit more work on the symbol trackers.
Added new option -Yshow-syms.
[scaladoc] "Hide All" should be hide inherited ...
Re-enabled test spec-traits (removed the swing ...
[scaladoc] More faster index filtering.
[scaladoc] More fixes for broken build. No review.
[scaladoc] Likely fix for broken build.
[scaladoc] Scaladoc no longer crashes upon real...
Added logging for compileLate, trying to figure...
Added assertion to better diagnose build failures.
[scaladoc] Strings looking like documentation a...
Presentation compiler yields now to be nicer to...
[scaladoc] Extends CSS of standard HTML generat...
[scaladoc] Scaladoc recognises HTML entities in...
[scaladoc] Tweaks to `Generator` data structure...
After discovering #3376 was fixed I gave in and...
Don't have time to fix the sbt build and can't ...
Ignore anonymous and synthetic classes when ass...
My repl history hasn't been working right for a...
Faster interrupts in IDE when parsing.
A couple long-threatened repl features.
Added an assertion to diagnose a build problem ...
invokeDynamic -> applyDynamic
Switched back to StoreReporter for presentation...
Enclosing method attributes.
changed buildStructure to askEnteredTyped
2nd attempt to survive divergent implicits in t...
Updated completion tests, still waiting for a d...
What's in a name? 2 redundant fields, it seems.
Added javap to the repl.
Recent changes shattered :power mode functional...
Remove the currentRun after a build, inside the...
Cleared 'createdSyntheticMethod' on resetTyper ...
Minor fix for Choice setting plus added some de...
Reverted divergent implicits change which cause...
Reverts r24155, which light testing says is the...
Eliminating duplication and trying to outrun ob...
I keep seeing huge simplifications available in...
I found more situations where primitive types w...
Avoids divergent implicit crash in typecompleti...
Part2 of fix askStructure hangs commit.
More work on the repl.
Undid some damage I did recently to tab-complet...
Closes #4204, an issue with fsc.
More demonolithizing of the repl.
Added a :keybindings command to the repl which ...
Cut off the hunt for completions once something...
Making the interpreter more functional.
Boy, I try not to let any String.isEmpty get by...
A :phase command for :power mode.
Bringing lots more encapsulation to the repl.
There is a lot of housecleaning to be done.
Eliminated askLastTypeTree.
made askTypeAt work on non-loaded sources.
Various improvements to completion.
More repl housecleaning.
A raw tree was making its way into an error mes...
Forgot to commit the updated tests in my previo...
Made the presentation compiler reporter in inte...
A bunch of work on the sbt build.  No review.
Changing some code to not use collect on top of...
Primarily a cleanup of the organization of keyw...
Securing some of the blessings of whitespace fo...
trying to fix CyclicReference errors for type c...
Re-enabled one presentation compiler test.
Re-enabled another position check in FindTrees.
More cleaning up long neglected regions.
Some overdue organization and cleanups in the r...
Another naked assert is brought up on obscenity...
A few minor hashcode tidbits I had stored away ...
Some minor cleanups in anyval source generation.
Since we generate no invalid generic signatures...
In a code review performance for the ages, I fo...
Made askParse survive syntax errors.
Opening packages when browsing gets rid of spur...
workaround for see #3936, allows building every...
update intellij files, no review
rename .classpath to classpath.SAMPLE and inclu...
minor cleanup for hash consing of types. no review
removed a activeLocks tracking in Symbols, sinc...
Imporved interrupt handling, which should avoid...
Added an askParse method
brought scalap up to date with minimal patch.
Disabled presentation compiler tests.
One last attempt at getting the presentation co...
Another thing we are all a bit too used to is h...
closes #3619, #4141.
    closes #4137.
closes #2741, #4079: pickling now ensures that ...
closes #3977.
Hey neat, the -Xcheckinit bot found a bug.
partest --grep has never worked quite right (at...
SyncVar should not swallow interrupts and shoul...
A new murmur3 hashcode implementation contribut...
Skip getClass (signature changes between JDK 1....
Added methods askStructure and askLoadedTyped, ...
Stripped one more embarrasing absolute path fro...
Increased the timeout for presentation compiler...
Added presentation compiler tests.
Updated project files.
Better behavior on completions.
Responds no longer re-throw exceptions.
made DivergentImplicit a def so we see what goe...
Added log message to tell what version of the p...
The AnyVal types become source files instead of...
Tackled source generation from a new angle rath...
Using decoded names in invokeDynamic.
hardeing of the presentation compiler.
Taking a ride from 106 invalid generic signatur...
Disabled failing test, no review.
Incorporated feedback on a couple recent commits.
Modified scala build to push jline artifact to ...
Updated to new jline sources with it moved into...
[scaladoc] First attempt at modularisation of S...
getLinkPos now removes the unit it loaded.
Trying to fix problem in getLinkPos.
Better replays.
The empty string commit made me hungry to actua...
Deleted the former Process code in the compiler.
A little debugging infrastructure for sys.process.
Minor collections cleanups, no review.
Defer a check from the typer to refcheck so the...
Integrated contributed non-recursive implementa...
Made the empty string print as "" in the repl i...
The repl becomes more intense about making sure...
Made partest update a checkfile even if it does...
Look even harder for attempts to sneak "this" i...
Duplication elimination, no review.
Added askLinkPos command for hyperlinking.
Made ().## and null.## not crash anymore.
Updated copyright notices to 2011
introduce NullaryMethodType to disambiguate Pol...
Updated check file for namesdefault test.
More on partest.
Removed the probe for integers in spec-matrix.
Simplifying some partest internal structure.
Moved and removed a bunch of tests from pending.
There was a bunch of work adriaan and I did whi...
Made recent string optimization jvm-only.
One element of the partest situation: Reporting...
What is, I think, the only possible solution to...
Added a terminal type for echo reenable based o...
Who knew system was such a popular sentence end...
A few bits of java code which use "" + x and ca...
Reverted to curried invokeDynamic to fix a prob...
Completion related fix and cleanup.
Cleaned up Dynamic.
Allow box(unbox) elimination for the Null type,...
Updated project files to the new Scala nature I...
second version of close #3649. no review
test case close #3649. no review
Removing code which I believe to be some debugg...
fixed typo. no review
Disabled failing specialization test.
Added jdk1.5 version of the instrumented librar...
Added specialized test to ant build, and ported...
Adapted specialization tests to track number of...
Added 'specialized' tests.
Dynamic type added. Array creation optimized.
Added doc comment
Rollback changes to canRedefine.
Do not redefine the symbol in a class file to p...
This outlaws explicit isInstanceOf tests on val...
Optimization to string concatenation.
There were some shenanigans in normalize trying...
Validate positions only in debug mode. No review
Optimization for Manifest.equals.
Disabled browsing in the empty package, hopeful...
Deleted duplicate test which must have been a r...
Purely detabification of the process code.
Some modifications to @elidable: for reasons lo...
Disabled the process test.  No review.
Some fixes for partest issues.
More fiddling with the process code.
Imported sbt.Process into trunk, in the guise o...
In r22807 an optimization was added to remove B...
Make scala.collection.immutable.Set1, .Set2, Se...
Allow reload to be issued inside ask non-interr...
Modify scala.Array to extend java.io.Serializable.
Pulled some bit level operations into their own...
A test case for recently fixed #4114.  Plus!
Test case closes #2873, no review.
Made <:< and =:= serializable.
Renamed a file (I thought I already renamed thi...
Moved the presentation compiler thread in its o...
Second try for "Changing the intersectionWitnes...
Made presentation type checker idempotent and r...
Added test file.
Re-disabled constant folding for interactive co...
Changing the intersectionWitness map to use wea...
Added comments for #4008.
Enabled parallel group by.
Unfinalized a couple unnecessarily final methods.
Couldn't stop working on tailcalls.
A pretty severe bug in the recognition of tail ...
Oops, the implicit not found message was wrong:
Refactored browsing loaders so that they can be...
Implemented toplevel browsing in IDE, so that s...
Closes #4114. No review.
Closes #3984 by the most arduous and indirect r...
Brought back and deprecated onlyPresentation to...
Warded off an NPE (which only arose on erroneou...
The ensuring methods should be by-name on the m...
Reverting fix for #4047 until I figure out why ...
Untangling parsers from compilation units so th...
Applying some short-term balm to scaladoc since...
Override checks and self-types still needed som...
Great moments in code reuse:
Made NamesDefault more robust to support idempo...
Added test for #4072. no review
Deprecate Cell.
Closes #4047. Review by odersky
Closes #4072.
re-added @SerialVersionUID(0) to anonymous func...
moved debug println under if(settings.debug.val...
Missing file from last commit.
Documented Picklers.
Test case change.
Implemented a (slower) workaround for parallel ...
Changed foreach to pforeach.
Apparently my flailing attempts to make things ...
The shutdown hook installed by jline has made l...
One reversal wrt Pauls TypeRef -> typeRef changes.
Replay now enabled for presentation compiler.
I took the following comments at their word:
Renamed the files whose names have fallen out o...
Avoids the creation of an amazing 106,700,793 e...
De-finalized equals/hashCode on Trees so people...
closes #4044.
Eliminated 16 avoidable closure objects in Stream.
Disentangled scaladoc and the presentation comp...
Towards a replay framework for the presentation...
Closes #3869. no review.
One more try with the lazy clearing.
Closes #3687, #3719, #3950, #3616.
Protected protected constructors.
Added some more debugging tools for printing ty...
Some profiler changes.
Modified generic companion apply to call empty ...
Misc icode cleanup.  No review.
Temp rollback.
Some minor Tree optimizations.  No review.
There was a massive 30+ line cut and paste betw...
Working my way through popular methods with a m...
Since r22374 isCompatible and isCompatibleArg h...
Clear caseClassOfModuleClass lazily, otherwise ...
Misc uninteresting tidbits to take some weight ...
Removed the Name => TypeName implicit conversion.
Knocking a few instructions off isSubType2, and...
More comprehensive escaping for compiler String...
Generalized a pile of duplicated type caching c...
A very conservative extraction of some of the F...
Some performance tweaks to ResizableArray.
Add option -toolcp to our runner script.
Changed the cache in the jvm backend to use a W...
Remove symbols from the cache once they have be...
Project files
Off by one error in nextPrintableChar.
Modified the self-type protected accessor test ...
Even after the mostly blissful marriage of Trav...
Investigating what can be done about our 2000 o...
There's still some temporary scaffolding proppi...
disabled test cf-attributes.scala
Poking around at and hardening anything which m...
fixed issue with EnclosingMethod attribute.
fixed (and extended) bytecode reader
Removed Proxy from parents of WrappedString.
Thinking I have to dial down a timeout.
Tired of paying the DEVIRTUALIZE compilation pr...
More jline work from huynhjl.
It's all partest freeze debugging.  No review.
Mr.
Some accumulated cleanup done while profiling a...
After profiling revealed 100Ks of unnecessary s...
Added withFilter to the list of monadic method ...
The partest hangs are back in force.
Some additions to SignalManager to make it easy...
Plugging some leakiness I found in the pattern ...
A pretty severe cleanup of typeRef.
I cannot be beaten by mysterious side effecting.
Looks like there is some side effecting I can't...
A couple caches knock a full 20% off the time s...
Recognize calls to scala varargs methods where ...
Reinstantiated the "integrateNew" functionality...
This fixes a regression incurred in r23565 whic...
The undoLog is being cleared before a typer run...
More elimination of avoidable calls to List#len...
Disabled forkjoin on ibm1.6.
Disabled a test.
Added settings for presentation compiler debugg...
Bencharking a larger program with parallel coll...
Finer conversions for immutable parallel collec...
A minor update in a benchmark.
I really don't know the proper way to fix it in...
Quik fixes for - double definitions, - tree not...
An Ordering for Seq and all of its descendents.
This commit is about not calling .length or .si...
presentation compiler cleanup & rewrite
I'm wandering around trunk looking for slowness.
Explaining something for the (largeish N)th tim...
Optimization based on profiler data.
One more insomniac try: the fix for -explaintyp...
Reverting the previous patch for output change ...
The fix for -explaintypes having gone off the d...
More fixes to avoid the dreaded "NoSymbol does ...
Added some infrastructure for tracking and disp...
Application now uses delayedInit.
Added tests for #4091.
Temporary fix for #4092. No review
Remove duplicate test (t3774 is the same)
Attempt to fix NoSymbol does not have owner pro...
Discovered bug in mapConserve introduced in r23...
do not add entry in InnerClass attribute if out...
Added more logging to the presentation compiler.
Removed the 'codeGenerator' field, which was a ...
Make the ownPhaseCache field a weak reference.
Added advanceGeneration for memory profiling, a...
Added secret option to sbt build which makes it...
Stops barking up the wrong tree with -Ywarn-dea...
Modified TreeMap to return a fresh empty node u...
More repl hardening against its fickle master, ...
Enabled delayedInit. Review by extempore.
Preparing to enable delayedInit with new starr.
Closes #4024. No review.
An alteration in jline had hosed the ability to...
Make the java iterator wrapper linear time.
More repl hardening, and a new jline jar which ...
Hardening the repl against my own lack of ept.
Told the boy trying to plug the dike holes that...
New jline: BSD licensed, based on [ https://git...
That cunning underscore tricked me into quoting...
A little more finnesse needed with backquoting.
Finally figured out what needed to happen for
Eliminating all possible warnings from trunk.
Turned an assert/compiler crash into an error m...
When was the last time -Xcheckinit was run? It ...
Eliminated the 10 unchecked warnings emanating ...
I found myself unable to make the necessary par...
closes #4064.
Minor changes.
Made parallel collections serializable.
Array combiners implementation changed from arr...
minor code updates (detach plugin)
again: relax access boundry check for overridin...
I learned from #4067 that we don't have any kin...
An unfortunate missing character in r22946 turn...
The lords of attrition informed me that "isType...
Test case closes #3642, no review.
Made it possible to give :cp an argument with s...
Extricated Addable and AddingBuilder from the f...
Reverts previous commit: needs a new starr..
follow up on fix #3946.
Added uniqueness annotations. Review by rytz.
Parse the contents of the package right away in...
Making some unpickler logic more straightforward.
Looks like I'd gotten a little quote-happy there.
Oops, lost some java options for a moment there.
Tackling long standing issues with startup.
Hardened sigint handler against ctrl-C in the f...
Tired of trying to debug things like classpaths...
Don't transform patterns during superaccessors:...
The ability to interrupt repl execution without...
Moved ClassfileAnnotation/StaticAnnotation/Anno...
Burned by a last minute text change.
Cleaned up and brought up to date the help text...
Mopping up after the deprecation of exit and er...
Remedied a return type oops in the system package.
Introducing scala.system, the product of a whir...
A foot in the door with Parsers/JavaParsers and...
Some refactoring of genjvm trying to separate o...
Segregated all the android related code in a ne...
A selection of collections additions from the l...
Starting the mopping up now that names have som...
close #4036, fix #2489.
close #3951. review by dubochet.
close #3946.
Added test for #4052
Revert one-liner. No review.
Recovered ++: from the dustbin and dropped it o...
Some html stripping in explicitouter because I ...
Eliminated SYNTHETICMETH flag.
Parameterizes TraversableFactory.range so it ca...
immutable.Map keySet returns immutable.Set.
Overrides immutable.{ Map, Set, Seq } to return...
Generalizes catch blocks to include any Partial...
Added missing file for delayed init
Restore id adapt for phases after refChecked (a...
It's a big one!
added -jar option to scala interpreter
minor update (detach examples)
In r23627 Lukas fixed specialization bug that s...
fixed typo
Reverted delayed init because of two failing tests
delayed init now supported
Some cruft which finally got on my nerves enoug...
A patch authored by martin to fix one of the bi...
More fiddling with checkSensible.
Bug in ListMap.  Closes #4046, no review.
Disabled test after failing to read linux's mind.
Taking retronym's advice on increasing Universa...
Some collections overrides for more efficient t...
Attempt to fix failing test.  No review.
Parser relaxation so that one can name the type...
Found several minor thigns wrong with checkSens...
Deprecated the @serializable annotation, introd...
It looks like the fix for #2318 was causing pro...
The initial implementation of TraversableOnce c...
Fleshed out Equiv[T] so that it can be used in ...
"I invite everyone to change this rule, and obs...
Adding some more unwrapping to unwrap.  No review.
Did some more polishing on the infamous partial...
Moved sigint handler to InterpreterLoop and mad...
Test case closes #3106, no review.
Fleshed out the mock code a little further so i...
Some hardening of the repl's internals extracte...
Followed up on the claim that wrapArray can be ...
Some cleanups in the *Runners and a few compile...
Refactored parallel collections for pluggable t...
Temporarily disabled varargs annotation on cons...
Today's Bourne Shell Ultimatum.  No review.
The usual flailing associated with changing a s...
Moved the painful-in-ant git/svn revision getti...
Some work on error messages, somewhat based on ...
Seeing if I can unbreak things without actually...
Making the installation of the repl sigint hand...
A new totally safe signal manager, along with a...
A manifest init order issue motivates some shuf...
Disabled possibly failing test.
Changes to the vector class that will be needed...
You shall not pass the testing stage when abort...
Adapt nested objects properly.
I keep forgeting which phase the browser is cur...
Further work on #3621.
A test for collection conversions.
In the absence of known reasons why some except...
Added toParIterable, toParSeq, toParSet and toP...
Temporarily reverted sun.misc.* using code unti...
Further fixes some issues for #3621.
Changing EnclosingMethod generation not to drop...
Applied patch from davetron5000, improving docu...
Quickfix for #3993 before a real fix is done.
Added Presentation compiler stress tester.
Some cleanup (mainly in Typers).
Make interrupts non-interruptible, otherwise th...
Added some docs.
A little IDE hardening
Removed inline annotation on a private stream m...
Applying patch by Daniel Sobral for #3796.
Better integration for mutable list and queue.
Rewording for #3958, and a few doc changes.
removed duplicated error message for bad compil...
Improvements forMSIL:
Some refinement of the error messages when the ...
Another fix for #3989, regarding the `-` which ...
Closes #3958. No review.
Added another fix for #3970.
updates Scala examples, added detach plugin
Two annoying REPL things made less annoying:
Some profiling infrastructure.
Correct wrong comment. No review.
Added and corrected existing comments.
Switched from ignoring nonexistent directory to...
ant, build.xml and classpath issues.
Cosmetic changes to previous fix for #3918.
Clear the undoLog for types in resetTyper.
Changed javasigs test to use new javaccmd syste...
partest sets javaccmd system property when runn...
Revert unused code.
adapt not to confuse types and stable terms.
Cleaned up some hangover from equality struggle...
Moved failing test to pending until I figure ou...
Made the additions to Predef described in #3762.
Use partest's java and javac command in the jav...
Another exciting development in the world of -Y...
Generate EnclosingMethod classfile attributes.
A revival of r21442, which I had reverted based...
Half of an implementation of sealedness for jav...
A slight performance improvement for parallel s...
Solved a performance problem in parallel hash t...
A test case having some issues.  No review.
Some more work on options related to showing co...
Some minor fixes found by findbugs.  No review.
Unsuppressed generic signatures for members wit...
Introduces "Origins" for all your superhero bac...
Benchmarking parallel sets.
Added a benchmark for mutable hash sets.
To fix the failing nightly.
protected[this] members should be accessible to...
Closes #3980. Review by dragos.
While investigating the cause of #3984, discove...
Iteration bug in TrieIterator.
Restored the stack traces I'd accidentally smot...
Deprecation patrol.
This is work on -Ycheck:icode.
Modified the lub calculation in TypeKinds to av...
A bit of -Xshow-class / -Xshow-object which did...
Proper fix for adaptToNewRun for toplevel class...
Disabled a test failing on server.
A test output changed. No review.
Added size maps to flat hash tables.
Pruned away structural invocations throughout t...
An overhaul of Global.
[scaladoc] Annotations are modeled and printed.
Temporarily Undo
Sync toplevels after namer but before typecheck...
Need to rebind toplevel symbols to handle delet...
Some more special cases for stringOf as we cont...
Presentation compiler: not adapting to the new ...
Check for npe in the last commit
Some further changes related to r23434.
Determined that half a dozen ways of checking f...
Some minor patmat/symbols cleanups, some of whi...
The probable cause of the failing build.
One more mr.
Closes #3973. Review by extempore.
One of those annoying patches for which I apolo...
Make compile runner thread volatile + remove a ...
Enable test directories for 'run'.
Added separate bitmaps for private and transien...
Don't crash the compiler for the 'companions in...
Closes #3932, #1537. Review by extempore
Closes #3927. No review
Closes #3816. Review by moors.
some cleanup. no review
Closes #2792. no review
Created @strictfp annotation in scala.annotation.
Don't call exit from MainGenericRunner in a way...
Don't truncate stack traces in the repl.
Don't let stringOf lose elements to print by ha...
Sprinkling in some names to avoid reflective ca...
Achieved similar simplicity gains in NumericRan...
Removed a disappointly small amount of code ass...
Eliminated duplication among the Rich* wrappers...
Relaxed non-sensible warning for comparisons wh...
Took a step back and massively simplified Range.
Removed race from test for #3356. No review
Made an @inline marked method final because oth...
Ported --update-check from partest-alternative ...
Widened the pattern type in the pattern matcher...
partest: fixed property handling of --debug.
presentation compiler hardenings.
Some deletions in global based on adriaan's goo...
Correctly find completion proposals for ImportT...
Remote test help improved.
Performance bug  in hash table splitter fixed, ...
Added hash table benchmarks.
Two hashcode-related failing tests fixed.
Debugging parallel hash tables.
Changed improvement hash function to murmur hash.
Some serious bugfixes in parallel hash tables.
Mostly refactored existing test functionality f...
Modified remote test.
Modified remote test.
Some cleanups and long-dead code abatement in t...
Some issues with Tuple2/3.
A double goodness whammy involving type inferen...
[scaladoc] Even faster JavaScript index filteri...
Some uninteresting code related to error messag...
Test for long fixed bug.  Closes #2119, no review.
The treecheckers revealed that auxiliary constr...
Closes #3010. Review by prokopec.
close #3954, no review
Closes #3920. Review by prokopec.
Case accessors are always public else the patte...
Another attempt to fix a bug which has plagued ...
Added test for #3312 which it looks like was fi...
A modifier's work is never done.
The tree checkers revealed that Volatile*Refs w...
Now short-circuits reload work items that are s...
Two comments where presentation compiler sanity...
removed warnings in test files
A couple minor cleanups in Global.  No review.
oh well.. so let's remove that test. no review.
splitting up scopes test into two parts.
new starr to fix sbt build.
Some serious hash tries bugs fixed.
Added back a previously publicly available method.
Improved the remotetest script.
Some exception handling fixes in parallel colle...
Further work on parallel mutable hash maps.
As hash codes change, so do the tests - output ...
Work in progress. No review.
Changed hash code strategy in hash table - now ...
Added stubs to parallel hash map. No review
Refactoring certain tasks to accept empty split...
Closes #3059, #3895 (the only difference betwee...
Closes #3670, #3877.
Closes #2910.
msil doesn't run flatten, so it is possible to ...
As pointed out to me by plocinic, the pattern m...
A modified approach to map withDefault[Value].
For all those using .git who like their build a...
Reverts r23251 because it hangs on windows.
Closes #3934 by fixing a typo (missing + in str...
VirtualFile.{equals/hashCode} should be based o...
adding gitignore sample files.
Closes #3871.
Reverted previous commit as I think it is wedgi...
Made some changes to fjbg so when people run in...
Documentation being generated by genprod was pr...
Disambiguated all the implicits in JavaConversi...
new tests. no review.
Small changes in layout and comments. no review.
Closes #3837. Review by extempore.
Closes #3614.
Closes #3567. Review by milessabin.
Closes #3833. Review by extempore.
Closes #3672. Review  by extempore.
TreePrinters now go inside orginal's of TypeTre...
Reverting r23232. No review.
removed docs/licences (doc/licenses already exi...
Working out some more of the flags situation.
There was a fascinating tangle of name creation...
Modification to the widening logic to treat loc...
All this time with Nil only claiming to be equa...
An error previously unnoticed.
Improving scalacheck update script.
re-added isAbstract and isTrait to HasFlag beca...
An object with a main method can now extend its...
Closes #3894. Review  by dubochet.
closes #3862.
closes #3281, #3866.
Misc. cleanups in specialization.  No review.
Added filterNot to Option so I can stop being d...
The second piece of the flags patch.
This maps @native, @volatile, and @transient in...
Two improvements (or so I claim) to MatchErrors.
One more partest fix where output was redirecte...
    closes #3915.
closes #3890: propagate inferred type parameter...
Closes #2333. Review by dragos
Encapsulating name strings in StdNames and elim...
Introduced -Ymurmur with murmur hashcodes.
An overhaul of the collection-oriented methods ...
Abstracting out the common flags code between S...
Updated IntelliJ sample files. no review.
temporary fix for compiler crash in dependend m...
Some cleanups in the compiler source.
Better check for objects trying to sneak themse...
Settings help tweak.  Closes #3910, no review.
Abstraction improvement in Flags.  No review.
Made some adjustments to toString formatting of...
Added more complete output if tests fail.
Fans of scala cinema who have viewed this types...
Did a bunch of symbol oriented work on checkers.
Positioning fix closes #3092, no review.
Unreverting r23174.  No review.
An obviously wrong yet somehow brilliant piece ...
Further fix for #3796. No review
Solved issues with fork join pool creators, and...
Temporary fix for #3796. No review
Adding immutable parallel hashsets.
Improves exhaustiveness analysis to not warn ab...
Reverted a test. No review.
Added back another previously failing test.
Added back a failing test. No review.
Disabled a failing scaladoc test. No review.
Disabling a test from last commit until figurin...
An issue with scalacheck and actors where an ex...
Somewhere along the way AnyVal stopped working ...
Massively simplified the exhaustiveness checker...
Checkes the size of the author list properly
Locator should follow TypeTree#original to get ...
Reverts r23174, which I believe will bring the ...
init currentTyperRun rather than leaving it nul...
Another batch of busywork shuffling the content...
Pattern matching on Array types, working for re...
Authors taglet is back to docs.
Work on the pattern matcher.
Removes a bunch of private functions which are ...
One last batch of test cleanups and I think I'l...
The next batch of tests put up a little more st...
Sorting through the tests in pending from oldes...
Another attempt for #1591.
Still giddy with the thrill of fixing #266, I v...
While trying to come to an understanding with #...
[scaladoc] JavaScript template search uses a st...
Reverted an earlier binary incompatible change ...
Changed Response so that get does what it did b...
need an access to compileRunner from Eclipse to...
Closes #3875. Review by vigdorchick.
Revert changes related to #1591. no review.
More beautification of icode checker output.
Modified typekinds to offer a more general lub ...
Integrating feedback from martin and iulian int...
partial revert of r23128 ("see #3859.
closes #3859.
closes #3865: scaladoc now prints anonymous typ...
A little reorganization of some pattern matcher...
Refined crash avoidance related to self type te...
replaced deprecated method call. review by rytz.
Update comment in ByteCodecs. No review.
Cleaning up the contents of test.
Bringing the tree and icode checkers back to life.
closes #3873.
close #3864.
Test for #3829. No review.
Removes abstract types in ParSeq and ParIterable.
Some progress on reviving TreeCheckers, plus a ...
A small typo. No review
closes #3808.
Adds a half second delay before showing tooltips.
zippedWithIndex and zippedAll added to ParItera...
closes #3857: retain pre-erasure info in type h...
closes #3800.
Adds a zip for ParIterables + a new Zipped view...
AIOOBE in scanner when typing in the end of file.
InterruptedException while waiting for result s...
Revert "CPI -> SCPI to (hopefully) fix scaladoc...
CPI -> SCPI to (hopefully) fix scaladoc failure...
Rollback MutableSourceFile, the whole idea is b...
Test case closes #3774, no review.
Added an override to immutable.IndexedSeq#toInd...
Test case closes #3509, no review.
Test case closes #3498, no review.
Test case submitted by mark harrah closes #2813...
Test case closes #2619, no review.
Test case closes #1548, no review.
closes #3792: type equality for singleton types...
removed deskolemize hack for tcpoly.
documentation for conforms and friends
A cleanup of the inliner.
Reimplementing parallel views to solve several ...
Closes #1591.
do not cache lineIndices for MutableSourceFile.
Found the following inefficiencies in fjbg:
Scala IDE needs mutable files with changing con...
[scaladoc] Adds some simple tests for Scaladoc ...
[scaladoc] Closes #3541.
Painstaking elimination of redundant array crea...
Changed Seq#distinct to use a mutable hashset r...
Tail recursive implementation of mapConserve, s...
Test case closes #2162, no review.
Adds links from letters to the reference index ...
Mostly a setup commit.
Guard against overflow in fjbg.
Removed unnecessary param. Review by milessabin.
added typedLastTree functionality to CompilerCo...
Better unlocking behavior when exceptions are r...
Restoring negative literal parsing behavior to ...
Refactorings to make iterators required by task...
Correctly get all scope symbols and members.
Some tweaks to ListSet to make it less patholog...
Does what can probably be done about strange it...
Modified XMLEventReader to write dummy <ignore/...
Modified xCharData to call handle.text on CDATA.
Made transpose not fail on an empty collection.
argh -- merge failure?? -- this was fixed
part 2 of the dependent method refactoring: imp...
closes #1569, #3731: refactored dependent metho...
include all symbols from enclosing scopes as we...
    Closes #3779.
Little type in documentation; closes #3386.
Adds a reference index to the documentation.
Overrode addString in TraversableViewLike.
Test for already closed #3088.  No review.
positioning fix for infix expressions: report e...
Gave StringBuilder a StringLike parent as endor...
Never generate the ACC_SYNTHETIC flag in byteco...
Removed Throw from the set of unlabelled AST No...
Added implicits to create Orderings from java's...
Stream gets a specialized, extra-lazy Iterator ...
Shield interrupts against exceptions in user code
Adding interrupts should wake the server
Close #3835, review by extempore
closes #1693: improve implicit conversion disam...
Enabled partest to run entire directories for s...
Improved parallel scan performance further.
closes #3612.
closes #3692: make instantiateTypeVar more care...
relax implicit divergence check
Couldn't bear to see sbt seemingly so close but...
Tweaking sbt so it will stop jabbering about sv...
Closes 3627. No review.
Interpreted absence of any objections in mailin...
Improving parallel scan. No review
Test case closes #2399, no review.
Renamed a file to soothe ant.  No review.
Bumped version number in trunk to 2.9.0
Proposed implementation of 'unlift' on Function...
Unbroke the command line ~/test/partest tool, w...
fixed some scaladoc comments
fix fix for (close #3791) and made deprecation ...
map2 => zipped, no review
close #3791 according to jason's proposal.
Some modifications to repl classloading to make...
Changes to presentation compiler.
doc comment fix. No review.
Updated link to collections API guide.
Stability testing task added.
Added type alias so that Response is accessible...
Brought the files in scala.collection.interface...
Closes #3803. No Review.
Closes #3636, crash when unexpected types arriv...
Closes #3650.
update sbt build files to include scalacheck.jar.
better error message for default arguments.
updated default ANT_OPTS for more speed. no review
Changed the behavior of -cp for scalap.
Makes utility methods in the ArrayStack compani...
Changed version number to 2.8.1. This is
Partest changes - partest now uses scalacheck.j...
fixes #2662. Review by moors.
Temporarily disabled collections checks to keep...
Closes #1220.
New Starr, without msil classes.
Added scalacheck tests for parallel collections.
for MSIL: now based on the latest ch.epfl.lamp....
Added ant tasks for strap that build scalacheck.
Partial fix for #3774.
Added scalacheck folder, scalacheck source upda...
Added a few overrides to prevent default implem...
Correction to commit 22865 in order for sbt bui...
Partest support for sbt (with failed only and s...
New wider interface of presentation compiler.
removed author attribution, since no code from ...
added doc comment which makes things clearer wh...
Hardened the bytecode reader.
Dredged some more dead code out of SyncVar.
Some more finnessing printing in the repl.
partial fix for see #3772.
this should fix our achy breaky build. no review
documentation for scala.collection package, con...
documentation for scala.xml.pull, contribution ...
minor cleanups, no review
Closes #3497.
Removed the presumably unintentional empty "1" ...
Closes #3776. No review.
new tests. No review.
Correctly locate context tree even on the edges.
for MSIL:
Pretty print tuples in the repl.
New starr without debugging output. no review.
in refchecks, visit the qualifier of irrefutabl...
test for see #3769. no review.
test for #3667. no review
More robust icode loading and fixed an issue wh...
New starr for optimized builds.
Renaming and small tweak in testing.Benchmark f...
Various fixes to optimizations, and mainly much...
less logging.
Finally look at the right place for inherited m...
inline more in Range
Improved the peephole optimizer to use liveness.
Small cleanups
Tweaks for better optimizations.
Made ranges a bit more friendly to the optimizer.
debugging output to track down wild boxing.
Added setup and teardown methods.
Specialize rhs of specialized fields.
Don't box class parameters when passed to the s...
Optimized away box(unbox(E)) ===> E.
Added an overridable setUp method that is calle...
forgot to update check file after renaming tests.
closes 2462. better implicit error messages.
closes #3757. got paren wrong during refactoring.
closes #3575.
Discovered ListMap.++ returns a Map instead of ...
Extending sbt capabilities :
closes #2788.
closes #3777.
Closes #3763. No review.
Closes #3756. No review.
better fix for see #3667.
use arraycopy not Array.copy in Arraybuffer.siz...
Revert ArrayBuffer's sizeHint as I had a typo a...
use arraycopy instead of Array.copy in ArrayBuf...
cosmetic fix to GenMSIL. no review.
remove space from sbt's build/x/ classes direct...
documentation for scala.Array.
doc comment for scala package.
Since r22186 scripts wait for all non-daemon th...
Overhaul of ScalaRunTime.stringOf.
Revert "closes #3757.
closes #3757.
closes #3691.
closes #3663.
closes #3419: test files
for MSIL: Previous changesets were applied more...
[Scaladoc] Improve the documentation of primary...
Changes in docs and layout. No review.
Correct fix for see #3726.
    different approach to manifests of type par...
closes #3676: cycle detection logic in BaseType...
Added missing file for last checkin.
Removed duplicate classes. No review.
fix an msil bug (code gen of exception handlers).
An overhaul of checkSensible.
update doc of option. close #3737.
close #7226.
close #3709. no review.
closes #3582: typedTypeDef needs to run in a ne...
Modified r22702 to avoid tarring overloads with...
Disallowed super.XX calls to Any methods which ...
fixed t3738
pending test for #3663
close #2799.
close #3403.
updated intellij project SAMPLE files to new fa...
fixes names/defaults when using :_* for specify...
close #3667.
Widened a try block to unregress the error mess...
fix the failing test. review by dubochet.
close #3685. review by moors.
Keyword of method symbol signature is correctly...
[Scaladoc]
added @deprecatedName annotation, allowing to d...
Generalized the scala sig "look in both attribu...
Reverted my brainless introduction of ## to a j...
Parse ordering issue prevented passing properti...
Revamped ScalaConversions.
Alterations so the sbt build will run under git...
Modified toString on JSONObject and JSONArray t...
First version of SBT build for Scala compiler/l...
[scaladoc] Small fixes for 2.8.0 updated docume...
Added merge function to HashTrie.merge. No review.
[docs] Documentation updates contributed throug...
[scaladoc] Setting for link to source URLs is m...
Minor tweaks. No review.
Refactored benchmarks.
fixed case 2 (Android) in ticket #2464 (case 1 ...
generates CREATOR code for Android.
More files affected by renamings. no review
Several renamings not included. no review
Parallel collection library renamings. No review
updated intellij project file samples
Allow for overriding the debugIDE val (requeste...
Revert 22605 change to JavaParsers.scala, which...
[docs] The first comment contributed using Petr...
[scaladoc] Optionally run typer phase for Java ...
[scaladoc] Don't generate documentation for emp...
[scaladoc] Remove unused template.html file.
[scaladoc] Make a DocDef node for javadoc comme...
[scaladoc] Modify build script to copy html res...
added missing file.
[scaladoc] Singleton types (`this.type`) are co...
Added `ask` method to compiler control to do fa...
new test files.
[scaladoc] Adds private Scaladoc option "-Yuse-...
[scaladoc] Print "Inherited from" headings usin...
[scaladoc] Scaladoc knows about Javadoc inline ...
[scaladoc] Full comments with "by inheritance" ...
Moved the burden of forgivingness for string sl...
close #3648 (again).
Closes #3653.
removed generics warnings in actors
Updated LinkedBlockingQueue to latest jsr166 ve...
Added test case for see #3628 in pending.
Added test case for see #3620.
Added test case for see #3636.
Added test case for #3645. Closes #3645.
Closes #3493. Review by extempore.
closes #3603. no review
close #3648.
close #3649. no review
cleaned up the mess that resulted from cobbling...
made typechecker logging methods final so they ...
closes #3622: refchecks erased types without un...
closes #742.
closes #3507: don't generate manifests where we...
closes #3494.
closes #3486.
closes #3477.
closes #3399.
closes #3374.
closes #3249.
closes #3247: syntax error regarding context bo...
closes #2416.
closes #2331: the pre-transform in Erasure did ...
[scaladoc] Follow-up on review SCL-110. No review.
[scaladoc] Follow-up on review SCL-95. No review.
[scaladoc] Hiding full comments in template pag...
[scaladoc] Implements documentation of higher-k...
A brown bag on the head fix to that last patch.
The take/drop methods in IndexedSeqOptimized we...
Put a couple null checks in the inliner so it d...
Tightened how the repl prints types so we don't...
Test case closes #261, no review.
When compilation fails because of an unimplemen...
Routed all places in trunk which look for jar f...
A cosmetic change which serves to document that...
Closes #2318 (spurious IllegalAccessException t...
Closes #1766 (structural method dispatch broken...
Partest task will go into verbose debug mode wh...
Option gets an empty factory like the collections.
Made a null output sink and applied it to the r...
Some more improvement on the error messages whe...
Normalized protected type aliases before repl p...
New starr based on r22464, no review.
Test case for (long ago closed) #2106, no review.
Test cases close #13, #95.  No review.
Fail more gracefully on > 22 case class paramet...
Abandoned any pretense of selectivity and put f...
Took a cue from mharrah that we don't need to b...
Since the buildbots won't meet me in the middle...
Renaming files and inserting dummies to please ...
Created mutable.SeqLike so as to mix in Cloneab...
Removing some dead code from SyncVar and cleani...
A crasher in the pattern matcher revealed a fla...
Separate option Ordering into a trait so it can...
Test case for #1974, which was fixed at some po...
Tweaked a test to pass under java 7.  No review.
Some modifications to ZipFile to make sure the ...
Warded off a parser crash on certain invalid pr...
Test case closes #1845, no review.
Although everything now builds for me, the buil...
Removed a test from pending which is also in fi...
Test case closes #3440.  No review.
Enumeration fixes.
Added forkjoin to partest's classpath to unbrea...
Parallel array `map` optimisation. No review.
moved toScalaRepeatedParam TypeMap to refchecks.
companion objects of case classes know their name.
Implemented lazy combiners for parallel hash trie.
removed warnings (deprecation,unchecked)
close #2413.
Added doc comment to Actor trait explaining the...
fixed #3604
Removed unfinished Jenkins hashcode for final.
Disposed of a gordian knot by transforming stri...
close #3543
Added some null checks to == logic.
Changed inference algorithm to use weak
[scaladoc] A warning is printed when usecase me...
[scaladoc] Abstract members can be filtered in ...
[scaladoc] There is a text filter tool for memb...
Moved parallel collections to library dir, chan...
[scaladoc] Added linear super types.
Refactorings and hash trie combiners. No review.
The inliner now looks harder for method impleme...
A wholesale reversion of the pattern matcher to...
fixed anonymous function in xhtml. no review.
second part of r22260
first part of r22260
removed integration of placeholder syntax and n...
temporarily reversing r22260; will be shortly r...
reverted change to avoid merge conflict
Imporved printing of private[C] in TreePrinters.
[Scaladoc] Self types are printed.
Minor changes in parallel hash trie. No review.
[scaladoc] Closes #3125: inherited use cases ha...
Disables NotNull checking unless -Ynotnull is g...
Adding primary version of parallel hash tries.
[scaladoc] New display mode for members: ordere...
[scaladoc] Slightly more robust treatment of "c...
updated version number in build.number file
A love letter to the inliner.
Added test case for #432. No review.
Test for #3560.
Closes #3420, typo in scaladoc for BigInt.
Closes #3558.
Made getters treated more like private members ...
Changed groupBy to return immutable.Map.
Closes #3174 and #3560. Review by moors.
Further improved combine for hash tries, cuttin...
Removed bogus typing.
Partial fix for #2296: instead of VerifyError w...
Continued working on hash trie map combine - wo...
HashMap merge bug fixed. No review
Make local lazy values thread-safe.
Updated disabled test file.
Added `combine` and `split` to immutable.HashMap.
Put in some long overdue soft padding around re...
Taking another shot at negative constants as an...
Most of the iterate implementations were callin...
Made scripts wait for all non-daemon threads to...
Adding parallel collections to trunk.
Overwrote copyToArray for efficiency.
Solved problem that -3.0 is not recognized as a...
Patch from Jason Zaugg so singleton types aren'...
Tracked down why the jvm/natives.scala fails fo...
Burned by a last minute adjustment, I lost the ...
Discovered and disproved this unlikely truth:
Reverts r21973, the patch I characterized as "h...
Sorted out some buck passing among TraversableO...
Codec changes in scala.tools.nsc.io correspondi...
Restored Source factories to a form source comp...
Closes #3472, final specialized methods give Ve...
Closes #3499, double definition with specialized.
Forgot to add stream view classes for #3511.
Partially solves the problem for #3502.
[scaladoc] Updated man page for Scaladoc 2.
Added more license notices for things shipped w...
Added mandatory copyright notices for some libr...
Removed unnecessary files containing code with ...
some tests. no review
Make Iterator.toStream be properly lazy.
made hashset more robust for concurrent access ...
Re-enabled a number of previously disabled tests;
Reversion of r21940, which caused a big bump in...
Commit r22003 changed the svn:ignore
also consider non-implicit locals when checking...
Closes #3452, inconsistency between method desc...
Adds comments for #3471, and a test case which ...
Closes #3434.
Stupid java 5/6 schism got me.
Added a migration warning for matches and insta...
Made interpreter robust against a missing class...
Test closes #2919 which now works.
More thorough fix for #3454
Updated check file. No review.
Closes #3469. Review by rytz.
Applied Paul's patch which closes #3306.
Closes #3454, plus one syntax generalization wh...
Addresses see #3470 by adding a method Reactor....
updated CompilerCommand invocation in main
Brought the *Proxy classes more up to date.
Removed a few instances of redundant or dead co...
I figured it'd be a miracle if I got the script...
Added tests for bugs which have been fixed sinc...
Changed the script runner mechanism to alchemiz...
Adding some info to naked asserts so future cra...
Pulled a function from the repl into the packag...
Added test case for #2409.  No review.
Reverted r19926 based on reports it breaks thin...
It's clearly not a long term solution to go hun...
A workaround for the crasher described in the c...
Discovered via irc one more assertion in the ma...
Made workaround for #3430 noisier during its wo...
Messed up a flags test file, caught by dragos.
Altered a bunch of places which call hashCode t...
Removed some flotsam which should have been rem...
Added +=: prepend to MutableList.
Workaround for #3462.
A more specifically targetted version of r21991...
Moved the test for #3420 to pending and reopene...
Make the inliner be more careful about where it...
Test case for #3420, closes #3420.
Closes #3449. no review.
Put dummy scalacheck dir in test/files since pa...
Misoptimization for list extractors caused non-...
Closes #3381.
Closed #3432.
Bug in lastIndexOfSeq.  Closes #3455, no review.
Closes #3304. Review by extempore.
tentative solution of typeParams problem discov...
Hacky but no-risk fix for #3189, which was caus...
Removed deprecation. No review.
Changed migration annotation to deprecated.
some more ad-hoc cooking
cook raw type when copying down result type
Changed strategy to allow specialization on typ...
Commented out unnecessarily verbose debug info.
New starr
Closes #3417. No review (already done by Martin)
added another Android example
Made javaConversions more general.
[scaladoc] Closes #3428 (HTML markup supported ...
Swapped the order of the arguments to returning...
Starting to look like the pattern matcher and I...
Took advantage of my new wealth of bottom-up pa...
Realized that somehow the synthetic flag on pat...
Added one-way conversions from collection.{Set,...
Closes #3433.
Closes #3434.
Should fix the interpreter bug I just introduced.
Removed an assertion which was asserting an unt...
Notice and fail when a file given with -i is in...
Overhauled sequence length logic in the pattern...
Closes #3424, double definition when overriding...
[scaladoc] Closes #3351 (white space before fir...
Removed more than 3400 svn '$Id' keywords and r...
Made library build more robust when using other...
new msil.jar to make msil build. noreview.
Corrected sizeHints for scanLeft/Right
Closes #t3363. Review by extempore.
close #3415.
Closed #3413. No review.
Added sizeHints to operations where it made sense.
Made builder in MutableMapFactory use += instea...
made MathCommon a class to gain some speed.
Disabled scalacheck tests because they interfer...
Closes #3407. Closes #3412. Review by plocinic.
Remove the sourcepath prefix from the logs and ...
docs for breakout and no-arg apply in canbuildfrom
close #3400. no review
Rolled partest back to r21328.
Removed some logging and prune CollectMethodBod...
Tightened what gets specialized: only when the ...
Rolled back a subset of partest to use StreamAp...
revert the revert of r21791 (fix constructor pa...
Closes #3387. no review.
revert commit that probably broke the build due...
Some more, hopefully temporary, partest timeout...
close #3384.
Revert r21790: "closes #3373, #3177: validity c...
sorry, last-minute edit broke build: re-added p...
fix and test where constructor parameter annota...
closes #3373, #3177: validity check of an impli...
Closes #3378. No review.
Removed 4-year old println when getModuleOrClas...
Increased partest per-test timeout in an attemp...
Renamed Idea project files to have a .SAMPLE su...
Closes #3382. no review.
Properly specialize superclasses of a specializ...
Kicked the partest timeouts way up since appare...
Accumulate missing abstract member errors so th...
Removed AnnotationInfos.ScalaSigBytes from refl...
Kicked partest up to a 6 hour timeout.  No review.
Deprecated two members of RemoteActor which cle...
[scaladoc] Closes #3302 (case class with privat...
Closes #3310 (very large Scala class is compile...
Regenerated FunctionN, AbstractFunctionN, etc.
Took advantage of the sophisticated abstraction...
Removes pointless reference queue from the Symb...
Reverted change that made partest fail with 'bi...
Allow inlining for straight-line methods.
removed the dir info of the error messages.
Tightened variances check. Review by prokopec.
Made internal helper methods in concurrent.ops ...
Removes scala.concurrent.AsyncInvokable, which ...
UncaughtException is now a case class (see #2017).
Closes #3369. Review by plocinic.
fix msil backend. no review
improved doc for PARAMACCESSOR flag. no review
Some path-dependent type fiddling so power mode...
Added classes/continuations-plugin to the plugi...
Closes #3365.
Closes #3364. No review.
scalap: signature for case classes fixed
no inlining on msil.
A small error message improvement suggested at ...
Added size hints to builders where possible wit...
Closes #3362. Review by dragos.
Various refinements and polishing to do with me...
Created TypeDiagnostics trait and have begun op...
Added test for several tickets that were fixed ...
fixed #3349 : method symbol cached too aggressi...
Some cleanups in repl completion and power mode.
Mostly finishing the ball that got rolling in r...
Typo patrol. no review
[scaladoc] Removed commented-out items in the c...
[scaladoc] Moved object/template icons to the l...
[scaladoc] Added TODO comments for later fixing...
[scaladoc] Added missing file for previous commit.
Better positioned regular expression parser, co...
Improved documentation for `NodeSeq.\` and `Nod...
Solves the "same type after erasure problem" un...
moved AnnotationDefaultAttr to scala.runtime.
Some overdue improvements in repl completion, w...
Closes #3356.
close #3338, close #3334, close #3345.
Another guess falling somewhere between educate...
StringBuilder no longer violates the Seq revers...
Took another of universal equality's victims to...
Added size hints to Array.{ iterate, range, tab...
Created Mutable and Immutable SetFactories to d...
Added test for #3081. No review.
Closes #3108 plus removed some semicolons.
added missing SuperMixins
Some cleanup I did when looking at #2769.
Reverted change of Reactor.exceptionHandler's t...
Reactor.exceptionHandler is defined on Throwabl...
Added two options to tools/tokens, --sliding an...
Two new command line programs in ~/tools: scmp ...
Since pickled data moved into annotations ShowP...
[scaladoc] Slight change to design of how Comme...
Changed the way special overrides are implemented.
Handled action items (1) and (4) of the phaller...
Undeprecated @retain as suggested by odersky on...
More fully integrate immutable.Queue into colle...
fix bootstrap library build. review by odersky
Missing bit from r21620.
Better fix for #2757. Review by milessabin.
Raised some partest timeouts, I think with thes...
Degeneralized some incomplete generalization of...
Made partest diff algorithm much more lenient.
More polishing up features in partest which wor...
Added a test to make sure distinct preserves or...
Improved @tailrec error messages to specify the...
Initialization ordering issue in BigDecimal.
Removed a bunch of -Y warning options.
A repl corner case.  Closes #3298, no review.
added scalacheck.jar and *.test files to the sc...
Revert "Don't decode symbols in .toString."
Disabled failing json test.
Made the icode reader more resilient to errors.
Don't decode symbols in .toString.
Reverted r21523. No review.
[scaladoc] Tweak so that left pane has a little...
Removed trace output after having verified that...
Some mopping up in equality.
A safety improvement for random path generation...
A redblack tree scalacheck test contributed by ...
[scaladoc] More cosmetic changes.
attempted fix for the TypeSkolem problem under ...
fix for usecase in doccomments.
more documentation
Documented immutable.*. no review
Docs. no review
Removed obsolete AbstractReactor trait. No review.
Hardened actor tests. No review.
Immutable up to Queue docs. no review
fix stability. jar is not stable. no review.
A brace got hurt while documenting. no review.
Improved handling of uncaught exceptions in act...
closes #3241 and improves serialization of hash...
fixed most of stability, reviewed by iuli, so n...
docs for immutable.A-L*. no review
Some clean-ups.
[scaladoc] Changed comment code and pre tages t...
Noticed that Settings post-set hooks were not b...
Documentation for mutable collections. No review.
Disabling what I think are the last two failing...
Still working on partest.
Changed the colors for types, value members, an...
[scaladoc] Members inherited from sourceless fi...
Another attempt at avoiding partest hang ups wh...
Disabled test that hangs when actors package is...
[scaladoc] Cosmetic changes:
Correct oversight where neg tests didn't demand...
[scaladoc] Use case symbols have correct owner;...
Reverted r21500 until all test categories work ...
[scaladoc] Inner objects, which according to th...
Restored partest behavior to write log files wi...
Companion objects of case classes extend Abstra...
Don't generate forwarders for specialized methods.
Regenerated tuples, products and (Abstract)Func...
Auto-generate scala.runtime.AbstractFunctionN c...
[scaladoc] Comment summary (first sentence) is ...
[scaladoc] Signature kind (def, val) needs more...
[scaladoc] Lazy vals are printed as such, no lo...
Some modifications to partest to improve output.
changed testfile, to satisfy new diff algo (whi...
fixed LOAD_MODULE for companions of primitive t...
Move constructors to beginning of scaladoc html...
[scaladoc] More mitigation code for dangerous H...
[scaladoc] Not all 23 AbstractFunction classes ...
[scaladoc] Dangerous HTML (that can break Scala...
[scaladoc] meta-documentation (attributes, defi...
Attempting to unblock partest by handling Asser...
Another test for see #2017. No review.
Improved deprecation warnings in actors package...
actors.UncaughtException stores most recent sen...
Cosmetic renamings. No review.
Closes #3224. Review by retronym.
Closes #2757. No review.
Disabling some more tests which crash under -op...
Disabled the test which is hanging the -optimis...
Reverting r21442 the Exception patch because I ...
Added --update-check option to partest.
moved plugin folder back to 'misc/scala-devel/p...
Made use of random number generator in ForkJoin...
Scaladoc clean-ups for various actor and channe...
Completed scaladoc for Reactor and Combinators.
[scaladoc] UI tweak: definition classes list is...
[scaladoc] Refactors Paul's refactorings from r...
ScalaSigPrinter fixed for multiline string valu...
Some overdue cleanups on Exception.
Temporarily reverted r21421 so the build will b...
Restores the passing of scalac.args and javac.a...
Introduces scala.tools.cmd providing command li...
Docs. No review.
More docs. No review.
docs. no review
Docs. No review.
Docs for MultiMap done. Review by community.p
Some tweaks to process to see if it'll fix auxjvm.
MultiMap and WeakHashMap docs. no review
Turn on specialization by default. No review.
fixed one more issue that prevented variables i...
more docs
Updated documentation
Work on mutable collections docs.
[scaladoc] FIxed issue with wiki parser that pr...
Turn on specialization by default. No review.
@inlined auxiliary typed methods to reduce stac...
Interrupted attempt to fix #2897.
New starr with the latest fixes to specialization.
Brought back stack traces in TypeError. This is
Added a cast for alias replacement that caused
Less logging unless '-Ydebug', refactorings.
Changed TreeSymSubstituter from a traverser to
Changed default of 'keepsTypeParams' to true. All
New starr for primitive companion objects
Changed the syntax of the specialized annotation:
Companion objects of primitive types are now va...
Made 'specialized' a printable flag. No review.
Special-cased 'isHigherKinded' for ThisTypes, i...
More information on type skolems when browsing ...
Implemented specialized subclassing for traits
Changes to docs of collections in the `immutabl...
minor cleanup in build script. no review
close #3207. review by odersky
Stack overflow corner case I noticed in the repl.
More cleanups in docs. Review by odersky.
Another set of typos fixed.
Mostly some undocumented stuff in JavaConversions.
Some typos in collections. Review by odersky.
Gave Stream a lazy withFilter implementation.
Created a test.suite.clean.checkinit ant target...
Tore out some unnecessary ambiguity-creating al...
And another partest gap is filled.
Removing some code duplication from scaladoc.
Final methods should appear in scaladoc.
Forgot to add scalacheck test for #2535.
Optimized toArray for ArrayOps and WrappedArrays.
Some tweaks to classpath handling I had left ov...
A couple more bits of partest I discovered were...
Noticed a bug with test obj dirs not getting de...
As a brief diversion from real work, implemente...
Typo patrol, no review.
Made Vector the standard impl of IndexedSeq.
Rearranging IndexedSeq/LinearSeq and related work
The code part of the partest patch.
If I work on this patch any longer without chec...
Removing a class cast exception.
workaround for #3252. review by extempore.
Nipped the infinite loop which is presently lau...
[scaladoc] Considerably reduced size of documen...
improved cps transform of partial functions.
Mostly IO tweaks related to my upcoming partest...
closes #3242. review by community.
close #3178. review by community
close #3183. review by community
close #3222. review by community
closes #3203, overriding more of the Traversabl...
Noticed that the implementation of toArray Iter...
fixes the unfounded "name clash between inherit...
Patch from Mirko Stocker to add position inform...
Reverted file that was unintentionally committe...
Closes #2386 by requiring class manifests for a...
closes 2864.
TraversableOnce.  Review by odersky.
improvements to cps exception handling.
some output polishing
missing quotes for annotation values added
Unparsed Scala signature annotations are not ad...
Tweaked help output a little further so -Y isn'...
Some minor I/O changes.  No review.
Altered classpath behavior when no default is g...
I think this closes #2433.
While working on partest discovered that Compil...
New scalacheck jar because recent Actor changes...
fixed double-loading of plugins.
Renamed Replyable* source files to the types th...
Renamed Replyable* types to *CanReply. No review.
Removed obsolete version numbers. No review.
Makes two actor tests deterministic. No review.
reverting changes from r21260.
Apparently I can't fix a test case to save my l...
continuations plugin will now report a nice err...
Adds tests for see #2017.
Addresses see #2017.
Renamed partialMap to collect.
[scaladoc] Improved Scaladoc comment syntax, co...
new readme. no review.
Scala signature is generated as an annotation, ...
Reverted a presumably unintentional reincarnati...
Closes #3187. No review.
Removed ArgumentsExpander in favor of having al...
Remedied accidental obscuring of -X, -Y, and -P...
You know Cutty McPastington is having a good ti...
Added some documentation to the methods in Pred...
Although it was working fine, a test case for @...
Closed #3195. Review by extempore.
Added test case for #3186. Closes #3186.
Scala signature is generated as an annotation (...
You try to get away with one little line of unc...
Went ahead and implemented classpaths as descri...
Noticed we still have a bunch of collection cla...
Consistency work on Addable and Growable.
closes #3199. review by community.
Some support code related to partest changes.
During my last look at r21224 I noticed what mu...
Some minor changes in scala.swing.* which I was...
Some work on the Array methods as they manifest...
Half-disabled productElementName until I have t...
Returning to the thrilling world of equality an...
Added a tryToSetFromPropertyValue implementatio...
More fun with -Xmigration.
new version of decode that does not need a length.
Spring cleaning of collection libraries.
Closes #2827. Review by community.
Reverse didn't work for empty ranges.
Closes #3133. Review by community.
Continuations support classes are included in s...
Closes #3185. Review by plocinic.
closes #3112. no review.
added test case for #2417. no review
Closes #2688 by disallowing call-by-name implic...
new tests
Closes #2913.
Closes #3180. No review.
Changed `!=` to `ne` for #3086. No review.
added support for continuations in try/catch bl...
Tracked down docs.lib build issue from the dent...
fixed treatment of annotated types in isNumeric...
minor cleanup to build.xml. review by rompf
new immutable.HashSet. review by community.
Reverting a couple replacements from that last ...
Leveraged -Xmigration to burn off some warts wh...
improved immutable HashMap iterator.
Tighten update check in cleanup.
Test case for #2940.  No review.
Test case closes #751.  No review.
Closes #2918. Review by moors.
More support code for the big partest patch I'm...
Improved version where bumping and zero-encodin...
Closes #3120. Review by extempore.
Disabled failing test
Added an object to mangle byte arrays into Java...
Closes #3143. Review by moors.
do not set the type of the implementation metho...
Added continuations to maven deployment.
added missing file from last commit. no review.
Partially reverted r21018.
moved the continuations plugin into trunk.
Closes #3158. No review necessary.
implemented handling of 32-bit collisions in im...
Closes #3157 by overriding +: in List.
Closes #2940.
Some IO conveniences.  No review.
Small syntactic adjustment so that last patch f...
slight (syntactic) cleanup of patch for see #31...
closes #3152: refactored adjustTypeArgs and met...
FatalError needs a stack trace.
...and a line from partest I didn't notice the ...
Some minor compiler support bits for my upcomin...
Removed a couple infinite loops in XML.
Some windows oriented fixes for build.xml.
New attempt at fixing the tests. No review.
Made actor-getstate test more robust. No review.
Temporarily disabling failing test until I can ...
Added test.debug target to build.xml.
Changed partest ant task not to use reflection,...
Closes #3102.
Refined fix for #2946. Review by extempore.
Reactor now has type parameter.
closes #2994
new tests
Avoids two unchecked warnings.
Closes #3006.
Closes #3115. Reviw by rytz
Closes #3026. Review by extempore.
Recursively transform 'new' arguments in specia...
Unbreak the IDE build following [21086].
Created directory for code which is most likely...
More progress toward immutable Settings, and va...
- new immutable HashMap implementation based on...
Removed unnecessary DebugSetting, folding the s...
Still working my way through all the classpath ...
One minute too many trying to figure out where ...
Modification to the last patch to return None/f...
escape source file path with space chars
Test case for case class equality.
ScalaRunTime method to perform sameElements as ...
Cleaning up some redundancy martin noticed.
Closes #3015. Review by moors (it's his patch).
Mixing test case. No review.
Closes #3026. Review by extempore.
Closes #3037. Review by extempore.
Removed quotes from quoted tokens in command li...
Added -Xmigration option and @migration annotat...
Making sure the interpreter always uses the des...
Renamed the linkedFooOfBar methods in Symbol to...
Added a comment to Symbols after one too many t...
Removed obsolete SimpleExecutorScheduler, Threa...
Closes #3118. review by extempore
fixed while loop performance.
Clean-ups in scheduler hierarchy.
Obeyed source comment to make some classes priv...
A few yards short of the goal posts attempt at ...
Attempt to fix the typing-a-whileloop problem.
Closes #3130. No review necessary.
Added --grep command line option to partest.
Removed the symlinks between scalacheck jars to...
Improved equality for Manifests.
#3128 fixed
Whipped ShowPickled until it would print out pr...
trailing spaces in decompiled annotations are t...
scalap tests fixed
Undeprecated Function.tupled based on the type ...
typo in test fixed
#2885 fixed
Added missing file that broke the build.
#3060 fixed
Closes #3076. Review by community.
Following a suggestion of jrudolph, made filter...
closed #3101. Review by community.
Added one previously overlooked case for comput...
Minor printer fix for singleton types
Enabled scalacheck tests.
Modification to r21009 to preserve that classic...
Added ## method to Any as our scala hashCode me...
While working on Any.## I ran across some inter...
Expanded the check from #1392 to enclose #3123 ...
Special cased an error message for the common s...
Some library reorganization I discussed with ma...
Removed the partest restriction that individual...
Quite a lot more work on XML equality than I ca...
closes #3082, review by rytz
Undid my awful code which had broken the thread...
close #3071.
closes #2741 closes #3079 no review
closes #2421 -- now also deals with chained imp...
see #2634: updated docs to indicate zipped is s...
closes #2956
closes #2797 -- no review (already done in tick...
Added a --bare option to ShowPickled so I can d...
More return type annotation to work around my o...
What appears to be a workaround for #3082, whic...
More partest cleanups, and putting back a coupl...
Looking at iulian's patch to the squeezer sent ...
Working on making the bootstrap process transpa...
Made doc comment consistent. No review.
Physically moved ActorGC to scheduler directory.
Made the squeezer worthy of its name: a block w...
It turns out some of the weirdness lately is be...
Tweaking the sealed logic in light of #3097.
Some debugging code for partest.
Created -Yfatal-warnings, as otherwise I can't ...
The build file wasn't quite all the way on the ...
Bash completion! The file is automatically crea...
[scaladoc] Preliminary support for links and li...
Updated scalacheck jar to current trunk.
Another update for ShowPickled.  No review.
Removed stray debugging code.
Improved fix for #2767. Review by community.
The initial results of running a basic cut and ...
Removed now redundant function splitParams.
After the compiler refactor, we ended up with i...
Control-flow combinators do not require thread-...
[scaladoc] Updated jQuery to version 1.4.2.
Added TextComponent.paste, made some accidentia...
Added productElementName to Product.
Introducing partest to the idea of code reuse.
Abstracting out a few more platform specific el...
More fun with ClassPaths.
Some much needed housecleaning regarding system...
Yet another attempt at retaining ill-typed tree...
A simple command line parser to consolidate a b...
- Added fair mode to ForkJoinScheduler, which s...
Specialized types are not substituted inside ty...
Some deprecation patrol and minor cleanups.
More laboring on Settings, ClassPaths, Ant Task...
Some more code for seeing what's going on in in...
Some repl cleanups and debugging conveniences.
Lowering the noise level in the classpath debug...
Having some challenges confirming the validity ...
Another attempt at retaining ill-typed trees fo...
Band-aid for #3081, issue should receive more c...
Altered the ant task to generate a -Dscala.home...
Some cleanups on the scalacfork ant task since ...
Temporarily reverting r20928 as it is leading t...
Some script fixes tied up with classpaths.
Patch from Mirko Stocker correcting start posti...
Made NumericRange invariant again, plus test case.
The first reasonably satisfying classpath commit.
Tighter pattern matching hits the street.
...and managed to miss the key file in getting ...
A variety of changes to partest made in a quest...
Added a copy() method to Settings.  No review.
Test file for last commit.
Checking the symbols of parameters in overloade...
Took a less ambitious approach to restoring sta...
Altered Symbol.isLess to sort on initName befor...
Made partest stop crashing on test directories ...
Unix scripts pass -D options to the underlying ...
Trying again to unbreak the repl patch.
Last minute change broke the last commit.
Some prestidigitation improving the repl startu...
Some minor bugfixing/refining to completion.
Rewrote my own submitted code of a year ago fro...
Some new tools for the tools directory.
Disabled JavaInteraction test.
Restored the disabled exception in classfilepar...
More classpath work, and cleanups in the vicini...
Added some error logic so if #2956 strikes agai...
Reducing the amount of low-level classpath mani...
Some change to classpath handling in r20866 has...
[scaladoc] Added "display packages only" filter...
The non-intrusive bits of my hopefully pending ...
added annotation checker hook for Types.isWithi...
More work on classpaths.
Trying to get when "." is added to the classpat...
Removed leftovers of r20857, added test for #3045
Disabled failing test.  Review by plocinic.
More work on classpaths.
partest no longer treats remaining .log files a...
Closes #2651
close #2984. review by community.
modified typing of while loops to allow other t...
fixes #3046
close #3003. no review, already done by dragos.
some small byval mode changes. review by odersky.
No double-processing format strings.
`replaceSomeIn` method added.
Compiler part of fix for #2767: provide hooks t...
Export missing package.
Until now directories on the classpath were not...
Some work on classpaths.
[scaladoc] Fully qualified names are displayed ...
[scaladoc] Many improvements in the UI for Scal...
Re-added deprecated  member to scala.actors.Fut...
fix msil build (nested classes in particular).
IntelliJ project metadata updated for new locat...
Some code duplication removal as I inch us towa...
A more MSIL-aware attempt at isolating the plat...
testdata changed
scalap output bug fixed
Discovered that List's deprecated removeDuplica...
some scalap tweaks
Taking a swing at fixing -optimise.  No review.
fixed previous commit. No review.
Made a whole WithFilter class for Option after ...
Added byval mode and annotation checker hook fo...
Raised the level of abstraction (slightly, not ...
Some hardening in the repl, and removing some f...
Some minor cleanups in reflect.
The remainder of isolating MSIL from the rest o...
Unique's seeming victory is overruled by commit...
Noticed that all the system properties were bei...
A big push to make the interpreter easier to in...
Created MSILGlobal to start breaking the depend...
Preserve source order for class members in gene...
Striking while the iron is hot, renamed removeD...
[scaladoc] Optional link to source (set paramet...
Made sliding/grouped throw an exception when re...
It was pointed out that sorted and the 1-arg ve...
Took a swing at sorting out sorting.
Hid some AST nodes from the prying eyes of refl...
Correctly check annotated types.
Closes #3009.
Cleaned up the code slightly. No review.
Continuing the fine work creating an abstract i...
Quite a lot more work on completion.
suppresses generation of manifests for abstract...
Exclude anonymous function classes from the def...
Removed scala.util.NameTransformer (it moved to...
missing bits of r20746.
lifted out core compiler data structures into r...
Check recursively the type aliases.
Unbroke the build.
Solidified the logic of stringOf for repl resul...
Great moments in typos: somehow the "decodeUni"...
Band-aid for #3004.
Better test for checking existential types, whe...
A compact tree printer, for primitives like mys...
A few compiler IO lib bits I have been needing:...
Implemented rompf's suggested improvement to th...
Added hashCode implementations to Manifest type...
new starr to bag performance improvements and f...
Closes #2650.
I'm sure I'm not the only one driven into parox...
Added a command line option for desugaring matc...
Added :search to power mode for finding classes...
Removing defaultGetter field from TermSymbols.
[scaladoc] In HTML documentation, `@return` tag...
[scaladoc] Comment parsing is improved:
close #2886 (applied patch). no review
Moved some test cases from pending to files sin...
One of those "$.05 for the bolt, $50,000 for kn...
Some hardening of repl generated code.  No review.
now correctly fix #2868. no review
Forgot to commit the change. No review.
Closes #2966. Review by milessabin.
reverting r20688 for now, no review
fix pickle format doc. no review
close #2868.
Made actor-receivewithin test deterministic.
Cleaning up. No review.
Refactored some of the code from r20624 thanks ...
Refinements to the recent repl patches.
Another batch of tests. No review.
Access modifiers added for certain members and ...
Hack for the refined build manager to print inf...
More tests, plus missing file. No review.
Changed the info statements in refined build ma...
Test file for matching with replace.
Replacement in matching can now be done by prov...
Use file paths for equality and hashCode to dea...
[scaladoc] Classes `FunctionX`, `ProductX`, and...
close #2929.
[scaladoc] Deprecated methods are striked-out.
small improvements in building newlibs / newfor...
First test for buildmanager. No review necessary
Added new target for partest for testing Build ...
Removing a stray paren to unbreak build.
renamed notCompiles ==> canRedefine.
Some minor polishing to the previous repl compl...
Another big REPL patch.
Closes 2926. Review by milesabin.
fix several issues in .net backend / type parsing.
Second attempt to fix #2926.
It's a big REPL patch.  And it contains:
Moved test case for just-reverted patch to pend...
Attempt to fix #2926 (companion object of case ...
Closes #2653, #2652, #2556.
[scaladoc] Default values of parameters are doc...
fixed bugs in .NET bytecode generation (branchi...
Renamed new bin directory to "tools" to avoid c...
Removed static state from global object ClassPa...
Bringing README up to date and filling in some ...
No longer are there more IDE-specific junk file...
Took a slightly different tack on parsing the s...
Removed some debugging echoes I let slip through.
Un-overloaded StringLike.format.
Made some cosmetic but clarity-increasing chang...
Test case for #2148.  Closes #2148, no review.
Until now all scala builds performed not in an ...
Iterators created with duplicate compare equal ...
Added test to pending with extensive exploratio...
more performance improvements; eliminated mk......
[scaladoc] Search tool will ignore case for low...
Digging into why the repl is so slow, discovere...
More work consolidating the XML code needlessly...
Tail-recursive implementations of parser combin...
new test. no review.
some more performance tunings. No review.
cleaned up explicit tailcalls
Adjectified some parts of speech as discussed o...
Test case closes #1737.  Review by community.
Don't insert whitespace on multiline strings an...
Brought ShowPickler somewhat more up to date wi...
New repl feature: you can start a line with .
Made Iterator consistent with Iterable by addin...
Exposed native Array clone() method.
Wrapped a buffered output stream around class f...
Reverted over-zealous replacement of 'PartialFu...
[scaladoc] Companion classes are printed.
Some optimizations to actor message queues and ...
ConcurrentMap trait added to collection.mutable.
Closes #2649. No review.
[scaladoc] Use cases are marked as such in the ...
fix for .net compiler (flatten is skipped).
Finished up fixing #2773.
Added ConcurrentMap and Properties conversion c...
Reverts r20311 since I'm not seeing what's goin...
better fix for see #2421 after feedback from Ma...
[scaladoc] Use cases are printed.
new tests. no review.
Closes #2866, #2870.
closes #2421: more complete fix, now also check...
A variety of bugfixes discovered by findbugs.
more statistics hooks. no review necessary.
Overrode slice in the StringLike derivatives to...
When comparing type aliases use info instead of...
Closes #2867. review by extempore.
Updated attempt at removing @inline warnings:
Deprecated "=>?". Closes #2860 (see #2819).
A fix for at least one manifestation of #2865.
Added toMap to TraversableLike.
Compare typeParams correctly for symbols so tha...
A few repl features.
Moved the test for #2364 to pending because it ...
Reverting stray commit to Eclipse metadata.
Commented out some (debugging?) code which was ...
Avoided a crash scenario in the presentation co...
Removed extraneous clause is isStrictlyMoreSpec...
Revised List#mapConserve so that it tests wrt e...
Red black tree patch and test.
speed up ClassPath.findClass. review by community
Weaken the test for co-definition to equality o...
Reverting r20406 (dragos)
Added final modifiers to several classes used b...
Added warning for failed inlining when the targ...
Improvements in checking for references during ...
scalac portion of fix for #2689.
further speed improvements by eliminating most ...
reinstated accidentally deleted comment
Closes #2657, #2789. Review by dragos.
Closes #2793, #2651, #2650, #2653.
Moved plugin neg tests to pending. No review.
Closes #2848. No review.
Closes #2853. No review necessary.
further optimizations to implicits.
rebuilt plugin test jars. no review
Also run neg tests in directories in ant task.
Adjusted timeout in test. No review.
polished statistics generation.
refined changes to implicits to allow again imp...
Added extensive statistics, reduced time of imp...
fix parsing of .net types with inner classes
Added an XML.load overload which takes an URL.
a more thorough treatment of the stale symbol p...
Created team of private[collection] abstract cl...
new testcase no review necessary.
Weeds out stale symbols in typer.
In resident mode the reporter should be reset a...
Another fix to make lift build under RC5; revie...
tentative fix for RC5 lift build problem.
Took full advantage of the new =>? alias for th...
Closes #2538. no review necessary.
Closes #2812 (and removed a left-over println i...
Closes #2819, #2705, #2805. Review by community.
Small change in test.
fixed #2548 - reverse, reverseIterator for view...
fix the build. no review.
close #2809.
Closed #2709.
closed #1449. review by community.
(1) Added some classes to allow arbitrary patch...
closed #2181. no review.
small correction in doc comment. no review.
closed #2829. review by rompf.
Documented scala.actors.Futures API.
Improved deprecated warnings. No review necessary.
small cleanups. no review necessary.
close #2820
Minimally integrated the semi-orphaned immutabl...
Closed #2718 and #2765. review by extempore.
Closed #2801.
[scaladoc] Added option "-doc-version" to Scala...
added test case for #2775 and commented the han...
Closed #2779. review by community.
Closed #1492. review by extempore
rebuilt msil.jar to fix msil build. no review
Disabling test for #1801 yet again, still faili...
read the Exceptions attribute from java classfi...
Began the process of consolidating all the code...
Added a method to turn a class name into the pi...
Closed #2775. Review by moors.
Another fix for the build problem with r20203.
Closed #2795. review by dubochet.
implement new spec for erasure of intersection ...
Adding target distpack-opt.
hardening the compiler to avoid exceptions I ob...
REPL completion now understands type aliases de...
Catch expanded names before they are visible in...
Rebuilt forkjoin.jar in preparation for the new...
Reverting r19988 (restoring test for #1801).
Removed an inapplicable comment with no review.
Moved takeDestructively into GroupedIterator.
Lots of work on repl completion.
more docs. noreview.
corrected @usecase and imports in plugin example
closes #2778: need to refresh normalize cache w...
Eliminating the deprecation warnings in the act...
Another round of deprecation warning elimination.
lost of documentation and some small adjustment...
integration of java and scala deprecation
Took advantage of package object fix to factor ...
Tweaked plugin template not to reference /Users...
allowed $super variables in doc comment; some m...
fixes #2610 and fixes #2687.
Added test for #2794
Don't NPE on null hashtable entries.
Modified partialMap to take PartialFunction[A, ...
Remedying the fact that I swapped which version...
cleanup
refined doc comments generation; refactored cod...
Small rewrite of r20087.
Closes #2649
closes #2784
Closes #2559
[scaladoc] Known subclasses are printed.
Fully export fjbg and msil from scala to scala-...
Gave all the manifest singletons a readResolve ...
typo
More informative error message. no review
Warning suppression.
Renamed AbstractFunction to AbstractFunction0 t...
Removed productPrefix from case class hashCode ...
Took manifests a little closer to the finish line.
A minor identifier change in a method which is ...
[scaladoc] Display of comments is improved.
Improve error message for selection from a type...
moved t2515 to pending (fails on ibm6). no review
Closes #2772
2009 -> 2010
see #2708
make exception handlers catching  faster.
Tweaking logic errors in broken docs build.
small changes to doc comment model
Re-deleted a method which snuck back in on the ...
new doc comment generation, including some new ...
plugin example update to be compiled via scala 2.8
Added lift method to PartialFunction
Updated copyright notices to 2010
Making it easier to explore the AST.  Example:
Making the repl-shell bridge nicer.
Don't add empty param
Split command line parameters by space, properl...
#2747 fixed
Made test jvm/t2515 more robust.
.scala_dependencies now correctly tracks the cl...
object's name should be Test instead of Main
Added new test, see #2754
oh, i mean 0 not O
close #2708
Use the same thread pool configuration for Daem...
re-compiled forkjoin
Added Java property to explicitly enable/disabl...
Replaced RunnableFuture with placeholder interf...
Implemented scala.runtime.AbstractFunction0-22.
Moved non-deterministic test for see #1801 to p...
[scaladoc] Types are links.
another test for #2489
closes #2750: cooking java raw types in info of...
moved forkjoin sources out of the library folder
Working around interesting initialization order...
Some minor cleanups found while cleaning up.
Built out genprod to create a tuple method for ...
A minor optimization to HashSet.
Making the Try/Catch/Finally in ScalaRunTime to...
Initialization order fix to ijuma's serializati...
[This patch submitted by ismael juma - commit m...
Implement foreachEntry by calling iteratorEntri...
Added switch to not use fork-join pool on a 1.5...
fix msil code generation for exception handlers.
(Temporarily) closes #2139
Closed #2726 and added test for #2464 (refs #2464)
closes #1904
Removed a deprecated method which snuck back in...
Extensive documentation of TraversableLike in p...
Added a line to build.xml to echo the value of ...
Added -make option transitivenocp which won't c...
Removed redundant code, let CompilerCommand pro...
Removed method cached from MapLike - it's an ex...
Undo previous change to Typers; use filter if m...
Performance improvement on Ordering.
Closes #2540 and closes #2593.
tests in pending for see #2705 -- note that par...
Made Symbols.filter more robost.
Unbreaking build.
Following up on my deprecated method overreach.
Closes #2707.
Improved fix for #2552
Closed #2418
improved fix for see #2489
Closes #2562
undeprecated containsSlice.
Closed #2863
Updated Idea files to use relative paths toward...
Cleaning up in scala.runtime.*.
Removing redundant scalap code.
Working on scala.runtime.
closed #2485: failing assert on reference to Ja...
Missed including Predef.printf in r19863.
Updating deprecated usages in new scaladoc code.
Added some logic to StringLike.format so that s...
quick fix for #2673: relaxed zipped on Tuple2/T...
re-compiled msil.jar (scala.Math / scala.math b...
updated README
Removed OMake build files.
closed #2624: instantiate type params after eta...
Some improvements to REPL completion.
Disabled docgenerator test, which isn't compati...
Scaladoc 2.
Made mutable.OpenHashMap a MapLike. Closes #2681.
Added reverse capabilities to PriorityQueue.
Closed #2664
Closed #2698
Closed #2696
Closed #2629 #2639 #2669
relaxed rule requiring `override` modifiers so ...
    close #2626 as specified by Martin
pending test: see #2660, #2691
close #2665 and close #2667: use weak conforman...
Improved completion for locals and import.
Some more XML cleanups.
Partitioned scala.Math and scala.math a little ...
Closed #1545
Partial fix for #2683
Closed #2552.
Closed #1226. Added new test cases.
== for specialized types will not cause boxing ...
A couple more warning fixes I meant to check in...
Priority queue reverse is undefined - overriden...
Moved failing test due to fix of #2635 to pending.
Removed all traces of Boxed*Array.  New starr.
Closed #2635
Made implicit resolution compatible with numeri...
Cleanup of Cleanup.
Partially addresses #2626 - pattern matcher no ...
Applied performance patch and test case from ij...
Closed #2642
Expanding the warning cleansing into -unchecked...
updated/extended serialization tests
closes #2585: generate more precise Java generi...
More deprecation avoidance and some minor smoot...
Eliminated warning about Tuple2 and Tuple3 impo...
Trying to get the test to pass on the server.
Tweak to Iterator.++ to keep it from going into...
Subtly altered implementation of iterator which...
Commented out anonymous function invocation for...
Closed #2641
Deprecated the Tuple(...) methods in Predef, bu...
Removed a couple of unneeded comments.
Changes made in the clean up phase - now the sy...
Priority queue test, updated.
Priority queue test.
PriorityQueue fixed, should work ok now.
More world-shaking deprecation work.
new test
Simplifiations in collections libraries, enable...
closes #1422
Slightly more fixy fix than the previous fix.
Deprecation patrol exercises the new capabiliti...
closes #2670.
Path.parent now returns Path instead of Option[...
Restoring an embarassingly large quantity of de...
More deprecation soothing.
New starr based on r19717 since I'm finding the...
Finally completed the incredibly tedious task o...
recompiled msil.jar, it refered to scala.Math$
More deprecation work.
to fix varies conditions of removed source/clas...
More minor removals and some cleanups of !!!s a...
Removing bits from the library which shouldn't ...
Partial fix for #2625.
Allow implicit modifier on single-parameter fun...
More String.isEmpty breakage.
Contents of scala.Math moved into scala.math pa...
Some organization & duplication removal in RefC...
A lot of minor code adjustments to ease the bur...
Some organization & duplication removal in GenI...
Minor pickler organization stemming from optimi...
Faster optimizer by caching successors/predeces...
test cases in pending
another minor change to teh review script
review requests can now be created outside a ch...
Corrected help syntax for -Ybuilder-debug.
Tweaked a test which has been regularly failing...
Added benchmarks with results for equality.
updates to review script
review board scipt
updated plugin-multiple-rafter plugins.jar
    fixed #1236
fixed scala-devel sbaz package
Bringing BigInt and BigDecimal into the club of...
Moved those bits of Predef into the scala packa...
Removed everything deprecated in 2.7.3 or earli...
documentation for fix of #2482
Slight opimization of previous checkin.
added hooks so that BigInt, BigDecimal can do t...
fixed #2454
fixed #2587
avoid illegal forward references by moving synt...
Removed some duplicated functions.
Allow protected access to constructor in superc...
fix #2488.
removed disabled files
fixed #2470.
Forgot to commit Changes.scala in previous commit
Partial fix for #2581.
fixed #2546 using patch from dlwh -- please rev...
The preferred way to convert between primitives...
Promotes reverseMap out of List into SeqLike as...
This test for Queue passes at my computer.
Queue - several bugs fixed, particular one not ...
In dequeueAll there was a bug checking if colle...
Changed the ctor of the LinkedList so that it i...
Mutable list test - passes.
fixed the sentinel bug for mutable list.
Zipped for Tuple2&Tuple3
added CanBuild type alias in package object sca...
test for #2591
fixing ++=:
tentative re-implementation of LinkedList and s...
fixed comment for adjustTypeArgs
fixed #2511.
Breaks down the hash function in BoxesRunTime b...
attempt to fix build -- can't build on my old m...
Reverted r19466, as the decision is now that
fixed bug in implicit resolution that only mani...
added `locally' to Predef.
Adds isDefinedAt to Function1. As a consequence,
use scalacfork for strap build, should make win...
Made Benchmarks use standard output instead of ...
Equality checks go to ScalaRunTime.inlinedEqual...
Better implementation of Predef.hash
fast path equals and hash methods.
Increased partest timeout, since it seems we ar...
Moved (non-regression) actor-receive-sender tes...
fixed #2583, patch supplied by huynhjl
Some @experimental cleanups/removals I missed o...
Removed remaining invalid tests.
Added missing class
Updates check file for bug 2144 which output wa...
Tighter type checking rules for structural type...
Broke up foldBinOp logic a little bit looking t...
Sped up build times by three minutes with a bri...
Moved a bunch of classes into the newly created...
- Renames filterMap to partialMap
Moved disabled tests back into their original p...
added numeric widening and weak conformance.
fix build on windows. fixes #2578
removed wrong .optimise targets
fixed obvious bug in JenkinsHash
Replaced immutable.Queue.apply, which should fi...
BuildManagerTest no longer throws npe when some...
simplified re-ordering packages
Export more useful packages.
Proposed fix for #2144 plus test case.
fix cyclic reference errors in scaladoc.
bit missing
Clarification to scaladoc comments for "sort".
Some tabs I unwittingly let creep in are now sp...
Scala implementation of fancier hashCode algori...
Deleted Zero, or "Nothing ventured, Nothing gai...
Applied patch for #2524.
fixed #2500 (second part)
fixed #2500: refactoring collections so that a ...
fixed problem with Vector.dropRight, added addi...
Vector improvements, now doing a lot less copyi...
Synchronize trunk with local changes:
Some structural improvements to Either and Opti...
Corrected comment contents.
Proper fix for #2280
Added -Ybuilder-debug:[none,simple,refined] opt...
separated Vector impl from IndexedSeq
fixed 2544, reimplemented SeqLike.indexWhere, s...
Reverted [19310] ...
AnnotationInfo.pos no longer in constructor.
added -Yhigher-kinded-raw switch as temporary w...
changed standard library so that it does not re...
Whole bunch of code for people interested in eq...
fixed typo
The final, tear-inducingly simple implementatio...
Made classpath do more advanced *-globbing.
In a stunning breakthrough, shuffle preserves t...
Improves Enumeration to obtain names of values ...
fixed bug in Stream::flatMap (still optimised a...
fixes separate compilation on .net
Made scala.util.matching.Regex serializable.
Reverting unwanted parts of last commit.
Second half of fix and tests for #1518.
Modifications to the five accumulated ant-paras...
The arrival of scala.Zero.
First half of fix for #1518.
new classpaths.
Attempting to unbreak fsc (can't reproduce the ...
Suppression of a possible NPE which is almost c...
Export scala.tools.nsc.transform so that variou...
Add positions to AnnotationInfo for use by IDEs...
Deprecation patrol.
Added scalac.args.quickonly to build.xml, becau...
Reorg of number parsing to use more direct logic.
Parser fix involving backquoted identifiers (#2...
fixed #2428 for good.
The last patch to work around #1909 caught one ...
Made sortBy unexperimental.
Tickets #1909 and #2508 involve code which comp...
new starr that does type constructor inference
the essence of tcpoly inference + test cases
Added (a variation on) jorge ortiz's sortBy to ...
Specialized works with Unit and handles correct...
A pending test for #2087, and a script test which
fixed breakage caused by r19219 -- sorry!
Revert "added CanBuild type alias in package ob...
Removed erroneous return type comment in scalad...
removed some of the code duplication that Marti...
Another warning for -Xstrict-warnings.
Added -Ytailrecommend option.
built new starr and fixed test cases
renamed Vector to IndexedSeq
added methods updated +: :+ to SeqLike
added methods updated +: :+ to SeqLike
scala.collection.Vector defaults to immutable
A selection of cleanups stemming from recent in...
Made Cursor.next tail recursive by making it fi...
refactoring of TypeVar to set the stage for tcp...
added CanBuild type alias in package object sca...
Added some info to a tripping assertion.
fixed failing testcases due to previous commit ...
renamed BuilderFactory[El, To, From] -> CanBuil...
Made Platform methods inlineable and allow the ...
Implementation of martin's suggested fix for #1...
Updated remaining test case to reflect the slig...
Some reworking of command line option parsing b...
Do not use ForkJoinPool when running on IBM J9;...
Ordering delegates Float/Double comparisons to ...
Relaxing a check for ticket #2486, plus test case.
Another bunch of work on Numeric, Range, Generi...
A new and better fix for ticket #1373.
Repaired some impressively wrong isEmpty logic ...
Made GenericRange covariant.
Expanded shadowing warnings to include block st...
added isInclusive to Range.
Created -Xstrict-warnings and got the ball roll...
moved Range and GenericRange to collection.immu...
Removed long dead AST Node Sequence.
Scaladoc comment position fixes with tests; sca...
A hard fought distillation of sequence patterns.
added methods updated +: :+ to SeqLike
scala.collection.Vector defaults to immutable
++: replaced by ++=:
Re-enabled optimised nightly builds
use arraycopy from Platform (for msil)
You might think someone would eventually weary ...
Yet more tracing code.
Yet more code for scrutinizing the pattern matc...
Changed mutable +: to +=:
Test case for #2127.
vectors encore un fois
reverted immutable.Vector because it gave rando...
Taking a first crack at straightening out MixTy...
Renamed definedVars to deepBoundVariables.
Added the concepts of "necessary type" and "suf...
Further iteration related to patterns and bindi...
More transitioning bindings to pattern vars.
Created PatternVarGroup to hold a sequence of p...
use arraycopy from Platform (for msil)
In the same way that raw Trees are giving way t...
Improving tracing output, and more code organiz...
reverted changes from r19034 due to jvm/sync-va...
made scala.collection.Vector create immutable v...
Finished the additions to RuleApplication.
Further centralized all temporary variable crea...
fixed another npe in VectorIterator
fixed npe when iterating over empty vector
fixed WrappedString issue from last commit
Starting the process of properly encapsulating ...
initial checkin of new immutable vectors
Breaking down the matcher's various Mix* classe...
Don't fold List.apply() to Nil in presentation ...
Amazing how much code becomes unnecessary when ...
merging msil (r19001) compiler changes to trunk
removing jvm5 stuff from trunk, now in branches...
Moved yet more stuff out of ParallelMatching, a...
Make the positions of the children of an Import...
Reworked exhaustiveness checking yet further, a...
1) Removed a bunch of unnecessary calls to the ...
Definite fix for #2060; fix for #2392.
Renamed identifier pats to pmatch to reduce amb...
Looked through the .disabled tests which are st...
removing msil from trunk.
Switched to using .narrow where possible instea...
scalap re-added to distribution packaging section.
Finishing up a bit of treegen I had left in mid...
Mostly, a pile of pattern matcher tracing code.
Disabling another test trying to unhang the tes...
Retains Import nodes until the typers phase so ...
Accidentally checked in a not-quite-working test.
Daily switch of optimised nightly.
Moved a pile of passing tests from pending to f...
More revealing error message for the crasher in...
Getting variable binding bits into appropriate ...
Pattern matcher starting to look like code you ...
Exceptions are part of the protocol between the...
Disabled an actor test which is hanging the tes...
Restored type of receiver in OutputChannel and ...
Reactor uses Executor-based scheduler that does...
ForkJoinScheduler only adjusts pool size when a...
Debugging code - pattern matcher activity tracing.
Set encoding to UTF-8 regardless of system defa...
Importing the jline sources, since it seems to ...
Restored original project files
Project files
Patch from Mirko Stoker to add comment nodes to...
Test case for #1357.
fixed #2421: checkBounds in typedImplicit0 to f...
test for #1355, which has been fixed earlier
Test case for #2175.
Another day of pattern matcher work.
Test cases for some tickets fixed by recent arr...
Reverted the BigDecimal implicits added for tic...
BuildManagers weren't deleting invalidated clas...
Test case for #298.
More run of the mill pattern matcher work.
Test case for #1609 and the first half of #2361.
Inching some more complicated and confusingly r...
Reaping the spoils of patternization.
Temporarily reverting r18863
Moving pattern related logic into Patterns and ...
Enhanced the previous string length fix to work...
Raised maxPrintString for repl output.
Applied patch for #2306 ... thanks!
(Partial?) fix for #2289.
Pattern Matcher Productions is pleased to annou...
Some trees make a nice smooth transition into a...
Introduced type as well as value Sequence in pa...
Sequence->Seq
Commented out some position assertions which ar...
Bit by bit, the ad hoc tests and transformation...
Patch from Mirko Stoker to add positions to Mod...
Most of this big patch is organizational, but t...
Misc.
Test case for #2030 and #2056.
Re-enabled optimized nightlies
Actors waiting in receive search for messages o...
meh.
fixed #2208
fixed #2101
missing test cases for #2261, #2293, #2421
Removed spurious comments
Enabled 1.6 optimizations in ForkJoinPool.
Yet further encapsulation in the pattern matcher.
Copied 1.5 backport of ForkJoinPool to jvm15-li...
Removed LightReaction. Simplified ActorTask.
improved documentation
fix #1484
fixed #2311.
fix windows / ibm nightly
The sort of pattern matcher commit which makes ...
improved annotations copying (documentation, mo...
More pattern matcher massaging.
Removing Tree => Pattern crutch implicits as pa...
minor cleanup of fix for #2316 (by retronym)
fixed #2316: No longer cache entire SearchResul...
Equality tests emerging from the pattern matche...
A couple minor tweaks I missed in the last patch.
Back to work on the pattern matcher.
Lazy fields null out fields that are used only ...
fixed up tests
refined implicit resolution.
My workaround for the negative chars didn't work.
Modified build.xml so the -optimise argument wi...
Rebuilt jline with http://bugs.jython.org/file6...
For for an XML bug I accidentally introduced in...
Changed OffsetPositions to say something useful...
add @since annotations
fix typo in tag name
more @since annotations
add @since scaladoc tag to scala.annotation.*
More accumulated XML work, including removing s...
Short/Byte/Char/Int scrutinees will now be comp...
reverted 'doArg' change made in r18738, removed...
Reverted r18215 at martin's request.
Collections refactoring.
Small adjustment to Directory.
Some more XML work as I prepare to deal with th...
fix build
copying of field annotations can now be control...
Initial build files for 1.5 build.
This patch represents breaking out bits of code...
Equality logging keeps taking me inside XML fil...
Tightened access modifiers in Reactor and Actor...
Introduced actors package object to deprecate a...
fix #2390
fix for #2382
Removed another dead file.
Removed dead code, some useless Id tags removed.
fixed #2290 and #2325
Moved SingleThreadedScheduler from scheduler ba...
More proper fix for #2379 (single-threaded acto...
moved sortWith from Iterable to Sequence (becau...
pack200 ant task will be used for better compre...
Taking a stab at the cause of some nightly fail...
Test case for #1309 (fixed in Array rewrite.)
The results of examining many instances of !!! ...
Created a copy method for Elem like the one whi...
Some more XML reworking.
Proxy.equals catches null case (fix for #2366)
Removed redundant method isValueType.
Removed StringVector and all uses thereof.
drop svn:executable from *.scala
Some duplication elimination in partest.
Rather surprisingly, after all the commotion ab...
Support code I need for certain equality strate...
Really fixing the build now.
Finished re-integrating mutable collections.
fixed doArgs (Settings.scala) and loadFrom (Plu...
improved patch from james matlik
Attempt at fix for lift crash on 2.7.6
fix for a nightly build problem
Attempting to widen the field of possibilities ...
Various tweaks to give us relief from those fil...
Removed 150,000 unnecessary boxings.  Interesting
Altered replacelocker target to replace locker.
SABBUS now builds FJBG, which sources are now p...
Changed vt-warning workaround to enable the set...
Re-enabled the self-type check which was breaki...
new arrays are done.
Attention drawn toward MarkupParsers, I found I...
Working around a mysterious bug which was expos...
Exposed a bunch of java 5 Character methods thr...
Physically moved ForkJoinPool to scala.concurrent.
new starr, with some changes to varargs handling.
Not sure why my jars are being viewed somewhere...
An enhanced scalacheck with new powers (includi...
Added some more scalacheck tests to list, incid...
The first working scalacheck test! Now Arbitrar...
Cleaning code: removed unused methods, type lit...
Temporarily disabled the check which is breakin...
New and possibly even working scalacheck jar.
fixed headers/comments/svn props, made some pro...
Workaround for by-name/implicit/default clash d...
Proposed (ideally destined for improvement and/...
Added -Ynewarrays option which generates new ar...
Preparing for array switchover
Resurrected the former contents of scala.io in ...
Made canEqual abstract in Product and only inse...
Split TaskRunner into FutureTaskRunner and Task...
Deprecated case classes inheriting from other c...
A bundle of small bugfixes to recent patches.
fix #2268
Make sure that last fix is only applied in inte...
making nightly non-optimi(s|z)ed for now
Missing files from last checkin
Massive redesign so that: scala> "hi" == "hi".r...
Try harder to preserve type information in inco...
partest now also uses -optimise to compile tests
made my changes actually work :)
- support optimised build with "build.optimise"...
Unbreaking the plugin.
Generalized -Xdisable-assertions into an annota...
Applied patch fixing #2306.
Created plausibly sensible equals and hashCode ...
If a ControlException propagates to the top of ...
added a few @serializable annotations, added @S...
Reenabled two tests.
Updated disabled tests before moving them back.
Reintegrated DoubleLinkedList, SynchronizedBuff...
Slight tweak to positions of dealised terms.
Reverts scala.io.* to its natural state, and th...
Converts some "lazy vals by hand" (probably pre...
Created NoStackTrace trait and mixed it into Co...
Removed custom UTF8 encoding implementation, de...
Minor refinements to recent patches, and the re...
some changes and additions to move to new arrays.
Sabbus can pack locker as JARs, for use in IDEs.
Getting docs.comp building again.
Rewrite of the actor MessageQueue, adding a tra...
Added an alias for '-optimize' and fixed the op...
fixed #2266 (partially) and #2305
Moved test case for now-fixed #2027 into files.
A few minor bugfixes for recent work.
Since I began using scala I have sought an appe...
Further organization of File/Path/Directory.
Changed createDirectory and createFile to accept a
Factored the InputStream-based implementations ...
More cleanup in nsc.io, and a toByteArray() met...
patch by james matlik: Enable ScalaTool to gene...
A true refactoring adventure as I attempted to ...
One more try to unbreak fsc all the way.
Unbreaking fsc with ensureDirectory().
Modernizing bits of scala.tools.nsc.io and incr...
Brushing some of the cobwebs off the denizens o...
Starting some cleanup deeper in scala.xml in th...
Further work creating pure interfaces for the c...
Unbroke the build, sorry about that.
A little smoothing the last patch with codecs a...
Large Path/File/Directory checkin.
Blessing Iterator with another method from the ...
Test case for #1560, which was fixed sometime in
Some notes on the random shuffle implementation.
Tightening the character range in random string...
A few cleanups, and toXXX methods for BigDecima...
Moves sorting into Iterable, and adds a conveni...
This is the beginning of a preventative effort ...
Moved zip/zipAll/zipWithIndex to Iterable and a...
Added a times method to RichInt.
Opening, experimental implementation of StringV...
I hope to have fixed the optimized build.
A bunch of cleanups around Ordered & Ordering, ...
Removed some code which has been commented out ...
Put a default for ANT_OPTS in build.xml.
Test case for #2250, which Martin fixed in r18589.
error messge when ANT_OPTS is not set
added manifests to most parts of standard libra...
Removed debugging println
Swapped some Eithers around to try to get every...
Removed ComparableTraversableOps and NumericTra...
Exposed stdin as a PrintWriter.
Initial implementation of scala.io.Process.
Some functionalization achieved while trying to...
Tail recursive foldLeft for Stream.
Really fixed #2294.
Small tweak to nextString to unhose the distrib...
Added nextString(length: Int) to util.Random.
new starr with class manifests
Added 'foreach' method in Stream that is tail-c...
fixed io test on windows
fixed #2291
using ANT_OPTS as jvm arguments for scalacfork
new starr with better Manifest handling
Added Console.setErr and Console.withErr methods.
another missing file, sorry.
checked in missing file.
Refined manifest checking in preparation for ar...
updated checkfile for neg/viewtest
another starr, based on r18539 and Martin's cha...
fixing bootstrapping problem wrt removing ident...
Taking a little more advantage of some recent a...
Generalized pattern matcher generated null test.
Tweaked a concurrent.ops method to adhere to th...
Cleaner sameElements implementation for linear ...
Some minor logic simplifying falling out of equ...
Numeric implementations for Short and Byte now ...
A few straggler deprecations with straightforwa...
These might be the last of the deprecation warn...
Deprecation patrol continues patrolling.
Deprecation patrol.
A few minor documentation fixes.
The fruit of a bunch of iteration on Iterator.
Better scaladocs
Reverted r18344 as it is interacting badly with...
in the end had to disable conforms as view in t...
second try to get a starr that can compile the ...
replaced the implicit `identity` coercion by `c...
fixed build problem
added partial manifests (now called manifests),...
Applied some of Kevin Wright's patches.
Revert several commits related to implicits/predef
improved previous fix for implicits and `conforms`
Gave spawn and future a default implicit to add...
Reverted the just committed starr, which can't ...
New starr based on r18525.
backed out changes to Predef, as they need a ne...
replaced the implicit `identity` coercion by `c...
qualified references to super methods are no lo...
A couple super useful partial function methods ...
[rev:Adriaan] dummy implementation for update t...
added missing file
reverted bad checkin
Added #:: extractor for streams to package.scala
removed failing assertion.
intermeidate step towards manifests for arrays
Put scala-library.jar back on the boot classpath.
Adjusted timeout in partest to get rid of spuri...
Handled a dozen or so deprecation warnings.
Added file; I forgot before and it broke the build
A bunch of cleanup on scriptrunner and fsc perf...
removed t1701 from pending as it's now in files.
fix for #2264
Skeletal exploratory implementations of
Added bytes() method to File.
More fleshing out Codec.
Updated BufferedSource to use Iterator.continua...
Added Iterator.continually, because
Added two new methods to Iterator, each of whic...
fixed typo #2263
Various work on Codec/File/Source getting it in...
Adding more and fleshing out convenience functi...
Test in pending for #2261.
Restored missing pieces of some of my patches w...
Restoring tail recursive version of List.dropWh...
Improvements in positions assigned to expresssi...
A variety of work on scala.io.{ File, Source } ...
1.
Polished up some disabled tests and returned th...
fixed check file
Blocks can now end in definitions.
improving fix of #2246: optimised isDifferentTy...
add @since scaladoc tag to scala.* types
drop svn:executable flag from source files
fixed #2251
fixed #2246 type checker looping on pos/contrib701
fix for 513: use deep ForeachTypeTraverser in d...
Test for #1381.
Test case for #1044.
Test case for #612.
Adds Source.stdin convenience method.
new test for #1642
Mixxsing checking for fix of #1642
fixed t1705.
Revert "fixed #2208"
fixed #2208
fixed ticket #2197
Implemented #2191.
Applied patch for #2150.
Applied patch for #2145.
Added the scala.concurrent.TaskRunner and scala...
Re-enabled forwarders and moved the formerly fa...
Deleted IDeSupport.
More work on build manager.
Added notification to BuildManager clients of f...
hooks for scope completion; background presenta...
Build manager now clones only symbols that were...
re-organized Namer.methodSig; verified for corr...
fixed positions when using named arguments
more fixes for positions
Small refactoring to remove code duplication.
When both updating and removing, don't build tw...
Added 'removed' files parameter to the update m...
Allow IDEs more control over a BuildManagers co...
Better docs for positions
rewrite of positions in compiler
fixed ticket #2211
A couple more positions issues caused by the pa...
Whitespace.
Reintegrated `ImmutableMapAdaptor` and `Immutab...
Changed toSet to return immutable.Set, addresse...
nested pacpakges for actor.wscheduler; fixed bu...
switch to unnested packages.
another attempt at fixing annotations printout
fixed a bug with defaults reported on mailing list
Commented brace patch output from parser.
Proposed fix to address #2165.
module settings changed
Enabled synchronous message sends for Replyable...
Made Replyable more general.
Enabled future-type message sends for reactors.
Added test for scala.actors.ReplyReactor.
Moved scheduler source files into new scheduler...
Added regression test for #2147.
Moved new scheduler classes into package scala....
Renamed outputchannelactor test to reactor.
Made daemon-actor-termination test deterministic.
fixed TreePrinter for annotations
The creation of scala.collection.mutable.Iterab...
Re-enabled snapshot for new ForkJoinPool.
fixed #2163
Test case for bug #1466, which was mysteriously...
Added test case for #1764 to the test case for ...
Removed some identical code from the collection...
Removed Vector's indexOfSeq method in favor of ...
sync
idea project files changed
Now that there's a KMP implementation in Seq, r...
Updated to newest revision of ForkJoinPool.
A start on a more comprehensive test suite for ...
scala> Vector(1,2,3) startsWith List("I am a Su...
scala> immutable.Vector(1,2,3) endsWith immutab...
scala> List(1,2,3) endsWith List(2, "I AM GOZER...
Scalac was failing if the path to the distribution
Altered some invocations of Array.copy to use c...
small improvements concerning positions and com...
New starr based on r18322, to better take advan...
Two small performance fixes which shaved 40 sec...
minor changes (Scala comments)
Added ControlException marker trait and update ...
Removed the accurately labelled combinatorold.
Faster offsetToLine
Enhanced repl based debugger to use manifests a...
made streams and views more lazy by always skip...
Added -Yide-debug option to exercise the intera...
Reverted last change.
Reinstated setContent.
Performance oriented rewrite of BatchSourceFile.
Trying to make typechecker faster by (1) new su...
Added ThreadPoolScheduler supporting managedBlock.
Making most of the symbols in Definitions into ...
More refinement on MixLiterals.
More of the same in the pattern matcher.
Implementation and test cases for canEqual meth...
The presently salvageable portion of my attempt...
I can no longer endure having one of the fundam...
Made NamespaceBinding a case class; addresses t...
Temporarily reverting r18237 on iulian's behalf.
More on the pattern matcher: continuing to give...
TextField installs it's listener lazily now
Annotations on type parameters are added to the...
Lots of work hardening matching on sequences.
minor change (Scala comments)
minor change (Scala comments)
fixed Scala comments, added svn:keywords
And more pattern matcher refinement.
More naming and commenting, some moving to more...
Implemented proposed strategy for #1503 and mov...
Made #576 output an error rather than crashing.
Interim fix and test case for #1434.
Removed a pile of gratuitous implicit parameter...
fix #2122, test for #2116
In an amazing pattern matcher breakthrough, I t...
Wrote a subclass of tree printer which outputs ...
Beginnings of a tracing facility for the patter...
Added the co- part of codec.
Added test for #1948.
Switched to ForkJoinScheduler as default.
Removed obsolete Scheduler restart.
refined range positions some more; eliminated A...
Searched the TreeBuilder bathwater for the miss...
Instilling a little consistency in the pattern ...
fix for #2116
Reverted treebuilder all the way to r18056.
Working on pattern matcher debuggability.
Creating case classes in preference to passing ...
added "diagnostic" to context.
More pattern matcher streamlining.
Winnowing down the pattern matcher into smaller...
Mostly rewriting Unapplies as I work my way thr...
minor cleanups for named args
Restored TreeBuilder to its only-deliver-untype...
Enhanced error message when a type error is bec...
More elucidation work on the pattern matcher.
A few residual DSL bits.
Eliminating some unnecessary code duplication.
Applied patches to fix the issues in #2074.
Applied patch to fix #2098.
Applied patch to fix #2104 and added test.
Working on the pattern matcher.
Reverted default parameters on RichInt range me...
Added test for #2031.
scalap changed to treat named parameters and pa...
Added default implementation for debug hover in...
fix #2103
Misc fussing with DSL details.
More of the DSL.
DSL refinement continues apace.
Refactoring of sender/reply, as well as !!, !? ...
Prepares a test for further changes in Reactor.
More fleshing out of code generation DSL.
ComponentResized et al moved to UIElementResized
Continued development of code generation DSL.
Misc cleanups to squeezing logic.
Gave a Source method a more precise name.
Made the value classes lazy vals rather than de...
idea project structure is reworked
Improved the refined build manager.
Removed unused Any_asInstanceOfErased and Any_i...
Hopefully fix for inadvertant stability failure...
Initial checkin of a code generation DSL which ...
New jline jar from mapreduce's generified jline...
added hoverInfo hook
better positions for ValDefs
small fix to named arguments
Partest no longer hangs when reporting fails.
Reverted attempts at inhibiting empty .scala_de...
The dependecy file is read only when -make is n...
named arguments only at top level in () paramet...
fixed bug in Parser and updated check files.
Skeletal implementation of scala.io.File.
Generalizations made in the course of evaluatin...
fixed variance bug; added smart brace insertion...
More work and documentation for GenericRanges, ...
Working my way toward a consistent interface fo...
Moving empty .scala_dependencies check around l...
* dialogs use named arguments now, messages are...
Some enhancements to Option to cover a variety ...
Some incremental steps on overhauling IO.
Made some minor adjustments to Stream, having d...
Put a stop to empty .scala_dependencies files.
Thread-based receive uses ManagerBlocker interf...
As Ordered now extends Comparable, so too should
Added test for #2060.
Removed what amounted to a no-operation in the ...
Attempted to resolve the improbable mess surrou...
Added test for #2034.
Added test for #2079.
Added test for #2078.
More equality shenanigans.
Created DelayedLazyVal for your def/val hybrid ...
Exposing more identifiers for tab-completion.
improvements to names / defaults (implicits, ty...
Added jline as optional dependency to scala-com...
Removed some useless type arguments which survi...
Support for specialization on explicit types.
Created scala.reflect.Invocation, which offers ...
corrected some typos
Specialization landed in trunk.
tweak to hashable.
Small fixes in code generation for interface ca...
(1) some changes to interactive compiler interf...
Removed some useless files which declare themse...
working on dep manager.
fixed some deprecation messages.
Adds @experimental annotation to lower the acti...
Newly generated Tuple/Product/Function classes ...
Close to complete rewrite of genprod so it's ea...
made Hashable use a Seq instead of List.
More work on all the collection proxies.
cleaned up eta-expansion of partial named appli...
added headers, svn keywords, updated pilib exam...
Added tests for #2027 and #2030.
An attempt at reintegrating MapProxy.
allow using named / default arguments in self- ...
- fixed #2057
Moved test for #1801 to pending for offline bug...
Switched back to ThreadPoolExecutor.
Loosened tab-completion requirements so one can...
A RichClass for the java side which offers type...
Lots and lots of BigInt and BigDecimal code att...
more annotations cleanup.
Trying to bring BigDecimal all the way up to sp...
Added some missing methods to BigDecimal.
Test case for #252.
Minor cleanups while I evaluate rewriting the p...
minor annotations cleanup
removed debug code (revert r17767 and r17780)
A couple findbugs inspired bugfixes, and a new ...
Finally unbroke statics tab-completion.
Added a series of pending test cases.
Comparing equality of settings works better.
Use `keySet' and `valueIterable' to get keys an...
made bean getters/setters non-synthetic (-> acc...
Tightened up XHTML minimization logic - closes ...
fix annotations test
fixed BeanProperty, added BooleanBeanProperty, ...
Include 1.5 backport of Java 7 ForkJoinPool.
Altered GenericRange contains to do something l...
Spoke soothingly to msil.
just converting tabs to spaces to make upcoming...
towards fixing msil.
Added the much clamored for toSet to Traversable.
removed code for parsing old pickle format.
Abstracted XML loading interface into xml.facto...
Another big XML commit.
Working around failing names-defaults test.
fixed some problems with positions.
Moved NameTransformer from the compiler to the ...
More XML logic smoothing.
Massive XML simplifications.
"Map.values" returns a sequence instead of a set.
named argument disallowed when assignment expre...
reverted 17960, restored bug1241 w/ new check file
Reverting 17948, disabling test.
fixed (finally!) issue with JavaSerializer
Removed deprecation warnings.
Fun with subclipse.
bigger commit for 2.8 preview
Changed output error for bug1241.
Some work towards fixing ticket #2030.
Unpositionable children don't contribute to par...
pending test for ticket #2030
toString for TreeSet. Documentation cleanup.
Modify TreeSet to use Ordering instead of Order...
Moved test for offline bug fixing.
Renamed Reactor source file to match name of tr...
Allow the content of SourceFiles backed by inte...
New tests for exceptions and Actor.receiveWithin.
Renamed OutputChannelActor to Reactor.
Changed t1801.
Jumbo sized rewrite/cleanup of SymbolicXMLBuilder.
big overhaul of annotations implementation.
Null check on RichString->String implicit.
Minor duplication removing refactoring.
fixed MSIL build and added ".scala_dependencies...
Named and default arguments
Endless exploration of exception handling synta...
Exception handling approaching platonic ideal.
Continuing to refine exception composition.
first attempt at command completion; more fiddl...
fixed  failing test affecting bug1960.
Added long-running memory-leak test for Actor.
Decreased memory consumption of test for #1801.
rest of last commit
Added method to remove compilation units when t...
Implemented #2009.
minor twiddling with position.
More efficient 'clear' method.
Refactored the existing dependency tracker and ...
Riffing off the removal of the cldc library, re...
"scala.Random" has been deprecated since 2.7.2 ...
Removed CLDC library, since we've stopper suppo...
Added test for SchedulerAdapter.
Re-enabled SchedulerAdapter.
Improved SimpleExecutorScheduler with non-leaki...
more work on the interactive mode.
Patched up failing test case.
Further development of the Numeric and Ordering...
Added a sequence shuffling method to scala.util...
checking in forgotten file
More precise local variable ranges
fixed package objects for MSIL
more work on rangepositions.
Implements feature request #2008.
fix for #1660.
Now for real: added OutputChannelActor.
Simpler log message for daemon actor test.
Added test for OutputChannelActor.
Added OutputChannelActor.
The classics never go out of style: reintegrate...
Added test for Actor.exceptionHandler.
Added exceptionHandler method.
Added test for #2000.
Commented instance vars of Actor trait and comp...
Deprecated "elements" method moved to "Iterable...
Reintegrated PriorityQueue.
In "Iterable" and in all its subclasses, "itera...
Added interpreter binding for "lastException" w...
Put exception unwrapping back in interpreter as...
Added tests for #2015.
Implemented #2015.
Moved actorgc_leak test to pending, because it ...
Added test case for #1801.
Logic error in Traversable; fixes #2002.
Also reverted r17803 (msil build script)
Reverted r17792, which caused unexpected Window...
Reverted bogus fix.
Reset the tree as well ...
Not quite complete reintegration of a handful o...
Moved the script related classes from scala.col...
Not sure why the disabled test did not get comm...
removed deprecated files; more changes to repl.
disabled to failing tests for now.
Dummies to please our MSIL overlords.
new test repl for interactive mode; bug fixes
A big yet interim patch emerging from my attemp...
fixed build problem
added Synthetic Positions; refactored interacti...
moved internal exception out of a syncvar catch
SyncVars now return Either with a Throwable
Export new packages; minor updates to interactive.
new starr based on r17810.
added missing file; hope we are done now!
rest of collections check-in
added SynchronizedMap; changed Set.put to Set.a...
new presentation compiler design
Modified UniqueTypes not to interfere with thei...
Case classes use product prefix instead of clas...
Removed obsolete isDetached flag from Actor trait.
Added SimpleExecutorScheduler which does not te...
Implemented #2012.
Unbreak the build.
some documentation; statistics wrt implicits; n...
new presentation compiler Global
Added JDK 5 Executor-based schedulers.
Make sure the symbol for the implementation cla...
sabbus fix to only use scalac ant task
KMP implementation for StringBuilder and test c...
Added java.lang.String's other format variant t...
Unreasonably satisfying patch which sets immuta...
Replaced ExitActorException with SuspendActorEx...
Updated neg check files to the new output of r1...
more debugging code for teh NoSuchElementException
Added :silent feature to disable automatic toSt...
Added support for AbstractFile subclasses other...
small modifications to collections.
Reverting 17770 - right, that is what "map view...
Test case for #715.
Modified filterKeys to return the same type of ...
some temporary code to find the bug (NoSuchElem...
Added support for multiple output directories (...
Cleanup in aisle scala.util.automata! And fix f...
Switch over to new scanner/parser.
restored size change, unintentionally reverted
Removed leftover reference to "jvm5tests".
Updated documentation.
fixed .net build
Bumping up scalacfork.jvmargs to make 64-bit VM...
Added sequence control for multi-file tests.
Restored xml test cases to unminimized tags
Creates XMLOptions configuration object to addr...
1.4-related cleanup and reorganization.
Removed further 1.4 vestiges.
Calmed down grudge-holding packrat test case.
Minding our ps and qs in the packrat.
more collection cleanups and better docs
more collection cleanups and better docs
some minor cruft removal.
Obeyed another todo directive.
Obeyed comment attached to checkMalformedSwitch...
Further stability test failures will be fatal a...
Removed plus/minus/fromOld
cleaned up collection builder framework
Added to/until methods to RichLong and BigInt.
Sabbus "clean" cascade also includes libraries ...
Disabled "natives" test because its annoyance /...
Optimiser-friendly changes to Range for more ef...
Various improvements to the optimiser: more agg...
Removed what I believe to be accumulated cruft ...
Reinstated old, trusted starr from r17713.
Tentative fix for both #715 and #1896.
New starr based on r17717.
Reverted overconfident patch for #715 while I f...
changes to maps and sets
The compiler will complain when trying to
Test for default Ordering implementations.
This patch includes the following:
Reverted probably unintentional change to Enume...
Patch for #1970 (submitted by jeortiz).
separated mutable and immutable maps
Cleaned up format a little further now that .to...
docs update
Rebuild all plugin tests and moved them back to...
Removed redundant type parameter for class Buil...
Organized disabled directory so it works with p...
finitized an infinite loop in sameElements
Small change to Stream so force wouldn't always...
Explicit locking on Symbol creation so multiple...
Further refinement of fix for #1960.
fix typos: wrong < chars in scaladoc
make all scala source files not executable
Being deprecated is no reason to count from -1:...
4 out of 5 spelling bee champs say: Traversable
temporarily disabled stability test to make bui...
massive new collections checkin.
optimized build fixed
epic MSIL hacking - Array compiles.
Modernized DRMacIver's languishing array patch ...
added emtpy stub of PackratParsers for msil
DBC: replaced all-encompassing catch with prope...
Removed java 1.4 charset workaround and a stray...
Modified ObjectRunner to use Extension classloa...
tweak to compile under java 6
Added NoSuccess extractor to combinator lib.
packrat parsing
MSIL is built as part of Sabbus, working at last.
MSIL is built as part of Sabbus, take 3.
MSIL is built as part of Sabbus, take 2.
MSIL is built as part of Sabbus.
undid accidental checkin of nsc.doc
Scala decompiler test suite added
new collections snapshot
BigDecimal: mark methods appeared in 2.8
util.Random @since 2.8
StringBuilder helper function to reduce lots of...
fixing what looks like a problem in ParallelMat...
making the backend work for new as well as old ...
some cosmetic changes to make it compatible wit...
Updated README to resemble reality.
caught corner case for interpreter commands.
Synced src/dotnet-library with rev 17621 of src...
remedied a logic error I accidentally introduced
Renamed overloaded toString variations througho...
Pulled inappropriately output-producing method ...
Implemented convenience methods for Xhtml as de...
Modifications to the 10 failing test cases to m...
Patch for #1118 applied
Factored common interface of UnprefixedAttribut...
restoring unwisely removed toString variant.
Some minor cleanups made in the course of looki...
continuing fix for #1626 into trac comments
fix for #1712
Two minor findbugs-discovered logic errors I've...
Reimplementation of XML encoding heuristics fro...
Removed various now-unnecessary java 1.4 workar...
added isInstanceOf/asInstanceOf to repl completion
Further fix to r17585: less hacky implementatio...
New Starr
Removed outdated test infastructure.
Minor refinements to pull parser, plus fix for ...
Added a MissingRequirementError variant of Fata...
Updated scaladoc to show now using jvm box cache.
Rewrote XML pull parser using exciting modern t...
removed Namers.scala.1 / .2
Calling "ant newlocker" will actually updated a...
fix for #1594
fixed inadvertantly busted icode printing
Removed redundant scala.tools.util.UTF8Codec.
Restructured Enumeration to have many fewer pub...
some small changes to implicits handling, exist...
Backward-compatible extension of the signature
Changed Flags object not to inherit from Enumer...
Added test for java signatures
removed deprecation warnings
add serialization test, disabled patmat debug t...
Tightened checks for ScalaBeanInfo field selection
Fire when combo box selection changes
Added SchedulerService class that allows subcla...
Temporarily reverted r17501
Propagated fix for #1882
Added test for #777, by Alex Cruise
Removed non-deterministic test.
Hopefully fixed #1599, removed apparently stupi...
added painting demo by Frank Teubler
Bug 777: Applied Jamie's patch
Completion roadmap comments.
Improved error-handling using futures.
Made constructors of top level objects private
Made Future's InputChannel for useful, especial...
Modified all boxing methods to use java.lang.{P...
Path completion! You can now say...
Expanded set of completion delimiters; filter o...
Improvements to repl completion.
addition to last checkin.
fixed #1775 by making all anonymous functions s...
Forgot test
Setting the source module of RootClass.
a new starr, which will hopefully cure nightly'...
Today's frustration commit! Disables all forwar...
Suppresses variance checking in type aliases; e...
Moved static forwarder generation behind -Xforw...
A new fix for #1240 which might actually meet t...
Removed all traces of ByNameFunction
Pending test for #1840
hopefully fixed problem in overloading resoluti...
changed overloaing resolution to make Builders ...
Pending test for #1836
Library part does not build unless on java 7 wi...
forgot to save last changes
Code to support invoke-dynamic for structural t...
fix for #1833
fix for #1837
Correcting equality behaviour on IntMap.empty a...
some more msil stuff.
fix for #1804
reverting my previous pointless change and movi...
Generate java signatures for private members as...
scalac ant task now supports @argfile (needed t...
Added test files for #1789 and #1761
fixed msil build; currently exclude new collect...
fixed ticket #1813 (BigDecimal implicits)
reimplemented list union/intersect/diff as mult...
chyanged implicits so that implicit Builder pat...
Removed passing test for #1107 from pending; a ...
The birth of the @switch and @tailrec annotations.
Various cleanups and redundancy-removal related...
Better inference for implicits; some preparatio...
Incomplete fix for bug #1240.
added missing Implicits.scala file
Let package object members override package dir...
fix for a typo which had disabled -Xshow-phases.
Modifies try/catch/finally to allow arbitrary e...
Miles and I agreed it is not sensible for the c...
More consolidation and duplication elimination ...
Minor changes to support the Eclipse plugin.
apparently ant might pass an empty string as an...
A big cleanup of Settings code.
Bytecode generated for structural calls is impr...
Making very repetitive Settings code less repet...
Adds debugger-like capabilities to repl.
Code generation will keep the order of then/els...
added partest.properties to jar
Refactored a pile of duplicated Properties code...
updated svn keywords
removed deprecated warning, updated svn props, ...
modified JAVA_OPTS setting
instantiate top only once
made unsafeTypeParams transform infos less eage...
Removing the rest of what turned out to be an
Changed linkedSym to use rawInfo rather than in...
sync
Changed the build file so that stability test
Reverted a small parser change which had the un...
Another big Interpreter patch, this one mostly ...
Removed most of the assertions from NewScanners...
Major interpreter cleanup.
updated svn keywords
updated detach phase
Removed call to normalize, which fixes crashes ...
Iterable no-arg mkString changed to call mkStri...
Test cases for #1745.
Created separate -Xprint-icode setting so using...
Moved *withinZero tests to pending
more scaladocs for swing
Reverting last commit as it seems to have cause...
Altered 2-argument versions of Predef's assert,...
Removed $tag method from ScalaObject and rebuil...
Temporarily suppressing generic signatures on s...
removed deprecated for-loops and units
removed deprecated for-loops
fixed several problems with cyclic references u...
fix versionString scaladoc
added a hook for annotation checkers in Typers....
Continuation of r17177 to also check type annot...
When inferring a type is scala.Whatever, have t...
scala.util.Properties: release InputStream afte...
scala.util.Properties.versionString: fix defaul...
Proposed fix for #1735; may need refinement, bu...
Look for main method in companion object and ad...
supplemented lacking documentation for sameElem...
Improved error messages for certain illegal ove...
Issue warning when attempting to refine Unit, p...
Removed obsolete methods and simplified handlin...
fix for #1721
Test for #1711
documentation fix, bug #1487
merged changes from maven2 branch (include scal...
Eradicated bug #1711
Began evaluation of the tests in pending, and m...
hopefully fixed the build by fixing deSkolemize...
Added -make flag and supporting functionality f...
removed generic/mutable, generic/covariant pack...
new version of collection libraries
Allow newlines between modifiers and declaratio...
test case for #278
terminated infinite loop in typedTypeApply; see...
A few more very minor fixes based on input from...
widened access check for readResolve to include...
Alters four meaningless equality comparison dis...
Generalized PhasesSetting to accept "all" as a ...
fixed bug #1535, added test case
rewrote an infinite loop spotted by findbugs to...
managed to move timeout.scala the whole way int...
moved timeout.scala back to pending and documen...
Add recognition that null.isInstanceOf[T] is no...
moved most of the passing tests from pending to...
Removes underscore from the list of characters ...
version file added
map page updated
added test for 1691
fix for #1691
added build scripts for scalap
added pending test for #1701
repaired init order issue with the fix for #1602.
existential error message changed to agree with...
annotation removed now - for real
Remove type annotations as part of SIP 00002 an...
Minor refactorings and a little bit of document...
Removed some redundancy in parallel matching (m...
Inelegant fix for bug #1602; will revisit.
Script errors are now reported at the correct p...
lazy values in repl are now handled uniformly (...
Adds Interpreter.reset(), a fast method for res...
lazy values in the REPL are now evaluated lazily.
The changes made to the scaladoc tool also need...
added support for Strings, arrays, sets.
Missed some files.... but how ?
Test that make sure the implementation in SIP 0...
Updated example compiler plugin for SIP 00002
Compiler implementation of SIP 00002 and fixes ...
Project-specific settings no longer required.
Applied patch from #1684.
Added test for #1652.
Moved react/receiveWithinZero tests to pending ...
updated check file
Deprecated new Array(...) syntax for dimensions...
1.
Changed typing of if-then: Missing else is now ...
added optional manifest
added support for strings as collections in 2.8
added optional manifests
break and continue now both go to a breakable b...
scala/trunk/src/compiler/scalax -> scala/trunk/...
scalap modified for correct object printing
Whenever an actor is created it inherits the sc...
scalap modified for correct case classes printing
ActorGC is no longer a global object; each sche...
Added test for #1659
fixed #1651
fixed msil library: exception in TypeBuilder no...
merge from maven2 branch, add licensing info to...
Removed obsolete field.
Cleaned up addition of serializable annotations.
scalap classes added
renamed util.control.Break to Breaks and added ...
cleanup
test commit: IntelliJ project files added
Added a test for #1618
Applied patch for #1618
Updated (all) copyright notices to 2009
fixed #1269.
parses syntax for package objects
removed colelction.generic.nonvariant
reuse run method from superclass
Updated copyright notices to 2009
fixed erroneous cyclic reference error conditio...

fixed ticket #1620
fix for #1603
Add tests for zero timeout in reactWithin and r...
Make semantics of zero timeout in reactWithin a...
#1598
Add debug option to partest ant task.
fixed two problems of msil build
Bumped bundle version.
added comment.
splitted BigDecimal class for Java 1.4
Use Thread.getState() instead of timestamps to ...
Remove obsolete TickedScheduler class.
Avoid collecting race in memory leak fix
Remove race condition when linking/unlinking.
frames can be centered on screen now
Compilation of ApplyDynamic to reflective metho...
One more thing: a 1.4 compatible jar.
One more thing: The JVM backend updates for inv...
Added experimental invoke dynamic support (JSR2...
switch to new initialization semantics.
fixed #1364 (overeriding vals in traits)
updates to scalax collections and standard libr...
disabled one test on Java 1.4
corrected check file
added comments; better errror messages; trace u...
All the SIPs have beem moved to the lamp-sip di...
Added example for List.flatten (see #909).
removing Marshal and dependency on java.io in s...
fix for occasional fsc silent quitting
Unchecked stable should have been in annotation...
ant: use copy instead of copyfile
Merging everything from the 2.8.x development b...
added manifest tests and util.Marshal
added uncheckedvarianceclass
fixed #1438
Adds language and country settings forcing them...
added uncheckedVariance annotation
Added back jvm args for the optimised.test target
Added optimised.test target
Built a new STARR for those people that want to...
Iulian says I should delete these.
Added back test for #1453.
Oops.
Moved failing test to pending for now.
Interpreter test now only works on 1.5 or above...
new failing tests
Applied patch from #1505, modified supplied exa...
scaladoc now correclty links to swing sources
Applied Paul's patch for #1380, moved test out ...
Starting on improving the abstraction level of ...
Corrects classpath
Converted conpountType to infixType in legal cl...
minor cleanups (leading tabs, Unit, etc.)
Tests for ticket #1503.
fixed #1500 and #1501
Reversion of the changes to targetParams which ...
Test for ticket #1480.
Separating out a single Binding from a collecti...
General tidying from paul (mostly concerning us...
Some code cleanups from Paul.
Paul's fix for bug #889.
fixed two more errors in README.

Updated README
Flattening the hierarchy in parallel matching a...
Deprecate jolib in preperation for removal.
- make "latest" symlink in dists/maven
Reverting my previous changes as they seem to b...
Removed Ysqueeze as it was another dubious opti...
Created a pending test for #1380.
Clarify that the condition/problem is really ab...
Stripping out casetags.
General code cleanliness. Nothing too exciting.
Large iamount of tidying up, mostly from paul.
added location and icon methods to Frame, impli...
fixed "script" tests on Windows (Cygwin+DOS)
Added jar for ScalaCheck tests.
propagating to trunk fix for #1463
Test from some of Ismael's tickets.
Moved jvm5/t1464 and pos5/ilya2 from pending.
.dll generated with Visual C++ 9.0 Express Edit...
fixed #1460, #1467
Java parser handles final modifier for types.
merged work from maven2 branch into trunk
Applied Paul's patch for #1467.
Martin's tests for mixed Scala/Java.
Test cases for some of Martin's fixes.
fixed #1461,#1464
updated ScalacFork ant task to accept arbitry a...
Added a test for a variant on ticket #425, as i...
Improved 'optimised' target.
Minor control flow tinkering.
Make ParallelMatching's indentation not be a lie.
Apparently this test *hasn't* been fixed.
Added a test for #1107.
Minor cleanup of my last change.
Another test case emerging from paul playing wi...
Test case extracted from Paul's broken patch fo...
Made anonymous classes non-synthetic.
Reverted change made to fix #1375.
oops, worked on branch, merging back into trunk
added javax to known package prefixes, so scala...
I feel like I should be waving a dead chicken w...
Modifications to pattern matching to allow the ...
Added pos5 tests to test.suite target.
Moved test requiring 1.5 javac/jvm to pos5.
Added handling of pos5 tests.
removed hidden char in 1st position and leading...
Random cleanups eliminating ListBuffers.
Tidying up the control flow in applyRule.
Random hygiene:
General code tidy ups.
Made DBG call by name.
Ditching debugString(s).
More from Paul.
Another pile of paul phillips's pattern match p...
Improved log file output if javac fails.
updating version number and starr to 2.7.2.RC4
Improved error output in case invoking javac fa...
added some swing scaladocs
Added firstKey and lastKey to IntMap.
More code cleanups from paul.
More code shrinkage.
Test to check a few combinations of pattern mat...
while => map2.
More dead code removal.
More code cleanups.
More code cleanups from paul.
Switching getDefaultRows over to a defaultRows ...
Patch from paulp to tidy up MixLiterals.getDefa...
Minor edits - primarily comments and code removal.
Removing the mixed use of Set64/ sorted List[In...
Minimized the test - one case, a default and 64...
Test case for large case statements (similar to...
Cleaning up a lot of dead code from regular exp...
Tests for #1450.
Removed a bunch of dead code from CodeFactory (...
Working on bug 1423.
Renamed the tests for ticket #1423 so they have...
Added some more tests to check edge cases of ma...
Making ParallelMatching a little less obnoxious...
Correct handling of unreachable code testing wh...
Ported recent partest fixes in 2.7.2 branch.
Added optimised compiler target.
Finally fixed #906 (quick/bin/fsc does not work).
added javac.cmd argument to 1.4 partest calls
reverting the unwanted parts of my last chekin..
the ant tasks 'four-test' and 'fourfour-test' (...
fsc watchdog removal.
added test
fixed #1214
fixed #637 #1070
Changed the way in which the path to javac is p...
fixed #1428, plus stopgap fix for #1438
new tests in pending
removed new collections library from here.
fixed package clause
Applied some of Andy Hicks' patches
initial collection library fragments
minor change (getProperty)
A couple of hardening changes.
Added stringOf to ScalaRunTime.
Contributed fix for #1416
Reverting fix/test for #1404.
Use JAVA_HOME for finding javac.
fix List.dropRight scaladoc
added patch of #1335
copying 'scala.testing.Show' from 2.7.2 branch ...
. scala.swing api is now included in the main api
Use different exit code by default.
Improved error reporting when running external ...
Partial fix for ticket #41.
this-types are never volatile.
Removed unnecessary "getHostName()", see ticket...
Tightened volatile checking.
Moved test for #1409 from pending to pos.
Re-enabled multi-file tests for ant pos tests.
Moved failing test t0699 to pending.
ant task for partest now supports multi-file te...
fix, as suggested in #1418
updating starr to 2.7.2.RC3
Reverted removal of TreeSet to fix stability.
fix 1106 (Windows issue)
Added test for #453
added test case for t1409
attempt at fixing t1409
Moved successful tests from pending.
Moved brittle timeout test to pending.
Test for #1391.
Needed parens because the precendence wasn't wo...
Eliminating unnecessary data structures.
fixed problem with plugin build caused by assig...
removed leading tabs
Added test for #1390.
Replaced TimerThread with java.util.Timer.
added META-INF folder to sources tarball
updating version number and starr to 2.7.2.RC2
Boot class path and ext dirs are now set proper...
build prints more detailed java version
print jvm version in fourfournightly target
Removes varargs version of immutable.Queue.enqu...
Added option to select test source dir.
note about switching flags like CASE_INSENSITIV...
new starr with more robust handling of recursiv...
Added sample/starter ScalaCheck test
Added ScalaCheck runtime deps.
Added support for ScalaCheck tests.
Created a test for #1280.
New test concerning volatile intersections.
updating version number and starr to 2.7.2.RC2
Bugfix and tests for #1323.
New STARR that fixes builds with -optimise.
logo
logo
Hiding problematic settings from IDE that are c...
One more attempt to be sound and at the same ti...
fixed build problems
fix to 16043
more stability/volatile tuning and an escape ha...
Forgot to remove one commented line before r160...
Readjusted when -Ycheck:phase operates to get a...
refined volatile checking
Added support for -Yrecursion compiler flag.
updated test
fixed problem with volatile types.
applied fix for #1306
applied fix for #1294
disabled volatile checks because eclipse plugin...
now checking for volatile types.
removed useless annotation
And forgot to commit check file for the t0508 t...
Enables test dirs for neg tests.
applied fix for #1206
@deprecated tag
More bugs from tickets added to pending.
Adding two submitted test cases to pending.
Forgot to make the message in the ICode checker...
Phases now have a checkable flag, used by the n...
Adds support for .flags file containing scalac ...
removed leading tabs and blanks
fixing FastScalac ant task
fixed #1267
Adds check for latest jar/properties file to se...
updated documentation of scalac ant task
Small change to the code generated by the inter...
fixing url
Forgot to catch NumberFormatExceptions in IntSe...
Added support for Integer Settings.
Adding null pointer check to checkDead to fix b...
Enabled test directories also for run, jvm and ...
disable inner.scala test.
Added test files for #1297
Applied patch for #1297
Unrolled wrong commit and the real fix for #989.
Removed rogue slash
Added support for multi-file tests.
minor test add-on
Iterator: document that this iterator behavior ...
New STARR based on rev 15931 that should fix th...
added scala-swing to sbaz package
removed scalap man page
reverting .classpath (un-checked it in SmartSVN...
fixed #1257
Some additional bits of output that should prob...
The ScriptRunner now sends errors to stderr rat...
added prefix direcotry for scala sources tarball
updated starr to 2.7.2.RC1
int -> Int, etc.
Added "scalacfork" ant task and enabled it to b...
Moving debian packaging files into their
Forgot to add author fields.
Removed printlns
Reverted to target 1.5
Added test for inner classes.
deprecated SUnit
deprecated scalatest and removed it from furthe...
Missed a file.
corrected several problems with error reporting...
Reverting for now..
Reverted change to implicits to see whether plu...
new test
Java inner classes are parsed correctly.
Added project-specific settings for the embedde...
Backed out from addition of vararg += in Buffer.
Buffer gets vararg +, += methods; small fixes.
Forgot to update the flags for the test.
changed model for value changes again
Changed -Ycheckinit to -Xcheckinit.
added a forwarding target to clean everything
fixed more problems detects by Ilya.
temporarly disabling OpenHashMap on .NET.
Forgot to add author field.
Added David's OpenHashMap (from #1190)
removing the 'longer than 100 characters' warnings
fixed path to api doc in pack-api.tar
Added David's fix for #1184 and author
adapted dist directory structure to match the o...
include *.flags files into scalal-test sbaz pac...
Correction to Sean's decoding fix.
json parser builds on jvm14.
event changes, import conflicts resolved, and o...
Add in configurable behavior for parsing numeri...
fixed t1121
fixed t1176
fixed #1150
fixed #1196, #1197, #1203
removing folder src/swing/script (ok with ingo)
fixed #1127
Removed FINAL flag for accessors
reverted unncessary change
fixed #828, #1120, subtyping problem with exist...
fixed broken build (sorry)
Blind patch for bug reported on mailing list.
Checked in David's update to LongMap and IntMap.
Hardening classpath against sourcepath crash.
David's new collections can't currently be used...
Changed a val into a def to reduce state in Act...
Reverting a premature change to retain opportun...
fixed #1163.
Added strap and test.stability targets.
Made serialization of functions used in the rem...
fixed #1150, #1152
Disable the CLDC option.
fixed #1096, #1122, #1132.
All these tests in pending currently pass for me.
These tests have already been moved from pendin...
Moving currently problematic tests to pending.
Added David's additional collections.
Improved the documentation for Application to b...
Minor changes, added button demo from the book
Changed default java to use JAVA_HOME and added...
Removed deprecation warnings in auction.scala a...
Actor trait abstracts from scheduling strategy.
Separated actor GC from scheduling.
Added test for #1146.
Moved tests from jvm5 to jvm.
Still missing newlines in property file.
Didn't get the propertyfile stuff quite right.
Added ignores for things the OMake script will ...
fixed #1049
Other file.
Adding OMake support to trunk
Disabled closure analysis on 1.4 (for now).
Changed "," to ", " in Queue.toString.
Moved tests from jvm to jvm5.
Lambda: The Ultimate Distributive
Added options --buildpath and --classpath.
remove script tests for now - they seem to bloc...
changed build script to run shootout and script...
-Xexperimental changes for #1093
Small documentation fixes based upon Iulian's f...
Enabled actor links for remote actors.
Hardening
updated build script to generate scala-swing.jar
link added
damn subclipse
Loading images through getResource for the jar,...
Move scala.Random -> scala.util.Random on .NET
Renamed Actor.async to Actor.respondOn.
Addition of @serializable annotations avoids re...
ACC_BRIDGE -> ACC_SYNTHETIC as with javac
fixed scalatest shootout on cygwin
Disabled code in CleanUp to enable build of 1.4...
Made -Xcheckinit imply -Xfuture, and added -Xfu...
Updated documentation for Any and AnyRef
removed warning (Random)
moved class Random to package scala.util
Added -nowarn so that scalatest and partest beh...
fixed Signature generation
experimenting with Signature attribute
Added -Ycheckinit, which causes all getters to ...
fixed #1086, #1102, #1144
fixed #1022,#1030,#1033,#1036
fixed #842, #945, #83, #996, #1016, + some perf...
generating java generics signatures
Hardening of plugin to convert more hard crashe...
Renamed 2nd variant of spawn to spawnNamed.
Changes/deprecation of Console.format.
corrected typo
(1) made base type sequences lazy in their argu...
fixed script on windows
enabled new initialization semantics for -Xexpe...
Increased stack size for run/bridges test.
inconsequential change to get the checkin build...
Deprecated slice(n).
trying to fix build
AllClass => NothingClass
fixed build problem
added Iterator.flatten method; refactoring: clo...
Made mailbox in Actor protected (this is necess...
New STARR to include the previous commit (fixin...
Hopefully, fixed random NPE crashes in the back...
objects to vals, cosmetic changes
renderer renamed to rendererComponent
fixed #1100
cleanup
Updating SymbolLoaders to ensure during refresh...
cosmetic changes (Unit)
`ilasm' won't be called automatically, anymore.
Seperate compilation (Part 2 of 2): scalac
re-compiled msil.jar, should fix the msil nightly
Reverted r15497 and r15500.
fix for #1028
Removed some experimental things
large swing update, added ComboBox
fixed #764 and #770
cosmetic indentation changes.
fixed t0851 and t1101.
Move the sync-var test into the correct directory.
fixed t1098
Disabled support for static forwarders because ...
Increased timeout in build.xml to make all test...
Now encoded glyphs in identifiers that are not ...
Adding some comments to document what's going o...
change in ObjectRunner to avoid the warnings.
early initialization fixes.
Increased timeout for compilation of tests.
Added timeout option to invocation of partest t...
Applied Ross Judson's patch to fix #1072.
Added timeouts to protect against hanging tests.
Added pending tests for #1070, #1079 and #1087.
Patch so that .scala can be be ommited when loa...
Trying to patch up NoPosition crash from syntax...
Adding dependency tracking from classes to the ...
Ingo's fix that I didn't actually committ a few...
Removed pointless assertions.
Bug fixes.
fix for #1064
Refactor proxies: IterableProxy, SeqProxy, Rand...
mutable.Set: fix scaladoc param names
fix for #1060
rolled back Constructors.scala

Add RandomAccessSeqProxy
removing the .settings folder from svn
- added AnnotationChecker and TraverseComponent
Started work on a rewrite for type-flow analysis.
Added support for generating static forwarders ...
Seq.apply, RandomAccessSeq.apply
Added test for #503.
lazy vals cannot override strict vals and vice ...
Converting all vals possible into lazy vals, sh...
convering vals to lazy vals to accomodate new i...
trying to fix build
* scaladoc - changed two objects into vals to a...
fix (?) for windows runner scripts
removed pre-supercall moving of valdefs
use early initialization instead of relying on ...
new STARR which implements pre-initialized fiel...
speed up ArrayBuffer by replacing BoxedAnyArray...
test for #1049
fix^2 of t0590
fixed t0590
Cleaned up handling of reply destinations for r...
gixed gilles' gadt problems. Added some tests
fixed #504
fixed some bugs; disabled devirtualize; desiabl...
test and fix for #1027
added tests for #1035 and #1038 to pending
stub tree duplicate returns itself and no longe...
Null pointer check hardening.
Change iterator "next" method signatures from "...
Scripts should use JAVA_HOME to find java execu...
ResizableArray: s/val initialSize/def initialSi...
corrected comment
Moved pending tests that succeed to their place...
indentation
Reverted change that introduced conflicting imp...
SyncVar enhancements:
Added javac.args to the build script.
Added 'scalac.args' parameter to the build script.
New STARR should fix vararg warnings?
Implemented #988.
int -> Int, etc..
int -> Int, etc..
fix for #1026
removed println 'typing eta'
test for #1024
int -> Int, etc..
int -> Int, etc..
added EOLs, missing headers
int -> Int, etc..
fix for #1009
speed up HashTable by replacing BoxedAnyArray w...
RandomAccessSeq.empty implementation is Project...
Check in revised fix to Console.readLine, etc.
rolling back the faulty checkin
now actually removing plugin.quick
let supersabbus genarte man pages.
unify mutable and immutable stacks behavior (#957)
makeRichChar to, until return RandomAccessSeq.P...
added tests for open bugs
updated plugin template to use Transform and In...
Removed Proxy from StringBuilder's parents
Various bugfixes and upgrades to IDE support de...
make library work for resident compilation
Changes to support exposing AST in plugin.
fixed #807. More stuff for virtual classes.
treebrowser now shows annotations
updated types docu graph
fix documentation of lengthCompare method
added / updated some documentation
drop svn:executable flags from scala sources
Removed vararg warnings in partest
Refined types of Actor.async method.
Changed scala.Stream from trait to abstract class.
Iterator.collect method (#916)
make List.++ faster if argument is List (#887)
text.Document for .NET target (using System.IO....
commented some lines in Sorting.scala (they whe...
typo: s/assumptopm/assumption/
Hooked in the DeVirtualize phase again, though ...
Added DeVirtualize back.
Now "scala -Y" gives the same output as "scalac...
Tried adding a test for t0947, but I can't seem...
- be specific about what errors are caught
recompiled msil.jar (fix problem: NoSuchMethodE...
Implement #886: indexOf, findIndexOf
Undo the changes for now.
Really fixed InterpreterLoop this time.
InterpreterLoop no longer needs ugliness becaus...
By default, the interpreter now uses the classl...
Added Scala compiler plugin Template.
fixed #936
fixed typo in JavaParsers
Gixed #946
Reorganized BasicBlocks a bit:
fixed #911.
When no check file exists, run test fails with ...
fixed #911. Added comments to <~ and ~> methods.
correction to meaning of operator names: names ...
added tests; fixed #903; made Predef.Map covari...
fixed test case
fixed #665
making the ilasm command verbose to see what's ...
Inner classes are now kept as such when compili...
fixed #605. Added more info on #612
Removed useless assertion, fixed #826
int -> Int, etc..
Synced src/dotnet-library with rev 15086 of src...
int -> Int, etc..
int -> Int, etc..
int -> Int, etc..
int -> Int, etc..
int -> Int, etc..
fixed #681
int -> Int, etc..
Applied provided patch for #921
Removing "waitFor" ilasm.
use the new msil.jar library
deactivating separate compilation (part 2)
The following error occurs on windows: "CreateP...
Always keep .msil files
More deprecation warnings fixed.
Deprecated lower case type aliases for primitiv...
Added depreciated annotation and comment to kee...
fixed problem Lukas had when flatten is skipped
removed again 'override' on + of dotnet List
Added back missing {
Deprecate all of the problematic + methods, and...
Added documentation for lengthCompare, fixed ta...
IDE fixes
Try raising the memory limit further.
Applying the one half of Miles's patch.
Removed outdated "ant-contrib" library and poin...
Removing dead code.  Change reviewed by Gilles.
SupperSabbus Four runs its tests in a VM with 5...
Documented flatten, see #909
1. ConsoleReporter stops after 100 error messages.
1. Removed StdNames.EQEQ, plecae by StdNames.EQ
Rolled back unintented committed files.
Added explicit return type in take (see #879)
moved target "dist.latest" before "latest.doc"
Added no-arg mkString, see issue #869
Remove virtual classes code from the "stable" t...
Removed nullness check from trunk.
Three small Interpreter improvements:
fixed msilnightly target
Made “Manifests” serializable.
Added “fourfour” targets to SuperSabbus for tes...
changed copying of .net / jvm14 libraries.
Added config options to partest Ant task
added proper msil packaging
just fixes the check-in build. cleaning up later.
added msil distribution to supersabbus
removed some needless lines
fixed some minor problems with partest.
added todo list to msil.xml
updated msil build script. now similar to four.xml
partest now interprets scalac options passed in...
- updated partest to work with SuperSabbus (pac...
Option asserts that its argument is not null.
build scala librairie for dotnet framework....
Removing original copy of SuperSABBUS.
build.xml move to build-old.xml
Updated partest to work with SuperSabbus
adding dotnet into the pack.xml
updating starr to 2.7.1.final
changed directory structure of manpages
in fact superSabbus uses msil.xml, not build-ms...
in fact superSabbus uses msil.xml, not build-ms...
added the dotnet version of Manifest.scala
added msil target to superSabbus (don't forget ...
Ported fix for #845 to trunk
The interpreter no longer generates class files...
corrected packaging of four distribution
Lex "signed-off" on removing the lines I had co...
changes to swing library to make Button app work
replaced null test by try/catch (Console.readLine)
fixed #828, #789, #828.
suppersabbus now generates an api tarball
made manifests serializable
added scala-test sbaz package to supersabbus
files of jmv-1.4 library must always overwrite ...
fixed #790
Removed LGPL licensing based upon Erik's permis...
Console.readLine() now throws EOFException inst...
fixed #789. Samll bugfixes in library.
added () to predef.exit, #752
Missed one file.
Hopefully fixed the annoying jvm/inner test cas...
Copied the build script to the doc folder until...
Wrapped some simple dialogs and BorderPanel
Rolled back r14773, until I figure out why the ...
SuperSabbus uses proper Java command to run par...
Table constructor with default model revived, t...
#815
Added FileChooser, renamed ComponentList, added...
propagating changes from Sabbus to SuperSABBUS
"ant msil" works again on a fresh build (and af...
Manifests are generated when required by an imp...
fixed windows script template
Changed isLeft and isRight to use less memory.
Changed most uses of lazy val in Either to be d...
Added support for defining actors using `Respon...
Added support for defining actors using s (usin...
updated STARR to 2.7.1.RC2 (2nd time due to 2nd...
Tweaks to SuperSabbus' cleaning behavhiour when...
Peers are lazy vals now
Modified the implementation of curry so that for
added test for outer in Namers.scala
Really fixed curry this time.
No curry for you! (If you are FunctionN, for N ...
Corrected uncurry to be called curry.
Accidentally deleted some settings somehow.
SuperSabbus generated distribution is now compl...
Eliminated the commented out scaladoc settings
in fact the tests in the main function doesn't ...
Sorting.scala is platform-independent
added all the empty dotnet-library files that w...
typo :)
updating starr to 2.7.1.RC2
Joined alignments, resolved some issues with nu...
fixed #779
scala.swing update for rc2, third try
scala.swing update for rc2, second try
fixed #780 and #552
scala.swing update for rc2
fixed #768 for  HashSet.
IDE bug fixes
no comment.
Deprecated non-position versions of newName, ad...
fixed #768
scala.swing update
(1) API docs for private classes and DBC are no...
fixed #768
scala.swing update
Applied the patch for Either after some revisions.
Added test case for t595.
Small adjustment to method signature.
Rewrote scala.concurrent.SyncChannel.
Don't make a virtual class its own parent.
Case classes can be virtual (eventually)
Eliminating these.
Correction.
fixed modifiers for virtuals
Added code pretty-printing for *all* of the pos...
Deprecating newName/0 in fresh name creator so ...
optimization for streams as proposed in #498
Flags.DEFERRED
small fix wrt virtual classes
Improvements to genprod
SuperSabbus JVM 1.4 target also builds Partest.
Add a contains(String) method for 1.4
svn:properties
refined type checking rules wrt selftypes for n...
Slight improvements in the documentation.
Fatal typo in SuperSabbus.
Simple pending test for virtual classes.
Tiny fixes to SuperSabbus.
updating STARR to 2.7.1.RC1
sabbus: starr.lib searched in wrong directory f...
fix for #740
method NodeSeq#\ supports arguments like "@{uri...
call initMappings() only once (already called o...
Commented out the println which was causing pos...
made xml.pull functional
putting files back where they belong
(1) add devirtualization phase.
IDE tweaks.
Added what is needed to properly build, test an...
added test cases for #710 and #346
fixed #710 (revert some of r14520, but fix for ...
fixes "no-symbol doesn't have owner" crash in e...
removed for now
new phase (not yet connected to rest)
trunk/build.number for 2.7.1.RC1
moving checkfile for console.scala to right loc...
Added a simple target to build a JVM 1.4 versio...
Refactored SuperSabbus' targets to be finer gra...
fixed 495 again (this fix no longer ignores gua...
updated check file
fixed #654 and #688
moving files back to proper subdirectory
removing PagedSeq.scala from dotnet-library
CLRTypes: mutable sequence was modified while i...
Renamed method pending in Actor trait to mailbo...
Move the test because it will fail on jvm1.4.
Trunk version of console now uses printf.
Copied old implementation of Console to the jvm...
Eliminated either per #708.
fixed t607, t699
pending tests for 727 and 732
improved isCoDefined
removed some files (the stuff in scala.util.mat...
(1) Removed generation of $tag method for inter...
Missed a few references to fusrcs.
Disable the cldc target.
Put "locker.clean" target back into SuperSabbus...
More stubs for MSIL, but I do not have the pati...
Closer to having MSIL build again.
Normal build of jvm-1.5 target works again...
More reorg.
New reorg plan
Use toString() instead of toString in the inter...
Undid 14522 for now.
This might fix things until the unreachable cod...
test and fix for #631
fixed #495
fixed #422
fixed #346
fixed #522
fixed some typos in the scaladoc comments
fixed #671
'busy waiting? you're not serious' said the Thr...
fixed doc, it's not a bluff / need Ant 1.7 and ...
solved Walter Chang's slow InputStream issue (u...
scala.swing update, reverted Martin's changes
Enhanced @see tag in scaladoc:
Started fixing up the cldc, android, and msil, ...
Added target directory for jvm-1.4.
Rename the "files" target to the more descripti...
Corrected the bit that generates the scaladoc s...
(1) more changes for dynamic cycle detection of...
SuperSabbus is able to build for JVM 1.5 with t...
Cleaned up unused directories.
The great library reorg!
fixed Reifier crash #651
test for t0716
Changed signature on reduceLeft/Right per ticke...
test case for t0710
applied patch of t0698
Decided that it did not make sense to express p...
First complete draft of the equivalence, partia...
Added signum functions.
removed contractiveness requirement for implici...
moved swing classes to package scala.swing; fix...
added requires and ensuring methods.
Changed Stream implementation to use tail recur...
fixed #713
display Tree of tree.tpe in TreeBrowsers
Pending test for #673, #695
Pending test for #699
Pending test for #654
Pending test for #663
Pending test for #653
Re-commented the assert out, it should probably be
Reverted Sean's change.
Disabling assertion that seems wrong.
reverted parseattrubtevalue hack, fixed attribu...
scala.swing update
updated tests for Byte/Short
added insert for Byte/Short, synchronized CLDC ...
Added target to SuperSabbus to correctly make n...
fixed matching bug (leading to "subst is null" ...
Hopefully that fixes CLDC's incapacity to deal ...
May have fixed issue #650 (couldn't test fsc ta...
Added overloaded toArray methods to avoid boxin...
explain deprecation in JavaMapAdaptor / JavaSet...
Adding apply methods to Map/Set/etc...
Start of the Ordering trait.
Added a trait for equivalence relations.
moved or fixed package declaration of some file...
Added missing StringBuilder methods for #656.
Pending test for #605
Pending tests for #621, #644
Enhancement #623
fixed OSGi manifest for combinator packages
fixed OSGi manifest for scala.util.parsing
Scalac prints a “type is already defined as“  e...
fixed symlinks in nightly build script
excludes *CharSequence.scala from CLDC build
Removed Matchable string, which is no longer ne...
added CharSequence abstraction
added better disgniostics for cyclic references
Cleans up what scaladoc generates for synthetic...
fix for bug #639
hello world
added scala.swing
removed unchecked warnings, fixed parseFull
Do not reset trapExit in Actor.start.
Moved the test to pending.
Attempting to build the plugin before we run th...
Synchronizing with what is actually run currently.
Updated documentation with complexity informati...
Test root can be overridden and look-up is smar...
moved typerep test to jvm5
Obtaining Scala compiler version is more robust.
Changed the return type for parseFull to List f...
Pending test for #576
Pending test for #565
Pending test for #625
added missing headers
small code cleanup in a .NET-related method in ...
updated typerep test
StringBufferClass -> StringBuilderClass
extended isStrictlyMoreSpecific for erased types
fixed #617, code cleanup
added support for regexps """<regexp>""".r.
StringBuffer -> StringBuilder
added doc comments
1.
Pending test for #607
SuperSABBUS works with files that have spaces i...
Array.zip supports arrays of different lengths.
Moved matching from 'util' to 'scala.util'.
Applied patch from #598
Pending test for #612
Pending test for #606
Improved SuperSABBUS w.r.t.
Hopefully fix the problem with Either not being...
Use JDK 1.4 compatible PrintWriter constructor
updated STARR to 2.7.0-final
Set keywords property.
Oops.
Added Morris's implementation of the Either dat...
Applied Andrew Foggin's patch to allow plugins ...
definitions.init doesn't really need to know ab...
Switched to scala.StringBuilder
updated scala-reports address
Added a method to give you the default characte...
SuperSABBUS runs the full test suite and is fas...
fixed double escaping issue
Refactored definition of test procedures.
ScalaDoc, etc.
Compiled nest.jar with JDK 1.4
Main accepts, but ignores -Ydoc.
Created a "new" class that is used for running ...
Added util.matching package that contains extra...
Added more debug info to partest.
Use a java.security.SecureRandom for better
Added equals methods to instances of Ordered.
One more redundant use of toString.
Eliminated a few more redundant uses of toString.
Undid most of the valueOf optimizations as they...
Updated usage info
Changed paths in resident compiler tests + scal...
Simplified classpath handling
Adjusted package name in test, so that it integ...
Should generally use valueOf when constructing ...
Pending test for #591
Strings are immutable, so new String(string) is...
returning "" is more efficient than new String()
Using java.lang.Boolean.valueOf(...) is more ef...
Pending test for #590
Elminiated a number of redundant calls to toString
Pending tests for #446
Added support for res, script and shootout tests.
Removed superfluous files
Modified scalatest and .res files so that parte...
fixed missing Ant dependency
Added a definition of equals() and hashCode to ...
First step towards a faster commit build.
removed traces
added batch file for partest
fixed resolution
updated STARR to Scala 2.7.0-RC3
minor fix
fixed #579
minor fix (bis)
one more attempt to fix raw types
minor fix
updated currentTime (dotnet)
Forgot to update the .check now that the test h...
Removed stub methods, and moved the contractual...
fixed problem with raw types reported by lift p...
Do not run the test on IdentityHashMap because ...
updated STARR to Scala 2.7.0-final
partest bootstraps itself using reflection.
Commented out the change until I can sort out w...
Add default implementations of equals and hashC...
partest does not use STARR library any more
removed unused vars/props
Adjusted some directories
Eliminated two sources of spurious failures
Revert some of Stephane's changes
updated check file
updated RichString on dotnet/cldc
fixed jline addition
added jline.jar to dists/latest (bis)
fixed #562
fixed #551 and #566
corrected EXT_CLASSPATH
updated partest, added jline.jar to dists/latest
added new Ant build script (beta)
Now runs on Windows.
fixed #519
fixed #520
fixed #537
fixed #520, #489
Removed obsolete "usepredef" from Scalac ant task.
removed tabs
fixed scaladoc comments
Can now include collection subdirectory in the ...
fixed android build
fixed #499
reverted Burak's change which broke every singl...
fixed tests
startup scripts honor an existing SCALA_HOME now.
change -g:notc to -g:notailcalls
fixed #529
no singleton types allowed in new.
fixed #468 (msil)
fixed #447
fixed #468
fixed test case
eliminated need to cmpile with -Ynopredefs
another change wrt overriding vals to fix #530
disallow accesses of the form super.val; allow ...
added Seq[Char] arg to append/insert
allow value overrides in traits; check variance...
fixed #528
removed RichString methods and @throws
minor correction in output
added test case (serialization)
added scaladoc comments
for queries not understood in the interpreter, ...

fixed broken build (scaladoc)
corrected typos
Split DocDriver into DocDriver and DefaultDocDr...
peel off any scaladoc comments when
added plugin to nightly build
fixed problem with too optimistic beta reduction.
Added Eclipse plugin build to nightly test scri...
updated scsh script
uses readResolve for symbols
fixed #523
Added HashMap to MSIL build
Added other parts of the standard library to pr...
fixed dependency in build.xml
fix error in getLine
build now also works on Java 1.4 (uses RetroWea...
anonfuns now accept up to 22 args
Java 1.4 compatibility
Changed version naming scheme to be Eclipse com...
changed viewvc -> trac URL
Moved NewLinePrintWriter to its own file, hopef...
moved NewLinePrintWriter back to object Interpr...
Changed scala.Symbol to be always interned
Generalizes the allowed inputs to the interpret...
Updated to compile the Java files in partest.
Changed the toString of Iterator to have the wo...
fixed #429 (typo)
fixed #429
fixed test
More small fixes to the new IDE.
More fixes for the new IDE
add documentation and fixed copyright
fix semantics of %, 2nd try.
fix semantics of method %
made semantics of MetaData append safer, fixed ...
Added support for 'neg' tests to new partest
fixed #485 (IdentityHashMap)
not sure if the export is important, but adding...
fixed #486
fixed #485
removed MD5 test
ignore error output
fixed test (MS support, 463550)
updated code
Updated STARR to 2.7.0-RC2
Check for command-line option dependency AFTER ...
- fixed filenames and package declaration of so...
fixed build problem.
removed deprecated class util.Fluid
Using custom ClassLoader is more robust.
change to caseclass extractors with varargs
Integrated ClassLoader patch from Guy Oliver
added DPP's code for xhtml parsing (cdata/entit...
fixed PrefixedAttr inconsistency and scaladoc
Slightly improved efficiency of ::.writeObject(...
fixed #471
refinement of sbaz fix; fixed #419
Added property to configure the number of actor...
Corrections to the documentation
fixed build problem for sbaz; fixed one half of...
Implemented --show-diff, --show-log and --faile...
uses src/*-src.jar both in latest and distro
Changed translation for pattern definitions whi...
fixed missing deprecated warning on types; fixe...
More functionality and cleaned-up output
iterative version of rep1
Updated STARR to 2.7.0-RC1
fixes #320
combinator1 --> combinator
combinator --> combinatorold
updated examples and json parser to use combina...
fixed nightly build
Added better "clone" methods to a few JCL colle...
fixed problems with ranges
Partial fix to #397.
fixed #438
fixed #412, prepared for structural array problem.
Replaced some hard-coded paths
added class BigDecimal
added reverse to RichString.
switched to Scala implementation of StringBuilder
backported (some) changes from branches/scala-r...

tweaked the build order and class paths
reverted -unchecked addition
fixed typo
add-on to r13888
updated default encoding to UTF8
Defined a more precise notion of equality on co...
Added tests for #323.
Arrays (and probably other things) pretty-print...
Should fix #417 (Exit status was zero on except...
moved test to jvm5
Moved 'patmatnew' back to 'run'
Added initial re-write of partest
Removed unchecked warning from 'withIndex'
Moved 'patmatnew' from 'run' to 'pos'
Removed unchecked warning from 'patmatnew'
Moved 'attributes' from run to pos, removed war...
fixed #224
import Predef._
fixed #406
Inner classes follow their enclosing class to s...
fixed #423, added integer square root (CLDC)
added svn:keywords, updated headers
buffering when reading from an inputstream
forget to ci test file (regexp pattern)
fixed (hopefully) regexp pattern (Java 1.4 vs 1...
updated some test files
fixed #421
fixed missing merge in r13827
demo of entity handling
backed lout of some changes for vcs
added test for optional attributes
support for <elem key={x:Option[Seq[Node]]} />,...
removed MissingType
hasFlag(DEFERERED) -> isDeferred
minor clean ups of Sean's commit; prepareing fo...
added filter for synthetic outer members
Sean's fix for scaladoc.
Another massive IDE checkin.
case classes can now inherit from case classes.
re-fix #404
made println platform-independent in interpreter
reverted changes wrt raw types.
updated batch file
added missing header
fixed JVM_EXT_CLASSPATH on Cygwin
fixed typo in last commit
fixed problem with recursive lifting in MSIL
Deleted obsolete file
made printMessage platform-independent, removed...
Added skeleton for new test runner
lifts synchronized when target is MSIL; ignore ...
trys with returns are lifted when target is MSIL
+= (a -> b)
updated check file
corrected regexp
fixed #400
removed last warnings
remove some warnings, incl. += (a -> b)
added to fix of #298
corrected typo
fixed #347. Added option -Xlog-implicits.
added root directory to .tgz and .zip archives
applied path for #325, update scalac man pages
added serialVersionUID (#376)
fixed #351
fixed #342
fixed #360
removed some warnings
added svn:keywords
removed some warnings
added ACC_VARARGS
added comments
removed some warnings
fixed #318
fixed t0392; un-deprecated Iterator.fromArray (...
removed some warnings
no Liftcode on CLDC too
disabled liftcode for MSIL
reverted STARR to r13589
removed some warnings
removed files which were added by accident
getting rid of deprecated warnings
checked test
Character -> Char
removed warning
added toBinary-/toHex-/toOctalString (Long)
removed more warnings
removed more warnings
fixed broken build and remove some warnings
moved deprecati0on warnings to refchecks, so th...
corrected typo
replaced "matches" by "contains" (Ant compatibi...
fixed #385
added target in optimise task
added nsc.target conditional property
test case works now without errors, because of ...
reinstantiated annotations test
updated two check files
fixed exhaustiveness warnings in test
build target is now 1.5
moved man pages back to scala-devel package
updated copyright notice
fixed t341
increased Ant memory size
splitted scala-devel.sbp (scala-devel.sbp/scala...
Learned of the shorter way of converting string...
splitted scala-devel.sbp (now scala-devel.sbp/s...
updated nightly build scripts
Moved the checks for executing JVM versus targe...
Use String's »matches« method instead of »conta...
Removed Java Beans specific references from the...
Had to create a test/pending/jvm5 directory.
I believe I've fixed the problem with ScriptRun...
Applied patch from Ticket #330.
Applied patch from Ticket #334.
Corrected uses of g:lines to g:line.
inverted logic when setting FLAGS
added target in docs.manual
added target to quick task
added target to locker task
fixed t275
added regression test for t301
fixed t301
fixed t335
if a plugin is given a bad option, stop before ...
added some <parallel> tags
Removed -Xplug-types.  Now annotations
fix isSubtype0 to more consistently
Be careful of the mode when typing annotations.
added some <parallel> tags to speed things up
fixed t303
surgically fixing a broken build.
surgically fixing a broken build.
surgically fixing a broken build.
surgically fixing a broken build.
surgically fixing a broken build.
surgically fixing a broken build.
fixed test
fixed #283 #289
updated CLDC library for Class[T]
fixed t0259
updated RichClass
updated MSIL library for class[T]
changed how wildcards are displayed
fixed build problem on ibm's VM
removed deprecated features
fixed some tests for jvm-1.5
-target 1.5 now the default.
added type param to Class
fixes to make dual mode build pass
dual mode (generics or not) version of compiler...
add partest to the scala-test package
updated STARR for Java generics
made Typers more lenient wrt to redundant type ...
updated STARR to Scala 2.6.1-RC2
#153 still not fixed..
reverted memory size change (useless)
added Android examples
incread default memory size in scalatest
Added the AnnotationCheckers registry, so that
added final modifier, commented out test for #153
fixed problem with Stream.flatMap, changed text...
Made all values to be final fields in the gener...
added message parameter to custom assert method
better approximation of <:<_erased, fixes bug i...
updated check file (missing in r13483)
added test case for fix #272
scaladoc now adds 'lazy' modifier
added accessor test (bis)
added accessor test
fixed typo in build.xml
Removed the SYNTHETIC flags for accessors (java...
Hopefully this won't break the build.
commented out unreachable code
hacking Range.Inclusive "by" method out so I ca...
Annotated type of to to be Range instead its In...
updated STARR to Scala 2.6.1-RC1
nuking noides, getting rid of generate ide maps
nuking noide and generate ides phase
* nuked noide
Ported bug fix in rev 13402 of 2.6.1 branch
fixed #211
- When -Yself-in-annots is turned on, be carefu...
changed dependencies for targets 'dist' and 'pack'
Maybe fixed CLDC build.
format -> formatted
- include partest in the scala-test package
Beautified actor sequence example.
Structural calls should be faster thanks to met...
This new error message looks better than the ol...
improved DX tool invocation (Android)
removed FloatTag/DoubleTag (CLDC)
sets 'android.home' property
escape characters as necessary when
In the Debian build scripts, do not run scalado...
added Android build and test support
fixed Ticket #212
fixed #63
List.transpose is now tailrecursive.
reverted (unwanted) change in build.xml
fix ticket #98, by removing the => thus making ...
fixes ticket 230, props to Jon Pretty who found...
fixed namespace printing bug - props to DPP who...
Added format method to StringAdd
Removed recursion from predicated iterator fill...
Changed argument of Array.concat to accept Seqs...
Changed reverse to return mutableprojection.
Added android-library target in the build file,...
Made remote & co.
Made the scalac task return early if there are ...
added explicit compiler version (CLDC)
fixed #246. adapted check files.
changed SuperAccessors for t010; reassigned to ...
splitted CLDC library (un-/preverified)
updated CLDC libraries (Java WTK 2.5.2)
fixed #34
backed out of the changes that broke the build/...
fix^2 of problem in 13309. Sorry.
fixed r13309
fixed #245
fixed missing dependency in Ant script
changed check file (removed ^M)
added scalatest option "--cldc"
added tests
changed scalatest to use --utf8 encoding; added...
fixed #231.
reenabled actor exit in partest
fixed #226 and #227
Switched the base for lifted anonymous function...
Added tests for lazy values of type Unit.
Java 1.4 compatibility
fixed #176 (CLDC build)
fixed problem with last fix
updated checked files
fixed bug t0154, changed copyright, changed for...
refinement of fix to #209
fixed #209
changed some newlines
added scaladoc option '-access'
improved code (actor exit problem still pending)
Reverted Sean's change which makes multi-line a...
Added ACC_SUPER to all generated java classfiles.
runtime tests of type representation
fixed partest, removed mergeLines (useless)
Imported patch to improve anonymous function na...
modified check files
fixed #234; added tests
towards automatic termination of remote actors
updated .check file
fixed ticket 159
fixed ticket #136 (charSeq)
fixed ticket #136 (cnt'd)
fixd ticket #136
changed self type syntax as suggested by Matt H...
fixed tickets 146,148,155
small cleanup
removed leading tabs
Faster rich comparator as sugested in ticket #38.
updated check file for t0117
fix^2 t0117
updated file to match r13198 changes
moved runtime.TypeRep to branch (not yet mature)
reverted changes (moved implicits to object Typ...
added basic support for runtime types
added missing override modifier (msil)
fixed ticket 91
re-enabled use of compare for floats/doubles (NaN)
fixed several problems with implicits.
reverted refactoring for efficiency
fixed #202 (NaN), refactored code
added/modified check files
fixed tickets 152, 123.
fixed #198
now compiles on Java 6
Moving my tests to pending since they won't pas...
Rolling back my Erasure commit, my change has a...
boxArray is now called on null, changing it to ...
added servlet API root
moved run/arrays-2.* to pending
more tests on arrays..
partially reenabled external links in generated...
added docgenerator test
fixed #185 and #187
fixed an off-by-one error that would lose the last
removed tabs
Removed or guarded not-critical asserts.
oups! added missing override modifier
- Improved tail call elimination to handle call...
added method partition to Iterable (#171)
Added "-target 1.5" to javac options.
Updated annotations jar to contain 1.5-compatib...
updated man pages with new scala options
Removed outdated comment w.r.t. icode reader.

support the -e option for executing a command s...
updated the help output for the -i and -e options
Annotations with embedded annotations are now
added support for -e option
fixed a (sometimes) off-by-one error with Compo...
1. Pre-load any files specified with the -i option
removed hook for using different ScriptRunner's
support executing a command in addition
added -i and -e options
with multi-string arguments, allow the
removed type aliases, update svn:keywords
added node info for blocks
One last file missing..
Forgot two files from previous commit.
Improved/refactored parts of the optimization p...
added length test to run/stream.scala
- tweaked the warning for ClassfileAnnotation's...
fixed ticket #153
updated Scala comments
*** empty log message ***

fixes two little problems with :replay
fixing broken build.
fixed error in batch file
made Stream.length not be recursive
Downgraded randomAccessSeq[Char] => String impl...
enums can't be serialized
Updated the attributes test because there is a ...
added a test for multi-line strings
Settings.scala - added mode to eliminate : betw...
use the word "shell" more often
Emit a warning if a user tries to define
Minor changes to improve the output when
do not emit attributes unless they came from Ja...
corrected typo
fixed ticket #142
fixed ticket #141
Made unary constructor of Channel class public.
reverted java.flags change
fixed ticket #142
Included patch to remove extra object in static...
fixed small bug with date command
fixed #99, fixed order of worker queue
optimizing irrefutable tuple matches and remove...
fixed ticket 137
removed old pattern matcher (was dead code sinc...
added tests for bin/hex/oct conversions
Updated lib/mscorlib to Mono 1.2.5, added bin/h...
I hate the test script.
Taking out accidental println statement.

Made fringe example more type safe.
Some experiments with more constrained types.
Trying to get SymbolLoaders to be stable.
Added “alternative with longest match selection...
Renamed clearProxy method to clearSelf with sli...
Added clearProxy method to Actor object.
Ajusting ModelExtractor according to change in ...
aded svn:keywords, file headers in XML classes
fixing symbol bug
Massive check-in for IDE.
added classes for persistent storage of XML
added XInclude classes for SAX API
Updated src/dotnet-library/README
Synced src/dotnet-library with rev 12880 of src...
Removed explicit references via java.lang to Il...
combinator1 parser changes + examples added
fixed seq matching bug + reorganized test cases
fixed #60 ampersand in xml
added MixSequenceStar rule.
new version of combinator parsers
Changed description of Scala library in control...
enabled MixSequence rule for sequence patterns ...
Handle AccessControlException when initializing...
added class List without serialization code
Re-adding serialization code that was I think a...
Updated STARR to Scala 2.6.0-final
partest integration (alpha)
fixed #59
added "import Predef._" for successful MSIL build
Changed linked hash set to mutable hash set.
Added 'final' attribute to ServialVersionUID fi...
1. added var pattern = expr syntax
fixed v@unapp problem (merged changes from bran...
added missing header
Made constructor of FJTaskScheduler2 parameterl...
Updated STARR to Scala 2.6.0-RC3
propagated fix for ticket #55
fixed t0055
fixed odd typing bug #44
fixed #11
fixed bugs.
more debug output, made Actor @serializable.
Updated scaladoc comment.
removed unchecked warning
Added receiver accessor to OutputChannel
corrected typo in type argument (collection.Set)

better handle annotated types as the
Renamed Trac bug reports according to the t####...

allow annotations on definitions inside of blocks
added svn:keywords and missing file headers
Added @serializable annotation to MessageQueue
excluded JCL files from MSIL build


Deprecate annotations that appear before a type
Use jcl.LinkedHashSet instead of the deprecated...
Changed name of typechecker/UnApply.scala to Un...
fixed comment
sorry, Iulian is the author of this file.
enhancement #20
reverted bogus change by micheloud.
fixed #37
fixed ticket #2 (patch from tags/R_2_6_0-RC2), ...
fixed ticket 40 (matcherror with existential ty...
added test files for ticket 17
fixed ticket 17 (unboxing 2d-arrays)
updated syntax in pos/sudoku.scala (and on sygn...
fixed lift build problem.
fixed defect #31
moved test cases in bug457.scala in to patmatne...
Removed the explicit force on slice.
Forgot to enable the Array Projection type in A...
fix^2 of defect 15.
this file is no longer necessary, had been move...
FIXED DEFECTS 3, 9, 15
improved scalatest help message (cont'd)
improved scalatest help message
Forgot one file from my previous commit.
* colltest - changed to jcl.LinkedHashSet
* Added Array.Projection to facilitate efficien...
Reverted changes to CompleteLattice which broke...
fixed contrib #739
Various improvements/bug fixes in the icode rea...
Improved boxing optimization.
fixed bug1292
added Ant attribute 'failonerror'
fixed build, better compilation of literal patt...
all guards are pulled out into DefDefs, new pat...
fixed comment
fixed the location of the "docs" dependency
Updated STARR to Scala-2.6.0-RC2
in pm, result temp variable owned by current ow...
fix #1286
small fix in output
fixed method slice both in arrays and lists (se...
NEW TEST BUG1279. FIXED CHECK FILE.
fixed (as side-effect of fix for 1210, I assume)
fixed 1275 by adding minimal early check to Nam...
fixed bug1243
Added back 'lazy' modifier to generator's globa...
New STARR to fix bug #1248, and allow 'lazy' in...
cleaned up Trees
fix #1285
Added more debug output to NetKernel.
type attribute of Ident was lost, due to missin...
revert 'List.unapplySeq + guard', problem in te...
Ident(sym) => mkIdent(sym), avoids unattributed...
unapplySeq-optimization works in combination wi...
fixed #1281, reverted Sean's lazy generator in ...
disentangled Trees from Global.
fixed bug1274
fix #1282, optimized translation of List.unappl...
fixed bug1284
some fix for bug1279
forgot to replace the old symbols by the cloned...
Martin: please review
allow _ as wildcard higher-order type param in ...
added header and svn props
updated syntax
removed private modifier
fixed some bugs related to existentials.
fixed contrib #747
updated syntax
fixed #1277, more conservative when generating ...
split object resetAttrs into a function and a c...
fixed #1278 by holding back an over-zealous opt...
fix #1276, encoding equals test in types means ...
'system.exit' in supposedly disable code change...
scala.Math.Pi instead of scala.compat.Math.PI
fixed contrib #748
updated several tests for MSIL
added test for EMACS environment variable (jline)
fixed Philipp's bug #1256 for real this time, u...
disabled test for #1196
reverted typer change, no feature #1196
implemented #1196 by typer change and added tes...
small opts, fixed #1270, if target is Literal, ...
Integrated Itay Neeman's patch to allow port mu...
fixed MSIL tests (.dll not found)
more small changes aimed at efficiency, deleted...
restructuring pattern translation (rewrite rule...
Definitions, Par: encoding equality patterns us...
"binaries" depends on "build.strap"
Par..: normalizes sym for case class test, if n...
target "binaries" depends on "setup"
argh, fixed dependencies, and added {stability....
stability.tool plus dependencies
use SymList instead of SymSet to avoid spurious...
ParallelMatching:
Undid changes to implicit conversions to java.l...
fix #1257,#1258
Changed implicit conversions to java's boxed ty...
elim'ed dead code from Par...

print the plugins list more quickly, albeit wit...
2x symbol -> typeSymbol
fixed #1213, added test case
fixed #1215 unapply typing bug
create a new Run before computing the phases in...
- annotations can follow a type in addition to ...
use -Xpluginsdir instead of -extdir to find plu...
type check the trees in declaration annotations
- changed the default location for plugins
use termSymbol to detect Ident(object) pattern,...
replaced `_.tpe.symbol.tag' with getCaseTag(_) ...
Added new assertion to prevent invalid conversi...
Remote actor proxies are now cached.
refined fix
-Ycasetags optimization
Updated STARR to Scala-2.6.0-RC1
Iterator -> Iterable
Added test for structural refinement error cases.
update check files with -unchecked
“unchecked” is a standard option again (was -X).
fixed bugs 1245,1246
list plugins help more quickly, albeit at the cost
disabled dependent method types unless -Xexperi...
updated check files
fixed warning messages
fixed bugs 1242, 1236, 1210
removed hudson.xml
minor change
minor change
reverted to rev12414
minor change (msil)
minor change
hudson test
fixed bugs 1237, 1241
fixed bug 1241
fixed porblems intoduced by 12401 that caused s...
added more test cases
new test
fixed bug1234
new algo supports guards
deleted unreachable code
Par..
renamed JlineReader to JLineReader so ant will ...
fixed problems in subtyping.
added class scala.Random
automatically determine polymorphic classOf
Unified signature parsing in ClassfileParser
delay the deletion of compiled files until the
Added 'generics' option to the Scalac Ant task
reverted pattern matcher symbol calls
handle the case that a connection to the compil...
many bug fixes; short syntax for structural types.
reverted 3 warning removals made in rev 12323 a...
Added multidimensional arrays (up to 9 dimensio...
removed some more type aliases

the option for script compiling is now -Xscript
- handle empty-string arguments
if the result of an expression includesa newlin...
when looking for a temporary directory, try to ...
Implemented Java generics as existential types
Explicitly import java.lang.Integer in test/fil...
fixed scalatest so that check files for jvm tes...
a better fix than in r12370: delaying normaliza...
minor changes
quick fix for the first part of bug1210 (compil...
fixed 1231 (erroneously overriding abstract hig...
argh.. added a comment after fixing the check file
classOf[Integer] now properly resolves to class...
Qualifying Integer/Character references with ja...
Synced dotnet-library/ with rev 12365
Changed annotation handling in the backend to u...
Added Stream.Definite toString method to counte...
Rolled back, redid ++ to ++= change, and recomm...
Changed ++ call to ++=
added another example using the combinator pars...
added an embarrassing number of CBN modifiers t...
Added test file for contribution #701
minor change
updated example
added a generalised version of rep1 that allows...
Updated Stream to be the projection of List.
updated examples to new combinator library
fixed 1085 (tentatively -- Martin, please review)
removed "fromString" warnings
added isEmpty and getOrElse to ParseResult
Moved “debug” command-line option from -X to -Y.
Added rich string builder (a random access sequ...
returns NoSymbol instead of null
minor change
added class SymbolNames
- fixed bug in rep1 (optimised version returned...
removed unnecessary dependency of Scanners on T...
Support jline in the interactive shell.
1.
Added assertion to prevent using packages as va...
removed warnings.. (hello guys)
Updated Scalac man page for changed command-lin...

Changed organisation of Scalac's command-line o...
added elapsed time info
changes in check file
fixed last checkin which broke 3 tests


gracefully handle end-of-input in the middle of...
minor tweak to the message for ending multi-lin...
- set the Java "context classloader" in ObjectR...
make extra sure that ch==SU whenever the
- interpret() creates compiler.Run the first ti...
refactorings for SingletionType's to make them ...
Refactored GenericRunnerCommand to be a sublcas...
Remved a "new Run" from Global and moved it to ...
tweaked an error message
fixed the comment
- run the scaladoc task with its classpath poin...
Synced dotnet library with rev 12294
Rolled back the change to trick the constant fo...
removed type aliases, old for-syntax, ..
- added method Type.attributes
incompleteInputError instead of fatal error
Guarded one test against the constant folder.
1.
minor changes
Improved code generation for numeric literals w...
Updated outdated comment.
changed constructor call String(bytes) to Strin...
introduced "typedValDef", fixing improbable bug...
no optimization of Chars :/ maybe another time
removed "DIFF"+fixed spurious warning+optimizin...
fix + small optimization, duplicating small bodies
fixed warnings..
tightened definition of lub
added Stepan's patch ops/SyncVar
removed type aliases, updated scaladoc comments...
fixed bug with multi-dimensional generic arrays
Added some debug output to scheduler.
Removed busy waiting in TcpServiceWorker.
test harness for io.utf8codec
added UTF8Codec.encode(ch:Int):Array[Byte]
Replaced AllRef with Null in maps example.
Removed deprecated classes Actor, NameServer, P...
Added scaladoc comments to InputChannel and Out...
Reverted accidental changes in channels example.
Enabled explicit reply destinations in message ...
Added actors example that uses explicit reply d...
updated svn:keywords and file headers
added star expansion (Stepan's contrib)
Changed visibility of several internal methods ...
fixed build
Unified sender and reply destination.
obfuscated e-mail addresses
added @deprecated annotation
updated svn:keywords, file headers, and scalado...
trying encoding utf 8 to satisfy scalatest
more small changes to speed up
got rid of warning by using copyToArray instead...
replaced Tuple4 by case class Row for readability
fixed undetermined problem causing very slow co...
bah really does not work:/ revert
fixing condition
disabled tags, hashing still breaks
try fix hashing of case bodies
optimizing case class matches via tags (experim...
detecting matches on flat case class hierarchie...
JSON parsing by Derek Chen-Becker
renamed file, so ant doesn't always compile it
compilation-only test case
deprecated the old parsing stuff in favour of t...
oops..
integrating combinators into trunk
integrating combinators into trunk
integrating combinators into trunk
integrating combinators into trunk
fix#1182
fix #1166.
tentative fix that of bug causing divergence
implemented #1134, matching on this-identifiers
fixed bug #1033
minor change
revert, predef doesn't know type "Some"
Pair,Triple # unapply:Option->Some
optimzing unapply calls returning Some[T], savi...
Better return types for List.unapplySeq and Seq...
(only added code in a comment) suggestion, rela...
--quick also requires lib/actors in classpath
Optimize unnecessary boxing/unboxing.
in makeXMLseq, replaced chained append calls wi...
Added a test case for bug contribution #674
increased -Xss value on IBM J9
fixed bug in zipAll (thanks to Manojo, Prog4)
renamed -checknull to -Xchecknull
replaced "string.replace(string,string)" calls,...
added scaladoc
added -sourceReader option and nsc.io.AladdinRe...
fixed bug 1192, 1168, plus a problem with exist...
increased -Xss value for IBM J9
Use "res" instead of "unnamed" as the base of
updated check file
fixed bug1181
fixed pattern matching, variable binding problem
fixed bug1183
added bug 1189 to run/existentials.scala
fixed bug1189
tweak to printed output: do not print any extra...
refined (fixed) incompleteness check
fixed bug1170
fxied .check files for tcpoly
small changes to the way symbols get printed.
Modified definitions to take advantage of the n...
New STARR which supports lazy values.
xml parsing deal with processing instructions (...
(Hopefully) made test/files/jvm5/annotations.sc...
modified test in "drop" (like Stream)
minor change
updated take/drop
fixed bug in Stream.copyToArray
fixed SCALAC_OPTS
allows overriding of SCALAC_OPTS
updated check file
also prints owner
Added annotations tests for fields and methods
parallel algo can handle more patterns now
reenabled squeeze, some changes in choosing bet...
fixed test files.
fixed problem with boxing in cases noted by Burak
belongs to 12113.
added support for higher-kinded existentials; a...
test cases for unbox problem
added -Xsqueeze option, which optimizes valdefs...
fixed bug in ParallelMatching:MixLiterals (symp...
removed more primitive type aliases, removed so...
fixed alternative detection, handling of variab...
parallel algo optimizes extractors, see LAMP-RE...
added a test for the syntax: "0 : @annot", i.e. an
overrode Annotated.isTree in the same
documented --univ and --univ-url
fixed bug1188
test cases for pattern matching
parallel matching on integers + disabled squeez...
added prompt/fileEnding properties
Decrease the size of array used for the stress ...
Skip the first line of output, because now it i...
added wildcards. Changed for_some to forSome.
Removed dependency on Reaction in scheduling su...
changed test files: bug1001 compiles now.
added the version number to the welcome message
* fixed problem causing fallback on incremental...
fixed test file; fixed Long/Long bug
merged Alias/AbsTypeDef into TypeDef
fixed bug #1175 (jdk6)
fixed name in .NET script
fixed includes
renamed scala?.net.bat to scala?-net.bat
renamed scala?.net to scala?-net
added sbaz package "scala-msil"
factored out the choice of wrapper code, so tha...
allow the choice of ScriptRunner to be overridd...
added setting Xmatchalgo + cleanup of PatternMa...
added tests for scala.Iterable
added missing chmod
removed .NET specifics from Scala commands
Corrected Scaladoc comment for Array.slice (con...
added prefix method, for more useful Benchmark ...
more existentials
added verbose output
fixed paths on Cygwin
removed fjbg from STARR
Refactored ScriptRunner and the offline compila...
expose the isWin value
factored out the choice of prompt
added 2 failure tests
corrected another typo
corrected typo
displays settings for .NET
added Nik's contrib to script.js
fixed split method on JVM
Fxied test/scalatest to find the assemblies at ...
rehash symbols if their names change
Updated STARR to Scala 2.5.1-final
Synced src/dotnet-library with rev 12018
fixed bug 1174
incremented MinorVersion, deprecated All/AllRef...
Added build support for the J2ME version of the...
Integrated J2ME version of the library as of re...
in BoxesUtility.unboxTo* cast directly to the e...
svn:keywords
added a few hooks so that scalac variants
renamed documenttitle -> doctitle
stop including scalap.1 in the deb, because
factored out the rootImports method
stupid bug: writeRef instead of writeRefs
Implemented synchronous message send for remote...
Replaced -Xscript by -script, so that script files
factored out the creation of the compiler, so that
factored out the command name and compiler comm...
disabled debug flag
added .dll test library (Win32)
Added buffering of msgs in case remote net kern...
Moved Proxy as the last supertype of RichString...
reverted change #11979
added 64-bit library
fixed 2 quirks on .NET
minor change in compat.StringBuilder
minor changes
added test for @native attribute
Improved interface of scala.compat.StringBuilder
Recompiled fjbg.jar for java 1.4
Added patch to allow definition of native metho...
added existential types
new style for-comprehensions, aliases
changed output of constructors under -uniqid
fixed typo in scaladoc comments
updated source links for actors library
minor changes
removed primitive type aliases from the standar...
user decides to add a SecurityManager or not
updated deprecated &f, updated svn:keywords
Final merge from the plugins branch.  The compiler
fixed test file
The AST “Literal(Constant(t))” for t a value ty...
fixed typo
splitted usage message
Added structural subtyping.
Updated STARR to Scala-2.5.1-RC1
deprecated &f, .f, requires.
fixed ilasm test in generated scripts
fixed methods 'urls'
fixed classpath in method runScript
ObjectRunner now recognizes -Xcodebase
renamed nonContinuableError -> syntaxErrorSeen
some debug output for fatal errors during typing
The parser no longer signals "incomplete input"...
encore fix #1163, last one broke fannkuch.
fix #1163
fixed bugs 1160, 1157, 1145
Added Reporter.flush()
fixed bug1144
Capitalized type params in Predef, fixed bug in...
fixed bug in checkKindBounds (type parameters d...
fixed bug 1137
fixed bug 1123
account for new welcome message

Capitalized type paremeter names in Stream and ...
Renamed "interpreter" to "interactive shell" in...
Settings.tryToSet consistently returns its inpu...
added option -Xcodebase
fixed bug1105
added regression tests for bugs 1106 and 1136
minor change
fixed bug1092

changed sort to use a merge sort, and thus perf...
fixed bug1034
files missing from commit 11838
fixed bugs 1143, 1136, 1102
uses _ARGS=%* on Windows NT or newer
Rolling back changes on Namers and Typers.

In the interpreter, compile the source code of ...
- run the cleanup regex for compiler error mess...
import Predef
moved to plugins branch
added call to ilasm in MSIL backend
fixed scaladoc comments
*** empty log message ***
fixed error message for missing *.dll's
*** empty log message ***
pretty print parse trees in AnnotationArgument....
fix to my previous fix for pickling annotation ...
fixed a type error in the pickling of annotatio...

minor change
turn off debugging of type reify by default
Didn't revert enough before.
Added by method to Range, made range configurable.
rolling back tests.
Reverted Range, documented unusual behavior.
Massaging compiler to integrate with IDE, no su...
Updated tests to reflect new range behavior.
Updated tests so they would pass.
fixing bug in iterator, i think
Added a test with an array of integers
Annotations clean up, including:
Renamed Fluid to DynamicVariable
Added standard pattern matches to the comments

Added some explicit quotation marks in the SCAL...
Updated STARR to Scala 2.5.0-final

[1] upgraded buffered iterator to have unbounde...
patch from user contribution
Resolved race condition.
reverted change in build.xml
minor changes
Resolved race condition in Reaction.scala
Rich comparison (scala.runtime.Comparator.equal...
updated check file
Support running individual *.res tests

removed test output
fixed bug1102
fixed bugs 1088, 1091
resolved conflict
fixed itay's problem with variances
updated OSGi manifest headers
oops, undoing previous premature commit
type: wrateRef --> writeRef
documented the pickling of annotated types and
fix^2 bug1111
fixed bug1111
updated examples
fixed OSGi version number
added channels example. fixed pingpong example.
removed unnecessary synchronization
fixed 1106
fixed bug1112
Actor.start() returns this
added missing blank in bundle settings
added OSGi bundle support
fixed bug1107
runtime.Properties -> util.Properties
Fxied some svn properties
Synced src/dotnet-library with src/library rev ...
added missing else block
merged Burak's destructive rev11032 with rev11031
oops, left a println
fixed bug 1103 and Sean's example, making marku...
fixed bug1084

several updates to parallel build.xml:
Updated *-src.jar to Scala 2.5.0-RC2
added property file to scala-library.jar
Updated STARR to Scala 2.5.0-RC2
Added test/files/pos/contrib467.scala
fixed problem with bug1001
</p/>
[#1058] Sabbus warns the user when having less ...
[#1095] Changed Scalac Ant task to use default ...
minor changes
Cosmetic changes only by indirectly all in.
fixed bug related to sequence + new patmat algo
renamed tests for contribs #460 and #461
added tests for contribs #460 and #461
bug contributions fixed 460 461
added library sources for Eclipse plugin
fixed bug
removed some debug prints, simplified phonebook...
added CSS class "source"
Reverted to the Int.{box,unbox}, etc way of box...
fixed bug1090
Added no package support.
Added NoPosition case to printMessage
the logging call I added in 10944 caused an inf...
added scaladoc options
updated Scala comments (code examples, links, o...
pending test for bug 1085
fixed bug 1082
fixed bug with type alias expansion that turned...
Updated STARR to Scala 2.5.0-RC1
fixed incorrect value for generatedType
scaladoc external links
Martin: should normalize return ErrorType for a...
inherited Java methods
corrected typo
svn:keywords
added more external links
added example in Scala comment
New STARR based on rev.
use of old-fashion closure
added missing import
added scala.Range and test cases
fixed check file
Re-added updated auction example.
Added sender and loop methods to Actor class (p...
fixed bug1075
fixed bug 1074
more additions to checknull.
Made mutable.{Set, BitSet} platform-independent
Bumped version numbers for new release.
Small changes
Package scala.actors now included in scala-libr...
Improved ping pong example.
svn:keywords and file headers
Use StringBuilder instead of StringBuffer when ...
added two files
added support for notnull, first steps
Changed Scala's value boxing scheme to be compa...
re-added links to Scala sources
Removed obsolete example.
fixed tests run/bridges.scala and jvm/inner.sca...
fixed bugs 1072, 1067, 1055, 997
Improved test case for annotations with array c...
Turn array of constants into an array constant;...
added data files for shootout tests
added method upto
Adding eclipse meta data.
Updated examples wrt.
Added resetProxy method that replaces an implic...
Make the second argument be by name for getOrEl...
sorry, my previous commit compiled fine using t...
previous change caused cyclic references..
added missing .info to a symbol.typeParams..
generates constant values in API doc
uses new options in scaladoc generated docu
fixed test case.
updated annotations in scala/concurrent
reinstantiated scala.concurrent actors, but dep...
Updated bug533 and functions to use scala.actors.
Updated bug533 to use scala.actors instead of s...
fixed scaladoc option
changed the comment for -Xplugtypes
Use scala.Math instead of scala.compat.Math

Removed obsolete thread pool scheduler.
removed actors & freinds from concurrent
added Java options to test bridges.scala
added scaladoc options and dependency check
Updated SABBUS to also pass nsc.params to Starr...
resintantiated actor
Deprecated scala.compat.Math and move some memb...
[Martin: please review] removed lateParams hack
Removed Actor class
fixed bug 1065
added lateFINAL class to ExplicitOuter
Small fix involving exit of ActorProxy.
Small fix in ActorProxy.
changed argument in &sums
updated self aliases, for-comprehensions
fix of typo
some optimizations. new closure syntax.
updated self aliases, for-comprehension, += ops
fixed the location of the API docs
Added default case to intern.

added resource
added Global.nodeToString
added JVM options on MacOS X
added resource and example
svn:keywords
added Scala environment options
added notes on Java VM
Adapted actor examples to new exit behavior.
no comment...
- problem with normalisation in the back-end wa...
re-comitting
Try to commit each file individually.
Try to commit each file individually.
added a new line at the end, so that hopefully ...
[cont'd] suppress "scala." prefix in string rep...
scala.Int -> Int
updated tests for productElement/-Arity
suppress "scala." prefix in string representati...
updated element/arity to productElement/product...
Removed useless private var.
updated for-comprehension syntax
java options now set for individual tests
added a comment
Changed XML parser to put correct positions in ...
new for-comprehension syntax
Unused local variables are eliminated by dead c...
Switching over to position objects from positio...

use "trait" as the keyword for traits, not "class"
for the parent class loader, choose the class
changed "def close" to "def close()"
small fix in scalatest
fixed bug #1054, added svn props
Added the JAVA_OPTS variable, so that java opti...
added variable JAVA_OPTS to generated man pages
added JAVA_OPTS to Windows batch fileadded JAVA...
fixed bug 1056: due to mixed use of normalized ...
added support for JRE 1.7 and GIJ 4.1
shrunk the interpreter's imports wrappers from ...
shrink the nesting of import wrappers in a few ...
switched to explicit self ref syntax for some f...
added variable JAVA_OPTS to the generated Unix ...
Discard BoxedNumber with -target:msil
Made scala.Collection platform-independent
Improved implementation of BigInt.equals
Cleaned up test/pending/
Moved some test from pending/ to files/
Added descrption of the --pending option of the...
Added 2 test cases in pending/pos
fixed the jvm5/annotations.scala test case
added test for bug #1041
fixed bug1041
"fixed" bug 1040, re-opened as 1046
implementing Martin's suggestions for tcpoly
refactored typer.
changes to parser for 409/877.
updated check files
removed warnings (and tabs)
removed warnings
removed warnings
use ant.home to find ant.jar
rrrh
added early field initialization.
added ant tests, updated headers
fixed bug 1039
renamed arity=>productArity,element=>productEle...
updated ant and cli tests
removed 'addparams'
added pending test for bug 1042
- fixed printout for assignment statements
fixed problem with compiling bug115
more changes to support early inits.
uses singleton type for value global
added unchecked
added options to scaladoc Ant task
added more options to scaladoc Ant task
check for variables in pattern alternatives; ch...
corrected typo
removed test code
updated file headers
adding test files from tcpoly branch without hi...
copying tests from tcpoly branch
merged in tcpoly branch (at r10641)
small changes to supercalls
4-digits numbering
cleanup up imports in Ant tasks
explicit supercalls + new style for syntax + ba...
removed unsealedClass in Definitions
Trying to fix the build....
Checking in everything else to fix the build!
Removing 1.5 specific APIs
- annotations on types use lifted reflect trees...
1.
remove the period from the short name of a symbol
include version info in compiler jar
depend on java-gcj-compat-dev, not just java-gc...
better clean rule

Fxied Stream.dropWhile (bug contribution #410)
fixed bug1013
fixed bug1017
fixed bug1024.
Got rid of warnings
removed Console, added 2 tests
assumes () parameterless if overridden method h...
Checking in, I guess the test failing means thi...
fixed bug 1030
now supports 'build' and 'dists' defined as sym...
Changed BitSet to use default toArray method
overridng toArray to get rid of bug
New scala doc
Revamped scala-doc.
fixed initialization of svn.number property
Synchronized src/dotnet-library with rev 10541 ...
also generates sources tarball
Small refactoring of the Setting classes
Removed implicit use of any java.lang classes f...
Added test case for bug #1020.
Moved pos/contribution_406.scala in pending bec...
Added a test case from contribution #406
ParallelMatching falls back when it cannot gene...
split test files in the original unchanged file...
- added user-accessible settings for the interp...
Removed Iterable.toArray; it conflicts with Bit...
added shootout benchmarks to scalatest
fixed Seq.toString
Reverted toString in Seq, Map, and Set; it now ...
- tweaked two comments
changes check file
fixed bug1014
renamed getOrElsePut to getOrElseUpdate, which ...
- toString() on large collections now only prints
added test for unapply in Streams
when printing an import statement, do not add {...
fixed bug related to default patterns
fixed bug1011
fixed nonsensical warnings
fixed bug1010
added test cases in deeps.scala
edited tests
modified sinsibility checks and test cases
(1) added readLong to Console.
added links to compiler sources
corrected code example in Scala comment
fixed coverage checking to use <:< (Adriaan's b...
Rolled back changes for assignments that carry ...
oops, forgot to add ParallelMatching
new pattern matching algo
Added support in the backend for assignments th...
Major rewrite of optimization phases.
updated STARR to Scala 2.4.0-final
comment updates for various set and map classes...
added Array.deepEquals, improved external links...
reverted last change
added resource 'source.png' in DocGenerator
updated lib/ant-contrib.jar to version 1.0b3 (w...
added ${version.suffix}
Use compat.StringBuilder in runtime.BoxedArray
Catch tail calls made from tail boolean or.
added more links to source files
added external links to library source files
fixed bug1006
added method round to RichFloat/RichDouble;
scala.actors: timer thread survives snapshot/re...
updated STARR to Scala 2.4.0-RC2
scala.actors: added snapshot/restart for Schedu...
fixed bug1008
added Array.deepToString, cleaned up MatchError


at the end of input, return an infinite stream ...
- if a `foo` quoted identifier is truncated, th...
fixed test to new MatchError interface
ok, ne and eq take AnyRef rather than Any.
is an exception now rather than an error
changed test files
fixed bug 1001
partial fix of bug 999
re-fixed bug 1000
reverted bug1000 fix, because it caused wquickd...
fixed problem with build
fixed bug 1000 and david pollaks problem wrt tu...
reenable compiling of scripts
fixed bugs 910 and 995.
fixed bugs 987/988
fixed build problem
updated STARR to Scala 2.4.0-RC1
revised deadcode detection
merged fix from branch
fixed bug #810
added option -Xwarndeadcode
changed one more test file
changed more test checks
@unsealed -> @unchecked
fixed check file for run/bitsets.scala
added more test cases for class BitSet
fixed test case
added unchecked.scala
@unsealed->@unchecked

Corrected javadoc class descriptions
scala.actors: removed commented code
compile the new java files in the actors library
Add java-gcj-compat as an install dependency of...
set regular Java classpath in addition to bootc...
Use the same temporary directory for redicted
fixed 2 bugs in classs BitSet and added scalado...
modification to enable annotated types only whe...
modified annotated types scheme
fixed bug 979
fixed bugs 973,971,949,947,946,930
scala.actors: small clean-ups

fixed problem in build?
fixed bug978
fixed bugs 948/971;
not just saving, but also resetting scanner sta...
HasKeyValue does not work? added pending/jvm/ba...
HasKeyValue for matching on attribute presence ...
double def in SUnit
typo in SUnit
added namespace test
fixed xml02
* small lib addition to testing.SUnit, made Uni...
Better documentation for Enumeration class.
corrected typo
added @serializable annotation to ListBuffer
Small clean-ups
added test for @BeanProperty annotation
renamed test/files/jvm5/attributes.scala to ann...
added scaladoc comment
updated scaladoc comments (links, tuples, ..)
Removed useless InnerClasses attribute when it ...
added code example to scaladoc comment
Made Attributes deprecated and removed subclass...
updated example in scaladoc comment
removed '-Xunapply' option
Revamped the icode analyses and removed some ex...
fixed bug960
fixed bug961
fixed bug968, improved an error message
updated annotations in generated doc
fixed bug #963
made Elem serializable again, added Utility.sor...
Cleaned-up actor examples

Added case to the Empty object.
xml.Elem has now {apply,unapply} !
updated svn:keywords and scaladoc comments
Made BeanProperty an Annotation
fixed exhaustivity check for objects missing "c...

added svn keywords, improved comments

updated tool options in man pages
updated scaladoc comments
* fixed x @ unapplypat binding
updated copyright date
small corrections for duck typing
prepared the ground for duck typing.
updated TypeRef::toString to reflect (...)-tupl...
fixed problem with gadts in the test suite
Removed Pair(...), Triple(...).
Removed obsolete fields in ScalaRunTime
Made Boxed{Byte,Short,Char,Int}.cannonical final
suppressed exhaustivity warnings; fixed bug957 ...
now allows & for by-name params and parameters ...
regenerated TupleN classes so that their toStri...

updated annotations in Scala library
updated STARR to Scala 2.3.3.10048
fixed problem with serialization
fixed slice method
fixed bugs 954/958/957, plus problem with the i...

changes to build.xml
added explicit self defs
scaladoc handles secondary ctors as defs for co...
Included FJ files in build.xml
scala.actors: integrated FJ. added futures.
Reverted to the old attribute syntax for mutabl...
Improved annotations test
generates scaladoc attributes for primary const...

re-enabled stability test; added sections.
fixed unary_ops
Improved ping pong actor example.
Added unary_ primitives
fixed tests
deprecated [...] attribute syntax.
Added support for unary_+/-/!/~ primitives.
more changes to make tuples (...)
changed tuple syntax to (...)
- renamed msil.predef build target to msil
fixed problem with bug640
Added support for compileLate in icode phases.
updated tests
small fixes to newline behavior.
Generate SYNTHETIC attribute for methods and fi...
Generate direct reference to the TYPE field of ...
renamed attributes to annotations; added @syntax.
Preliminary support for building .NET version o...
Added the C# files to src/dotnet-library/scala/...
Made scalac ant task accept .NET-related settings
Forgot to remove some useless code.
removed -nowarn option in scalatest (excepted f...
minor changes in reporters/*.scala
Removed some platform-agnostic files from src/d...
made subtyping decidable.
leave only .NET-specific files in src/dotnet-li...
reinstantiated TreePrinters
Disabled stability test
changed exhaustivity check suppression to attri...
changed non-exhaustivity to attributes
moved encoding value to object Properties
small portability fixes to the library
added missing file headers
updated deprecated methods
Adding wrappers around Java's reference classes.
Created src/dotnet-library from r9912 of src/li...
Replaced the deprecated Seq.concat with Seq.++ ...
clean up, unapply disables any form of exhausti...
Added a reference to Settings in AbstractReporter
Removed the PrintStream version of Stream.print
Use tuple syntax instead of Pair/Triple in the ...
clean up
scala.actors: removed ugly flow control.
exhaustivity reworked
changed pair(...) to {...}
improved MSIL support in the test/scalatest script
removed the executable propertiy from test cases
Honour the -nowarn flag
MSIL-firendly test suit
fixed compilation error in CopyPropagation.scala
scala.actors: removed Exit class.

hacking matcher to death 4 exhaustivity
rewrote list patterns to avoid exhaustivity war...
added comment & test case
deprecated checks moved to refchecks.
scala.actors: exit now works inside loop.
Cleaned-up actor examples.

build.xml: fixed problem building ScalaDoc on J...
refined exhaustivity check
matching: + exhaustivity check, warnings
subClasses => children
added private[this] and protected[this] modifiers.
scala.actors: added some more ScalaDoc comments.
Excluded scala/actors/ThreadPoolScheduler.scala...
added test case 4 select unapply
Reverted to old slightly-less-broken scheme for...
Added test for console class
scala.actors: fixed build on JDK 1.4
fixed Console.printf
made pattern constructors termsymbols
uncurried Console.printf
excludes JDK5Scheduler.scala on Java 1.4
Small updates to collection library:
Build script's SVN revision guessing compatible...
Uncommented printf
commented debug print
reverted more still broke
reverted change, breaks code :/
fixed bug920
1.hacked Typer::typedSelect for unapply, Martin...
small cleanups
added subClasses method to symbols.
fixed flathashtable.

Added unapply

fixed bug in FlatHashTable; intern Symbols; rem...
Changed from HashSet to LinkedHashSet to circum...
moved version/copyright properties from source ...
Added assertion for concrete undefined methods
update STARR to Scala 2.3.3
updated copyright date and address of Scala web...
update address of Scala website
1.
once more.
fixed build problem for Array.make
fsee message for 9732
fixed bugs 900,892, contrib 296.
matching on arrays via unapplySeq
Renamed a function to avoid shadowing.
method Source::getLines
removed the :compile command
test case for unapply gadt evaluator
forgot check file and removed flags file
moved working tests to files

put Scala jar's on the actual bootclasspath of ...
add the version number properties file to scala...
fixed the build dependencies

updated the URL to scala-lang.org
updated STARR to Scala 2.3.2
updated copyright date
updated copyright date in build.xml
updated some commments in interpreter
- Added default constructors for Settings and G...
new tests
Changed back the paths for --quick
fixed bug908
Add a deprecation check for deprecated methods ...
Enable -deprecation while running tests
updated check file
fized bug in FlatHashTable

fixed problems with build.
Fxied bug 909;
Inlined detachActor().
Removed obsolete TickedDebugScheduler and Spare...
Added fast message queue implementation.
Changed sender stack and links to be simple Lists.
don't escape apos in xml
Moved collection test to pending

Reverted Lex's changes until we fix the type ch...
updated check files for cli tests
Added tests for HashTreeSet and HashTreeMap
updated the description with the new list of tools
Tweaked the copyright notice.
- Added HashTreeMap and HashTreeSet
changed BoxedUnit.toString to {} from ()
updated Optiona and Array
Added scheduler configuration via Java property.
When "fsc -shutdown" is requested, do not start...
Spelling fix
- Increased the timeout for connecting to
Replaced some function variables by methods.
Added scheduler based on JDK5 thread pool.
Added faster non-debugging version of basic sch...
added svn:keywords and file header to collectio...
Initial check-in of Java collection library wra...
Changed channels. Removed receiveFrom and Request.
enabled -Xunapply.
warning only emitted with Xoutermatches option
- start prime the interpreter sooner, so that t...
some fixes for unapply:
Support multi-line expressions and definitions ...
Spelling fix
updated scaladoc comments in scala/Seq.scala
Detect when a syntax error could be remedied
lib
Tweaked the help and welcome messages.

fixed bug877
fixed bug875
minor changes in collection/*.scala
Builds again
fixed bugs 880, 877, 876, 875, Added capitalize...
added awk script
added colon to check files in pending
added test case in neg/scopes.scala
added one test, changed to check files.
added colon
Added `:' to after line in error messages; chan...


reverted change to syntheticmethods
removed Xkilloption from ExplicitOuter
cleanup Iterable
Changed the checkfile to match old field initia...
another change to collection libraries
Reverted Nik's changes from revision 9152
changed collection libraries
Commited wrong version of code for libdirs fix
MainGenericRunner program now deals properly wi...
Removed the generic runner script that has been...
finalized the TupleN ProductN change (last dist...
* NodeSeq plays with new Seq[A]
1.

gen
* TupleN extends ProductN, again (genprod updated)
caseclasses implement Product directly
test case, unapply <-> as in "Matching with Obj...
unapply <-> as in "Matching with Objects"
updated values for attribute 'target' in ant/Sc...
small cleanups in xml/*.scala
fixed test case + strict checking for atom
Iterator.mkString
added object Sorting to package scala.util
added Scala comments to scala/Math.scala
fixed dependency test in all build.xml files
added option 'unchecked' in Scalac Ant task and...
added dependency test for Ant-Contrib
added test in neg/scopes.scala
moved from pending
moved from pending

changed Type.toString for unary tuples.
Removed Java5-specific calls from scala.Math
Added various constants to the primitive types ...
updated check files with new tuple syntax
added test for already defined values
added comma in generated Tuple1.toString method
Added values for floating point NaN, Infinity, ...
1. allow trailing commas in tuples; fix of bug 857
more tuples
fixed #855
minor changes
added infix types and {...} syntax for tuples.
fixed bug when matching chars and int
fixed index
run benchmarks with a multiplier
updated genprod.scala (Function1)
implemented infix type operators
added check files for cli tests with '--javac'
updated check files for cli tests
update STARR to Scala 2.3.1
released Scala version 2.3.1
added test for ANT_HOME in build.xml
fixed bug 833
updated test files to avoid illegal null assign...

fixed bug 846.
added infix type constructors
removed leading/trailing tabs/blanks in backend...
fixed case columnNullableUnknown
reverted testing change in DocUtil.scala

more on Xkilloption, and a PM fix
added alphabetic ordered links in navigation frame
fixed incorrect tag in navigation frame
replaced tables by lists in generated API docum...
fixed bug845
fixed validation error in generated API documen...
updated tests.
added navigation frame in generated API documen...
fixed problem with protected
fixed bugs 857, 838, 836
fixed bug 856
added test files for bug835/bug836
fixed bugs 835 and 836.
corrected bug in unapply test case
added cancel capability to nsc
fixed encoding in Scala comment
Removed a DOS-style new line character from tes...
more test cases for -Xkilloption
more functionality for -Xkilloption
testcase for killoption
added -Xkilloption, unfinished
oops
updated Scala comments in scala/Function.scala
fixed bug851
updated method 'andThen' in generated Function1...
removed generation of unnecessary cast in match...
fixed problems with refinements.
renamed directory 'resident' to match '--res' o...
revert2
revert
put the Scala jar's on the JVM bootstrapping cl...
depend on gcj-4.0, instead of gcj
Be careful to use "." as the default user class...
better comment
added some sealed modifiers
enabled disfunctional "sealed" optimization in ...
fixed 2 bugs in unapply tc-ing and definitions
added comment on MAX_<value_type> in generated ...
added 'implicit' modifier in generated API docu...
more fun with positions, and updated doc
more fun with Product.element and positions
product.element index starts with 0
fixed url encoding for internal links to method...
removed case factory methods from listed inheri...
fixed optimization trick in PM
Use StdPhase instead of GlobalPhase where appro...
Allow attributes to be placed on types,
more products, plus some static optimization in...
1. fixed bug834
fixed bug831
Files related to bug reports
For bug838
Blah, SVN is evil.

Adding passing resident tests.
Added support for resident tests
Residents tests for pending bugs that fit into ...
Include the test/files/jvm and test/files/jvm5 ...

Added a setting, as yet unused, for experimenta...

*** empty log message ***

Map.scala: added simple keySet method.
Added support for java dup_x1/2 bytecodes plus ...
updated STARR to Scala 2.3.0
Restored Predef.unit2ordered
removed space in argument of ambiguousError
removed unchecked test.
fixed errro output and tests
fixed bug that caused scalatest to break
1.
fixed bug 831
Added a rich class for every primitive type
Removed some commented debug printlns from Byte...
unapply code in typer needs call to memberType?
Checked-in enhanced debugging support for actors.
Small bugfix.
Added support for modules in icode reader.
preserving position in adapt -Xunapply extension
indexOf(fun) => indexOf(elem), moved indexOf(el...
Minor portability fix in BoxedObjectArray
fixed syntax error in Infer
fixed bugs 802 and 807 (recursive lub problems).
Removed scala.Nothing$ and scala.Null$
updated STARR to Scala 2.2.0.9278
Include self-test in the synthetic equals metho...
fixed bug 798
undid fix to bug798 to make the  build work again.
fix bug#825
Small fix in actor exit code.
fixed bug798, 800

improved output of inherited members in DocGene...
Implemented proper behaviour for sth == null an...
Implemented RichString as Seq[Char] and Ordered...
Resurrected All & AllRef as aliases in Predef
Use scala.runtime.Nothing$/Null$ instead of sca...
Only shortcut nulls at the LHS of ==
improved generation of inherited members in Doc...
Removed platform-specific methods from RichChar
Changed BOX/UNBOX to use TypeKind instead of Type.
Small refactoring of Reaction.
updated scaladoc comments in actors/*.scala
fixed anchors for Java methods and overriden me...
Made other schedulers non-abstract again.
Cleaned-up actor examples. Added OrElse example.
Renamed new iterator example.
Removed old iterator example.
Minor beautification of iterator example.
Cleaned-up new iterator example (automatic term...
updated scaladoc comments in scala/Iterator.scala
Replaced == null()eq null(ne null)
issue #806, #811
Improved the fix and test case for bug #819
updated scaladoc comments in List.scala
Added test for bug 891 (unboxing and promotion)
improved scaladoc comments in List, collection....
added missing '+' operator in DocGenerator.scala
improved handling of scaladoc comments
fied bugs 815,816,817
improved scaladoc comments in Erasure.scala
Removed java.io._ imports from the test suite
Improved @throws in scaladoc comments
Replaced java.io._ with specific imports
fixed bug 803, 805, super accessor problem.
added list of inherited members in DocGenerator
added pages for Nothing and Null in DocGenerator
moved cmdOptions into if-test in FastScalac.scala
completed descriptions of primitive types in Do...
corrected output of function types
Added exception logging.
Made lower bounds in type parameters show corre...
added pending reactions to prevent scheduler fr...
removed Ant tests from auto mode until path pro...
joins5.scala terminates automatically.
added termination check in scheduler.
added Ant tests to auto mode
added ant task "FastScalac" and updated test su...
improved code generation for (in)equality tests...
removed leading/trailing tabs/blanks in typeche...
test cases for unapply
contd: revisited fix #796 + ident handling for ...
revisited fix #796 + ident handling for unapply...
removed last traces CaseClass and fixed #796
removed CaseClass
scala test suite also contains jar files!
Use platform-independent boxing/unboxing in Box...
updated STARR to Scala 2.2.0.9153
Added comment.
Improved class-level value initialization
Platform-independent boxing/unboxing
caseclass->product
Compiled with java 1.4
fixed inclusion of scala-dbc.jar in the built p...

use a simplified script for Debian

scalaint is now part of the scala script
more info in an assert
Added new actor example.
Speeding up EQ for Contexts when comparing to N...
removed deprecation warning in ast/Trees.scala
Added missing import in RichException
Classes in the empty package are found now when...
Some of these haven't changed, but SVN is too s...
More hooks for the IDE.
Forgotten file, belongs to the previous commit ...
Added a value for Java static inner classes to ...
added tests for rich characters
Removed semicolons (copy-and-paste leftovers) f...
- added runtime.RichException with a getStackTr...
Committed my original version of RichChar
Removed default constructor for java classes wi...
added missing file scala/runtime/RichChar.scala
enabled isinstanceof of intersection types (fix...
Refactored portability support
allows intersection type patterns
useless stuff
fix^2 of bug758 (last one broke the build)
fixed bug758
fixed bug762
added method Predef.Tuple for type Tuple1
Removed some commented code.
fixed bug756
fixed bugs 729, 752
minor cleanups in classfile/Pickler.scala
fixed bug729
fixed bugs 599 and 757
added option '-deprecation' in scalac man page
fixed bug421
fixed bugs 54, 415
added healing for escaping singleton types.
* (unapply) fixed accessor handling for product...
* handles unapplySeq
support UnApply in pattern matcher.
changed unapply impl
fixed product
added "looseset"
moved bug779.scala from pos to neg
testcase 4 unapply
removed warning in WordBerrySethi.scala

fixed problem in fix to bug783 that causes buil...
More tests for protected accessors.
fixed problem in findMember
depr rem
unapply patch
removed deprecation and some unapply stuff
fixed bug783
fixed bugs 779, 788
Added protected accessors in super accessors.
fxied bug788
adapated tests to 9005
fixed bug54
added option '--use-fsc' to test/scalatest
Updated type patterns in DBC to use wildcards.
Mapped Java exceptions via scala.compat.Platform
still bug
added Philipp's example to docs/examples/actors/
added deprecation attribute to quick and star t...
updated STARR to Scala 2.2.0.9025
separated constrs/defs tables for primitive typ...
Warn for Java annotations without -target:jvm-1...
reverted 'const' to 'var' (syntax not supported...
improved ant test in test/scalatest
added svn:keywords to test/files/ant/*
added '--ant' option to scalatest
updated check files for tests
fixed bug780
fixed bug784
fixed problems in type patterns
added assert
added FJBG classes to doc/script.js
added 'deprecation' flag to ant/Scalac.scala an...
added support for typed patterns
added experimental support for primitive types ...
comment
fix 781, nullpointerexcs in matcherror
abstractfile api + small cleanup
added Ant/Eclipse classes in nsc/doc/script.js
added more Java classes in doc/script.js
commented error message "BAD_FILE: .." in util/...
removed no longer used directory tools/ant/reso...
fixed bug #773 (scaladoc)
added handling of zip entries
Added ? operator.
Added .tpe for symbols.
* Added support for accessing files directly
changed location of diff files in scala-test-xx...
improved Scala test suite on Windows (scalatest...
added more comments in scala/xml/Utility.scala
xml improvements for 2.2.1 (see changes)
improved error localisation in markup parsing
changed "All/AllRef" to "Nothing/Null" in test/...
fixed both methods 'reportError' in scala/io/So...
pending status for bug646
removed some more semicolons..
fixed #774, xml patterns and error handling
fixed bug #774
improved comments in scala/collection/*.scala
corrected copyright notice in script templates
released Scala version 2.2.0
updated STARR to Scala 2.2.0
reverted changes made in doc/style.css
checkfile
removed hand-coded "Direct Known Subclasses"
fix
Added 'Direct known subclasses' feature to scal...
cleaned up comments in scala/xml/*.scala
attribute nillable
attribute nillable
cleaned up comments in scala/actors/*.scala

updated docs/examples/*.scala
Included proof of deadlock-freedom in Scheduler...
exceptions
Adapted examples.


Made some test cases platform-independent
added svn:keywords to scala/actors/*.scala
Moved Java-specific tests to test/files/jvm/
Adapted actor examples to changes.
Removed ThreadedActor as special case of Reactor.
Event-based actors now allowed to call receive.
cleanup + xml:group feature
updated
cleaned up comments in symtab/Names.scala
added svn:keywords to scala/actors/*.scala
modified escapedStringValue and cleaned up comm...
wildcard types are in there now.
added type-machinery for wildcard types
Moved scala.runtime.compat to scala.compat
more changes towards wildcards
towards getting wildcard types
removed a negative test that succeeds now
introduced type approximations instead of malfo...
fixed OS-specific variables in test_run_jvm() o...
renamed All->Nothing, AllRef -> Null while keep...
fixed problem in fix of bug764 that broke dist
TreePrinter and Types now use escapedStringValu...
fixed bugs 764 and 771
fixed bug767
fixed bug766
fixed bug764.
fixed method toString for character constants
In List.filter - prevent the second evaluation ...
fixed method toString in class symtab.ConstantType
fixed bug763
cleaned up Scala comments
small fix for tag comments in doc/DocGenerator....
cleaned up Scala comments in scala/tools/nsc/*....
cleaned up code and comments in scala/testing/*...
updated man page for scaladoc, improved Scala c...
Added -Xexperimental flag
Improved type inference for method signatures.
fixed bugs in ListBuffer and ArrayBuffer, added...
Added ping pong example.
Small clean-ups.
removed Scala attributes '_mixin_' and '_trait_'

fixed boolean2ordered
removed leading/trailing tabs/blanks in collect...
minor cleanup
improved comment
added -= method to Buffer
added tag 'exception' in DocGenerator.scala
fixed multiline descriptions in scaladoc tags
rewrote handling of Scala comments in DocGenera...
Added scaladoc comments to most of the public t...
Clean-ups and new example for usage of input ch...
Added method for defining an actor with a (type...
Added example for actor linking.
Added actor linking.
Checked in examples for new actors lib.
Checked in new actors lib.
removed leading/trailing tabs/blanks in typeche...
Removed old actors lib.
removed leading/trailing tabs/blanks in typeche...
overrides method apply in class SubstSymMap
improved Scala comments in runtime/*.scala
added code example to Scala comment in scala/Fu...
writes 'tmpfilename' to directory 'outputdir' i...
corrected line separator in ast/TreePrinters.scala
minor changes to transform/Constructors.scala
removed leading/trailing tabs/blanks in nsc/uti...

improved Scala comments in symtab/Types.scala
improved Scala comments in scala/concurrent/*.s...
Changed -cp to -classpath to make it compatible...
Changed the scaladoc comment of foldLeft and fo...
Implemented /E lifting
simplified printing of refinement types -- no m...
added generation of attributes in scaladoc
revert for 1.4 compatibility
reintroduced overwritten changes in Global.scala
removed leading/trailing tabs/blanks in nsc/io/...
reverted name change in xml/Document.scala
removed leading/trailing tabs/blanks in scala/x...
reorganized scala.tools.nsc.io!
Added test for inner classes compatibility from...
Made InnerClasses attribute default
fixed bug749
fixed typo in generated scaladoc tags
- check for errors when using the compilation d...
fixed bug 421.check file
Compile scripts within the "scalascript" packag...
removed temp.fix (quickdoc)
Added a local variable for closures' apply meth...
fix^2 bug748
fixed bug748;
removed leading/trailing tabs/blanks in scala/c...
removed "-Xnofancymatch" option
fixed bug746; removed some costly msgs in asserts
fixed bug724
removed leading/trailing tabs/blanks in scala/u...
fixed bug725
fixed bug743
fix^3: bug744
removed diagnostic
fixed bug744
added '-nouescape' option to scalac man page
removed leading/trailing tabs/blanks in typeche...
added option nouescape
fixed problem in test4

added command option 'pack' to man1/sbaz.scala
fixed bug741

updated nightly build scripts
removed leading/trailing tabs/blanks in parser/...
removed leading/trailing tabs/blanks in typeche...
make the default printer sensitive to changes i...
reenabled outer
updated file bug708.check
Removed Predef.Array*
removed leading/trailing tabs/blanks in scala/L...
Small refactoring of the collection library
temp.fix: task "quickdoc" uses "starr.classpath...
commented Console.println in transform/Explicit...
fix intswitch
fixes to ExplicitOuter to pass test suite
Print to Console.out, not to System.out
Set Console.out to point down the socket while ...
Made Console.out and Console.in public
Another fix to explicitOuter
moved mixin constructor generation from explici...
changed explicit outer scheme
replaced 'Predef.Array' by 'Array' (and Java 1....
print "defined trait Foo" instead of
fixed doc comment
fixed doc comment
rebuild checkers (not there yet)
rebuild checkers (not there yet)
changed behav of caseElement
throw exception in caseelements
removed leading/trailing tabs/blanks in scala/x...
removed Molecule, useless
changed pp
xml changes
removed leading/trailing tabs/blanks in icode/G...
test cases for outers
added indexOf method to Iterable, added squeeze...
added Seq.isEmpty and changed XML representation
removed leading/trailing tabs/blanks in symtab/...
prelim outer stuff
retrofitted Predef.Array
retrofitted Predef.Array as suggested by Martin
reverted to revision 5874
added ArrayModule in symtab/Definitions.scala
Moved Predef.Array* to scala.Array.apply*
fixed invalid HTML code produced by DocGenerato...
test cases
fixed typo in doc/DocUtil.scala
removed leading/trailing tabs/blanks in *.scala
fixed bug726

fixed bug715
fixed bug 719
removed leading/trailing tabs/blanks in symtab/...
allowed access to locals after explicit-outer
obsolete
merged explicitouter and transmatch
fixed bug718
slight modification to implicits search
fixed gilles problem with spurious recursive types
removed leading/trailing tabs/blanks in symtab/...
added group and changed metadata

fixed bug 722
fixed problems with implicits

fixed bug720
Implemented proposed syntax change for procedur...
Refined internal error message
test case for 717
1. Added by name functions and nby-name implicits
cleaned up code in matching/*.scala
added option -Xdetach
pattern matching deals with outer instances now
removed leading/trailing tabs/blanks in symtab/...
reverted to Predef.error
reverted to Iterator.range
cleaned up code in library/scala/**/*.scala
removed leading/trailing tabs/blanks in ast/*.s...
scala.xml.metadata change
bugfix + comment
removed leading/trailing tabs/blanks in typeche...
removed leading/trailing tabs/blanks in Infer.s...
Made the constructors of inner classes compatib...
* Removed position dependency from class file f...
removed leading/trailing tabs/blanks in transfo...
Moved bug680.scala to files/jvm5
removing debug prints.
Eliminated need for extra global class so Globa...
Modified scopes and positions so they can be co...
fixed bug 710.
added if-test in method typedSelect of typechec...
catch NoSuchMethodException, not NoSuchMethodError
Updated jars to target java 1.4 and work on 1.4...
test that the main method is static, and throw ...
make filenames and paths be absolute before pas...
made absFileName publicly available
added svn:keywords to file mutable/LinkedHashSe...
distribute jars of the source files
distribute source jars instead of source hierar...

added missing links to fsc, .. in man1/sbaz.scala
Changed huge match in icode reader to generate ...
updated STARR to Scala 2.1.8
removed leading/trailing blanks/tabs in symtab/...
fix^2 of bug687
fixed bug687

fixed some more bugs.
Added -XinnerClasses option to turn on (default...
Removed SYNTHETIC flag from '$this' arguments f...
added if-test before debugging info in file Mix...


Changed super.T in asSeenFrom



Added toString methods to refs.
making -g:vars the default.
Enhanced error reporting to not eat stack trace.
fixed bug 704
fixed problem in 8415 that caused bug577 to fail.
fixed bug 708.
build the fsc manual page
[Cygwin] splitted big match expression into 3 p...
removed leading/trailing blanks/tabs in nsc/tra...
mangle symbols that are qualified private up to...
allowed access to provates between a class and ...
removed the debug options from the fsc man page.
Added test case for bug #404
Removed the svn:executable property of some tes...
Added test cases for bugs #325 and #676
Improved the fix of bug #676 - only emit interf...
removed -Xgadt option in scalac man page.
Added initial icode reader.
Added initial icode reader.
Added InnerClasses attribute in classfiles

eliminated -Xgadt option.
fixed bug698
removed leading/trailing blanks/tabs in icode/G...

added contrib #176 to test file run/literals.scala
Changed TIMEOUT into case object.

fixed error in opt.
cleanup + little opt for object compare
Removed "patch" hack in SABBUS.
Removed ambiguity on "Console" when necessary t...
Removed -Xshowicode which is now taken over by ...
Generate SYNTHETIC flags.
given that pattern matcher catches dead branches,
fixed unreachable case statements
commented out case with unreachable code
reenabled dead-branch checking
Small clean-ups.

Resolved deadlock and stack overflow problems i...
added comment about backwards-incompatible change
updated STARR to Scala 2.1.7patch8283
fixed test for scriptFile in ScriptRunner.runSc...
removed leading/trailing tabs/blanks in nsc/mod...
Made DebugSetting behave correctly when 'value'...
changled handling of gadts

version separator is now configurable and defau...
added details for -g option and default values ...
removed more references to "scalaint"
updated some references to "scalascript" and "s...
add a -d argument if one is not specified
tweaked the -version strings
removed leading/trailing tabs/blanks in transfo...
Added -g detailed option.
Changed to print more symbol information
added svn:keywords to actors/threads/*.scala
Added thread-based actors to scala.actors.
-J<option>, e.g. -J-Xms48m
added target 'binaries' to build.xml
moved trait Reactions to package 'scala.actors'

added tests for bugs 663, 667
fixed tests bug664 bug668

fixed bug 674, reverted fix to bug 669
Removed case class constructors from the mirror...

removed 'toolflags' parameters for fsc in build...

changed "ls -L" to "ls -d" in Unix templates
do not waitFor a newly spawned process -- that ...
fsc prints more info messages with -verbose option
updated STARR to Scala 2.1.7
release version 2.1.7 of the Scala distribution
reintroduced SCALA_HOME assignment in 2nd cygwi...
removed leading/trailing tabs/blanks in nsc/Com...
improved command for compile server (contrib #168)
added support for paths containing blanks on Cy...
removed more leading/trailing tabs/blanks in Cl...
removed leading/trailing tabs/blanks, added hea...
Updated all SVN properties.
Removed debug print
commented out println in CompileSocket.scala
fixed (quick fix) handling of arguments in nsc/...
added quotes around variable _BOOT_CLASSPATH
removed leading/trailing tabs/blanks in transfo...
completed fsc options in man pages
Parameterized Actor[T].
removed some diagnostic output
added event (pull) parsing
fixed EOLs for Windows batch files
try exec-ing "scala.bat" if "scala" by itself d...
EXTENSION_CLASSPATH now contains both files/dir...
fixed bug657.
documented -nocompdaemon and -D
Refactored actors lib.
Updated actor examples.
updated the help message
updated the entries for the JAVACMD environment...
note that -J is unimplemented
Removed unnecessary import clause from scala.te...
don't use the compilation daemon during testing

- try to use scala from ${scala.home}/bin if av...
added a missing return
added the option to compile using the fsc compi...
- added -nocompdaemon
moved deleteRecursively out of class Interprete...
- made password one word, not two
- added unparse methods
Copied scala.tools.util.UTF8Codec into scala.io
Added pickler combinators to scala.io
added fsc
added -D for defining Java properties
tweaked the loop over possible settings so that...
reverse the order of guesses about howtorun: fi...
updated svn:keywords for man1/fsc.scala
updated svn:keywords and header of TypingTransf...
added a caveat to the -server option
removed obsolete automata stuff
fixed bug #644, removed onsolete field doBinding
Added typing tree transformer framework
more fix, more optimization
documented -savecompiled
added test for bug #389 (symbol literals)
Made fsc safer and scriptable
fixed bug #654 and removed generation of an unn...
Create DocDefs only in doc mode
fixed bug #647 / right ignoring patterns, added...
- Made attributes applicable to parameters
do not proceed if there is an error processing ...
-savecompiled is now an option that is off by d...
added a -savecompiled option
ChoiceSetting's do not consume options that are
tweak the loop over settings,
added import for compat stringbuilder
more replacements of StringBuffer to StringBuilder
fixed method SpecialNode.toString in DocGenerat...
removed dependency on Predef (int -> Int,.. !!!)
added fsc to the man pages
replaced StringBuffer with compat.StringBuilder...

fixed bug652
added tests for bug650, bug651
removed string operations from assert in transf...
fixed bug651
moved bug649.scala to neg/ directory
fixed bug650
fixed bug649
1. removed blank lines in error messages
removed leading/trailing tabs/blanks in transfo...
Added parsing of Java annotations applied to de...
Reimplemented strict Java annotation checks (my...
removed leading/trailing tabs/blanks in nsc/Com...
removed leading/trailing tabs/blanks in matchin...
Created a directory test/files/jvm5/ for test c...
Prefix boolean Bean properties with 'is' instea...
added assert in transformClassTemplate
removed leading/trailing tabs/blanks in typeche...
removed leading/trailing tabs/blanks in ast/par...
removed leading/trailing tabs/blanks in ast/Tre...
added test for bug #648
cleaned up code in nsc/ast/Trees.scala
test files for more xml parsing-extension
cleanup and slight extension to xml literal par...
liftcode now handles more trees, albeit the sym...
transmatch creates proper context for typer, an...
fixed broken toString method
removed obsole name CharData
renamed MainScript to ScriptRunner
cache compiled scripts in an associated .jar file
make classfilePath be public
fixed a spelling error
removed leading/trailing tabs/blanks in transfo...
when zipping files together, use buffered reads
removed leading/trailing tabs/blanks in transfo...
removed leading/trailing tabs/blanks in transfo...
commented out useless stuff
namespacedefault is not needed anymore
removed leading/trailing tabs/blanks in nsc/ast...

also display version number when build is stabl...
updated cli test, added test for multiline strings

Disabled search implicits and tryTypedApply whe...


removed leading/trailing tabs/blanks in symtab/...
fix #645
removed leading/trailing tabs/blanks in file tr...
Moved resetAttrs from UnCurry to Trees
Added a new method 'browse' which takes an arbi...
Small refactoring of ResizableArray/ArrayBuffer
added explanations
Improved attribute checks
fixed method 'text'
cleaned up import statements in src/actors/ files
Small clean-ups in actor library.
temporary fix (';' required !?) in Node declara...
added svn:keywords and file header to files in ...
Resolved conflict in actor example.
fixed class name in example actors/counter.scala
Corrected comment about the state of the AST fo...
added missing check file for scaladoc
removed 'mixin' from files in docs/examples/
fixed bug #638
tweaked the output and the check file

1a.
Do not suppress ClassNotFoundException, NoSuchM...
added -cp as an abbreviation for -classpath
removed leading/trailing tabs/blanks in library...
removed an extraneous "env"
document the classpath handling
- put manpages in a "man1" directory
be clearer about the ability of JAVACMD to incl...
Renamed 2 files in the actor library to prevent...
Prevent a conflict between [scala.throws] and [...
implemented test_add_file()
added package name to actors examples
Added actors library.


adapted to new closure syntax
Corrected a bunch of problems with the clitest ...
Added a 'blocks' member to ExceptionHandlers wh...
initial version
fixed "tail of empty list" error in file Synthe...
*** empty log message ***
*** empty log message ***
updated check files for clitest
Runner scripts should now be compatible with So...
removed leading/trailing tabs/blanks in file Al...
oops, forgot condition
removed delegateSequenceMatching var
cleanup
proper handling of array(xs@_*)
added code for lifting valdef
updated check files
Changed compile server to make it more robust;
updated STARR to Scala 2.1.6
released Scala version 2.1.6
updated check file (stacktrace changed with Mai...
use getMethod("main",blahblah) instead of getMe...
- changed the unicode method identifier to be a...

changes to comments
fixed optim of Array(xs@_*) but broken elsewhere
fixed "guess" test in MainGenericRunner.scala
scalascript-->scala
added header and svn:keywords to files *Generic...
adjust the generated tool scripts to replace sc...
removed scalascript and scalaint
removed scalascript and scalaint, and adjusted ...
adjusted the syntax to be compatible with exist...


- added args as an alias for argv

split main in half, so that the second half can...
fixed target directory for man pages in build.xml
Requite the keyowrd 'val' in the extended attri...
generate manual pages from Scala code
Removed outdated man pages.

implemented BulletList, NumberedList, and Title...
use this's class loader, not the system class l...
updated svn:keywords for files in src/manual/
modified css-style in file EmitHtml.scala
always generate doctype information
rewrote the man page to describe a new command ...
Improved error handling for name-value pairs in...
removed leading/trailing tabs/spaces
removed leading/trailing tabs/spaces
Generate Nil for List()
Generate Nil for List()src/compiler/scala/tools...
Extended Java annotations support
Extended Java annotations support
moved docs/man/src to src/manual and updated bu...
Updated all SVN attributes in the Scala core mo...
fixcrlf called for man pages only
Hack-fixed the FSC compiler to handle boot clas...
All "scala*" scripts put the Scala library in t...
Corrected broken build (under IBM J9 VM): EOL f...
also includes *.args files in package scala-test
reactivated call to 'load' in file DocGenerator...
added CmdOptionLong in file man/man1/Command.scala
change def to val

added description in sbaz man page

tiny cleanups
small changes to make lintian happy
- use simpbuild.xml instead of build.xml
*** empty log message ***
*** empty log message ***
minor correction in sbaz man page
added man page for sbaz
use the standard ASCII apostrophe character for...
specifiy /bin/sh, not /bin/bash, since bash is ...

*** empty log message ***
added man page for scalap
better exception handling when generating man p...
now copy generated man pages to the distribution
There is no unecessary output on stderr when bu...
added scalaint internal commands to description
added Scala project to build HTML and man pages
added command 'fsc' for scala.tools.nsc.Compile...
added scala compile server
space leaks are plugged (remove test in Main)
space leaks are plugged
some changes to plug space leaks
some changes to plug space leaks
using the root package in order to avoid select...
some changes to plug space leaks
handle array literals as arguments to attributes
added check files

fixed bugs 616, 617

added missing check file for bug #429
added missing check file for bug #441
fixed bugs615 and 617
removed semicolons
adapted script fact.scala to Cygwin
fixed bug609 -- super accessors and separate co...
added a test case for scalascript
Some more changes to fix 605
updated STARR to Scala 2.1.5
released Scala version 2.1.5
fixed classof -- only class typed can be generated
fixed error in file selection for scaladoc
create a copy (and not a link) for "latest" on ...
removed leading/trailing tabs/blanks in file sy...
added a scaladoc comment for classOf
updated man pages for the Scala 2 commands
added some methods
Cleanup bug 605
removed hidden NFS file
Clean ups fro bugs 605, 508
generalized save(.,.) method, encoding, write x...
added saveFull method
fixed bug #610
removed leading/trailing tabs/blanks in file ns...
commented out debug message in file nsc/symtab/...

updated svn:keywords for some files in backend/...
Added check files for 2 new test cases
Added scala.throws(java.lang.Class) attribute t...
Even if beQuiet was specified, still print out ...
close the interpreter in before exiting, so tha...
print error messages using line numbers in the ...
added compileSources()
Print source positions in the underlying source...
- added two new kinds of SourceFile's: Compound...
*** empty log message ***
*** empty log message ***
*** empty log message ***
for the subArray method in all the boxed array ...
updated svn:keywords properties
updated file scala/tools/nsc/MainScript.scala t...
Treat Java enums as constants - allows their us...
fixed a tiny typo in a comment
Added support for emitting Java annotations int...
Improved CLDC support
bug fixes
TAR archive generate by SABBUS stores correct p...
cope with Interpreter.compile being renamed to ...
added compileString() and bind()
tolerate 0-length writes
commented back in CharArrayFile.read ; if someo...



fixed error in file build.xml
fixed error for Cygwin in file templates/generi...
Seriously cleaned-up the build script.
Bug fixes
updated SVN header in file nsc/transform/CleanU...

new STARR.
fixed error in file templates/generic-unix.tmpl
removed xsd stuff

opt=true
Bug fixes
Added fjbg.jar contents to the scala-compiler.j...
fixed classpath for library file fjbg.jar (for ...
Implemented class constants in the backend.
added target 'dist.nightly' in file build.xml
Added closure elimination phase (experimental).
added hrefs to classes of Java API using JavaSc...
Changed array unboxing to use classes rather th...
added support of class literals
added zipWithIndex to several collection classes
added a comment about variance in the type para...
added target 'dist.quick' (no tests and docs) i...
added if-test in skipComment (bug #585)
added if-test in skipComment (bug #585)
removed unused variable SCALA_SCALA_ARGS in fil...
Added a 'cldc' target for J2ME CLDC 1.0
Added a 'target' option
Scala release 2.1.4
fixed destination path in batch file test/scala...
Added neg/bug520.check
fixed bug 581
measured size of pickled data
fixed bug 577
removed leading/trailing tabs/blanks in file ns...
removed leading/trailing tabs/blanks in files C...
1. fixed bugs 578+579
updated copyright notice and removed semicolons
replaced Cygwin diff.exe with GNUWin32 version ...
removed leading/trailing tabs/blanks in file Sy...
removed leading/trailing tabs and blanks in fil...
added loadString

added batch file test/scalatest.bat
added subroutine 'set_home' in batch commands

updated batch files to work on older Windows sy...
improved script test/clitest
uncommented override var
possible fix of presentation compiler crashes

updated 2 check files for script test/clitest
cleaned up interpreter code
Removed the special treatment of scala/runtime/...
fixed check error for option '--jikes'
corrected errors in script test/clitest
tiny change to produced/consumed for CALL_METHOD
signal a build failure if the compiler reports ...
Corrected bug #569.
comment
dont munch exception
added CLI tests for Jikes and the J9 VM (IBM)
Simplified runner scripts just a bit.
changed value of property 'copyright' in file b...
updated Ant build file for testing Scala examples
added instructions for installing Sun Java on D...

minor description edit
released version 2.1.3 of the Scala distribution
Removed support for Java files in the compiler
added options '-windowtitle' and '-documenttitl...
Moved some files from scala/tools/util/ to scal...
Added some tests
1. Allowed local implicits
Deleted files in scala/tools/nsc/io
Rewrote the files in scala/tools/util/ in Scala
Introduced properties for the individual source...
added attributes 'source', 'target' and 'deprec...
Replaced pico with javac
Added 'loop header' field to basic blocks to ea...
Removed scala/Ref.java
removed leading tabs in files scala/tools/nsc/s...
Commited a new reference compiler to rectify th...
Rewrote All$ and AllRef$ in Scala
Removed the unused scala.runtime.{IOMap,FHV_Has...
Cleaned up Definitions
corrected indentation in files scala/runtime/Bo...
added new pending test case
Removed the source for the primitive types; cre...
fixed bug562 and bug563
fixed bug562 and bug563
added timer for target 'dist' in file build.xml
changed how a Fluid's  ThreadLocal instance get...
updated script 'test/scalatest' to also work wh...

Cleaned up the box classes
Removed unused methods from the code of the pri...
Removed unnecessary primitives for scala.Unit
Updated STARR to Scala 2.1.2
API for DBC is built again.
Antlib now also declares Scaladoc.
Renamed Lattice.scala to CompleteLattice.scala ...
Cleaned up the code of the primitive types
added material for building Debian packages
Added --installed
added --installed and --quick
released version 2.1.2 of the Scala distribution
added more functionality to test/clitest
added conversion from methods to functions usin...
added conversion from methods to functions usin...
Renamed phase 'Codify' to 'LiftCode'.
fixed several old bugs
replaying no longer adds to the replay list
added test case for contrib
[backend] Do not treat equals,hashCode,toString...
added missing cases for Star()
comments, plus little spec-conformance fix to d...
more like spec now
fix of #560, continued
Removed all tabs in DBC library source.
ise toByt, toShort, etc instead of coerce
added test case for xml lib
test case for xml library
added :replay to the interpreter
fixed bugs#440,#560
added (simple) test script for testing Scala co...
replaced ${*.dir}/${exec.dir.name} with  ${*.ex...
Exec Scripts (scala, scalac, etc.) are generate...
Updated UNIX script templates to be Posix Shell...
renamed args to ts
renamed mkSequence to mkArrayValue
Updated STARR to Scala 2.1.1
fixed svn properties of NonLocalReturnException...
corrected link to sbaz universe in **/build.xml
released Scala version 2.1.1
corrected "%1"=="" to (%1)==() in file generic-...
reintroduced attribute 'bootclasspath' in Ant t...
added sbaz package 'scala-test'
Automatic file encoding detection is now Java 1...
Moved the retsync.scala test to test/files/run
Added a --pending option to run the tests in in...
Rearranged directories in test/pending/
moved pending/ to test/
moved to test/

fixed bugs 555, 432
Added BoxedArray.toArray method to override Seq...
Moved codification to its own phase.
fixed bug 556
Scalac now uses the default character encoding ...
Updated checks so that test suite suceeds.
Modified Scalac settings so that, when not used...
Not touching source code in scala.runtime, its ...
1.
moving the interdf code out of the compiler/lib...
minor corrections to the consumed and produced ...
undid import Predef._, after resolving dependen...
undid consolidation in object XML, and added im...
consolidated constants in object XML
removed type alias for uniformity
removed some type aliases form uniformity
handle xml:space in printing
handle xml prefix now
added binding for xml prefix
Changed Fluid.set to Fluid.value_=, per a sugge...
- split MaintInterpreter.scala into two files
for continuations
added library scala-dbc.jar to package scala-li...
added header in file scala/tools/nsc/EvalLoop.s...
Added inlining phase, fixed some bugs.
fixed missing link when generating advert file ...
removed placeholder packages in file scala/buil...
hide stack trace in error messages when handlin...
corrected initialization of variable _USER_CLAS...
added support for abbreviated commands in file ...
adapted Window generic template to correspondin...
removed Windows eol in file test/files/neg/bug5...
fixed a typo
Better print support, now even for polymorphic ...
corrected Windows tool template to match corres...
Quick hack so that polymorphic types are printe...
removed 'scala.class.path' from classpathDefaul...
removed unsubstituted properties in Windows tem...
adapted Windows templates to changes made in th...
The compiler now takes care of its parameter cl...
Corrected scripts to circumvent class loader bu...

added header and author in file scala/util/Flui...
Added a Fluid class, and used it to allow console
removed duplicated test 'if $cygwin ; ..' in fi...
Exception thrown by the very last instruction i...
1.
Updated STARR to version 2.1.0 (release).
changed '~dp0' to '~dps0' in the Windows templa...
1.
updated contents of file docs/README in module ...
convert value of variable SCALA_HOME on Cygwin
added missing file scala/runtime/NonLocalReturn...
1. Added a range method to Array.scala
released version 2.1.0 of the Scala distribution

chanded eol encoding in files/neg/bug545.*
added a missing pair of ""
corrected handling of version number in build.xml

unix script to call the interpreter
Add the compiler's classpath to the Interpreter...
Add the compiler's classpath to the Interpreter...
added license and readme files to the doc
In the scalaint script, define scala.boot.class...
Added parent classloader to interpreter
Improved the efficiency of Iterator.filter and ...
Removed broken navigation links.
added DCode
fixes bug #502
oops, adding makeBind(.) didn't actually work
added a makeBind(.) around pat to resolve bug #548
propagate property 'version.number' to all depe...
changed 'mixin class' into 'trait' in docs/exam...
added '-' in property 'time.short' to be sbaz f...
removed asList, change \
changed ThrowMatchError stuff
changing asList to toList
disabling sequence pattern parsing (a,b)
disabling isInstanceOfErased
prtty printer update plus node::\ method
Improved scaladoc comment for class CountedIter...
1. Added a BigInt class
better NodeSeq
changed XHTML tags to lowercase in src/compiler...
added rudimentary support for import statements
undo a testing hack
allow reading and writing to arbitrary streams,...
fix the classpath for the "quick" scalaint script
added a toArray method to Seq.
Reverted back Stephane's incorrect changes to t...
updated file 'build.number' in SVN trunk 'scala'
uses major/minor/patch versions before incremen...
Added bug545
Removed errorType test; it is repeated in bug545
Bug fixes
corrected missing path conversion on Cygwin for...
log file 'build.timers' now located in 'logs' d...

updated man pages for Scala 2
Actually really got rid of the print message.
Getting rid of a print message.
Changed '-inline' to '-Xinline'
Reverting file (I think) to fix broken build.

Reintroduced the toList method for efficiency
using double brakets enables logical or in bash
fixed removing of first :
performed some renamings in the compiler & library
fixed handling of classpath again, adds "." if ...
Use the names from StdNames where appropriate
made the view method implicit
fixed handling of classpath, never try to modif...
slight tweak to support scalaint scripts
fixed names of view methods
fixed names of view methods
fixed names of view methods


Code cleanup
added directory 'examples' to generated distrib...
added file docs/examples/gadts.scala
changed error handling when output location is ...
fix arrays some more.
cleaned up code in scala/tools/nsc/Main.scala
Updated SABBUS to:
ScalaBazaar Ant task now correctly handles empt...
added file build.examples.xml to build/run Scal...
added method 'kill' in some examples docs/examp...
Some changes to make arrays work better
added method 'kill' in docs/examples/oneplacebu...
Added a Scaladoc ant task and extended SABBUS t...
removed task 'examples' from build.xml
Torned is/asInstanceOf to isAsInstanceOf
Uncommented the private[scala] access modifier ...
added generation of 'scaladoc' command
adapted some more examples to Scala 2
Removed unnecessary files
Do not generate mirros classes for nested objects
prepend user-specified classpath to Scala class...
added copyright notice and cleaned up code in s...
changed version numbering
print stack trace on exception
added attribute 'remote' to method '$tag' in sc...
allow specifying the link of the generated adve...
allow the interpreter to be called with a file ...
Corrected clean-dependencies in SABBUS, cleaned...
removed implicit import of java.io.Console (Jav...
also prints out hostname and OS in log file bui...
fixed compilation problem
Rearranged header and updated copyright info
use 'mixin/abstract class' instead of 'trait'
Remove files that were not required for compila...
Initial checkin of new scala-doc tool.
Small refactoring in some collection classes
Update incorrect SVN file-properties.
Use 'mixin class' instead of 'trait'
Rearranged header and updated copyright message
changed way to generate 'version.number' property,
Added support for Java 1.5 generics
improved error message for missing key
Added -Xgenerics option
catch exceptions when running the resulting cod...
avoid a newline in the generated code, to avoid an
allocate new line numbers more eagerly, thus co...
be more tolerant of svnversion's output
- trying again with SCALA_HOME, now using both ...
SABBUS is now less verbose by default.
New STARR library based on revision 5856.
- added a missing %
Minor clode cleanup
ok, poor man regexp matching works now for righ...
oops, newmatcher is experiemental
fixed wrong variable name in file ant/templates...
support for limited regexp pattern matching
version number now ends with svn revision number




merged code in file src/compiler/scala/tools/ns...

Checking in so I can report a resident compilat...


added support for '-classpath' option in genera...
adapted code to Scala 2 syntax in files src/exa...
added a newline at end of file in src/compiler/...
test/scalatest is now a bash script (more restr...

extends Exception(msg) instead of Exception()
adapted script 'scalatest' to work in developme...
avoid crashing the compiler if folding constants

Turned TIMEOUT into a case object.
cleaned up buggy code in file scala/tools/nsc/m...
Removing bad error message when original is set...
Undoing the changes made on my last commit.
more original fixes
Committing setPos -> setOriginal fixes before I...
Simplified serializable attribute check
use the quick compiler if there's no distribution
- generate a wrapper for scalaint
added "" around a variable usage
support emailing the report to multiple addresses
corrected .check file of new test
corrected lastIndexOf parameter in file scala/r...
fix^2: import Predef._ in reflect.{Symbol, Type...
small fix to positions

bug fixes: 532, 531, 530

added an extra constructor for convenience
removed a hack for supporting the interpreter t...
allow templateStatSeq to work when a statement is
Many, many cleanups and small improvements.
renamed 'scala*2' to 'scala*' in Ant file build...
renamed 'scala*2' to 'scala*' in script file te...
fxd missing decl for root.symbol
renamed man pages to original commmands
adapted script 'scalatest' to work in developme...
renamed man pages
renamed 'scala*2' to 'scala*' and updated copyr...
changed handling of MatchError, prints string now
changed handling of MatchError, prints string now
Expanded Codification to support loops, conditi...
Added annotations parsing
Refactored ICode and added basic inlining capab...
removed command 'ant clean.all' from scala2-nig...
Added missing constants
Added values for the type tags
Added the names of Java annotations classfile a...
Updated SABBUS to provide more information abou...

- prints out Java environment when executing bu...
- removed trailing cr in file test/files/neg/bu...


- updated copyright notice (year, "unless speci...
Interpet the scala.runtime.compat.BeanProperty ...
An attribute that designates variable's accesso...




have the warning email include the list of fail...
updates for scala2
fixed name of script
revived from old-scala
The Scala compiler is now compatible with Java ...

In test script, JAVA_CMD should be JAVACMD.
added some quotes so that arguments with spaces...
Added somme additional documentation.
Make the scalac2 sbaz package depend on scalac2...
Added somme additional documentation.


Some cosmetic changes in non-plugin files.


Using debug mode is not longer necessary to get...


Corrected a classpath problem in the generated ...
Added '?' to the list of encoded operators.
Removed justthrow test file, as this case is co...
A $PREFIX was still lurking around: it is gone ...
Sanitized the ScalaTool ant script so that it d...
Added more test files for try-catch blocks.
Removed the '-client' flag in the run scripts: ...
do not treat the empty string as a valid classp...


Format changes, updates to IDE highlighting.
If a classpath is specified explicitly, then be...
- corrected classpath on Cygwin in file test/sc...
Move the implicit BitSet=>Ordered[BitSet] coerc...
Adding IO files to build.

- corrected value of nsc.excludes in file build...
Added a deep-copy clone method
Scala now only works in client mode: server mod...
Added Martin's additional test cases.
Scala bazaar Ant task now extends the correct t...
- improved efficiency
Added a fast subsetOf implementation
Made 'bugs' test case more resistant to differe...
added --quick option
Adjusted for the changed output
Created new STARR release without the annoying ...
Removed an annoying debug message.
Created new STARR release.


use the mutable.Set interface of BitSet



fixed bug in isWhitespace argument in file scal...

* removed tabs from core compiler files.
Adjusted to the new interface of BitSet
Complete rewrite:
added min(x: Int, y: Int): Int function
use the serializable attribute instead of java....

Added option '-Xlinearizer:<lin>' and made 'rev...
Mmmh, SABBUS wasn't working after all.
Updated a rather improved version of SABBUS whi...


Improved TypedCode to support yet more code.
When zip-ping up an sbp file, include all depen...
automatically define a "sbaz" task coresponding...

- removed tabs in scala/concurrent/Process.scala
use toList instead of elements.toList
Use attributes instead of java.lang.Cloneable, ...

changed <availablepackage> to <availablePackage>
Added process identifiers (class Pid) to thread...

Updated Scalac to support a mode (triggered by ...
Three things to be friendly with Scala Bazaars:
Renamed the man pages with "2" at the end, i.e.
Changed the product name in SABBUS to 'scala2'.
Added the Scala Bazaar archive generation Ant t...



Made anonymous functions serializable

added explicit type for partial function in tes...
added parenthis around boolean expression in te...
adapted code to new Scala syntax in test/files/...
Generate static methods for inherited methods o...
added explicit type for partial functions in te...
replaced ':' (deprecated) by 'requires' in test...
replaced ':' (deprecated) by 'requires' in test...
replaced ':' (deprecated) by 'requires' in test...
- replaced ':' (deprecated) by 'requires' in te...
- replaced ':' (deprecated) by 'requires' in te...
- replaced ':' (deprecated) by 'requires' in te...

- replaced ':' (deprecated) by 'requires' in te...
- replaced ':' (deprecated) by 'requires' in te...
- replaced ':' (deprecated) by 'requires' in te...
- renamed scalanstest to scalatest
- scalanstest now also prints out JVM version
- rolled back to scalanstest for restoring history
Resurrecting scalanstest from revision 5532
- renamed test/scalanstest to test/scalatest
- renamed test/scalanstest to test/scalatest
Cleaned-up all keyword-substitution, executable...
Removed 'src/exec'.
Updated Codification to actually work in presen...
Tried to fix sourcepath, but they still have so...
not sure if this was fixed already, but changed...
- added missing $Id tag
- corrected $Id tag
The build file only creates symbolic links on U...
Accidentally broke the build.
Getting rid of some unused Java files in scala/...
More stuff to support hte eclipse plugin.
- corrected error with _PREFIX in template for ...
Add new STARR release that adds a small bug fix...
- renamed _CPATH to _CLASSPATH
- renamed _CPATH to _CLASSPATH
- removed some blanks
- removed some blanks
The Scalac Ant task now supports a 'addparams' ...
- updated template for batch command on Windows
- updated template for batch command on Windows.
ant/ScalaTool is now compatible with Java 1.4.

- replaced ":" by "requires"
Scalanstest updated to use new scala2 names for...
Improved the ScalaTool Ant task to be more cros...
New STARR release that adds new private qualifi...
Updated jaco.jar to remove a small but annoying...
Updated the Ant build system:

Modified the generation of scripts in build/ to...
Commited a new STARR version of the Compiler an...




If scala.boot.class.path is not set, then try t...

1.

- added properties 'os.win', 'os.cygwin' and 'o...
- added property COPYRIGHT
- corrected generation of executables for Cygwi...
- corrected Java properties
- corrected value of SCALA_HOME
- corrected value of SCALA_HOME
1.
Commited a new Starr version of Scala to lib/ t...


1.
Actually really fixed the bug in NSC this time.
1.

First correction after the big jump: Scalac's s...
Switching to the new build system and to the ne...
Updated parser to fix ref locations.
1. Updated ignore patterns in various folders
Removed old Scalac code in sources and various ...
Moved Scalap and Scalatest to their own modules.
oops - needed after all?
no longer needed?
- corrected path to test directory
- added missing package 'reflect'
Makefile-based build system disapears.
TupleX and FunctionX classes are no longer stat...
'TODO' files moves to 'docs'.
Created proper 'docs' folder for new layout.
'test-nsc' has been moved to 'test'.
Removed old scala tests from new Scala core mod...
Removed scala latex documentation from the scal...
Removed tool support from the scala core module.


Changed EOL flag of all files to be consistent.
1.

Cleaned-up file-type and executable flags in th...
Added arithmetic operations to Long for Int, Sh...

Added support for remote attributes.
fixed bug
Removed log messages when there is no '-debug' ...


slight change, when adding Iterable, inserting ...
slight change, when adding Iterable, inserting ...
Updated test files to reflex syntax changes and...

I change it back -- but I'm still confused
tweaked a directory name
Removed some remaining Eclipse-related stuff th...
CVS ignore files no longer are necessary.
Removing Eclipse project files from repository,...
*** empty log message ***
removing meaningless Test.scala file
- added run/bug508.scala and neg/variances.scala
- Michel's tests for runtime types
*** empty log message ***
- Windows NT and up do know the path of the exe...
- Windows NT and up do know the path of the exe...
- updated year in copyright notice
*** empty log message ***
- NSC ant task updated to compile with NSC
made serializable
Changed dependency manager to look at .class fi...
Updated to new syntax.
Adding Eclipse plug-in meta info
- make every case class/object serializable
use Definitions.SerializableAttr
added an entry for the scala.serializable attri...
added "requires" as a keyword
*** empty log message ***
disabled attribute check
descr for URL sources
toString
changed test cases for anyvalue attributes
attributes can hold any values now
- corrected typo in task 'distrib.cygwin'
*** empty log message ***
*** empty log message ***
- added variable 'LATEST' (Cygwin/Unix switch)
- added property 'os.cygwin'
made box classes serializable
*** empty log message ***
- corrected wrong path separator in asString me...
*** empty log message ***
Set source file in ClassSym symbols.
Now ignoring temporary test files and reports.
- removed old Scala jars from TOOLS_CPATH's value
fixed occasional nullpointer exception due to h...
*** empty log message ***
*** empty log message ***
Better code generation for CZJUMPS.
*** empty log message ***
- corrected typo
- also prints out constructor id's when possibl...
Added primitive operations to (Byte|Char|Short|...
*** empty log message ***
Improved generated code.
*** empty log message ***
Dealing with a package path issue.
Improved generated code and line number informa...
Revamped reporter classes to make them more fri...
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
fixes
comment
*** empty log message ***
nicer pp
comment
fixes bugs
removed obsolete, commented settings
test code generating forward jumps
use forward jumps to avoid use of result = _
better error message
*** empty log message ***
SCABBUS now also supports the "print" option.
Added call to addSyntheticMethods for module cl...
*** empty log message ***
Added local variable debugging information in t...
added xsd stuff
fixed bug in text
comment
*** empty log message ***
- updated position in error message
* Added semantic token models to support Eclips...
*** empty log message ***
- added a second constructor 'GenTreeCloner'
- added methods 'cloneTypes' and 'getTypeMap'
- updated file header
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
A simple version of Codification framework that...
- added empty comments
*** empty log message ***
- added tests for octal/hexa chars
- added tests for octal chars
- added pos/variances.scala
*** empty log message ***
- removed leading tabs
- added showTree for Tree[]
*** empty log message ***
use == instead of equals, for null testing
go
*** empty log message ***
Sorry Lex, but we actually want to use sourcepa...
verif at valu
test case for verifying attribu value
verifying attributes
*** empty log message ***
*** empty log message ***
tagmethod fixed bug lisp
*** empty log message ***
*** empty log message ***
nsc problem with enumeration constructor
updated comment
updated comment
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
Adding testccase so runs against NSC.
try to make this test case work.
cleaned up main
*** empty log message ***
Test case for abstract override bug in NSC.
fixed match bug.
Greatly simplified exception handler generation...
- moved dbc/**.scala files back
Test that try-catches get lifted when necessary.
Also need this file to fix bug #487
Set version to 1.4.0.4
- replaced 'scala' by '@PREFIX@'
- commented out 'dbc/**/*.scala before generati...
added tokenMetric setting to compiler
bugfix in method '\' for attributes
refined test case
- removed leading tabs
- removed leading tabs.
- removed leading tabs.
- cleaned up
- removed leading tabs.
- removed leading tabs.
Updates some things to make DBC compatible with...
At last: the annoying two files that build.pico...
*** empty log message ***
Gilles "scala database connectivity" files added
shortcut to getValue
A graph of NSC's AST node classes.
Added guards to log messages to improve perform...
Updated NSC to use offsets instead of line/colu...
New JARs now overwrite old ones instead of mere...
A graph of NSC's datatype classes.
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
Updated test.
- added creation of md5 checksums.
*** empty log message ***
*** empty log message ***
Check for repetitive methods/fields
- removed illegal code.
Removed DEFERRED and lateDEFERRED flags for bri...
added test case for NodeSeq.apply
hello
- added bin/.scala_wrapper to Windows distribut...
- updated header.
- corrected CVS id tag.
*** empty log message ***
Reverted to using System.exit due to bootstrap ...
- overloaded Predef.exit with exit(Int) that ta...
*** empty log message ***
updated to conform to new mixins.scala
- corrected wrong bootclasspath on Windows (use...
- removed duplicated unzip operation.
- also displays total test count.
Added check in doc to see whether the required ...
added text method
hello, elements method fixed
removed debugging code
little reorganisation
Sorry, my bad!
NSC now uses more memory by default.
*** empty log message ***
Removed generation of useless jumps to followin...
*** empty log message ***
skip.nsc can be used when building a non-workin...
*** empty log message ***
text method
Updated to reflect correct expected output.
- added header.
added fromURL
added 'text' method
more types
This file is obsolete.
Changed path to use config instead of build.sup...
Changed path to use config instead of build.sup...
Fully implemented exception handling.
Corrected more error message for IzPack.
Corrected error message for IzPack.
added 'last'
hello
reactivate xml literal parsing
reactivate XML parsing
iasserts on different line
update patmat
If a variable SKIP_DOC is set (whatever its val...
CVS now ignores the temporary files that the te...
IzPack now works with a non-patched distribution.
Corrected a bug: a configure too much.
Updated files for new directory structure.
Updated file for new directory structure.
Replaces by test-nsc/scalanstest
A script to test new Scala.
Replaced by sources/bin/izpack.symlink.tmpl
A script to create symbolic links for izpack.
Name of executables is now soft-coded.
*** empty log message ***
Better support for names of executables and the...
This file is obsolete.
This file is obsolete and has been merged into ...
Bug correction: When the docs.skip flag was use...
- Updated version nb.
- updated wrapper name.
tweak to last change: -classpath, not -sourcepath
Modified class path of nsc exec scripts to suit...
- updated target paths.
Corrected the script to work with Cygwin (I hope).
This file is obsolete.
These files are obsolete and have been replaced...
*** empty log message ***
This file is obsolete and has been replaced wit...
Now ignores the "sandbox" folder that can be us...
Updated SABBUS to generate functioning scalac a...
- added 'jars' command to build 'scala.jar' and...
- added msil.jar in cpath.
*** empty log message ***
*** empty log message ***
- added 'pico-nslib' to classpath.
- fixed nasty bug introducted by Gilles in Wind...
- corrected typo.
- corrected wrong path in target 'distrib.win'.
- added test for VERSION file.
- added check for VERSION file.
*** empty log message ***
Corrected the classpath of the scala and scalac...
Refactored the build.all system to be shorter, ...
- modified list of support files.
Decrement length on pop.
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
fixed SU case in getIdentifierRest
Removed FINAL flag for outer accessors.
Added preliminary exception handling code gener...
- added support files for the ConTEXT editor (w...
- Some Scala templates for the ConTEXT editor.
*** empty log message ***
*** empty log message ***
Checks if the classpath is empty.
- disabled '--int' option.
- removed references to 'dragos'.
- added concrete wrapper for nsc testing.
- added symlink check.
Added line numbers in ICode printers and fixed ...
Added check files for jvm runnable tests.
Modified according to new coercion/conversion m...
*** empty log message ***
Changed name of MetaAttribute file to MetaParse...
- changed task 'distrib' (partial distrib).
- removed dependency on external resources.
Added the log option.
*** empty log message ***
*** empty log message ***
- added .latest-*
- renamed 'tmp' to 'Uninstaller'.
*** empty log message ***
- improved unix jobs.
- cleaned up.
- moved to 'bin/.nsc_symlink.tmpl'.
- renamed config/izpack/create_wrappers.sh
- changed symbolic links.
fixed Channel::lastWritten = written
fixed lastWritten = written
Added hooks to enable user-defined code be run ...
Added type test to make List.apply(xs: A*) comp...
- corrected wrapper name.
- updated lists of Scala commands.
- added 'copyright.notice' property.
- added Ant token '@COPYRIGHT@'.
- added Ant token '@COPYRIGHT@'.
- added 'copyright.notice' property.
*** empty log message ***
- added 'izpack.jar' property.
*** empty log message ***
- added generation of 'bin/scala.bat'.
- added 'fixcrlf' action for batch commands.
- added 'bin/scalap.bat' in Windows distribution.
- added Ant token '@VERSION@'.
- added more tokens in fileset.
- share common resources doc/*.pdf and lib/*.
*** empty log message ***
*** empty log message ***
- added IzPack project file.
- added 'izpack' task.
- added 'izpack' target.
- added task 'build.jars' (build/lib).
- added 'izpack.jar' property.
- added 'config.dir' property.
- corrected malformed zip action.
- added missing goto statement.
Special treatment of scala.All and scala.AllRef...
Added the source directory in the path of nsc.
Set version to 1.4.0.3
- corrected error in generation of batch comman...
Reset lateDEFERRED flags too.
- added generation of 'sources.zip'.
- added scalap tool.
*** empty log message ***
- added property 'nsc.osc-nstools.excludes'.
- added scalap command.
- corrected buggy eol.
- scala commands now refer to .nsc_wrapper on U...
- batch template.
- nsc wrapper.
- added 'bin.dir' property.
- moved to bin/.nsc_wrapper.tmpl
- moved to bin/.nsc.bat.tmpl
Set version to 1.4.0.2
- added generation of scalac command (bin/scala...
- ignore customized property files.
- 1st attempt.
Changed the build system back so that newsource...
Changed the build system so that newsources is ...
- use Ant now !
- used Ant now !
- added 'scala.dll' property.
Added a simple test to make sure that additiona...
- use Ant now !
- used Ant now !
- added 2 tasks 'fixcrlf' in target 'distrib.un...
- added some comments.
- added gz and bz2 generation to target 'distri...
- target 'distrib.unix' now also depends on 'do...
- corrected typos in Scala comment.
Small change to remove pattern match inside pat...
New version of the backend, that can compile th...
- finished target 'docs' :-)
Commented text that should have been commented ...
- added 'distrib.doc.dir'
- changed 'support.dir' to 'build.support.dir'.
- corrected value of 'support.dir'.
Now uses same directory for distributions as ma...
Added ignores for SABBUS build system.
Changed the way properties are set.
- corrected if-test in log "Compiling...".
- added id 'nsc.classpath'.
- was a test.
*** empty log message ***
*** empty log message ***
NodeBuffer + => &+
NodeBuffer + => &+
- updated copyright date.
- removed nsc-specific code (use build.xml !).
- added echo for ${oslib.src}.
- 1st attempt to fix $Id.
- added 'test.dir'.
Try a 2nd fix for CVS Id problem
Added a warning when Scala cannot be found on t...
Test cvs id
*** empty log message ***
- test (ignore).
- added 'doc.dir'.
- added CVS header.
- added 'support.dir'.
- splitted 'fail' actions in task 'init.osc'.
Removed two unecessary echos.
Changed the way to set properties.
Remove the auto source detect feature which was...
- added CVS header.
rewrote message display
accessor for cm
fixes
added binder class to xml/fact
Auto-detect files in newsources so as not to co...
Cleaned-up some classpath incoherences and dupl...
Corrected a bug when entering an empty string f...
The new build system in pure Ant.
Added 'scala.reflect' classes.
- added NSC.scala
- added Ant dependency.
- nsc build now depends on Ant (nsc/ant/NSC.sca...
File is not used anywhere.
- renamed some nsc sources files.
*** empty log message ***
Changes the name of 'the BytecodeGenerators' cl...
Updated the attributes setter with limited inpu...
*** empty log message ***
*** empty log message ***
Added a missing "implicit" for NSC compatibility.
- added CVS header.
new \ and \\ method behaviour added (attribute ...
test of new \\ method behaviour added (attribut...
The new Ant NSC task.
Improved error messages.
Removed a debugging print.
Improved "force" parameter of task to support v...
Changed "match" to new form.
- added line for printing $SRCDIR before starti...
- added support for nsc test suite.
- added support nsc test suite.
- added 'PROJECT_N*' variables for nsc.
- added 'NTEST_*' variables for scalanstest.
*** empty log message ***
- initial check-in.
- initial check-in.
- added user name to the created 'env.*' files.
- added user name to the created temporary dire...
- added user name to the created temporary dire...
*** empty log message ***
*** empty log message ***
*** empty log message ***
Experimental module support.
*** empty log message ***
fixed assewrtSame
Added [_trait_] so that nsc can compile it.
*** empty log message ***
*** empty log message ***
- added header.
- updated header.
- fixed wrong else statement in 'fetchToken' (c...
*** empty log message ***
Added a platform independant java.lang.StringBu...
*** empty log message ***
Made platform independant
- Made platform independant
*** empty log message ***
*** empty log message ***
Made platform independant
*** empty log message ***
Changed the test to produce the same output on ...
Made platform-independant
Removed a Java-specific bug test
Added some more functions
- added JC_PREPEND variable.
- renamed '_runtime' to '_nsrt' (as in Makefile).
- added rmic specific rules.
- initial check-in.
*** empty log message ***
If not running under Cygwin fall back to Mono f...
*** empty log message ***
*** empty log message ***
- updated rules for generating nsrt.jar, nsc.ja...
Improved handling of command-line options
- added support for IntelliJ IDEA and Vim.
Added scala._trait_ to the list of special attr...
- renamed 'NSCALA_' to 'NLIBRARY_'.
Removed the special handling of the += and -= m...
Added support for applying .NET attributes
Converted to Unix-style line endings
Added multi-platform support for MSIL
Added multi-platform support
- Removed symbol for the unused 'java' package
[MSIL]Treat delegate += fun as syntactic sugar ...
Improved handling of the scala.dll assembly
Made platform-independant
*** empty log message ***
fixed the infinite recursion in the math functions
Made platform-independant
*** empty log message ***
Reorganized math-related routines
- added 'CompilerRun.scala'.
use Ant instead.
*** empty log message ***
*** empty log message ***
- test
Added support for building Scalac Ant task.
- added more tests.
Changes copyright date. Updated file Id.
- added _trait_.scala
*** empty log message ***
*** empty log message ***
The new Ant compile task.
- corrected incomplete classpath in function 'n...
- replaced symlink with real directory.
- updated nsc generation.
- added test for Mono environment.
*** empty log message ***
- added GenJVM.scala
- added nsc support.
- adapted Moez'code to new option 'interprete'.
*** empty log message ***
*** empty log message ***
- added variables for .NET tools.
JVM very basic code generator.
Very preliminary jvm support in place.
Added fjbg to the path
- added 2 files in typechecker.
Minor bug fixes to properly compile newsources/...
Added target to build nsc with nsc.
Added a space so that scala-mode would not wron...
Made label names in 'while' and 'do' unique.
- added entry 'Interpreter.scala'.
- added Moez's changes for Scala interpreter.
*** empty log message ***
Made platform independant
*** empty log message ***
Eliminating the usage of J# library changed the...
*** empty log message ***
Removed dependancy on Java
Integrated the scala.dll build process for Cygw...
Implemented support for the Microsoft C# compiler
Added some methods for better platform independ...
Made platform independant
*** empty log message ***
Implemented the Java part of the library in C#
*** empty log message ***
- added 'run/iterators.scala'.
*** empty log message ***
*** empty log message ***
- added 'showType' parameter to function 'showT...
- added method 'showTree'.
- updated copyright date.
- added 3 files to backend/.
- initial check-in.
Initial commit.
Various bug fixes.
*** empty log message ***
*** empty log message ***
*** empty log message ***
- update list for sources/scala/tools/nsc/trans...
*** empty log message ***
- updated name of type member.
- abstract classes cannot be instantiated..
- removed instantiation of polymorphic arrays w...
*** empty log message ***
- added type info in debug output.
- removed unused imports.
- added variables 'cygwin' and 'darwin'.
- classpath must be handled differently on Cygwin.
initial check-in.
- added 'util/Statistics.scala'.
- updated code for current scalac.
- cleaned up.
- updated code for current Scala XML library :-(
*** empty log message ***
- added Scala header.
- changed formatting.
*** empty log message ***
- changed path "share/scala-1.4.x.x" to "share/...
- commented out "System.out.println" in doubleV...
*** empty log message ***
*** empty log message ***
*** empty log message ***
- moved handling of exclude file to ant-common.sh
- added "targets" directory to IzPack build.
- changed default target directory to "/usr/loc...
*** empty log message ***
- moved handling of Ant buildfile to ant-common...
- corrected typo.
- added definitions of directories
- moved some operations to Ant buildfile.
- batch file for build nsc on Windows.
- added property files for Unix and Windows.
- also ignores *test*.java and *test*.scala files.
- added missing entries.
*** empty log message ***
*** empty log message ***
Updated list:
- added missing header comment.
- added missing CVS tag.
*** empty log message ***
- corrected CVS tag in header comment.
*** empty log message ***
*** empty log message ***
Added tree checkers.
*** empty log message ***
Added 'debug' option to scalac task.
- fixed bug in rule 'install-windows'.
- simplified generation of IzPack distribution.
- default installation directory is now "/usr/l...
- added generation of 'nsrt.jar'.
- corrected some paths (need to be absolute).
- added Scala header.
- updated copyright notice.
- initial check-in.
- added missing entry Constructors.scala.
*** empty log message ***
- uncommented 'rm' command.
- corrected Ant command line.
fix
- loaded in class scalac.symtab.Definitions.
- added classes <primitive_type>Ref.java in run...
- made line length < 80 chars.
- added shell variables.
- added shell variables.
- separated jar archives and build directories.
- added space.
- added color for string literals.
- added color package (used for string literals...
- added missing file suffix (izpack).
- initial version.
- changed to Unix file format.
- changed date in versionMsg.
*** empty log message ***
*** empty log message ***
Use the new syntax for def parameters
- removed CR/LF (Windows) characters.
- initial checking.
- added IzPack build.
- added nsc source directory.
Update touch syntax to support Mac OS X BSD tou...
- added CSS styles.
- added CSS styles.
- changed def parameter.
Added backend/icode files to the make process.
- updated file header.
- corrected layout of document header.
- corrected error in xsl:variable declarations.
*** empty log message ***
- ScalaIntro.pdf/.ps are now generated automati...
*** empty log message ***
- moved to ../introduction directory.
*** empty log message ***
- corrected bug contribution #81
*** empty log message ***
*** empty log message ***
*** empty log message ***
Added tools_util_runtime_dir definition to buil...
Replaced "throw new Error(...)" with "Predef.er...
Removed redundant paragraph
assigned better type in Bind(_,_)
cheating - removed regular pattern, because nsc...
bugfix, optimized ArrayValue(x@_*)
isSequenceValued now takes care of ArrayValues ...
settings that come in handy
docu
clean up, separated test from build script
demonstrates nscArgs and userExclude feature fo...
userExclude feature for build and test infrastr...
bug for empty command line options
cleanup
clean up
testing the result of ant-build-nsc
obsolete, pico task now supports scalaHack attr...
clean up, pico task now supports scalaHack
made test file fit for nsc
made test files fit for nsc
*** empty log message ***
- added 'run/boolexprs.scala'.
- changed code for deprecated def-parameters.
- updated copyright.
- added comment templates.
- corrected small bug in Complex example.
Added "implicit" to view definition to make it ...
- warning for deprecated def-parameters also
- updated code for deprecated def-parameters.
- updated code for deprecated def-parameters.
- removed unused imports.
Added abstract syntax tree browser (using Java ...
Added experimental support for ICode.
- removed "is/asInstancOf" methods.
*** empty log message ***
- added comment templates.
ArrayValue ...
- replaced 'Space' with 'Newline' in printAttri...
- changed code of 'toString' method.
- prints out Scala attributes.
Removed custom log method.
*** empty log message ***
*** empty log message ***
- moved space before colon for ValDef.
better comments
- added some comments.
- replaced some tests with symbol flags.
- replaced some tests on symbol flags.
Added delegate support
*** empty log message ***
- replaced some tests with corresponding Symbol...
- added methods isCaptured and isTypeParameter.
- added some comments.
- splash image with Scala logo.
- prints out which checked exceptions a method ...
*** empty log message ***
*** empty log message ***
Use scala.runtime.compat.Platform.getClass(obj:...
typo
oops, glob pattern was not working ocrrectly
- added helper functions "mkMIMEHeader", "write...
added env.sh
added build.properties
sample build.properties
separated the paths to properties file
Head of empty list fixed and moved tailcalls be...
Adjusted to the current syntax of def parameter...
Removed printing leading space in printType0
Introduced a top-level try-catch to hide the st...
Throw an exception if the jump width adjustment...
Removed obsolete methods
throw match error fixed
added 's'
renamed file
Changed to print the new syntax for def parameters
Added tail call elimination phase to nsc.
*** empty log message ***
*** empty log message ***
- added support for syntax highlighting in XCod...
temporarily added an if that takes care of patt...
fixed some bugs in translation from scalac, .tp...
fixed bug in translation from scalac, pos has s...
works better now
works now
*** empty log message ***
building with ant
*** empty log message ***
*** empty log message ***
Added support for the cloneable, serializable a...
Added a reference to the System.Object.Memberwi...
Implemented support for the scala.Cloneable att...
*** empty log message ***
Made scala.Console platform independant
Implemented support for the scala.cloneable att...
Changes done by Martin to correcly typecheck La...
*** empty log message ***
to compile and test nsc with ant
little additions to make independent from AntAd...
works now
removed . from .match
better error message in case of encoding problem
encoding for scala.tools.scala4ant.ScalacTask
cleanup, minor
transmatch
files to call nsc from ant
an ant-file for nsc things
removed . from .match, oops
Set version to 1.4.0.1
Set version to 1.4.0.0
- moved to CVS repository "scala-website".
- corrected HTML tag in Scala comment.
- added missing entry 'Molecule.scala'.
Set version to 1.3.0.12
- corrected typo.
Corrected a typo in an example
Initial import
added attribute validation in scala.xml.dtd.Ele...
removed AntTask (use ScalacTask instead)
added test case for ElementValidator
added the ElementValidator class
*** empty log message ***
well, last bugfix will crash when trying to dup...
*** empty log message ***
ok, kicked out handling of "alternative" patter...
ok, kicked out handling of "alternative" patter...
erm, no apparently did not fix bug, revert
*** empty log message ***
fixed bug!
*** empty log message ***
- Added "runtime.ScalaRunTime" in library compi...
- added more test cases.
- added entry 'Makefile' (generation of .elc fi...
- makefile for generating .elc files.
- added 'implicit' and 'match' keywords.
- added user-defined attributes with arguments.
- added entry 'pos/attributes.scala'.
*** empty log message ***
- corrected if-test in 'addAttribute' function.
in scala4ant, errors will cause ant script to s...
*** empty log message ***
reverted changes, because of bug while bootstra...
fixed bugs #406 #440 #371
comments, bugfix carried over from old matcher
Repository : /home/cvslamp/repositories/scala
added useful methods for constant time concaten...
Added support for the transient and volatile at...
hello
- Implemented support for the scala.SerialVersi...
Improved serialization support
*** empty log message ***
Added missing [serializable]
Improved serialization handling
Use the scala.SerialVersionUID attribute to set...
Provide a meta tag for the class to hide the fa...
- added equals method
- added 'implicit' and 'match' keywords.
xml library - node traversing
matching
obso, put utility fun in transmatcher, where ev...
obso, put in transmatcher, where everybody sees it
more 4 matching
fixed mistake
added "override" modif
*** empty log message ***
default value
better name for contentmodelparser
commenting 'Match' node
better name: ContentModelParser
better name
dtd validation with ValidatingMarkupHandler
- serialization done in memory (and not more to...
code cleanup in nsc matching
more code cleanup
code cleanup
code cleanup
added stub for typesasvalues phase
added >= method to Phase,
Use attributes to declare serializability of ob...
Tag anonymous function classes as serializable
In mkDefaultValue first check for a value type ...
Designate the serializable status of the class ...
Initial support for attributes - only works for...
hello, some of pmatching compiles now
hello
- rolled-back to revision 1.103.
*** empty log message ***
*** empty log message ***
*** empty log message ***
hello
disabled transmatch for the moment
need help
moved to  directory matching to avoid prefix-clash
*** empty log message ***
- updated list of keywords.
- changed 'e.match' to 'e match'.
- added 2 .tex files.
- updated list of Scala keywords.
*** empty log message ***
- reordered 2 keywords.
- changed indentation (4 -> 2).
- removed dtd2scala specific stuffs.
- changed 'Seq(..)' to 'Stack(..)'.
- replaced all occurrences of "<variable>.type"...
- changed order of attributes in HTML tags (why...
- changed code in 'dequeue' method.
- added overidden method 'stringPrefix'.
even better dtd parsing! handled URLs now
- made Scala traits implement java.io.Serializa...
Do not set the *static* modifier for classes.
Create class constructors only if necessary
a
fixed typo
bugfix of #423
correct handling of entity refs at end of file
improved handling of DTDs
- bug fix: include compound types in the comput...
beginnings of transmatch in nsc
- Added new script "scalanstest"
- Removed "scalac", "scalai" and "scaladoc" fro...
- Adapted to the new compiler
Refer to java.io.Serializable directly rather t...
- Adapted to the new compiler
- Added list2ordered
- cleaned up.
- cleaned up.
- renamed variable memeber 'input' to 'curInput'.
- added header.
- Changed ".match" into "match"
- Added separate compilation of Predef for nsc
a
removed
entity handling
little bugfix in getIdentRest (SU is identifier...
- bug fix: transform all isInstance/asInstance ...
- made FUNCTION_OUTER a serializable object.
- Removed "SimpleConstr" which is never used.
- bug fix: the "cast" function now performs coe...
- updated header.
- corrected typo in comment.
- Changed target $(latest)nsc-sc to always comp...
- Updated the list
- bug fix: detection of classes needing lazines...
- fixed multi-threading behaviour for the compu...
*** empty log message ***
- Added the compilation of "nsc" to the target ...
- Added target tnsc
- Updated list
Added 'implicit' and 'match' as keywords
a
*** empty log message ***
- in instantiation methods, reuse array of type...
- bug fix: detect types whose instantiation can...
- bug fix: made the first type argument covariant
- renamed 'Serializable' to 'serializable'.
- added more options.
*** empty log message ***
- removed PearsonHash
- added function in FNV_Hash to add an integer ...
- 'scala-regexp-opt-charset' no more uses the i...
- corrected eol characters.
- added entry 'run/lists.scala'.
*** empty log message ***
- improved code of 'zipAll'.
can ignore external parsed entities if non vali...
comments
scala.xml: markup handler behaviour controlled ...
XML library, DTD validation (changes in parser,...
fixed comment
- moved 'src' directory together with 'lib' and...
- rollback last change (we keep flat directory ...
- Changed root of test files
- don't keep file .scala-wrapper on Win32 (roll...
- moved redefinition of UNIX2DOS to Makefile.pr...
- changed directory structure of the Scala dist...
*** empty log message ***
- redefine UNIX2DOS variable on Cygwin.
- added man page for scaladoc.
*** empty log message ***
- fixed wrong usage of separator character in U...
- Replaced "siris" by "scalaint"
- changed HTML tags to lower case.
- added man pages for the Scala commands.
- man pages for Scala commands.
- added option '-family Helvetica' for convert ...
- corrected tags in Scala comments...
*** empty log message ***
- added test guard before accessing constr.clazz.
- fixed (de-)serialization error using readReso...
DTD parsing bugfix
Moved tail call phase before transmatch.
added docu-ii
DTD parsing, representation
Added better type printer.
hello
resurrected
added TopScope again
- added allowUnsafeArrays thread-local variable...
moved from xml.Parsing.
rearranging the library some more
rearranging the library some more
oops
moved to subdir dtd
added another little test
moved files
moved files to other directories
rearrangement of Scala XML library
removed Wildcardbase mixin, is now integrated i...
removed junk
merging wildcards into wordexp, too difficult t...
bugfix
minor cleanup
Added the new zipAll method
- removed website related declarations.
- added 'sort1.scala' example.
- added 'zipAll' method to class 'List'.
more verbose error message
- optimisation: treat strongly trivial Scala cl...
added "with Seiralizable" serialver
bug, char.getType doesn't work after all
- bug fix: correct the use of Character.getType
- renamed weak* methods in ScalaClassType to is...
- renamed getType to getScalaType
bugfix, whitespace and XML literals
bugfix
fixed bug in new XML API related to namespaces
hello - attroibutes were wrongly grounded at null
- The default encoding is now obtained from Sys...
- disabled search for xml test cases
more methods
- made Text covariant so that pattern matches d...
- improved the interaction between arrays and r...
Removed an assertion that no longer holds.
- added support files for the Console plugin (j...
- commented out xml tests..
*** empty log message ***
- syntax highlighting for Scala.
- support for Scala commands in the Console plu...
- moved to 'modes' directory.
better comment
removed dtd2scala
removed BindingFactoryAdapter
new xml API
was only needed for dtd2scala
removed obso stuff
old API, obso
hello
ii
away... moved to different rep
be gone, rubbish code
new XML API that deals with namespaces properly
- Added method "ne" in class AnyRef
- accept the creation of compound types with no...
- fixed asInstanceOf when applied to null, so t...
- made the isInstance test more precise
- added a cache for JavaClassTypes,
- finer-grained statistics for instances: count...
- do not mix in static members
- fixed isSubType
- use asInstanceOf$erased when possible (i.e.
*** empty log message ***
- added support for the SciTE text editor.
- use the mini-transformer when targetting the ...
Don't emit widening casts.
vim mode by Raphael Haberer-Proust
- added weakIsInstance method in ScalaClassType...
- changed pattern matcher to use the erased ver...
- introduced isInstanceOf$erased and asInstance...
- pass null as ancestor code when it is empty, ...
- use shutdown hooks to output statistics file
- added statistics
- forward toList to the implementation in Iterator
- use TypeConstructor.FUNCTION_OUTER as a fake ...
- improved toString method
*** empty log message ***
- added page for change history of Scala Plugin.
*** empty log message ***
*** empty log message ***
- Avoid reimplementing foreach, forall, exists,...
Added a toList method to override the one from ...
- added documentation page "Scala Plugin for Ec...
- fixed the ancestors of Object,
- bug fix: increase the timeout while waiting f...
- changed the format of the ancestor code, to s...
- removed NewMember class and all related code,...
*** empty log message ***
- moved TypesAsValues before LambdaLift
- adapted to be before LambdaLift
- removed useless inheritsFromJavaClass parameter
- added a new kind of literal, SYMBOL_NAME, whi...
- added a new kind of literal, SYMBOL_NAME, whi...
- added hasStaticAttribute method
- added SYNTHETIC flag to getType method
- added entry for TextPad support.
*** empty log message ***
- added "Thanks" section.
- renamed "checkCastability" (in Type and subcl...
- added workaround for \spacefactor problem (se...
- added Statistics.java
- added support for statistics
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
- removed BasicType class
- fixed view methods to avoid NPEs when the wra...
*** empty log message ***
- Added missing files
- removed MethodType (not needed anymore)
- improved rules for character and symbol liter...
- renamed 'transform' to 'mapConserve'.
*** empty log message ***
- Correctly differentiate between methods that ...
- corrected generation of major, minor, revisio...
minor changes
- Give private inner classes assembly visibility.
- updated year in copyright notice.
- added new entry downloads/history.html for ch...
exported comment
fixed comment
Call CYGWIN_FILE on the name of the directory p...
- removed WHITESPACE rules (no longer needed).
*** empty log message ***
*** empty log message ***
fixed typo
new test cas
fixed bug
undid optimize, might break forward value ref
optimized refcheck: is identity on patterns
- added 2 monad examples to the Scala website.
- added file README for jEdit support.
*** empty log message ***
argh
argh!!!! undoing those changes
changed definition of sequence apply, is much s...
new test case for sequence convention in patter...
neg file for sequence convention in pattern mat...
- Changed behaviour of ":use" to execute comman...
- added EMPTY_ARRAY
- renamed isSameAs to isSameType, to be consistent
- added SCALACLASSTYPE_EMPTYARRAY (for run time...
- removed Refinement.java, now useless
- renamed isSameAs to isSameType, to be consistent
- renamed isSameAs to isSameType, to be consistent
- renamed isSameAs to isSameType, to be consistent
*** empty log message ***
*** empty log message ***
*** empty log message ***
- added monad examples.
removed CharData from library
removed servlet engine from repository
- added escaping for space characters (was ok o...
- added support for the gedit text editor.
- syntax highlighting for Scala.
- Added new method transform
*** empty log message ***
- updated copyright year.
hellohello
hello
- added missing header.
- Commented out the automatic build of nsc
- Added tests for bug 396
- Added search methods
- Removed "printSummary" from Reporter interface
- Added nsc target
- Added scalansc target
- Added UTF8Codec
- Added some tests to avoid the inlining of met...
*** empty log message ***
*** empty log message ***
*** empty log message ***
code cleanup
- Added the following methods: getMainOwner, ge...
- Added code to initialize the origin of analyz...
fixed faulty handling of comments in toXML func...
- Added SOURCEFILE attribute decoding
- Added origin to loaded symbols.
- Added method getOrigin and setOrigin
- Added SymbolOrigin
- Changed AbstractFileReader to store the abstr...
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
gone with this
pattern matcher - lost in translation
- Split the Reporter class into a Reporter inte...
- Added show-missing-examples and show-missing
*** empty log message ***
translated one file to scala
translated to scala
translation from Java
translations from Java
hello xml start tags
- Replaced start and stop in Global by a timer.
- Added timers
- bug fix: use System.identityHashCode to get t...
*** empty log message ***
- moved Entry class outside (to avoid the outer...
- Added a dummy "codegen" phase to enable/disab...
- added support for ThisTypes
- implement java.io.Serializable
should work now
- Replaced SCALADOC by main_SCALADOC (SCALADOC ...
t's NEW
parsing should create  anyrefs, nothing else
translated matching.PatternMatcher to Scala
marked obsolete
little fixes
translated most to scala
translated from java
- bug fix: fixed the view which provides an ord...
- bug fix: computation of the display fixed for...
- bug fix: computation of the display fixed for...
- rewrote Tree significantly in order to make i...
- bug fix: use correct parent index for classes...
- pushed max memory use to 512 Mb
- fixed stupid typo
- added a few "special" types (All, AllRef, etc.)
- changed some files related to run time types
- handle a few more "special" types (All, AllRe...
- bug fix: nested private classes are no longer...
- added a few methods and fields related to run...
- removed refinements,
- implemented checkCastability, toString and ha...
- implemented isInstance and isSubType
- removed refinements,
- removed refinements,
- removed refinements,
- replaced uses of java.util.{ArrayList,LinkedL...
- made the type argument of :: covariant, becau...
- bug fix: made MapTo class public in order to ...
*** empty log message ***
- minor typo fixed
- Introduced new compilation loop
added new token XMLSTART,
code readability
minor fixes NodeBuffer
minor fixes Scanner
minor fix Scanner, NodeBuffer
Removed in import that prevented proper compila...
No longer needs a special .NET version of scala...
[MSIL] Prevent the loading of synthetic Scala c...
- Disabled generation of .symbl files
- Added method isValidName
- Added loop shortcuts in removeHiddenMembers
- Added NAMER test in compilation loop
- Added phase NAMER
- Replaced some "return EmptyPhase.class" by ab...
- fixed a bug in the "refinements" method (note...
- Disabled WholeProgPhase
- Removed GenJVMPhase, GenMSILPhse and GenJVMFr...
- Removed HTMLGeneratorPhase and HTMLGeneratorP...
- Removed method Transformer.apply(CompilationU...
- Removed some obsolete references class TextTr...
- Removed field units in class Global
- Removed fail methods in class Global
- Removed graph methods in class Phase
- Removed old files rewritten to scala
- Removed old checkers
- Now works with the MSIL backend without modif...
- Use scala.runtime.compat.Platform to make the...
- Generalized exceptions from java.lang.Excepti...
- Removed generation of scala attribute in clas...
- Added ability to read .symbl files
- Added a test to test references to generated ...
- Changed PackageParsers to use .symbl files
- In [CLR]PackageParser split doComplete/preIni...
- Added method getNameSpaceOf
- Added method hasPackageFlag
- Added generation of .symbl files
- Added method writeSymblFile
- Changed writeToFile(String) to writeTo(File)
- Replaced global.fail by errors or aborts
- Added method writeClassFile
- Added method writeToFile
- Sorted
- Translated HTMLGeneratorPhases into scala
- Removed HTMLGeneratorScala.scala
- Added methods to print attributed trees
- generate local variable table (patch submitte...
- added accessor for "debuginfo" command-line a...
- Simplified the bound printing code
- Improved recompilation of multi-files documents
- Simplified the bound printing code
- Made the modifier printing methods public
- Added methods to print attributed types and b...
- Renamed isParamAccessor to hasParamAccessorFlag
- Added method isParamAccessor
Set version to 1.3.0.10
Set version to 1.3.0.9
Removed a superfluous import clause
- Moved tagMethod to TreeGen.mkTagMethod
- Generate $tag methods for the anonymous funct...
- Do not generate $tag methods for function cla...
- Added mkTagMethod that generates tree for Sca...
[MSIL] Do not initialize the TYPE_CLASS symbol;...
*** empty log message ***
*** empty log message ***
- Replace "Tree$" by "Tree."
- Modified printTemplate
- Renamed printModifiers into printSModifiers (...
- Added method isOverride
- Added a field "global" in TextTreePrinter
*** empty log message ***
- Removed class UniqueID (symbols have already ...
Synced with library.lst
*** empty log message ***
regexp lib
Added symbol and type information to the right ...
Added swing printer.
*** empty log message ***
- added missing header.
- Added bug 372
- Removed an assertion that prevented self type...
Set the lineUpClosingBracket property.
hello
hello
- Replaced Function*.java by Function*.scala
*** empty log message ***
- Added space to fix emacs highlighting problem
- Added code to force loading of source of clas...
- added an -enableassertions for all tools
- Removed ResultOrException
- Removed NativeLoop
[MSIL] Do not initialize symbols for runtime ty...
- Removed Function1 and ScalaObject from Array ...
[MSIL] Used scala.runtime.compat.Platform to av...
Synchronized with library.lst
Added scala.runtime.compat.Platform
Initial commit.
fix
commitbye
commitbye
Set version to 1.3.0.8
- optimized call order
*** empty log message ***
Set version to 1.3.0.7
hello
Set version to 1.3.0.6
- Added Ids
hello
more general type for finals map
NodeBuffer does not support hashcode, call .toL...
gone
logging
comment
hello
scala.util cleanup
oops
cleanuup
bugfix in NodeFactory
hashconsing
hashconsing
- put argument of @see tags in quotes (scaladoc...
- put argument of @see tag in quotes (scaladoc ...
- added files related to compound types and ref...
- introduced refinements
- introduced isSameAs method
- adapted constructor to take a class name inst...
- introduced equals method
- added definitions for compound types and refi...
- moved some code to the new superclass for bas...
- introduced compound types (and therefore refi...
- removed repository for Java types, as full ha...
*** empty log message ***
*** empty log message ***
- modified comment.
- Added Id
*** empty log message ***
changes to XML lib
*** empty log message ***
Scala benchmark suite added
Scala benchmark added.
- fixed a typo in the definition of the conform...
Added a page with details on the .NET implement...
- added typesAsValues phase
- added getType method
- added option -Xrtt to enable support for run-...
- changed the way the class initialisation meth...
- handle static members correctly
- handle static members correctly (i.e.
- adapted definitions related to run-time types...
- added initial support for static members
- added a few names related to run-time types
- almost complete rewrite
- moved all subclasses to their own files
- added files related to run-time types
*** empty log message ***
fixes, changes, add Node::toString(stripComments)
- [MSIL] Removed call to printStackTrace() in o...
- removed 'do' in for loop syntax.
- updated output.
- added tests for classes TreeMap, TreeSet.
- added java.io.Serializable
*** empty log message ***
- added java.io.Serializable.
- Improved module name handling
- Import java.lang.System.out and use out inste...
*** empty log message ***
[MSIL] Added  object TestMain as an entry point...
- Moved object Test in the beginning of the fil...
[MSIL] Use toString instead of String.valueOf()...
- [MSIL] added object TestMain that serves as a...
- Separate the directory and name part of the a...
added convenience mathod
*** empty log message ***
- In Attributed nodes ransform the definition B...
- Properly distinguish between scala.Unit and void
- Make interfaces inherit from scala.AnyRef (or...
- Added deletion of old file
- added more tests.
comments
added testing/SUnit for unit testing
unit testing
*** empty log message ***
[MSIL] Do not look for the System.Serializable ...
- fixed the definition of "default.distclean" t...
- changed the definition of "ROOT" to make it w...
- changed comment formatting.
- Added a toString() method
- added examples random.scala and timeofday.scala
better error message for xml parsing
some (commented out) code indicating where to c...
moved code for readability
changed ensureSize of ResizableArray to simpler...
- added file serialization.scala
- added java.io.Serializable.
- serialization test of Scala collection classes.
- rewritten the 'toString' method.
fixed ( >>> )
Set version to 1.3.0.5
- Added rule show-missing-library
- Added text/Document
fixed
rmoved
- Sorted
removed unused scala files, added BitSet to list
bitset addition, unit test addition
faster equality checking for immutable bitset
fixed documentation to valid xhtml
- Moved TEST_ALL assignment before return state...
- added methods 'equals' and 'toString'.
- added private method 'readResolveMethod'.
- added name for Java method 'readResolve' (see...
- added symbol/type for class java.io.Serializa...
- added missing test in method 'nameToPackage'.
Set version to 1.3.0.4
- Generalized code for [...]
- Cleaned code of scalatest
- Added missing prefix
- Added creation of objdir
- Removed no longer used variables
- Moved scala scripts from ./bin to ./object/ma...
- Renamed library class outputdir from "library...
- Renamed library class outputdir from "library...
- Removed PROJECT_APIDOCDIR (api doc is now gen...
- Renamed INSTALL_RUNTIME_JARFILE into INSTALL_...
- Relocated jar files under PROJECT_OBJECTDIR
- Relocated jar files under PROJECT_OBJECTDIR
- Simplified the file lists for the jar files
- Allowed flag --objdir= with no argument
- Removed ./test/bin/scala-test from distrib
- also copy file test.il.txt (used in docu/clr/...
- Remove scalatest and scala-info from windows ...
- Added MACRO_TEST_SRCDIR and MACRO_TEST_OBJDIR
- Added PROJECT_TESTDIR
- corrected 3 errors in example 4.2.1 (TimeOfDa...
- Removed makescalac
- Changed boot process: removed library compila...
Set version to 1.3.0.3
- Generalized the code that transforms local va...
- Readded a fixed version of the code to handle...
- Added Test 2
- removed wrong (?) if-test in method 'liftSymb...
- Updated test file lists
Set version to 1.3.0.2
- Removed unsupported !
Set version to 1.3.0.1
Set version to 1.3.0.0
- added Scala related documents.
- Added SCALA and SCALAINFO
- Updated to new wrapper
- Made context variables context indenpendent
- Changed scala_wrapper so that tools are run a...
- added directory 'examples' in $websitedir.
- added entry 'examples/more.html'.
- Created separate outputdirs for library and t...
- Added Id
- I added an example and a link to the Pilib pa...
- I added the variance display for class declar...
- Clear the exit label in Assign nodes processing
- Cleaned up some old comments and added some n...
- Don't generate unreachable branches; used to ...
- When selecting the most specific '==' method ...
- Added Id
- Added bug 361
- Added a missing substitution for cloned type ...
- Replaced a regular pattern match with a regul...
- Try to find the most specific '==' method to ...
*** empty log message ***
- Several bugfixes and small optimizations
- [MSIL] instantiate CLRPackageParser as the ro...
- Initialize CLRTypes instead of CLRPackageParser
- [MSIL] use System.Exception instead of java.l...
- Parse Pico meta attributes used in the Java p...
- Added class scalac.symtab.classfile.CLRTypes
- Separated the JVM package parser from the CLR...
*** empty log message ***
*** empty log message ***
- Added cygwin support in target generate
- Removed scalac.util.Reporter (replaced by sca...
*** empty log message ***
- changed 'lstlistinline' to 'lstinline'.
- Added logo & Id
*** empty log message ***
Initial import.
- added class scalac.symtab.classfile.MetaParser
- factored out class MetaParser
- Moved tree elimination code into AddAccessors
- Added name of class to constructor symbols
- Removed type contexts
- updated with new methods added by Martin.
- Removed unneeded fields from TypeContext
- Made creation of outer fields lazy
- Removed field "context" from class "TypeTrans...
- Rewrote getNewArgsOf
- Added tests on blocks
- Added code to forbid non-value terms as last ...
- Replaced array of outers by link to outer
- Removed isStable
- Added bug 360
- Changed type of outers from "type()" to "type...
- Added bug 359
*** empty log message ***
*** empty log message ***
- Added assert to avoid modifications of Scope....
- Made deAlias static
- Added code in Symbol to clone thisSyms
- Changed RefCheck.transformModule to enter sym...
- Removed noise at end of file
- Changed Parser and RefCheck so that case clas...
*** empty log message ***
added "hasNext" check (oops)
accepts Iterable[Node] instead of Seq[Node] in +
change in doc
compiles now
added docu, some info to add proc instr and com...
added DocType
made iter protected
fixed typo that led to incorrect line numbers
print an error, instead of dying with fatal error
files for io, used by xml parsing
removed in favour of ConstructingParser.fromSource
removed useless 'init' method
added constructors from scala.io.Source
added Source, Position. removed ParserFactory
fixed handling of namespaces in attributes
handling of xml: attributes, and more robust ha...
handling of xml: attributes, namespaces
added documentation, method to fix namespace of...
handling of attributes.
make now initializes parser before returning it
fixed bug in attribute parsing
*** empty log message ***
added ParserFactory
added xsdhandler
argh
handler for xsd
fixes to regexp -> automata implementation(s)
- Changed Parser and RefCheck so that case clas...
- RefCheck.java has been rewritten in Scala
- Added CASE to MODULE2CLASSFLAGS in Modifiers
- Changed method updateFlagsAndPos to also upda...
- Enhanced initialization of thrown RuntimeExce...
toString() for case objects
- Redesigned the root Makefile, introduced buil...
matching
resizablebitset -> bitset
traversing of xml nodes
ashdkjasdh
modified xml parsing
modified xml parsing
modified xml parsing
modified xml parsing
- Added defaults
- Moved log file to object directory
Set version to 1.2.0.2
- splitted file 'custom' into win32 and unix va...
- splitted file 'custom' into win32 and unix va...
fix
- splitted file 'custom' into unix and win32 va...
- removed panel for choosing the Java VM.
obsolete
fix
hello
xml lib
obso excepservlet removed
status codes
go!
fix
obso
servletEngine -> servlet
gone
init
initlibx ml par
*** empty log message ***
rename
libx ml par
- merged batch files into scalaenv.bat
*** empty log message ***
lib
parsing lib xmlxmlxmlxml
less dependence still
fix
fix
fixe
independent of API
- changed entry 'clr.xml' to 'clr/index.xml'.
- now also add file 'scala.dll' to the distribu...
- added entry for file 'scala.dll'.
- Removed usage of Debug in error message
- maded the Scala comments XHTML compliant..
- Reorganized the whole Makefile
- changed prefix "interpreter" to "scalai"
- merged compiler.lst into scalac.lst
- Replaced interpreter.lst by scalai.lst
- Declared fastclean in default.mk
- Small fixes
- Hard-coded the symbols of java.lang.Object an...
- Hard coded the types of java.lang.Object and ...
- Load assembly vjscor explicitly, since it may...
- Only transform the names of methods Equals, T...
- Added several fake methods to System.Object a...
- For the value types, do not consider the ==(O...
*** empty log message ***
xml parsing move to lib continues
parsing into lib continues
xml parsing into lib
- corrected small errors in section "5.1.7 Attr...
- added some space around the picture.
moved parsing methods to lib
classes for xml parsing in lib
comment
- Look for the most specific alternative of the...
Use Int instead of int.
*** empty log message ***
- updated some comments.
- removed wrong class description (comment).
- corrected CVS header.
syntax error reporting, oops
removed import of java.io.Serializable
refactoring, less dependency XML parser and Sca...
*** empty log message ***
- commented out entry jvm/matching.scala which ...
- added test companion files *.namespace to dis...
new matcher works again
matching
gone
mathcing
bitset fixes
gone
- I made scaladoc use a lazy version of the sco...
out
more representation changes
patterns
change
changes in matching, grammars, runtime represen...
stuff
matcing
*** empty log message ***
- added Ant attribute 'debug'.
- added 'scalapath' value.
- added package.
- commented out obsolete code parts.
- added new definition for Ant task '<scalac>'.
added bitset
useful for small sets of ints
xpath parsing don't work yet
added servlet engine, mod' xpath expr
new tool
*** empty log message ***
*** empty log message ***
- now uses external file 'config/list/scala4ant...
regular expressions
added base algo
algos
obsol
added se
nothing
fix testcases
regexp lib, nodeSeq, attrSeq changes, test case...
- changed package name to 'examples.expressions'.
- removed method 'synchronized' in class JavaMo...
- changed scope.iterator(true) to scope.iterato...
- changed iterator(true) to iterator().
*** empty log message ***
- error message has changed.
fixed expected result
fixed expected results
- Updated array tests
- Added CVS Ids
- Added and fixed CVS Ids
- added 'override' modifier to Point2.compareTo.
- added robots.txt
- added missing entries Uncurry.scala and Uncur...
*** empty log message ***
- added RefCheck.scala and RefCheckPhase.scala ...
*** empty log message ***
*** empty log message ***
new elem
*** empty log message ***
- Cleaned class Array
No longer needed, all is done in CompilerPhases...
*** empty log message ***
Added wholeprog phase to compiler
here it is
regexp refactor
regexps refactored
removed regexp, moved to new file
- correctly highlight view bounds,
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
- corrected output (2nd checkin..).
*** empty log message ***
- corrected output.
foo
foo
namespace stuff
*** empty log message ***
added testcase for namespaces
namespace fix + more validation
namespaces
fixed bug
- replaced GIF/JPG images for PS/PDF formats wi...
- fixed infinite recursion in one of the constr...
- Removed methods isXYZ
[MSIL] Added name GetType
[MSIL] In the auto-generated hashCode for case ...
- Use AnyRef instead of Object
- Removed obsolete type cast
fix
namespace
save typing
fix in call graph, to take into account calls t...
- added entry community/activities.xml
removed useless references to old ClassHierarch...
- Added methods +(String) to Boolean and Unit
*** empty log message ***
Added wholeprog phase sources
Compiler options for whole program optimization
- added 'ScalaIntro.pdf'.
*** empty log message ***
Added wholeprog phase sources
- Handle index properties by assigning the name...
- Create a new CLRClassParser for evey imported...
- Added names "finalize", "wait", "notify", "no...
- When targetting the MSIL backend treat scala....
*** empty log message ***
- Added static members of superclasses to stati...
- Adapted to new class scala.tools.util.debug.D...
- Added debugging classes in scala.tools.util.d...
- bug fix: differentiate between jumping and no...
- Removed calls to Debug.toString
typo
fix
more cleanup
new library stuff
stuff added
cleanup of xml code, TextBuffer
new test case for ws trimming in patterns
new example of for comprehensions
support for namespaces
namespaces
proper XML patterns, bugfix in literal parser, ...
- Moved method "eq" into AnyRef, changed type o...
- Added support to merge unix and windows ia bu...
bugfix in XML literal parsing
*** empty log message ***
- added entry enums.scala
*** empty log message ***
Set version to 1.2.0.1
Set version to 1.2.0.0
- Changed show-missing to detect missing test f...
- added code example.
- Improved exceptions launched on errors
- added code example, author, version and param...
- Marked the public only needed because of "jav...
works
xml changes - nodeseq supports comprehension, p...
cleanup
*** empty log message ***
NodeSeq comprehension methods
- Perform the primitive type conversion instead...
ant task fixed up,
- Got rid of ApplicationError; use Debug.abort ...
- Load all assemblies specified with the -r option
made classes *public*, because they are accesse...
- Traverse the trees prior to code generation t...
- maintain a separate list of files for the lib...
*** empty log message ***
- Import all types, including private ones
- small fix in the MSIL part
fixed2
fix
fixed
coomm
commit 2
Removed tabs.
premature commit
- I added a filter to symbols to be documented ...
added xhtml
validation works
*** empty log message ***
- Removed tabs and trailing white spaces
*** empty log message ***
- Reverted change to toString
*** empty log message ***
- Modified toString() to show the name of the file
*** empty log message ***
- Changed methods Debug.show to add separators ...
- Added Ids
- Added bug 328
dtd2scala attribute validation
attribute validation active in dtd2scala
attribute valid
- With the MSIL backend initialize CLRPackagePa...
- Changed the way to get the CLRPackage instance
- Accomodated the changes in CLRPackageParser
- No longer extends class SymbolLoader.
simplified
- Removed ConstantFolder.java (replaced by scal...
- Changed _TYPE methods in Definitions for prim...
- Disabled code that breaks separate compilation
- Removed method GenJVM.maybeGenLoadUnit
- Emit debugging info only with the -g option
- Improved handling of types
- Removed the obviated scalalib.dll loading
- Reintroduced the latest fix with stricter app...
comment
- Updated list of test files
- Added collection/mutable/Location.scala to th...
- Reverted the last change, it seems to cause m...
equals method
cleanup, fix
- Initialize the linked class of a module defin...
forgot to reset after printing
XML changes
- Added a check if every symbol should be in it...
- Minor bugfix
- Sort the array of types and perform binary se...
- When using the MSIL backend import classes fr...
- Escape the printed value of string constants ...
*** empty log message ***
- commented out entry for missing file xhtml.scala
library update, validation in dtd2scala
does not work yet
fallback for bug (UnPickle?!)
tests moved
oops, parsing doesnt work yet
obso
removed DeclToSQL stuff
removed regexp files
less dependency
move to lib
pretty-print + whitespace trimming
- not valid comments.
oboso
fixes
fixed tests for new lib things, cleanup
java.io
added MyElemDecl
obsolete
*** empty log message ***
moved to jvm, interpreter too brittle
convenience methods
new dtd decl items in Scala XML lib
new InfoSet items in Scala XML lib
attribute maps
using library now for some dtd functionality
- The comments were not valid XHTML, now they are.
added T
boo
grammar printer, matching progress, view from s...
name change select... to case...
Xmarkup option only for compatibility, is alway...
*** empty log message ***
obsolete
fixed bug in xml parsing, cleanup
- removed tabs
update comment
fixed
fixed
fix
runtime matching
test cases for matching
changed TreeRule and HedgeRule representation, ...
removed implementations
fixed bug
added matching stuff
added some stuff for matching, and CaseClass to...
matching stuff
moved a method to TreeInfo
undid changes, seems to give problems in bootst...
case classes implement trait scala.CaseClass
- Added optimization/hack in case If and Switch...
fixed typos
obsolete
fixed transmatch
- Escape the printed value of string constants ...
- replaced 'System.out' with 'Console'.
using partialMatcher instead of old Transmatch ...
obsolete, scala versions work
uses PartialMatcher scala, does not depend on j...
removed java files in favour of scala files
- changed 'Ord' to 'Ordered'.
matching stuff
added lib stuff
Removed class Ord.
*** empty log message ***
- Moved phase AddAccessors before phase Explici...
- Added a case for class symbols in method OUTER
*** empty log message ***
- added overloaded methods 'range' with step va...
- updated comments.
seq have to be escaped
uses new stack interface, removed ref to appendbuf
uses arraybuf instead of appendbuf
obsol
added empty factory
removed appendbuffer
- Added warning
- added overloaded methods 'range' with step va...
- changed scaladoc comment to normal comment fo...
*** empty log message ***
New library files.
Refactored class library.
- changed indentation.
- renamed 'parsers.scala' to 'parsers1.scala'
*** empty log message ***
- corrected wrong start value of function 'from'.
*** empty log message ***
- added overloaded methods 'from' and 'range' w...
*** empty log message ***
corrected
xml changes (part 1)
- renamed 'parsers.scala' to 'parsers1.scala'.
- renamed 'parsers1.scala' to 'parsers2.scala'.
- corrected typo.
- updated Scala comment for class 'Location'.
- updated Scala comment.
fixed pattern syntax to include XML sequence pa...
*** empty log message ***
- added mobile/Location.scala and mobile/Code.s...
- changed 'Ord' with 'Ordered'.
- class 'Parsers' is used by parsers1.scala and...
- put all declarations in object 'typeinf'.
- moved abstract class 'Parsers' in a separate ...
- put all declarations in object 'parsers'.
- added missing import scala.xml._;
unicode operator
*** empty log message ***
New collection class.
Refactored library.
*** empty log message ***
unicode parsing for identifiers, XML names
added test case for unicode identifier
- Added '-g' option to generate debugging info
*** empty log message ***
removed linux specific parts
- added header and comments.
change
*** empty log message ***
added attribute map
removed toSeq
*** empty log message ***
- Added debugging information to the emitted MS...
*** empty log message ***
- Added support for separate compilation, i.e.
- Improved the condition for when the unpicklin...
changes
- imported java.lang.System at the proper place
- Added ByteArrayFile to the list.
- Initial import of the class.
*** empty log message ***
- added 'sealed' modifier.
- changed tabs to spaces.
*** empty log message ***
- I added to the server the printing of remote ...
- updated check file (new 'view' function).
- added file header.
- corrected typo in commment.
*** empty log message ***
- IA installers for UNIX and Windows are now ge...
- splitted scala.iap_xml for UNIX and Win32 pla...
*** empty log message ***
added TreeSet, sorted alphabetically
initial
- moved pos/Y.scala to neg/Y.scala.
- moved pos/Y.scala to neg/Y.scala
*** empty log message ***
- reverted change, which seems buggy (sorry)
- changed the ordering relation used on symbols...
*** empty log message ***
*** empty log message ***
*** empty log message ***
removed <=
fixed increment in Iterator.fromString
*** empty log message ***
*** empty log message ***
*** empty log message ***
Added new traits to the Buffer abstraction.
Refactored some parts of the Scala API.
Updated library.
*** empty log message ***
Set version to 1.1.1.4
- Added .args files in test files of distribution
Set version to 1.1.1.3
- Added missing files
- Removed assertion that prevents module cloning
- Added bug289
- Added flag IS_CONSTRUCTOR
Set version to 1.1.1.2
similar -> sameElements
*** empty log message ***
removed Similarity added sameElements
removed Similarity
- Replaced Symbol.module by Symbol.sourceModule
- corrected examples for variance annotations,
- Removed usage of Symbol.module() in Pickle/Un...
- I fixed a concurrency problem.
- When launched as a server, Scaladoc compute t...
- Added java flag "-ea" to all "*-debug" commands
- Added pos/bug318.scala
- Added links for all outer modules (solves bug...
- I modified Scaladoc so that it does not gener...
- Removed calls to Symbol.module()
- Improved tests
- Removed calls to Symbol.module()
- Removed automatic SYNTHETIC flag on root clas...
- Simplified module creation
- Replace calls to module() by calls to moduleC...
- Replaced Symbol.dualClass by Symbol.linkedCla...
*** empty log message ***
- updated text strings.
- was renamed to tools.zip.
- contains (free) Windows tools (unzip.exe, ..).
- contains description of file tools.zip.
- used in Makefile.distrib to set version numbe...
- added program group "Scala x.x.x.x" on Windows.
- added XSL transformation of IA project file t...
- added Convert tool (ImageMagick).
*** empty log message ***
*** empty log message ***
*** empty log message ***
added test case for fixed treatment of SU
fixed treatment of SU
UNICODE
*** empty log message ***
- Improved the verbose output with the assembly...
- Added Tree.Create
- In chapter 8 corrected the type of the elemen...
- Added the scala logo
- Synchronized the isSet method to guard agains...
In the Abstractions for Concurrency chapter
- Removed Symbol.ERROR and Kinds.ERROR
- Removed references to Symbol.ERROR
- Removed references to Symbol.ERROR
- Removed method error(Tree,String)Tree
- Removed Tree.Bad
- Added method Type.isError
- Removed usage of ERROR in qualifyingClass
- Removed Tree.isMissing
- Added class ErrorScope
- Added name argument to Symbol.newAnonymousClass
- Changed Tree.New(Template) to Tree.New(Tree)
- Moved newErrorClass
- Changed to use Symbol.newErrorClass
- Added attribute IS_ERROR
- Simplified and removed usage of Symbol.ERROR
- Added method mkQualifier
fixed bug in attrib parsing
- bug 281 does not work with interpreter
- Added bug 281
- Added bug 316
- Moved instance of FreshNameCreator from Globa...
- Removed unused code
refined checking for attributes
error if whitespace missing betwe attr
removed &#
*** empty log message ***
added test case for character and entity refere...
added todo
modified toString because of entity references
added parsing of character and entity references
preparing for entity parsing
- added entry docu/clr.xml
new syntax for elems
- For objects whose name doesn't coincide with ...
- Removed now useless code for constructors
- Added creation of general access methods in E...
- Added Methods mapSymbol and mapType
- Remove useless setNameDecoding(false)
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added support for the Any.eq method
- Moved a MSIL specific feature from Erasure to...
added toString method
minor improvement in error messages
bugfix
bugfix scala block parsing
test case for xml parsing
- Added a methods newAccessMethod and isAccessM...
- Added a setStringBuffer(null) in toString met...
- Removed ".type" for NoPrefix
- Added appendSymbol with prefix in SymbolNameW...
- Added test/files/neg/bugs*
- Added test/files/dis/*
- Added target --dis
- added entry docu/ant.xml
- Reremoved bridge methods (for java 1.5)
- Remove TYPE_TYPE
- Remove unneeded meta tag
more test cases
fixed handling of {
obsolete
Set version to 1.1.1.1
- Changed version format to <int>.<int>.<int>.<...
Set version to 1.1.1.0
Set version to 1.1.0.5
- Changed version format to <int>.<int>.<int>.<...
- Split scala.tools.util.AbstractFile into seve...
- Added scala.tools.EmptyIterator
- Implemented the actual metadata import in doC...
Bugfix: fixed filter method to remove elemente ...
- Added support for bitwise logical operations ...
- Removed FILE_SEPARATOR
- Added functions to gather files from paths an...
- Moved creation of root class loader into Global
- Removed reference from CLRPackageParser on Pa...
- Avoided recomputations of files that are alre...
- Standardized names used in ClassPath
- Simplified method lateEnter in Analyzer and A...
- Added method AbstractFile.toString and used it
- Changed Scanner and SourceFile to work with c...
- Added class scala.util.tools.SourceReader
- Added class CharArrayFile
- Added flag -encoding
- Added methods Global.getSourceFile
- Replaced file String by an AbstractFile in So...
- Added VirtualFile and ByteArrayFile
- Moved AbstractFile from scalac.util into scal...
- Untabified
- Removed Position and *SourceFile* from ch.epf...
- Moved Position and SourceFile from ch.epfl.la...
- Added util target
- Added util.lst
- Added Positon and SourceFile in scala/tools/util
- Added parse methods in UnPickle
oops, should be public
added a char[] sourcefile representation and ch...
added a char[] sourcefile representation
- Name.toAsciiUnsafe
- Added classes TermName and TypeName and made ...
- Removed Name.ERROR
- Removed Name.fromSource
- Moved methods precedence and isLeftAssoc from...
- Removed method Name.append
- Removed method Definitions.getModule(Stringm ...
- Removed method subName in class Name
- Added attribute Symbol.IS_ANONYMOUS
- Simplified Symbol.isThisSym
- Added factory methods for term symbol in clas...
- Removed the xmlStuff
- Added test files for xml parsing and xml lite...
works only relative to scala/test
xml parsing should only be active for --xmlPars...
xml parsing changes + slight bugfix in xml repr...
added testing infrastructure for XML parser
- make it at least compile
- added Types.java
- added TypesAsValuesPhase.java
- completely non-working run-time types for Sca...
- added definitions related to run-time types
- added names used by TypesAsValuesPhase
- I removed a the printing of debugging messages.
- I fixed problems that came from the change in...
- Removed a diagnostic print statement.
- Changed the library-msil target to use the cu...
- Explicitly import java.lang.System.arraycopy ...
- Made the 'fail' family of methods static to a...
- Explicitly import java.lang.System.out to avo...
- Added support for enumeration comparison oper...
- Switched off the symbol name decoding for the...
*** empty log message ***
- Added support for comparison operations on .N...
- Changed accessibility of some fields that rep...
- Added creation of md5 files
- Added MD5SUM
- Added checksum attribute
*** empty log message ***
Added come comments in the icodejvm backend
symbols replaced with Elem constructors
- Added Code.Eq to handle ANY_EQ
*** empty log message ***
- Simplified methods parseField and parseMethod
- Added method skipAttributes()
removed 'foo(...) from parser
{{ works
- updated tests with MIN_INT and MIN_LONG liter...
*** empty log message ***
- Added methods Symbol.newVParam
Refactored buffer classes.
*** empty log message ***
*** empty log message ***
*** empty log message ***
cleanup
impl
Made lists persistent.
Refactored code.
*** empty log message ***
- Rewrote Signatures and ConstantPool to avoid ...
- Replaced byte array in Name by a string
- Replaced byte array in Name by a string
- Removed method Symbol.isGenerated
- Removed TreeSymbolCloner.java
- Removed PatternNormalizer.java
- In class Name renamed sub, pos, lastPos into ...
- In class Name renamed sub, pos, lastPos into ...
- Removed unused methods
- Removed unused methods
- Added Similarity.scala and NodeSeq.scala
;changes to xml api
changes to xml api
*** empty log message ***
more flexible reporting
added similarity
- Made TermSymbol.clasz final
- Removed method Symbol.update
- Moved TermSymbol.{lookup,define} into Analyzer
- Added factory methods for abstract types and ...
- Added method Symbol.newFactory
- Forced all class creators to use factory meth...
- Redesigned symbol cloning
- Added boottest to ignore list
new class for representing XML
changed Symbol to Elem
better XPath syntax
new way of handling XML literals
adapted to new xml interface
removed xml stuff
added Elem class:
- Removed broken call to Definitions.getClass
- Removed broken call to Definitions.getClass
- Added doubledefs.scala
- Modified SymbolTablePrinter.getSymbolKeyword ...
- Modified SymbolTablePrinter.getSymbolKind to ...
- Changed Pickle to encode NoPrefix into ThisTy...
- Removed now unused method Symbol.copyTo
- Added factory method Symbol.newConstructor
- Removed now obsolete members
- Removed usage of methods Symbol.makeModule
bugfix and cleanup
a data structure for appending sequences in O(1)
added AppendBuffer
- Simplified some type initializations
- Added new factory methods in class Symbol
- Removed unused method Symbol.enclToplevelClass
- Changed new ClassSymbol into Symbol.newClass
- Added method Symbol.newCompoundClass
- Removed staticsParser and aliasParser in Clas...
- completed the hack to create Java static fiel...
- Replaced MetadataParser superclass by SymbolL...
- Added class scalac.symtab.SymbolLoader
- Added missing cases in method equals
Some modifications on the intermediate code
- Added temporary hack in ClassSymbol.dualClass...
- Improved error messages
- I fixed the bug that made scala-test fail on ...
- Added method Symbol.dualClass();
- Added a node DocDef for documentation comments.
- Added field ClassSymbol.dual
- Added constant CLASS2MODULEFLAGS
- Added method enterNoHide
- Replaced getClass(...).module() by getModule(...
*** empty log message ***
xml literal parsing
moved removal of Sequence Nodes to UnCurry
All sequence nodes removed before LambdaLift
Improved error messages for failed pattern matc...
- Generalized the use of static types/trees in ...
- Simplified and fixed (use isSameAs, not equal...
- Simplified definitions of Global.isStatic
- Removed methods Global.isGlobalModule and Glo...
- Replaced some calls to Symbol.typeConstructor...
- Added methods objectType and stringType in Ja...
- Removed alias scala.String
- Removed alias scala.String
- Added methods JavaTypeFactory.classType(Symbol)
- Added methods isStaticOwner, staticType and s...
- Replaced isGlobalModule by isModule && isStatic
pattern normalizer
removed BUG in append(TreeList)
translated PatternNormalizer
comment
translated to Scala
- hack: turn private, constant fields into stat...
added MarkupParser.scala
markup parsing
- Removed duplicated code
- Removed duplicated code
- Removed duplicated code
- Removed duplicated code
- Removed duplicated code
- Renamed SymbolTablePrinter into MySymbolTable...
- Replaced localThisType by NoPrefix
- Removed Type.localThisType
- Optimized creation of ThisTypeMaps
- == NONE -> isNone()
- Added Type.NoPrefix
- Removed now useless isNone test
- Added Type.NoPrefix
- Replaced "java" by "scala"
- Removed CheckOwners
- Named the java access modifiers
- Removed CheckNames
command line switch for XML
xml parsing with comments
command line option -Xmarkup
- Added missing nextPhase/prevPhase around asse...
- Added test 1
- Added type cloning in SymbolCloner
*** empty log message ***
- added test cases for Scala literals such as J...
- modified protected method 'getNumber' to supp...
- Made transform0 and transform1 private
- Added new node DocDef
- Removed methods Symbol.fullName and Symbol.fu...
- Removed use of Symbol.fullName
- Replaced Symbol.fullNameString calls by Primi...
- Renamed method Primitives.getJavaSignature in...
- Added assertion in method ClassSymbol.module
- Removed use of Symbol.fullName
- Removed use of Symbol.fullName
- Removed use of Symbol.fullName
- Removed use of Symbol.fullName
- Removed calls to fullName
- Added fields JAVA_CLASS and SCALA_CLASS
- Removed Definitions.ROOT
- Small fix
- Removed method Type.expandModuleThis
- Removed dependency on Type.expandModuleThis
- Replaced ROOT by ROOT_CLASS
- Replaced use of fullName by use of types
- Rewrote uniqueName to use SymbolNameWriter
- Replaced name tests by symbol tests
- Replaced name test by symbol test
- Removed special case for scala.Object (which ...
- Removed method SymbolTablePrinter.getSymbolFu...
- Replaced call to Symbol.fullName by call to D...
- Rewrote SourceRepresentation.externalizeFileN...
- Rewrote getJavaSignature to use SymbolNameWriter
- Added class SymbolNameWriter
- Removed duplicate SourceRepresentation.java i...
- Changed Global.symdata from Map<FullName,Pick...
- Added method isGlobalModuleClass
- Patched methods javaName and typeSToJ as in G...
- Removed use of fullName in class scalac.symta...
- Removed use of fullName
- Removed method TermSymbol.thisType()
- Simplified typeStoJ
- Added method Primitives.getJavaSignature
- Changed return type of NameTransformer.decode...
- Removed mangled names from symbols
- Removed scalacboot
- Removed scalac/Main.java
- Removed Global.firstPos & Symbol.setFirstInfo
- I finished implementing search by type modulo...
- Replaced closure intervals by closure histories
- Added ClosureHistory.java
- Added History.java and Promise.java
- Added SymbolComparator.java
- Reorganized phase creation so that types are ...
- changed encoding scheme from 'utf-8' to 'iso-...
- fixed bug #298 (batch commands on Windows).
*** empty log message ***
*** empty log message ***
- Added search by type modulo isomorphism.
- modified argument lists in object 'parsers'.
- renamed to 'computeserver.scala'.
- added object 'parsers' (same as file name).
- added encoding scheme to 'URLDecoder.decode'.
- Added support for static inner classes in Java
- Major code cleanup.
- Added CONSTANTtpe to the tag2string() method.
- Factored out the ConstantType creation from A...
*** empty log message ***
- Added translation of Scala types to ML types.
- adds 'unzip.exe' to Windows installer inorder to
- contains Windows executable of unzip 5.50
- also generate line numbers for mirror classes
- renamed 'buffer1' to 'oneplacebuffer'.
- added package clause.
- added package clause.
- program entry 'sorter' renamed to filename.
- example 'buffer1' renamed to 'oneplacebuffer'
- example renamed to 'oneplacebuffer.scala'
- program entry 'testAuction' renamed to filename.
- Added the possibility of launching an HTTP se...
Support for Java 1.5 classfiles generated with ...
- Removed java version of files translated to s...
- Removed duplicate tree printing
- Removed unused import
Set version to 1.1.0-b4
*** empty log message ***
Set version to 1.1.0-b3
- Added cleaning and building in distrib-official
*** empty log message ***
*** empty log message ***
- Removed deprecated method call.
- Removed unused import
- removed ant 1.6 stuff.
- Changed scalaint to use the scala version of ...
- Added external bootstrap scalac
Set version to 1.1.0-b2
- remove entry about advertising.
- removed entry about advertising.
Removed advertising clause.
Set version to 1.1.0-b1
Set version to 1.1.0-b0
- added return type to function apply in 'succe...
- added example parsers1.scala
added 2nd entry function for compilation from ant
proper classpath handling and Xmarkup command l...
*** empty log message ***
*** empty log message ***
removed because option -Xmarkup is needed
- added header with $id.
- removed some tabs...
- improved comments.
fixes classpath problems, command line switch h...
added support for XML patterns
added test case for xml patterns
- Changed definition of start and limit in Inte...
test cases for xml literal parsing
xml literals with embedded scala blocks
- Added TODO.txt
- Downgraded to the old, bulky val syntax.
- added new field 'isRemote' to class 'Context'.
- Changed Tree.Block(Tree[]) to Tree.Block(Tree...
removed obsolete methods
now it works
better comparison of actual and expected results
added Tuple2, percent
> becomes lt, for XML literal support
NodeList -> NodeSeq
xml literals!
NodeList to NodeSeq
started pretty print functions
- Removed tabs.
Removed the usage of Java-specific libraries.
*** empty log message ***
these are jvm dependent -> ../jvm
these are jvm dependent
*** empty log message ***
- Adapted examples to the new syntax.
- New framework for Enumerations.
- Updated files to the new syntax.
- Changed syntax/semantics of ',' tokens.
*** empty log message ***
added missing case '_' for symbol lit
projections on XML ! preserving document order !
- Changed display of is an as operations
- Added translation of primitive methods of Any...
- Added primitive creation methods
- Added methods isNew, isDynamic, isStatic, has...
- Added constant EMPTY_ARRAY
- bug fix: do not include the path in the Sourc...
things to test the xml library
added projection functions
- Added attribute bit field "attrs"
- Simplified by using isStatic
- Added method isStatic
moved to website directory
- Mark the implementations of what is before Ad...
- Do not mark lifted functions as 'final' - it'...
- Removed asInstanceOf in array creation trees ...
- Added proxy field in ScalaTemplate
- Added proxy field
- Added getClass methods
- Changed transformation of array creations for...
- Added isInstanceOf and asInstanceOf tests
- Make lifted functions private final.
- bug fix: the string concatenation operator (+...
- added file 'docu/faq.html'
- Removed flag STATIC
- changed the way character literals are highli...
- Removed method TreeGen.This(int,Type)
oops, forgot a case in BindingBerrySethi
clean up
bugfix
teset whether fjbg is in classpath
bug
- Added quotes to batch files
- Introduced local and global refs
- Added test to avoid printing Select prefixes ...
- Changed owner of PATTERN_WILDCARD to NONE
- Removed top-level ValDefs (modules)
- Removed interpreter specific code from AddCon...
- Added normal vlink to non-stable modules
- Removed Definitions.NULL and Definitions.ZERO
- Added target boottest
- Generalized use of AConstant to represent con...
Added intermediate code and corresponding jvm b...
- Added flag LIFTED to lifted classes and methods
using LabelDef instead of nested functions for ...
*** empty log message ***
bugfix in PatternMatcher.
Bugfix: Added hashCode() method.
Bugfix: Added hashCode() method.
- fixed a few typos in chapter 3
- Now sort the symbols in the bottom-left frame.
*** empty log message ***
- Implemented the new synchronized primitive.
- Added 'import java.lang.System' to satisfy th...
- Added test/files/run/tailcalls
- Simplified some type transformers (removed un...
- Now there is only one public class in the file.
- Added the HTTPServer.
- Removed method Type.rebind
*** empty log message ***
- Simple HTTP server adapted from the example i...
- Added automatic rebinding and unaliasing in T...
- Removed renamer from SymbolCloner
- Added method isLocked
- Simplified computation of closure
- Added class ThisTypeMap
- Removed duplicate test
- Simplified and improved tail call optimization
- Enabled tail call optimization for all backends
- Added test to avoid StackOverflow
- Added use of method Symbol.rebindSym in metho...
- Added method Symbol.rebindSym and field Class...
- Added field and method ALIAS
- Added handling of ScalaRationale.pdf
Set version to 1.0.0-b9
- added quotes around path names.
Set version to 1.0.0-b8
- Disabled automatic tagging
- changed command line to extract tarball.
- Added backend tag in arguments of runtime tests
- Removed some unused code
- Renamed local variable treeSym into clasz
hello, href links with a #
more
- updated copyright date.
- Improved assertion message
more questions
replaced DefDef with LabelDef for recognizer
obsolete, scala versions up and running
oops, debug output
little bug in command args filtering, fixed
- added file downloads/license.html
- added file extension .jar
- updated copyright date from 2003 to 2002-04
replace if's with switch (but is commented out ...
- added README file
- fixed the Scala URL,
*** empty log message ***
- Improved debuging messages
*** empty log message ***
- changed copyright date from 2003 to 2002-04.
- added custom code (from ZeroG, see IA samples...
- Enabled type cloning in Symbol cloner
- added custom code (from ZeroG, see IA samples...
- Added files test/files/shl/basic.*
- Added flag -shl
- Added flag -nologo
- Added read-only flag to generate .scala_wrapper
- Removed topmost directory of tar.gz archive f...
- Added read-only flag to generated files
- Added method isAccessed
- Added argument to AInvokeStyle.Static
- Moved phase AddConstructors before phase Tail...
ant task in scala
- Added missing cloning of type of new labels
- removed bugs/status.html
do not allow top-level sequence patterns
Set version to 1.0.0-b7
- Added creation of addons directory
- Added link to ProgrammingInScala
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
changes in PatMat chapter
*** empty log message ***
*** empty log message ***
- added page bugs/status.html.
*** empty log message ***
- Now, record the Unit object with the comment.
Set version to 1.0.0-b6
- Added CVS
- added isbn codes.
*** empty log message ***
- Removed library-doc from target all
- Added and commented out jolib
- Added some missing files and commented out on...
*** empty log message ***
*** empty log message ***
- Removed usage of Monitor
- was 'Rationale.tex'.
- renamed to 'RationalePart.tex'
- added cvs id.
- added target 'ScalaRationale'
- Changed scala.Unit to Unit
- Removed class Monitor
*** empty log message ***
*** empty log message ***
Improved an error message for abstract override...
- use "scala" command to launch programs
- bug fix (hopefully): make the style work with...
*** empty log message ***
- Moved test/pos test/neg and test/new into tes...
- Removed .cvsignore
- Renamed scalac4ant into scala4ant
- added arobase.gif
- added images for tgz, bz2 and zip archive files.
- Added platform to archives in installers section
*** empty log message ***
- Added tagging of official distribs
- add "Bridge" attribute to bridge methods
*** empty log message ***
*** empty log message ***
- finished implementation for "synchronized"
- Added comment inheritance.
- Removed bug50.scala
- Now do not generate documentation for module ...
- Removed scala/runtime/NativeMonitor.java
- Added Code.Synchronized and detection of ANYR...
- Removed method synchronized
- Removed method synchronised
- Redefined SYNCHRONIZED
- Added ANYREF_SYNCHRONIZED
- implemented first (and not complete) support ...
- Added synchronized_
- Added primitive SYNCHRONIZED
- Added method synchronised
- Replaced Executable by Application
- Removed List from Predef
- removed from the documentation some modifiers...
- remove JavaScript files.
Set version to 1.0.0-b5
- Removed website generation
- Removed obsolete files
Set version to 1.0.0-b4
Formerly known as class Executable.
Replace class Executable with Application.
*** empty log message ***
- Added PROJECT_ARCHIVEDIR
- Removed website-build-* and website-build.sh
- Chaned to use website.sh instead of website-b...
- Added website-print-xml*
- Added website.sh
added test x@_*
bugfix (revert back to code_body instead of cod...
*** empty log message ***
- fixed the bug about vals that appeared as defs.
*** empty log message ***
- Added option --version to scala-info
- Added ScalaObject.java
- added tags <website>, <version> and <webinsta...
these are onbsolete
changed test to assertEquals, more JUnit like
changed "test" to assertEquals
*** empty log message ***
- Added scripts website-build*
- Added function warning
doc
*** empty log message ***
*** empty log message ***
Bugfix: Delete was incorrect - fixed now.
disallowing forms of binding that lead to bug
- now uses the Array function to initialize an ...
- Added note about type cloning
- Added files/run/runtime
- Added handling of Predef.Array
- Removed old methods Nil and Cons in TreeGen
- Added method Array
- Added array and list creation methods
- Added constants NIL, CONS, PREDEF, ARRAY_LENG...
- Removed type symbol from Root scope
*** empty log message ***
- Added constant arrray
- Added import for .NET
*** empty log message ***
*** empty log message ***
Ignore bridge methods of Java 1.5
more cleanup
more cleanup
- bug fix (#268): make *all* private fields pub...
- Added method List.apply
cleanup
- Added pos/compile.scala
- Added a special case to convert thistype of m...
cleanup
- Added bug 257
- Added bug 267
- Added bug 266
- Rewrote ExplicitOuterClassesPhase with a new ...
- Added method MIXIN
- Added stable type variables
- Added correct owner to non-class compound types
*** empty log message ***
- Added method hasStableFlag
cleanup
pos
cleanup
cleanup
*** empty log message ***
- added support for jEdit in distribution.
*** empty log message ***
- Renamed methods type into conforms, removed r...
- Changed method lookup(Symbol, ...) to go over...
- First commit.
- Minor change.
*** empty log message ***
- added acrobat.css to generate PDF document fo...
- added main functions.
*** empty log message ***
Added new file to the website.
- removed entries lamp.js, lamp_fr.js
- ported the code from Lindig's article
- Moved phase AddConstructors before phase AddI...
- Changed to add calls to all super initializer...
- Added support for initializers
- Added removal of case factory methods
- Replaced comparisons with CONSTRUCTOR_NAME by...
- Added method isUnaccessedConstant
- Added update of constructor position in TypeS...
fixed null pointer exception because of too ear...
- added files changes.(xml,xsl)
*** empty log message ***
handling of attribUTES
handling of attributes
attributes handled in functional manner
AttrDef removed, Pair inserted for handling att...
Cleaned up some code and tried to make the vari...
easy update of attributes
*** empty log message ***
changes for easy updating of attributes
Added new images.
- added arithmetic conversions for chars
- corrected keyword list
- uncommented assertion which checks the symbol...
- bug fix: correct the symbol of RETURN nodes
- Enabled some checks
- Added some code to make sure that owner of no...
- Changed some code to change owner of ValDefs ...
- all data for the Scala website is now in file...
- Removed some assertions (already in TreeChecker)
- added method 'indices'
- Added case for references to inlined vparams:...
- Changed to avoid warnings
- Implemented method expression
- Added method tapply, vapply, function
- Added method type
- jEdit mode for Scala syntax.
- Added method location and selection
- Added missing calls to method expression
- Added method statement and stub method expres...
- Added expression translation
- Removed field other from ACode.Switch
Added sort method to List.
- Added translation of locations
- Added translation of statements
- Added WARNING in class description
- Enabled isParameter assertion
- Added assertions on parameters of MethodTypes...
- Added some missing PARAM flags
Hiding top level classes with private
- Redesigned the tree printing scheme to enable...
- Added translation into attributed trees
- Added printUnits and printGlobal
- Removed used of Global.debugPrinter
- Added template and member translation
- Added constant translation
- Added class ATreeFromSTree
- Added some checks on templates and members
- Added flags to added value parameter
- Added method toString(int)
- Added context and scope management
- added bugs 98, 120 and 250
- Enabled phase make-boxing-explicit
- Added class MakeBoxingExplicitPhase
- Sorted lines
- Added logo
- Added class TreeChecker
- Disabled assertion that says that all classes...
More comments and cleanups.
- removed WEBSITE_WWWROOT
- Changed argument type of methods loadXML to I...
Set version to 1.0.0-b3
Set version to 1.0.0-b2
- Added scala.jar to classpath for interprter
- Added missing directory to TOOLS_JAR_FILES
Set version to 1.0.0-b1
Set version to 1.0.0-b0
Set version to 0.9.1-b0
- adapted to current Scala version
- modified replicate.
dont need Element
dont need Element
not testing toString method anymore
toString method is broken
class symbol instead of element
indenting + slight changes because of Element-S...
turned into trait
using the more specific "symbol" class instead ...
added a lot of XML functionality, replacing sca...
using symbol instead of this file now
removed scala.xml.nobinding.Element, using SYmb...
- Added cases for operations on strings
- emit the symbol table as an attribute of top-...
- removed the remnants of the code for traversi...
handling of escaped sequences x:_*
updated comment
- added 'import java.lang.System' to allow the ...
- initial commit
- modified to work when invoked under cygwin on...
- initial CLR type import capabilities
- added common superclass (MetadataParser) for ...
- added a '-r' option to specify the assemblies...
- Revised all value types
- bug fix (#250): don't generate any code when ...
Cleanup and commenting of library
- incorporated suggestions by Erik and Stephane.
- Added code to remove box(unbox(...)) and unbo...
- Added code to remove coerce methods
- Removed subtyping of value types
- added a "fast" switch (not completely impleme...
- inline conversion primitives
*** empty log message ***
- Added coerce primitives
- Added primitives from Byte, Short and Char
- Added -Q flag to cvs commands
Set version to 0.9.0-b11
Set version to 0.9.0-b10
Set version to 0.9.0-b9
Set version to 0.9.0-b8
Set version to 0.9.0-b7
- Added primitive COERCE
Set version to 0.9.0-b6
- Removed scala/tools from scala.jar
- Removed field Primitive.tag
- Flattened Byte, Short and Char
- added sections about case classes and genericity
- Made value types flat
- Added flags needed for flat value types
- Changed so that optype doesn't rely on subtyping
- Removed AS_x primitives
- Modified erasure to use unbox and x2x methods...
- Added method boxUnboxedType
- Changed name of box primitives
- Changed name of unbox primitives
- Added conversion primitives
- Added methods primitive mapping for x2x symbols
- fixed code for empty arrays
- adapted to new Scala compiler
- use getProject() instead of project member va...
- Added methods getConvertSymbol
- Added conversion primitives
- Added conversion primitives
- Added conversion primitives
- reverted back to version 1.27 for now, as 1.2...
- added target 'library-msil' to compile the sc...
- fixed the -target option
- added support for testing the .NET backend; t...
after fixing bug#246, have to treat toSequence ...
- Added primitive UNBOX
- added transformation of the the backslash cha...
- Added special cases for unbox methods
a possible fix of bug#246
- Removed some unused final modifiers
erroneous hash-consing fixed
toString method
toString convenience
new, more compliant whitespace handling
adapted to whitespace handling
changed check, because of new whitespace handling
- Added compilation and evaluation of Switch nodes
- Added Switch node
- Added UNBOX primitives
- Added comments
- Added primitive UNBOX
- Mirrored the updates from Infer.scala
oops
oops, typo
better message for failling assertion
*** empty log message ***
added stuff for debugprint code creation
optimization, switch instead of if-the-else for...
added debugprint code creation
*** empty log message ***
*** empty log message ***
*** empty log message ***
- bug fix (#242): added support for wide GOTO i...
- added two variants of "fail" taking an except...
- imported java.lang.System.out.println to avoi...
- explicitly qualified System with java.lang.
- explicitly qualified System with java.lang.
new symbols...
comment
TransMatch
*** empty log message ***
brought a first approximation of TransMatch over
- made the parse method 'public static' so that...
- replaced System.out.print with Console.print
- qualified System to java.lang.System
updated to not use 'this'
*** empty log message ***
*** empty log message ***
handling operators *|+@? in patterns
- Added some code to avoid printing bounds like...
reworked section 8, and added comments about fonts
*** empty log message ***
- updated to current Scala compiler
- Added the possibility to tell what packages a...
renamed entry point, restricted method access
renamed call to PM
moved some methods from PatternMatcher
removed tabs
- Removed method symbolString
- Added special case for initializers in simple...
Removed the last type parameter in maps and sets.
- Removed owner link between classes and module...
- Changed List(s1) to (s1 :: Nil).
Removed Swedish character from name
*** empty log message ***
- Added a means of observing pi-calculus reduct...
removed Labelled
comments, cleanup
don't need this any longer
moved to scala.xml.nobinding
fixed bug224
- Added erasure of typeOfThis
- Added special transformation of typeOfThis
- Added isThisSym
added attributes to toString methods
changes in xml node hierarchy
*** empty log message ***
added $percent, but is commented out
space
*** empty log message ***
Bugfixes to Tree and TreeMap
- Removed isXXX methods
constructing xml nodes
added utility
new xml nodes
adapted to new xml nodes
*** empty log message ***
- Added JRE_HOME and JRE_JARFILE
*** empty log message ***
- Added unboxing primitives
bugfix
- Moved bug199 into files/run/bugs.scala
- Moved into files/run/bugs.scala
- Added bugs 217, 222 and 233
- Modified one line to overcome a bug.
*** empty log message ***
attrib node
- Made Scaladoc use the symbol table instead of...
- Removed useless asInstanceOf
- Removed special case for ANYVAL and ANYREF in...
fixed error in pow!
creating XML
creation of XML values
added NoBindingFactory
- Modified to use new GetTreeCloner
*** empty log message ***
- Added class GenTreeCloner
- Added type and symbol transformation
- Added some methods Typed
- corrected hard-coded path for WWWROOT
- corrected minor typos
- Added AbsTypeDef and AliasTypeDef
modified class name of PCDATA to Text
added default for WWWroot
- corrected minor typos and errors
- added url for online version of Abelson's book
*** empty log message ***
attributes...
handling of Symbol and Labelled changed towards...
comment
added fromList method, but crashed compiler?!
added xml.xml
*** empty log message ***
*** empty log message ***
- Added printing of types from scope after expl...
*** empty log message ***
Removed dead code check.
Set version to 0.9.0-b5
Set version to 0.9.0-b4
- Added flag --boot
- Rewrote exec_* functions
- Adapted to new scala_wrapper
- Added LIBRARY_SCALAC
- Added "bootstrap" tag in product name
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added rules to build scalac4ant
- added function 'TreeArray'
- quick fix to bug 218 (scala option on Windoze)
- Updated verbfilter.mk
- Updated Makefile to do bootstraping
- Added scalac.lst
- removed tabs
- Removed inner classes from RunTime
- oops fix: oarray is really recognised as a pr...
*** empty log message ***
- recognise scala.runtime.Runtime.oarray as a p...
- delete the code of Units which were loaded on...
When targetting the MSIL backend, add an abstra...
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added code to print type members from symbol ...
- Added some end phases
- Added some assertions on info
- Changed so that no symbol except ROOT has NON...
- Added method type()
- started migration of scaladoc from Java to Scala
- Removed field toType
- Added code for multibound arrays
- Added bugs 225 and 226
- Added AS__ARRAY and BOX__ARRAY
- Added special case for primitive AS__ARRAY
- Added primitive AS__ARRAY
- Added methods asArray
- Added method asArray
- changed 'listinline' to 'lstinline' (typo)
Change the access modifiers of private class co...
def attributes was inserted multiple times
removed debug output from dtd2scala
disabled notification on "using cached elem"
- Added target .latest-dtd2scala-rsrc
api change
API change for XML data that is not bound to cl...
removed comment template
param binding in dtd2scala with an xml object t...
changes to XML API and parameterized binding in...
added foldLeft method
*** empty log message ***
*** empty log message ***
* Added support for disassembling regular Java ...
* adapted scalap to the new pickle format
*** empty log message ***
- I minimalized the path from one page to anoth...
- No new features, just redesigning.
- Added method info(Symbol[])
- Removed class DebugType
- Removed special code for New
*** empty log message ***
- Removed methods nextTypeParams and nextValueP...
- Added code to add the missing this qualifier ...
- Made scaladoc.SymbolTablePrinter independent ...
*** empty log message ***
- Added assertions
- Added missing this qualifiers
Modified to work for the .NET platform, where p...
- Removed JAVA modifier from ANY_CLASS and ANYR...
- Removed occurrences of "<: Any".
- Moved erasure of superclasses of interfaces f...
- Removed Anchors, added TreeSymbols.
- Removed old comment
*** empty log message ***
*** empty log message ***
Added support for | in algebraic patterns;
- Added cvs-remove-directory
- Added cvs-move-directory
- fixed typo
- added runOO
- changed 'Ecole Polytechnique...' to 'EPFL'
- changed 'Swiss Federal...' to 'EPFL'
- changed 'Eidgenoessische Techn...' to 'EPFL'
- moved 'scalai' to package 'scala.tools'
- moved 'scalai' to 'scala/tools/scalai'
- fixed handling of object "main" function
- fixed handling of object instance fields
- Made all links work.
- removed option 'Xshortname'
*** empty log message ***
added xml path expressions
xml path expressions and a (not yet working) pa...
- Added methods resultType and nextResultType
- Removed atree/ACodeFactory.java
- Added +atree/ATreeTyper.java
- Changed type into kind
- more extensive translation of java.lang.Strin...
- more extensive tranlsation of java.lang.Strin...
- Added atree/ACodeFactory.java
- Added jvm correspondance
- Added case AFunction.NewArray
- Modified AFunction.Method to use InvokeStyle
- Added atree/AInvokeStyle.java
- Completed class ACode
- Added atree/AFunction.java
- Added ACode.This
- Added atree/ALocation.java
- Added field Unit.repository
- added file downloads/install.xml
- added website specific configuration variables
- Added atree/AClass.java
- Added atree/ACode.java
- Added atree/AConstant.java
*** empty log message ***
- Added atree/APrimitive.java
- Added atree/ATreePrinter.java
- Added atree/AArithmeticOp.java
- Added constant coerce
*** empty log message ***
- Implemented initializers without type arguments
- Added method setParamOwners to fix owners of ...
- Changed return type (because Function is not ...
- Readded STABLE flag to accessors
- Added missing transform
- replaced tabs by spaces
binds now printed correctly
fixed erroneous handling of typed patters
modified case for Bind(...) nodes
- version updated manually
- Added distrbi-build-website
- Added PROJECT_WEBSITEDIR
- Added website.lst
- Resynced version
XPAth expre
new files
XPath expression
code cleanup + added parsing of content models
- Added Makefile.import
*** empty log message ***
- added xsltproc tool
- corrected call to printType for ConstantType
*** empty log message ***
*** empty log message ***
- Removed condition on super call inlining.
- Changed the return type of initializers to Un...
*** empty log message ***
- Modified to use GenTransformer
- Modified to use GenTransformer
- Added class GenTransformer
Removed the special cases for the JVM backend; ...
*** empty log message ***
- added compatibility function scala-regexp-opt...
*** empty log message ***
Typed patterns x:T and variable patterns x are ...
added handling of Typed nodes to isSequenceValued
desugarizing of x:Typed in patterns
- Added bug 213
- Normalized member names of class Definition
removed tabs!
fixed bugs and cleaned up code in AlgMatcher th...
added test case for bug#195
the curse of static variables...
need only one build.xml file to build and test ...
added options classpath, bootclasspath
- Removed ROOT_TYPE
- Removed reference to Definitions.ROOT_TYPE
- Removed fields JAVA*, JAVALANG*, SCALA* and S...
- Removed reference to Definitions.JAVALANG
- Simplified import tree generation
- Added STABLE flag to companion modules
- Simplified computation of list type
- Added methods Import
- Removed method _scala
- Removed field RUNTIME_TYPE
- In Definitions, replaced primitive _TYPE fiel...
- bug fix: clear FINAL flag for interfaces and ...
fixed bug in patterns()
added the clear() method
fixed bug in isSequenceValued
 fixed bug196 with a wild hack
fixed bug196 with a wild hack
added test case for bug196
- Replaced most of the Definition <...>_TYPE fi...
indentation
still initial. added a title to the result f.a.q.
- specified the exact return type of the 'def u...
initial
- Added method printValueParams & printTypeParams
- Added wrapper "scala"
- Implemented command "scala"
more descriptive comment
added test case bug180
cleanup
fixed hashing (hasing TypeTerms now using Type....
no change
added test case for analyzer (bug179)
uncurry should also add Sequence nodes for Alte...
fixed too restrictive assertion for type-checki...
- Changed rewrite schema => regenerate whole tree
- Removed hack in Ident and Select
- Added method memberStabilizedType
cleanup
- Renamed defavlt into otherwise
merging large parts of Algebraic Matcher with P...
merging large parts with Pattern Matcher
- Added method singleTypeMethod
- Added phase changes
- Cleaned
- moved scalap to scala.tools
- bug fix: "new" should now be translated corre...
*** empty log message ***
- Replaced body of isSubType by a call to Type....
- Added removal of types of this
- Expresssed TypeSymbol.type() in terms of prim...
- Improved debug message
*** empty log message ***
- added collection/immutable/Order.scala to the...
- updated keywords list
Set version to 0.9.0-b1
Set version to 0.9.0-b0
- Added TEXINPUTS
*** empty log message ***
-- corrected 'lstinline' tag (begin/end must be...
- Cleaned distrib rules
- Added GZIP, BZIP2 & PROJECT_DISTRIBDIR
Set version to 0.8.2-b1
- removed BCEL-based JVM back-end
- Added version management
- Changed comment
- Added version manager
- Improved stdlib.sh
Set version to 0.8.1-b4
Set version to 0.8.1-b3
Set version to 0.8.1-b2
Set version to 0.8.1-b1
cleanup
cleanup
*** empty log message ***
- Made the method "dequeue" decrease the length.
*** empty log message ***
Set version to 0.8.1-b0
- Added VERSION
- Made the Ref class polymorphic.
*** empty log message ***
*** empty log message ***
- Cleaned
- Added methods to print arrays of primitive types
- Revised & Cleaned
- Added new methods
- Added type transformation of java symbols
- Removed range checks from asX methods
*** empty log message ***
- added 'shortname' flag to control file name o...
- added non-standard option '-Xshortname' for t...
- added class 'TestCommand' in order to improve...
- function 'compareFiles' now returns diff stri...
- function 'execute' now returns exit value (wa...
 - updated to the new msil library; works on ex...
- Added overlapping.scala
- Added overlapping signatures checking
- Reduced number of added bridge methods
- Reimplemented overriddenSymbol and overriding...
- Added class Relation
- Examples using the jolib library.
- moved scaladoc into scala.tools package
*** empty log message ***
Corrected handling of scopes.
- Cleaned
- Cleaned
- Cleaned
- Cleaned
- Added a handle for Trees
- Cleaned
- Added transformation of Super nodes
- Cleaned
- Cleaned
- Cleaned
- Added test for empty tree nodes in ClassDef
- Added bug175
- Added bug166
- Added bug 177
- Added test to avoid duplicate owner update on...
- Added phase change
- Added bug 160
- Modified AddConstructors to make it work befo...
- Renamed mkInterfaceDef into ClassDef
- Improved debugging code
- Added method isInitializer
- Added methods TypeApply
- removed class Command (now in separate file)
- minor changes
- class Command is now in a separate file
- corrected printlnTag
- added file Command.java
- added scalap
- Moved symbols from CodeFactory into Definitions
- Removed all instances of Infer
- Removed field PatternTool.make
- Addded methods CaseDef
- simple framework to describe the test process
- the main scalatest class
- some file utility methods
- Java implementation of GNU diff (GPL licence)
- same class as scala/Console.scala, but in Jav...
- initial list of scalatest files
- added scalatest tool
- added generation of scalatest tool
- Addded Definitions.PATTERN_WILDCARD
- Replaced usage of make by gen
- Replaced usage of make by gen
- Added method seqListSym_length
- Added missing -jc and -sc suffixes
- Added temporary hack for stable symbols
- Removed Autom2Scala._applyNone
- Removed CodeFactory.Block
- Added method flatten
- Changed call to super
- Removed fields CaseEnv.make
- Replaced gen.Apply by gen.mkApplyXX
- Replaced some use of "make" by "gen"
- Added bug193.scala
- Changed extractPrimitiveArgs to not unbox fir...
- Added methods Switch
- Added methods isInstanceOf
- Added bootstrap
- Renamed methods mkApply into mkApplyTV and mk...
- Added method mkLit
changed pattern grammar, () is now empty sequen...
changed pattern grammar, () is now empty sequen...
*** empty log message ***
*** empty log message ***
changes to grammar, fixing () for empty sequenc...
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added variable PROJECT_BOOTSTRAPDIR
*** empty log message ***
- Added pos argument
- Added method isClassType
- Added bootstrap code
scala version of test reg traverser
Made an error message more precise.
- Added bug183.scala
- Added currentPhase modification
- Added bridges.scala
- Added code to does method lookups for interfa...
- Added a version of overridingSymbolfor phases...
- Simplified code
added test case for #133b
fixed bug133, refactored code ignoreValue,Null ...
- Added bug 176
- Added code in AsSeenFrom.apply to unalias reb...
- Added outer type links to rebound abstract types
*** empty log message ***
- Reverted changes done to toPrefix
- Added special case for TARGET_INT in genNewArray
- Changed uniqueName to use Symbol.fullname()
- Replaced name length test by Names.ROOT equal...
- Changed name of ROOT to "<root>"
- Replaced test of name length by call to isRoot
- Replaced test of name length by call to isRoot
- Added special case for Root
- Added name ROOT
fixed hash-consing
Added more options.
- Minor modifications.
made xml elements mostly immutable, had to adap...
removed java collection classes, using only sca...
 removed java adapter classes for map,hashmap, ...
removed java adapter classes for map,hashmap
*** empty log message ***
- Improved class description
- Added bug 166
- Now the type of a guarded process contains th...
- Moved bug 142 into bugs.scala
- Added new methods
comments
moved methods for constructing Cons and Nil fro...
moved methods for constructing Cons and Nil to ...
added methods for constructing Cons and Nil
- added RUNTIME_CLASSES in classpath for dtd2sc...
- removed bug142
using escaping of sequences in constructor call...
removed setChildren, 1st step to make elements ...
- Moved bug 142 into bugs.scala
*** empty log message ***
- Added a constructor to AbsTypeSymbols
added testcases for last bugfix (testNN)
fixed bug that appeared with constructors that ...
More Erlang like processes.
- added a check for mixin evaluation order (bug...
added compilation of scalac4ant (ant task)
initial - a ant task for scala written in java
initial
- Renamed bug 135 into 168
- Added bugs.scala
- Modified method proxy to compare enclFun of o...
*** empty log message ***
- Minor simplification.
added helper classes for pattern matching on ar...
helper classes for pattern matching on arrays a...
- Replaced usage of ANY_TYPE by ANY_CLASS
- corrected generation of jar archive for dtd2s...
- corrected dtd2scala settings
- bug fix (#120): make sure that mixin's constr...
 dtd2scala reimplemented in scala
dtd2scala reimplemented in scala
reimplemented in scala
- Modified Type.erasure to replace prefixes by ...
- Added bug121.scala
- Added a block around each Return to make back...
- tentative bug fix [#100]: scala.Array now inh...
- bug fix [#98]: only treat top-level modules s...
entered test case for bug132
bugfix, using TreeGen now instead of make...
fixed hashing of patterns
removed xerces stuff
XERCES stuff was thrown out
- Better implementation of Pilib with fewer thr...
removed XERCES stuff
removed XERCES stuff, now using crimson by defa...
*** empty log message ***
removed XERCES stuff, no longer needed
- added new constructor (for 'script' field)
- added new field 'script'
- corrected header comment
- modified german text label
- added scaladoc resource 'script.js'
*** empty log message ***
Support for pattern matching on Jaco case class...
Small fixes.
Bugfixes.
*** empty log message ***
Included scalap.
Library classes for adapting Java collection cl...
Initial scalap file list.
Removed tabs, added header.
Initial implementation of scalap.
*** empty log message ***
*** empty log message ***
*** empty log message ***
Restricted lexical syntax of operators.
*** empty log message ***
*** empty log message ***
- Added test file for bug 142
- Added creation of bridge methods for abstract...
- Augmented symbol map with abstract types from...
- Improved main method lookup method
? nothing changed
better checking of patterns
checking patterns
added parentheses around x @ ('a','b')*
- Added missing map(targs) in typeTransformer
- Removed method TreeGen.localDummy
- Modified to not use type of template
- Replaced TreeGen.localDummy by TermSymbol.new...
- Added factory TermSymbol.newLocalDummy
Preliminary Map test
- corrected test condition for locales in 'ia-b...
- There is a problem with version 1.5, replaced...
Added Tree & TreeMap to collection/immutable
- Removed TreeGen.Select__
- Added field and method OBJECT_TAG
- french translation of text labels
- french translation of Scala license
*** empty log message ***
- Scala license in HTML format
- german translation of text labels
- german translation of Scala license
- added 'en', 'fr' and 'de' locales
- added 'en', 'fr' and 'de' locales
- Added function scala_Function
Implemented variable binding for the "old" patt...
- move 'overload' macro to begin of document
- Reviewed and cleaned TreeGen.
- Added method nextTypeParams and nextValueParams
Allow non-recursive bindings for the "old" patt...
*** empty log message ***
I reverted to the old version because the new o...
changed type1() to type() in pattern parsing,
Refactoring.
Initial release.
*** empty log message ***
I hacked the problem with Byte, Short, etc.
- Changed array erasure rule.
*** empty log message ***
Small bug :-).
- Replaced TreeGen.mkParentConstr by TreeGen.mk...
- Bug fix: new class did not reuse constructor ...
- IA project file for Scala
- french locales for IA labels
- added InstallAnywhere build to distribution
- added standard tools tar and unzip
- The name ERROR is now both a type name and a ...
documentation
- Replaced some TypeApply+Apply by mkApply
- Simplified (no more OverloadedType and NoType)
- Changed rawInfoAt to not invoke transformInfo...
- Updated the code that transforms interface co...
- Add fix to use right phase to print tree
- Rewrote ExplicitOuterClassesPhase to add type...
- Added OUTER and SUPER methods
- Added more general getSubst methods in Type
- Added concat methods
*** empty log message ***
- Removed UpdateSubstSymMap (replaced by Type.U...
- Added class UpdateSubstTypeMap
- Added method mkIdents
- Added additional cloneArray methods
- Added TreeGen.mkTypeIdent
- Added a phase change before printing to get r...
- Changed mkParams and mkTypeParams to used pos...
- Removed SymbolMapApplier
- Changed methods cloneArray to avoid creation ...
*** empty log message ***
- Renamed isFinal into isMethodFinal
*** empty log message ***
- file moved to scaladoc directory
*** empty log message ***
- added 'args' as public member (used in scaladoc)
-- methods InsertBefore and InsertAfter now ret...
- remove scaladoc specific options
- added 'stylesheet' parameter to class constru...
- added DEFAULT_* constants
- added HTMLGeneratorCommande, HTMLGeneratorPha...
- moved DocModule class to scaladoc.lst
-- scaladoc now has its own Main class
-- added LIBRARY_SDC_FLAGS for scaladoc options
Tailcall fixed to handle some more cases.
- Added PROJECT_VERSION
using Switch in translation of automata
*** empty log message ***
*** empty log message ***
- Added method isFinal
- Removed obsolete methods
- Added more documentation to methods setInfo a...
- Replaced field Global.phases by fields Phase....
- Removed methods typeOf0
CodeFactory now creates trees with correct posi...
made AlgebraicMatcher a subclass of PatternMatc...
Added more comments, removed StructuralEquality...
Cleaned up the pattern matcher.
- removed hack to work around ExpandMixin bug, ...
- fix symbols referenced by "super" in imported...
*** empty log message ***
- bug fix: correctly handle return
- handle return
- adapted to the common Scala document style,
- removed the code to handle variable definitio...
- replaced empty trees in right-hand sides of v...
- added printlnNbsp and printlnHline
Implemented optimized pattern matcher that uses...
Minor modifications.
*** empty log message ***
*** empty log message ***
Added support for case class tags.
Added support for case tags.
- Made the auction example work (it required to...
*** empty log message ***
- bug fix: correctly handle calls to the primar...
*** empty log message ***
code cleanup + fixed matching of empty sequence...
Switched on switch expressions. ;-)
- Added insertion methods
- don't use accessors for constructor arguments...
- Changed test-xml to use flag -d of dtd2scala
- Added missing @
- added multiple constructors handling
- Changed install code to use installed scalado...
*** empty log message ***
oops, class name corrected
FactoryAdapter rewritten in scala
using FactoryAdpater in scala instead of Factor...
removed spurious whitespaces
- Added Id
- only redefine \chaptermark if it is really de...
added attributes to generic xml representation
-- changed socos to scalac
- renamed tutorial.scala.tex to ScalaTutorial.s...
- Added pilib example files.
- improved javadoc comments
- improved javadoc comments
- Added "PiLib" library and associated examples.
- bug fix: try to correctly transform secondary...
- multiple constructors are now supported
- removed tabs and whitespace
- Added timestamps preservation
- Added flag -p and --preserve-timestamps
- updated for the new handling of labels in FJBG
- bug fix: try to handle multiple constructors
- Added special case for Switch
- Moved Switch below If.
Removed some debugging output.
Included optimization for top-level switches on...
Removed some files, otherwise it was not possib...
removed SeqTrace stuff, is not needed by TransM...
removed SeqTrace stuff.
- Updated to make work again
- Split scala archive into two parts: scala.jar...
- Added missing files
*** empty log message ***
- Added xhtml test
- implemented new Switch node (warning, unteste...
- Added xml test lnk
- Added target --xml
- Added node Switch
- Moved FactoryAdapter from dtd2scala into scal...
- Changed as into asInstanceOf
- modified javadoc comments
- Scala and Java classes now belong to differen...
*** empty log message ***
- bug fix: correctly highlight identifier start...
- extract information solely from symbols - doe...
*** empty log message ***
- Removed verbfilter stuff
- Changed default.distclean to reuuire clean in...
- handle multiple constructors
- handle multiple constructors
- removed obsolete files (which were renamed)
- adapted to the new version of FJBG
*** empty log message ***
- updated Scala command
- added missing newline in printPreamble
*** empty log message ***
- renamed Attr to XMLAttribute
- renamed Attr to XMLAttribute
- added resource files to generation of scaladoc
- Added Id
Cleaned up code and fixed titlepage bug.
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
removed Html and Page classes
added Attr, HTMLPrinter and XHTMLPrinter classes
commented out test case with Stack (no more <: ...
*** empty log message ***
Forgot one compiler.lst
TailCall optimization for jvm.
TailCall optimization for jvm.
Removed the structural equality trait.
- Changed freeze to never skip phases INITIAL a...
*** empty log message ***
- Removed constant Global.POST_ANALYZER_PHASE_ID.
- Removed unused constant START_PHASE_ID
- Removed unused field phaseId
- made some makefile scripts a bit more robust ...
- rewrote the phase creation process
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Removed SubstTransformer.java
- Replaced use of AttributedTreeCopier by Trans...
- Replaced use of SubstTransformer by TreeCloner
- Added IdMap
- updated to the new flavour of Super node
*** empty log message ***
Hiding in/out
Added more doc-comments.
Added a new function for quickly creating itera...
*** empty log message ***
- removed StackedMap, which isn't used anymore
*** empty log message ***
*** empty log message ***
- Added code to fix result type of lifted prima...
- Use nextInfo of constr (this was lost by last...
- correctly highlight variance and bounds in ty...
- Implemented scala-info
- added documentation for the new methods
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Removed now useless switch
*** empty log message ***
replaced by test file exceptions.scala
*** empty log message ***
replaces test file mics1.scala
*** empty log message ***
*** empty log message ***
*** empty log message ***
toString method now returns "Stack(..)"
- implemented referential equality (x eq y)
- bug fix: emit a GOTO for an Apply node referi...
- Added primitive ID (Any.eq)
- Updated Makefile.distrib
added sections /C3"Packages", /C4"Operators" an...
*** empty log message ***
- Added missing files
- Added command show-missing
- Added some tools
- Removed printing of stack traces if not in de...
- Replaced WORDFILE.TXT by scala.txt
- Replaced socos by scalac
- Repalced socos/surus by scalac/scalarun
- Added .cvsignore
- Renamed apidir to apidocdir
- Added compilation of scala documentation
*** empty log message ***
- Added new command names
- Added new command names
- Renamed log(Object[]) and show(Object[]) into...
- Changed interpreter to handle preloaded symbols
- Removed condition owner.isPackage() from isPr...
- Replaced NOPOS by FIRSTPOS or other non zero ...
Renamed ambiguous method.
Removed tabs to make the emacs people happy.
Added support for structural equality in mutabl...
- uncommented files in the collection library w...
- quick hack: make sure that the correct code i...
- bug fix: before replacing the symbol for a ca...
- Removed debug echo
- Added printing of cause
- Removed field cause (using super.cause instead)
- Enhanced exception trace computation
*** empty log message ***
updated keyword list in section 2.3
updated keyword list in section 5.5
- Added sc.mk
- Added SCALAC
- changed emacs mode specification
- fixed to pass compilation
- changed is and as into isInstanceOf and asIns...
- changed module into object
- Removed reference to linuxsoft
- Simplified handling of PROJECT_OUTPUTDIR
- Added some tools
*** empty log message ***
- Replaced some variables
- Removed files that no longer exist
- Removed dependencies
- Changed script generation code
- Added cvsignore
- changed 'as' to 'asInstanceOf'
- changed 'as' to 'asInstanceOf'
- activated code to write pickle data to class ...
- made unzip's type more general
*** empty log message ***
- added functions make, tabulate, flatten, unzi...
- added the identity function (id)
*** empty log message ***
*** empty log message ***
- Updated Makefile to use Makefile.config
- Updated Makefile to use Makefile.config and s...
- Added scalatex.mk
*** empty log message ***
- Added scalatex.scm
- Split Makefile into 3 files
- renamed tutorial.scalatex to tutorial.scala.tex
*** empty log message ***
- added a hack to make sure that flags are tran...
- Added support for inlining default bootclassp...
*** empty log message ***
- Added trabsformation of <local>.this into <ow...
- Changed localDummy to generate non-empty names
- Added show methods
*** empty log message ***
*** empty log message ***
- Changed owner of STRING_PLUS_ANY from STRING ...
- Repolaced Tree argument of This and Super nod...
- Added TypeNames
hash-consing on load, enabled per default
added testNotEquals
- modified phase to make it compatible with sep...
- Added scaladoc target
- Added $Id$
Added:
*** empty log message ***
shortest-match policy instead of longest match ...
refactoring: removed class FiniteAutom.
added examples, added "shortest match policy", ...
removed FiniteAutom (refactoring)
- added isLabel method
- implemented (but didn't test because of lack ...
added comments
- bug fix: for calls to "super", use the name o...
- avoid creating several temporary variables wh...
generic xml parser adapter
"freshening" of patterns before calling algbera...
- Changed some hasSymbol into definesSymbol
- updated error message
- Made field of TreeGen final
- Rewrote and reorganized several parts.
- Made field Entry.owner final
- Removed useless call clazz.info()
- Added method cloneArray
- Added method cloneTypeNoSubst
- Added methods getSymbols and getTypes
- Added ForwardingMap.java
- Added methods cloneSymbols
- Added method New(pos,Tree)
- Added contructor with SymbolSubstTypeMap
- Added method traverse(Unit[])
- added line numbers to generated class files
- changed to use the Primitives wherever possible
- simplified the code to update the class' type
- bug fix: do not remove members which do not g...
- do not put abstract methods in classes
- renamed son of Super from "tpe" to "qualifier"
- print the qualifier of "super" as a real qual...
*** empty log message ***
- bug fix: clear the PARAM flag of mixin constr...
- implemented qualifier "super" references by a...
Some cleanup
- Changed some MACRO_* for relative paths
- Added files from "files/jvm" to target --jvm
- Added JavaInteraction
- Added a missing cast in AddInterfaces
- Added method bound
GBTrees added to library
*** empty log message ***
- bug fix: removed duplicate "toString" method
- Modified to use TreeCloner, SymbolCloner and ...
- Added TreeCloner, SymbolCloner and TreeSymbol...
- Added TreeSymbolCloner.java
- Added SymbolCloner.java
- Added TreeCloner.java
- Exchanged classes and sources in SCALA_BOOTCL...
Removed tabs.
Added some generic wrapping functionality.
Added a comment.
More refactoring.
Added some comments and removed inconsistencies.
- Added flag -c to siris & surus
added missing cases in getVariables !!
- Removed duplicates
- Removed duplicates
- Removed duplicates
- Changed logo
- Added .cvsignore
- Removed .scala_wrapper
rules for Pattern in grammar in appendix
pattern matching
*** empty log message ***
*** empty log message ***
*** empty log message ***
Error message fix
*** empty log message ***
fixed overly permissive parsing of TreePattern ...
added "isEmptySequence" method
*** empty log message ***
corrected typos
*** empty log message ***
indentation
- bug fix: fixed a bug which was introduced by ...
indentation
removed tabs
toString method works correct now
toString experiments + code formatting
*** empty log message ***
*** empty log message ***
- Added a missing isMethod test on LambdaLiftPh...
- Removed "case TypeRef(...)" from method Type....
*** empty log message ***
project sourcedir for dtd2scala
moved FactoryAdapter to another package
moved to another package
moved to another
XERCES_PATH has to come before scala (esp.
dtd2scala moved to another package
test cases for regular pattern matching
- Removed "case TypeRef(...)" from method Type....
refactoring
code-cleanup, refactoring, corrected multiple u...
changed comments
added TracerInScala (refactoring)
started work on chapter 8 pattern matching
obsolete
removed .../transformer/matching/SplitNested - ...
code cleanup
proper handling of variables in sequence patterns
added static method, hid private variables
added isWildcardPattern in case Ident
isWildcardPattern
- Removed the "as seen from" part from method c...
- bug fix: also set flag forJVM when generating...
completed migration. pattern matching works now
completed migration. code is now operational
isSequenceValued
temporary hack
- Changed ClassSymbol.cloneSymbol to give the c...
- Changed getClassSubst to return SymbolSubstTy...
- Removed method updateMember
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Removed method deepCloneSymbol and inlined it...
- Changed cloneType to avoid "as seen from" if ...
- Implemented Symbol.cloneSymbol() and made abs...
- Removed expand-template and expand-template.scm
- Added script dtd2scala
- Removed bin/dtd2scala
- Added target dtd2scala
- Added constant NOSYMBOL
- Added list of possible targets
- Added flag --flags
- Added method Type.cloneType
no longer needed (moved to linuxsoft as for BCE...
no longer needed (integrated in Makefile)
added generation of dtd2scala
- Added method Symbol.cloneSymbol(Symbol)
- bug fix: transform correctly "new" expression...
*** empty log message ***
- introduced the new JVM backend as default, wh...
- renamed NONE to EMPTY_ARRAY to be consistent
- renamed GenJVM[Phase].java to GenJVMBCEL[Phas...
- Removed some .apply
Removed tabs.
Turned the stack class into a covariant datatype.
Added equals and hashCode functions.
Reverted to at in Streams
*** empty log message ***
Basic implementation of maps and sets.
Added test for immutable queues
Simple implementation of Sets using lists (even...
Names are now consistent in the immutable package.
Changed some names.
Cleaned up the interface.
Deleted deprecated at()
Removed function at (was deprecated).
Deleted deprecated at()
Updated to use apply() instead of deprecated at()
Functional Queues, take 3
*** empty log message ***
*** empty log message ***
*** empty log message ***
type inference for regular patterns, still faulty
removed at, fixed code for Literals
removed at
Functional Queues, take 2
Functional Queues, take 2
added license info from http://xml.apache.org/x...
fixed bug in adapt(...) with Martin
allocation of variables in binding
boolean instead of Boolean
Functional Queues
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
update package name
Adapted to the latest collection class refactor...
Changed names in all the files and started to a...
names for matching, binding
bug fixed
needed for binding (added temporarily)
matching
error message for iterator
*** empty log message ***
- moved collection stuff to collection/ directory
handle matching with if pat contains reg op Alg...
AlgebraicMatcher
- Added printing of type of block nodes when fl...
- Added method isDeferred
- Improved debug message
indentation + javadoc comments
commented out subseq case
*** empty log message ***
removed subseq nodes
removed subsequence nodes
- Factored some code
some stuff for pattern matching
typechecking for patterns
hooking up pattern matcher with sequence matcher
testregtraverser
- Moved definition of empty name into Names.
pattern matching encore
Matcher fields uncommented
pattern matching files....
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added a call to unalias in the definition of ...
collect variables from patterns
Stephane please do not delete commented lines, ...
corrected list for transformer/matching/*
changed code for sequence matching, not yet ope...
code for sequence matching, not yet operational
sourcefiles 4 pattern matching
- Added method updateMemberInfo.
- Changed method parseType to unalias the type ...
import of DTDs
pizzadoc experiment
some names for sequence and iterator handling
cleaned up constructor
The definition of put in Maps was broken.
Added a new apply method to each phase which al...
removed tabs
*** empty log message ***
Refactored code and added a few bits and pieces...
- cleaned up tabs
2 keyword swaps in initKeywords
- bug fix: make sure that the types of mixed-in...
- removed thisTypeMap, which is superseded by u...
It seems like the compiler cannot handle "null"...
Did some refactoring.
removed tabs
- modified debug messages (Philippe did that ac...
- bug fix: substitute ThisTypes when importing ...
- added a way to substitute ThisTypes during tr...
- replaced uses of ThisTypeMap (now dead) by Ty...
- made SubstThisMap constructor public, and add...
- Set elimination phase of tree node ModuleDef
- moved the initialization of the class-paramet...
- bug fix: comparison with boolean literals now...
- bug fix: normalize ThisTypes during erasure
removed tabs
Support files for the Publish/Subscriber mechan...
Included a generic Subject/Observer implementat...
*** empty log message ***
- bug fix: stupid typo leading to ClassCastExce...
- bug fix: use correct symbols for things which...
*** empty log message ***
*** empty log message ***
- Moved interpreter-specific code out of class ...
moved map, hashmap to other dir
attributes
representation of xml text
adapted to new version, attributes work
type checking sequence patterns
- Added sourcefile tracking for stack traces
- Added method getShortName
- Removed file from encoded positions
cleaned up
change to adapt to new iterators
This is just a hack to make the compiler usable...
 - various small changes
 - resolved a merge conflict
changes for WordAutomInScala
WordAutom2Scala translation
translation
added Autom2Scala and related methods (pattern ...
added Autom2Scala (pattern matching)
added automata stuff
automata stuff for pattern matching
*** empty log message ***
removed ListBuffer and MapImpl
*** empty log message ***
refactoring of pattern matcher
Added widen.
- Added empty switch
This file is now called DefaultMapModel.scala
This file is now called Buffer.
Renamed ListBuffer to Buffer.
Refactored some list code and implemented Stack...
- Update library.lst
- Added files/run/imports.scala
- Removed cours/lisp.scala
javadoc comments
cleaned up
- Made path OBJDIR absolute
using TransMatch.Matcher for input, output.
introduced inner class "Matcher"
- Added method "equals" to class Any
- Enhanced debug messages
- Added method toString
moved matching stuff to subpackage matching
moved to subpackage matching
*** empty log message ***
- Removed implementation of methods == and != f...
started semantic analysis for patterns
- Removed unused code
- Made SourceFile and Position scala-independan...
- Added ch.epfl.lamp.util.Position
- Removed scalac.util.Position
- Made SourceFile and Position scala-independan...
half-reintroduced attribs, need for parsing int...
removed attributes, need HashMap or something s...
Made a function type explicit.
Factored out a default map implementation that ...
representation of xml elements in scala
comments, cleanup
is called dtd2scala
now is added binary
should have added binary
modifications so keywords can be detected by XM...
classes for XML tool dtd2scala
xerces library for XML tool dtd2scala
starter script for XML tool dtd2scala
build file for XML tool dtd2scala
*** empty log message ***
Added new runtime file.
Adapted the code to the new Monitor trait.
Cleaned up the code.
Cleaned up and optimized the code.
Removed some debug output. ;-)
- Removed support for notes
- Removed old unused code
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Removed DefaultDefinitionPrinter (replaced by...
- Added InterpreterPrinter.java
- Removed opcode Box and corresponding boxing c...
- Replaced use a Code.Box by a Code.Invoke
- Added missing public modifier
*** empty log message ***
Removed some functionality.
Renamed some functions in the collection classes.
Added some more constructors for the collection...
Introduced "syntactic sugar" for quickly creati...
Implemented support for hash tables that are no...
Added Iterable to the list of "implemented" tra...
New collection classes.
Some collection classes.
Added a find method.
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
test "meth != null" was missing in transformArgs
*** empty log message ***
*** empty log message ***
- Changed log message
- Added call to widen
- Commented out altherr1.scala
- Commented out debug code
- Added arrays.scala
- Added imports.scala
- Removed the incorrect code
- Added imports.scala & imports.check
*** empty log message ***
- Replaced an equals by a ==
- Added imports.scala & imports.check
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added a catch to handle stack overflows
Scala syntax highlighting for UltraEdit-32 (Win32)
- Changed log method in class Debug
- Moved code from EntryPointCompiler into Inter...
- Commented out some \red, \redtext, \bs \es
- Reverted changes to arrays
- Moved isGlobalModule method from RefCheck int...
fixed comment FunDef, FunSig ( changed 'ParamCl...
*** empty log message ***
- (final) bug fix: use the symbol of the class ...
added printing of nodes Sequence,Subsequence,Al...
adapted PatternNormalizer to new syntax, whih a...
validity check and normalization of [sub]sequen...
- (partial) bug fix: modify ThisTypes appearing...
takes care of
using PatternNormalizer, fixed recognition of e...
added PatternNormalizer
fixed recognition of subsequences (like in List...
- Added some tests to avoid printing if there i...
- Split class Interpreter into classes Interpre...
- added generation of line-number information
- Improved stack traces
- adapted to the new version of AddConstructors
- adapted to the new version of AddInterfaces
- complete rewrite of AddInterfaces, to simplif...
- names of constructor methods are not construc...
- use the name of the symbol to identify class ...
- added CONSTRUCTOR name ("<init>")
- added Id CVS tag
- added valueParams method
- modified mkParentConstr(s) to make it possibl...
- added Pair and StackedHashMap
*** empty log message ***
- added SymbolSubstTypeMap.java
- added a constructor, fixed another one
- Added SymbolSubstTypeMap.java
extended syntax of pattern matching with regula...
added Subsequence, Alternative and Bind nodes
fixed typo in comment for ArgumentPatterns, is ...
*** empty log message ***
renamed Tuple to Sequence
- Added field type to case Value
- Removed Interpreter.java
- Added InterpreterSupport.java
added testEquals method, suggested by Matthias
- Adapted the type signature for the output of ...
- Removed code that is now in class SymbolTable...
- Made rawInfoAt public
- Added SymbolTablePrinter.java
- Added CodePrinter
- Added target lamplib and corresponding variables
- Added lamplib.lst
- Added CodePrinter.java
*** empty log message ***
- use definesSymbol to find nodes which define ...
- added a CVS Id tag, removed trailing ws
*** empty log message ***
*** empty log message ***
*** empty log message ***
reintroduced possibility to enter things twice ...
All the power of unit testing condensed in a 3 ...
- Removed commented out code
- Added method contains
- Replaced calls to hasSymbol by calls to defin...
- Replaced a call an enter by an enterOrOverload
- Added support for cygwin
- Modified to use definitions from cygwin.mk
- Added import of cygwin.mk
- Added cygwin.mk
- Changed setOwner to automatically update the ...
- Removed the break that caused a warning
*** empty log message ***
- Changed LabelDef to have an array of Idents i...
*** empty log message ***
*** empty log message ***
- Added META_SOURCES to PROJECT_SOURCES
- Added methods which take a symbol in TreeFact...
- Added an import for Symbol
- Added checking of linked fields
- Added automatic update of linked tree fields
- Added information about linked tree fields
- Added TreeFieldLink.java
- Replaced Name.fromString("<error>") by Name.E...
- Removed redundant test
- added GenMSIL phase
- Ignored .generated
- Added MetaTuple
- Updated rules to build Tuple files
- Added automatic generation of Tuple
- Added method toString
- Removed Function.scm
- Added Tuple expander and template
- Added AbstractScalaExpander
- Removed Function.tmpl
- Added rule fastclean
*** empty log message ***
- Added automatic generation of FunctionX
- Added MetaFunction
- Added Function expander and template
- Changed value returned by getTargetBaseName
 - set the trees of the supertypes to be the ol...
- Added a comment
- Changed LazyTreeCopier to used a copier inste...
- Enabled tree node checks
- Added constant instance
- Added constants START_PHASE_ID
- Added CheckTreeNodes
- Added automatic generation of CheckTreeNodes
- Added cvsignore
- Added MetaCheckTreeNodes.java
- Added automatic generation of Tree
- Added automatic generation of Traverser
- Removed file AbstractTreeCopyFactory.java
- Added functions abs
- Moved code of method TCF.attribute to method ...
- Added automatic generation of TreeCopier.java
- Renamed TreeCopyFactory in TreeCopier
- Removed method getName
- Added MetaLazyTreeCopier.java
- Added .cvsignore
- Added automatic generation of DefaultTreeFact...
- Added DefaultTreeFactory.java.tmpl
- Added MetaDefaultTreeFactory.java
- Renamed TreeCreator into DefaultTreeFactory
- Completed rule .latetest-meta to invoke Gener...
- Added GenerateAll.java
- Added AbstractTreeExpander.java
- Added Phase.java
- Added AbstractJavaExpander.java
- Added rule fixcvs
- Added AbstractFileExpander.java
- Added target meta
- Added file meta.lst
- Removed file TreeCopier.java
- Renamed class TreeCopier into AttributedTreeC...
- Updated lists of test files
- as a temporary fix, changed definesSymbol in ...
- Moved EMPTY_ARRAY constant from Ext classes t...
- Added support for PROJECT_OUTPUTDIR_LINK
- Replaced foldr by foldRight
- adapted to the new names for fold and reduce
*** empty log message ***
- Changed method append to use type.toString
- Removed obsolete constructor
- re-fixed the previous bug, in a cleaner and m...
*** empty log message ***
*** empty log message ***
Wrap character literals in single quotes.
- bug fix: types of class members have their ow...
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
- added "object" as an equivalent to "module"
- Added test file Course-2002-05.scala
*** empty log message ***
*** empty log message ***
- Adapted test files to new method List.toString
- do not add the ABSTRACT_CLASS flag anymore, a...
*** empty log message ***
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Changed args to date
- Added method bound
- Added array length primitives
- bug fix: do not load private methods of Java ...
- Suppressed SymbolWriter.java
- Removed $console$* from siris-printed types
- Changed some names so that --jvm and --int ge...
- Removed class SymbolWriter
- bug fix: moved outerMap to the phase (descrip...
- Suppressed compiler warning
- Removed java-backend (jaco) specific stuff
- Replaced name equality tests by symbol equali...
- renamed JVMGenerator to GenJVM, to match file...
- Optimized method value2TypeName into method v...
- Removed fields True & False in class scala.Bo...
- Removed field global
- Removed class Phase.
- Removed method createPhase in class PhaseDesc...
*** empty log message ***
reduced value from 100 to 30 in module M2 (memo...
- Added examples.bib
- Added test file Course-2002-13.scala
- bug fix: properly handle overloaded values in...
*** empty log message ***
*** empty log message ***
*** empty log message ***
- modified and simplified handling of overloade...
*** empty log message ***
- Added test file Course-2002-09.scala
- Enhanced error message
- Added exercices
*** empty log message ***
- Added test file Course-2002-07.scala
- Added test file Course-2002-10.scala
- Added methods take & drop
*** empty log message ***
- Forced loading of Interpreter.scala only with...
- bug fix: use the correct owner for class type...
- bug fix: always insert new symbols in their o...
- Changed error code for windows (-1 does not w...
- Added cygwin support
- now use ":use" command to evaluate region, so...
- Removed loading of Interpreter.scala when not...
*** empty log message ***
- Removed True & False from Predef
- Added NativeMonitor.java
*** empty log message ***
*** empty log message ***
- fixed highlighting for function types
*** empty log message ***
- Forced loading of scala.Interpreter with siris
*** empty log message ***
*** empty log message ***
- Implemented printing of CompoundType
- Added windows stuff
* .scala files always dominate .class files; co...
- Added scripts
- Added scala_wrapper-footer.bat and scala_wrap...
- Added MANIFEST
- Added rules to build distribution
- Ignored distribs
- Removed '
- Commented out vincent.scala (it does not fail)
- Added .check files
- Added files in "cours/"
- Removed examples.lst
- Removed test-pos
- Added test-neg.lst
- Added test-pos.lst
- Added test-run.lst
- Added emacs.lst
- Added missing files
- Added README
- Added LICENSE
*** empty log message ***
- Added java archive
- Added jar.mk
- Improved signature printing in siris
- Removed printing of accessor methods
- Added method isPublic, isProtected, isPrivate...
- Added code to make sure Interpreter.scala is ...
- print names of generated files when -verbose ...
*** empty log message ***
- Changed origin of symbol in translation of me...
- Added some cases to the method toString
- Added Course-2002-11.scala
- Added Course-2002-08.scala
- Added Course-2002-06.scala
- Added a method isSameAs for erased types
*** empty log message ***
*** empty log message ***
- Removed printing of kind
- Updated evaluator to cope with module singlet...
- Added initialization of module singleton in m...
- Made symbol loading lazy
- Added printing of definitions
- bug fix: initialise module instance field as ...
- Changed enterUnit to use consoleContext for c...
- Added consoleContext
- inside of a module, use "this" directly to ac...
- use the explicit "this" now introduced by the...
- use class symbols for "this" values and types
- Added code to embed console code into a module
- Added Interpreter.scala
- bug fix: replaced "extends Function1" by "ext...
- Adapted to the new module schema
- Adapted to the new module schema
- Changed main parse rule for units coming from...
- Added method isSynthetic
- Moved field "console" from class Sourcefile i...
*** empty log message ***
- Added a test to avoid colors when run in emacs
- Added command "force"
- Added defaults
*** empty log message ***
- bug fix: do not add accessors again for const...
- check that no syntactic representation of typ...
- do not generate Java-compatible class for mod...
- automatically flush the debug tree printer
- added a flag to automatically flush output on...
*** empty log message ***
- Added misc
- Added queens
- Added Makefile
- Added Id
- Changed funneldefs to scaladefs
- Changed funneldefs to scaladefs
- Added scaladefs.sty
- Added .cvsignore
- Added examples.verb.tex
- Added rationale.verb.tex
- Added rationale-chapter.verb.tex
*** empty log message ***
- Added latex.mk
- Added rule "verbfilter.clean"
- Added Course-2002-04
- Added "all" and "distclean" rules
- Added default.mk
- bug fix: replace "this" expressions which ref...
- Bug fix (pb with thistypes)
- bug fix: make sure that caseFieldAccessor ret...
- Added reference.verb.tex
- Added a line to remove verbfilterScala.class ...
- Added verbfilter.mk
- Added verbfilterScala.java
- Updated to use jc.mk
- Added jc.mk
- Removed a '"' in a comment
*** empty log message ***
- use accessors to access contents of case clas...
- Removed a comment
- Added test file Course-2002-03.scala
- bug fix: do not prefix accesses to outer clas...
*** empty log message ***
- bug fix: correctly detect calls to constructors
*** empty log message ***
*** empty log message ***
- bug fix: correctly pass outer link to constru...
*** empty log message ***
*** empty log message ***
*** empty log message ***
- Added Course-2002-02
- Added Course-2002-01
- Added .cvsignore
*** empty log message ***
- when generating classes for "def" parameters,...
*** empty log message ***
- when generating classes for anonymous functio...
- adapted to the new Function1
- turned Function<n> into an interface
- bug fix (added an additional call to erasure())
*** empty log message ***
- bug fix: value and type parameters of a class...
- bug fix (tuple literal == empty block)
- bug fix (recognition of method main)
- bug fix (translation of old prefix)
- Added option "-d" to in compiltation_success
*** empty log message ***
*** empty log message ***
- bug fix: do not try to rewrite the symbol ass...
- print symbols associated with CompoundType(s)
- check that TypeRefs are applied with enough a...
- do not remove the "classes" directory when cl...
- bug fix: correct owner of values belonging to...
- do not rewrite localThisType to try to get ni...
*** empty log message ***
* fixed pattern matching on Seq[+A] style selec...
*** empty log message ***
*** empty log message ***
*** empty log message ***
* case field components are now accessed throug...
*** empty log message ***
- bug fix: use updateInfo() instead of setInfo(...
- bug fix: properly set owner of cloned method ...
*** empty log message ***
- Added scala interpreter
- Added .cvsignore
*** empty log message ***
- bug fix: check that trees actually have a sym...
- bug fix: use TreeGen to generate casts, to be...
*** empty log message ***
- added AddConstructors and GenJVM phases
- bug fix: the new internal notation for Unit (...
- Added file ResultOrException.java
- Updated description of CovariantType
*** empty log message ***
- bug fix: cloneSymbol in ClassSymbol correctly...
Set the correct owner of the constructor symbol.
* fixed a bug with sequence patterns of differe...
* implemented new sequence patterns
- bug fix: do not try to find an class symbol f...
*** empty log message ***
*** empty log message ***
- Added file interpreter.lst
- Changed "implements Function1" into "extends ...
- changed the name for anonymous classes from "...
- removed the interfaces for scala.Object and s...
- syntax fix: added the required "abstract" fla...
- bug fix: "diff" works when "this" is the empt...
- Added and unified the comments
- Improved the priniting of symbols
- Improved the assertion error messages
*** empty log message ***
Added support for the new CheckName checker.
Added checkers/CheckNames
Initial import of the CheckNames class.
- bug fix: when duplicating names, also take ca...
Initial import of the MSIL code generator.
Minor code cleanup: Use the static encode() fun...
- bug fix: replaced erroneous uses of enclClass by
Added scalac/transformer/AddConstructors and sc...
Initial import of the AddConstructors phase.
- Improved the error messages
- bug fix: className() now returns a name of th...
- Changed True to Boolean.True
- Enhanced debug message
- Removed a type-tree transformation in case Typed
- Added flag -nopredefs
- bug fix: do not ask for class symbols of Java...
- Inserted erasure phase
- Added Erasure and ErasurePhase
- Added class MapOnlyTypes
- Added method fullErasure
- Added Ref.java
- Added Ref.java
- Completed printer for types
- Added BufferedIterator.scala
- Added field RUNTIME_TYPE
- Added method parents
- bug fix: replaced pointer-based type equality...
- Added scala-test
- bug fix: do not use outer links to access typ...
- bug fix: do not use accessors (which do not e...
*** empty log message ***
*** empty log message ***
*** empty log message ***
- adapted to the new mkParentConstr in TreeGen
- removed useless "root" parameter in mkParentC...
Ported pattern matcher.
Added a few runtime classes for pattern matcher.
File needed for pattern matcher.
File needed for generated pattern matching code.
Adapted Tuple template to new syntax.
Initial version of the pattern matcher component.
Bug fixes in lambda lifter, test classes
*** empty log message ***
- added GenJVM phase
*** empty log message ***
- Replaced call to isJavaPackageClass by a call...
- Added scalac/backend/Primitives
- Added some names for class Primitives
- Added method isOverloaded
- Added scalac/backend/Primitive.java
- Added scala/runtime/RunTime.java
- added phases AddInterfaces and ExpandMixins
- added method nextInfo
*** empty log message ***
- Removed Makefile in sources/scalac
- Added rules to generate tuples
- Ignored files "Tuple*.scala"
- Added library.lst
- Removed Tuple*.scala
- Added Tuple.scm and Tuple.tmpl
- re-enabled AddAccessors phase
- added AddAccessors phase
*** empty log message ***
*** empty log message ***
- Added rules to compile runtime
- Added runtime.lst
- Added expand-template and expand-template.scm
- made Param obsolete, and introduced ValDef as...
- restored ExplicitOuterClasses phase
- Added Function.scm and Function.tmpl
- added OUTER_PREFIX used by ExplicitOuterClasses
*** empty log message ***
- Added .cvsignore
- imported from old repository
- Added rules to create the links to the scala ...
- Added .scala_wrapper
New classes Symbol, Labelled, Seq.
Syntax changes for tuples and sequences; symbols.
- Added wc.mk
- Added exec.mk
- Simplified example
- Added .emacs.desktop
- Added grep.mk
Initial version.
*** empty log message ***
Initial version.
- Added list of compiler source files
Initial version.
- Added .cvsignore
New repository initialized by cvs2svn.
