Run completion in repl in coroutine
fix parse `auth` order in url.parse
process: respecting deprecation on getpid
thread: fix thread.equals
Update root certificates in tls module
Release luvit v2.18.1
Update root certificates in tls module
fix main thread tracebacks
Added nil safety reason
Release Prep for Luvit v2.18.0
test-dns: Quick fix for resolveTxt test on Linux
Remove travis CI now that travis-ci.org is gone
Add basic Github Actions workflow
Remove freenode badge from readme
Bump deps for updates and luvit 2.17.1
wrap main in a coroutine
Remove Freenode and add Discord link (#1138)
Localize p in stream_readable.lua.
Adds utils.assertResume
fix luvit handle args
test-process: cleanup 'signal usr1,usr2,hup' test
core: Make Emitter:removeListener return the number of removed handlers
simplify the logic of Emitter:listeners
test-process: add comment about signal unreffing
expose Socket BufferSize api
make console/tty write safe
fix test-process, make sure signal handled
CI: fix coveralls, really active
enable coveralls
Revert "make console/tty write safe"
fixup require wrong module
Mitigate bogus errors being returned on stack overflows (#1102)
Bump lit version in makefiles to v3.8.1
Add changelog for 2.17.0
Bump Luvit version to 2.17.0 using Luvi v2.10.1
Bump version of changed deps
make console/tty write safe
fix: remove extra argument to doWrite call
emitter: fix removeAllListeners
http: ignore upgrade header when no upgrade listener is present
Update changelog and dependencies for a 2.16.0 release (#1081)
update ssl to support session reuse for TLSV1.3
fix unclosed handle in childprocess module
test: Add test-process-exec.lua
make luvit not collectgarbage manually (#1071)
update http module
clean broken examples
test: Improve test-process.lua
test: improve test-tls-peer-certificate.lua
update test-tls-remote.lua
update openssl to v1.1.x (#1062)
set process.env.__pairs to lenv.iterate for backwards compatibility
Replace access google.com with github.com
update process.env to use portable iterate
ugly avoid unclosed pipe handle
update test-crypto.lua for lua-openssl v0.7.4
http-codec: cap 'chunked' decoding chunk-size to 16 hex digits
Add better test for http-codec chunked decoding
Bump http-codec version to 2.0.3
Handle uncaughtException in process.lua
Add uncaughtException handler
Match only past last . in file extensions (#1047)
Create hard links on Windows (#1046)
update changelog and dependencies for a 2.15.0 release (#1044)
fixup c9cbddbef3e9939d474fed878897bb7f726d7477
fix test
update default TLS from TLSv1 to TLSv1_2
update urlencoding according to https://tools.ietf.org/html/rfc3986#section-2.3
fix bug EAI_NONAME in tls.connect
fix parse HTTP Status Lines
adding some simple error handling to the REPL autocomplete.
fix ignore enomem on getaddrinffo (#1032)
fix ignore connect errors (#1031)
dns for luvit.io is in flux... switch to google
remove keeplive on listen socket
Update lit PowerShell command to use TLS 1.2 (#1027)
Update process:memoryUsage() to be more like node's  - Return a table instead of a single number  - Add `heapUsed` key that holds the memory used by the Lua VM
Add process:cpuUsage() and process:memoryUsage() functions
Add luvi.exe to gitignore
Update http-download.lua
Flush streams on exit (fixes https://github.com/luvit/lit/issues/222)
Adds missing timer clean-up in coroutine sleeper
Update core version to match what's published to lit
skip txtTCP test on travis
bump deps
release info for 2.14.2 (#988)
Miscellaneous fixes and optimizations (#992)
add contributing doc (#989)
add servername to TLS options (#987)
Bump fs to 2.0.3
Revert "fix fs.ReadStream doesn't return anything"
Add changelog for 2.14.1
Bump luvit version to 2.14.1
Update lit build dependency to 3.5.4
Bump require to 2.2.1, url to 2.1.1, ustring to 2.0.2
Bump dns to 2.0.4
Support punctuation in http credentials
Add HTTP status codes of RFC 6585
reactive ci
try to make test-dns.lua work, need review.
update dns to avoid https://github.com/LuaJIT/LuaJIT/issues/28
ugly make test-process.lua pass
fix bug in ustring.lua, init default is 1
Unbreak stream example
Bump require and luvit versions again
Bump version to release changes
Don't put bundle deps ahead of disk deps for dependencies of disk files
fix ustring.find's behavior when used `init`
Debug memory leak on keep-alive connections (#958)
dns: Bump version to 2.0.3
dns: Add the ability to resolve certain DNS queries internally
fix: remove duplicate dns test "resolve6"
bump fs.lua
fix stream closing (#944)
fix fs.ReadStream doesn't return anything
Add changelog for v2.12.0
Update lit to 3.4.5 and bump luvit to 2.12.0
Release repl 2.1.0
Release readline 2.2.0
Release childprocess 2.1.0
fix printing wrong address in 9fa47b31932e
added two simple http-server examples (json, todo-web).
Add ustring into package.lua
Changed signed buffer write methods to aliases - Should be more efficient than wrapping the unsigned versions - Also corrected compliment to complement
test for ustring and little fixes
little fix
fix ustring.upper and History
Tabs to spaces
Added write methods to Buffer
Add UTF-8 support: ustring.lua ustring provided string-like APIs(eg. gsub,len,match) to support UTF-8 in pure lua(jit).
add isBuffer method
[readline]Faster way the cover character to be replaced. The results are the same(with multi characters supported).
Publish updated readline with new options.cover
Add new options.cover to hide input (#913)
Update luvi/lit and bump version to 2.11.5
bump http to 2.1.1
release notes for 2.11.4
dns: bump to 2.0.2
dns: error message fix
Bump lit to 3.4.2
Move http.headerMeta to its own package and add util functions
Add changelog for 2.11.3
Bump new luvit release with merged 2.11.1 and 2.11.2 changes
Restore lost 2.11.1 release
Bump repl version
bump to 2.11.2
bump files for 2.11.1
add phony and remove luvit test runner
add unit test
dns: fix server order resolving
Don't run readline test if stdin is not a TTY (#911)
Test luvit with both folder and zip bundle modes
Release luvit 2.11.1
Add some echo examples
Changed random seed from os.clock to os.time
Publish new require with fixed loadstring paths
Use local version of luvi in test target
Use luvi to run tests to avoid lit bug in pulling remote deps sometimes
Release 2.11.0 with updated changelog and deps
Bump versions and publish updated modules
Add url.resolve
Readme: Add instructions for running a specific test
Make url.parse return host in the same format that node does  - `host` will include the port ("localhost:9000") while `hostname` will not ("localhost")
Add url.format  - url.parse now runs href through url.format
Refactor test-url
adjust tls io event handle
Update thread.lua
Update luvi, lit and bump version to 2.10.1
Publish updated deps
Update lit and ca certs
fix bind socket event to http ServerResponse
bump lit to 3.1.1
Bump versions of affected packages and release new luvit
Bump luvi version
Update to work with new and old luv APIS for scand_next
tap: check for closing handles in shutdown
Add changelog for 2.8.0
Revert all changes except porting modules to new metadata format
Move module replacement to resource module
Get several unit tests passing again
Switch luvit modules to luvit-loader format
Update root certs
Remove a modulus and use math.ceil.
bump changelog
slight tweak to build on unix again
bump deps for pretty-print
add changelog and bump to 2.7.3
dns bump
add test file
dns: resolve whitespace inbetween nameservers
Add support for any tostring-able versions of luvi options
Make pretty-print usable outside luvit
Add changelog for 2.7.2
Update versions
Cleanup repl globals
Make sure native require is not clobbered
Add changelog for 2.7.1
bump common/tls to 1.3.3
bump to 2.5.0 of luvi and 2.3.0 of lit
upgrade to support newest lua-openssl
bump to 2.2.22
bump to 1.0.7
parenthesis
pretty-print: fix term check
upgrade to support newest lua-openssl
Publish fixes to pretty-print
deep-equal: Print values on type mismatch
Enable --256-colors if $TERM = *-256color
Changelog for 2.7.0 with updated luvi
Release luvit 2.6.0
Add changelog for v2.6.0
Bump versions and publish require and http modules
Remove leaking timeout on exit code
Look in bundle first when doing module require
Release version 2.5.9
Release v2.5.8
childprocess@1.1.0 - Release with new exec and execFile functions
feat(childprocess/exec&execfile): Implement cp.exec and execFile similiar to node
changelog for 2.5.7 and bump versions
fix: dns error callback
fix(repl): Add path to the list of auto populated libs available to the user
bump luvit to 2.5.6
add changelog for 2.5.6 release
fix(deps/dns.lua): resolv.conf parser enhancements
Update luvi and bump luvit version
bump tls module
update root certs
release 2.5.3
converted examples/app, which show howto use http web server
delete examples/broken/web-app show setup web server, because it already as a part of httpd standard lib which more simple and flexible.
update examples/broken/app
converted examples/http-static-file-server.lua
remove unnecessary files
converted a few of http examples
converted examples/fs-streams.lua
converted examples/json.lua
converted examples/stream
converted examples/tcp-echo-client.lua
converted example/prompt.lua
fix bug in examples/tcp-echo-server.lua
fix readline module with default options
make json module try use lpeg
tune table.unpack to unpack
add threadpool support
Makefile: support custom prefixes
Release v2.5.2
Pull in pretty-print update from lit
add versions of luvi options
bump to 2.5.1
add unit test
fix(http): call self:finish() on stream _end
release 2.5.0
enhance thread.start accept function or string(lua code)
Update dependencies
Add thread to deps list for luvit
Lit exports must come before require calls
Bump luvi version to 2.3.0 for threading support
Convert line endings to match rest of project
Use new luvi API instead of copying lua logic in thread
add luvit thread support.
Clean up once method
Reimplement remove to use table and shared metamethods
Improve emitter tests
Add test for once removal
bump to 2.4.5
fix(dns): start the read after the send due to a libuv-ism
Bump versions and publish 2.4.4
feat(repl-add-libs): The repl automatically namespaces some of the default libs shipped with luvit now. Mimics what nodes repl does and makes it easier to play with it as a learning tool
bump to 2.4.3
fix(tls): shutdown on socket error
Publish luvit/tap@0.1.1
bump to 2.4.2
make sure em.exitCode is populated
feat(spawn): add close event when all stdio are closed
Release 2.4.1 with changelog and updated deps
querystring: Bump version to 1.0.2
querystring: Add tests for stringify
querystring: Add stringify function
querystring: urlencode spaces as '%20' instead of '+'
Publish http 1.2.1
http: Clean up header comparison style
Bump luvi/lit version to get new 'rex' module and release 2.4.0
Publish updated repl module with stdout fix
Use Unix line endings in REPL.  Simple.
Cleaner implementation.
Release 2.3.4
Publish changed deps to lit
Replace print() with stdout:write() in repl.lua.
update querystring.lua
add travis backtrace support
bump to 2.3.3
exit with correct errorlevel and fix windows bug
fix stream destroy
bump to 2.3.2
fix(childprocess): do not prematurely close the handle
add a .gitattributes for batch files
Release version 2.3.1
Bump fs to 1.2.2
Add support for 'size 0' files where the kernel lies
Bump tls version to 1.3.0
Update tls module to use binary root certs
Finish update script for certs
Start conversion script
Show lua sizes
Bump version to 2.3.0
Run repl in coroutine and add virtual global 'thread'
Add headerMeta to make http headers smarter (fixes #773)
Add regression test for http sample on luvit.io (#773)
add 32bit tests to windows
use different path
test: windows nonexistant build
add #luvit badge
Bump version to 2.2.8
Update lit to 2.1.6 and luvi to 2.1.5
Bump dependency versions
Make clean target more effective
remove the timer.active's
tls: add shutdown timer
change tmp directory to /var/run
tag for 2.2.7
fix(tls): on socket shutdown error really destroy
Revert "change tmp directory to /var/run"
bump to 2.2.6
tweaks for error objects in fs module
bump to 2.2.5
fix resolv.conf loading
Bump version to 2.2.4
Bump versions
Cleanup sigpipe ignoring code
Add trim target to Makefile [ci skip]
Strip more trailing whitespaces
Update lit/luvi versions and strip trailing whitespace
add uid/gid
fix and test emitter event removals
fix and test emitter event removals
fix test errors
Add support TLS client session reuse
ignore SIGPIPE
another try
try to pass failing test
don't bind finish
keep http connections alive
pump shutdown on destroy
add uid/gid
Don't try to run freshly removed handlers
bump to 2.2.3
stdout and stderr: wait for finish
2.2.2 release
add GITHUB_TOKEN var
fix(tls): destroy socket on end
wait for the close to make sure the stream is flushed
fix exception if nil string
bump versions
add changelog
bump lit to 2.1.0
allow process exit listener
stdout/stderr flush on exit
move the self:emit('exit')
process: flush stdout on exit
Don't use require's file cache for module:load() (closes #749)
require@1.2.1: Allow absolute bundle paths in require
net@1.1.2: Don't hang if socket already destroyed
back out silly change
allow absolute path require in bundle
don't hang if destroyed
allow absolute path require in bundle
don't hang if destroyed
fix(init): DNS load resolver on non-windows platforms
Bump luvit to 2.2.0 with updated lit and luvi
bump deps
bump to 2.1.16
tweak test
fix(http): flush res with a nil push
fix tls reads
Add timer.sleep using coroutines
Add coroutine support to dns queries
 bump to 2.1.15
no way to disable colors
fix(childprocess): add stdio options to spawn
bump lit to 1.3.0
bump to 1.3.0
update changelog
fix(tls): export socket and copy _connecting
print error message while realRequire failed
fix merge issue
hook all socket functions and assert check for difficult to find bind errors
add error handler to process
clear buffer on full read
fix pause on socket
add connection upgrade support
Update luvi again to get sni fixed
Update tests for fs.mkdirp rename
Bump version to 2.1.11
assign port number for test
Add changelog for 2.1.9
Bump version to 2.1.9
feat(tls): nil the CAs after load
Update lit@1.2.5, luvi@2.0.6, and luvit@2.1.8
skip failed test
skip failed test
fix some bug on linux
update test-tls-client-econnreset.lua
fix handle http encode/decode error
fix to handle http encode error
Done to convert all test
http catch decode error
have no fiber anymore
minor fix and clean
converted test-tls-client-econnreset.lua
converted a few tls test, need to update luvi(bacause lua-openssl update) to pass test
add SSL sni support, use lua-openssl https://github.com/zhaozg/lua-openssl/commit/e36165e0317a5c4053e128f3a43b8e9fe7d80d6e
converted test-tls-remote.lua
fix bugs in fixture-tls.lua
important have chance to notice when SSL accepting error
remove old test-windows-long-path.lua
change test multicast address from 224.0.0.0 to 239.255.0.1
Tiny luvit 2.1.7 release to get module:action
require@1.1.2: Add module:action(path, action)
Add license to luvit package
Bump version to 2.1.5 and record changes
Add metadata for lit packages
Document license in lit metadata
Document more inter-dependencies
Document inter-dependencies for luvit core modules (#635)
Add some metadata
Publish tap module to lit
Revert travis changes.
Run the right test
See if gdm is installed in docker more
Attempt to get stacktrace on segfault in travis
Update lit version to fix windows build
Revert travis changes.
Run the right test
See if gdm is installed in docker more
Attempt to get stacktrace on segfault in travis
Update lit version to fix windows build
fix handle tmp dir
add missing file
converted test-tls-connect-simple.lua
converted test-net-buffer-write-before-connect.lua
converted test-utils.lua
enhance dump support with recurs and nocolor
fix bug in test-fs-readfile-zero-byte-liar.lua
converted test-dgram-multicast.lua
add dgram.setMembership, dgram.addMembership,  dgram.dropMembership to support multicast
converted test-fs-truncate.lua
converted test-fs-readfile-zero-byte-liar.lua
converted test-windows-long-path.lua
converted test-fs-long-path.lua
Changelog for 2.1.4
bump the modules for 2.1.3
changelog and bump to 2.1.3
reset buffer to the leftover data
fix partial write
add appendFileSync
add test-fs-chmod
open test-buffer.lua on windows
skip test-fs-truncate.lua
skip fs-chmod test
convert test-fs-readfile-unlink.lua
fix bug when luajit link with static run times lib, eg. /MT link flags
converted test-fs-truncate.lua
add fs.truncate and fs.truncateSync
converted test-fs-chmod.lua
converted test-fs-utime.lua
converted test-fs-fsync.lua
converted test-fs-read.lua
converted test-fs-exists.lua
add fs.exists an fs.exitsSync
converted test-fs-read-file-sync.lua
converted test-net-connect-handle-econnrefused.lua
remove tests/to-convert/test-error.lua because test/test-emitter.lua include that feature
convert test-http-response-error-propagation.lua
remove tests/to-convert/test-path.lua
converted test-querystring.lua
add fs.appendFile
converted test-http-timeout.lua test
converted to-convert/test-http-get-url.lua
converted to-convert/test-url.lua test
remove old to-convert/test-url.lua test
remove old to-convert/test-zlib.lua test
add createWriteStream
fix(writestream): close on finish
v2.1.2 release
Use simple resolve for static asset loading
Add proper module global into repl
Refactor require to use shared prototype for module
fix typo: implementes-> implements
fix tipo: executible -> executable
readline: Add Editor:onKey test cases
fix 1mb post
fix tests/test-http-post-1mb.lua to pass
readline: Add Editor:insertAbove to allow output without disrupting the prompt  * Also made the unhandled key print use insertAbove
Add links to luvi/lit in the README
changelog and bump deps for 2.1.1
close on end
use self.flags for writestream
pass all options to tls socket creation
Document querystring dependency for url module
container based builds
add luvi 2.0.3 to package.lua
prep release for 2.1.0
Added for functionality to the url.parse method and added a test suite for the new and older functionality.
fix(net): double callback
fix(cleanup): remove encoding
lint
sync finish
call the socket end function
add finish event again
fix stream finish
finish the response after the write
set callback if not passed in
close server on client side
async write
tweak for windows
bump lit to 1.1.2
destroy then call the callback
fix(net): double callback in net :_write
Bump versions and add changelog for 2.0.6
Update to lit 1.1.2
fix(net): set uv.close callback
make sure stdout/stderr errors are propagated
check for is closing
fix(childprocess): propagate errors through the pipes
fix(childprocess): close handle on a process kill
Changed return value of Emitter:propagate to allow continuation of propagation.
Added Emitter.propate to propagate and event to a target emitter
Minor changes
Added parsing auth i.e. http://username:password@host.com/
tls(x509): use the singleton default x509 store
update socket timeout test for connect change
bump to 2.0.4
disable invalid command test on windows
bump lit to 1.0.3
remove unused header check from the http ClientRequest
Clean up the done a little more * We cannot ignore '' within the ClientRequest:Write as the Writable:_end (which is called with '') calls :Write * If we don't send data with the :Write, call the callback
Don't send empty chunks to the encoder since they are interpreted as EOS
Don't write empty strings to socket
Make the 1MB test pass.
added cwd
fix handle nil error
add libcurl example
Document changes for 2.0.3
Bump versions as luvit 2.0.3
schedule emitter exit for nextTick
fix(ci): badge banners
skip usr1,usr2,hup signal test on windows
set the highwaterMark to 0 on the stdin stream
fix(stdin): self initial state to reading = false
process.stdin fixes
fix(process): returning on stream not flowing is not correct
Add links to irc and mailing list.
Bump version to 2.0.2
Add back text about hacking on luvit and binary modules
Make README more about this repo and less about the project as a whole
Add publish script for unix flavors
fix exit event
tls(mode): pass true to clear the mode
if stdin is paused then stop reading
Spelling error in README
Update README.markdown
Bump version to 2.0.1 and add changelog entry
Add instructions for getting luvit.
add(castore): thawte Premium Server CA
fix(http): flush the stream with an _end()
Bump version to 2.0.0
Disable broken prompt example
IncomingMessage should be a socket
Include stack trace in uncaught exceptions during main
Bump all modules to at-least 1.0.0 and bump luvit to 1.9.9 (2.0.0 release candidate)
Import version bumps from modules shared with lit 1.0.0
Clean up init function
initialize lua rng within init
Update to lit 1.0.0
building from git section
fix(readme): remove the old cruft
tweak comparison
lint + add unicode json test
expose package version in -v and --version
Bump version to 1.9.5
lint and cleanup whitespace
add process.{stdout,stdin,stderr}
wrap readme to 80 chars
Cleanup sample usage for stream joystick
Use Transform in stream example for Joystick
Add back in old linux-joystick example using fs.open and fs.read
add more tests for readstream
add fs.readstring offset and length
add fs.readstream functionality
Update to luvi with conventions
Update lit to 0.10.6
require@0.2.3: Improve error messages for loading binary modules
Update to http-codec 0.1.5 to get parser fix
Bump version to 1.9.4
Update lit version to 0.10.5
Make sure new path is inside the tempdir when loading binary modules
add test case
finish and close events
fixes(http stream): re-emit end event
README fix [ci skip]
README tweaks [ci skip]
Move badges to top [ci skip]
Update README [ci skip]
Update README.markdown
Add intro section explaining luvit 2.0. [ci skip]
Update to lit 0.10.4
Bump luvit version to 1.9.3
Bump versions for http and https
Bump versions for dgram and dns
Update to http-codec 0.1.4 to fix HTTP/1.0 GET and HEAD requests
done no longer ignores data being passed before the connections is established
Update to new require system
style cleanups
Improve URL parsing
Default a http user-agent if none was given
Improved URL string conversion for HTTP
Add more to the HTTP/HTTPS tests * test the stream end
http-codec@0.1.3: Be more lax about terminators when parsing to allow \n in place of \r\n
Update custom-binary example to use lit and latest luvit API
Cleanup gitignore and makefile [ci skip]
Update to luvi 0.7.1 and lit 0.9.9
Rename Make.bat to be lowercase
Move luvit windows make to new style
Bump versions
fix(makefile): lint target
HTTP CONNECT client support and example
errors from the socket are now bubbled up to the http request
added an error message when item type is wrong. also returning item if is an empty string
fixed test to match new order
empty strings should be trated as nil
also send should be in the same port,host order
matching nodejs api
add lit- to the clean
Bump lit versions of all changed modules
Bump version to 1.9.0
Forward return value to luvi
don't use the default root store
Restructure luvit's init to be easier to consume
Bump lit to version 0.9.3
change set_verify to verify_mode
add readdir test
use -L
tweak
Revert "use the new travis docker builders"
use the new travis docker builders
litify
HTTP/HTTPS functionality, URL library, associated tests
add test-fs-readfile-empty
add test-fs-open
Don't use shallow clone for submodule (ci skip)
migrate test : test-fs-write-file
add test-fs-write-sync
add test-fs-write
remove to-convert/test-env... migrated to misc test
test(stat): migrate fs_stat test
remove to-convert/test-hrtime.lua
remove test-signal-handler, implemented in test-misc
fix(test): timeout test
Update rpi binary
Update binaries to include Raspberry PI
remove __add
add string extension
feat(process): kill, getpid, argv, exit
Update lit and luvi versions
Tweak makefile for clean clones
Don't nuke submodule in clean [ci skip]
Use Ubuntu 10.10 build for linux x64
Use lit in submodule for better version control
luvit/repo@0.1.1: fix arguments list
Make luvit target depend on lit target in Make.bat
Migrate to lit for building
Use lit instead of luvi to build
Start to move all modules to lit
Update to final v0.6.3 luvi (with raspberry pi version) [skip ci]
bump luvi-binaries to 0.6.3
further cleanup
cleanup(child_process): modularize child process
tweak the artifacts URL
lint passes
fix a lot of lints
tweak test to begin after 100ms
bump luvi-binaries
tweak port number on test
bump luvi-binaries
fix(tls): add release_buffers mode
refactor(stream): move module stream directory
clean(stream): requires and exports definitions
feat(fs): add writefilesync
don't use property lookups for error object
fix(fs): close write stream on reopen
add Error object to stream_writable
feat(env): add iteration and clear support
Update luvi-binaries to v0.6.1
Log if http or https in server example
fix(lint): luacheck cleanup
fix(tls): read all pending data
start https server code
fix missing code block ending
Implement auto chunked encoding for server response
Re-enable old http-server example
Update to http-codec@0.1.4
Add basic http server module with example
Update to creationix/http-codec@0.1.2
add expect
add ffi test
remove converted test
feat(path): add path module
check for timer that is already closing
bump luvi-binaries
Update luvi to v0.5.7 to fix handle leak
fix(spawn): emit error if cmd does not exist
add clearTimer for luvit 1.x compatibility
Add lint make target
Add luacheck config
Minor tweak
More luacheck fixes
Remove questionable code
Remove some unused variables/arguments
Remove unused recursive require and fix typo
Publish dkjson to lit
remove old server-verify test
export CLASS and TYPEs
tweak dns prototype
Split pretty-print code out of utils and put on lit
fix(tls): peer verification upgraded for lua-openssl
Add lit metadata to readline and require, publish them there
Update luvi-binaries to v0.5.6
Add home/end for cmd.exe in readline
Update README.md
Update appveyor badge [ci skip]
Work around error shape change in lua-openssl
Update luvi to v0.5.5
changed example to just close tcp socket
added signal handler and tcp echo server examples
Improve readline history logic
Show real global in repl and run completions through uniq and sort
Implement completion in the repl
update luvi to v0.5.4
Really fix readline on windows thanks to piscisaureus
Make prompt assert friendly
Hook up repl to readline with persistent history
Add prompt example
Add Alt + up/down for iterm
Add page up and page down and cleanup API
Add Jump left and right for iTerm and Terminal.app
Support home/end in terminator
Add readline prototype
tweak
test(tls): test cipher suite
Prevent the unit test framework from hanging on some exceptions
emit exit after close
Update bench to use new http codecs
Tweak encoder/decoders for http
Update HTTP test request
Convert http-codec to decoder style
fixes
fix client verify
remove old tls code
tls refactor: server and client working
Update luvi to v0.5.3
Update luvi-binaries to v0.5.2
Remove test.txt
Don't write binary modules to disk if they are already there
disable dns test on windows... (appveyor weirdness)
comment the hooks module
add process exit support
proposed improvements to proxy example
Properly detect format in require
Support loading .so/.dll modules from the bundle
Update native example to compile without old luvit
lines added to proxy example for clarity
simple tcp proxy example using raw uv stuff
disable write to fd stream
add writefile stream
more robust bind
Update raspberry pi build to v0.5.1 from 0.5.0 to match the rest
Update to luvi v0.5.1
make the global process table an emitter
tls cleanup and streams tweak
remove all stream interface
add tls test
add abort2 test
tweak options
add is_closing to tap.lua
add tls client abort test
working tree
more tweaks... still failing due to lua-openssl
add rejectunauthorized support
add ca roots
use tlsv1_client
should be a break
initial pass at tls.connect
add initial process support
change to setImmediate
add vagrantfile
add net streams
Add install target [ci skip]
Include .exe in windows build
Update to luvi v0.4.2 with new LUVI_APP/LUVI_TARGET semantics and libuv 1.0.0
Support implicit offsets in fs
Update luvi-binaries to get raspberry-pi binaries [ci skip]
Add helpful module
Update to luvi v0.3.0
Test the whole emitter wrapper in code
fixup codec test
WIP: add wrapEmitter
fix copyright
add json module
remove x509 test
fix copyright and make host var
feat(tcp): add tcp test, fix nil callback
cleanup functions
fix(udp): add unit test and add recvStart/recvStop
add luvit.run
add init system
return the exit code
add global process
use data
fix onWrite
fix fs-example
Port old tls code to new codec
Tidy up a bit
fix
add onError handler
nil udp messages?
skip resolver loader on windows
use do/end block
one more style tweak
cleanup
refactor random seed into initialize function
add secondary google server
add resolve.conf loading
remove timeout from tcp test
add tcp test
add timeout support
use all luvit.io domains
fix retry function
add lcrypto and change dns resolver to use secure rng
seed rng
initial pass at dns support
Move adapt into utils
Organize codecs and themes into sub-folders
Update luvi-binaries to v0.2.1
Add fs.readfile and tests
if the socket was destroyed then return
Use empty string to signal end of body in http-codec
Add license and docs for cluster benchmark/example
Allow setting version in server encoder
Create sample HTTP client
finish http-codec features
Move test into cluster benchmark and unit test
Improve debugging in http-test [ci-skip]
Add coro version of http codec
Finish initial http server
Package codec as duplex to match future tls version [ci skip]
Add shell to test http-codec
add error handling
add crypto test
indent tweak
add emitter test
fix close
tweak timeout test
fix(net): add is_closing
add test-socket-timeout
Update luvi-binaries to fixed v0.2.0 for Windows and Linux
Put luvi-up CI badges in Readme [ci skip]
Update luvi-binaries to v0.2.0
Lint tweaks to tests
Finish wrapping fs operations
Implement more fs sugar
Initial fs wrapping and test
remove un-needed imports
remove unneeded import
feat(net/timer): add more timer and network support
Update luvi-binaries to v0.1.0
add instanceof test
add buffer support
Update luvi binaries to get recent luv fixes
Move bind to utils, fix copyright headers
Implement timer module with unit test
remove table
add hooks and core module
Update to newer luvi to get openssl flavor as default
Remove unneeded variables in tls example
Clean up variable names, don't use  for callback
Clean up example
Include both styles
Almost get TLS working with nice channels
Start on JSON parser
Make windows path handling more correct
Revert to auto-detected color caps after color test
Add -f to make clean
Update binaries to get Darwin build
Re-enable travis using prebuilt luvi binaries
Remove unused symlinks
Add Makefile for easy 'building' and testing
Make module search paths more effecient
Organize the tests a bit
Add smart quote test
Make colors test automated
Expose strip for utils test
Show usage if invalid flags are passed in
Import tap library from luv
Rewrite pretty-printer to be more robust and faster
Replace utils with new colors code
Implement initial version of dump algorithm
Add notice to README about state of luvi-up branch
Clean up old luvit stuff not used anymore
No need to register utils in bootstrap
Hook up new require system to main
Implement most of require v2
Add basic luvi shell for luvit style repl
fix(fs_call): memory leak
fix(socket): destroy socket handle on _any_ error
getsockname() only returned local ip address
Add main hook for bundle
Check for tiny binaries and fix zlib bundling
Interpret . and .. path segments
Add hook into require system to look in zip bundle
Add zipreader to core and expose instance as _G.zip
Restore lua's builtin debug table
Restore basic language builtins
when compiling on solaris, c99 features are needed.
fix(install): use the correct product for install
fix(tls): only setup the error callback if non-nil
fix(tls): on socket error, call callback
fix(tests):  Use `env` for clean env reading
feat(emitter): add listeners
feat(emitter): Add removeAllListeners
fix(net.Socket): add isConnected boolean
bump to 0.10.0
should be 0.8.3
add ChangeLog for 0.8.2
Bump openssl to 1.0.1i
fix the infinite loop hopefully for good
explicitly only go from 1..i
add blurb for embedding
tweaks for OSX compilation
fix(tests): DNS Test needed tweaks
add GNU_SOURCE to linux
fix utils.dump
add LUAJIT_ENABLE_LUA52COMPAT back
fix(gyp): 32bit luvit build fix
add testcase
prevent infinite recursion
add changelog for 0.8.2
fix utils.dump infinite loop on 32bit
add release notes
whitespace fix
emit an error if write is called after closed
fix(streams): close the filedescriptor when the stream ends
add a test case for cf8fec627
add keepalive and nodelay
fix a bug related to options.length in ReadStream;
export path_base module within luvit_exports
fix test-http-parse-error.lua to be a little more concise
improve the loading of the default certificates
fix the unlink test to be a little more robust * file delete on windows is not guarenteed to happen at the api call, lazy delete
Pathing fixes for Windows
bump libuv to v0.10.27
add some docs regarding to Emitter
bump openssl to 1.0.1h
add listenerCount to Emitter class
bump openssl
bump openssl for windows
include ssl after luv headers
errors table misplaced
fix(ssl-tests): add -tls1 to openssl commandline
bump openssl for gyp fixes
bump openssl
point the travis image to the master branch
add luv_poll.c to gyp
perform a gitsubmodule update automatically
bump libuv to v0.10.25
bump(luajit): Bump Luajit to 2.0.3
fix for linux
freebsd patch
Trim Whitespace
npm support
fix mistake in documentation of core module
fix(dns): nil callbacks
feature(Poll): add poll support
regen expired tls test keys
changed that MSVC linker whole program optimization does not strip LuaJIT BC symbols
fix: poor use of path join in the zlib test
uv_print_*_handles functions are only present in debug version
uv_print_*_handles functions are only present in debug version
uv_print_*_handles functions are only present in debug version
uv_print_*_handles functions are only present in debug version
fixed generated code to compile with MSVC
Emit "parse" error on request instead of the response object.
Modify Response object to correctly propagate 'error' events from the underlying socket object.
Use absolute paths so the tests pass inside chrooted environments.
Update openssl submodule to include arm changes.
Use startswith approach so it also catches other versions of architecture.
Map armv6l host architecture to arm.
Add missing command to the build instructions in the README.
bump libuv
add changelog 0.7.0
fix path for cares
add deps/cares to gitmodules.local
Add cares into the event loop
Libuv and luajit upgrade plus 64-bit windows support
Mixed path separators in 'example/web-app/server' on Windows.
Implement optional extension removal in path.basename
Do not use a DLL under Windows, statically link.
Update to latest luajit
Remove warning on used uninitialized variable
fix filepath
add detached process support
automated test for new Process.hrtime
Adding Process.hrtime to mirror node (and provide a ns-level timer)
comment the test script
Clean up the long filename test as it functions but Windows doesn't like the long named file for parts of its API.
wrap the tests in a shell script so that on a properly set up windows build host (one with git for windows installed and *.sh files associated with sh.exe).  this is needed when the tests rely on unix commands like openssl.
Modified so that "make bundle" works on OsX machines by making it more generic.
instanceof(everything, nil) == true?
Remove duplicate dependencies from the project files. ljamalg.c includes all those files.
make yajl build honor CFLAGS
Make the message one line.
Make the message shorter, reference the tickets.
Add info about a timer bug fix.
ChangeLog: add 0.6.0 changes
Handle the environment variable being changed out from under the reading thread.
fix unused variable
put the *nix code back.
deps: luajit.gyp: fixup to include new sources
Update bundled luajit to 2.0.0 stable release
Bump libuv to latest stable release (nodev0.8.16) and http_parser to much newer version
fix linking order
fix dist_build to set Werror to 0 on releases
fix install rules
give options for debug symbols and -Werror
provide options to unbundle more libs
remove automagic dep on openssl
Add a test which demonstrates the problem and fails before my fix (4a6e25394fc53f572f49300b02bc9335eeeba126).
windows: fix process spawning
lib: luvit: tls: copy _pull logic from node
Use automatic text detection for everthing not explicitly set.
assume everything defaults to text
additional windows long path edge cases and a test script to cover many simple and edge cases.
force the CA and fixtures in test to be treated as binary files, this way the tests work.
Re-normalize the repo with respect to CRLF as per https://help.github.com/articles/dealing-with-line-endings
Remove relative path parts from Win32 long paths as they are invalid.
Generalize the the lua fs calls to native_uv in a way that the parameters can be modifed.
stat and rename additions to fs.lua that include the long path fix
Correct the regexs to be lua style patterns.
long path fix for windows
Update .gitmodules
Create a windows case for test-ffi.lua using an approximated signature for SleepEx.
tests/test-fs-chmod.lua - Change windows specific checks to use os.type as the other tests do instead of process.platform.
gitmodules: move to a mirror of luajit on github
Make this test open the file with the same parameters used in node.js.  Then the truncate calls work.
Revert "lib: tls: remove unused function"
Change the stats table call to accept a uv_statbuf_t* instead of a struct stat* because the struct stat does not use a 64 bit value for size.
support no colorization on utils.dump
Update api.markdown
tests: test-http-timeout: the http code now throw socket hang up
emit error on http clientrequest ...
lib: luvit: tls: implement end and done
lib: tls: use nextTick instead of setTimeout
lib: tls: remove unused function
lib: net: Socket: set destroyed earlier
lib: net: implement Socket:done
luvit: net: Socket: remove bizarre pipe implementation
luvit: core: pipe: copy didOnEnd logic from node
uv: stop using closed and use close
tests: test-tls-remote: fixup to match node
net: Socket: don't shutdown if destroyed
change _MSC_VER to _WIN32
undo whitespace changes
moved windows data macros to luv_portability.h
luacryto bump
Added S_IS* macros for windows to flesh out the fs.stat struct
luv_process: fix two compiler warnings
src: luv_tls_conn: fix compiler warning
add get and set functions for UID/GID on POSIX OS
Bump to latest stable libuv matching node-v0.8.11
Object:extend now works as expected.
deps: lcrypto: check for errors in fverify and friends
deps: lcrypto: check for errors in fverify and friends
luvit: tls: remove spaces on an empty line
dns-tests: use luvit.io
forget to free req when tcp connect failed
Makes a https server easier...
SyncWriteStream breaks _G.len
revert uv
return 0 from luv_close
bugfix: check for closing handle
Tidy up new stream example
Add new stream, new fiber, and new continuable examples
disable the multicast test for now
replace tabs with spaces to maintain a cindent style.
Add two hello benchmark apps
Copy web demo into examples folder
http: fix Host and chunking
remove gettop() and assert, add a test case that create a socket handle in fiber.
fixed #319
Only close stdin if its not already closed -- allowing apps to close stdin if they wish
Port test-fs-utime from node.js
win32: remove O_SYNC from windows
references: add ref/unref functions to Handles
Use good-style if-statements (avoid one-line if-statements).
Port test-fs-append-file from node.js
Port test-fs-write-sync from node.js
Port test-fs-truncate from node.js. Add fs.truncate(Sync) and modify fs.ftruncate(Sync).
Port test-fs-long-path from node.js
luajit: enable FFI flags
tests: test-ffi: initial commit
Add super to Object.meta. Add instanceof to core.
Remove the 'utf8' arg.
Port test-fs-readfile-zero-byte-liar from node.js
Port test-fs-readfile-unlink from node.js
Port test-fs-readfile-empty from node.js
Port test-fs-read-file-sync from node.js
Port test-fs-append-file-sync from node.js
Port test-fs-fsync from node.js
Port test-fs-read from node.js
Port test-fs-write from node.js
udp: fix 64bit
Port tests/test-fs-stat.lua from node.js
tests: test-tls-client-econnreset
luv_process: ensure handle is not null
luvit: uv: Stream: guard against writing to closed stream
tests: test-net: double destroy the handlle
luvit: uv: Handle: set _closed when closed received
tests: runner: do recursive remove on tmp
Ignore dirty submodules.
tests: test-fs-chmod and fixtures ported from node.js
Support 'rs' and 'rs+' for flags in fs.open()
Support omission of mode when callback is also omitted.
tests: test-fs-open ported from node.js
tests: test-fs-exists ported from node.js
tests: test-fs-write-file ported from node.js
tests: test-readdir: initial commit
tests: test-net: ensure double close returns error
luvit: net: Server: clear _handle to nil
luvit: timer: avoid double close
luvit: uv: Handle: avoid double close on handles
common.gypi: remove GCC_VERSION on OSX
luvit: uv: remove stdin pauseNoRef()
tests: test-socket-timeout: use luvit.io
luvit: uv: Timer: replace ref logic with close
debug: add support for displaying all or active handles
luvit: uv: Process: stop opening pipes
test-dns: note why we are calling deprecated functions in test
luv_process: upgrade to libuv 0.8
common.gypi: bump to OSX backwards compat to 10.6
lib: luvit: bind to new uv_ref/uv_unref signatures
deps: uv: bump to v0.8 branch
UDP support
set default value for '--prefix'
use the variable luvit_prefix for installation target directories.
Add an install target for the gyp build system. After running 'make -C out', run 'sudo make -C out install'.
bugfix: dns crash in getaddrinfo
Don't call pauseNoRef whenn operating on a file which uses pure lua implementation of a stream.
Don't call pauseNoRef whenn operating on a file which uses pure lua implementation of a stream.
updated style
allow the user to pass in a nil timer
Makefile: introduce dist_build target
lib: Remove useless conditional in process __pairs metamethod
lib: Add magic process.title getter/setter property
lib: luvit: http: remove nextTick from onSock
lib: luvit: uv: fix setup of stdout/stderr
lib: luvit: uv: get tests running again by fixing stdin pause
lib: luvit: refactor the stdin pause logic
lib: luvit: uv: implement pause/resume
stdin: really? ick
add comment to luv_read_stop_noref
add comment for pauseNoRef()
add a readStopNoRef function
Revert "unref"
Revert "stdin: really? ick"
Revert "lib: luvit: uv: implement pause/resume"
Revert "lib: luvit: refactor the stdin pause logic"
lib: luvit: refactor the stdin pause logic
lib: luvit: uv: implement pause/resume
stdin: really? ick
windows: fix build
unref
stdio: testing on windows
windows: fix build
tty: add pause and resume
deps: luajit: disable dynasm line number insertion on windows
deps: luajit: fix 64 bits and windows
deps: luajit: fix luajit build for gyp
Wrap uv_(get|set)_process_title
Upgrade to luajit v2.0.0-beta10-62
Tidy up querystring.stringify
Add order array option to querystring.stringify
README: add build instructions
Add querystring stringify, url{en|de}codecomponent
Updated release version - looked like it was a bit out of date?
Makefile: make clean misses zlib and lcrypto
ChangeLog: 0.5.0
http: Rewrite the http client to be node-like
Make fiber sugar more useful.
add Buffer:toString(i, j)
Only run files that start with test, not just contain test.
it's VERSIONISH for gyp. meh
fix gyp tarball
fix make tarball
move dns.isIP* to net.*
add API changes
release: changelog: fixes #247
Use a double for now too, so we can use it on 32bit machines instead of just 64
tcp: fix handle reference for ipv6
dns: fix ipv6 resolver
tools/gyp: bump with warn on duplicate fix
gitmodules: use luvit/gyp
tools: gyp: use a submodule
lib/luvit/tls.lua: Changed function call to createCredentials in connect()
lib/luvit/tls.lua: Added code to tls.connect() to allow for context import
HRtime is a double, lets put it into luvit as a double
bump openssl
Move skinny confiugration to configure
Default luvit_skinny to false
Upgrade OpenSSL
luv_stream: convert to use luv_callback_state
utils: introduce luv_callback_state
Be consistent - remove extra line break.
Make sure chunk is a string.
Add headers for getpid()
memset options structure to prevent use of unset members
If avail_in is 0, rc could be unset
Remove print statements.
Upgrade zlib
Add tests for url.parse.
Add parseQueryString argument to the url.parse so it matches signature in node.
lib/luvit/fs.lua: Added error that breaks if non-string is passed to writeFile
Added tests that the files/directories being deleted by the uninstall target are in fact the correct types (i.e. a file or a directory)
Makefile updated with tests for both install and uninstall. The general test target will now also run these tests.
Added uninstall to the Makefile
luvit.lua: retrieve PID directly from native.getpid()
tests: process: test for non-nil pid
luv_portability: windows: define getpid as _getpid
luvit.lua: map process.pid to native.getpid()
luvit_init: remove function call from assert()
fix build on windows
luv_fs: fix gc of string during a fs.write
luvit: add process.exitCode
change hrtime to be in resolution of milliseconds
tests: test-tls-client-reject.lua initial commit
lib: tls: add error handling for missing servername
lib: tls: _pusher return -1 when ssl is nil
tls: hookup passing back the error string to lua
tls: use a global root_ca_store
fix the root_certs
Revert "free the x509 store"
Updated the version in README.
free the x509 store
Store line numbers when bundling luvit
tests: test-tls-connect-simple: do two connections
tests: test-tls-client-abort2.lua: add
test: .gitignore tmp dir
build: fix build on solaris
luvit.gyp: add -g flag to luajit
tools: build.py: fixup spacing to use 4 spaces
fix: yajl.gyp on windows. closes #192
Use the more portable uintptr_t number type for storage in void* data
fix environment passing and get openssl tests running on windows
fix for upgraded protocols
Remove unnecessary asserts
tests: fix windows tests
C89 compatibility + fixes
Add start of luv_handle based userdata refactor
lib: tls: remove semicolons
api.markdown: remove instance of :end()
unref the json object
tests: timer: verify timer timeout
use local
add recursiveTimer test
added os.clock to os luvit os module
prep changelog for 0.3.1
lib: luvit: fix double error in net
add TODO
copy all libuv header files when installing luvit
cleanup interval correctly
add clearTimer changelog entry
fix clearTimer and add test
move the libraries to the end
build fixes for ubuntu 11.10
remove retvalString since it isn't used
fix comment from node
fix Vladimir's name and retab to spaces
lib: tls: remove debugging print in emit
add changelog
lib: streams use destroy() instead of close() and make tests pass
lib: net: make streams use destroy() instead of close()
lib: tls: fix test-tls-client-abort test
use isEmpty
remove debug statement
fix timers taking a reference within the event loop
fixes
more timer changes
tests: tls: enable tls tests
add test and fix timer for multiple timeouts
tests: add test-net-connect-handle-econnrefused
lib: net: fixup error handling for socket
lib: luvit: add process.nextTick function
fix process:on('exit'... within the tests
add test-tls-peer-certificate
add test-tls-junk-closes-server
add socket address test
fix windows
add tls request timeout test
split flags
accidentally moved the luajit pin
make insert private
timer improvements
add tls-session-cache test
add test-tls-server-verify
add tls_server_verify_test
add sni support and debug support
Look for the right file in zlib's dep
Don't nuke zlib when creating a tarball
Add local gitmodules for openssl and luacrypto
Update to latest luajit
it works locally
fix order of deps
fix dep on luacrypto
fix the dependency on zlib
suppress the error string if pkg-config doesn't exist
fix warning and error on incompatible pointer type
deps/luacrypto: use the luvit/luacrypto repo
lib: utils: stop using Bwhite and add B color
tests: runner: create tmp dir in runner
Revert "tests: test-pipe: fix for windows"
use userdata for json objects
tests: test-pipe: fix for windows
deps: luacrypto: bump to fix windows
fix DEFINES and CFLAGS on release
add test
buffer writes before connect
windows fixes for zlib
fix build on windows
lib: fs: add WriteStream and implement fs.createWriteStream
deps/luacrypto: add a crypto library
bump openssl for 32bit fixes
fix build with upstream
fix build with upstream
free json contextes
zlib binding added, with stream interface
Add http benchmark examples
test for iStream:pipe()
amend typo
extract Response:done(), to be used in iStream:pipe()
http.Server: do not die on sudden error conditions
obj:removeListener(name, nil) removes all listeners for name
listen(): allow for specifying backlog size
keepalive: sudden EPIPE fixed
Show the actual error from the http parser
fix 32bit builds
Detect architectures not yet supported, and exit out, rather than continuing silently.
Handle more architectures, mapping them ia32.
improve Connection: logic, for `ab` is HTTP/1.0!
really serve Connection: keep-alive
really serve Connection: keep-alive
do not pass empty data chunks to http_parser
do not pass empty data chunks to http_parser
Initial Implementation of keepalives for http.
Update dependencies
Autodetect system openssl. make USE_SYSTEM_SSL=0
fixed for windows build
allow chaining for emitters
added catchall error handler
Do not polute global namespace with useColors and fix typo
update color constants on luvit -n
fix repl parse error handling issue
Do not polute global namespace with useColors and fix typo
update color constants on luvit -n
fix submodule
add makefile support for tls and bump openssl dep
pointed to right openssl headers
expose openssl version
build with openssl
use retry when debugging is turned off
tweak callback declaration
chunked encoding for http.request
add connect simple test
use original openssl without the header tweaks
move tls tests to their own folder
set the callback in the net module
back out ssl changes to makefile
first unit test passes!
fix some errors and add the root certs
fix a warning and include the right include paths
fix typo
add dvv's patch
add test-tls-set-ciphers
add openssl locking and init + bug fixes
add doesnt_throw test
add test-tls-client-abort
wire up bindings
fix root_cert header file
add addCACert
get rid of a stopping point comment i made
more consistent license blocks
fix spacing -- from comment
add license header to luv_tls.h
cleanup luvit_exports
add TLS source
provide a fallback include/
prettier
Remove quotation marks
Least-loaded worker
luvit: path: add os path modules
don't nil out _handle quite yet
fix to use istream
http.request: update method overriding
remove r2
use upstream uv version
Change Server to emit a Socket instead of a raw handle
only call :done() if it exists
pass a Socket() instead of a low level handle
add support for drain and writeQueueSize()
add drain
http.request: fix connection callback signature
buffer writes to unconnected yet http stream
http upload test honors listen is async
typo fixed
typo fixed
even more symmetricity -- request should also support upgrade
source formatting
expose http bugs
make end and error handlers one-time, to not finish parser twice
make request and response more symmetrical
do not set chunking mode if chunk is empty
do not parse empty chunks. either this, or remove the same from the server code
added note on headers order
request.upgrade was handled earlier
do not double-close on error; first finish parser, in case of error handler is undefined
fixed typos
modules.require: make relative paths for require the same no matter the platform
Don't try to install a file that doesn't exist
Clean up --libs and --cflags
remove excess debugging statement
make luvit report building flags
remove net2
Update examples to match luvit.io
Add link to mailing list
Update README to match luvit.io
Update http examples for new API
Turn off LUA_USE_APICHECK and lua debugging symbols by default.  Also don't put zlib in tarball yet
Sort modules in generated luvit_exports for deterministic output
Update README to use new HTTP API
Make host optional in net.Server:listen()
Remove net2
Update generated API docs
bump libuv to include windows fix
bump libuv
luvit: module: use path.join
luvit: path: don't normalize in path.join
tests: fixup for windows
refactor http
luvit: uv.lua: Pipe:new takes ipc param not fd
FIxup for linux
Add missing require in module.lua
HACK: fix repl on windows
luvit: fix path/fs in windows
luvit.lua: don't use tty on windows
lib: luvit: luvit.lua: use OS_BINDING.type()
don't use colors when output is not to a TTY
Add -n, --no-color option flag
fix dependencies. be explicit
move the header generation and copy to a new target
force static_library for yajl
add all target
use luvit target
generate MSVS 2010 project and use msbuild
fix gyp build
Collapse wrappers for Tcp, Stream, and Handle too
Collapse native methods for Process, Tty, Udp, and Pipe
Remove function layer from Timer methods
Include latest generated API docs
Rename old uv module to uv_native. Move all libuv types into the new uv module.
Commit newapi.txt notes
Remove isIP function from net, they are already in dns
Update mapping to include freebsd 9 and 10.
s/Node/Luvit/g
Remove semicolons, it's lua not javascript
Commit API stubs for a very node-like net module
Update bundled bype to r1201
Add tarball target back
Add zlib to tarball's gitmodules.local
don't ignore the luvit_exports.* for now
Clean up stream file
Close streams on error
restore luvit_exports and fix luvit.gyp
clear the socket connectTimer
JSON tests added
Use camelCase in joystick example
Use -1 for null offset in fs.read
Update API docs
Update joystick example to new API
Update the other examples
Remove require example, the unit test is better
Update fs examples
Don't try to load exports file in non-bundle build
Ignore generated exports files
Add bundle make target
Add process.execFile
Remove exports functions
Add writeFileSync
Replace assert with error instance safe assert
Show error message in syntax errors
typo
update readme to conform new API
Add back in install target
Move library yet again, but make more robust
Rename lib to modules
Add back in test and api make targets
Don't bundle lua scripts in binary
delegate error events from http parser to higher levels
fix Stream:shutdown signature, to properly delegate to userdata
Emit "end" for http.Response
fix c89 in vector.luvit and build issue with gyp
fix the depenendencies with gyp
Clear up use_null logic
Don't force options.use_null
Don't make options requires for JSON.parse
lib/json.lua: tough typo fixed
Dynamically allocate the ports used for network based tests, starting at 10001
Add a very simple http test
clarify if and use size_t for lengths
bug in parser -- no headers were reported
point to the correct binary on windows
fix gyp
Include pre-rendered API docs for viewing on github
Really the rest
The rest of the object refactor
Remove modules that were rolled into 'core'
Add IRC hook to .travis.yml
Add iStream stub to core
Add Handle, Error, and Stream to core
Put core comment near declaration
Add core to the build and add in Emitter and Handle to core
Put new object system in 'core'
make api should depend on lib/*.lua, be phony and not stage result
Add linux-joystick example
add travis support
add swap files to gitignore
remove temporary swap file
Clean up naming conventions.
Snake to camel case.
Don't filter out section headers
Add api make target
Make doc parser a little more robust
Unify format of a couple libraries so docs parser can consume them
Write doc parser for luvit
Don't require building a binary addon in normal test suite
add target to gyp for vector library
Add zlib as dep in preperation for bundling it
upgrade libuv
Handle that windows produces luvit.exe
If we had any tests that failed, exit 1 instead of 0
Add buffer module
Make emitters preserve insert order of listeners
or netdb for that matter
windows doesn't have pthread.h
fix indent
windows fixes
c89 conversion
Update luajit and libuv
Add more methods to the buffer prototype
Add more methods to Buffer class
Add __ipairs metamethod for Buffer types
Add basic mutable buffer
Make Error instances tostringable
Add Emitter.prototype:wrap() to help event emitters deal with callbacks in the prototype
Normalize the path before checking the module cache
bump http-parser
Allow nil offsets for FS.read
Lookup luajit version too
Update deps versions
Update Sdl example for new oop syntax
update deps
use less probable port for tests
add luvit_exports
fix dependent_settings
fix gyp build
Begin to fix http
Add watcher type and update example
Allow for non-userdata streams
Update test-utils to use new OOP library
Get most of the refactor working again
Require :new for fiber to be consistent
Use :new for stream in fs
More OOP refactor
Document object tree API
More refactor
Making progress on oop refactor
Refactor error.lua to use new objects
Clean up method signatures in emitter
Refactor Emitter
Add object and handle modules to exports hack
Add object and handle modules in prep for object system rehaul
More -lrt flag for linux
fix rt on osx
fix dns support
Don't print "Done" when error occured
Link in system libraries after all our other libs.
Add JSON and querystring in both GYP and the exports
Add license headers and rename to be consistent with the rest of the api
add missing headers
Make init and exports part of the base lib
add creation of static library for luvit
debugging stmt removed
Utils.bind: signature reverted, to match usual; flaw with mangling bind_arg is fixed; tests added
tweak help -on --arch
remove target_arch within gyp_luvit
remove generated file
add --arch option to configure
cleanup build on osx
accomodate for the latest http_parser -- excess parser:finish() removed
do the suck it in from the library side, no need for it in main
use size_t to reduce warnings
Add a hack to suck in all byte code symbols on all platforms
Compile libluvit as a shared library.
Improvements to portability and accessing environ on OSX when compiled as a shared library.
Add hard dep on lua itself so include paths get setup righ
options.gypi is generated by configure
Remove generated file
Split the library out from the main executable.
Put the Lua State first to be more consistent
Start splitting out the main function from the init/running of luvit
Update luvit.gyp to handle new OS module and VERSION changes
Add tcp keepalive and nodelay
Don't kill local VERSION variale
Add binding for auto number port too
Add bindings for http_parser_parse_url
Add proper version for http_parser
Proper version for uv too
Don't conflict with built-in YAJL_CONFIG
Add proper versions for yajl and luajit too
Clean up work dir after making tarball
Get version from makefile
Better tarball target
Add tarball target for makefile
Clean up temporary 'os_binding' module
Copy over os.time as well
Copy over os.date from built-in os module into new os module
Add OS module
allow lua-config.lua work with symlinked luvit binary
add invalid command
add functionality to build.py for testing
fixes for windows
add test file
ad bind to utils
restore dependency
add assertion function and fail string
give us status as we go along
update gitignore
add test runner to makefile
add initial pass to a test runner
Return all results in json parsing (Useful for allow_multiple_values=true flag)
Don't link yajl makefile, copy it
Use copy instead of link for yakl makefile
fix the crash and cleanup
fixes for http.lua
just pass data along
Set Socket._connecTimer to nil after it has been closed
Set Socket._connecTimer to nil after it has been closed
use startswith and endswith
fix bug in lame_sed
going to test lame_sed on windows
include lyajl.c and whitespace cleanup
integrate gyp and yajl
Add lyajl to gyp build
Use Apache 2.0 License consistently throughout luvit
Move git submodule step out on it's own
JSON fixed
upgrade http
Clean up old crufty argument that doesn't work anyway
Make dependency on yajl dep sooner
Remove yajl example
Implement print_callback os yajl generator
Implement JSON.stringify()
Add null support
Add JSON.parse wrapper
Commit current state of yajl.  Not working
use startswith and endswith
fix bug in lame_sed
going to test lame_sed on windows
include lyajl.c and whitespace cleanup
integrate gyp and yajl
Making progress on yajl bindings
change to connectionCallback
add clear_timer to close method
call close
emit an error
include helper in test
style nits
add unit test and fix various things
add net.lua to gyp
fixed for tcp-echo-client
change tcp example to use net
add server support
add net.connect
add bytesWritten and bytesRead
cleanup
remove set to nil
remove unneeded functions
cleanup
much better
remove prototype
add timeout support
use super.meta
tweak inherits
beginnings of net module
Stub out yajl bindings
Update http-parser and libuv
lua variable scope fixed
add bogus ip check
add isIP support
fixed querystring.parse to support custom delimiters
attempt at drafting deep_equal for tests
added basic unit test for querystring
refactor errors
check for explicit ARES_SUCCESS
remove the macro
basic querystring helpers added
http connect fixed
finish porting to luv_get_loop
set the channel and loop within the lua_State
migrate code to luv_portability
add portability header
move AF_INET and friends to constants
fix stdin/stdout on windows
cleanup
use uv_cwd
fix snprintf on windows
another windows fix
windows fix
node returns an array for cname
force getaddrinfo to call the callback with an error
only return a string on cname
fix cname
cleanup
add more tests
add the rest of the DNS helper functions
check status codes of ares callback
fix gethostbyaddr
add beginnings of dns module and test
implement getaddrinfo
add getHostByAddr
add SRV
add TXT support
add NS
add mx
Add CNAME suppor
add AF_* exports to lua
add IPv6 support
dns support
Break Stack.mount into Stack.mount and Stack.translate
Add comment for uri parsing in Stack.mount
Revert uri change in stack, it was right
get rid of magic while handling multiple headers, or headers containing spaces choke `flush_head`, since regexp is wrong for such headers.
Put in hook for C modules to find their path by traversing package.loaded
remove prototype
add error class to luvit
Add deinstall/uninstall target
fix parallel build
fix build on linux
remove generated file
cleanup whitespace
tooling for windows
add automatation helpers
Update message to show right make command
ia32 on windows for now
reformat
fixes for linux
Gyp build for windows, linux, osx
Add in missing bin folder
Bump version to 0.1.4
Add luvit-config tool to make building addons easier
Put versions on the process table
Make `Path.dirname` work with paths ending with slashes
Add basic tests for `path` module
fixed probable dependency on host Lua
added options to save debug info
Bump version to 0.1.3
Update uv and luajit deps
TCP echo client example
Minor tidy
Don't git pull on every make, only if the deps are missing
fix tabs
Use ipairs to iterate over arrays
Update luajit and http-parser
Add initial version of http client
Update deps and fix make clean bug
fixed misterious assertions, and realpath()
ENOTDIR is also considered a not found file
Add near easteregg
Bump version
Make symlink test harder
Clean up require and implement package.lua main lookup
Support for non-tty input (pipes or files)
Add more robust loading of .luvit files (fixes OSX)
Ignore compiled files in git
Clean the native example too
Remove literal matches from require search path
Update libuv
Update example in README
cleanup
environment is inherited unless explicitly set
fixed polluting typo
fixed number of args expected by Fs.rename()
fixed malloc() bug in process.c
Remove unnecessary DESTDIR variable from Makefile
stupid merge.. honor DESTDIR
Get rid of the sed hack. Luajit build configuration is now in root's Makefile
wtf again
Oops
Ignore double sed issue
Do not strip binary on OSX only.
Do not strip when installing to bypass an initialization issue
Tag version
Remove extra slashes in install dir
Don't get to fancy with sed, linux didn't like it
Oops. I mean CoreServices instead of CoreFramework
Use CoreFramework instead of Carbon to build on OSX Based on https://github.com/MSch/luvit/commit/2910b9925f03ea57561f4f02b4d4570580d0044b
Don't use deprecated lua_open
Update luajit and uv versions
Update deps
Get around on_alloc not working
Update sdl example to work again
Attempt to make reading a socket work with ffi
Get ffi sample writing to a socket
Get enough of ffi working to listen on a port
Make some progress on ffi version of uv
Update luajit to get ffi callbacks
Update uv
Port luvit to Windows. Most changes are to make everything compile under C89, by declaring data before code.
fix order of params
unsetenv doesn't have a return value on many platforms
uv_fs_event_init now has an extra flags param
Pipe connect returns void
Add experiment with ffi
Add failing unit tests for the rest of require's functionality
Simplify native example to not require exotic external libraries
Small Tidy of module search path logic.  We can assume dirname is normalized
Wait for pending writes to finish before closing the http response
Don't rely on Debug.getinfo().source, it's unreliable.  Instead create a dirname aware require for each module
Allow underscores in builtin modules
Remove Emitter.prototype:add_listener
Don't exclude the cache lookup
Don't use the builtin loader for anything other than simple names, it gets confused and breaks stuff
Don't use `code` for headers, it looks bad on github
Start writing API docs
Update luajit
Add sample stack app
Implement Stack.compose and Stack.mount
Add stack library
Clean up tests even more
Only show test results for failed test
Pretty up test runner results
Tidy
test/ -> tests/
Add test suite
Organize the unit tests
Write our own require function that caches properly
Add checks in module test
Add module test
Clean up command-line stuff a little more
Allow more options after a -e option
Add proper command-line arguments
Use the new FS.read_file_sync to load modules
Tidy
Remove extra line at start of repl
Add better error reporting for FS_* exceptions and add FS.read_file_sync
Implement FS.exists and FS.exists_sync
Wrap core fs_* functions with forced sync and async wrappers
Implement sync versions of fs_* on the C side
Exit from luvut, not gtk
Add example of native addon
There is a difference between a missing .luvit module and a broken one
Implement a basic Path.resolve
Get stack traces for errors on the first tick too
Update libuv to 179f475 to match node v0.5.10
Implement bundled module search algorithm
Implement absolute requires, but is pending a fix to loadfile
Implement a more robust relative require
Update CGI parity notes
Add CGI parity notes
Add lua to the mime database
Update uv and luajit
Remove bad file
Add logic to guess if there is content and adjust auto headers accordingly
Give upgrade requests access to the raw client if they want it
Add mutable headers for easier middleware
Add in completion callbacks into the response methods
If only one function in a module is loaded, don't reference the entire module
Make response auto headers configurable via prototype for finer grained control
Make the auto headers configurable
Tidy
Implement auto headers and chunked encoding.  Also response:finish()
Implement 100-continue
Clean up custom emitter hooks and fix nasty http event bug
Don't use private APIs in the repl
Try another possible solution for upgrade
Don't hold open the event loop for signal handlers
Update uv ane luajit
Update examples
Possible fix for upgrade events
Add special __filename and __dirname magic getters to the global environment
Add Path.join
Implement getcwd
Add initial implemention of path module
Speed up debug lookup to get caller's file
Make relative requires be relative to the file that required them
Add tcp_nodelay implementation till libuv implements it properly
Ignore SIGPIPE and exit cleanly on SIGTERM and SIGINT
Implement user configurable signal handlers
Attempt to capture signals
Clean up error handling for file watcher
Allow namespaced access to raw timers
Remove a couple examples
Don't pcall the event source, it's trusted
Clean up existing error handling for async errors
Mark what needs to be done for async errors
Don't kill dofile yet
Create a process global and move some stuff to it
Add simple test for TCP server and client
Allow passing extra args to callback functions
Implement luv_udp_set_membership
Speed up Utils.dump()
Add start to SDL example
Get actual stack traces on event source errors
Add an upgrade event to help with websockets
Emit end in the right place, and it's more reliable
Emit end on http requests
Implement check_type
Change luv_emit_event to remove the userdata before calling the function so it works in coroutines
Add asserts to luv_acall for sanity checking
Add timeout in the coroutine mix to show it's not just FS operations
Clean up coroutines
Implement part of UDP
Update uv and luajit
Update comments and todo list
Implement process module for spawning and killing child processes
Remove junk lines
Clean up read stream a little
Add range support in file streams
Keep evaluate_line from leaking into the global
Remove freenode.txt, we have our room now
Add in initial version of Stream.prototype.pipe
FIx a nasty concurrency bug caused by global functions
A bunch of changes including a mostly working http static file server
Add mime to the makefile
Make extensions case insensitive
Add mime library
Clean up read stream a little
Add FS.create_read_stream
Add len to FS reads too
Don't bake coroutine wrapper into fs module itself
Speed up Utils.dump considerably
Update graphviz docs to have request and response
Use the existing len argument
Rafactor HTTP module to use unified streams
Clean up lua code a little
Don't hardcode the ip and port in tcp
Update examples
Add create_server wrapper for tcp servers
If 'error' events happen and there is no listener, then throw them
Status is never useful in streams, don't send it to the lua layer
Move docs into own folder
Add types graph
More unified APIs for EventEmitter hierarchy
Add unified TCP library
Allow userdata wrappers to be used as self in userdata methods
Give even more info on stream results
Give meaningful error messages after write in streams
Rename fs_after to be after_fs like the rest of the system
Move FS error handler formater to utils so streams can use it too
Update uv
Update uv
Clean up and refactor fiver and event stuff
Improve print to take any type and pass event name to event_source
Close the lua_State in error too
clean up luvit.lua
Hook into lua side event hook
Make the callback optional for write and update
Remove printfs
Drop events in suspended threads for now
Create a single helper for event sources
Treat warning as errors
Add a lua based event source
Too many pcalls happening
Turn on API checks in the makefile, we're still developing
More lua style cleanup
Clean up the color API
Update uv
More cleaning up and unifying the terminal I/O
Tidy up lua code
Add env sugar with virtual table `env`
Implement env module
Don't create process global, just make argv a global itself
Move execpath to be lua accessible
Factor out misc functions into own file
Stub out process and clean up a little
Commit pipe_* and a bunch of other random stuff
Implement event_emitter:once
Implement uv_ref and uv_unref
Update uv
Implement tty module and make repl non-blocking
Implement timers
Add basic event emitters for program logic
Implement FS.read_file and FS.write_file
Update uv
Stub out timer functions
Update uv
Clean up and mark remaining uv function to wrap
Implement fs_watcher type
Add freenode.txt to prove I own this project and claim the #luvit room on irc.freenode.net
Add docs for fs_watcher type
Add examples testing fs.readdir
Use built-in luaL_error
Implement more fs_* functions (readdir, symlink, readlink, fchmod, chown, fchown)
Implement a bunch more fs_* functions (fsync, fdatasync, ftruncate, sendfile, chmod, utime, futime, lstat, link)
Implement fs_rename and fs_fsync
Move fiber function into fs module.
Update libuv version
Make sure coroutines don't swallow errors
Add a saner coroutine wrapper in the example
Update title in README to match project description
Add proper error routing for fs_* functions
Add looping to coro example
Add FS wrapper module for easier use
Implement fs_stat and fs_fstat
Stub out the rest of the fs_* functions
Move stuff around
And finally factor out ttp stubs
Factor out pipe functions into own files
Factor out udp stubs
Factor luv_stream out into it's own files
More refactoring, pull out tcp and handle
Factor fs code into it's own file
Get coroutines working for fs_* async functions
Add more debugging to the coro example
Add color for threads too
Attempt at using coroutines to serialize async operations
Add repeating fs test to look for memory leaks
Refactor the fs_* stuff a little
Update uv to get proper error messages for fs_*
Factor out commoncallback stuff from fs_* functions
Use strings for file permissions mode
Clean up dumping code a little
Add a blocking repl to the executable.  TODO: make non-blocking
Add process.exec_path
Implement fs_mkdir and fs_rmdir
Escape backslashes and null characters in dump
Implement fs_write
Implement fs_unlink
Implement fs_read
Implement fs_open and fs_close
Stub out some of the FS functions
Add jit link to help building
Change to MIT since more people know that
Update uv
Implement the rest of the TCP functions
Remove spaces
Implement the rest of the stream methods
Milestone. works as shebang interpreter
one more tweak
Clean up Makefile a little more
More attempts to embed the lua scripts
Supress a warning for now
Attempt to bundle lua scripts into binary
Remove a debug line
Clean up makefile a little
Builtin libraries should be in the path
Update deps
Update examples in prep for builtins to be in path
Try to embed the standard library in the binary
Move to luajit from git
Update README
Organize code in prep for built-in libs
Update uv
Less segfaults
Stub out more stuff
Re-order TODO sections to make more sense
Stub out more functions
Organize types and properly assign methods to right userdata types
Clean up markdown in TODO list
Add TODO notes to keep myself sane
Minor refactor and error message cleanup
Update libuv
Organize the uv bindings and make them more 1-1 with the uv_* functions they call
Go back to using luaL_register for lhttp_parser.c
Remove an annoying printf in the raw C webserver
Update the README
Add ISC license
Rename project and update submodules
Plug a major memory leak thanks to valgrind
Keep stack stable and add asserts to ensure no bugs
Get basic HTTP hello world working at 20280.21 request per second!
Get full TCP echo server working
Syncing up
Reading from client is now working
Get a TCP server listening
Implement more luv
Make colors be names so it can be used externally
Start to implement luv
Tidy up dump output
Clean up main.lua
Add much better value dumping
Add in missing lua files
Clean up lua code and add response sample
Remove cruft comments
Clean up logging in sample code
Finish initial implementation of http_parser bindings
Implement more of the http_parser bindings
Implement enough to get parsing events to printf statements
Clean up the code
Implement part of http_parser.new
Update libuv
Update libuv
Start binding by exposing the version numbers
Build aith APICHECK for now while developing addons
Refactor.  It's starting to take shape
Update to latest libuv
Strip trailing spaces
Working libuv http server updated to latest API
Get more stuff building right
Start to use lua
Ignore built files
Add proper makefile dependency on lua
Add basic file that links against bundled lua
Bundle source for LuaJIT-2.0.0-beta8
Initial Commit
